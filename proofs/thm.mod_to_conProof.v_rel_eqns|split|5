Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.mod_to_conProof
% (98388)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 995
% Passive clauses: 10031
% Generated clauses: 22781
% Final active clauses: 995
% Final passive clauses: 8354
% Input formulas: 69
% Initial clauses: 501
% 
% Duplicate literals: 513
% Trivial inequalities: 41
% Fw subsumption resolutions: 1496
% Fw demodulations: 414
% 
% Simple tautologies: 285
% Equational tautologies: 88
% Forward subsumptions: 9992
% 
% Binary resolution: 14249
% Factoring: 3372
% Forward superposition: 1313
% Backward superposition: 705
% Self superposition: 9
% Equality factoring: 4
% Equality resolution: 43
% 
% Split clauses: 267
% Split components: 535
% SAT solver clauses: 602
% SAT solver unit clauses: 17
% SAT solver binary clauses: 78
% 
% Sat splits: 267
% 
% TWLsolver clauses: 602
% TWLsolver calls for satisfiability: 542
% 
% Memory used [KB]: 10874
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.mod_to_conProof
% (98412)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 803
% Passive clauses: 3281
% Generated clauses: 12504
% Final active clauses: 793
% Final passive clauses: 2450
% Input formulas: 69
% Initial clauses: 501
% 
% Duplicate literals: 119
% Trivial inequalities: 13
% Fw subsumption resolutions: 884
% Fw demodulations: 304
% Bw demodulations: 14
% Condensations: 159
% Global subsumptions: 16
% 
% Simple tautologies: 256
% Equational tautologies: 21
% Forward subsumptions: 3846
% Bw demodulations to eq. taut.: 24
% 
% Binary resolution: 4453
% Factoring: 305
% Forward superposition: 1312
% Backward superposition: 1100
% Self superposition: 7
% Equality factoring: 2
% Equality resolution: 26
% 
% Split clauses: 11
% Split components: 22
% SAT solver clauses: 4117
% SAT solver unit clauses: 482
% SAT solver binary clauses: 207
% SAT solver learnt clauses: 32
% SAT solver learnt literals: 10
% 
% Sat splits: 11
% 
% TWLsolver clauses: 4053
% TWLsolver calls for satisfiability: 8667
% 
% Memory used [KB]: 19573
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.mod_to_conProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.mod_to_conProof
% SZS output start Proof for thm.mod_to_conProof
fof(f123379,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f530,f1041,f1040,f529,f1043,f528,f1045,f527,f1047,f1039,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f9547,f9550,f9553,f9556,f9559,f9562,f9565,f9628,f9496,f9630,f9500,f9632,f9503,f9634,f9506,f9636,f9509,f9638,f9512,f9640,f9515,f9642,f9518,f9644,f9521,f9646,f9524,f9648,f9527,f9650,f9530,f9652,f9533,f9654,f9536,f9656,f9539,f9658,f9542,f9660,f9545,f9662,f9548,f9664,f9551,f9666,f9554,f9668,f9557,f9670,f9560,f9672,f9563,f9674,f9566,f10011,f10012,f10013,f10014,f10015,f10019,f10020,f10021,f10025,f10026,f10027,f10035,f10037,f10057,f10059,f10060,f10061,f10075,f10083,f10095,f10099,f10103,f10107,f10111,f10115,f10119,f10123,f10127,f10131,f10133,f10135,f10137,f10141,f10143,f10145,f10147,f10151,f10153,f10155,f10157,f10159,f10161,f10163,f10165,f10193,f10199,f10201,f10203,f10205,f10207,f10209,f10211,f10213,f10215,f10217,f10219,f10221,f12907,f12908,f12986,f12987,f12992,f12994,f12996,f13004,f13006,f13008,f13010,f13012,f13014,f13018,f13020,f13022,f13024,f13026,f13028,f13030,f13032,f13054,f13056,f13078,f13080,f13089,f13098,f13112,f13114,f13129,f13144,f13158,f13160,f13174,f13176,f13190,f13192,f13217,f13265,f13338,f13340,f13410,f13412,f13414,f13430,f13436,f13442,f13507,f13518,f13549,f13556,f13584,f13593,f13711,f13723,f13738,f13750,f13752,f13766,f13777,f13791,f13802,f13804,f13806,f13808,f13810,f15632,f15633,f15634,f15635,f13851,f13853,f13855,f13857,f13859,f13861,f13863,f13865,f13867,f13869,f13917,f13919,f13921,f13923,f13925,f13927,f13944,f13961,f13991,f13993,f13995,f14008,f14010,f14012,f14014,f14016,f14018,f14058,f14060,f14062,f14079,f14081,f14083,f14085,f14087,f14089,f14113,f14124,f14138,f14149,f14151,f14180,f14182,f14200,f14202,f14235,f14237,f14255,f14257,f14289,f14291,f14309,f14311,f14328,f14345,f14362,f14379,f14411,f14443,f14472,f14474,f14476,f14512,f14516,f14518,f14520,f14537,f14539,f14541,f14558,f14560,f14577,f14579,f14596,f14598,f14615,f14617,f14651,f14678,f14717,f14719,f14721,f14742,f14744,f14746,f14748,f14750,f14752,f14754,f14756,f14758,f14846,f14848,f14850,f14852,f14854,f14856,f14858,f14860,f14862,f14909,f14911,f14913,f14915,f14917,f14919,f14966,f14968,f14970,f14972,f14974,f14976,f14999,f15001,f15024,f15026,f15028,f15052,f15078,f15104,f15106,f15132,f15134,f15155,f15182,f15212,f15239,f15265,f15267,f15269,f15271,f15273,f15275,f15277,f15279,f15281,f15298,f15300,f15302,f15304,f15306,f15308,f15310,f15312,f15314,f15318,f15321,f15323,f15325,f15327,f15333,f15335,f15337,f15343,f15345,f15347,f15353,f15355,f15357,f15360,f15362,f15364,f15369,f15375,f15377,f15379,f15385,f15387,f15389,f15395,f15397,f15399,f15402,f15404,f15406,f15411,f15413,f15415,f15421,f15423,f15425,f15431,f15433,f15435,f15438,f15440,f15446,f15448,f15450,f15455,f15461,f15463,f15465,f15471,f15473,f15475,f15481,f15483,f15485,f15488,f15490,f15492,f15497,f15499,f15505,f15507,f15509,f15511,f15514,f15516,f15519,f15528,f15536,f15544,f15555,f15557,f15559,f15567,f15569,f15577,f15579,f15581,f15655,f15656,f15657,f15658,f15659,f15660,f15661,f15662,f15663,f15664,f15665,f15666,f15667,f15668,f15669,f15670,f15671,f15672,f15673,f15674,f15675,f15676,f15677,f15678,f15679,f15680,f15681,f15682,f15683,f15684,f15685,f15686,f15687,f15688,f15689,f15690,f15691,f15692,f15693,f15694,f15695,f15696,f15697,f15698,f15699,f15700,f15701,f15702,f15703,f15704,f15705,f15706,f15707,f15708,f15709,f15710,f15711,f15712,f15713,f15714,f15715,f15716,f15717,f15718,f15719,f15720,f15721,f15722,f15723,f15724,f15725,f15726,f15727,f15728,f15729,f15730,f15731,f15732,f15733,f15734,f15735,f15736,f15737,f15738,f15739,f15740,f15741,f15742,f15743,f15744,f15745,f15746,f15747,f15748,f15749,f15750,f15751,f15752,f15753,f15754,f15755,f15756,f15757,f15758,f15759,f15760,f15761,f15762,f15763,f15764,f15765,f15766,f15767,f15768,f15769,f15770,f15771,f15772,f15773,f15774,f15775,f15776,f15777,f15778,f15779,f15780,f15781,f15782,f15783,f15784,f15785,f15786,f15787,f15788,f15789,f15790,f15791,f15792,f15793,f15794,f15795,f15796,f15797,f15798,f15799,f15800,f15801,f15802,f15803,f15804,f15805,f15806,f15807,f15808,f15809,f15810,f15811,f15812,f15813,f15814,f15815,f15816,f15817,f15818,f15819,f15820,f15821,f15822,f15823,f15824,f15825,f15826,f15827,f15828,f15829,f15830,f15831,f15832,f15833,f15834,f15835,f15836,f15837,f15838,f15839,f15840,f15841,f15842,f15843,f15844,f15845,f15846,f15847,f15848,f15849,f15850,f15851,f15852,f15853,f15854,f15855,f15856,f15857,f15858,f15859,f15860,f15861,f15862,f15863,f15864,f15865,f15866,f15867,f15868,f15869,f15870,f15871,f15872,f15873,f15874,f15875,f15876,f15877,f15878,f15879,f15880,f15881,f15882,f15883,f15884,f15885,f15886,f15887,f15888,f15889,f15890,f15891,f15892,f15893,f15894,f15895,f15896,f15897,f15898,f15899,f15900,f15901,f15902,f15903,f15904,f15905,f15906,f15907,f15908,f15909,f15910,f15911,f15912,f15913,f15914,f15915,f15916,f15917,f15918,f15919,f15920,f15921,f15922,f15923,f15924,f15925,f15926,f15927,f15928,f15929,f15930,f15931,f15932,f15933,f15934,f15935,f15936,f15937,f15938,f15939,f15940,f15941,f15942,f15943,f15944,f15945,f15946,f15947,f15948,f15949,f15950,f15951,f15952,f15953,f15954,f15955,f15956,f15957,f15958,f15959,f15960,f15961,f15962,f15963,f15964,f15965,f15966,f15967,f15968,f15969,f15970,f15971,f15972,f15973,f15974,f15975,f15976,f15977,f15978,f15979,f15980,f15981,f15982,f15983,f15984,f15985,f15986,f15987,f15988,f15989,f15990,f15991,f15992,f15993,f15994,f15995,f15996,f15997,f15998,f15999,f16000,f16001,f16002,f16003,f16004,f16005,f16006,f16007,f16008,f16009,f16010,f16011,f16012,f16013,f16014,f16015,f16016,f16017,f16018,f16019,f16020,f16021,f16022,f16023,f16024,f16025,f16026,f16027,f16028,f16029,f16030,f16031,f16032,f16033,f16034,f16035,f16036,f16037,f16038,f16039,f16040,f16041,f16042,f16043,f16044,f16045,f16046,f16047,f16048,f16049,f16050,f16051,f16052,f16053,f16054,f16055,f16057,f16058,f16060,f16062,f16064,f16065,f16066,f16067,f16070,f16072,f16075,f16078,f16081,f16083,f16084,f16085,f16087,f16089,f16090,f16091,f16092,f16093,f16097,f16098,f16099,f16100,f16101,f16102,f16103,f16104,f16106,f16107,f16109,f16110,f16112,f16114,f16115,f16116,f16117,f16118,f16119,f16120,f16121,f16122,f16128,f16129,f16130,f16131,f16132,f16133,f16134,f16135,f16136,f16137,f16138,f16139,f16140,f16141,f16142,f16143,f16144,f16145,f16146,f16147,f16148,f16149,f16150,f16151,f16152,f16153,f16154,f16155,f16156,f16157,f16158,f16159,f16160,f16161,f16162,f16163,f16164,f16165,f16166,f16167,f16168,f16169,f16170,f16171,f16172,f16173,f16174,f16175,f16176,f16177,f16178,f16179,f16180,f16181,f16182,f16183,f16184,f16185,f16186,f16187,f16188,f16189,f16190,f16191,f16192,f16193,f16194,f16195,f16196,f16197,f16198,f16199,f16200,f16201,f16202,f16203,f16204,f16205,f16206,f16207,f16208,f16209,f16210,f16211,f16212,f16213,f16214,f16215,f16216,f16217,f16218,f16219,f16220,f16221,f16222,f16223,f16224,f16225,f16226,f16227,f16228,f16229,f16230,f16231,f16232,f16233,f16234,f16235,f16236,f16237,f16238,f16239,f16240,f16241,f16242,f16243,f16244,f16245,f16246,f16247,f16248,f16249,f16250,f16251,f16252,f16253,f16254,f16255,f16256,f16257,f16258,f16259,f16260,f16261,f16262,f16263,f16264,f16265,f16266,f16267,f16268,f16269,f16270,f16271,f16272,f16273,f16274,f16275,f16276,f16277,f16278,f16279,f16280,f16281,f16282,f16283,f16284,f16285,f16286,f16287,f16288,f16289,f16290,f16291,f16292,f16293,f16294,f16295,f16296,f16297,f16298,f16299,f16300,f16301,f16302,f16303,f16304,f16305,f16306,f16307,f16308,f16309,f16310,f16311,f16312,f16313,f16314,f16315,f16316,f16317,f17404,f17406,f17407,f17397,f17408,f16844,f17411,f17413,f17414,f17384,f17418,f17383,f17419,f17434,f17435,f17436,f17437,f17440,f17441,f17442,f17443,f17447,f17412,f19240,f19239,f19237,f19244,f19245,f17487,f19230,f19229,f19247,f19249,f19223,f19241,f19243,f19251,f19252,f19219,f19254,f19256,f19257,f19258,f18699,f19259,f18700,f19260,f18702,f19261,f18703,f19262,f18704,f19263,f18705,f19264,f18706,f19265,f18707,f19266,f18708,f19267,f18709,f19268,f18710,f19269,f18711,f19270,f18712,f19271,f18713,f19272,f18714,f19273,f18715,f19274,f19275,f19276,f19277,f19278,f19279,f19280,f18762,f19281,f18763,f19282,f18764,f19283,f18765,f19284,f18772,f19285,f18773,f19286,f18774,f19287,f19214,f19288,f19213,f19289,f18878,f19292,f19206,f18895,f19294,f18896,f19295,f18898,f19296,f18899,f19297,f18900,f19298,f18901,f19299,f18902,f19300,f18903,f19301,f18904,f19302,f19303,f19304,f19305,f19306,f19307,f19308,f19309,f19310,f19311,f19312,f18913,f19314,f19315,f19316,f18915,f19317,f18916,f19318,f18917,f19319,f18918,f19253,f19320,f19325,f19326,f19327,f19328,f19329,f19330,f19331,f19332,f19333,f19246,f19444,f19447,f19465,f19470,f19471,f17712,f17405,f31096,f31104,f31095,f31110,f24133,f31141,f24132,f31142,f31143,f31145,f31146,f31148,f19356,f19353,f31386,f19339,f19336,f31387,f31385,f33521,f33524,f33535,f33556,f33559,f33560,f33978,f34014,f34012,f34133,f34142,f34134,f34135,f34136,f34146,f34139,f34137,f34143,f36218,f36221,f36228,f45719,f46189,f51498,f51502,f51506,f62256,f62260,f62264,f70362,f52692,f70366,f52693,f70370,f52694,f34481,f34145,f73817,f73818,f79635,f80010,f80011,f80012,f80013,f80014,f80015,f80016,f80017,f80018,f80019,f80020,f80021,f93018,f93021,f99312,f95725,f99323,f99302,f99289,f99288,f99324,f99283,f99282,f99273,f99320,f99271,f99333,f99353,f99354,f99355,f99356,f98960,f99332,f99365,f99366,f98952,f99371,f98951,f99372,f98950,f99373,f98949,f99374,f98948,f99375,f97025,f98947,f99377,f97029,f98946,f99379,f97033,f52691,f98945,f99381,f98938,f99384,f98937,f99385,f98936,f99386,f98935,f99387,f98934,f99388,f98933,f99389,f98930,f99392,f98929,f99393,f97182,f99376,f97183,f99378,f97184,f99380,f99396,f36220,f36219,f99634,f101357,f101358,f101359,f101360,f102520,f102523,f102542,f106075,f106060,f106045,f106040,f106098,f106097,f106038,f106029,f106083,f106026,f106099,f106193,f99635,f106545,f106546,f34140,f105115,f105116,f105120,f105121,f105125,f106720,f105126,f106721,f105257,f105258,f105259,f106726,f105663,f36230,f106864,f108393,f108395,f93019,f112238,f112237,f112303,f112235,f112309,f112225,f112201,f109865,f109866,f109870,f109871,f109875,f112528,f109876,f112302,f110001,f19466,f110002,f106722,f110003,f106723,f112531,f111586,f112777,f111585,f112778,f111584,f112779,f112785,f112786,f114350,f114351,f114564,f114566,f114565,f118269,f118270,f118276,f118277,f118283,f118284,f118293,f118294,f118304,f118305,f12909,f122758,f122759,f122982,f9497,f122983,f123369])).
fof(f123369,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl8)),
  inference(subsumption_resolution,[],[f123368,f1048])).
fof(f1048,plain,(
  ~p(s(bool,'F_0'))),
  inference(subsumption_resolution,[],[f534,f531])).
fof(f531,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.mod_to_conProof.v_rel_eqns|split|5',aHL_TRUTH)).
fof(f534,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f280])).
fof(f280,plain,(
  (p(s(bool,'T_0')) | p(s(bool,'F_0'))) & (~p(s(bool,'F_0')) | ~p(s(bool,'T_0')))),
  inference(nnf_transformation,[],[f72])).
fof(f72,plain,(
  ~p(s(bool,'T_0')) <=> p(s(bool,'F_0'))),
  inference(flattening,[],[f68])).
fof(f68,axiom,(
  ~p(s(bool,'T_0')) <=> p(s(bool,'F_0'))),
  file('thm.mod_to_conProof.v_rel_eqns|split|5','thm.bool.NOT_CLAUSES|split|1')).
fof(f123368,plain,(
  p(s(bool,'F_0')) | ($spl1 | $spl4 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f123367,f81014])).
fof(f81014,plain,(
  s(bool,'F_0') = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54))) | $spl1),
  inference(unit_resulting_resolution,[],[f1102,f1040,f1535])).
fof(f1535,plain,(
  ( ! [X4,X5] : (p(s(bool,X5)) | s(bool,X4) = s(bool,X5) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f1531,f1048])).
fof(f1531,plain,(
  ( ! [X4,X5] : (p(s(bool,'F_0')) | p(s(bool,X5)) | s(bool,X4) = s(bool,X5) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f609,f539])).
fof(f539,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.mod_to_conProof.v_rel_eqns|split|5',aHL_BOOL_CASES)).
fof(f609,plain,(
  ( ! [X0,X1] : (p(s(bool,X1)) | p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f182])).
fof(f182,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1))),
  inference(flattening,[],[f181])).
fof(f181,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | ((p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1)))),
  inference(ennf_transformation,[],[f121])).
fof(f121,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) => p(s(bool,X1))) => ((p(s(bool,X1)) => p(s(bool,X0))) => s(bool,X0) = s(bool,X1)))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X44,X45] : ((p(s(bool,X44)) => p(s(bool,X45))) => ((p(s(bool,X45)) => p(s(bool,X44))) => s(bool,X44) = s(bool,X45)))),
  file('thm.mod_to_conProof.v_rel_eqns|split|5','thm.bool.IMP_ANTISYM_AX')).
fof(f1102,plain,(
  s(bool,'T_0') != s(bool,'F_0')),
  inference(unit_resulting_resolution,[],[f1048,f547])).
fof(f547,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f282])).
fof(f282,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f83])).
fof(f83,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f66])).
fof(f66,axiom,(
  ! [X38] : (s(bool,'T_0') = s(bool,X38) <=> p(s(bool,X38)))),
  file('thm.mod_to_conProof.v_rel_eqns|split|5','thm.bool.EQ_CLAUSES|split|0')).
fof(f123367,plain,(
  p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) | ($spl4 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f123366,f1043])).
fof(f123366,plain,(
  p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)))))) | ($spl6 | $spl8)),
  inference(subsumption_resolution,[],[f123347,f531])).
fof(f123347,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)))))) | ($spl6 | $spl8)),
  inference(superposition,[],[f82065,f1111])).
fof(f1111,plain,(
  s(bool,'T_0') = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56))) | $spl6),
  inference(unit_resulting_resolution,[],[f1045,f548])).
fof(f548,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f282])).
fof(f82065,plain,(
  ( ! [X4,X3] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),X3),s('type.list.list'('type.conSem.v'),X4)))) | p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),X3))),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),X4))))))) ) | $spl8),
  inference(subsumption_resolution,[],[f81738,f531])).
fof(f81738,plain,(
  ( ! [X4,X3] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),X3),s('type.list.list'('type.conSem.v'),X4)))) | p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),X3))),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),X4))))))) ) | $spl8),
  inference(superposition,[],[f1019,f80297])).
fof(f80297,plain,(
  s(bool,'T_0') = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl8),
  inference(unit_resulting_resolution,[],[f531,f1047,f612])).
fof(f612,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | ~p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f182])).
fof(f1019,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X3)))) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X2),s('type.list.list'('type.conSem.v'),X4)))) | p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X1),s('type.list.list'('type.modSem.v'),X2))),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X3),s('type.list.list'('type.conSem.v'),X4))))))) )),
  inference(cnf_transformation,[],[f212])).
fof(f212,plain,(
  ! [X0,X1,X2,X3,X4] : (~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X3)))) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X2),s('type.list.list'('type.conSem.v'),X4)))) | p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X1),s('type.list.list'('type.modSem.v'),X2))),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X3),s('type.list.list'('type.conSem.v'),X4)))))))),
  inference(flattening,[],[f211])).
fof(f211,plain,(
  ! [X0,X1,X2,X3,X4] : ((~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X3)))) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X2),s('type.list.list'('type.conSem.v'),X4))))) | p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X1),s('type.list.list'('type.modSem.v'),X2))),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X3),s('type.list.list'('type.conSem.v'),X4)))))))),
  inference(ennf_transformation,[],[f164])).
fof(f164,plain,(
  ! [X0,X1,X2,X3,X4] : ((p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X3)))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X2),s('type.list.list'('type.conSem.v'),X4))))) => p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X1),s('type.list.list'('type.modSem.v'),X2))),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X3),s('type.list.list'('type.conSem.v'),X4)))))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6,X7,X8,X10,X9] : ((p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.modSem.v',X7),s('type.conSem.v',X10)))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.list.list'('type.modSem.v'),X8),s('type.list.list'('type.conSem.v'),X9))))) => p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X7),s('type.list.list'('type.modSem.v'),X8))),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X10),s('type.list.list'('type.conSem.v'),X9)))))))),
  file('thm.mod_to_conProof.v_rel_eqns|split|5','thm.mod_to_conProof.v_rel_rules|split|8')).
fof(f122983,plain,(
  ( ! [X134,X135,X133] : (~sP47('const.bool.BOUNDED_1'(s(bool,X133)),X134,X135) | s(bool,'F_0') = s(bool,X133) | sP48('const.bool.BOUNDED_1'(s(bool,'T_0')),X134,X135)) ) | $spl382),
  inference(cnf_transformation,[],[f122983_D])).
fof(f122983_D,plain,(
  ( ! [X134,X135,X133] : (~sP47('const.bool.BOUNDED_1'(s(bool,X133)),X134,X135) | s(bool,'F_0') = s(bool,X133) | sP48('const.bool.BOUNDED_1'(s(bool,'T_0')),X134,X135)) ) <=> ~$spl382),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl382])])).
fof(f9497,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | $spl12),
  inference(cnf_transformation,[],[f9497_D])).
fof(f9497_D,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f122982,plain,(
  ( ! [X134,X136,X135,X133] : (s(bool,'T_0') = s(bool,X136) | ~sP47('const.bool.BOUNDED_1'(s(bool,X133)),X134,X135) | sP48('const.bool.BOUNDED_1'(s(bool,'T_0')),X134,X135) | s(bool,'F_0') = s(bool,X133)) ) | ($spl4 | $spl224 | $spl231)),
  inference(forward_demodulation,[],[f122981,f538])).
fof(f538,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.bool.BOUNDED_1'(s(bool,X0)))) )),
  inference(cnf_transformation,[],[f75])).
fof(f75,plain,(
  ! [X0] : s(bool,'T_0') = s(bool,'const.bool.BOUNDED_1'(s(bool,X0)))),
  inference(rectify,[],[f50])).
fof(f50,axiom,(
  ! [X7] : s(bool,'T_0') = s(bool,'const.bool.BOUNDED_1'(s(bool,X7)))),
  file('thm.mod_to_conProof.v_rel_eqns|split|5','thm.bool.BOUNDED_THM')).
fof(f122981,plain,(
  ( ! [X134,X136,X135,X133] : (~sP47('const.bool.BOUNDED_1'(s(bool,X133)),X134,X135) | sP48('const.bool.BOUNDED_1'(s(bool,'T_0')),X134,X135) | s(bool,X136) = s(bool,'const.bool.BOUNDED_1'(s(bool,X133))) | s(bool,'F_0') = s(bool,X133)) ) | ($spl4 | $spl224 | $spl231)),
  inference(subsumption_resolution,[],[f122955,f112803])).
fof(f112803,plain,(
  ( ! [X1352,X1351] : (s(bool,'T_0') != s(bool,X1351) | s(bool,X1351) = s(bool,'const.bool.BOUNDED_1'(s(bool,X1352)))) ) | $spl224),
  inference(subsumption_resolution,[],[f111260,f1102])).
fof(f111260,plain,(
  ( ! [X1352,X1351] : (s(bool,'T_0') != s(bool,X1351) | s(bool,X1351) = s(bool,'const.bool.BOUNDED_1'(s(bool,X1352))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl224),
  inference(superposition,[],[f1102,f33535])).
fof(f122955,plain,(
  ( ! [X134,X136,X135,X133] : (~sP47('const.bool.BOUNDED_1'(s(bool,X133)),X134,X135) | sP48('const.bool.BOUNDED_1'(s(bool,'T_0')),X134,X135) | s(bool,X136) = s(bool,'const.bool.BOUNDED_1'(s(bool,X133))) | s(bool,'T_0') = s(bool,X136) | s(bool,'F_0') = s(bool,X133)) ) | ($spl4 | $spl231)),
  inference(superposition,[],[f8082,f106100])).
fof(f106100,plain,(
  ( ! [X37] : (s(bool,X37) = s(bool,'const.bool.BOUNDED_1'(s(bool,X37))) | s(bool,'F_0') = s(bool,X37)) ) | ($spl4 | $spl231)),
  inference(subsumption_resolution,[],[f102895,f34138])).
fof(f34138,plain,(
  s(bool,'T_0') != s(bool,g(s(bool,'F_0'))) | $spl231),
  inference(cnf_transformation,[],[f34138_D])).
fof(f34138_D,plain,(
  s(bool,'T_0') != s(bool,g(s(bool,'F_0'))) <=> ~$spl231),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl231])])).
fof(f102895,plain,(
  ( ! [X37] : (s(bool,'F_0') = s(bool,X37) | s(bool,X37) = s(bool,'const.bool.BOUNDED_1'(s(bool,X37))) | s(bool,'T_0') = s(bool,g(s(bool,'F_0')))) ) | ($spl4 | $spl231)),
  inference(superposition,[],[f7837,f100137])).
fof(f100137,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'F_0'))) | ($spl4 | $spl231)),
  inference(forward_demodulation,[],[f100010,f82673])).
fof(f82673,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1102,f80739,f1535])).
fof(f80739,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f80282,f779])).
fof(f779,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X2)))) | sP23(X0,X2,X1)) )),
  inference(cnf_transformation,[],[f417])).
fof(f417,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X2)))) | sP23(X0,X2,X1)) & (~sP23(X0,X2,X1) | p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X2))))))),
  inference(nnf_transformation,[],[f242])).
fof(f242,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X2)))) <=> sP23(X0,X2,X1))),
  inference(definition_folding,[],[f147,f241])).
fof(f241,plain,(
  ! [X0,X2,X1] : (sP23(X0,X2,X1) <=> ((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X1) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X2)) | ? [X3,X4,X5,X6] : (s('type.list.list'('type.modSem.v'),X1) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X3),s('type.list.list'('type.modSem.v'),X4))) & s('type.list.list'('type.conSem.v'),X2) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X5),s('type.list.list'('type.conSem.v'),X6))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X3),s('type.conSem.v',X5)))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X4),s('type.list.list'('type.conSem.v'),X6)))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP23])])).
fof(f147,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X2)))) <=> ((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X1) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X2)) | ? [X3,X4,X5,X6] : (s('type.list.list'('type.modSem.v'),X1) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X3),s('type.list.list'('type.modSem.v'),X4))) & s('type.list.list'('type.conSem.v'),X2) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X5),s('type.list.list'('type.conSem.v'),X6))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X3),s('type.conSem.v',X5)))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X4),s('type.list.list'('type.conSem.v'),X6)))))))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X12,X13,X14] : (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X12),s('type.list.list'('type.modSem.v'),X13),s('type.list.list'('type.conSem.v'),X14)))) <=> ((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X13) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X14)) | ? [X7,X8,X10,X9] : (s('type.list.list'('type.modSem.v'),X13) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X7),s('type.list.list'('type.modSem.v'),X8))) & s('type.list.list'('type.conSem.v'),X14) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X10),s('type.list.list'('type.conSem.v'),X9))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X12),s('type.modSem.v',X7),s('type.conSem.v',X10)))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X12),s('type.list.list'('type.modSem.v'),X8),s('type.list.list'('type.conSem.v'),X9)))))))),
  file('thm.mod_to_conProof.v_rel_eqns|split|5','thm.mod_to_conProof.v_rel_cases|split|1')).
fof(f80282,plain,(
  ( ! [X0] : (~sP23(X0,sK54,'const.list.NIL_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f605,f80133,f770])).
fof(f770,plain,(
  ( ! [X2,X0,X1] : (~sP23(X0,X1,X2) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X1) | s('type.list.list'('type.modSem.v'),X2) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK203(X2,X1,X0)),s('type.list.list'('type.modSem.v'),sK204(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f416])).
fof(f416,plain,(
  ! [X0,X1,X2] : ((~sP23(X0,X1,X2) | (s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X2) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X1)) | (s('type.list.list'('type.modSem.v'),X2) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK203(X2,X1,X0)),s('type.list.list'('type.modSem.v'),sK204(X2,X1,X0)))) & s('type.list.list'('type.conSem.v'),X1) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',sK205(X2,X1,X0)),s('type.list.list'('type.conSem.v'),sK206(X2,X1,X0)))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',sK203(X2,X1,X0)),s('type.conSem.v',sK205(X2,X1,X0))))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),sK204(X2,X1,X0)),s('type.list.list'('type.conSem.v'),sK206(X2,X1,X0))))))) & (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') != s('type.list.list'('type.modSem.v'),X2) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') != s('type.list.list'('type.conSem.v'),X1)) & ! [X3,X4,X5,X6] : (s('type.list.list'('type.modSem.v'),X2) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X3),s('type.list.list'('type.modSem.v'),X4))) | s('type.list.list'('type.conSem.v'),X1) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X5),s('type.list.list'('type.conSem.v'),X6))) | ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X3),s('type.conSem.v',X5)))) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X4),s('type.list.list'('type.conSem.v'),X6)))))) | sP23(X0,X1,X2)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK203,sK204,sK205,sK206])],[f415])).
fof(f415,plain,(
  ! [X0,X1,X2] : ((~sP23(X0,X1,X2) | (s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X2) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X1)) | ? [X7,X8,X9,X10] : (s('type.list.list'('type.modSem.v'),X2) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X7),s('type.list.list'('type.modSem.v'),X8))) & s('type.list.list'('type.conSem.v'),X1) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X9),s('type.list.list'('type.conSem.v'),X10))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X7),s('type.conSem.v',X9)))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X8),s('type.list.list'('type.conSem.v'),X10)))))) & (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') != s('type.list.list'('type.modSem.v'),X2) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') != s('type.list.list'('type.conSem.v'),X1)) & ! [X3,X4,X5,X6] : (s('type.list.list'('type.modSem.v'),X2) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X3),s('type.list.list'('type.modSem.v'),X4))) | s('type.list.list'('type.conSem.v'),X1) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X5),s('type.list.list'('type.conSem.v'),X6))) | ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X3),s('type.conSem.v',X5)))) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X4),s('type.list.list'('type.conSem.v'),X6)))))) | sP23(X0,X1,X2)))),
  inference(rectify,[],[f414])).
fof(f414,plain,(
  ! [X0,X2,X1] : ((~sP23(X0,X2,X1) | (s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X1) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X2)) | ? [X3,X4,X5,X6] : (s('type.list.list'('type.modSem.v'),X1) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X3),s('type.list.list'('type.modSem.v'),X4))) & s('type.list.list'('type.conSem.v'),X2) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X5),s('type.list.list'('type.conSem.v'),X6))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X3),s('type.conSem.v',X5)))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X4),s('type.list.list'('type.conSem.v'),X6)))))) & (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') != s('type.list.list'('type.modSem.v'),X1) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') != s('type.list.list'('type.conSem.v'),X2)) & ! [X3,X4,X5,X6] : (s('type.list.list'('type.modSem.v'),X1) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X3),s('type.list.list'('type.modSem.v'),X4))) | s('type.list.list'('type.conSem.v'),X2) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X5),s('type.list.list'('type.conSem.v'),X6))) | ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X3),s('type.conSem.v',X5)))) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X4),s('type.list.list'('type.conSem.v'),X6)))))) | sP23(X0,X2,X1)))),
  inference(flattening,[],[f413])).
fof(f413,plain,(
  ! [X0,X2,X1] : ((~sP23(X0,X2,X1) | ((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X1) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X2)) | ? [X3,X4,X5,X6] : (s('type.list.list'('type.modSem.v'),X1) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X3),s('type.list.list'('type.modSem.v'),X4))) & s('type.list.list'('type.conSem.v'),X2) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X5),s('type.list.list'('type.conSem.v'),X6))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X3),s('type.conSem.v',X5)))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X4),s('type.list.list'('type.conSem.v'),X6))))))) & (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') != s('type.list.list'('type.modSem.v'),X1) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') != s('type.list.list'('type.conSem.v'),X2)) & ! [X3,X4,X5,X6] : (s('type.list.list'('type.modSem.v'),X1) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X3),s('type.list.list'('type.modSem.v'),X4))) | s('type.list.list'('type.conSem.v'),X2) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X5),s('type.list.list'('type.conSem.v'),X6))) | ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X3),s('type.conSem.v',X5)))) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X4),s('type.list.list'('type.conSem.v'),X6)))))) | sP23(X0,X2,X1)))),
  inference(nnf_transformation,[],[f241])).
fof(f80133,plain,(
  s('type.list.list'('type.conSem.v'),'const.list.NIL_0') != s('type.list.list'('type.conSem.v'),sK54) | $spl4),
  inference(superposition,[],[f605,f1043])).
fof(f605,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X1)))) )),
  inference(cnf_transformation,[],[f118])).
fof(f118,plain,(
  ! [X0,X1,X2] : s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X1)))),
  inference(flattening,[],[f117])).
fof(f117,plain,(
  ! [X0] : ! [X1,X2] : ~s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X1)))),
  inference(rectify,[],[f30])).
fof(f30,axiom,(
  ! [X47] : ! [X33,X32] : ~s('type.list.list'(X47),'const.list.NIL_0') = s('type.list.list'(X47),'const.list.CONS_2'(s(X47,X32),s('type.list.list'(X47),X33)))),
  file('thm.mod_to_conProof.v_rel_eqns|split|5','thm.list.list_distinct')).
fof(f100010,plain,(
  ( ! [X0] : (s(bool,g(s(bool,'F_0'))) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | ($spl4 | $spl231)),
  inference(unit_resulting_resolution,[],[f2935,f34138,f84376])).
fof(f84376,plain,(
  ( ! [X4,X2,X3] : (sP23(X2,'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X3) | s(bool,X4) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.modSem.v'),X3),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X4)) ) | $spl4),
  inference(subsumption_resolution,[],[f84371,f531])).
fof(f84371,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'T_0')) | sP23(X2,'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X3) | s(bool,X4) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.modSem.v'),X3),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X4)) ) | $spl4),
  inference(superposition,[],[f80110,f1319])).
fof(f1319,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f539,f539])).
fof(f80110,plain,(
  ( ! [X23,X22] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X22),s('type.list.list'('type.modSem.v'),X23),s('type.list.list'('type.conSem.v'),sK54)))) | sP23(X22,'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X23)) ) | $spl4),
  inference(superposition,[],[f779,f1043])).
fof(f2935,plain,(
  ( ! [X2,X0,X1] : (~sP23(X0,'const.list.CONS_2'(s('type.conSem.v',X1),s('type.list.list'('type.conSem.v'),X2)),'const.list.NIL_0')) )),
  inference(unit_resulting_resolution,[],[f605,f605,f770])).
fof(f7837,plain,(
  ( ! [X15,X16] : (s(bool,X15) = s(bool,'const.bool.BOUNDED_1'(s(bool,X15))) | s(bool,X15) = s(bool,X16) | s(bool,'T_0') = s(bool,X16)) )),
  inference(superposition,[],[f538,f1319])).
fof(f8082,plain,(
  ( ! [X167,X169,X170,X168] : (~sP47('const.bool.BOUNDED_1'(s(bool,X167)),X168,X169) | sP48('const.bool.BOUNDED_1'(s(bool,'T_0')),X168,X169) | s(bool,X167) = s(bool,X170) | s(bool,'T_0') = s(bool,X170)) )),
  inference(superposition,[],[f1299,f1319])).
fof(f1299,plain,(
  ( ! [X2,X0,X1] : (sP48('const.bool.BOUNDED_1'(s(bool,X0)),X1,X2) | ~sP47('const.bool.BOUNDED_1'(s(bool,X0)),X1,X2)) )),
  inference(subsumption_resolution,[],[f1298,f531])).
fof(f1298,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | ~sP47('const.bool.BOUNDED_1'(s(bool,X0)),X1,X2) | sP48('const.bool.BOUNDED_1'(s(bool,X0)),X1,X2)) )),
  inference(superposition,[],[f1029,f538])).
fof(f1029,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X0)) | ~sP47(X0,X1,X2) | sP48(X0,X1,X2)) )),
  inference(duplicate_literal_removal,[],[f969])).
fof(f969,plain,(
  ( ! [X2,X0,X1] : (sP48(X0,X1,X2) | ~sP47(X0,X1,X2) | ~p(s(bool,X0)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f507])).
fof(f507,plain,(
  ! [X0,X1,X2] : ((~sP48(X0,X1,X2) | ((p(s(bool,X0)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X1))) & sP47(X0,X1,X2))) & ((~p(s(bool,X0)) & p(s(bool,X2))) | (~p(s(bool,X0)) & p(s(bool,X1))) | ~sP47(X0,X1,X2) | sP48(X0,X1,X2)))),
  inference(rectify,[],[f506])).
fof(f506,plain,(
  ! [X2,X0,X1] : ((~sP48(X2,X0,X1) | ((p(s(bool,X2)) | ~p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & sP47(X2,X0,X1))) & ((~p(s(bool,X2)) & p(s(bool,X1))) | (~p(s(bool,X2)) & p(s(bool,X0))) | ~sP47(X2,X0,X1) | sP48(X2,X0,X1)))),
  inference(flattening,[],[f505])).
fof(f505,plain,(
  ! [X2,X0,X1] : ((~sP48(X2,X0,X1) | ((p(s(bool,X2)) | ~p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & sP47(X2,X0,X1))) & (((~p(s(bool,X2)) & p(s(bool,X1))) | (~p(s(bool,X2)) & p(s(bool,X0))) | ~sP47(X2,X0,X1)) | sP48(X2,X0,X1)))),
  inference(nnf_transformation,[],[f272])).
fof(f272,plain,(
  ! [X2,X0,X1] : (sP48(X2,X0,X1) <=> ((p(s(bool,X2)) | ~p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & sP47(X2,X0,X1)))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP48])])).
fof(f122759,plain,(
  ( ! [X134,X135,X133] : (~sP49('const.bool.BOUNDED_1'(s(bool,X133)),X134,X135) | s(bool,'F_0') = s(bool,X133) | sP50('const.bool.BOUNDED_1'(s(bool,'T_0')),X134,X135)) ) | $spl380),
  inference(cnf_transformation,[],[f122759_D])).
fof(f122759_D,plain,(
  ( ! [X134,X135,X133] : (~sP49('const.bool.BOUNDED_1'(s(bool,X133)),X134,X135) | s(bool,'F_0') = s(bool,X133) | sP50('const.bool.BOUNDED_1'(s(bool,'T_0')),X134,X135)) ) <=> ~$spl380),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl380])])).
fof(f122758,plain,(
  ( ! [X134,X136,X135,X133] : (s(bool,'T_0') = s(bool,X136) | ~sP49('const.bool.BOUNDED_1'(s(bool,X133)),X134,X135) | sP50('const.bool.BOUNDED_1'(s(bool,'T_0')),X134,X135) | s(bool,'F_0') = s(bool,X133)) ) | ($spl4 | $spl224 | $spl231)),
  inference(forward_demodulation,[],[f122757,f538])).
fof(f122757,plain,(
  ( ! [X134,X136,X135,X133] : (~sP49('const.bool.BOUNDED_1'(s(bool,X133)),X134,X135) | sP50('const.bool.BOUNDED_1'(s(bool,'T_0')),X134,X135) | s(bool,X136) = s(bool,'const.bool.BOUNDED_1'(s(bool,X133))) | s(bool,'F_0') = s(bool,X133)) ) | ($spl4 | $spl224 | $spl231)),
  inference(subsumption_resolution,[],[f122731,f112803])).
fof(f122731,plain,(
  ( ! [X134,X136,X135,X133] : (~sP49('const.bool.BOUNDED_1'(s(bool,X133)),X134,X135) | sP50('const.bool.BOUNDED_1'(s(bool,'T_0')),X134,X135) | s(bool,X136) = s(bool,'const.bool.BOUNDED_1'(s(bool,X133))) | s(bool,'T_0') = s(bool,X136) | s(bool,'F_0') = s(bool,X133)) ) | ($spl4 | $spl231)),
  inference(superposition,[],[f8081,f106100])).
fof(f8081,plain,(
  ( ! [X165,X163,X166,X164] : (~sP49('const.bool.BOUNDED_1'(s(bool,X163)),X164,X165) | sP50('const.bool.BOUNDED_1'(s(bool,'T_0')),X164,X165) | s(bool,X163) = s(bool,X166) | s(bool,'T_0') = s(bool,X166)) )),
  inference(superposition,[],[f1274,f1319])).
fof(f1274,plain,(
  ( ! [X2,X0,X1] : (sP50('const.bool.BOUNDED_1'(s(bool,X0)),X1,X2) | ~sP49('const.bool.BOUNDED_1'(s(bool,X0)),X1,X2)) )),
  inference(subsumption_resolution,[],[f1273,f531])).
fof(f1273,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | ~sP49('const.bool.BOUNDED_1'(s(bool,X0)),X1,X2) | sP50('const.bool.BOUNDED_1'(s(bool,X0)),X1,X2)) )),
  inference(superposition,[],[f1028,f538])).
fof(f1028,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X0)) | ~sP49(X0,X1,X2) | sP50(X0,X1,X2)) )),
  inference(duplicate_literal_removal,[],[f986])).
fof(f986,plain,(
  ( ! [X2,X0,X1] : (sP50(X0,X1,X2) | ~sP49(X0,X1,X2) | ~p(s(bool,X0)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f515])).
fof(f515,plain,(
  ! [X0,X1,X2] : ((~sP50(X0,X1,X2) | ((p(s(bool,X0)) | p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X1))) & sP49(X0,X1,X2))) & ((~p(s(bool,X0)) & ~p(s(bool,X2))) | (~p(s(bool,X0)) & p(s(bool,X1))) | ~sP49(X0,X1,X2) | sP50(X0,X1,X2)))),
  inference(rectify,[],[f514])).
fof(f514,plain,(
  ! [X2,X0,X1] : ((~sP50(X2,X0,X1) | ((p(s(bool,X2)) | p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & sP49(X2,X0,X1))) & ((~p(s(bool,X2)) & ~p(s(bool,X1))) | (~p(s(bool,X2)) & p(s(bool,X0))) | ~sP49(X2,X0,X1) | sP50(X2,X0,X1)))),
  inference(flattening,[],[f513])).
fof(f513,plain,(
  ! [X2,X0,X1] : ((~sP50(X2,X0,X1) | ((p(s(bool,X2)) | p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & sP49(X2,X0,X1))) & (((~p(s(bool,X2)) & ~p(s(bool,X1))) | (~p(s(bool,X2)) & p(s(bool,X0))) | ~sP49(X2,X0,X1)) | sP50(X2,X0,X1)))),
  inference(nnf_transformation,[],[f275])).
fof(f275,plain,(
  ! [X2,X0,X1] : (sP50(X2,X0,X1) <=> ((p(s(bool,X2)) | p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & sP49(X2,X0,X1)))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP50])])).
fof(f12909,plain,(
  ( ! [X34] : (p(s(bool,X34))) ) | $spl62),
  inference(cnf_transformation,[],[f12909_D])).
fof(f12909_D,plain,(
  ( ! [X34] : (p(s(bool,X34))) ) <=> ~$spl62),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl62])])).
fof(f118305,plain,(
  ( ! [X700] : (s(bool,X700) = s(bool,g(s(bool,X700)))) ) | $spl378),
  inference(cnf_transformation,[],[f118305_D])).
fof(f118305_D,plain,(
  ( ! [X700] : (s(bool,X700) = s(bool,g(s(bool,X700)))) ) <=> ~$spl378),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl378])])).
fof(f118304,plain,(
  ( ! [X700,X701] : (s(bool,X700) = s(bool,g(s(bool,X700))) | p(s(bool,X701))) ) | ($spl4 | $spl231 | $spl258 | $spl366)),
  inference(global_subsumption,[],[f530,f529,f528,f527,f531,f538,f539,f548,f547,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f668,f689,f709,f708,f707,f706,f726,f721,f720,f719,f718,f736,f731,f730,f729,f728,f739,f738,f743,f742,f747,f746,f752,f751,f758,f757,f756,f777,f772,f771,f770,f769,f784,f783,f782,f781,f801,f796,f795,f794,f793,f811,f806,f805,f804,f803,f814,f813,f818,f817,f822,f821,f827,f826,f833,f832,f831,f850,f849,f848,f847,f867,f862,f861,f860,f859,f877,f872,f871,f870,f869,f880,f879,f884,f883,f888,f887,f893,f892,f899,f898,f897,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1626,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2359,f2527,f2526,f2533,f2535,f2566,f2565,f2572,f2609,f2608,f2621,f2642,f2641,f2640,f2659,f2658,f2657,f2846,f2845,f2853,f2854,f2871,f2870,f2869,f2868,f2936,f2935,f2937,f2940,f3218,f3217,f3216,f3211,f3210,f3204,f3202,f3200,f3198,f3195,f3194,f3193,f3189,f3188,f3187,f3183,f3171,f3162,f3161,f3159,f3155,f3154,f3149,f3148,f3147,f3146,f3145,f3142,f3140,f3135,f3134,f3128,f3127,f3120,f3091,f3090,f3089,f3088,f3083,f3082,f3077,f3076,f3075,f3070,f3067,f3064,f3061,f3058,f3057,f3056,f3049,f3048,f3047,f3046,f3037,f3036,f3026,f3025,f3024,f3019,f3018,f3017,f3012,f2994,f2987,f2979,f2978,f2973,f2965,f2964,f2955,f2954,f2953,f2952,f2951,f2949,f2948,f2943,f3453,f3530,f3537,f3558,f3568,f3591,f3589,f3600,f3605,f3608,f3613,f3622,f3680,f3679,f3684,f3760,f3759,f3776,f3836,f3835,f3840,f4160,f4202,f4237,f4236,f4235,f4234,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5688,f5689,f5916,f6111,f6116,f6119,f6239,f6238,f6237,f6236,f7014,f7020,f7026,f7175,f7174,f7173,f7229,f7228,f7227,f7303,f7383,f7384,f7553,f7558,f7561,f7565,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9603,f8248,f8253,f8256,f8260,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f895,f890,f829,f824,f754,f749,f687,f683,f666,f663,f693,f685,f681,f906,f874,f873,f866,f865,f851,f808,f807,f800,f799,f785,f733,f732,f725,f724,f710,f699,f696,f659,f657,f677,f6241,f6256,f6286,f684,f664,f688,f667,f692,f680,f670,f6240,f6247,f6273,f858,f857,f856,f855,f854,f853,f852,f792,f791,f790,f789,f788,f787,f786,f717,f716,f715,f714,f713,f712,f711,f9620,f908,f909,f907,f900,f894,f889,f885,f881,f876,f875,f864,f863,f834,f828,f823,f819,f815,f810,f809,f798,f797,f759,f753,f748,f744,f740,f735,f734,f723,f722,f701,f694,f691,f686,f682,f679,f676,f669,f665,f662,f660,f656,f674,f673,f672,f671,f702,f661,f697,f658,f901,f886,f882,f878,f835,f820,f816,f812,f760,f745,f741,f737,f905,f904,f903,f902,f896,f891,f868,f830,f825,f802,f755,f750,f727,f705,f655,f8277,f8276,f8275,f8274,f8273,f8272,f8271,f8244,f8008,f7582,f7581,f7580,f7579,f7578,f7577,f7576,f7549,f9615,f9614,f9613,f9612,f9611,f9610,f9609,f9606,f9605,f602,f601,f599,f596,f594,f593,f591,f587,f586,f698,f695,f845,f774,f773,f9622,f768,f767,f766,f765,f764,f763,f762,f761,f703,f653,f700,f690,f678,f675,f776,f775,f2938,f2941,f2406,f7065,f9601,f844,f9602,f9621,f9604,f9600,f6932,f4519,f1019,f846,f843,f842,f841,f840,f839,f838,f837,f836,f780,f779,f778,f704,f654,f7575,f8270,f9618,f4099,f4096,f4091,f3884,f3443,f3442,f2947,f2877,f2876,f2754,f2753,f2734,f2718,f2706,f2696,f2684,f2672,f2618,f2617,f2607,f2569,f2568,f2564,f2530,f2529,f2525,f2475,f2474,f2443,f2442,f1048,f552,f551,f12824,f12904,f12907,f12912,f12983,f12986,f12990,f2436,f2339,f8246,f8245,f7551,f7550,f2432,f2330,f2433,f2331,f8010,f8009,f9608,f9607,f604,f603,f2336,f2431,f9619,f6109,f6224,f4157,f4089,f16704,f16703,f16702,f16701,f16743,f16742,f16741,f17404,f17407,f17397,f16841,f16844,f16852,f16854,f16857,f16858,f16859,f16861,f16866,f16869,f16873,f17413,f16931,f16932,f17384,f17383,f17108,f17109,f17110,f17112,f17117,f17120,f17124,f17134,f17135,f17136,f17137,f17138,f17139,f17140,f17141,f17142,f17429,f17197,f17198,f17440,f17442,f17344,f17345,f17346,f17348,f17353,f17356,f17360,f18050,f18055,f18061,f18593,f19434,f18176,f17712,f17710,f19481,f22860,f23012,f23077,f23297,f23337,f24930,f24958,f25011,f25110,f26871,f26970,f27227,f27255,f27241,f27259,f27301,f27326,f27339,f27356,f27371,f27392,f28264,f28308,f28347,f28423,f28438,f28462,f28472,f28516,f28563,f28704,f28745,f28834,f28842,f28853,f28872,f28884,f28895,f28905,f28938,f28961,f28989,f29007,f29023,f29042,f29061,f29554,f29572,f31002,f31096,f31106,f33191,f33204,f33286,f33285,f33284,f33283,f33282,f33281,f33280,f33279,f33278,f33385,f33386,f33387,f33390,f33392,f33463,f33464,f33465,f33468,f33470,f33514,f33521,f33524,f33566,f33650,f33657,f33729,f33764,f33797,f33796,f33795,f34075,f34074,f34073,f34072,f34071,f34133,f34134,f34135,f34136,f34137,f34156,f34155,f34154,f34153,f34639,f34638,f34637,f35862,f35896,f35925,f35956,f35988,f36024,f36056,f36125,f36218,f36221,f36227,f36690,f36689,f37265,f37446,f37467,f37488,f37518,f37545,f37567,f37594,f37624,f37652,f37676,f37694,f37737,f37736,f37735,f37800,f38370,f38398,f38431,f38430,f38429,f38463,f38462,f38461,f38508,f38579,f38650,f38723,f38743,f38816,f38833,f39249,f39338,f39393,f39831,f39908,f39996,f40082,f46026,f46027,f46028,f46029,f46031,f46190,f46191,f46041,f46050,f46052,f46054,f46055,f46056,f46058,f46060,f46061,f46062,f46063,f46067,f46207,f46078,f46223,f46222,f46221,f46220,f46894,f47271,f47269,f47267,f47265,f47263,f47261,f47217,f47216,f47208,f47201,f47200,f47192,f47182,f47181,f47180,f47173,f47172,f47164,f47163,f47162,f47156,f47155,f47152,f47151,f47150,f47140,f47124,f47123,f47121,f47110,f47109,f47108,f47107,f47103,f47101,f47095,f47094,f47057,f47056,f47054,f47049,f47048,f47043,f47042,f47041,f47036,f47034,f47032,f47026,f47020,f47018,f47011,f47010,f47009,f47008,f46999,f46998,f46988,f46987,f46986,f46982,f46981,f46969,f46965,f46951,f46950,f46945,f46933,f46932,f46917,f46914,f46913,f46911,f46905,f46903,f46902,f47571,f47747,f47801,f47823,f47822,f47853,f47858,f47868,f48654,f48653,f48652,f48651,f51145,f51138,f48558,f1043,f80106,f80107,f80108,f80109,f80110,f80251,f80252,f80119,f80128,f80130,f80132,f80133,f80134,f80136,f80138,f80139,f80140,f80141,f80145,f80268,f80156,f80284,f80283,f80282,f80281,f80739,f82816,f82815,f82814,f82766,f82764,f82762,f82760,f82758,f82756,f82710,f82709,f82701,f82692,f82691,f82681,f82673,f82672,f82671,f82670,f82661,f82660,f82650,f82649,f82648,f82642,f82641,f82638,f82637,f82636,f82626,f82611,f82610,f82608,f82595,f82594,f82593,f82592,f82587,f82585,f82578,f82577,f82530,f82529,f82527,f82521,f82520,f82514,f82513,f82512,f82507,f82505,f82504,f82498,f82492,f82491,f82482,f82481,f82480,f82479,f82468,f82467,f82455,f82454,f82453,f82449,f82448,f82433,f82428,f82412,f82411,f82406,f82393,f82392,f82375,f82372,f82371,f82369,f82363,f82361,f82360,f82985,f83159,f83199,f83225,f83223,f83243,f83248,f83265,f84376,f84406,f84405,f84404,f84403,f85007,f85917,f86793,f86794,f86796,f86543,f86545,f86550,f86553,f87920,f87971,f88033,f88032,f88031,f88106,f88105,f88104,f88589,f88588,f88587,f88586,f90986,f91038,f95124,f95123,f95122,f95121,f95223,f95222,f95221,f95339,f95338,f95337,f36220,f36219,f93020,f34138,f100107,f100106,f100105,f100099,f100098,f100097,f100013,f100012,f100137,f100108,f101628,f101627,f101510,f101509,f102300,f102023,f102313,f102316,f102398,f102406,f102409,f102422,f102425,f102435,f102449,f102458,f102496,f102498,f102504,f102507,f102552,f102554,f102565,f102663,f102675,f102771,f106075,f106060,f106045,f106040,f106100,f102904,f102905,f106029,f106105,f103868,f103873,f103876,f106193,f106292,f106293,f106296,f106297,f106445,f104561,f104563,f104577,f106545,f104596,f104598,f104599,f104601,f104602,f104604,f104676,f104981,f105009,f105011,f106653,f105116,f105121,f105126,f106746,f106755,f106773,f106782,f106805,f106810,f105593,f105598,f105601,f105605,f105637,f105639,f105653,f105662,f105666,f105680,f105663,f113141,f114333,f114334,f114367,f114368,f114224,f114369,f114371,f114373,f114351,f114564,f114566,f114572,f114705,f114704,f114605,f114604,f114805,f115361,f115362,f115363,f115364,f115365,f115366,f115367,f115368,f115369,f115370,f115371,f115372,f115373,f115374,f115375,f115376,f115377,f115378,f115379,f115380,f115381,f115382,f115383,f115384,f115387,f115388,f115389,f115390,f115391,f115392,f115408,f115409,f115420,f115128,f115648,f115671,f115801,f118263,f118266,f118267,f118272,f118279,f118286,f118290,f118291,f118303])).
fof(f118303,plain,(
  ( ! [X700,X701] : (s(bool,X700) != s(bool,X701) | p(s(bool,X701)) | s(bool,X700) = s(bool,g(s(bool,X700)))) ) | ($spl4 | $spl231 | $spl366)),
  inference(subsumption_resolution,[],[f118302,f1102])).
fof(f118302,plain,(
  ( ! [X700,X701] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X700) != s(bool,X701) | p(s(bool,X701)) | s(bool,X700) = s(bool,g(s(bool,X700)))) ) | ($spl4 | $spl231 | $spl366)),
  inference(forward_demodulation,[],[f118169,f538])).
fof(f118169,plain,(
  ( ! [X700,X701] : (s(bool,X700) != s(bool,X701) | s(bool,'F_0') = s(bool,'const.bool.BOUNDED_1'(s(bool,X700))) | p(s(bool,X701)) | s(bool,X700) = s(bool,g(s(bool,X700)))) ) | ($spl4 | $spl231 | $spl366)),
  inference(superposition,[],[f114351,f106445])).
fof(f118291,plain,(
  ( ! [X292] : (s(bool,'F_0') != s(bool,X292) | s(bool,X292) = s(bool,g(s(bool,X292)))) ) | ($spl4 | $spl231)),
  inference(global_subsumption,[],[f530,f529,f528,f527,f531,f538,f539,f548,f547,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f668,f689,f709,f708,f707,f706,f726,f721,f720,f719,f718,f736,f731,f730,f729,f728,f739,f738,f743,f742,f747,f746,f752,f751,f758,f757,f756,f777,f772,f771,f770,f769,f784,f783,f782,f781,f801,f796,f795,f794,f793,f811,f806,f805,f804,f803,f814,f813,f818,f817,f822,f821,f827,f826,f833,f832,f831,f850,f849,f848,f847,f867,f862,f861,f860,f859,f877,f872,f871,f870,f869,f880,f879,f884,f883,f888,f887,f893,f892,f899,f898,f897,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1626,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2359,f2527,f2526,f2533,f2535,f2566,f2565,f2572,f2609,f2608,f2621,f2642,f2641,f2640,f2659,f2658,f2657,f2846,f2845,f2853,f2854,f2871,f2870,f2869,f2868,f2936,f2935,f2937,f2940,f3218,f3217,f3216,f3211,f3210,f3204,f3202,f3200,f3198,f3195,f3194,f3193,f3189,f3188,f3187,f3183,f3171,f3162,f3161,f3159,f3155,f3154,f3149,f3148,f3147,f3146,f3145,f3142,f3140,f3135,f3134,f3128,f3127,f3120,f3091,f3090,f3089,f3088,f3083,f3082,f3077,f3076,f3075,f3070,f3067,f3064,f3061,f3058,f3057,f3056,f3049,f3048,f3047,f3046,f3037,f3036,f3026,f3025,f3024,f3019,f3018,f3017,f3012,f2994,f2987,f2979,f2978,f2973,f2965,f2964,f2955,f2954,f2953,f2952,f2951,f2949,f2948,f2943,f3453,f3530,f3537,f3558,f3568,f3591,f3589,f3600,f3605,f3608,f3613,f3622,f3680,f3679,f3684,f3760,f3759,f3776,f3836,f3835,f3840,f4160,f4202,f4237,f4236,f4235,f4234,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5688,f5689,f5916,f6111,f6116,f6119,f6239,f6238,f6237,f6236,f7014,f7020,f7026,f7175,f7174,f7173,f7229,f7228,f7227,f7303,f7383,f7384,f7553,f7558,f7561,f7565,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9603,f8248,f8253,f8256,f8260,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f895,f890,f829,f824,f754,f749,f687,f683,f666,f663,f693,f685,f681,f906,f874,f873,f866,f865,f851,f808,f807,f800,f799,f785,f733,f732,f725,f724,f710,f699,f696,f659,f657,f677,f6241,f6256,f6286,f684,f664,f688,f667,f692,f680,f670,f6240,f6247,f6273,f858,f857,f856,f855,f854,f853,f852,f792,f791,f790,f789,f788,f787,f786,f717,f716,f715,f714,f713,f712,f711,f9620,f908,f909,f907,f900,f894,f889,f885,f881,f876,f875,f864,f863,f834,f828,f823,f819,f815,f810,f809,f798,f797,f759,f753,f748,f744,f740,f735,f734,f723,f722,f701,f694,f691,f686,f682,f679,f676,f669,f665,f662,f660,f656,f674,f673,f672,f671,f702,f661,f697,f658,f901,f886,f882,f878,f835,f820,f816,f812,f760,f745,f741,f737,f905,f904,f903,f902,f896,f891,f868,f830,f825,f802,f755,f750,f727,f705,f655,f8277,f8276,f8275,f8274,f8273,f8272,f8271,f8244,f8008,f7582,f7581,f7580,f7579,f7578,f7577,f7576,f7549,f9615,f9614,f9613,f9612,f9611,f9610,f9609,f9606,f9605,f602,f601,f599,f596,f594,f593,f591,f587,f586,f698,f695,f845,f774,f773,f9622,f768,f767,f766,f765,f764,f763,f762,f761,f703,f653,f700,f690,f678,f675,f776,f775,f2938,f2941,f2406,f7065,f9601,f844,f9602,f9621,f9604,f9600,f6932,f4519,f1019,f846,f843,f842,f841,f840,f839,f838,f837,f836,f780,f779,f778,f704,f654,f7575,f8270,f9618,f4099,f4096,f4091,f3884,f3443,f3442,f2947,f2877,f2876,f2754,f2753,f2734,f2718,f2706,f2696,f2684,f2672,f2618,f2617,f2607,f2569,f2568,f2564,f2530,f2529,f2525,f2475,f2474,f2443,f2442,f1048,f552,f551,f12824,f12904,f12907,f12912,f12983,f12986,f12990,f2436,f2339,f8246,f8245,f7551,f7550,f2432,f2330,f2433,f2331,f8010,f8009,f9608,f9607,f604,f603,f2336,f2431,f9619,f6109,f6224,f4157,f4089,f16704,f16703,f16702,f16701,f16743,f16742,f16741,f17404,f17407,f17397,f16841,f16844,f16852,f16854,f16857,f16858,f16859,f16861,f16866,f16869,f16873,f17413,f16931,f16932,f17384,f17383,f17108,f17109,f17110,f17112,f17117,f17120,f17124,f17134,f17135,f17136,f17137,f17138,f17139,f17140,f17141,f17142,f17429,f17197,f17198,f17440,f17442,f17344,f17345,f17346,f17348,f17353,f17356,f17360,f18050,f18055,f18061,f18593,f19434,f18176,f17712,f17710,f19481,f22860,f23012,f23077,f23297,f23337,f24930,f24958,f25011,f25110,f26871,f26970,f27227,f27255,f27241,f27259,f27301,f27326,f27339,f27356,f27371,f27392,f28264,f28308,f28347,f28423,f28438,f28462,f28472,f28516,f28563,f28704,f28745,f28834,f28842,f28853,f28872,f28884,f28895,f28905,f28938,f28961,f28989,f29007,f29023,f29042,f29061,f29554,f29572,f31002,f31096,f31106,f33191,f33204,f33286,f33285,f33284,f33283,f33282,f33281,f33280,f33279,f33278,f33385,f33386,f33387,f33390,f33392,f33463,f33464,f33465,f33468,f33470,f33514,f33521,f33524,f33566,f33650,f33657,f33729,f33764,f33797,f33796,f33795,f34075,f34074,f34073,f34072,f34071,f34133,f34134,f34135,f34136,f34137,f34156,f34155,f34154,f34153,f34639,f34638,f34637,f35862,f35896,f35925,f35956,f35988,f36024,f36056,f36125,f36218,f36221,f36227,f36690,f36689,f37265,f37446,f37467,f37488,f37518,f37545,f37567,f37594,f37624,f37652,f37676,f37694,f37737,f37736,f37735,f37800,f38370,f38398,f38431,f38430,f38429,f38463,f38462,f38461,f38508,f38579,f38650,f38723,f38743,f38816,f38833,f39249,f39338,f39393,f39831,f39908,f39996,f40082,f46026,f46027,f46028,f46029,f46031,f46190,f46191,f46041,f46050,f46052,f46054,f46055,f46056,f46058,f46060,f46061,f46062,f46063,f46067,f46207,f46078,f46223,f46222,f46221,f46220,f46894,f47271,f47269,f47267,f47265,f47263,f47261,f47217,f47216,f47208,f47201,f47200,f47192,f47182,f47181,f47180,f47173,f47172,f47164,f47163,f47162,f47156,f47155,f47152,f47151,f47150,f47140,f47124,f47123,f47121,f47110,f47109,f47108,f47107,f47103,f47101,f47095,f47094,f47057,f47056,f47054,f47049,f47048,f47043,f47042,f47041,f47036,f47034,f47032,f47026,f47020,f47018,f47011,f47010,f47009,f47008,f46999,f46998,f46988,f46987,f46986,f46982,f46981,f46969,f46965,f46951,f46950,f46945,f46933,f46932,f46917,f46914,f46913,f46911,f46905,f46903,f46902,f47571,f47747,f47801,f47823,f47822,f47853,f47858,f47868,f48654,f48653,f48652,f48651,f51145,f51138,f48558,f1043,f80106,f80107,f80108,f80109,f80110,f80251,f80252,f80119,f80128,f80130,f80132,f80133,f80134,f80136,f80138,f80139,f80140,f80141,f80145,f80268,f80156,f80284,f80283,f80282,f80281,f80739,f82816,f82815,f82814,f82766,f82764,f82762,f82760,f82758,f82756,f82710,f82709,f82701,f82692,f82691,f82681,f82673,f82672,f82671,f82670,f82661,f82660,f82650,f82649,f82648,f82642,f82641,f82638,f82637,f82636,f82626,f82611,f82610,f82608,f82595,f82594,f82593,f82592,f82587,f82585,f82578,f82577,f82530,f82529,f82527,f82521,f82520,f82514,f82513,f82512,f82507,f82505,f82504,f82498,f82492,f82491,f82482,f82481,f82480,f82479,f82468,f82467,f82455,f82454,f82453,f82449,f82448,f82433,f82428,f82412,f82411,f82406,f82393,f82392,f82375,f82372,f82371,f82369,f82363,f82361,f82360,f82985,f83159,f83199,f83225,f83223,f83243,f83248,f83265,f84376,f84406,f84405,f84404,f84403,f85007,f85917,f86793,f86794,f86796,f86543,f86545,f86550,f86553,f87920,f87971,f88033,f88032,f88031,f88106,f88105,f88104,f88589,f88588,f88587,f88586,f90986,f91038,f95124,f95123,f95122,f95121,f95223,f95222,f95221,f95339,f95338,f95337,f36220,f36219,f34138,f100107,f100106,f100105,f100099,f100098,f100097,f100013,f100012,f100137,f100108,f101628,f101627,f101510,f101509,f102300,f102023,f102313,f102316,f102398,f102406,f102409,f102422,f102425,f102435,f102449,f102458,f102496,f102498,f102504,f102507,f102552,f102554,f102565,f102663,f102675,f102771,f106075,f106060,f106045,f106040,f106100,f102904,f102905,f106029,f106105,f103868,f103873,f103876,f106193,f106292,f106293,f106296,f106297,f106445,f104561,f104563,f104577,f106545,f104596,f104598,f104599,f104601,f104602,f104604,f104676,f104981,f105009,f105011,f106653,f105116,f105121,f105126,f106746,f106755,f106773,f106782,f106805,f106810,f105593,f105598,f105601,f105605,f105637,f105639,f105653,f105662,f105666,f105680,f105663,f113141,f114333,f114334,f114367,f114368,f114224,f114369,f114371,f114373,f118263,f118266,f118267,f118272,f118279,f118286,f118290])).
fof(f118290,plain,(
  ( ! [X292,X294,X296,X293,X295] : (s('type.pair.prod'(bool,X293),'const.pair.,_2'(s(bool,'T_0'),s(X293,X295))) = s('type.pair.prod'(bool,X293),'const.pair.,_2'(s(bool,X296),s(X293,X294))) | s(bool,'F_0') != s(bool,X292) | s(X293,X294) != s(X293,X295) | s(bool,X292) = s(bool,g(s(bool,X292)))) ) | ($spl4 | $spl231)),
  inference(subsumption_resolution,[],[f118289,f652])).
fof(f118289,plain,(
  ( ! [X292,X294,X296,X293,X295] : (s('type.pair.prod'(bool,X293),'const.pair.,_2'(s(bool,'T_0'),s(X293,X295))) = s('type.pair.prod'(bool,X293),'const.pair.,_2'(s(bool,X296),s(X293,X294))) | s(bool,'F_0') != s(bool,X292) | s(X293,X294) != s(X293,X295) | s(bool,'T_0') = s(bool,X296) | s(bool,X292) = s(bool,g(s(bool,X292)))) ) | ($spl4 | $spl231)),
  inference(forward_demodulation,[],[f117967,f538])).
fof(f117967,plain,(
  ( ! [X292,X294,X296,X293,X295] : (s(bool,'F_0') != s(bool,X292) | s(X293,X294) != s(X293,X295) | s('type.pair.prod'(bool,X293),'const.pair.,_2'(s(bool,X296),s(X293,X294))) = s('type.pair.prod'(bool,X293),'const.pair.,_2'(s(bool,'const.bool.BOUNDED_1'(s(bool,X292))),s(X293,X295))) | s(bool,'T_0') = s(bool,X296) | s(bool,X292) = s(bool,g(s(bool,X292)))) ) | ($spl4 | $spl231)),
  inference(superposition,[],[f3442,f106445])).
fof(f118286,plain,(
  ( ! [X277,X279,X275,X276,X278] : (s('type.pair.prod'(X276,bool),'const.pair.,_2'(s(X276,X277),s(bool,X278))) != s('type.pair.prod'(X276,bool),'const.pair.,_2'(s(X276,X279),s(bool,X275))) | s(bool,'T_0') = s(bool,X278) | s(bool,X275) = s(bool,g(s(bool,X275)))) ) | ($spl4 | $spl231)),
  inference(subsumption_resolution,[],[f118285,f1102])).
fof(f118285,plain,(
  ( ! [X277,X279,X275,X276,X278] : (s(bool,'T_0') = s(bool,'F_0') | s('type.pair.prod'(X276,bool),'const.pair.,_2'(s(X276,X277),s(bool,X278))) != s('type.pair.prod'(X276,bool),'const.pair.,_2'(s(X276,X279),s(bool,X275))) | s(bool,'T_0') = s(bool,X278) | s(bool,X275) = s(bool,g(s(bool,X275)))) ) | ($spl4 | $spl231)),
  inference(forward_demodulation,[],[f117963,f538])).
fof(f117963,plain,(
  ( ! [X277,X279,X275,X276,X278] : (s('type.pair.prod'(X276,bool),'const.pair.,_2'(s(X276,X277),s(bool,X278))) != s('type.pair.prod'(X276,bool),'const.pair.,_2'(s(X276,X279),s(bool,X275))) | s(bool,'F_0') = s(bool,'const.bool.BOUNDED_1'(s(bool,X275))) | s(bool,'T_0') = s(bool,X278) | s(bool,X275) = s(bool,g(s(bool,X275)))) ) | ($spl4 | $spl231)),
  inference(superposition,[],[f2618,f106445])).
fof(f118279,plain,(
  ( ! [X255,X253,X251,X254,X252] : (s('type.pair.prod'(bool,X252),'const.pair.,_2'(s(bool,X251),s(X252,X255))) != s('type.pair.prod'(bool,X252),'const.pair.,_2'(s(bool,X253),s(X252,X254))) | s(bool,'T_0') = s(bool,X253) | s(bool,X251) = s(bool,g(s(bool,X251)))) ) | ($spl4 | $spl231)),
  inference(subsumption_resolution,[],[f118278,f1102])).
fof(f118278,plain,(
  ( ! [X255,X253,X251,X254,X252] : (s(bool,'T_0') = s(bool,'F_0') | s('type.pair.prod'(bool,X252),'const.pair.,_2'(s(bool,X251),s(X252,X255))) != s('type.pair.prod'(bool,X252),'const.pair.,_2'(s(bool,X253),s(X252,X254))) | s(bool,'T_0') = s(bool,X253) | s(bool,X251) = s(bool,g(s(bool,X251)))) ) | ($spl4 | $spl231)),
  inference(forward_demodulation,[],[f117958,f538])).
fof(f117958,plain,(
  ( ! [X255,X253,X251,X254,X252] : (s('type.pair.prod'(bool,X252),'const.pair.,_2'(s(bool,X251),s(X252,X255))) != s('type.pair.prod'(bool,X252),'const.pair.,_2'(s(bool,X253),s(X252,X254))) | s(bool,'F_0') = s(bool,'const.bool.BOUNDED_1'(s(bool,X251))) | s(bool,'T_0') = s(bool,X253) | s(bool,X251) = s(bool,g(s(bool,X251)))) ) | ($spl4 | $spl231)),
  inference(superposition,[],[f2569,f106445])).
fof(f118272,plain,(
  ( ! [X231,X233,X230,X232] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X230),s('type.list.list'(bool),X233))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X231),s('type.list.list'(bool),X232))) | s(bool,'T_0') = s(bool,X231) | s(bool,X230) = s(bool,g(s(bool,X230)))) ) | ($spl4 | $spl231)),
  inference(subsumption_resolution,[],[f118271,f1102])).
fof(f118271,plain,(
  ( ! [X231,X233,X230,X232] : (s(bool,'T_0') = s(bool,'F_0') | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X230),s('type.list.list'(bool),X233))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X231),s('type.list.list'(bool),X232))) | s(bool,'T_0') = s(bool,X231) | s(bool,X230) = s(bool,g(s(bool,X230)))) ) | ($spl4 | $spl231)),
  inference(forward_demodulation,[],[f117953,f538])).
fof(f117953,plain,(
  ( ! [X231,X233,X230,X232] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X230),s('type.list.list'(bool),X233))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X231),s('type.list.list'(bool),X232))) | s(bool,'F_0') = s(bool,'const.bool.BOUNDED_1'(s(bool,X230))) | s(bool,'T_0') = s(bool,X231) | s(bool,X230) = s(bool,g(s(bool,X230)))) ) | ($spl4 | $spl231)),
  inference(superposition,[],[f2530,f106445])).
fof(f118267,plain,(
  ( ! [X125,X126,X124] : (~sP47('const.bool.BOUNDED_1'(s(bool,'T_0')),X125,X126) | sP48('const.bool.BOUNDED_1'(s(bool,X124)),X125,X126) | s(bool,X124) = s(bool,g(s(bool,X124)))) ) | ($spl4 | $spl231)),
  inference(forward_demodulation,[],[f117908,f538])).
fof(f117908,plain,(
  ( ! [X125,X126,X124] : (sP48('const.bool.BOUNDED_1'(s(bool,X124)),X125,X126) | ~sP47('const.bool.BOUNDED_1'(s(bool,'const.bool.BOUNDED_1'(s(bool,X124)))),X125,X126) | s(bool,X124) = s(bool,g(s(bool,X124)))) ) | ($spl4 | $spl231)),
  inference(superposition,[],[f1299,f106445])).
fof(f118266,plain,(
  ( ! [X123,X121,X122] : (~sP49('const.bool.BOUNDED_1'(s(bool,'T_0')),X122,X123) | sP50('const.bool.BOUNDED_1'(s(bool,X121)),X122,X123) | s(bool,X121) = s(bool,g(s(bool,X121)))) ) | ($spl4 | $spl231)),
  inference(forward_demodulation,[],[f117907,f538])).
fof(f117907,plain,(
  ( ! [X123,X121,X122] : (sP50('const.bool.BOUNDED_1'(s(bool,X121)),X122,X123) | ~sP49('const.bool.BOUNDED_1'(s(bool,'const.bool.BOUNDED_1'(s(bool,X121)))),X122,X123) | s(bool,X121) = s(bool,g(s(bool,X121)))) ) | ($spl4 | $spl231)),
  inference(superposition,[],[f1274,f106445])).
fof(f118263,plain,(
  ( ! [X11] : (p(s(bool,X11)) | s(bool,X11) = s(bool,g(s(bool,X11)))) ) | ($spl4 | $spl231)),
  inference(subsumption_resolution,[],[f118262,f1102])).
fof(f118262,plain,(
  ( ! [X11] : (s(bool,'T_0') = s(bool,'F_0') | p(s(bool,X11)) | s(bool,X11) = s(bool,g(s(bool,X11)))) ) | ($spl4 | $spl231)),
  inference(forward_demodulation,[],[f117864,f538])).
fof(f117864,plain,(
  ( ! [X11] : (p(s(bool,X11)) | s(bool,'F_0') = s(bool,'const.bool.BOUNDED_1'(s(bool,X11))) | s(bool,X11) = s(bool,g(s(bool,X11)))) ) | ($spl4 | $spl231)),
  inference(superposition,[],[f552,f106445])).
fof(f115801,plain,(
  ~sP42('T_0',g(s(bool,'T_0')),'F_0') | $spl258),
  inference(unit_resulting_resolution,[],[f1048,f1059,f1054,f114704,f932])).
fof(f115671,plain,(
  sP43('T_0','T_0',g(s(bool,'T_0'))) | $spl258),
  inference(unit_resulting_resolution,[],[f114605,f928])).
fof(f115648,plain,(
  ~sP42(g(s(bool,'T_0')),'T_0','F_0') | $spl258),
  inference(unit_resulting_resolution,[],[f531,f1060,f1054,f114604,f930])).
fof(f115128,plain,(
  ( ! [X373] : (~p(s(bool,happ(s(fun(bool,bool),X373),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X373),s(bool,sK65(g(s(bool,'T_0')),X373,bool)))))) ) | $spl258),
  inference(superposition,[],[f604,f93020])).
fof(f115420,plain,(
  ( ! [X372] : (s(bool,'T_0') = s(bool,sK65(g(s(bool,'T_0')),X372,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X372),s(bool,'T_0'))))) ) | $spl258),
  inference(forward_demodulation,[],[f115127,f93020])).
fof(f115127,plain,(
  ( ! [X372] : (~p(s(bool,happ(s(fun(bool,bool),X372),s(bool,'T_0')))) | s(bool,g(s(bool,'T_0'))) = s(bool,sK65(g(s(bool,'T_0')),X372,bool))) ) | $spl258),
  inference(superposition,[],[f603,f93020])).
fof(f115409,plain,(
  ( ! [X255,X257,X256] : (sP50(X255,g(s(bool,'T_0')),X256) | s(bool,X255) = s(bool,X257) | s(bool,'T_0') = s(bool,X257)) ) | $spl258),
  inference(subsumption_resolution,[],[f115007,f531])).
fof(f115007,plain,(
  ( ! [X255,X257,X256] : (~p(s(bool,'T_0')) | sP50(X255,g(s(bool,'T_0')),X256) | s(bool,X255) = s(bool,X257) | s(bool,'T_0') = s(bool,X257)) ) | $spl258),
  inference(superposition,[],[f9585,f93020])).
fof(f115408,plain,(
  ( ! [X249,X250] : (s(bool,X249) = s(bool,g(s(bool,'T_0'))) | s(bool,X249) = s(bool,X250) | s(bool,'T_0') = s(bool,X250)) ) | $spl258),
  inference(subsumption_resolution,[],[f115004,f531])).
fof(f115004,plain,(
  ( ! [X249,X250] : (~p(s(bool,'T_0')) | s(bool,X249) = s(bool,g(s(bool,'T_0'))) | s(bool,X249) = s(bool,X250) | s(bool,'T_0') = s(bool,X250)) ) | $spl258),
  inference(superposition,[],[f9568,f93020])).
fof(f115392,plain,(
  ( ! [X109,X108] : (p(s(bool,X108)) | ~sP50('const.bool.BOUNDED_1'(s(bool,X109)),X108,g(s(bool,'T_0')))) ) | $spl258),
  inference(subsumption_resolution,[],[f114901,f531])).
fof(f114901,plain,(
  ( ! [X109,X108] : (~p(s(bool,'T_0')) | p(s(bool,X108)) | ~sP50('const.bool.BOUNDED_1'(s(bool,X109)),X108,g(s(bool,'T_0')))) ) | $spl258),
  inference(superposition,[],[f2024,f93020])).
fof(f115391,plain,(
  ( ! [X107,X106] : (p(s(bool,X106)) | ~sP49(g(s(bool,'T_0')),X106,'const.bool.BOUNDED_1'(s(bool,X107)))) ) | $spl258),
  inference(subsumption_resolution,[],[f114900,f531])).
fof(f114900,plain,(
  ( ! [X107,X106] : (~p(s(bool,'T_0')) | p(s(bool,X106)) | ~sP49(g(s(bool,'T_0')),X106,'const.bool.BOUNDED_1'(s(bool,X107)))) ) | $spl258),
  inference(superposition,[],[f1990,f93020])).
fof(f115390,plain,(
  ( ! [X101,X100] : (p(s(bool,X100)) | ~sP46(X100,g(s(bool,'T_0')),'const.bool.BOUNDED_1'(s(bool,X101)))) ) | $spl258),
  inference(subsumption_resolution,[],[f114897,f531])).
fof(f114897,plain,(
  ( ! [X101,X100] : (~p(s(bool,'T_0')) | p(s(bool,X100)) | ~sP46(X100,g(s(bool,'T_0')),'const.bool.BOUNDED_1'(s(bool,X101)))) ) | $spl258),
  inference(superposition,[],[f1750,f93020])).
fof(f115389,plain,(
  ( ! [X99,X98] : (p(s(bool,X98)) | ~sP45(g(s(bool,'T_0')),'const.bool.BOUNDED_1'(s(bool,X99)),X98)) ) | $spl258),
  inference(subsumption_resolution,[],[f114896,f531])).
fof(f114896,plain,(
  ( ! [X99,X98] : (~p(s(bool,'T_0')) | p(s(bool,X98)) | ~sP45(g(s(bool,'T_0')),'const.bool.BOUNDED_1'(s(bool,X99)),X98)) ) | $spl258),
  inference(superposition,[],[f1724,f93020])).
fof(f115388,plain,(
  ( ! [X97,X96] : (p(s(bool,X96)) | ~sP42(g(s(bool,'T_0')),'const.bool.BOUNDED_1'(s(bool,X97)),X96)) ) | $spl258),
  inference(subsumption_resolution,[],[f114895,f531])).
fof(f114895,plain,(
  ( ! [X97,X96] : (~p(s(bool,'T_0')) | p(s(bool,X96)) | ~sP42(g(s(bool,'T_0')),'const.bool.BOUNDED_1'(s(bool,X97)),X96)) ) | $spl258),
  inference(superposition,[],[f1677,f93020])).
fof(f115387,plain,(
  ( ! [X94,X95] : (p(s(bool,X94)) | ~sP43(g(s(bool,'T_0')),'const.bool.BOUNDED_1'(s(bool,X95)),X94)) ) | $spl258),
  inference(subsumption_resolution,[],[f114894,f531])).
fof(f114894,plain,(
  ( ! [X94,X95] : (~p(s(bool,'T_0')) | p(s(bool,X94)) | ~sP43(g(s(bool,'T_0')),'const.bool.BOUNDED_1'(s(bool,X95)),X94)) ) | $spl258),
  inference(superposition,[],[f1659,f93020])).
fof(f115384,plain,(
  ( ! [X52,X51] : (sP48('const.bool.BOUNDED_1'(s(bool,X51)),g(s(bool,'T_0')),X52)) ) | $spl258),
  inference(subsumption_resolution,[],[f114863,f531])).
fof(f114863,plain,(
  ( ! [X52,X51] : (~p(s(bool,'T_0')) | sP48('const.bool.BOUNDED_1'(s(bool,X51)),g(s(bool,'T_0')),X52)) ) | $spl258),
  inference(superposition,[],[f1222,f93020])).
fof(f115383,plain,(
  ( ! [X50,X49] : (sP48('const.bool.BOUNDED_1'(s(bool,X49)),X50,g(s(bool,'T_0')))) ) | $spl258),
  inference(subsumption_resolution,[],[f114862,f531])).
fof(f114862,plain,(
  ( ! [X50,X49] : (~p(s(bool,'T_0')) | sP48('const.bool.BOUNDED_1'(s(bool,X49)),X50,g(s(bool,'T_0')))) ) | $spl258),
  inference(superposition,[],[f1210,f93020])).
fof(f115382,plain,(
  ( ! [X47,X48] : (sP40(g(s(bool,'T_0')),X47,'const.bool.BOUNDED_1'(s(bool,X48)))) ) | $spl258),
  inference(subsumption_resolution,[],[f114861,f531])).
fof(f114861,plain,(
  ( ! [X47,X48] : (~p(s(bool,'T_0')) | sP40(g(s(bool,'T_0')),X47,'const.bool.BOUNDED_1'(s(bool,X48)))) ) | $spl258),
  inference(superposition,[],[f1187,f93020])).
fof(f115381,plain,(
  ( ! [X45,X46] : (sP40(g(s(bool,'T_0')),'const.bool.BOUNDED_1'(s(bool,X45)),X46)) ) | $spl258),
  inference(subsumption_resolution,[],[f114860,f531])).
fof(f114860,plain,(
  ( ! [X45,X46] : (~p(s(bool,'T_0')) | sP40(g(s(bool,'T_0')),'const.bool.BOUNDED_1'(s(bool,X45)),X46)) ) | $spl258),
  inference(superposition,[],[f1182,f93020])).
fof(f115380,plain,(
  ( ! [X39,X40] : (~sP47(g(s(bool,'T_0')),X39,X40) | sP48(g(s(bool,'T_0')),X39,X40)) ) | $spl258),
  inference(subsumption_resolution,[],[f114853,f531])).
fof(f114853,plain,(
  ( ! [X39,X40] : (~p(s(bool,'T_0')) | ~sP47(g(s(bool,'T_0')),X39,X40) | sP48(g(s(bool,'T_0')),X39,X40)) ) | $spl258),
  inference(superposition,[],[f1029,f93020])).
fof(f115379,plain,(
  ( ! [X37,X38] : (~sP49(g(s(bool,'T_0')),X37,X38) | sP50(g(s(bool,'T_0')),X37,X38)) ) | $spl258),
  inference(subsumption_resolution,[],[f114852,f531])).
fof(f114852,plain,(
  ( ! [X37,X38] : (~p(s(bool,'T_0')) | ~sP49(g(s(bool,'T_0')),X37,X38) | sP50(g(s(bool,'T_0')),X37,X38)) ) | $spl258),
  inference(superposition,[],[f1028,f93020])).
fof(f115378,plain,(
  ( ! [X35,X36] : (~p(s(bool,X35)) | p(s(bool,X36)) | ~sP50(g(s(bool,'T_0')),X36,X35)) ) | $spl258),
  inference(subsumption_resolution,[],[f114851,f531])).
fof(f114851,plain,(
  ( ! [X35,X36] : (~p(s(bool,'T_0')) | ~p(s(bool,X35)) | p(s(bool,X36)) | ~sP50(g(s(bool,'T_0')),X36,X35)) ) | $spl258),
  inference(superposition,[],[f997,f93020])).
fof(f115377,plain,(
  ( ! [X33,X34] : (~p(s(bool,X33)) | sP50(g(s(bool,'T_0')),X33,X34)) ) | $spl258),
  inference(subsumption_resolution,[],[f114850,f531])).
fof(f114850,plain,(
  ( ! [X33,X34] : (~p(s(bool,'T_0')) | ~p(s(bool,X33)) | sP50(g(s(bool,'T_0')),X33,X34)) ) | $spl258),
  inference(superposition,[],[f996,f93020])).
fof(f115376,plain,(
  ( ! [X31,X32] : (p(s(bool,X31)) | sP50(g(s(bool,'T_0')),X32,X31)) ) | $spl258),
  inference(subsumption_resolution,[],[f114849,f531])).
fof(f114849,plain,(
  ( ! [X31,X32] : (~p(s(bool,'T_0')) | p(s(bool,X31)) | sP50(g(s(bool,'T_0')),X32,X31)) ) | $spl258),
  inference(superposition,[],[f995,f93020])).
fof(f115375,plain,(
  ( ! [X30,X29] : (p(s(bool,X29)) | ~p(s(bool,X30)) | ~sP49(X30,X29,g(s(bool,'T_0')))) ) | $spl258),
  inference(subsumption_resolution,[],[f114848,f531])).
fof(f114848,plain,(
  ( ! [X30,X29] : (~p(s(bool,'T_0')) | p(s(bool,X29)) | ~p(s(bool,X30)) | ~sP49(X30,X29,g(s(bool,'T_0')))) ) | $spl258),
  inference(superposition,[],[f990,f93020])).
fof(f115374,plain,(
  ( ! [X28,X27] : (p(s(bool,X27)) | p(s(bool,X28)) | ~sP48(g(s(bool,'T_0')),X28,X27)) ) | $spl258),
  inference(subsumption_resolution,[],[f114847,f531])).
fof(f114847,plain,(
  ( ! [X28,X27] : (~p(s(bool,'T_0')) | p(s(bool,X27)) | p(s(bool,X28)) | ~sP48(g(s(bool,'T_0')),X28,X27)) ) | $spl258),
  inference(superposition,[],[f980,f93020])).
fof(f115373,plain,(
  ( ! [X26,X25] : (~p(s(bool,X25)) | sP48(g(s(bool,'T_0')),X25,X26)) ) | $spl258),
  inference(subsumption_resolution,[],[f114846,f531])).
fof(f114846,plain,(
  ( ! [X26,X25] : (~p(s(bool,'T_0')) | ~p(s(bool,X25)) | sP48(g(s(bool,'T_0')),X25,X26)) ) | $spl258),
  inference(superposition,[],[f979,f93020])).
fof(f115372,plain,(
  ( ! [X24,X23] : (~p(s(bool,X23)) | sP48(g(s(bool,'T_0')),X24,X23)) ) | $spl258),
  inference(subsumption_resolution,[],[f114845,f531])).
fof(f114845,plain,(
  ( ! [X24,X23] : (~p(s(bool,'T_0')) | ~p(s(bool,X23)) | sP48(g(s(bool,'T_0')),X24,X23)) ) | $spl258),
  inference(superposition,[],[f978,f93020])).
fof(f115371,plain,(
  ( ! [X21,X22] : (p(s(bool,X21)) | p(s(bool,X22)) | ~sP47(g(s(bool,'T_0')),X21,X22)) ) | $spl258),
  inference(subsumption_resolution,[],[f114844,f531])).
fof(f114844,plain,(
  ( ! [X21,X22] : (~p(s(bool,'T_0')) | p(s(bool,X21)) | p(s(bool,X22)) | ~sP47(g(s(bool,'T_0')),X21,X22)) ) | $spl258),
  inference(superposition,[],[f973,f93020])).
fof(f115370,plain,(
  ( ! [X19,X20] : (~p(s(bool,X19)) | p(s(bool,X20)) | ~sP46(X20,X19,g(s(bool,'T_0')))) ) | $spl258),
  inference(subsumption_resolution,[],[f114843,f531])).
fof(f114843,plain,(
  ( ! [X19,X20] : (~p(s(bool,'T_0')) | ~p(s(bool,X19)) | p(s(bool,X20)) | ~sP46(X20,X19,g(s(bool,'T_0')))) ) | $spl258),
  inference(superposition,[],[f965,f93020])).
fof(f115369,plain,(
  ( ! [X17,X18] : (~p(s(bool,X17)) | p(s(bool,X18)) | ~sP45(X17,g(s(bool,'T_0')),X18)) ) | $spl258),
  inference(subsumption_resolution,[],[f114842,f531])).
fof(f114842,plain,(
  ( ! [X17,X18] : (~p(s(bool,'T_0')) | ~p(s(bool,X17)) | p(s(bool,X18)) | ~sP45(X17,g(s(bool,'T_0')),X18)) ) | $spl258),
  inference(superposition,[],[f956,f93020])).
fof(f115368,plain,(
  ( ! [X15,X16] : (~p(s(bool,X15)) | p(s(bool,X16)) | ~sP42(X15,g(s(bool,'T_0')),X16)) ) | $spl258),
  inference(subsumption_resolution,[],[f114841,f531])).
fof(f114841,plain,(
  ( ! [X15,X16] : (~p(s(bool,'T_0')) | ~p(s(bool,X15)) | p(s(bool,X16)) | ~sP42(X15,g(s(bool,'T_0')),X16)) ) | $spl258),
  inference(superposition,[],[f937,f93020])).
fof(f115367,plain,(
  ( ! [X14,X13] : (~p(s(bool,X13)) | p(s(bool,X14)) | ~sP43(X13,g(s(bool,'T_0')),X14)) ) | $spl258),
  inference(subsumption_resolution,[],[f114840,f531])).
fof(f114840,plain,(
  ( ! [X14,X13] : (~p(s(bool,'T_0')) | ~p(s(bool,X13)) | p(s(bool,X14)) | ~sP43(X13,g(s(bool,'T_0')),X14)) ) | $spl258),
  inference(superposition,[],[f933,f93020])).
fof(f115366,plain,(
  ( ! [X12,X11] : (~p(s(bool,X11)) | sP40(X11,X12,g(s(bool,'T_0')))) ) | $spl258),
  inference(subsumption_resolution,[],[f114839,f531])).
fof(f114839,plain,(
  ( ! [X12,X11] : (~p(s(bool,'T_0')) | ~p(s(bool,X11)) | sP40(X11,X12,g(s(bool,'T_0')))) ) | $spl258),
  inference(superposition,[],[f921,f93020])).
fof(f115365,plain,(
  ( ! [X10,X9] : (~p(s(bool,X9)) | sP40(X9,g(s(bool,'T_0')),X10)) ) | $spl258),
  inference(subsumption_resolution,[],[f114838,f531])).
fof(f114838,plain,(
  ( ! [X10,X9] : (~p(s(bool,'T_0')) | ~p(s(bool,X9)) | sP40(X9,g(s(bool,'T_0')),X10)) ) | $spl258),
  inference(superposition,[],[f920,f93020])).
fof(f115364,plain,(
  ( ! [X6] : (p(s(bool,X6)) | sP1(X6,g(s(bool,'T_0')))) ) | $spl258),
  inference(subsumption_resolution,[],[f114836,f531])).
fof(f114836,plain,(
  ( ! [X6] : (~p(s(bool,'T_0')) | p(s(bool,X6)) | sP1(X6,g(s(bool,'T_0')))) ) | $spl258),
  inference(superposition,[],[f643,f93020])).
fof(f115363,plain,(
  ( ! [X5] : (p(s(bool,X5)) | sP1(g(s(bool,'T_0')),X5)) ) | $spl258),
  inference(subsumption_resolution,[],[f114835,f531])).
fof(f114835,plain,(
  ( ! [X5] : (~p(s(bool,'T_0')) | p(s(bool,X5)) | sP1(g(s(bool,'T_0')),X5)) ) | $spl258),
  inference(superposition,[],[f640,f93020])).
fof(f115362,plain,(
  ( ! [X4] : (sP0(g(s(bool,'T_0')),X4)) ) | $spl258),
  inference(subsumption_resolution,[],[f114834,f531])).
fof(f114834,plain,(
  ( ! [X4] : (~p(s(bool,'T_0')) | sP0(g(s(bool,'T_0')),X4)) ) | $spl258),
  inference(superposition,[],[f625,f93020])).
fof(f115361,plain,(
  ( ! [X3] : (sP0(X3,g(s(bool,'T_0')))) ) | $spl258),
  inference(subsumption_resolution,[],[f114833,f531])).
fof(f114833,plain,(
  ( ! [X3] : (~p(s(bool,'T_0')) | sP0(X3,g(s(bool,'T_0')))) ) | $spl258),
  inference(superposition,[],[f624,f93020])).
fof(f114805,plain,(
  ( ! [X6,X5] : (s(bool,X5) = s(bool,g(s(bool,X5))) | s(bool,X5) = s(bool,X6) | s(bool,'T_0') = s(bool,X6)) ) | $spl258),
  inference(superposition,[],[f93020,f1319])).
fof(f114604,plain,(
  ~sP44('F_0',g(s(bool,'T_0')),'T_0') | $spl258),
  inference(unit_resulting_resolution,[],[f1048,f93020,f948])).
fof(f114605,plain,(
  sP44('T_0',g(s(bool,'T_0')),'T_0') | $spl258),
  inference(unit_resulting_resolution,[],[f531,f93020,f946])).
fof(f114704,plain,(
  ~sP44('F_0','T_0',g(s(bool,'T_0'))) | $spl258),
  inference(unit_resulting_resolution,[],[f1048,f93020,f948])).
fof(f114705,plain,(
  sP44('T_0','T_0',g(s(bool,'T_0'))) | $spl258),
  inference(unit_resulting_resolution,[],[f531,f93020,f946])).
fof(f114572,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) != s(bool,X1) | s(bool,'F_0') = s(bool,X1)) ) | $spl366),
  inference(condensation,[],[f114571])).
fof(f114571,plain,(
  ( ! [X19,X17,X18] : (s(bool,'T_0') = s(bool,X17) | s(bool,X18) != s(bool,X19) | s(bool,'F_0') = s(bool,X19) | s(bool,'T_0') = s(bool,X18)) ) | $spl366),
  inference(subsumption_resolution,[],[f114570,f548])).
fof(f114570,plain,(
  ( ! [X19,X17,X18] : (s(bool,'T_0') = s(bool,X17) | s(bool,X18) != s(bool,X19) | s(bool,'F_0') = s(bool,X19) | p(s(bool,X17)) | s(bool,'T_0') = s(bool,X18)) ) | $spl366),
  inference(forward_demodulation,[],[f114523,f538])).
fof(f114523,plain,(
  ( ! [X19,X17,X18] : (s(bool,X18) != s(bool,X19) | s(bool,'F_0') = s(bool,X19) | p(s(bool,X17)) | s(bool,X17) = s(bool,'const.bool.BOUNDED_1'(s(bool,X17))) | s(bool,'T_0') = s(bool,X18)) ) | $spl366),
  inference(superposition,[],[f114351,f7837])).
fof(f114373,plain,(
  ( ! [X878,X880,X879] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X880))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X879),s('type.list.list'(bool),X880))) | s(bool,X878) != s(bool,X879) | s(bool,'F_0') = s(bool,X878)) ) | ($spl4 | $spl231)),
  inference(forward_demodulation,[],[f114272,f538])).
fof(f114272,plain,(
  ( ! [X878,X880,X879] : (s(bool,X878) != s(bool,X879) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X879),s('type.list.list'(bool),X880))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'const.bool.BOUNDED_1'(s(bool,X878))),s('type.list.list'(bool),X880))) | s(bool,'F_0') = s(bool,X878)) ) | ($spl4 | $spl231)),
  inference(superposition,[],[f3622,f106100])).
fof(f114371,plain,(
  ( ! [X872,X870,X873,X871] : (s('type.pair.prod'(X872,bool),'const.pair.,_2'(s(X872,X873),s(bool,'T_0'))) = s('type.pair.prod'(X872,bool),'const.pair.,_2'(s(X872,X873),s(bool,X871))) | s(bool,X870) != s(bool,X871) | s(bool,'F_0') = s(bool,X870)) ) | ($spl4 | $spl231)),
  inference(forward_demodulation,[],[f114270,f538])).
fof(f114270,plain,(
  ( ! [X872,X870,X873,X871] : (s(bool,X870) != s(bool,X871) | s('type.pair.prod'(X872,bool),'const.pair.,_2'(s(X872,X873),s(bool,X871))) = s('type.pair.prod'(X872,bool),'const.pair.,_2'(s(X872,X873),s(bool,'const.bool.BOUNDED_1'(s(bool,X870))))) | s(bool,'F_0') = s(bool,X870)) ) | ($spl4 | $spl231)),
  inference(superposition,[],[f3453,f106100])).
fof(f114369,plain,(
  ( ! [X749,X747,X748,X750,X746] : (s('type.pair.prod'(bool,X748),'const.pair.,_2'(s(bool,'T_0'),s(X748,X750))) = s('type.pair.prod'(bool,X748),'const.pair.,_2'(s(bool,X747),s(X748,X749))) | s(bool,X746) != s(bool,X747) | s(X748,X749) != s(X748,X750) | s(bool,'F_0') = s(bool,X746)) ) | ($spl4 | $spl231)),
  inference(forward_demodulation,[],[f114238,f538])).
fof(f114238,plain,(
  ( ! [X749,X747,X748,X750,X746] : (s(bool,X746) != s(bool,X747) | s(X748,X749) != s(X748,X750) | s('type.pair.prod'(bool,X748),'const.pair.,_2'(s(bool,X747),s(X748,X749))) = s('type.pair.prod'(bool,X748),'const.pair.,_2'(s(bool,'const.bool.BOUNDED_1'(s(bool,X746))),s(X748,X750))) | s(bool,'F_0') = s(bool,X746)) ) | ($spl4 | $spl231)),
  inference(superposition,[],[f652,f106100])).
fof(f114224,plain,(
  ( ! [X687,X686] : (~p(s(bool,happ(s(fun(bool,bool),X687),s(bool,X686)))) | p(s(bool,happ(s(fun(bool,bool),X687),s(bool,sK65('const.bool.BOUNDED_1'(s(bool,X686)),X687,bool))))) | s(bool,'F_0') = s(bool,X686)) ) | ($spl4 | $spl231)),
  inference(superposition,[],[f604,f106100])).
fof(f114368,plain,(
  ( ! [X685,X684] : (s(bool,'T_0') = s(bool,sK65('const.bool.BOUNDED_1'(s(bool,X684)),X685,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X685),s(bool,X684)))) | s(bool,'F_0') = s(bool,X684)) ) | ($spl4 | $spl231)),
  inference(forward_demodulation,[],[f114223,f538])).
fof(f114223,plain,(
  ( ! [X685,X684] : (~p(s(bool,happ(s(fun(bool,bool),X685),s(bool,X684)))) | s(bool,'const.bool.BOUNDED_1'(s(bool,X684))) = s(bool,sK65('const.bool.BOUNDED_1'(s(bool,X684)),X685,bool)) | s(bool,'F_0') = s(bool,X684)) ) | ($spl4 | $spl231)),
  inference(superposition,[],[f603,f106100])).
fof(f114367,plain,(
  ( ! [X681,X683,X682] : (s(bool,'T_0') != s(bool,X683) | ~p(s(bool,happ(s(fun(bool,bool),X682),s(bool,X681)))) | p(s(bool,happ(s(fun(bool,bool),X682),s(bool,X683)))) | s(bool,'F_0') = s(bool,X681)) ) | ($spl4 | $spl231)),
  inference(forward_demodulation,[],[f114222,f538])).
fof(f114222,plain,(
  ( ! [X681,X683,X682] : (~p(s(bool,happ(s(fun(bool,bool),X682),s(bool,X681)))) | p(s(bool,happ(s(fun(bool,bool),X682),s(bool,X683)))) | s(bool,X683) != s(bool,'const.bool.BOUNDED_1'(s(bool,X681))) | s(bool,'F_0') = s(bool,X681)) ) | ($spl4 | $spl231)),
  inference(superposition,[],[f602,f106100])).
fof(f114334,plain,(
  ( ! [X125,X123,X124] : (~sP47('const.bool.BOUNDED_1'(s(bool,'T_0')),X124,X125) | sP48('const.bool.BOUNDED_1'(s(bool,X123)),X124,X125) | s(bool,'F_0') = s(bool,X123)) ) | ($spl4 | $spl231)),
  inference(forward_demodulation,[],[f113966,f538])).
fof(f113966,plain,(
  ( ! [X125,X123,X124] : (sP48('const.bool.BOUNDED_1'(s(bool,X123)),X124,X125) | ~sP47('const.bool.BOUNDED_1'(s(bool,'const.bool.BOUNDED_1'(s(bool,X123)))),X124,X125) | s(bool,'F_0') = s(bool,X123)) ) | ($spl4 | $spl231)),
  inference(superposition,[],[f1299,f106100])).
fof(f114333,plain,(
  ( ! [X121,X122,X120] : (~sP49('const.bool.BOUNDED_1'(s(bool,'T_0')),X121,X122) | sP50('const.bool.BOUNDED_1'(s(bool,X120)),X121,X122) | s(bool,'F_0') = s(bool,X120)) ) | ($spl4 | $spl231)),
  inference(forward_demodulation,[],[f113965,f538])).
fof(f113965,plain,(
  ( ! [X121,X122,X120] : (sP50('const.bool.BOUNDED_1'(s(bool,X120)),X121,X122) | ~sP49('const.bool.BOUNDED_1'(s(bool,'const.bool.BOUNDED_1'(s(bool,X120)))),X121,X122) | s(bool,'F_0') = s(bool,X120)) ) | ($spl4 | $spl231)),
  inference(superposition,[],[f1274,f106100])).
fof(f113141,plain,(
  ( ! [X0,X1] : (s(bool,X1) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X0),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X0),s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X0,'type.list.list'('type.conSem.v')))))) ) | $spl4),
  inference(subsumption_resolution,[],[f113127,f1048])).
fof(f113127,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | s(bool,X1) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X0),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X0),s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X0,'type.list.list'('type.conSem.v')))))) ) | $spl4),
  inference(superposition,[],[f85007,f539])).
fof(f105680,plain,(
  ( ! [X0] : (s(bool,X0) != s(bool,'const.bool.BOUNDED_1'(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(duplicate_literal_removal,[],[f105672])).
fof(f105672,plain,(
  ( ! [X0] : (s(bool,X0) != s(bool,'const.bool.BOUNDED_1'(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(equality_factoring,[],[f7837])).
fof(f105666,plain,(
  ( ! [X0,X1] : (s(bool,X1) != s(bool,'const.bool.BOUNDED_1'(s(bool,X0))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) )),
  inference(equality_factoring,[],[f7837])).
fof(f105662,plain,(
  ( ! [X2060,X2058,X2059,X2057] : (s(X2059,f(s(bool,'T_0'))) != s(X2059,g(s(bool,'T_0'))) | s(fun(bool,X2059),X2057) = s(fun(bool,X2059),X2058) | s(bool,X2060) = s(bool,'const.bool.BOUNDED_1'(s(bool,X2060))) | s(bool,X2060) = s(bool,sK66(X2057,X2058,X2059,bool))) )),
  inference(superposition,[],[f649,f7837])).
fof(f105653,plain,(
  ( ! [X2025,X2023,X2024,X2022] : (s(bool,'T_0') != s(bool,f(s(X2022,sK66(X2023,X2024,bool,X2022)))) | s(fun(X2022,bool),X2023) = s(fun(X2022,bool),X2024) | s(bool,X2025) = s(bool,'const.bool.BOUNDED_1'(s(bool,X2025))) | s(bool,X2025) = s(bool,g(s(X2022,sK66(X2023,X2024,bool,X2022))))) )),
  inference(superposition,[],[f649,f7837])).
fof(f105639,plain,(
  ( ! [X1969,X1967,X1970,X1968] : (s(bool,'T_0') != s(bool,X1968) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X1967),s('type.list.list'(bool),X1969))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X1968),s('type.list.list'(bool),X1969))) | s(bool,X1970) = s(bool,'const.bool.BOUNDED_1'(s(bool,X1970))) | s(bool,X1967) = s(bool,X1970)) )),
  inference(superposition,[],[f3622,f7837])).
fof(f105637,plain,(
  ( ! [X1961,X1959,X1957,X1960,X1958] : (s(bool,'T_0') != s(bool,X1958) | s('type.pair.prod'(X1959,bool),'const.pair.,_2'(s(X1959,X1960),s(bool,X1957))) = s('type.pair.prod'(X1959,bool),'const.pair.,_2'(s(X1959,X1960),s(bool,X1958))) | s(bool,X1961) = s(bool,'const.bool.BOUNDED_1'(s(bool,X1961))) | s(bool,X1957) = s(bool,X1961)) )),
  inference(superposition,[],[f3453,f7837])).
fof(f105605,plain,(
  ( ! [X1806,X1804,X1802,X1805,X1803,X1801] : (s(bool,'T_0') != s(bool,X1802) | s(X1803,X1804) != s(X1803,X1805) | s('type.pair.prod'(bool,X1803),'const.pair.,_2'(s(bool,X1801),s(X1803,X1805))) = s('type.pair.prod'(bool,X1803),'const.pair.,_2'(s(bool,X1802),s(X1803,X1804))) | s(bool,X1806) = s(bool,'const.bool.BOUNDED_1'(s(bool,X1806))) | s(bool,X1801) = s(bool,X1806)) )),
  inference(superposition,[],[f652,f7837])).
fof(f105601,plain,(
  ( ! [X1778,X1780,X1782,X1777,X1779,X1781] : (s('type.pair.prod'(X1778,bool),'const.pair.,_2'(s(X1778,X1781),s(bool,'T_0'))) != s('type.pair.prod'(X1778,bool),'const.pair.,_2'(s(X1778,X1779),s(bool,X1780))) | s(bool,X1777) = s(bool,X1780) | s(bool,X1782) = s(bool,'const.bool.BOUNDED_1'(s(bool,X1782))) | s(bool,X1777) = s(bool,X1782)) )),
  inference(superposition,[],[f651,f7837])).
fof(f105598,plain,(
  ( ! [X1761,X1763,X1759,X1760,X1762,X1764] : (s('type.pair.prod'(bool,X1760),'const.pair.,_2'(s(bool,'T_0'),s(X1760,X1763))) != s('type.pair.prod'(bool,X1760),'const.pair.,_2'(s(bool,X1761),s(X1760,X1762))) | s(bool,X1759) = s(bool,X1761) | s(bool,X1764) = s(bool,'const.bool.BOUNDED_1'(s(bool,X1764))) | s(bool,X1759) = s(bool,X1764)) )),
  inference(superposition,[],[f650,f7837])).
fof(f105593,plain,(
  ( ! [X1734,X1736,X1733,X1735,X1737] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X1734))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X1735),s('type.list.list'(bool),X1736))) | s(bool,X1733) = s(bool,X1735) | s(bool,X1737) = s(bool,'const.bool.BOUNDED_1'(s(bool,X1737))) | s(bool,X1733) = s(bool,X1737)) )),
  inference(superposition,[],[f606,f7837])).
fof(f106810,plain,(
  ( ! [X1596,X1595] : (s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X1595,'type.list.list'('type.conSem.v'))) | s(bool,X1596) = s(bool,'const.bool.BOUNDED_1'(s(bool,X1596))) | s(bool,X1596) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X1595),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(subsumption_resolution,[],[f105567,f531])).
fof(f105567,plain,(
  ( ! [X1596,X1595] : (~p(s(bool,'T_0')) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X1595,'type.list.list'('type.conSem.v'))) | s(bool,X1596) = s(bool,'const.bool.BOUNDED_1'(s(bool,X1596))) | s(bool,X1596) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X1595),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(superposition,[],[f80268,f7837])).
fof(f106805,plain,(
  ( ! [X1586,X1588,X1587] : (s(bool,'F_0') = s(bool,sK65('F_0',X1586,bool)) | s(bool,'T_0') = s(bool,X1587) | s(bool,X1588) = s(bool,'const.bool.BOUNDED_1'(s(bool,X1588))) | s(bool,X1588) = s(bool,happ(s(fun(bool,bool),X1586),s(bool,X1587)))) )),
  inference(subsumption_resolution,[],[f105564,f531])).
fof(f105564,plain,(
  ( ! [X1586,X1588,X1587] : (~p(s(bool,'T_0')) | s(bool,'F_0') = s(bool,sK65('F_0',X1586,bool)) | s(bool,'T_0') = s(bool,X1587) | s(bool,X1588) = s(bool,'const.bool.BOUNDED_1'(s(bool,X1588))) | s(bool,X1588) = s(bool,happ(s(fun(bool,bool),X1586),s(bool,X1587)))) )),
  inference(superposition,[],[f2331,f7837])).
fof(f106782,plain,(
  ( ! [X1542,X1541,X1543] : (s(bool,X1542) = s(bool,sK65(X1542,X1541,bool)) | s(bool,'T_0') = s(bool,X1542) | s(bool,X1543) = s(bool,'const.bool.BOUNDED_1'(s(bool,X1543))) | s(bool,X1543) = s(bool,happ(s(fun(bool,bool),X1541),s(bool,'F_0')))) )),
  inference(subsumption_resolution,[],[f105552,f531])).
fof(f105552,plain,(
  ( ! [X1542,X1541,X1543] : (~p(s(bool,'T_0')) | s(bool,X1542) = s(bool,sK65(X1542,X1541,bool)) | s(bool,'T_0') = s(bool,X1542) | s(bool,X1543) = s(bool,'const.bool.BOUNDED_1'(s(bool,X1543))) | s(bool,X1543) = s(bool,happ(s(fun(bool,bool),X1541),s(bool,'F_0')))) )),
  inference(superposition,[],[f2330,f7837])).
fof(f106773,plain,(
  ( ! [X1527,X1528,X1529] : (s(bool,'T_0') = s(bool,sK65('const.bool.BOUNDED_1'(s(bool,X1528)),X1527,bool)) | s(bool,X1529) = s(bool,'const.bool.BOUNDED_1'(s(bool,X1529))) | s(bool,X1529) = s(bool,happ(s(fun(bool,bool),X1527),s(bool,'T_0')))) )),
  inference(subsumption_resolution,[],[f105546,f531])).
fof(f105546,plain,(
  ( ! [X1527,X1528,X1529] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,sK65('const.bool.BOUNDED_1'(s(bool,X1528)),X1527,bool)) | s(bool,X1529) = s(bool,'const.bool.BOUNDED_1'(s(bool,X1529))) | s(bool,X1529) = s(bool,happ(s(fun(bool,bool),X1527),s(bool,'T_0')))) )),
  inference(superposition,[],[f2339,f7837])).
fof(f106755,plain,(
  ( ! [X1482,X1484,X1481,X1483] : (s(X1481,X1483) = s(X1481,sK65(X1483,X1482,X1481)) | s(bool,X1484) = s(bool,'const.bool.BOUNDED_1'(s(bool,X1484))) | s(bool,X1484) = s(bool,happ(s(fun(X1481,bool),X1482),s(X1481,X1483)))) )),
  inference(subsumption_resolution,[],[f105536,f531])).
fof(f105536,plain,(
  ( ! [X1482,X1484,X1481,X1483] : (~p(s(bool,'T_0')) | s(X1481,X1483) = s(X1481,sK65(X1483,X1482,X1481)) | s(bool,X1484) = s(bool,'const.bool.BOUNDED_1'(s(bool,X1484))) | s(bool,X1484) = s(bool,happ(s(fun(X1481,bool),X1482),s(X1481,X1483)))) )),
  inference(superposition,[],[f603,f7837])).
fof(f106746,plain,(
  ( ! [X1457,X1455,X1456,X1458] : (s('type.conSem.v',X1457) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),sK253(X1457,X1456,X1455)))) | s(bool,X1458) = s(bool,'const.bool.BOUNDED_1'(s(bool,X1458))) | s(bool,X1458) = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1455),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X1456))),s('type.conSem.v',X1457)))) )),
  inference(subsumption_resolution,[],[f105531,f531])).
fof(f105531,plain,(
  ( ! [X1457,X1455,X1456,X1458] : (~p(s(bool,'T_0')) | s('type.conSem.v',X1457) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),sK253(X1457,X1456,X1455)))) | s(bool,X1458) = s(bool,'const.bool.BOUNDED_1'(s(bool,X1458))) | s(bool,X1458) = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1455),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X1456))),s('type.conSem.v',X1457)))) )),
  inference(superposition,[],[f845,f7837])).
fof(f106653,plain,(
  ( ! [X8,X9] : (s(bool,'F_0') != s(bool,X8) | s(bool,X9) = s(bool,'const.bool.BOUNDED_1'(s(bool,X9))) | s(bool,X8) = s(bool,X9)) )),
  inference(subsumption_resolution,[],[f105026,f531])).
fof(f105026,plain,(
  ( ! [X8,X9] : (~p(s(bool,'T_0')) | s(bool,'F_0') != s(bool,X8) | s(bool,X9) = s(bool,'const.bool.BOUNDED_1'(s(bool,X9))) | s(bool,X8) = s(bool,X9)) )),
  inference(superposition,[],[f551,f7837])).
fof(f105011,plain,(
  ( ! [X1463,X1464,X1462,X1465] : (s(bool,X1462) != s(bool,X1463) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X1464))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X1463),s('type.list.list'(bool),X1464))) | s(bool,X1465) = s(bool,'const.bool.BOUNDED_1'(s(bool,X1465))) | s(bool,X1462) = s(bool,X1465)) )),
  inference(superposition,[],[f3622,f7837])).
fof(f105009,plain,(
  ( ! [X1453,X1455,X1456,X1452,X1454] : (s(bool,X1452) != s(bool,X1453) | s('type.pair.prod'(X1454,bool),'const.pair.,_2'(s(X1454,X1455),s(bool,'T_0'))) = s('type.pair.prod'(X1454,bool),'const.pair.,_2'(s(X1454,X1455),s(bool,X1453))) | s(bool,X1456) = s(bool,'const.bool.BOUNDED_1'(s(bool,X1456))) | s(bool,X1452) = s(bool,X1456)) )),
  inference(superposition,[],[f3453,f7837])).
fof(f104981,plain,(
  ( ! [X1300,X1302,X1305,X1301,X1303,X1304] : (s(bool,X1300) != s(bool,X1301) | s(X1302,X1303) != s(X1302,X1304) | s('type.pair.prod'(bool,X1302),'const.pair.,_2'(s(bool,'T_0'),s(X1302,X1304))) = s('type.pair.prod'(bool,X1302),'const.pair.,_2'(s(bool,X1301),s(X1302,X1303))) | s(bool,X1305) = s(bool,'const.bool.BOUNDED_1'(s(bool,X1305))) | s(bool,X1300) = s(bool,X1305)) )),
  inference(superposition,[],[f652,f7837])).
fof(f104676,plain,(
  ( ! [X300,X301] : (s(bool,X300) = s(bool,'const.bool.BOUNDED_1'(s(bool,X300))) | s(bool,X301) = s(bool,'const.bool.BOUNDED_1'(s(bool,X301))) | s(bool,X300) = s(bool,X301)) )),
  inference(superposition,[],[f538,f7837])).
fof(f104604,plain,(
  ( ! [X78,X76,X74,X72,X77,X75,X73] : (s('type.pair.prod'(X73,bool),'const.pair.,_2'(s(X73,X74),s(bool,X72))) != s('type.pair.prod'(X73,bool),'const.pair.,_2'(s(X73,X75),s(bool,X76))) | s(bool,X76) = s(bool,'const.bool.BOUNDED_1'(s(bool,X77))) | s(bool,X78) = s(bool,'const.bool.BOUNDED_1'(s(bool,X78))) | s(bool,X72) = s(bool,X78)) )),
  inference(superposition,[],[f2621,f7837])).
fof(f104602,plain,(
  ( ! [X61,X64,X62,X65,X63] : (s('type.pair.prod'(X62,bool),'const.pair.,_2'(s(X62,X63),s(bool,'F_0'))) != s('type.pair.prod'(X62,bool),'const.pair.,_2'(s(X62,X64),s(bool,X61))) | s(bool,X65) = s(bool,'const.bool.BOUNDED_1'(s(bool,X65))) | s(bool,X61) = s(bool,X65)) )),
  inference(superposition,[],[f2607,f7837])).
fof(f104601,plain,(
  ( ! [X59,X57,X54,X60,X58,X56,X55] : (s('type.pair.prod'(bool,X55),'const.pair.,_2'(s(bool,X54),s(X55,X56))) != s('type.pair.prod'(bool,X55),'const.pair.,_2'(s(bool,X57),s(X55,X58))) | s(bool,X57) = s(bool,'const.bool.BOUNDED_1'(s(bool,X59))) | s(bool,X60) = s(bool,'const.bool.BOUNDED_1'(s(bool,X60))) | s(bool,X54) = s(bool,X60)) )),
  inference(superposition,[],[f2572,f7837])).
fof(f104599,plain,(
  ( ! [X47,X45,X43,X46,X44] : (s('type.pair.prod'(bool,X44),'const.pair.,_2'(s(bool,'F_0'),s(X44,X46))) != s('type.pair.prod'(bool,X44),'const.pair.,_2'(s(bool,X43),s(X44,X45))) | s(bool,X47) = s(bool,'const.bool.BOUNDED_1'(s(bool,X47))) | s(bool,X43) = s(bool,X47)) )),
  inference(superposition,[],[f2564,f7837])).
fof(f104598,plain,(
  ( ! [X39,X37,X41,X38,X42,X40] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X37),s('type.list.list'(bool),X38))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X39),s('type.list.list'(bool),X40))) | s(bool,X39) = s(bool,'const.bool.BOUNDED_1'(s(bool,X41))) | s(bool,X42) = s(bool,'const.bool.BOUNDED_1'(s(bool,X42))) | s(bool,X37) = s(bool,X42)) )),
  inference(superposition,[],[f2533,f7837])).
fof(f104596,plain,(
  ( ! [X30,X28,X31,X29] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X30))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X28),s('type.list.list'(bool),X29))) | s(bool,X31) = s(bool,'const.bool.BOUNDED_1'(s(bool,X31))) | s(bool,X28) = s(bool,X31)) )),
  inference(superposition,[],[f2525,f7837])).
fof(f104577,plain,(
  ( ! [X2041,X2039,X2040,X2038] : (s(bool,X2041) != s(bool,f(s(X2038,sK66(X2039,X2040,bool,X2038)))) | s(fun(X2038,bool),X2039) = s(fun(X2038,bool),X2040) | s(bool,X2041) = s(bool,'const.bool.BOUNDED_1'(s(bool,X2041))) | s(bool,'T_0') = s(bool,g(s(X2038,sK66(X2039,X2040,bool,X2038))))) )),
  inference(superposition,[],[f649,f7837])).
fof(f104563,plain,(
  ( ! [X1981,X1984,X1982,X1983] : (s(bool,X1982) != s(bool,X1983) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X1981),s('type.list.list'(bool),X1984))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X1983),s('type.list.list'(bool),X1984))) | s(bool,X1982) = s(bool,'const.bool.BOUNDED_1'(s(bool,X1982))) | s(bool,'T_0') = s(bool,X1981)) )),
  inference(superposition,[],[f3622,f7837])).
fof(f104561,plain,(
  ( ! [X1975,X1973,X1971,X1974,X1972] : (s(bool,X1972) != s(bool,X1973) | s('type.pair.prod'(X1974,bool),'const.pair.,_2'(s(X1974,X1975),s(bool,X1971))) = s('type.pair.prod'(X1974,bool),'const.pair.,_2'(s(X1974,X1975),s(bool,X1973))) | s(bool,X1972) = s(bool,'const.bool.BOUNDED_1'(s(bool,X1972))) | s(bool,'T_0') = s(bool,X1971)) )),
  inference(superposition,[],[f3453,f7837])).
fof(f106445,plain,(
  ( ! [X1407] : (s(bool,X1407) = s(bool,'const.bool.BOUNDED_1'(s(bool,X1407))) | s(bool,X1407) = s(bool,g(s(bool,X1407)))) ) | ($spl4 | $spl231)),
  inference(subsumption_resolution,[],[f104423,f1102])).
fof(f104423,plain,(
  ( ! [X1407] : (s(bool,X1407) = s(bool,g(s(bool,X1407))) | s(bool,X1407) = s(bool,'const.bool.BOUNDED_1'(s(bool,X1407))) | s(bool,'T_0') = s(bool,'F_0')) ) | ($spl4 | $spl231)),
  inference(superposition,[],[f100137,f7837])).
fof(f106297,plain,(
  ( ! [X1254] : (s(bool,'T_0') != s(bool,g(s(bool,X1254))) | s(bool,X1254) = s(bool,'const.bool.BOUNDED_1'(s(bool,X1254)))) ) | $spl231),
  inference(subsumption_resolution,[],[f104347,f1102])).
fof(f104347,plain,(
  ( ! [X1254] : (s(bool,'T_0') != s(bool,g(s(bool,X1254))) | s(bool,X1254) = s(bool,'const.bool.BOUNDED_1'(s(bool,X1254))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl231),
  inference(superposition,[],[f34138,f7837])).
fof(f106296,plain,(
  ( ! [X1252,X1251,X1253] : (s(bool,X1251) != s(bool,X1252) | s(bool,X1252) = s(bool,X1253) | s(bool,'T_0') = s(bool,X1253) | s(bool,X1251) = s(bool,'const.bool.BOUNDED_1'(s(bool,X1251)))) )),
  inference(subsumption_resolution,[],[f104346,f1102])).
fof(f104346,plain,(
  ( ! [X1252,X1251,X1253] : (s(bool,X1251) != s(bool,X1252) | s(bool,X1252) = s(bool,X1253) | s(bool,'T_0') = s(bool,X1253) | s(bool,X1251) = s(bool,'const.bool.BOUNDED_1'(s(bool,X1251))) | s(bool,'T_0') = s(bool,'F_0')) )),
  inference(superposition,[],[f9567,f7837])).
fof(f106293,plain,(
  ( ! [X1242,X1246,X1244,X1243,X1241,X1245] : (s(bool,X1241) != s(bool,X1242) | s(X1243,X1244) != s(X1243,X1245) | s('type.pair.prod'(bool,X1243),'const.pair.,_2'(s(bool,X1242),s(X1243,X1245))) = s('type.pair.prod'(bool,X1243),'const.pair.,_2'(s(bool,X1246),s(X1243,X1244))) | s(bool,'T_0') = s(bool,X1246) | s(bool,X1241) = s(bool,'const.bool.BOUNDED_1'(s(bool,X1241)))) )),
  inference(subsumption_resolution,[],[f104344,f1102])).
fof(f104344,plain,(
  ( ! [X1242,X1246,X1244,X1243,X1241,X1245] : (s(bool,X1241) != s(bool,X1242) | s(X1243,X1244) != s(X1243,X1245) | s('type.pair.prod'(bool,X1243),'const.pair.,_2'(s(bool,X1242),s(X1243,X1245))) = s('type.pair.prod'(bool,X1243),'const.pair.,_2'(s(bool,X1246),s(X1243,X1244))) | s(bool,'T_0') = s(bool,X1246) | s(bool,X1241) = s(bool,'const.bool.BOUNDED_1'(s(bool,X1241))) | s(bool,'T_0') = s(bool,'F_0')) )),
  inference(superposition,[],[f3442,f7837])).
fof(f106292,plain,(
  ( ! [X1234,X1236,X1235,X1233] : (s(X1234,f(s(bool,X1233))) != s(X1234,g(s(bool,X1233))) | s(fun(bool,X1234),X1235) = s(fun(bool,X1234),X1236) | s(bool,'T_0') = s(bool,sK66(X1235,X1236,X1234,bool)) | s(bool,X1233) = s(bool,'const.bool.BOUNDED_1'(s(bool,X1233)))) )),
  inference(subsumption_resolution,[],[f104343,f1102])).
fof(f104343,plain,(
  ( ! [X1234,X1236,X1235,X1233] : (s(X1234,f(s(bool,X1233))) != s(X1234,g(s(bool,X1233))) | s(fun(bool,X1234),X1235) = s(fun(bool,X1234),X1236) | s(bool,'T_0') = s(bool,sK66(X1235,X1236,X1234,bool)) | s(bool,X1233) = s(bool,'const.bool.BOUNDED_1'(s(bool,X1233))) | s(bool,'T_0') = s(bool,'F_0')) )),
  inference(superposition,[],[f2876,f7837])).
fof(f103876,plain,(
  ( ! [X1795,X1793,X1791,X1796,X1794,X1792] : (s('type.pair.prod'(X1793,bool),'const.pair.,_2'(s(X1793,X1794),s(bool,X1795))) != s('type.pair.prod'(X1793,bool),'const.pair.,_2'(s(X1793,X1796),s(bool,X1792))) | s(bool,X1791) = s(bool,X1795) | s(bool,X1791) = s(bool,'const.bool.BOUNDED_1'(s(bool,X1791))) | s(bool,'T_0') = s(bool,X1792)) )),
  inference(superposition,[],[f651,f7837])).
fof(f103873,plain,(
  ( ! [X1773,X1775,X1776,X1778,X1774,X1777] : (s('type.pair.prod'(bool,X1775),'const.pair.,_2'(s(bool,X1774),s(X1775,X1778))) != s('type.pair.prod'(bool,X1775),'const.pair.,_2'(s(bool,X1776),s(X1775,X1777))) | s(bool,X1773) = s(bool,X1776) | s(bool,X1773) = s(bool,'const.bool.BOUNDED_1'(s(bool,X1773))) | s(bool,'T_0') = s(bool,X1774)) )),
  inference(superposition,[],[f650,f7837])).
fof(f103868,plain,(
  ( ! [X1747,X1749,X1751,X1748,X1750] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X1748),s('type.list.list'(bool),X1749))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X1750),s('type.list.list'(bool),X1751))) | s(bool,X1747) = s(bool,X1750) | s(bool,X1747) = s(bool,'const.bool.BOUNDED_1'(s(bool,X1747))) | s(bool,'T_0') = s(bool,X1748)) )),
  inference(superposition,[],[f606,f7837])).
fof(f106105,plain,(
  ( ! [X33,X32] : (s(bool,X33) = s(bool,'const.bool.BOUNDED_1'(s(bool,X33))) | s(bool,X33) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X32),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(subsumption_resolution,[],[f102926,f1102])).
fof(f102926,plain,(
  ( ! [X33,X32] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X33) = s(bool,'const.bool.BOUNDED_1'(s(bool,X33))) | s(bool,X33) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X32),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(superposition,[],[f7837,f82673])).
fof(f102905,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,X4) = s(bool,X5) | s(bool,X6) = s(bool,'const.bool.BOUNDED_1'(s(bool,X6))) | s(bool,X5) = s(bool,X6) | s(bool,X4) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f7837,f1319])).
fof(f102904,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X2) = s(bool,'const.bool.BOUNDED_1'(s(bool,X2))) | s(bool,X1) = s(bool,X2) | s(bool,X3) = s(bool,'const.bool.BOUNDED_1'(s(bool,X3))) | s(bool,X0) = s(bool,X3)) )),
  inference(superposition,[],[f7837,f7837])).
fof(f102771,plain,(
  ( ! [X0] : (sP42('T_0',g(s(bool,X0)),'F_0') | s(bool,'T_0') = s(bool,X0)) ) | $spl231),
  inference(superposition,[],[f102552,f539])).
fof(f102675,plain,(
  ( ! [X0] : (~sP43('T_0','T_0',g(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | $spl231),
  inference(superposition,[],[f102504,f539])).
fof(f102663,plain,(
  ( ! [X0] : (sP42(g(s(bool,X0)),'T_0','F_0') | s(bool,'T_0') = s(bool,X0)) ) | $spl231),
  inference(superposition,[],[f102496,f539])).
fof(f102565,plain,(
  ( ! [X0] : (~sP44('T_0','T_0',g(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | $spl231),
  inference(superposition,[],[f100099,f539])).
fof(f102554,plain,(
  ( ! [X0] : (sP44('F_0','T_0',g(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | $spl231),
  inference(superposition,[],[f100098,f539])).
fof(f102552,plain,(
  sP42('T_0',g(s(bool,'F_0')),'F_0') | $spl231),
  inference(unit_resulting_resolution,[],[f100098,f927])).
fof(f102507,plain,(
  ( ! [X0] : (~sP44('T_0',g(s(bool,X0)),'T_0') | s(bool,'T_0') = s(bool,X0)) ) | $spl231),
  inference(superposition,[],[f100013,f539])).
fof(f102504,plain,(
  ~sP43('T_0','T_0',g(s(bool,'F_0'))) | $spl231),
  inference(unit_resulting_resolution,[],[f531,f1060,f1055,f100013,f930])).
fof(f102498,plain,(
  ( ! [X0] : (sP44('F_0',g(s(bool,X0)),'T_0') | s(bool,'T_0') = s(bool,X0)) ) | $spl231),
  inference(superposition,[],[f100012,f539])).
fof(f102496,plain,(
  sP42(g(s(bool,'F_0')),'T_0','F_0') | $spl231),
  inference(unit_resulting_resolution,[],[f100012,f927])).
fof(f102458,plain,(
  ( ! [X0] : (sP43('T_0',g(s(bool,X0)),'F_0') | s(bool,'T_0') = s(bool,X0)) ) | ($spl4 | $spl231)),
  inference(superposition,[],[f102422,f539])).
fof(f102449,plain,(
  ( ! [X0] : (~sP41(g(s(bool,X0)),'F_0','F_0') | s(bool,'T_0') = s(bool,X0)) ) | ($spl4 | $spl231)),
  inference(superposition,[],[f102406,f539])).
fof(f102435,plain,(
  ( ! [X0] : (~sP41('F_0',g(s(bool,X0)),'F_0') | s(bool,'T_0') = s(bool,X0)) ) | ($spl4 | $spl231)),
  inference(superposition,[],[f102313,f539])).
fof(f102425,plain,(
  ( ! [X0] : (sP44('T_0','F_0',g(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl4 | $spl231)),
  inference(superposition,[],[f101628,f539])).
fof(f102422,plain,(
  sP43('T_0',g(s(bool,'F_0')),'F_0') | ($spl4 | $spl231)),
  inference(unit_resulting_resolution,[],[f101628,f928])).
fof(f102409,plain,(
  ( ! [X0] : (~sP44('F_0','F_0',g(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl4 | $spl231)),
  inference(superposition,[],[f101627,f539])).
fof(f102406,plain,(
  ~sP41(g(s(bool,'F_0')),'F_0','F_0') | ($spl4 | $spl231)),
  inference(unit_resulting_resolution,[],[f1048,f1057,f1054,f101627,f931])).
fof(f102398,plain,(
  ( ! [X0] : (sP44('T_0',g(s(bool,X0)),'F_0') | s(bool,'T_0') = s(bool,X0)) ) | ($spl4 | $spl231)),
  inference(superposition,[],[f101510,f539])).
fof(f102316,plain,(
  ( ! [X0] : (~sP44('F_0',g(s(bool,X0)),'F_0') | s(bool,'T_0') = s(bool,X0)) ) | ($spl4 | $spl231)),
  inference(superposition,[],[f101509,f539])).
fof(f102313,plain,(
  ~sP41('F_0',g(s(bool,'F_0')),'F_0') | ($spl4 | $spl231)),
  inference(unit_resulting_resolution,[],[f1048,f1056,f1054,f101509,f932])).
fof(f102023,plain,(
  ( ! [X355] : (~p(s(bool,happ(s(fun(bool,bool),X355),s(bool,'F_0')))) | p(s(bool,happ(s(fun(bool,bool),X355),s(bool,sK65(g(s(bool,'F_0')),X355,bool)))))) ) | ($spl4 | $spl231)),
  inference(superposition,[],[f604,f100137])).
fof(f102300,plain,(
  ( ! [X354] : (s(bool,'F_0') = s(bool,sK65(g(s(bool,'F_0')),X354,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X354),s(bool,'F_0'))))) ) | ($spl4 | $spl231)),
  inference(forward_demodulation,[],[f102022,f100137])).
fof(f102022,plain,(
  ( ! [X354] : (~p(s(bool,happ(s(fun(bool,bool),X354),s(bool,'F_0')))) | s(bool,g(s(bool,'F_0'))) = s(bool,sK65(g(s(bool,'F_0')),X354,bool))) ) | ($spl4 | $spl231)),
  inference(superposition,[],[f603,f100137])).
fof(f101509,plain,(
  ~sP44('F_0',g(s(bool,'F_0')),'F_0') | ($spl4 | $spl231)),
  inference(unit_resulting_resolution,[],[f1048,f100137,f948])).
fof(f101510,plain,(
  sP44('T_0',g(s(bool,'F_0')),'F_0') | ($spl4 | $spl231)),
  inference(unit_resulting_resolution,[],[f531,f100137,f946])).
fof(f101627,plain,(
  ~sP44('F_0','F_0',g(s(bool,'F_0'))) | ($spl4 | $spl231)),
  inference(unit_resulting_resolution,[],[f1048,f100137,f948])).
fof(f101628,plain,(
  sP44('T_0','F_0',g(s(bool,'F_0'))) | ($spl4 | $spl231)),
  inference(unit_resulting_resolution,[],[f531,f100137,f946])).
fof(f100108,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,g(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | $spl231),
  inference(superposition,[],[f34138,f539])).
fof(f100012,plain,(
  sP44('F_0',g(s(bool,'F_0')),'T_0') | $spl231),
  inference(unit_resulting_resolution,[],[f1048,f34138,f945])).
fof(f100013,plain,(
  ~sP44('T_0',g(s(bool,'F_0')),'T_0') | $spl231),
  inference(unit_resulting_resolution,[],[f531,f34138,f947])).
fof(f100097,plain,(
  ~p(s(bool,g(s(bool,'F_0')))) | $spl231),
  inference(unit_resulting_resolution,[],[f531,f34138,f612])).
fof(f100098,plain,(
  sP44('F_0','T_0',g(s(bool,'F_0'))) | $spl231),
  inference(unit_resulting_resolution,[],[f1048,f34138,f945])).
fof(f100099,plain,(
  ~sP44('T_0','T_0',g(s(bool,'F_0'))) | $spl231),
  inference(unit_resulting_resolution,[],[f531,f34138,f947])).
fof(f100105,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'(X0,bool),'const.pair.,_2'(s(X0,X1),s(bool,'T_0'))) != s('type.pair.prod'(X0,bool),'const.pair.,_2'(s(X0,X2),s(bool,g(s(bool,'F_0')))))) ) | $spl231),
  inference(unit_resulting_resolution,[],[f34138,f651])).
fof(f100106,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'(bool,X0),'const.pair.,_2'(s(bool,'T_0'),s(X0,X1))) != s('type.pair.prod'(bool,X0),'const.pair.,_2'(s(bool,g(s(bool,'F_0'))),s(X0,X2)))) ) | $spl231),
  inference(unit_resulting_resolution,[],[f34138,f650])).
fof(f100107,plain,(
  ( ! [X0,X1] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X0))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,g(s(bool,'F_0'))),s('type.list.list'(bool),X1)))) ) | $spl231),
  inference(unit_resulting_resolution,[],[f34138,f606])).
fof(f93020,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | $spl258),
  inference(cnf_transformation,[],[f93020_D])).
fof(f93020_D,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) <=> ~$spl258),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl258])])).
fof(f95337,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'(X0,'type.pair.prod'(X1,bool)),'const.pair.,_2'(s(X0,X2),s('type.pair.prod'(X1,bool),'const.pair.,_2'(s(X1,X3),s(bool,'T_0'))))) != s('type.pair.prod'(X0,'type.pair.prod'(X1,bool)),'const.pair.,_2'(s(X0,X4),s('type.pair.prod'(X1,bool),'const.pair.,_2'(s(X1,X5),s(bool,'F_0')))))) )),
  inference(unit_resulting_resolution,[],[f2607,f651])).
fof(f95338,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'('type.pair.prod'(X0,bool),X1),'const.pair.,_2'(s('type.pair.prod'(X0,bool),'const.pair.,_2'(s(X0,X2),s(bool,'T_0'))),s(X1,X3))) != s('type.pair.prod'('type.pair.prod'(X0,bool),X1),'const.pair.,_2'(s('type.pair.prod'(X0,bool),'const.pair.,_2'(s(X0,X4),s(bool,'F_0'))),s(X1,X5)))) )),
  inference(unit_resulting_resolution,[],[f2607,f650])).
fof(f95339,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'('type.pair.prod'(X0,bool)),'const.list.CONS_2'(s('type.pair.prod'(X0,bool),'const.pair.,_2'(s(X0,X1),s(bool,'T_0'))),s('type.list.list'('type.pair.prod'(X0,bool)),X2))) != s('type.list.list'('type.pair.prod'(X0,bool)),'const.list.CONS_2'(s('type.pair.prod'(X0,bool),'const.pair.,_2'(s(X0,X3),s(bool,'F_0'))),s('type.list.list'('type.pair.prod'(X0,bool)),X4)))) )),
  inference(unit_resulting_resolution,[],[f2607,f606])).
fof(f95221,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'(X0,'type.pair.prod'(bool,X1)),'const.pair.,_2'(s(X0,X2),s('type.pair.prod'(bool,X1),'const.pair.,_2'(s(bool,'F_0'),s(X1,X3))))) != s('type.pair.prod'(X0,'type.pair.prod'(bool,X1)),'const.pair.,_2'(s(X0,X4),s('type.pair.prod'(bool,X1),'const.pair.,_2'(s(bool,'T_0'),s(X1,X5)))))) )),
  inference(unit_resulting_resolution,[],[f2564,f651])).
fof(f95222,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'('type.pair.prod'(bool,X0),X1),'const.pair.,_2'(s('type.pair.prod'(bool,X0),'const.pair.,_2'(s(bool,'T_0'),s(X0,X2))),s(X1,X3))) != s('type.pair.prod'('type.pair.prod'(bool,X0),X1),'const.pair.,_2'(s('type.pair.prod'(bool,X0),'const.pair.,_2'(s(bool,'F_0'),s(X0,X4))),s(X1,X5)))) )),
  inference(unit_resulting_resolution,[],[f2564,f650])).
fof(f95223,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'('type.pair.prod'(bool,X0)),'const.list.CONS_2'(s('type.pair.prod'(bool,X0),'const.pair.,_2'(s(bool,'T_0'),s(X0,X1))),s('type.list.list'('type.pair.prod'(bool,X0)),X2))) != s('type.list.list'('type.pair.prod'(bool,X0)),'const.list.CONS_2'(s('type.pair.prod'(bool,X0),'const.pair.,_2'(s(bool,'F_0'),s(X0,X3))),s('type.list.list'('type.pair.prod'(bool,X0)),X4)))) )),
  inference(unit_resulting_resolution,[],[f2564,f606])).
fof(f95121,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X0),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X1))))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X2),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X3)))))) )),
  inference(unit_resulting_resolution,[],[f2525,f607])).
fof(f95122,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.pair.prod'(X0,'type.list.list'(bool)),'const.pair.,_2'(s(X0,X1),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X2))))) != s('type.pair.prod'(X0,'type.list.list'(bool)),'const.pair.,_2'(s(X0,X3),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X4)))))) )),
  inference(unit_resulting_resolution,[],[f2525,f651])).
fof(f95123,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.pair.prod'('type.list.list'(bool),X0),'const.pair.,_2'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X1))),s(X0,X2))) != s('type.pair.prod'('type.list.list'(bool),X0),'const.pair.,_2'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X3))),s(X0,X4)))) )),
  inference(unit_resulting_resolution,[],[f2525,f650])).
fof(f95124,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'('type.list.list'(bool)),'const.list.CONS_2'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X0))),s('type.list.list'('type.list.list'(bool)),X1))) != s('type.list.list'('type.list.list'(bool)),'const.list.CONS_2'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X2))),s('type.list.list'('type.list.list'(bool)),X3)))) )),
  inference(unit_resulting_resolution,[],[f2525,f606])).
fof(f91038,plain,(
  ( ! [X2,X0,X1] : (~sP44('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.bool.BOUNDED_1'(s(bool,X1)),'const.bool.BOUNDED_1'(s(bool,X2)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f82758,f927])).
fof(f90986,plain,(
  ( ! [X2,X0,X1] : (~sP44('const.bool.BOUNDED_1'(s(bool,X0)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.bool.BOUNDED_1'(s(bool,X2)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f82756,f928])).
fof(f88586,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'('type.list.list'('type.conSem.v')),'const.list.CONS_2'(s('type.list.list'('type.conSem.v'),X0),s('type.list.list'('type.list.list'('type.conSem.v')),'const.list.CONS_2'(s('type.list.list'('type.conSem.v'),sK54),s('type.list.list'('type.list.list'('type.conSem.v')),X1))))) != s('type.list.list'('type.list.list'('type.conSem.v')),'const.list.CONS_2'(s('type.list.list'('type.conSem.v'),X2),s('type.list.list'('type.list.list'('type.conSem.v')),'const.list.CONS_2'(s('type.list.list'('type.conSem.v'),'const.list.NIL_0'),s('type.list.list'('type.list.list'('type.conSem.v')),X3)))))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f80138,f607])).
fof(f88587,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.pair.prod'(X0,'type.list.list'('type.list.list'('type.conSem.v'))),'const.pair.,_2'(s(X0,X1),s('type.list.list'('type.list.list'('type.conSem.v')),'const.list.CONS_2'(s('type.list.list'('type.conSem.v'),sK54),s('type.list.list'('type.list.list'('type.conSem.v')),X2))))) != s('type.pair.prod'(X0,'type.list.list'('type.list.list'('type.conSem.v'))),'const.pair.,_2'(s(X0,X3),s('type.list.list'('type.list.list'('type.conSem.v')),'const.list.CONS_2'(s('type.list.list'('type.conSem.v'),'const.list.NIL_0'),s('type.list.list'('type.list.list'('type.conSem.v')),X4)))))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f80138,f651])).
fof(f88588,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.pair.prod'('type.list.list'('type.list.list'('type.conSem.v')),X0),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.conSem.v')),'const.list.CONS_2'(s('type.list.list'('type.conSem.v'),'const.list.NIL_0'),s('type.list.list'('type.list.list'('type.conSem.v')),X1))),s(X0,X2))) != s('type.pair.prod'('type.list.list'('type.list.list'('type.conSem.v')),X0),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.conSem.v')),'const.list.CONS_2'(s('type.list.list'('type.conSem.v'),sK54),s('type.list.list'('type.list.list'('type.conSem.v')),X3))),s(X0,X4)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f80138,f650])).
fof(f88589,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'('type.list.list'('type.list.list'('type.conSem.v'))),'const.list.CONS_2'(s('type.list.list'('type.list.list'('type.conSem.v')),'const.list.CONS_2'(s('type.list.list'('type.conSem.v'),'const.list.NIL_0'),s('type.list.list'('type.list.list'('type.conSem.v')),X0))),s('type.list.list'('type.list.list'('type.list.list'('type.conSem.v'))),X1))) != s('type.list.list'('type.list.list'('type.list.list'('type.conSem.v'))),'const.list.CONS_2'(s('type.list.list'('type.list.list'('type.conSem.v')),'const.list.CONS_2'(s('type.list.list'('type.conSem.v'),sK54),s('type.list.list'('type.list.list'('type.conSem.v')),X2))),s('type.list.list'('type.list.list'('type.list.list'('type.conSem.v'))),X3)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f80138,f606])).
fof(f88104,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'(X0,'type.pair.prod'(X1,'type.list.list'('type.conSem.v'))),'const.pair.,_2'(s(X0,X2),s('type.pair.prod'(X1,'type.list.list'('type.conSem.v')),'const.pair.,_2'(s(X1,X3),s('type.list.list'('type.conSem.v'),sK54))))) != s('type.pair.prod'(X0,'type.pair.prod'(X1,'type.list.list'('type.conSem.v'))),'const.pair.,_2'(s(X0,X4),s('type.pair.prod'(X1,'type.list.list'('type.conSem.v')),'const.pair.,_2'(s(X1,X5),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f80140,f651])).
fof(f88105,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'('type.pair.prod'(X0,'type.list.list'('type.conSem.v')),X1),'const.pair.,_2'(s('type.pair.prod'(X0,'type.list.list'('type.conSem.v')),'const.pair.,_2'(s(X0,X2),s('type.list.list'('type.conSem.v'),sK54))),s(X1,X3))) != s('type.pair.prod'('type.pair.prod'(X0,'type.list.list'('type.conSem.v')),X1),'const.pair.,_2'(s('type.pair.prod'(X0,'type.list.list'('type.conSem.v')),'const.pair.,_2'(s(X0,X4),s('type.list.list'('type.conSem.v'),'const.list.NIL_0'))),s(X1,X5)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f80140,f650])).
fof(f88106,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'('type.pair.prod'(X0,'type.list.list'('type.conSem.v'))),'const.list.CONS_2'(s('type.pair.prod'(X0,'type.list.list'('type.conSem.v')),'const.pair.,_2'(s(X0,X1),s('type.list.list'('type.conSem.v'),sK54))),s('type.list.list'('type.pair.prod'(X0,'type.list.list'('type.conSem.v'))),X2))) != s('type.list.list'('type.pair.prod'(X0,'type.list.list'('type.conSem.v'))),'const.list.CONS_2'(s('type.pair.prod'(X0,'type.list.list'('type.conSem.v')),'const.pair.,_2'(s(X0,X3),s('type.list.list'('type.conSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.pair.prod'(X0,'type.list.list'('type.conSem.v'))),X4)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f80140,f606])).
fof(f88031,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.conSem.v'),X1)),'const.pair.,_2'(s(X0,X2),s('type.pair.prod'('type.list.list'('type.conSem.v'),X1),'const.pair.,_2'(s('type.list.list'('type.conSem.v'),sK54),s(X1,X3))))) != s('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.conSem.v'),X1)),'const.pair.,_2'(s(X0,X4),s('type.pair.prod'('type.list.list'('type.conSem.v'),X1),'const.pair.,_2'(s('type.list.list'('type.conSem.v'),'const.list.NIL_0'),s(X1,X5)))))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f80139,f651])).
fof(f88032,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'('type.pair.prod'('type.list.list'('type.conSem.v'),X0),X1),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.conSem.v'),X0),'const.pair.,_2'(s('type.list.list'('type.conSem.v'),'const.list.NIL_0'),s(X0,X2))),s(X1,X3))) != s('type.pair.prod'('type.pair.prod'('type.list.list'('type.conSem.v'),X0),X1),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.conSem.v'),X0),'const.pair.,_2'(s('type.list.list'('type.conSem.v'),sK54),s(X0,X4))),s(X1,X5)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f80139,f650])).
fof(f88033,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.conSem.v'),X0)),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.conSem.v'),X0),'const.pair.,_2'(s('type.list.list'('type.conSem.v'),'const.list.NIL_0'),s(X0,X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.conSem.v'),X0)),X2))) != s('type.list.list'('type.pair.prod'('type.list.list'('type.conSem.v'),X0)),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.conSem.v'),X0),'const.pair.,_2'(s('type.list.list'('type.conSem.v'),sK54),s(X0,X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.conSem.v'),X0)),X4)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f80139,f606])).
fof(f87971,plain,(
  ( ! [X14,X12,X10,X13,X11,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s('type.list.list'('type.modSem.v'),X10))),s('type.list.list'('type.conSem.v'),sK54)))) | sP30(X12,sK247(X13,X11,X12,'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X10,X9),X13,sK249(X13,X11,X12,'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X10,X9),sK248(X13,X11,X12,'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X10,X9)) | sP29(X11,sK244(X13,X11,X12,'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X10,X9),X12,sK246(X13,X11,X12,'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X10,X9),sK245(X13,X11,X12,'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X10,X9)) | sP31(X12,X11,X13) | s(bool,X14) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9),s('type.list.list'('type.modSem.v'),X10),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X14)) ) | $spl4),
  inference(subsumption_resolution,[],[f87967,f531])).
fof(f87967,plain,(
  ( ! [X14,X12,X10,X13,X11,X9] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s('type.list.list'('type.modSem.v'),X10))),s('type.list.list'('type.conSem.v'),sK54)))) | sP30(X12,sK247(X13,X11,X12,'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X10,X9),X13,sK249(X13,X11,X12,'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X10,X9),sK248(X13,X11,X12,'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X10,X9)) | sP29(X11,sK244(X13,X11,X12,'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X10,X9),X12,sK246(X13,X11,X12,'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X10,X9),sK245(X13,X11,X12,'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X10,X9)) | sP31(X12,X11,X13) | s(bool,X14) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9),s('type.list.list'('type.modSem.v'),X10),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X14)) ) | $spl4),
  inference(superposition,[],[f80251,f1319])).
fof(f87920,plain,(
  ( ! [X4,X2,X3] : (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.list.list'('type.modSem.v'),X2),s('type.list.list'('type.conSem.v'),sK54)))) | s(bool,X4) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),sK251('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X2,X3)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.list.list'('type.modSem.v'),X2))),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X4)) ) | $spl4),
  inference(subsumption_resolution,[],[f87916,f531])).
fof(f87916,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.list.list'('type.modSem.v'),X2),s('type.list.list'('type.conSem.v'),sK54)))) | s(bool,X4) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),sK251('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X2,X3)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.list.list'('type.modSem.v'),X2))),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X4)) ) | $spl4),
  inference(superposition,[],[f80252,f1319])).
fof(f86553,plain,(
  ( ! [X592,X588,X590,X589,X591] : (s('type.pair.prod'(X589,bool),'const.pair.,_2'(s(X589,X592),s(bool,'F_0'))) != s('type.pair.prod'(X589,bool),'const.pair.,_2'(s(X589,X590),s(bool,X591))) | s(bool,X591) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X588),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(superposition,[],[f651,f82673])).
fof(f86550,plain,(
  ( ! [X573,X575,X576,X574,X577] : (s('type.pair.prod'(bool,X574),'const.pair.,_2'(s(bool,'F_0'),s(X574,X577))) != s('type.pair.prod'(bool,X574),'const.pair.,_2'(s(bool,X575),s(X574,X576))) | s(bool,X575) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X573),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(superposition,[],[f650,f82673])).
fof(f86545,plain,(
  ( ! [X553,X555,X552,X554] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X553))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X554),s('type.list.list'(bool),X555))) | s(bool,X554) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X552),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(superposition,[],[f606,f82673])).
fof(f86543,plain,(
  ( ! [X549,X548] : (~p(s(bool,happ(s(fun(bool,bool),X549),s(bool,'F_0')))) | p(s(bool,happ(s(fun(bool,bool),X549),s(bool,sK65('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X548),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X549,bool)))))) ) | $spl4),
  inference(superposition,[],[f604,f82673])).
fof(f86796,plain,(
  ( ! [X546,X547] : (s(bool,'F_0') = s(bool,sK65('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X546),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X547,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X547),s(bool,'F_0'))))) ) | $spl4),
  inference(forward_demodulation,[],[f86542,f82673])).
fof(f86542,plain,(
  ( ! [X546,X547] : (~p(s(bool,happ(s(fun(bool,bool),X547),s(bool,'F_0')))) | s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X546),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))) = s(bool,sK65('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X546),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X547,bool))) ) | $spl4),
  inference(superposition,[],[f603,f82673])).
fof(f86794,plain,(
  ( ! [X422,X421,X423] : (sP1('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X421),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X422) | s(bool,X422) = s(bool,X423) | s(bool,'T_0') = s(bool,X423)) ) | $spl4),
  inference(subsumption_resolution,[],[f86478,f1048])).
fof(f86478,plain,(
  ( ! [X422,X421,X423] : (p(s(bool,'F_0')) | sP1('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X421),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X422) | s(bool,X422) = s(bool,X423) | s(bool,'T_0') = s(bool,X423)) ) | $spl4),
  inference(superposition,[],[f9572,f82673])).
fof(f86793,plain,(
  ( ! [X420,X418,X419] : (sP1(X419,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X418),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,X419) = s(bool,X420) | s(bool,'T_0') = s(bool,X420)) ) | $spl4),
  inference(subsumption_resolution,[],[f86477,f1048])).
fof(f86477,plain,(
  ( ! [X420,X418,X419] : (p(s(bool,'F_0')) | sP1(X419,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X418),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,X419) = s(bool,X420) | s(bool,'T_0') = s(bool,X420)) ) | $spl4),
  inference(superposition,[],[f9571,f82673])).
fof(f85917,plain,(
  ( ! [X0,X1] : (~sP42('const.bool.BOUNDED_1'(s(bool,X0)),'T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f531,f1060,f82449,f82498,f930])).
fof(f85007,plain,(
  ( ! [X2,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X1),s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X1,'type.list.list'('type.conSem.v')))))) | s(bool,X2) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X1),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X2)) ) | $spl4),
  inference(subsumption_resolution,[],[f85003,f531])).
fof(f85003,plain,(
  ( ! [X2,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X1),s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X1,'type.list.list'('type.conSem.v')))))) | s(bool,X2) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X1),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X2)) ) | $spl4),
  inference(superposition,[],[f80156,f1319])).
fof(f84403,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X0),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X1),s('type.list.list'('type.conSem.v'),sK54))))) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X2),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X3),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f80141,f607])).
fof(f84404,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.pair.prod'(X0,'type.list.list'('type.conSem.v')),'const.pair.,_2'(s(X0,X1),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X2),s('type.list.list'('type.conSem.v'),sK54))))) != s('type.pair.prod'(X0,'type.list.list'('type.conSem.v')),'const.pair.,_2'(s(X0,X3),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X4),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f80141,f651])).
fof(f84405,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.pair.prod'('type.list.list'('type.conSem.v'),X0),'const.pair.,_2'(s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X1),s('type.list.list'('type.conSem.v'),sK54))),s(X0,X2))) != s('type.pair.prod'('type.list.list'('type.conSem.v'),X0),'const.pair.,_2'(s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X3),s('type.list.list'('type.conSem.v'),'const.list.NIL_0'))),s(X0,X4)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f80141,f650])).
fof(f84406,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'('type.list.list'('type.conSem.v')),'const.list.CONS_2'(s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X0),s('type.list.list'('type.conSem.v'),sK54))),s('type.list.list'('type.list.list'('type.conSem.v')),X1))) != s('type.list.list'('type.list.list'('type.conSem.v')),'const.list.CONS_2'(s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X2),s('type.list.list'('type.conSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.conSem.v')),X3)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f80141,f606])).
fof(f83265,plain,(
  ( ! [X0] : (~sP44('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0','F_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f82479,f926])).
fof(f83248,plain,(
  ( ! [X0] : (~sP44('F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f82467,f926])).
fof(f83243,plain,(
  ( ! [X0] : (~sP44('F_0','F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f82455,f926])).
fof(f83223,plain,(
  ( ! [X0] : (sP44('F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'T_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f531,f1060,f1054,f82454,f930])).
fof(f83225,plain,(
  ( ! [X0,X1] : (sP44('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'T_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f531,f1060,f82449,f82454,f930])).
fof(f83199,plain,(
  ( ! [X0] : (sP44('F_0','T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f1059,f1054,f82453,f932])).
fof(f83159,plain,(
  ( ! [X0] : (sP44('T_0','F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f1058,f1057,f82448,f931])).
fof(f82985,plain,(
  ( ! [X2,X1] : (s(bool,X2) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X2)) ) | $spl4),
  inference(subsumption_resolution,[],[f82832,f531])).
fof(f82832,plain,(
  ( ! [X2,X1] : (~p(s(bool,'T_0')) | s(bool,X2) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X2)) ) | $spl4),
  inference(superposition,[],[f80739,f1319])).
fof(f82360,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),sK251(sK54,'const.list.NIL_0',X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),sK54))))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f80739,f843])).
fof(f82361,plain,(
  ( ! [X0] : (~sP31(sK250(sK54,'const.list.NIL_0',X0),sK251(sK54,'const.list.NIL_0',X0),sK252(sK54,'const.list.NIL_0',X0))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f80739,f840])).
fof(f82363,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f80739,f547])).
fof(f82369,plain,(
  ( ! [X0] : (~sP1('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f80739,f638])).
fof(f82371,plain,(
  ( ! [X0] : (~sP1('F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f80739,f638])).
fof(f82372,plain,(
  ( ! [X0,X1] : (~sP1('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f80739,f80739,f638])).
fof(f82375,plain,(
  ( ! [X0,X1] : (~sP40(X0,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f80739,f916])).
fof(f82392,plain,(
  ( ! [X0,X1] : (~sP40(X0,'F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f80739,f916])).
fof(f82393,plain,(
  ( ! [X2,X0,X1] : (~sP40(X0,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f80739,f80739,f916])).
fof(f82406,plain,(
  ( ! [X0,X1] : (~sP40('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0',X1)) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f80739,f917])).
fof(f82411,plain,(
  ( ! [X0,X1] : (~sP40('F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X1)) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f80739,f917])).
fof(f82412,plain,(
  ( ! [X2,X0,X1] : (~sP40('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X2)) ) | $spl4),
  inference(unit_resulting_resolution,[],[f80739,f80739,f917])).
fof(f82428,plain,(
  ( ! [X0] : (~sP44('T_0','T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f531,f531,f80739,f929])).
fof(f82433,plain,(
  ( ! [X0] : (sP44('T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1058,f1053,f1056,f80739,f931])).
fof(f82448,plain,(
  ( ! [X2,X0,X1] : (sP43(X0,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X2)) ) | $spl4),
  inference(unit_resulting_resolution,[],[f80739,f935])).
fof(f82449,plain,(
  ( ! [X2,X0,X1] : (sP43('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X1,X2)) ) | $spl4),
  inference(unit_resulting_resolution,[],[f80739,f936])).
fof(f82453,plain,(
  ( ! [X2,X0,X1] : (sP42(X0,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X2)) ) | $spl4),
  inference(unit_resulting_resolution,[],[f80739,f939])).
fof(f82454,plain,(
  ( ! [X2,X0,X1] : (sP42('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X1,X2)) ) | $spl4),
  inference(unit_resulting_resolution,[],[f80739,f940])).
fof(f82455,plain,(
  ( ! [X0] : (~sP41('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0','F_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f1048,f80739,f941])).
fof(f82467,plain,(
  ( ! [X0] : (~sP41('F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f1048,f80739,f941])).
fof(f82468,plain,(
  ( ! [X0,X1] : (~sP41('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f80739,f1048,f80739,f941])).
fof(f82479,plain,(
  ( ! [X0] : (~sP41('F_0','F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f1048,f80739,f941])).
fof(f82480,plain,(
  ( ! [X0,X1] : (~sP41('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f80739,f1048,f80739,f941])).
fof(f82481,plain,(
  ( ! [X0,X1] : (~sP41('F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f80739,f80739,f941])).
fof(f82482,plain,(
  ( ! [X2,X0,X1] : (~sP41('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f80739,f80739,f80739,f941])).
fof(f82491,plain,(
  ( ! [X0] : (sP44('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0','T_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1102,f80739,f945])).
fof(f82492,plain,(
  ( ! [X0] : (sP44('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'T_0','F_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1102,f80739,f945])).
fof(f82498,plain,(
  ( ! [X0,X1] : (~sP44('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.bool.BOUNDED_1'(s(bool,X1)),'T_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f538,f80739,f948])).
fof(f82504,plain,(
  ( ! [X0,X1] : (~sP44('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'T_0','const.bool.BOUNDED_1'(s(bool,X1)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f538,f80739,f948])).
fof(f82505,plain,(
  ( ! [X0,X1] : (~sP46('T_0',X0,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f531,f80739,f950])).
fof(f82507,plain,(
  ( ! [X0,X1] : (~sP46('T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X1)) ) | $spl4),
  inference(unit_resulting_resolution,[],[f531,f80739,f951])).
fof(f82512,plain,(
  ( ! [X2,X0,X1] : (sP45(X0,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X2)) ) | $spl4),
  inference(unit_resulting_resolution,[],[f80739,f958])).
fof(f82513,plain,(
  ( ! [X2,X0,X1] : (sP45('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X1,X2)) ) | $spl4),
  inference(unit_resulting_resolution,[],[f80739,f959])).
fof(f82514,plain,(
  ( ! [X0,X1] : (sP46('F_0',X0,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f80739,f960])).
fof(f82520,plain,(
  ( ! [X2,X0,X1] : (sP46('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X1,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f80739,f80739,f960])).
fof(f82521,plain,(
  ( ! [X0,X1] : (sP46('F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X1)) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f80739,f961])).
fof(f82527,plain,(
  ( ! [X2,X0,X1] : (sP46('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X2)) ) | $spl4),
  inference(unit_resulting_resolution,[],[f80739,f80739,f961])).
fof(f82529,plain,(
  ( ! [X0,X1] : (~sP48('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X1,'T_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f531,f80739,f966])).
fof(f82530,plain,(
  ( ! [X0,X1] : (~sP48('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'T_0',X1)) ) | $spl4),
  inference(unit_resulting_resolution,[],[f531,f80739,f967])).
fof(f82577,plain,(
  ( ! [X2,X0,X1] : (sP47('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X1,X2)) ) | $spl4),
  inference(unit_resulting_resolution,[],[f80739,f976])).
fof(f82578,plain,(
  ( ! [X0] : (sP48('F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f1048,f80739,f977])).
fof(f82585,plain,(
  ( ! [X0] : (sP48('F_0','F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f1048,f80739,f977])).
fof(f82587,plain,(
  ( ! [X0,X1] : (sP48('F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f80739,f80739,f977])).
fof(f82592,plain,(
  ( ! [X0] : (sP48('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0','F_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f1048,f80739,f977])).
fof(f82593,plain,(
  ( ! [X0,X1] : (sP48('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f80739,f1048,f80739,f977])).
fof(f82594,plain,(
  ( ! [X0,X1] : (sP48('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f80739,f80739,f977])).
fof(f82595,plain,(
  ( ! [X2,X0,X1] : (sP48('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f80739,f80739,f80739,f977])).
fof(f82608,plain,(
  ( ! [X0,X1] : (~sP50('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X1,'F_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f80739,f983])).
fof(f82610,plain,(
  ( ! [X0,X1] : (~sP50('F_0',X0,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f80739,f983])).
fof(f82611,plain,(
  ( ! [X2,X0,X1] : (~sP50('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X1,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f80739,f80739,f983])).
fof(f82626,plain,(
  ( ! [X0,X1] : (~sP50('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'T_0',X1)) ) | $spl4),
  inference(unit_resulting_resolution,[],[f531,f80739,f984])).
fof(f82636,plain,(
  ( ! [X2,X0,X1] : (sP49(X0,X1,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f80739,f991])).
fof(f82637,plain,(
  ( ! [X2,X0,X1] : (sP49('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X1,X2)) ) | $spl4),
  inference(unit_resulting_resolution,[],[f80739,f993])).
fof(f82638,plain,(
  ( ! [X0] : (sP50('F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'T_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f531,f80739,f994])).
fof(f82641,plain,(
  ( ! [X0] : (sP50('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0','T_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f531,f80739,f994])).
fof(f82642,plain,(
  ( ! [X0,X1] : (sP50('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'T_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f80739,f531,f80739,f994])).
fof(f82648,plain,(
  ( ! [X0,X1] : (sP46('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X1,'F_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1062,f80739,f1030])).
fof(f82649,plain,(
  ( ! [X0,X1] : (sP46('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0',X1)) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1063,f80739,f1030])).
fof(f82650,plain,(
  ( ! [X0] : (~sP0('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f80739,f1049])).
fof(f82660,plain,(
  ( ! [X0] : (~sP0('F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f80739,f1049])).
fof(f82661,plain,(
  ( ! [X0,X1] : (~sP0('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f80739,f80739,f1049])).
fof(f82670,plain,(
  ( ! [X0,X1] : (sP1('const.bool.BOUNDED_1'(s(bool,X0)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f80739,f1129])).
fof(f82671,plain,(
  ( ! [X0,X1] : (sP1('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.bool.BOUNDED_1'(s(bool,X1)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f80739,f1136])).
fof(f82672,plain,(
  ( ! [X2,X0,X1] : (sP50('const.bool.BOUNDED_1'(s(bool,X0)),X1,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f80739,f1242])).
fof(f82681,plain,(
  ( ! [X0,X1] : (~sP47('const.bool.BOUNDED_1'(s(bool,X0)),'F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f80739,f1894])).
fof(f82691,plain,(
  ( ! [X0,X1] : (~sP47('const.bool.BOUNDED_1'(s(bool,X0)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f80739,f1894])).
fof(f82692,plain,(
  ( ! [X2,X0,X1] : (~sP47('const.bool.BOUNDED_1'(s(bool,X0)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f80739,f80739,f1894])).
fof(f82701,plain,(
  ( ! [X0,X1] : (~sP48('const.bool.BOUNDED_1'(s(bool,X0)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f80739,f1929])).
fof(f82709,plain,(
  ( ! [X0,X1] : (~sP48('const.bool.BOUNDED_1'(s(bool,X0)),'F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f80739,f1929])).
fof(f82710,plain,(
  ( ! [X2,X0,X1] : (~sP48('const.bool.BOUNDED_1'(s(bool,X0)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f80739,f80739,f1929])).
fof(f82756,plain,(
  ( ! [X2,X0,X1] : (~sP43('const.bool.BOUNDED_1'(s(bool,X0)),'const.bool.BOUNDED_1'(s(bool,X1)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f80739,f4280])).
fof(f82758,plain,(
  ( ! [X2,X0,X1] : (~sP42('const.bool.BOUNDED_1'(s(bool,X0)),'const.bool.BOUNDED_1'(s(bool,X1)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f80739,f4433])).
fof(f82760,plain,(
  ( ! [X2,X0,X1] : (~sP45('const.bool.BOUNDED_1'(s(bool,X0)),'const.bool.BOUNDED_1'(s(bool,X1)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f80739,f4574])).
fof(f82762,plain,(
  ( ! [X2,X0,X1] : (~sP46('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.bool.BOUNDED_1'(s(bool,X1)),'const.bool.BOUNDED_1'(s(bool,X2)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f80739,f4733])).
fof(f82764,plain,(
  ( ! [X2,X0,X1] : (~sP49('const.bool.BOUNDED_1'(s(bool,X0)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.bool.BOUNDED_1'(s(bool,X2)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f80739,f4845])).
fof(f82766,plain,(
  ( ! [X2,X0,X1] : (~sP50('const.bool.BOUNDED_1'(s(bool,X0)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.bool.BOUNDED_1'(s(bool,X2)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f80739,f5003])).
fof(f82814,plain,(
  ( ! [X0] : (sP1('T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1102,f1102,f80739,f9571])).
fof(f82815,plain,(
  ( ! [X0] : (sP1('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'T_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1102,f1102,f80739,f9572])).
fof(f82816,plain,(
  ( ! [X0,X1] : (sP50('T_0',X0,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1102,f1102,f80739,f9584])).
fof(f80281,plain,(
  ( ! [X2,X0,X1] : (~sP20(X0,X1,X2,sK54,'const.list.NIL_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f605,f80133,f729])).
fof(f80283,plain,(
  ( ! [X2,X0,X1] : (~sP29(X0,X1,X2,sK54,'const.list.NIL_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f605,f80133,f804])).
fof(f80284,plain,(
  ( ! [X2,X0,X1] : (~sP37(X0,X1,X2,sK54,'const.list.NIL_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f605,f80133,f870])).
fof(f80156,plain,(
  ( ! [X182] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X182),s('type.list.list'('type.conSem.v'),sK54)))) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X182),s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X182,'type.list.list'('type.conSem.v'))))))) ) | $spl4),
  inference(superposition,[],[f604,f1043])).
fof(f80268,plain,(
  ( ! [X181] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X181),s('type.list.list'('type.conSem.v'),sK54)))) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X181,'type.list.list'('type.conSem.v')))) ) | $spl4),
  inference(forward_demodulation,[],[f80155,f1043])).
fof(f80155,plain,(
  ( ! [X181] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X181),s('type.list.list'('type.conSem.v'),sK54)))) | s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56))) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X181,'type.list.list'('type.conSem.v')))) ) | $spl4),
  inference(superposition,[],[f603,f1043])).
fof(f80145,plain,(
  ( ! [X152,X151,X153] : (s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X151),s('type.list.list'('type.conSem.v'),sK54))) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X152),s('type.list.list'('type.conSem.v'),X153))) | s('type.list.list'('type.conSem.v'),X153) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)))) ) | $spl4),
  inference(superposition,[],[f607,f1043])).
fof(f80141,plain,(
  ( ! [X142,X143] : (s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X142),s('type.list.list'('type.conSem.v'),'const.list.NIL_0'))) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X143),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(superposition,[],[f2845,f1043])).
fof(f80140,plain,(
  ( ! [X140,X141,X139] : (s('type.pair.prod'(X139,'type.list.list'('type.conSem.v')),'const.pair.,_2'(s(X139,X140),s('type.list.list'('type.conSem.v'),'const.list.NIL_0'))) != s('type.pair.prod'(X139,'type.list.list'('type.conSem.v')),'const.pair.,_2'(s(X139,X141),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(superposition,[],[f2608,f1043])).
fof(f80139,plain,(
  ( ! [X138,X136,X137] : (s('type.pair.prod'('type.list.list'('type.conSem.v'),X136),'const.pair.,_2'(s('type.list.list'('type.conSem.v'),'const.list.NIL_0'),s(X136,X137))) != s('type.pair.prod'('type.list.list'('type.conSem.v'),X136),'const.pair.,_2'(s('type.list.list'('type.conSem.v'),sK54),s(X136,X138)))) ) | $spl4),
  inference(superposition,[],[f2565,f1043])).
fof(f80138,plain,(
  ( ! [X134,X135] : (s('type.list.list'('type.list.list'('type.conSem.v')),'const.list.CONS_2'(s('type.list.list'('type.conSem.v'),'const.list.NIL_0'),s('type.list.list'('type.list.list'('type.conSem.v')),X134))) != s('type.list.list'('type.list.list'('type.conSem.v')),'const.list.CONS_2'(s('type.list.list'('type.conSem.v'),sK54),s('type.list.list'('type.list.list'('type.conSem.v')),X135)))) ) | $spl4),
  inference(superposition,[],[f2526,f1043])).
fof(f80136,plain,(
  ( ! [X130,X131] : (s('type.list.list'('type.conSem.v'),sK54) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X130),s('type.list.list'('type.conSem.v'),X131))) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),X131)) ) | $spl4),
  inference(superposition,[],[f607,f1043])).
fof(f80134,plain,(
  ( ! [X127,X126] : (s('type.list.list'('type.conSem.v'),sK54) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X126),s('type.list.list'('type.conSem.v'),X127))) | s('type.conSem.v',sK55) = s('type.conSem.v',X126)) ) | $spl4),
  inference(superposition,[],[f606,f1043])).
fof(f80132,plain,(
  ( ! [X125,X123,X121,X124,X122,X120,X119] : (s('type.list.list'('type.conSem.v'),sK54) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X119),s('type.list.list'('type.conSem.v'),X120))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X121),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X122))),s('type.modSem.v',X123))),s('type.conSem.v',X119)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X124),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X122))),s('type.list.list'('type.modSem.v'),X125))),s('type.list.list'('type.conSem.v'),X120)))) | sP37(X124,X122,X121,'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),'const.list.CONS_2'(s('type.modSem.v',X123),s('type.list.list'('type.modSem.v'),X125)))) ) | $spl4),
  inference(superposition,[],[f27339,f1043])).
fof(f80130,plain,(
  ( ! [X111,X109,X107,X105,X110,X108,X106] : (s('type.list.list'('type.conSem.v'),sK54) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X105),s('type.list.list'('type.conSem.v'),X106))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X107),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X108))),s('type.modSem.v',X109))),s('type.conSem.v',X105)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X110),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X108))),s('type.list.list'('type.modSem.v'),X111))),s('type.list.list'('type.conSem.v'),X106)))) | sP29(X110,X108,X107,'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),'const.list.CONS_2'(s('type.modSem.v',X109),s('type.list.list'('type.modSem.v'),X111)))) ) | $spl4),
  inference(superposition,[],[f27326,f1043])).
fof(f80128,plain,(
  ( ! [X94,X92,X97,X95,X93,X91,X96] : (s('type.list.list'('type.conSem.v'),sK54) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X91),s('type.list.list'('type.conSem.v'),X92))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X93),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X94))),s('type.modSem.v',X95))),s('type.conSem.v',X91)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X96),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X94))),s('type.list.list'('type.modSem.v'),X97))),s('type.list.list'('type.conSem.v'),X92)))) | sP20(X96,X94,X93,'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),'const.list.CONS_2'(s('type.modSem.v',X95),s('type.list.list'('type.modSem.v'),X97)))) ) | $spl4),
  inference(superposition,[],[f27301,f1043])).
fof(f80119,plain,(
  ( ! [X54,X52,X50,X53,X51] : (s('type.list.list'('type.conSem.v'),sK54) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X50),s('type.list.list'('type.conSem.v'),X51))) | ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X52),s('type.modSem.v',X53),s('type.conSem.v',X50)))) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X52),s('type.list.list'('type.modSem.v'),X54),s('type.list.list'('type.conSem.v'),X51)))) | sP23(X52,'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),'const.list.CONS_2'(s('type.modSem.v',X53),s('type.list.list'('type.modSem.v'),X54)))) ) | $spl4),
  inference(superposition,[],[f6932,f1043])).
fof(f80252,plain,(
  ( ! [X30,X29] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),sK251('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X29,X30)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X30))),s('type.list.list'('type.modSem.v'),X29))),s('type.list.list'('type.conSem.v'),sK54)))) | p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X30),s('type.list.list'('type.modSem.v'),X29),s('type.list.list'('type.conSem.v'),sK54))))) ) | $spl4),
  inference(forward_demodulation,[],[f80112,f1043])).
fof(f80112,plain,(
  ( ! [X30,X29] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),sK251('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X29,X30)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X30))),s('type.list.list'('type.modSem.v'),X29))),s('type.list.list'('type.conSem.v'),sK54)))) | p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X30),s('type.list.list'('type.modSem.v'),X29),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56))))))) ) | $spl4),
  inference(superposition,[],[f843,f1043])).
fof(f80251,plain,(
  ( ! [X28,X26,X24,X27,X25] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X24),s('type.list.list'('type.modSem.v'),X25),s('type.list.list'('type.conSem.v'),sK54)))) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X28),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X24))),s('type.list.list'('type.modSem.v'),X25))),s('type.list.list'('type.conSem.v'),sK54)))) | sP30(X26,sK247(X27,X28,X26,'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X25,X24),X27,sK249(X27,X28,X26,'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X25,X24),sK248(X27,X28,X26,'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X25,X24)) | sP29(X28,sK244(X27,X28,X26,'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X25,X24),X26,sK246(X27,X28,X26,'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X25,X24),sK245(X27,X28,X26,'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X25,X24)) | sP31(X26,X28,X27)) ) | $spl4),
  inference(forward_demodulation,[],[f80111,f1043])).
fof(f80111,plain,(
  ( ! [X28,X26,X24,X27,X25] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X24),s('type.list.list'('type.modSem.v'),X25),s('type.list.list'('type.conSem.v'),sK54)))) | sP30(X26,sK247(X27,X28,X26,'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X25,X24),X27,sK249(X27,X28,X26,'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X25,X24),sK248(X27,X28,X26,'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X25,X24)) | sP29(X28,sK244(X27,X28,X26,'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X25,X24),X26,sK246(X27,X28,X26,'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X25,X24),sK245(X27,X28,X26,'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X25,X24)) | sP31(X26,X28,X27) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X28),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X24))),s('type.list.list'('type.modSem.v'),X25))),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56))))))) ) | $spl4),
  inference(superposition,[],[f836,f1043])).
fof(f80109,plain,(
  ( ! [X21,X19,X17,X20,X18,X16] : (s('type.list.list'('type.conSem.v'),sK54) != s('type.list.list'('type.conSem.v'),X16) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X17),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X18))),s('type.modSem.v',X19))),s('type.conSem.v',sK55)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X20),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X18))),s('type.list.list'('type.modSem.v'),X21))),s('type.list.list'('type.conSem.v'),sK56)))) | sP37(X20,X18,X17,X16,'const.list.CONS_2'(s('type.modSem.v',X19),s('type.list.list'('type.modSem.v'),X21)))) ) | $spl4),
  inference(superposition,[],[f27339,f1043])).
fof(f80108,plain,(
  ( ! [X14,X12,X10,X15,X13,X11] : (s('type.list.list'('type.conSem.v'),sK54) != s('type.list.list'('type.conSem.v'),X10) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X12))),s('type.modSem.v',X13))),s('type.conSem.v',sK55)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X14),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X12))),s('type.list.list'('type.modSem.v'),X15))),s('type.list.list'('type.conSem.v'),sK56)))) | sP29(X14,X12,X11,X10,'const.list.CONS_2'(s('type.modSem.v',X13),s('type.list.list'('type.modSem.v'),X15)))) ) | $spl4),
  inference(superposition,[],[f27326,f1043])).
fof(f80107,plain,(
  ( ! [X6,X4,X8,X7,X5,X9] : (s('type.list.list'('type.conSem.v'),sK54) != s('type.list.list'('type.conSem.v'),X4) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X7))),s('type.conSem.v',sK55)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X8),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.modSem.v'),X9))),s('type.list.list'('type.conSem.v'),sK56)))) | sP20(X8,X6,X5,X4,'const.list.CONS_2'(s('type.modSem.v',X7),s('type.list.list'('type.modSem.v'),X9)))) ) | $spl4),
  inference(superposition,[],[f27301,f1043])).
fof(f80106,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'('type.conSem.v'),sK54) != s('type.list.list'('type.conSem.v'),X0) | ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.modSem.v',X2),s('type.conSem.v',sK55)))) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),X3),s('type.list.list'('type.conSem.v'),sK56)))) | sP23(X1,X0,'const.list.CONS_2'(s('type.modSem.v',X2),s('type.list.list'('type.modSem.v'),X3)))) ) | $spl4),
  inference(superposition,[],[f6932,f1043])).
fof(f48558,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f47858,f945])).
fof(f51138,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f2935,f46031])).
fof(f51145,plain,(
  ( ! [X4,X2,X3] : (sP23(X2,'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X3) | s(bool,X4) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.modSem.v'),X3),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X4)) ) | $spl4),
  inference(subsumption_resolution,[],[f51140,f531])).
fof(f51140,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'T_0')) | sP23(X2,'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X3) | s(bool,X4) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.modSem.v'),X3),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X4)) ) | $spl4),
  inference(superposition,[],[f46031,f1319])).
fof(f48651,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X0),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X1),s('type.list.list'('type.conSem.v'),sK54))))) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X2),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X3),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f46063,f607])).
fof(f48652,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.pair.prod'(X0,'type.list.list'('type.conSem.v')),'const.pair.,_2'(s(X0,X1),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X2),s('type.list.list'('type.conSem.v'),sK54))))) != s('type.pair.prod'(X0,'type.list.list'('type.conSem.v')),'const.pair.,_2'(s(X0,X3),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X4),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f46063,f651])).
fof(f48653,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.pair.prod'('type.list.list'('type.conSem.v'),X0),'const.pair.,_2'(s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X1),s('type.list.list'('type.conSem.v'),sK54))),s(X0,X2))) != s('type.pair.prod'('type.list.list'('type.conSem.v'),X0),'const.pair.,_2'(s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X3),s('type.list.list'('type.conSem.v'),'const.list.NIL_0'))),s(X0,X4)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f46063,f650])).
fof(f48654,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'('type.list.list'('type.conSem.v')),'const.list.CONS_2'(s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X0),s('type.list.list'('type.conSem.v'),sK54))),s('type.list.list'('type.list.list'('type.conSem.v')),X1))) != s('type.list.list'('type.list.list'('type.conSem.v')),'const.list.CONS_2'(s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X2),s('type.list.list'('type.conSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.conSem.v')),X3)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f46063,f606])).
fof(f47868,plain,(
  ( ! [X0] : (~sP44('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0','F_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f47008,f926])).
fof(f47858,plain,(
  ( ! [X0] : (~sP44('F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f46998,f926])).
fof(f47853,plain,(
  ( ! [X0] : (~sP44('F_0','F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f46988,f926])).
fof(f47822,plain,(
  ( ! [X0] : (sP44('F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'T_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f531,f1060,f1054,f46987,f930])).
fof(f47823,plain,(
  ( ! [X0,X1] : (sP44('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'T_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f531,f1060,f46982,f46987,f930])).
fof(f47801,plain,(
  ( ! [X0] : (sP44('F_0','T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f1059,f1054,f46986,f932])).
fof(f47747,plain,(
  ( ! [X0] : (sP44('T_0','F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f1058,f1057,f46981,f931])).
fof(f47571,plain,(
  ( ! [X2,X1] : (s(bool,X2) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X2)) ) | $spl4),
  inference(subsumption_resolution,[],[f47402,f531])).
fof(f47402,plain,(
  ( ! [X2,X1] : (~p(s(bool,'T_0')) | s(bool,X2) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X2)) ) | $spl4),
  inference(superposition,[],[f46894,f1319])).
fof(f46902,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),sK251(sK54,'const.list.NIL_0',X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),sK54))))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f46894,f843])).
fof(f46903,plain,(
  ( ! [X0] : (~sP31(sK250(sK54,'const.list.NIL_0',X0),sK251(sK54,'const.list.NIL_0',X0),sK252(sK54,'const.list.NIL_0',X0))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f46894,f840])).
fof(f46905,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f46894,f547])).
fof(f46911,plain,(
  ( ! [X0] : (~sP1('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f46894,f638])).
fof(f46913,plain,(
  ( ! [X0] : (~sP1('F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f46894,f638])).
fof(f46914,plain,(
  ( ! [X0,X1] : (~sP1('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f46894,f46894,f638])).
fof(f46917,plain,(
  ( ! [X0,X1] : (~sP40(X0,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f46894,f916])).
fof(f46932,plain,(
  ( ! [X0,X1] : (~sP40(X0,'F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f46894,f916])).
fof(f46933,plain,(
  ( ! [X2,X0,X1] : (~sP40(X0,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f46894,f46894,f916])).
fof(f46945,plain,(
  ( ! [X0,X1] : (~sP40('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0',X1)) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f46894,f917])).
fof(f46950,plain,(
  ( ! [X0,X1] : (~sP40('F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X1)) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f46894,f917])).
fof(f46951,plain,(
  ( ! [X2,X0,X1] : (~sP40('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X2)) ) | $spl4),
  inference(unit_resulting_resolution,[],[f46894,f46894,f917])).
fof(f46965,plain,(
  ( ! [X0] : (~sP44('T_0','T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f531,f531,f46894,f929])).
fof(f46969,plain,(
  ( ! [X0] : (sP44('T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1058,f1053,f1056,f46894,f931])).
fof(f46981,plain,(
  ( ! [X2,X0,X1] : (sP43(X0,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X2)) ) | $spl4),
  inference(unit_resulting_resolution,[],[f46894,f935])).
fof(f46982,plain,(
  ( ! [X2,X0,X1] : (sP43('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X1,X2)) ) | $spl4),
  inference(unit_resulting_resolution,[],[f46894,f936])).
fof(f46986,plain,(
  ( ! [X2,X0,X1] : (sP42(X0,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X2)) ) | $spl4),
  inference(unit_resulting_resolution,[],[f46894,f939])).
fof(f46987,plain,(
  ( ! [X2,X0,X1] : (sP42('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X1,X2)) ) | $spl4),
  inference(unit_resulting_resolution,[],[f46894,f940])).
fof(f46988,plain,(
  ( ! [X0] : (~sP41('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0','F_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f1048,f46894,f941])).
fof(f46998,plain,(
  ( ! [X0] : (~sP41('F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f1048,f46894,f941])).
fof(f46999,plain,(
  ( ! [X0,X1] : (~sP41('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f46894,f1048,f46894,f941])).
fof(f47008,plain,(
  ( ! [X0] : (~sP41('F_0','F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f1048,f46894,f941])).
fof(f47009,plain,(
  ( ! [X0,X1] : (~sP41('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f46894,f1048,f46894,f941])).
fof(f47010,plain,(
  ( ! [X0,X1] : (~sP41('F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f46894,f46894,f941])).
fof(f47011,plain,(
  ( ! [X2,X0,X1] : (~sP41('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f46894,f46894,f46894,f941])).
fof(f47018,plain,(
  ( ! [X0] : (sP44('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0','T_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1102,f46894,f945])).
fof(f47020,plain,(
  ( ! [X0] : (sP44('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'T_0','F_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1102,f46894,f945])).
fof(f47026,plain,(
  ( ! [X0,X1] : (~sP44('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.bool.BOUNDED_1'(s(bool,X1)),'T_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f538,f46894,f948])).
fof(f47032,plain,(
  ( ! [X0,X1] : (~sP44('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'T_0','const.bool.BOUNDED_1'(s(bool,X1)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f538,f46894,f948])).
fof(f47034,plain,(
  ( ! [X0,X1] : (~sP46('T_0',X0,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f531,f46894,f950])).
fof(f47036,plain,(
  ( ! [X0,X1] : (~sP46('T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X1)) ) | $spl4),
  inference(unit_resulting_resolution,[],[f531,f46894,f951])).
fof(f47041,plain,(
  ( ! [X2,X0,X1] : (sP45(X0,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X2)) ) | $spl4),
  inference(unit_resulting_resolution,[],[f46894,f958])).
fof(f47042,plain,(
  ( ! [X2,X0,X1] : (sP45('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X1,X2)) ) | $spl4),
  inference(unit_resulting_resolution,[],[f46894,f959])).
fof(f47043,plain,(
  ( ! [X0,X1] : (sP46('F_0',X0,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f46894,f960])).
fof(f47048,plain,(
  ( ! [X2,X0,X1] : (sP46('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X1,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f46894,f46894,f960])).
fof(f47049,plain,(
  ( ! [X0,X1] : (sP46('F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X1)) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f46894,f961])).
fof(f47054,plain,(
  ( ! [X2,X0,X1] : (sP46('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X2)) ) | $spl4),
  inference(unit_resulting_resolution,[],[f46894,f46894,f961])).
fof(f47056,plain,(
  ( ! [X0,X1] : (~sP48('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X1,'T_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f531,f46894,f966])).
fof(f47057,plain,(
  ( ! [X0,X1] : (~sP48('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'T_0',X1)) ) | $spl4),
  inference(unit_resulting_resolution,[],[f531,f46894,f967])).
fof(f47094,plain,(
  ( ! [X2,X0,X1] : (sP47('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X1,X2)) ) | $spl4),
  inference(unit_resulting_resolution,[],[f46894,f976])).
fof(f47095,plain,(
  ( ! [X0] : (sP48('F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f1048,f46894,f977])).
fof(f47101,plain,(
  ( ! [X0] : (sP48('F_0','F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f1048,f46894,f977])).
fof(f47103,plain,(
  ( ! [X0,X1] : (sP48('F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f46894,f46894,f977])).
fof(f47107,plain,(
  ( ! [X0] : (sP48('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0','F_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f1048,f46894,f977])).
fof(f47108,plain,(
  ( ! [X0,X1] : (sP48('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f46894,f1048,f46894,f977])).
fof(f47109,plain,(
  ( ! [X0,X1] : (sP48('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f46894,f46894,f977])).
fof(f47110,plain,(
  ( ! [X2,X0,X1] : (sP48('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f46894,f46894,f46894,f977])).
fof(f47121,plain,(
  ( ! [X0,X1] : (~sP50('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X1,'F_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f46894,f983])).
fof(f47123,plain,(
  ( ! [X0,X1] : (~sP50('F_0',X0,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f46894,f983])).
fof(f47124,plain,(
  ( ! [X2,X0,X1] : (~sP50('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X1,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f46894,f46894,f983])).
fof(f47140,plain,(
  ( ! [X0,X1] : (~sP50('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'T_0',X1)) ) | $spl4),
  inference(unit_resulting_resolution,[],[f531,f46894,f984])).
fof(f47150,plain,(
  ( ! [X2,X0,X1] : (sP49(X0,X1,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f46894,f991])).
fof(f47151,plain,(
  ( ! [X2,X0,X1] : (sP49('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X1,X2)) ) | $spl4),
  inference(unit_resulting_resolution,[],[f46894,f993])).
fof(f47152,plain,(
  ( ! [X0] : (sP50('F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'T_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f531,f46894,f994])).
fof(f47155,plain,(
  ( ! [X0] : (sP50('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0','T_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f531,f46894,f994])).
fof(f47156,plain,(
  ( ! [X0,X1] : (sP50('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'T_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f46894,f531,f46894,f994])).
fof(f47162,plain,(
  ( ! [X0,X1] : (sP46('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X1,'F_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1062,f46894,f1030])).
fof(f47163,plain,(
  ( ! [X0,X1] : (sP46('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0',X1)) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1063,f46894,f1030])).
fof(f47164,plain,(
  ( ! [X0] : (~sP0('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f46894,f1049])).
fof(f47172,plain,(
  ( ! [X0] : (~sP0('F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f46894,f1049])).
fof(f47173,plain,(
  ( ! [X0,X1] : (~sP0('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f46894,f46894,f1049])).
fof(f47180,plain,(
  ( ! [X0,X1] : (sP1('const.bool.BOUNDED_1'(s(bool,X0)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f46894,f1129])).
fof(f47181,plain,(
  ( ! [X0,X1] : (sP1('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.bool.BOUNDED_1'(s(bool,X1)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f46894,f1136])).
fof(f47182,plain,(
  ( ! [X2,X0,X1] : (sP50('const.bool.BOUNDED_1'(s(bool,X0)),X1,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f46894,f1242])).
fof(f47192,plain,(
  ( ! [X0,X1] : (~sP47('const.bool.BOUNDED_1'(s(bool,X0)),'F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f46894,f1894])).
fof(f47200,plain,(
  ( ! [X0,X1] : (~sP47('const.bool.BOUNDED_1'(s(bool,X0)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f46894,f1894])).
fof(f47201,plain,(
  ( ! [X2,X0,X1] : (~sP47('const.bool.BOUNDED_1'(s(bool,X0)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f46894,f46894,f1894])).
fof(f47208,plain,(
  ( ! [X0,X1] : (~sP48('const.bool.BOUNDED_1'(s(bool,X0)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f46894,f1929])).
fof(f47216,plain,(
  ( ! [X0,X1] : (~sP48('const.bool.BOUNDED_1'(s(bool,X0)),'F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f46894,f1929])).
fof(f47217,plain,(
  ( ! [X2,X0,X1] : (~sP48('const.bool.BOUNDED_1'(s(bool,X0)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f46894,f46894,f1929])).
fof(f47261,plain,(
  ( ! [X2,X0,X1] : (~sP43('const.bool.BOUNDED_1'(s(bool,X0)),'const.bool.BOUNDED_1'(s(bool,X1)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f46894,f4280])).
fof(f47263,plain,(
  ( ! [X2,X0,X1] : (~sP42('const.bool.BOUNDED_1'(s(bool,X0)),'const.bool.BOUNDED_1'(s(bool,X1)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f46894,f4433])).
fof(f47265,plain,(
  ( ! [X2,X0,X1] : (~sP45('const.bool.BOUNDED_1'(s(bool,X0)),'const.bool.BOUNDED_1'(s(bool,X1)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f46894,f4574])).
fof(f47267,plain,(
  ( ! [X2,X0,X1] : (~sP46('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.bool.BOUNDED_1'(s(bool,X1)),'const.bool.BOUNDED_1'(s(bool,X2)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f46894,f4733])).
fof(f47269,plain,(
  ( ! [X2,X0,X1] : (~sP49('const.bool.BOUNDED_1'(s(bool,X0)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.bool.BOUNDED_1'(s(bool,X2)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f46894,f4845])).
fof(f47271,plain,(
  ( ! [X2,X0,X1] : (~sP50('const.bool.BOUNDED_1'(s(bool,X0)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.bool.BOUNDED_1'(s(bool,X2)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f46894,f5003])).
fof(f46894,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f46221,f779])).
fof(f46220,plain,(
  ( ! [X2,X0,X1] : (~sP20(X0,X1,X2,sK54,'const.list.NIL_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f605,f46055,f729])).
fof(f46221,plain,(
  ( ! [X0] : (~sP23(X0,sK54,'const.list.NIL_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f605,f46055,f770])).
fof(f46222,plain,(
  ( ! [X2,X0,X1] : (~sP29(X0,X1,X2,sK54,'const.list.NIL_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f605,f46055,f804])).
fof(f46223,plain,(
  ( ! [X2,X0,X1] : (~sP37(X0,X1,X2,sK54,'const.list.NIL_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f605,f46055,f870])).
fof(f46078,plain,(
  ( ! [X183] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X183),s('type.list.list'('type.conSem.v'),sK54)))) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X183),s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X183,'type.list.list'('type.conSem.v'))))))) ) | $spl4),
  inference(superposition,[],[f604,f1043])).
fof(f46207,plain,(
  ( ! [X182] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X182),s('type.list.list'('type.conSem.v'),sK54)))) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X182,'type.list.list'('type.conSem.v')))) ) | $spl4),
  inference(forward_demodulation,[],[f46077,f1043])).
fof(f46077,plain,(
  ( ! [X182] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X182),s('type.list.list'('type.conSem.v'),sK54)))) | s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56))) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X182,'type.list.list'('type.conSem.v')))) ) | $spl4),
  inference(superposition,[],[f603,f1043])).
fof(f46067,plain,(
  ( ! [X154,X152,X153] : (s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X152),s('type.list.list'('type.conSem.v'),sK54))) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X153),s('type.list.list'('type.conSem.v'),X154))) | s('type.list.list'('type.conSem.v'),X154) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)))) ) | $spl4),
  inference(superposition,[],[f607,f1043])).
fof(f46063,plain,(
  ( ! [X144,X143] : (s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X143),s('type.list.list'('type.conSem.v'),'const.list.NIL_0'))) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X144),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(superposition,[],[f2845,f1043])).
fof(f46062,plain,(
  ( ! [X142,X140,X141] : (s('type.pair.prod'(X140,'type.list.list'('type.conSem.v')),'const.pair.,_2'(s(X140,X141),s('type.list.list'('type.conSem.v'),'const.list.NIL_0'))) != s('type.pair.prod'(X140,'type.list.list'('type.conSem.v')),'const.pair.,_2'(s(X140,X142),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(superposition,[],[f2608,f1043])).
fof(f46061,plain,(
  ( ! [X138,X139,X137] : (s('type.pair.prod'('type.list.list'('type.conSem.v'),X137),'const.pair.,_2'(s('type.list.list'('type.conSem.v'),'const.list.NIL_0'),s(X137,X138))) != s('type.pair.prod'('type.list.list'('type.conSem.v'),X137),'const.pair.,_2'(s('type.list.list'('type.conSem.v'),sK54),s(X137,X139)))) ) | $spl4),
  inference(superposition,[],[f2565,f1043])).
fof(f46060,plain,(
  ( ! [X136,X135] : (s('type.list.list'('type.list.list'('type.conSem.v')),'const.list.CONS_2'(s('type.list.list'('type.conSem.v'),'const.list.NIL_0'),s('type.list.list'('type.list.list'('type.conSem.v')),X135))) != s('type.list.list'('type.list.list'('type.conSem.v')),'const.list.CONS_2'(s('type.list.list'('type.conSem.v'),sK54),s('type.list.list'('type.list.list'('type.conSem.v')),X136)))) ) | $spl4),
  inference(superposition,[],[f2526,f1043])).
fof(f46058,plain,(
  ( ! [X132,X131] : (s('type.list.list'('type.conSem.v'),sK54) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X131),s('type.list.list'('type.conSem.v'),X132))) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),X132)) ) | $spl4),
  inference(superposition,[],[f607,f1043])).
fof(f46056,plain,(
  ( ! [X127,X128] : (s('type.list.list'('type.conSem.v'),sK54) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X127),s('type.list.list'('type.conSem.v'),X128))) | s('type.conSem.v',sK55) = s('type.conSem.v',X127)) ) | $spl4),
  inference(superposition,[],[f606,f1043])).
fof(f46055,plain,(
  s('type.list.list'('type.conSem.v'),'const.list.NIL_0') != s('type.list.list'('type.conSem.v'),sK54) | $spl4),
  inference(superposition,[],[f605,f1043])).
fof(f46054,plain,(
  ( ! [X125,X123,X121,X126,X124,X122,X120] : (s('type.list.list'('type.conSem.v'),sK54) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X120),s('type.list.list'('type.conSem.v'),X121))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X122),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X123))),s('type.modSem.v',X124))),s('type.conSem.v',X120)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X125),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X123))),s('type.list.list'('type.modSem.v'),X126))),s('type.list.list'('type.conSem.v'),X121)))) | sP37(X125,X123,X122,'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),'const.list.CONS_2'(s('type.modSem.v',X124),s('type.list.list'('type.modSem.v'),X126)))) ) | $spl4),
  inference(superposition,[],[f27339,f1043])).
fof(f46052,plain,(
  ( ! [X111,X109,X107,X112,X110,X108,X106] : (s('type.list.list'('type.conSem.v'),sK54) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X106),s('type.list.list'('type.conSem.v'),X107))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X108),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X109))),s('type.modSem.v',X110))),s('type.conSem.v',X106)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X111),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X109))),s('type.list.list'('type.modSem.v'),X112))),s('type.list.list'('type.conSem.v'),X107)))) | sP29(X111,X109,X108,'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),'const.list.CONS_2'(s('type.modSem.v',X110),s('type.list.list'('type.modSem.v'),X112)))) ) | $spl4),
  inference(superposition,[],[f27326,f1043])).
fof(f46050,plain,(
  ( ! [X94,X92,X97,X95,X93,X98,X96] : (s('type.list.list'('type.conSem.v'),sK54) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X92),s('type.list.list'('type.conSem.v'),X93))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X94),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X95))),s('type.modSem.v',X96))),s('type.conSem.v',X92)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X97),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X95))),s('type.list.list'('type.modSem.v'),X98))),s('type.list.list'('type.conSem.v'),X93)))) | sP20(X97,X95,X94,'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),'const.list.CONS_2'(s('type.modSem.v',X96),s('type.list.list'('type.modSem.v'),X98)))) ) | $spl4),
  inference(superposition,[],[f27301,f1043])).
fof(f46041,plain,(
  ( ! [X54,X52,X55,X53,X51] : (s('type.list.list'('type.conSem.v'),sK54) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X51),s('type.list.list'('type.conSem.v'),X52))) | ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X53),s('type.modSem.v',X54),s('type.conSem.v',X51)))) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X53),s('type.list.list'('type.modSem.v'),X55),s('type.list.list'('type.conSem.v'),X52)))) | sP23(X53,'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),'const.list.CONS_2'(s('type.modSem.v',X54),s('type.list.list'('type.modSem.v'),X55)))) ) | $spl4),
  inference(superposition,[],[f6932,f1043])).
fof(f46191,plain,(
  ( ! [X30,X29] : (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X30),s('type.list.list'('type.modSem.v'),X29),s('type.list.list'('type.conSem.v'),sK54)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),sK251('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X29,X30)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X30))),s('type.list.list'('type.modSem.v'),X29))),s('type.list.list'('type.conSem.v'),sK54))))) ) | $spl4),
  inference(forward_demodulation,[],[f46033,f1043])).
fof(f46033,plain,(
  ( ! [X30,X29] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),sK251('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X29,X30)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X30))),s('type.list.list'('type.modSem.v'),X29))),s('type.list.list'('type.conSem.v'),sK54)))) | p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X30),s('type.list.list'('type.modSem.v'),X29),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56))))))) ) | $spl4),
  inference(superposition,[],[f843,f1043])).
fof(f46190,plain,(
  ( ! [X28,X26,X24,X27,X25] : (p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X28),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X24))),s('type.list.list'('type.modSem.v'),X25))),s('type.list.list'('type.conSem.v'),sK54)))) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X24),s('type.list.list'('type.modSem.v'),X25),s('type.list.list'('type.conSem.v'),sK54)))) | sP30(X26,sK247(X27,X28,X26,'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X25,X24),X27,sK249(X27,X28,X26,'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X25,X24),sK248(X27,X28,X26,'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X25,X24)) | sP29(X28,sK244(X27,X28,X26,'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X25,X24),X26,sK246(X27,X28,X26,'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X25,X24),sK245(X27,X28,X26,'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X25,X24)) | sP31(X26,X28,X27)) ) | $spl4),
  inference(forward_demodulation,[],[f46032,f1043])).
fof(f46032,plain,(
  ( ! [X28,X26,X24,X27,X25] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X24),s('type.list.list'('type.modSem.v'),X25),s('type.list.list'('type.conSem.v'),sK54)))) | sP30(X26,sK247(X27,X28,X26,'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X25,X24),X27,sK249(X27,X28,X26,'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X25,X24),sK248(X27,X28,X26,'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X25,X24)) | sP29(X28,sK244(X27,X28,X26,'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X25,X24),X26,sK246(X27,X28,X26,'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X25,X24),sK245(X27,X28,X26,'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X25,X24)) | sP31(X26,X28,X27) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X28),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X24))),s('type.list.list'('type.modSem.v'),X25))),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56))))))) ) | $spl4),
  inference(superposition,[],[f836,f1043])).
fof(f46031,plain,(
  ( ! [X23,X22] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X22),s('type.list.list'('type.modSem.v'),X23),s('type.list.list'('type.conSem.v'),sK54)))) | sP23(X22,'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X23)) ) | $spl4),
  inference(superposition,[],[f779,f1043])).
fof(f46029,plain,(
  ( ! [X21,X19,X20,X18] : (s('type.list.list'('type.conSem.v'),sK54) != s('type.list.list'('type.conSem.v'),X18) | ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X19),s('type.modSem.v',X20),s('type.conSem.v',sK55)))) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X19),s('type.list.list'('type.modSem.v'),X21),s('type.list.list'('type.conSem.v'),sK56)))) | sP23(X19,X18,'const.list.CONS_2'(s('type.modSem.v',X20),s('type.list.list'('type.modSem.v'),X21)))) ) | $spl4),
  inference(superposition,[],[f6932,f1043])).
fof(f46028,plain,(
  ( ! [X14,X12,X17,X15,X13,X16] : (s('type.list.list'('type.conSem.v'),sK54) != s('type.list.list'('type.conSem.v'),X12) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X13),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.modSem.v',X15))),s('type.conSem.v',sK55)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X16),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X17))),s('type.list.list'('type.conSem.v'),sK56)))) | sP20(X16,X14,X13,X12,'const.list.CONS_2'(s('type.modSem.v',X15),s('type.list.list'('type.modSem.v'),X17)))) ) | $spl4),
  inference(superposition,[],[f27301,f1043])).
fof(f46027,plain,(
  ( ! [X6,X10,X8,X7,X11,X9] : (s('type.list.list'('type.conSem.v'),sK54) != s('type.list.list'('type.conSem.v'),X6) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X7),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X8))),s('type.modSem.v',X9))),s('type.conSem.v',sK55)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X8))),s('type.list.list'('type.modSem.v'),X11))),s('type.list.list'('type.conSem.v'),sK56)))) | sP29(X10,X8,X7,X6,'const.list.CONS_2'(s('type.modSem.v',X9),s('type.list.list'('type.modSem.v'),X11)))) ) | $spl4),
  inference(superposition,[],[f27326,f1043])).
fof(f46026,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.list.list'('type.conSem.v'),sK54) != s('type.list.list'('type.conSem.v'),X0) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.modSem.v',X3))),s('type.conSem.v',sK55)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.list.list'('type.modSem.v'),X5))),s('type.list.list'('type.conSem.v'),sK56)))) | sP37(X4,X2,X1,X0,'const.list.CONS_2'(s('type.modSem.v',X3),s('type.list.list'('type.modSem.v'),X5)))) ) | $spl4),
  inference(superposition,[],[f27339,f1043])).
fof(f40082,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3)))) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X5),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1)))) | sP34(X1,X0,'const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X7))),s('type.list.list'('type.string.char'),X8)),'const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X7),s('type.list.list'('type.string.char'),X8)))) )),
  inference(equality_resolution,[],[f28905])).
fof(f39996,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3)))) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X5),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1)))) | sP26(X1,X0,'const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X7))),s('type.list.list'('type.string.char'),X8)),'const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X7),s('type.list.list'('type.string.char'),X8)))) )),
  inference(equality_resolution,[],[f28895])).
fof(f39908,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3)))) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X5),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1)))) | sP17(X1,X0,'const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X7))),s('type.list.list'('type.string.char'),X8)),'const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X7),s('type.list.list'('type.string.char'),X8)))) )),
  inference(equality_resolution,[],[f28884])).
fof(f39831,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3)))) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X5),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1)))) | sP33(X1,X0,'const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3),s('type.list.list'('type.string.char'),X7),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X6),s('type.modLang.exp',X8)))),'const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2))),s('type.list.list'('type.string.char'),X7),s('type.modLang.exp',X8)))) )),
  inference(equality_resolution,[],[f28853])).
fof(f39393,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3)))) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X5),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1)))) | sP25(X1,X0,'const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3),s('type.list.list'('type.string.char'),X7),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X6),s('type.modLang.exp',X8)))),'const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2))),s('type.list.list'('type.string.char'),X7),s('type.modLang.exp',X8)))) )),
  inference(equality_resolution,[],[f28842])).
fof(f39338,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3)))) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X5),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1)))) | sP16(X1,X0,'const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3),s('type.list.list'('type.string.char'),X7),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X6),s('type.modLang.exp',X8)))),'const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2))),s('type.list.list'('type.string.char'),X7),s('type.modLang.exp',X8)))) )),
  inference(equality_resolution,[],[f28834])).
fof(f39249,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3)))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X5))),s('type.conSem.v',X6)))) | sP38(X4,X1,X0,'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X7),s('type.conSem.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3)),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X7),s('type.modSem.v',X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2)))) )),
  inference(equality_resolution,[],[f28472])).
fof(f38833,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3)))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X5))),s('type.conSem.v',X6)))) | sP30(X4,X1,X0,'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X7),s('type.conSem.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3)),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X7),s('type.modSem.v',X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2)))) )),
  inference(equality_resolution,[],[f28462])).
fof(f38816,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3)))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X5))),s('type.conSem.v',X6)))) | sP21(X4,X1,X0,'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X7),s('type.conSem.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3)),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X7),s('type.modSem.v',X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2)))) )),
  inference(equality_resolution,[],[f28438])).
fof(f38743,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'('type.string.char'),X0) != s('type.list.list'('type.string.char'),X1) | s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X2),s('type.list.list'('type.string.char'),X0),s('type.modLang.exp',X3))) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X2),s('type.list.list'('type.string.char'),X1),s('type.modLang.exp',X3)))) )),
  inference(equality_resolution,[],[f27356])).
fof(f38723,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X2))),s('type.conSem.v',X3)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X5))),s('type.list.list'('type.conSem.v'),X6)))) | sP37(X4,X1,X0,'const.list.CONS_2'(s('type.conSem.v',X3),s('type.list.list'('type.conSem.v'),X6)),'const.list.CONS_2'(s('type.modSem.v',X2),s('type.list.list'('type.modSem.v'),X5)))) )),
  inference(equality_resolution,[],[f27339])).
fof(f38650,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X2))),s('type.conSem.v',X3)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X5))),s('type.list.list'('type.conSem.v'),X6)))) | sP29(X4,X1,X0,'const.list.CONS_2'(s('type.conSem.v',X3),s('type.list.list'('type.conSem.v'),X6)),'const.list.CONS_2'(s('type.modSem.v',X2),s('type.list.list'('type.modSem.v'),X5)))) )),
  inference(equality_resolution,[],[f27326])).
fof(f38579,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X2))),s('type.conSem.v',X3)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X5))),s('type.list.list'('type.conSem.v'),X6)))) | sP20(X4,X1,X0,'const.list.CONS_2'(s('type.conSem.v',X3),s('type.list.list'('type.conSem.v'),X6)),'const.list.CONS_2'(s('type.modSem.v',X2),s('type.list.list'('type.modSem.v'),X5)))) )),
  inference(equality_resolution,[],[f27301])).
fof(f38508,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'('type.string.char'),X0) != s('type.list.list'('type.string.char'),X1) | s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X3),s('type.list.list'('type.string.char'),X0))) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X3),s('type.list.list'('type.string.char'),X1)))) )),
  inference(equality_resolution,[],[f28264])).
fof(f38461,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.pair.prod'(X0,'type.modSem.v'),'const.pair.,_2'(s(X0,X1),s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),'const.list.NIL_0'),s('type.list.list'('type.string.char'),X3))))) != s('type.pair.prod'(X0,'type.modSem.v'),'const.pair.,_2'(s(X0,X4),s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp')),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X7))),s('type.list.list'('type.string.char'),X8)))))) )),
  inference(unit_resulting_resolution,[],[f26970,f651])).
fof(f38462,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.pair.prod'('type.modSem.v',X0),'const.pair.,_2'(s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),'const.list.NIL_0'),s('type.list.list'('type.string.char'),X2))),s(X0,X3))) != s('type.pair.prod'('type.modSem.v',X0),'const.pair.,_2'(s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp')),X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X6))),s('type.list.list'('type.string.char'),X7))),s(X0,X8)))) )),
  inference(unit_resulting_resolution,[],[f26970,f650])).
fof(f38463,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),'const.list.NIL_0'),s('type.list.list'('type.string.char'),X1))),s('type.list.list'('type.modSem.v'),X2))) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp')),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5))),s('type.list.list'('type.string.char'),X6))),s('type.list.list'('type.modSem.v'),X7)))) )),
  inference(unit_resulting_resolution,[],[f26970,f606])).
fof(f38429,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.pair.prod'(X0,'type.modSem.v'),'const.pair.,_2'(s(X0,X1),s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X3),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))) != s('type.pair.prod'(X0,'type.modSem.v'),'const.pair.,_2'(s(X0,X4),s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X6),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char',X7),s('type.list.list'('type.string.char'),X8)))))))) )),
  inference(unit_resulting_resolution,[],[f25110,f651])).
fof(f38430,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.pair.prod'('type.modSem.v',X0),'const.pair.,_2'(s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X2),s('type.list.list'('type.string.char'),'const.list.NIL_0'))),s(X0,X3))) != s('type.pair.prod'('type.modSem.v',X0),'const.pair.,_2'(s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char',X6),s('type.list.list'('type.string.char'),X7))))),s(X0,X8)))) )),
  inference(unit_resulting_resolution,[],[f25110,f650])).
fof(f38431,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X1),s('type.list.list'('type.string.char'),'const.list.NIL_0'))),s('type.list.list'('type.modSem.v'),X2))) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X4),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char',X5),s('type.list.list'('type.string.char'),X6))))),s('type.list.list'('type.modSem.v'),X7)))) )),
  inference(unit_resulting_resolution,[],[f25110,f606])).
fof(f38398,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X2))),s('type.list.list'('type.conSem.v'),X3)))) | sP35(X0,X1,'const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X3)),'const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X2)))) )),
  inference(equality_resolution,[],[f25011])).
fof(f38370,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X2))),s('type.list.list'('type.conSem.v'),X3)))) | sP27(X0,X1,'const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X3)),'const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X2)))) )),
  inference(equality_resolution,[],[f24958])).
fof(f37800,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X2))),s('type.list.list'('type.conSem.v'),X3)))) | sP18(X0,X1,'const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X3)),'const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X2)))) )),
  inference(equality_resolution,[],[f24930])).
fof(f37735,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.pair.prod'(X0,'type.modSem.v'),'const.pair.,_2'(s(X0,X1),s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X2),s('type.list.list'('type.string.char'),'const.list.NIL_0'),s('type.modLang.exp',X3))))) != s('type.pair.prod'(X0,'type.modSem.v'),'const.pair.,_2'(s(X0,X4),s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X5),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char',X6),s('type.list.list'('type.string.char'),X7))),s('type.modLang.exp',X8)))))) )),
  inference(unit_resulting_resolution,[],[f23337,f651])).
fof(f37736,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.pair.prod'('type.modSem.v',X0),'const.pair.,_2'(s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X1),s('type.list.list'('type.string.char'),'const.list.NIL_0'),s('type.modLang.exp',X2))),s(X0,X3))) != s('type.pair.prod'('type.modSem.v',X0),'const.pair.,_2'(s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X4),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char',X5),s('type.list.list'('type.string.char'),X6))),s('type.modLang.exp',X7))),s(X0,X8)))) )),
  inference(unit_resulting_resolution,[],[f23337,f650])).
fof(f37737,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0),s('type.list.list'('type.string.char'),'const.list.NIL_0'),s('type.modLang.exp',X1))),s('type.list.list'('type.modSem.v'),X2))) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char',X4),s('type.list.list'('type.string.char'),X5))),s('type.modLang.exp',X6))),s('type.list.list'('type.modSem.v'),X7)))) )),
  inference(unit_resulting_resolution,[],[f23337,f606])).
fof(f37694,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X2))),s('type.list.list'('type.conSem.v'),X3)))) | sP36(X0,X1,'const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X3)),'const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X2)))) )),
  inference(equality_resolution,[],[f23297])).
fof(f37676,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X2))),s('type.list.list'('type.conSem.v'),X3)))) | sP28(X0,X1,'const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X3)),'const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X2)))) )),
  inference(equality_resolution,[],[f23077])).
fof(f37652,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X2))),s('type.list.list'('type.conSem.v'),X3)))) | sP19(X0,X1,'const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X3)),'const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X2)))) )),
  inference(equality_resolution,[],[f23012])).
fof(f37624,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X2)))) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X3),s('type.list.list'('type.conSem.v'),X4)))) | sP23(X0,'const.list.CONS_2'(s('type.conSem.v',X2),s('type.list.list'('type.conSem.v'),X4)),'const.list.CONS_2'(s('type.modSem.v',X1),s('type.list.list'('type.modSem.v'),X3)))) )),
  inference(equality_resolution,[],[f6932])).
fof(f37594,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP39(X0,X1,X2) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X4))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X4))))))) )),
  inference(equality_resolution,[],[f6286])).
fof(f37567,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP39(X0,X1,X2) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X4))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X4))))))) )),
  inference(equality_resolution,[],[f6273])).
fof(f37545,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP31(X0,X1,X2) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X4))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X4))))))) )),
  inference(equality_resolution,[],[f6256])).
fof(f37518,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP31(X0,X1,X2) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X4))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X4))))))) )),
  inference(equality_resolution,[],[f6247])).
fof(f37488,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP22(X0,X1,X2) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X4))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X4))))))) )),
  inference(equality_resolution,[],[f6241])).
fof(f37467,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP22(X0,X1,X2) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X4))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X4))))))) )),
  inference(equality_resolution,[],[f6240])).
fof(f37446,plain,(
  ( ! [X6,X4,X5,X3] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X4))),s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X5)))))) | s(bool,X6) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.list.list'('type.modSem.v'),X4),s('type.list.list'('type.conSem.v'),X5))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f37439,f531])).
fof(f37439,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'T_0')) | p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X4))),s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X5)))))) | s(bool,X6) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.list.list'('type.modSem.v'),X4),s('type.list.list'('type.conSem.v'),X5))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f4519,f1319])).
fof(f37265,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,happ(s(fun(bool,bool),X4),s(bool,X5)))) | p(s(bool,happ(s(fun(bool,bool),X3),s(bool,sK58(X4,X3,bool))))) | s(bool,'T_0') = s(bool,sK57(X4,X3,bool)) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f37261,f531])).
fof(f37261,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun(bool,bool),X4),s(bool,X5)))) | p(s(bool,happ(s(fun(bool,bool),X3),s(bool,sK58(X4,X3,bool))))) | s(bool,'T_0') = s(bool,sK57(X4,X3,bool)) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f3884,f1319])).
fof(f36689,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(X1,X2) != s(X1,X3) | s('type.pair.prod'(bool,X1),'const.pair.,_2'(s(bool,'F_0'),s(X1,X3))) = s('type.pair.prod'(bool,X1),'const.pair.,_2'(s(bool,X0),s(X1,X2)))) )),
  inference(condensation,[],[f36688])).
fof(f36688,plain,(
  ( ! [X35,X33,X31,X34,X32] : (s(X32,X33) != s(X32,X34) | s('type.pair.prod'(bool,X32),'const.pair.,_2'(s(bool,'F_0'),s(X32,X34))) = s('type.pair.prod'(bool,X32),'const.pair.,_2'(s(bool,X35),s(X32,X33))) | s(bool,'T_0') = s(bool,X35) | s(bool,'T_0') = s(bool,X31)) )),
  inference(trivial_inequality_removal,[],[f36678])).
fof(f36678,plain,(
  ( ! [X35,X33,X31,X34,X32] : (s(bool,X31) != s(bool,X31) | s(X32,X33) != s(X32,X34) | s('type.pair.prod'(bool,X32),'const.pair.,_2'(s(bool,'F_0'),s(X32,X34))) = s('type.pair.prod'(bool,X32),'const.pair.,_2'(s(bool,X35),s(X32,X33))) | s(bool,'T_0') = s(bool,X35) | s(bool,'T_0') = s(bool,X31)) )),
  inference(superposition,[],[f3442,f539])).
fof(f36690,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(X1,X2) != s(X1,X3) | s('type.pair.prod'(bool,X1),'const.pair.,_2'(s(bool,X0),s(X1,X3))) = s('type.pair.prod'(bool,X1),'const.pair.,_2'(s(bool,X4),s(X1,X2))) | s(bool,'T_0') = s(bool,X4) | s(bool,'T_0') = s(bool,X0)) )),
  inference(trivial_inequality_removal,[],[f36673])).
fof(f36673,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'F_0') != s(bool,'F_0') | s(X1,X2) != s(X1,X3) | s('type.pair.prod'(bool,X1),'const.pair.,_2'(s(bool,X0),s(X1,X3))) = s('type.pair.prod'(bool,X1),'const.pair.,_2'(s(bool,X4),s(X1,X2))) | s(bool,'T_0') = s(bool,X4) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f3442,f539])).
fof(f36227,plain,(
  ( ! [X2,X0,X1] : (s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,'T_0') = s(bool,g(s(X0,sK66(X1,X2,bool,X0)))) | s(bool,'T_0') = s(bool,f(s(X0,sK66(X1,X2,bool,X0))))) )),
  inference(trivial_inequality_removal,[],[f36222])).
fof(f36222,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') != s(bool,'F_0') | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,'T_0') = s(bool,g(s(X0,sK66(X1,X2,bool,X0)))) | s(bool,'T_0') = s(bool,f(s(X0,sK66(X1,X2,bool,X0))))) )),
  inference(superposition,[],[f2877,f539])).
fof(f36125,plain,(
  ( ! [X6,X4,X5,X3] : (p(s(bool,happ(s(fun(bool,bool),X3),s(bool,X5)))) | s(bool,'F_0') != s(bool,X5) | s(bool,'T_0') = s(bool,X4) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,X4))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f36116,f531])).
fof(f36116,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),X3),s(bool,X5)))) | s(bool,'F_0') != s(bool,X5) | s(bool,'T_0') = s(bool,X4) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,X4))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f2754,f1319])).
fof(f36056,plain,(
  ( ! [X6,X4,X5,X3] : (p(s(bool,happ(s(fun(bool,bool),X3),s(bool,X4)))) | s(bool,X4) != s(bool,X5) | s(bool,'T_0') = s(bool,X5) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f36052,f531])).
fof(f36052,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),X3),s(bool,X4)))) | s(bool,X4) != s(bool,X5) | s(bool,'T_0') = s(bool,X5) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f2753,f1319])).
fof(f36024,plain,(
  ( ! [X6,X4,X5,X3] : (p(s(bool,X4)) | p(s(bool,happ(s(fun(bool,bool),X3),s(bool,X5)))) | s(bool,'T_0') = s(bool,sK64(X3,X4,bool)) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f36020,f531])).
fof(f36020,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'T_0')) | p(s(bool,X4)) | p(s(bool,happ(s(fun(bool,bool),X3),s(bool,X5)))) | s(bool,'T_0') = s(bool,sK64(X3,X4,bool)) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f2734,f1319])).
fof(f35988,plain,(
  ( ! [X6,X4,X5,X3] : (p(s(bool,X4)) | p(s(bool,happ(s(fun(bool,bool),X3),s(bool,X5)))) | s(bool,'T_0') = s(bool,sK63(X3,X4,bool)) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f35984,f531])).
fof(f35984,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'T_0')) | p(s(bool,X4)) | p(s(bool,happ(s(fun(bool,bool),X3),s(bool,X5)))) | s(bool,'T_0') = s(bool,sK63(X3,X4,bool)) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f2718,f1319])).
fof(f35956,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,X4)) | p(s(bool,happ(s(fun(bool,bool),X3),s(bool,X5)))) | s(bool,'T_0') = s(bool,sK62(X4,X3,bool)) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f35952,f531])).
fof(f35952,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'T_0')) | ~p(s(bool,X4)) | p(s(bool,happ(s(fun(bool,bool),X3),s(bool,X5)))) | s(bool,'T_0') = s(bool,sK62(X4,X3,bool)) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f2706,f1319])).
fof(f35925,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,X4)) | p(s(bool,happ(s(fun(bool,bool),X3),s(bool,X5)))) | s(bool,'T_0') = s(bool,sK61(X4,X3,bool)) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f35921,f531])).
fof(f35921,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'T_0')) | ~p(s(bool,X4)) | p(s(bool,happ(s(fun(bool,bool),X3),s(bool,X5)))) | s(bool,'T_0') = s(bool,sK61(X4,X3,bool)) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f2696,f1319])).
fof(f35896,plain,(
  ( ! [X6,X4,X5,X3] : (p(s(bool,happ(s(fun(bool,bool),X3),s(bool,X4)))) | ~p(s(bool,X5)) | s(bool,'T_0') = s(bool,sK60(X3,X5,bool)) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f35892,f531])).
fof(f35892,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),X3),s(bool,X4)))) | ~p(s(bool,X5)) | s(bool,'T_0') = s(bool,sK60(X3,X5,bool)) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f2684,f1319])).
fof(f35862,plain,(
  ( ! [X6,X4,X5,X3] : (p(s(bool,happ(s(fun(bool,bool),X3),s(bool,X4)))) | ~p(s(bool,X5)) | s(bool,'T_0') = s(bool,sK59(X3,X5,bool)) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f35858,f531])).
fof(f35858,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),X3),s(bool,X4)))) | ~p(s(bool,X5)) | s(bool,'T_0') = s(bool,sK59(X3,X5,bool)) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f2672,f1319])).
fof(f34637,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'(X0,'type.modSem.v'),'const.pair.,_2'(s(X0,X1),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X2),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))))) != s('type.pair.prod'(X0,'type.modSem.v'),'const.pair.,_2'(s(X0,X3),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X4),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X5),s('type.list.list'('type.modSem.v'),X6)))))))) )),
  inference(unit_resulting_resolution,[],[f3608,f651])).
fof(f34638,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'('type.modSem.v',X0),'const.pair.,_2'(s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))),s(X0,X2))) != s('type.pair.prod'('type.modSem.v',X0),'const.pair.,_2'(s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X3),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X4),s('type.list.list'('type.modSem.v'),X5))))),s(X0,X6)))) )),
  inference(unit_resulting_resolution,[],[f3608,f650])).
fof(f34639,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.modSem.v'),X1))) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X2),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X3),s('type.list.list'('type.modSem.v'),X4))))),s('type.list.list'('type.modSem.v'),X5)))) )),
  inference(unit_resulting_resolution,[],[f3608,f606])).
fof(f34153,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.list.list'('type.list.list'(X0)),'const.list.CONS_2'(s('type.list.list'(X0),X1),s('type.list.list'('type.list.list'(X0)),'const.list.CONS_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'('type.list.list'(X0)),X2))))) != s('type.list.list'('type.list.list'(X0)),'const.list.CONS_2'(s('type.list.list'(X0),X3),s('type.list.list'('type.list.list'(X0)),'const.list.CONS_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X5))),s('type.list.list'('type.list.list'(X0)),X6)))))) )),
  inference(unit_resulting_resolution,[],[f2526,f607])).
fof(f34154,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.pair.prod'(X0,'type.list.list'('type.list.list'(X1))),'const.pair.,_2'(s(X0,X2),s('type.list.list'('type.list.list'(X1)),'const.list.CONS_2'(s('type.list.list'(X1),'const.list.NIL_0'),s('type.list.list'('type.list.list'(X1)),X3))))) != s('type.pair.prod'(X0,'type.list.list'('type.list.list'(X1))),'const.pair.,_2'(s(X0,X4),s('type.list.list'('type.list.list'(X1)),'const.list.CONS_2'(s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X5),s('type.list.list'(X1),X6))),s('type.list.list'('type.list.list'(X1)),X7)))))) )),
  inference(unit_resulting_resolution,[],[f2526,f651])).
fof(f34155,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.pair.prod'('type.list.list'('type.list.list'(X0)),X1),'const.pair.,_2'(s('type.list.list'('type.list.list'(X0)),'const.list.CONS_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'('type.list.list'(X0)),X2))),s(X1,X3))) != s('type.pair.prod'('type.list.list'('type.list.list'(X0)),X1),'const.pair.,_2'(s('type.list.list'('type.list.list'(X0)),'const.list.CONS_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X5))),s('type.list.list'('type.list.list'(X0)),X6))),s(X1,X7)))) )),
  inference(unit_resulting_resolution,[],[f2526,f650])).
fof(f34156,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.list.list'('type.list.list'('type.list.list'(X0))),'const.list.CONS_2'(s('type.list.list'('type.list.list'(X0)),'const.list.CONS_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'('type.list.list'(X0)),X1))),s('type.list.list'('type.list.list'('type.list.list'(X0))),X2))) != s('type.list.list'('type.list.list'('type.list.list'(X0))),'const.list.CONS_2'(s('type.list.list'('type.list.list'(X0)),'const.list.CONS_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))),s('type.list.list'('type.list.list'(X0)),X5))),s('type.list.list'('type.list.list'('type.list.list'(X0))),X6)))) )),
  inference(unit_resulting_resolution,[],[f2526,f606])).
fof(f34071,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X1),s('type.list.list'('type.string.char'),X2))) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X5))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X6),s('type.list.list'('type.string.char'),X7)))) )),
  inference(unit_resulting_resolution,[],[f2608,f1024])).
fof(f34072,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.string.char'),X1),s('type.modLang.exp',X2))) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X5))))),s('type.list.list'('type.string.char'),X6),s('type.modLang.exp',X7)))) )),
  inference(unit_resulting_resolution,[],[f2608,f1020])).
fof(f34073,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.pair.prod'(X0,'type.pair.prod'(X1,'type.list.list'(X2))),'const.pair.,_2'(s(X0,X3),s('type.pair.prod'(X1,'type.list.list'(X2)),'const.pair.,_2'(s(X1,X4),s('type.list.list'(X2),'const.list.NIL_0'))))) != s('type.pair.prod'(X0,'type.pair.prod'(X1,'type.list.list'(X2))),'const.pair.,_2'(s(X0,X5),s('type.pair.prod'(X1,'type.list.list'(X2)),'const.pair.,_2'(s(X1,X6),s('type.list.list'(X2),'const.list.CONS_2'(s(X2,X7),s('type.list.list'(X2),X8)))))))) )),
  inference(unit_resulting_resolution,[],[f2608,f651])).
fof(f34074,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.pair.prod'('type.pair.prod'(X0,'type.list.list'(X1)),X2),'const.pair.,_2'(s('type.pair.prod'(X0,'type.list.list'(X1)),'const.pair.,_2'(s(X0,X3),s('type.list.list'(X1),'const.list.NIL_0'))),s(X2,X4))) != s('type.pair.prod'('type.pair.prod'(X0,'type.list.list'(X1)),X2),'const.pair.,_2'(s('type.pair.prod'(X0,'type.list.list'(X1)),'const.pair.,_2'(s(X0,X5),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X6),s('type.list.list'(X1),X7))))),s(X2,X8)))) )),
  inference(unit_resulting_resolution,[],[f2608,f650])).
fof(f34075,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.list.list'('type.pair.prod'(X0,'type.list.list'(X1))),'const.list.CONS_2'(s('type.pair.prod'(X0,'type.list.list'(X1)),'const.pair.,_2'(s(X0,X2),s('type.list.list'(X1),'const.list.NIL_0'))),s('type.list.list'('type.pair.prod'(X0,'type.list.list'(X1))),X3))) != s('type.list.list'('type.pair.prod'(X0,'type.list.list'(X1))),'const.list.CONS_2'(s('type.pair.prod'(X0,'type.list.list'(X1)),'const.pair.,_2'(s(X0,X4),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X5),s('type.list.list'(X1),X6))))),s('type.list.list'('type.pair.prod'(X0,'type.list.list'(X1))),X7)))) )),
  inference(unit_resulting_resolution,[],[f2608,f606])).
fof(f33795,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.pair.prod'(X0,'type.pair.prod'('type.list.list'(X1),X2)),'const.pair.,_2'(s(X0,X3),s('type.pair.prod'('type.list.list'(X1),X2),'const.pair.,_2'(s('type.list.list'(X1),'const.list.NIL_0'),s(X2,X4))))) != s('type.pair.prod'(X0,'type.pair.prod'('type.list.list'(X1),X2)),'const.pair.,_2'(s(X0,X5),s('type.pair.prod'('type.list.list'(X1),X2),'const.pair.,_2'(s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X6),s('type.list.list'(X1),X7))),s(X2,X8)))))) )),
  inference(unit_resulting_resolution,[],[f2565,f651])).
fof(f33796,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.pair.prod'('type.pair.prod'('type.list.list'(X0),X1),X2),'const.pair.,_2'(s('type.pair.prod'('type.list.list'(X0),X1),'const.pair.,_2'(s('type.list.list'(X0),'const.list.NIL_0'),s(X1,X3))),s(X2,X4))) != s('type.pair.prod'('type.pair.prod'('type.list.list'(X0),X1),X2),'const.pair.,_2'(s('type.pair.prod'('type.list.list'(X0),X1),'const.pair.,_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X6))),s(X1,X7))),s(X2,X8)))) )),
  inference(unit_resulting_resolution,[],[f2565,f650])).
fof(f33797,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.list.list'('type.pair.prod'('type.list.list'(X0),X1)),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'(X0),X1),'const.pair.,_2'(s('type.list.list'(X0),'const.list.NIL_0'),s(X1,X2))),s('type.list.list'('type.pair.prod'('type.list.list'(X0),X1)),X3))) != s('type.list.list'('type.pair.prod'('type.list.list'(X0),X1)),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'(X0),X1),'const.pair.,_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X5))),s(X1,X6))),s('type.list.list'('type.pair.prod'('type.list.list'(X0),X1)),X7)))) )),
  inference(unit_resulting_resolution,[],[f2565,f606])).
fof(f33764,plain,(
  ( ! [X4,X2,X3] : (p(s(bool,happ(s(fun(bool,bool),X2),s(bool,sK65('F_0',X2,bool))))) | s(bool,'T_0') = s(bool,X3) | s(bool,X4) = s(bool,happ(s(fun(bool,bool),X2),s(bool,X3))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f33755,f531])).
fof(f33755,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),X2),s(bool,sK65('F_0',X2,bool))))) | s(bool,'T_0') = s(bool,X3) | s(bool,X4) = s(bool,happ(s(fun(bool,bool),X2),s(bool,X3))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f2433,f1319])).
fof(f33729,plain,(
  ( ! [X4,X2,X3] : (p(s(bool,happ(s(fun(bool,bool),X2),s(bool,sK65(X3,X2,bool))))) | s(bool,'T_0') = s(bool,X3) | s(bool,X4) = s(bool,happ(s(fun(bool,bool),X2),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f33725,f531])).
fof(f33725,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),X2),s(bool,sK65(X3,X2,bool))))) | s(bool,'T_0') = s(bool,X3) | s(bool,X4) = s(bool,happ(s(fun(bool,bool),X2),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f2432,f1319])).
fof(f33657,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'(X1,bool),'const.pair.,_2'(s(X1,X2),s(bool,X0))) != s('type.pair.prod'(X1,bool),'const.pair.,_2'(s(X1,X3),s(bool,X4))) | s(bool,X4) = s(bool,'const.bool.BOUNDED_1'(s(bool,X5))) | s(bool,X0) = s(bool,X6) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f2621,f1319])).
fof(f33650,plain,(
  ( ! [X28,X26,X24,X27,X25] : (s('type.pair.prod'(bool,bool),'const.pair.,_2'(s(bool,X24),s(bool,X24))) != s('type.pair.prod'(bool,bool),'const.pair.,_2'(s(bool,X25),s(bool,X26))) | s(bool,X26) = s(bool,'const.bool.BOUNDED_1'(s(bool,X27))) | s(bool,X24) = s(bool,X28) | s(bool,'T_0') = s(bool,X28)) )),
  inference(superposition,[],[f2621,f1319])).
fof(f33566,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'(bool,X1),'const.pair.,_2'(s(bool,X0),s(X1,X2))) != s('type.pair.prod'(bool,X1),'const.pair.,_2'(s(bool,X3),s(X1,X4))) | s(bool,X3) = s(bool,'const.bool.BOUNDED_1'(s(bool,X5))) | s(bool,X0) = s(bool,X6) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f2572,f1319])).
fof(f33514,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X0),s('type.list.list'(bool),X1))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X2),s('type.list.list'(bool),X3))) | s(bool,X2) = s(bool,'const.bool.BOUNDED_1'(s(bool,X4))) | s(bool,X0) = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f2533,f1319])).
fof(f33470,plain,(
  ( ! [X28,X29,X27] : (s(bool,X27) != s(bool,X28) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X29))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X28),s('type.list.list'(bool),X29))) | s(bool,'T_0') = s(bool,X27)) )),
  inference(superposition,[],[f3622,f539])).
fof(f33468,plain,(
  ( ! [X21,X19,X22,X20] : (s(bool,X19) != s(bool,X20) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X21))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X20),s('type.list.list'(bool),X21))) | s(bool,X19) = s(bool,X22) | s(bool,'T_0') = s(bool,X22)) )),
  inference(superposition,[],[f3622,f1319])).
fof(f33465,plain,(
  ( ! [X10,X8,X7,X9] : (s(bool,X8) != s(bool,X9) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X7),s('type.list.list'(bool),X10))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X9),s('type.list.list'(bool),X10))) | s(bool,'T_0') = s(bool,X8) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f3622,f1319])).
fof(f33464,plain,(
  ( ! [X6,X4,X5,X3] : (s(bool,'T_0') != s(bool,X4) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X3),s('type.list.list'(bool),X5))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X4),s('type.list.list'(bool),X5))) | s(bool,X3) = s(bool,X6) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f3622,f1319])).
fof(f33463,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') != s(bool,X1) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X0),s('type.list.list'(bool),X2))) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X1),s('type.list.list'(bool),X2))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f3622,f539])).
fof(f33392,plain,(
  ( ! [X37,X35,X36,X34] : (s(bool,X34) != s(bool,X35) | s('type.pair.prod'(X36,bool),'const.pair.,_2'(s(X36,X37),s(bool,'F_0'))) = s('type.pair.prod'(X36,bool),'const.pair.,_2'(s(X36,X37),s(bool,X35))) | s(bool,'T_0') = s(bool,X34)) )),
  inference(superposition,[],[f3453,f539])).
fof(f33390,plain,(
  ( ! [X28,X26,X24,X27,X25] : (s(bool,X24) != s(bool,X25) | s('type.pair.prod'(X26,bool),'const.pair.,_2'(s(X26,X27),s(bool,'T_0'))) = s('type.pair.prod'(X26,bool),'const.pair.,_2'(s(X26,X27),s(bool,X25))) | s(bool,X24) = s(bool,X28) | s(bool,'T_0') = s(bool,X28)) )),
  inference(superposition,[],[f3453,f1319])).
fof(f33387,plain,(
  ( ! [X12,X10,X13,X11,X9] : (s(bool,X10) != s(bool,X11) | s('type.pair.prod'(X12,bool),'const.pair.,_2'(s(X12,X13),s(bool,X9))) = s('type.pair.prod'(X12,bool),'const.pair.,_2'(s(X12,X13),s(bool,X11))) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f3453,f1319])).
fof(f33386,plain,(
  ( ! [X6,X4,X8,X7,X5] : (s(bool,'T_0') != s(bool,X5) | s('type.pair.prod'(X6,bool),'const.pair.,_2'(s(X6,X7),s(bool,X4))) = s('type.pair.prod'(X6,bool),'const.pair.,_2'(s(X6,X7),s(bool,X5))) | s(bool,X4) = s(bool,X8) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f3453,f1319])).
fof(f33385,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') != s(bool,X1) | s('type.pair.prod'(X2,bool),'const.pair.,_2'(s(X2,X3),s(bool,X0))) = s('type.pair.prod'(X2,bool),'const.pair.,_2'(s(X2,X3),s(bool,X1))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f3453,f539])).
fof(f33278,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X1),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char',X2),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X4),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char',X5),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char',X6),s('type.list.list'('type.string.char'),X7)))))))) )),
  inference(unit_resulting_resolution,[],[f2845,f1026])).
fof(f33279,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char',X1),s('type.list.list'('type.string.char'),'const.list.NIL_0'))),s('type.modLang.exp',X2))) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char',X4),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char',X5),s('type.list.list'('type.string.char'),X6))))),s('type.modLang.exp',X7)))) )),
  inference(unit_resulting_resolution,[],[f2845,f1021])).
fof(f33280,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),'const.list.NIL_0'))),s('type.list.list'('type.string.char'),X2))) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp')),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp')),X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X6))))),s('type.list.list'('type.string.char'),X7)))) )),
  inference(unit_resulting_resolution,[],[f2845,f1025])).
fof(f33281,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X0),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))))) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X2),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X3),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X4),s('type.list.list'('type.modSem.v'),X5)))))))) )),
  inference(unit_resulting_resolution,[],[f2845,f1017])).
fof(f33282,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))))) != s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X1),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X2),s('type.list.list'('type.modSem.v'),X3)))))))) )),
  inference(unit_resulting_resolution,[],[f2845,f621])).
fof(f33283,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0'))))) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X6)))))))) )),
  inference(unit_resulting_resolution,[],[f2845,f607])).
fof(f33284,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.pair.prod'(X0,'type.list.list'(X1)),'const.pair.,_2'(s(X0,X2),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X3),s('type.list.list'(X1),'const.list.NIL_0'))))) != s('type.pair.prod'(X0,'type.list.list'(X1)),'const.pair.,_2'(s(X0,X4),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X5),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X6),s('type.list.list'(X1),X7)))))))) )),
  inference(unit_resulting_resolution,[],[f2845,f651])).
fof(f33285,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.pair.prod'('type.list.list'(X0),X1),'const.pair.,_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0'))),s(X1,X3))) != s('type.pair.prod'('type.list.list'(X0),X1),'const.pair.,_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X6))))),s(X1,X7)))) )),
  inference(unit_resulting_resolution,[],[f2845,f650])).
fof(f33286,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.list.list'('type.list.list'(X0)),'const.list.CONS_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),'const.list.NIL_0'))),s('type.list.list'('type.list.list'(X0)),X2))) != s('type.list.list'('type.list.list'(X0)),'const.list.CONS_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X5))))),s('type.list.list'('type.list.list'(X0)),X6)))) )),
  inference(unit_resulting_resolution,[],[f2845,f606])).
fof(f33204,plain,(
  ( ! [X4,X2,X3] : (p(s(bool,happ(s(fun(bool,bool),X2),s(bool,sK65('const.bool.BOUNDED_1'(s(bool,X3)),X2,bool))))) | s(bool,X4) = s(bool,happ(s(fun(bool,bool),X2),s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f33198,f531])).
fof(f33198,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),X2),s(bool,sK65('const.bool.BOUNDED_1'(s(bool,X3)),X2,bool))))) | s(bool,X4) = s(bool,happ(s(fun(bool,bool),X2),s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f2436,f1319])).
fof(f33191,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,X0)))) | p(s(bool,happ(s(fun(bool,bool),X1),s(bool,sK65('const.bool.BOUNDED_1'(s(bool,X2)),X1,bool))))) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f2436,f1319])).
fof(f31106,plain,(
  ( ! [X4,X2,X3] : (s(bool,'F_0') = s(bool,sK65('F_0',X2,bool)) | s(bool,'T_0') = s(bool,X3) | s(bool,X4) = s(bool,happ(s(fun(bool,bool),X2),s(bool,X3))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f31088,f531])).
fof(f31088,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'T_0')) | s(bool,'F_0') = s(bool,sK65('F_0',X2,bool)) | s(bool,'T_0') = s(bool,X3) | s(bool,X4) = s(bool,happ(s(fun(bool,bool),X2),s(bool,X3))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f2331,f1319])).
fof(f31002,plain,(
  ( ! [X4,X2,X3] : (s(bool,X3) = s(bool,sK65(X3,X2,bool)) | s(bool,'T_0') = s(bool,X3) | s(bool,X4) = s(bool,happ(s(fun(bool,bool),X2),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f30995,f531])).
fof(f30995,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'T_0')) | s(bool,X3) = s(bool,sK65(X3,X2,bool)) | s(bool,'T_0') = s(bool,X3) | s(bool,X4) = s(bool,happ(s(fun(bool,bool),X2),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f2330,f1319])).
fof(f29572,plain,(
  ( ! [X4,X2,X3] : (s(bool,'T_0') = s(bool,sK65('const.bool.BOUNDED_1'(s(bool,X3)),X2,bool)) | s(bool,X4) = s(bool,happ(s(fun(bool,bool),X2),s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f29561,f531])).
fof(f29561,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,sK65('const.bool.BOUNDED_1'(s(bool,X3)),X2,bool)) | s(bool,X4) = s(bool,happ(s(fun(bool,bool),X2),s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f2339,f1319])).
fof(f29554,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,X0)))) | s(bool,'T_0') = s(bool,sK65('const.bool.BOUNDED_1'(s(bool,X2)),X1,bool)) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f2339,f1319])).
fof(f29061,plain,(
  ( ! [X6,X4,X5,X3] : (sP6(X4,X3) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK111(X4,X5,X3)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) | sP5(X5,X3) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK110(X4,X5,X3)))),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) | sP7(X4,X5,X3) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK105(X4,X5,X3)))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK106(X4,X5,X3)))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK106(X4,X5,X3))))))) | sP4(X3,X4) | sP3(X3,X4) | sP2(X3,X5) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK102(X4,X5,X3)))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),sK103(X4,X5,X3)))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),sK104(X4,X5,X3))))))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK100(X4,X5,X3)))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK101(X4,X5,X3)))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK101(X4,X5,X3))))))) | s(bool,X6) = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK107(X4,X5,X3)))),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),sK108(X4,X5,X3)))))),s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),sK109(X4,X5,X3)))))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f29054,f531])).
fof(f29054,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'T_0')) | sP6(X4,X3) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK111(X4,X5,X3)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) | sP5(X5,X3) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK110(X4,X5,X3)))),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) | sP7(X4,X5,X3) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK105(X4,X5,X3)))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK106(X4,X5,X3)))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK106(X4,X5,X3))))))) | sP4(X3,X4) | sP3(X3,X4) | sP2(X3,X5) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK102(X4,X5,X3)))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),sK103(X4,X5,X3)))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),sK104(X4,X5,X3))))))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK100(X4,X5,X3)))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK101(X4,X5,X3)))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK101(X4,X5,X3))))))) | s(bool,X6) = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK107(X4,X5,X3)))),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),sK108(X4,X5,X3)))))),s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),sK109(X4,X5,X3)))))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f674,f1319])).
fof(f29042,plain,(
  ( ! [X6,X4,X5,X3] : (sP6(X4,X3) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK111(X4,X5,X3)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) | sP5(X5,X3) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK110(X4,X5,X3)))),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK107(X4,X5,X3)))),s('type.list.list'('type.modSem.v'),sK108(X4,X5,X3)))),s('type.list.list'('type.conSem.v'),sK109(X4,X5,X3))))) | sP7(X4,X5,X3) | sP4(X3,X4) | sP3(X3,X4) | sP2(X3,X5) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK102(X4,X5,X3)))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),sK103(X4,X5,X3)))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),sK104(X4,X5,X3))))))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK100(X4,X5,X3)))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK101(X4,X5,X3)))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK101(X4,X5,X3))))))) | s(bool,X6) = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK105(X4,X5,X3)))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK106(X4,X5,X3)))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK106(X4,X5,X3)))))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f29035,f531])).
fof(f29035,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'T_0')) | sP6(X4,X3) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK111(X4,X5,X3)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) | sP5(X5,X3) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK110(X4,X5,X3)))),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK107(X4,X5,X3)))),s('type.list.list'('type.modSem.v'),sK108(X4,X5,X3)))),s('type.list.list'('type.conSem.v'),sK109(X4,X5,X3))))) | sP7(X4,X5,X3) | sP4(X3,X4) | sP3(X3,X4) | sP2(X3,X5) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK102(X4,X5,X3)))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),sK103(X4,X5,X3)))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),sK104(X4,X5,X3))))))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK100(X4,X5,X3)))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK101(X4,X5,X3)))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK101(X4,X5,X3))))))) | s(bool,X6) = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK105(X4,X5,X3)))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK106(X4,X5,X3)))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK106(X4,X5,X3)))))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f672,f1319])).
fof(f29023,plain,(
  ( ! [X6,X4,X5,X3] : (sP6(X4,X3) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK111(X4,X5,X3)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) | sP5(X5,X3) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK110(X4,X5,X3)))),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) | sP7(X4,X5,X3) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK105(X4,X5,X3)))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK106(X4,X5,X3)))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK106(X4,X5,X3))))))) | sP4(X3,X4) | sP3(X3,X4) | sP2(X3,X5) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK102(X4,X5,X3)))),s('type.list.list'('type.modSem.v'),sK103(X4,X5,X3)))),s('type.list.list'('type.conSem.v'),sK104(X4,X5,X3))))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK100(X4,X5,X3)))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK101(X4,X5,X3)))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK101(X4,X5,X3))))))) | s(bool,X6) = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK107(X4,X5,X3)))),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),sK108(X4,X5,X3)))))),s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),sK109(X4,X5,X3)))))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f29016,f531])).
fof(f29016,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'T_0')) | sP6(X4,X3) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK111(X4,X5,X3)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) | sP5(X5,X3) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK110(X4,X5,X3)))),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) | sP7(X4,X5,X3) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK105(X4,X5,X3)))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK106(X4,X5,X3)))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK106(X4,X5,X3))))))) | sP4(X3,X4) | sP3(X3,X4) | sP2(X3,X5) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK102(X4,X5,X3)))),s('type.list.list'('type.modSem.v'),sK103(X4,X5,X3)))),s('type.list.list'('type.conSem.v'),sK104(X4,X5,X3))))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK100(X4,X5,X3)))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK101(X4,X5,X3)))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK101(X4,X5,X3))))))) | s(bool,X6) = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK107(X4,X5,X3)))),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),sK108(X4,X5,X3)))))),s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),sK109(X4,X5,X3)))))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f673,f1319])).
fof(f29007,plain,(
  ( ! [X6,X4,X5,X3] : (sP6(X4,X3) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK111(X4,X5,X3)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) | sP5(X5,X3) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK110(X4,X5,X3)))),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK107(X4,X5,X3)))),s('type.list.list'('type.modSem.v'),sK108(X4,X5,X3)))),s('type.list.list'('type.conSem.v'),sK109(X4,X5,X3))))) | sP7(X4,X5,X3) | sP4(X3,X4) | sP3(X3,X4) | sP2(X3,X5) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK102(X4,X5,X3)))),s('type.list.list'('type.modSem.v'),sK103(X4,X5,X3)))),s('type.list.list'('type.conSem.v'),sK104(X4,X5,X3))))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK100(X4,X5,X3)))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK101(X4,X5,X3)))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK101(X4,X5,X3))))))) | s(bool,X6) = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK105(X4,X5,X3)))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK106(X4,X5,X3)))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK106(X4,X5,X3)))))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f29000,f531])).
fof(f29000,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'T_0')) | sP6(X4,X3) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK111(X4,X5,X3)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) | sP5(X5,X3) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK110(X4,X5,X3)))),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK107(X4,X5,X3)))),s('type.list.list'('type.modSem.v'),sK108(X4,X5,X3)))),s('type.list.list'('type.conSem.v'),sK109(X4,X5,X3))))) | sP7(X4,X5,X3) | sP4(X3,X4) | sP3(X3,X4) | sP2(X3,X5) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK102(X4,X5,X3)))),s('type.list.list'('type.modSem.v'),sK103(X4,X5,X3)))),s('type.list.list'('type.conSem.v'),sK104(X4,X5,X3))))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK100(X4,X5,X3)))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK101(X4,X5,X3)))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK101(X4,X5,X3))))))) | s(bool,X6) = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK105(X4,X5,X3)))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK106(X4,X5,X3)))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK106(X4,X5,X3)))))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f671,f1319])).
fof(f28989,plain,(
  ( ! [X6,X12,X10,X8,X7,X11,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X9),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))) | sP9(X9,X10) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X9),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK156(X9,X11,X10)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) | sP8(X11,X10) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK155(X9,X11,X10)))),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) | sP14(X10,X11) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK153(X9,X11,X10)))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK154(X9,X11,X10)))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK154(X9,X11,X10))))))) | sP12(X10,X9) | sP11(X10,X9) | sP10(X10,X11) | sP13(X10,X11) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK151(X9,X11,X10)))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK152(X9,X11,X10)))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK152(X9,X11,X10))))))) | s(bool,X12) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))) | s(bool,'T_0') = s(bool,X12)) )),
  inference(subsumption_resolution,[],[f28982,f531])).
fof(f28982,plain,(
  ( ! [X6,X12,X10,X8,X7,X11,X9] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X9),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))) | sP9(X9,X10) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X9),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK156(X9,X11,X10)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) | sP8(X11,X10) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK155(X9,X11,X10)))),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) | sP14(X10,X11) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK153(X9,X11,X10)))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK154(X9,X11,X10)))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK154(X9,X11,X10))))))) | sP12(X10,X9) | sP11(X10,X9) | sP10(X10,X11) | sP13(X10,X11) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK151(X9,X11,X10)))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK152(X9,X11,X10)))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK152(X9,X11,X10))))))) | s(bool,X12) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))) | s(bool,'T_0') = s(bool,X12)) )),
  inference(superposition,[],[f705,f1319])).
fof(f28961,plain,(
  ( ! [X6,X12,X10,X8,X7,X11,X9] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9),s('type.list.list'('type.modSem.v'),X10),s('type.list.list'('type.conSem.v'),X11)))) | sP9(X7,X6) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X7),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK156(X7,X8,X6)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) | sP8(X8,X6) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X8),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK155(X7,X8,X6)))),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) | sP14(X6,X8) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X8),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s('type.list.list'('type.modSem.v'),X10))),s('type.list.list'('type.conSem.v'),X11)))) | sP12(X6,X7) | sP11(X6,X7) | sP10(X6,X8) | sP13(X6,X8) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK151(X7,X8,X6)))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK152(X7,X8,X6)))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK152(X7,X8,X6))))))) | s(bool,X12) = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK153(X7,X8,X6)))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK154(X7,X8,X6)))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK154(X7,X8,X6)))))) | s(bool,'T_0') = s(bool,X12)) )),
  inference(subsumption_resolution,[],[f28954,f531])).
fof(f28954,plain,(
  ( ! [X6,X12,X10,X8,X7,X11,X9] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9),s('type.list.list'('type.modSem.v'),X10),s('type.list.list'('type.conSem.v'),X11)))) | sP9(X7,X6) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X7),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK156(X7,X8,X6)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) | sP8(X8,X6) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X8),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK155(X7,X8,X6)))),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) | sP14(X6,X8) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X8),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s('type.list.list'('type.modSem.v'),X10))),s('type.list.list'('type.conSem.v'),X11)))) | sP12(X6,X7) | sP11(X6,X7) | sP10(X6,X8) | sP13(X6,X8) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK151(X7,X8,X6)))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK152(X7,X8,X6)))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK152(X7,X8,X6))))))) | s(bool,X12) = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK153(X7,X8,X6)))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK154(X7,X8,X6)))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK154(X7,X8,X6)))))) | s(bool,'T_0') = s(bool,X12)) )),
  inference(superposition,[],[f704,f1319])).
fof(f28938,plain,(
  ( ! [X6,X12,X10,X8,X7,X11,X9] : (~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9),s('type.modSem.v',X10),s('type.conSem.v',X11)))) | sP9(X7,X6) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X7),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK156(X7,X8,X6)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) | sP8(X8,X6) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X8),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK155(X7,X8,X6)))),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) | sP14(X6,X8) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s('type.modSem.v',X10))),s('type.conSem.v',X11)))) | sP12(X6,X7) | sP11(X6,X7) | sP10(X6,X8) | sP13(X6,X8) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK151(X7,X8,X6)))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK152(X7,X8,X6)))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK152(X7,X8,X6))))))) | s(bool,X12) = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK153(X7,X8,X6)))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK154(X7,X8,X6)))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK154(X7,X8,X6)))))) | s(bool,'T_0') = s(bool,X12)) )),
  inference(subsumption_resolution,[],[f28931,f531])).
fof(f28931,plain,(
  ( ! [X6,X12,X10,X8,X7,X11,X9] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9),s('type.modSem.v',X10),s('type.conSem.v',X11)))) | sP9(X7,X6) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X7),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK156(X7,X8,X6)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) | sP8(X8,X6) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X8),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK155(X7,X8,X6)))),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) | sP14(X6,X8) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s('type.modSem.v',X10))),s('type.conSem.v',X11)))) | sP12(X6,X7) | sP11(X6,X7) | sP10(X6,X8) | sP13(X6,X8) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK151(X7,X8,X6)))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK152(X7,X8,X6)))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK152(X7,X8,X6))))))) | s(bool,X12) = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK153(X7,X8,X6)))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK154(X7,X8,X6)))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK154(X7,X8,X6)))))) | s(bool,'T_0') = s(bool,X12)) )),
  inference(superposition,[],[f703,f1319])).
fof(f28905,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s('type.conSem.v',X7) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X8))),s('type.list.list'('type.string.char'),X9))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6)))) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3)))) | sP34(X3,X4,X7,'const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X8),s('type.list.list'('type.string.char'),X9)))) )),
  inference(equality_resolution,[],[f891])).
fof(f28895,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s('type.conSem.v',X7) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X8))),s('type.list.list'('type.string.char'),X9))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6)))) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3)))) | sP26(X3,X4,X7,'const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X8),s('type.list.list'('type.string.char'),X9)))) )),
  inference(equality_resolution,[],[f825])).
fof(f28884,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s('type.conSem.v',X7) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X8))),s('type.list.list'('type.string.char'),X9))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6)))) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3)))) | sP17(X3,X4,X7,'const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X8),s('type.list.list'('type.string.char'),X9)))) )),
  inference(equality_resolution,[],[f750])).
fof(f28872,plain,(
  ( ! [X6,X12,X10,X8,X7,X11,X9] : (~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X9),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK294(X9,X10,X11,X8,X7,X6)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK295(X9,X10,X11,X8,X7,X6)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK296(X9,X10,X11,X8,X7,X6))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK291(X9,X10,X11,X8,X7,X6)))),s('type.list.list'('type.modSem.v'),sK292(X9,X10,X11,X8,X7,X6)))),s('type.list.list'('type.conSem.v'),sK293(X9,X10,X11,X8,X7,X6))))) | sP39(X11,X10,X9) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X9),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))) | s(bool,X12) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))) | s(bool,'T_0') = s(bool,X12)) )),
  inference(subsumption_resolution,[],[f28865,f531])).
fof(f28865,plain,(
  ( ! [X6,X12,X10,X8,X7,X11,X9] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X9),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK294(X9,X10,X11,X8,X7,X6)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK295(X9,X10,X11,X8,X7,X6)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK296(X9,X10,X11,X8,X7,X6))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK291(X9,X10,X11,X8,X7,X6)))),s('type.list.list'('type.modSem.v'),sK292(X9,X10,X11,X8,X7,X6)))),s('type.list.list'('type.conSem.v'),sK293(X9,X10,X11,X8,X7,X6))))) | sP39(X11,X10,X9) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X9),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))) | s(bool,X12) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))) | s(bool,'T_0') = s(bool,X12)) )),
  inference(superposition,[],[f905,f1319])).
fof(f28853,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s('type.conSem.v',X7) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6),s('type.list.list'('type.string.char'),X8),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X2),s('type.modLang.exp',X9))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6)))) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3)))) | sP33(X3,X4,X7,'const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X5))),s('type.list.list'('type.string.char'),X8),s('type.modLang.exp',X9)))) )),
  inference(equality_resolution,[],[f896])).
fof(f28842,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s('type.conSem.v',X7) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6),s('type.list.list'('type.string.char'),X8),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X2),s('type.modLang.exp',X9))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6)))) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3)))) | sP25(X3,X4,X7,'const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X5))),s('type.list.list'('type.string.char'),X8),s('type.modLang.exp',X9)))) )),
  inference(equality_resolution,[],[f830])).
fof(f28834,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s('type.conSem.v',X7) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6),s('type.list.list'('type.string.char'),X8),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X2),s('type.modLang.exp',X9))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6)))) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3)))) | sP16(X3,X4,X7,'const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X5))),s('type.list.list'('type.string.char'),X8),s('type.modLang.exp',X9)))) )),
  inference(equality_resolution,[],[f755])).
fof(f28745,plain,(
  ( ! [X6,X12,X10,X8,X7,X11,X9] : (~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X7),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK247(X7,X6,X8,X9,X10,X11)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK248(X7,X6,X8,X9,X10,X11)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK249(X7,X6,X8,X9,X10,X11))))) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X11))),s('type.list.list'('type.modSem.v'),X10))),s('type.list.list'('type.conSem.v'),X9)))) | sP31(X8,X6,X7) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X11),s('type.list.list'('type.modSem.v'),X10),s('type.list.list'('type.conSem.v'),X9)))) | s(bool,X12) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK244(X7,X6,X8,X9,X10,X11)))),s('type.list.list'('type.modSem.v'),sK245(X7,X6,X8,X9,X10,X11)))),s('type.list.list'('type.conSem.v'),sK246(X7,X6,X8,X9,X10,X11)))) | s(bool,'T_0') = s(bool,X12)) )),
  inference(subsumption_resolution,[],[f28738,f531])).
fof(f28738,plain,(
  ( ! [X6,X12,X10,X8,X7,X11,X9] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X7),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK247(X7,X6,X8,X9,X10,X11)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK248(X7,X6,X8,X9,X10,X11)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK249(X7,X6,X8,X9,X10,X11))))) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X11))),s('type.list.list'('type.modSem.v'),X10))),s('type.list.list'('type.conSem.v'),X9)))) | sP31(X8,X6,X7) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X11),s('type.list.list'('type.modSem.v'),X10),s('type.list.list'('type.conSem.v'),X9)))) | s(bool,X12) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK244(X7,X6,X8,X9,X10,X11)))),s('type.list.list'('type.modSem.v'),sK245(X7,X6,X8,X9,X10,X11)))),s('type.list.list'('type.conSem.v'),sK246(X7,X6,X8,X9,X10,X11)))) | s(bool,'T_0') = s(bool,X12)) )),
  inference(superposition,[],[f839,f1319])).
fof(f28704,plain,(
  ( ! [X6,X12,X10,X8,X7,X11,X9] : (~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X7),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK197(X7,X6,X8,X9,X10,X11)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK198(X7,X6,X8,X9,X10,X11)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK199(X7,X6,X8,X9,X10,X11))))) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X8),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X11))),s('type.modSem.v',X10))),s('type.conSem.v',X9)))) | sP22(X8,X6,X7) | ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X11),s('type.modSem.v',X10),s('type.conSem.v',X9)))) | s(bool,X12) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK194(X7,X6,X8,X9,X10,X11)))),s('type.list.list'('type.modSem.v'),sK195(X7,X6,X8,X9,X10,X11)))),s('type.list.list'('type.conSem.v'),sK196(X7,X6,X8,X9,X10,X11)))) | s(bool,'T_0') = s(bool,X12)) )),
  inference(subsumption_resolution,[],[f28697,f531])).
fof(f28697,plain,(
  ( ! [X6,X12,X10,X8,X7,X11,X9] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X7),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK197(X7,X6,X8,X9,X10,X11)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK198(X7,X6,X8,X9,X10,X11)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK199(X7,X6,X8,X9,X10,X11))))) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X8),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X11))),s('type.modSem.v',X10))),s('type.conSem.v',X9)))) | sP22(X8,X6,X7) | ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X11),s('type.modSem.v',X10),s('type.conSem.v',X9)))) | s(bool,X12) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK194(X7,X6,X8,X9,X10,X11)))),s('type.list.list'('type.modSem.v'),sK195(X7,X6,X8,X9,X10,X11)))),s('type.list.list'('type.conSem.v'),sK196(X7,X6,X8,X9,X10,X11)))) | s(bool,'T_0') = s(bool,X12)) )),
  inference(superposition,[],[f764,f1319])).
fof(f28563,plain,(
  ( ! [X6,X12,X10,X8,X7,X11,X9] : (~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X9),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK294(X9,X10,X11,X8,X7,X6)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK295(X9,X10,X11,X8,X7,X6)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK296(X9,X10,X11,X8,X7,X6))))) | sP37(X10,sK291(X9,X10,X11,X8,X7,X6),X11,sK293(X9,X10,X11,X8,X7,X6),sK292(X9,X10,X11,X8,X7,X6)) | sP39(X11,X10,X9) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X9),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))) | s(bool,X12) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))) | s(bool,'T_0') = s(bool,X12)) )),
  inference(subsumption_resolution,[],[f28556,f531])).
fof(f28556,plain,(
  ( ! [X6,X12,X10,X8,X7,X11,X9] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X9),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK294(X9,X10,X11,X8,X7,X6)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK295(X9,X10,X11,X8,X7,X6)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK296(X9,X10,X11,X8,X7,X6))))) | sP37(X10,sK291(X9,X10,X11,X8,X7,X6),X11,sK293(X9,X10,X11,X8,X7,X6),sK292(X9,X10,X11,X8,X7,X6)) | sP39(X11,X10,X9) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X9),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))) | s(bool,X12) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))) | s(bool,'T_0') = s(bool,X12)) )),
  inference(superposition,[],[f904,f1319])).
fof(f28516,plain,(
  ( ! [X6,X12,X10,X8,X7,X11,X9] : (sP38(X9,sK294(X10,X11,X9,X8,X7,X6),X10,sK296(X10,X11,X9,X8,X7,X6),sK295(X10,X11,X9,X8,X7,X6)) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK291(X10,X11,X9,X8,X7,X6)))),s('type.list.list'('type.modSem.v'),sK292(X10,X11,X9,X8,X7,X6)))),s('type.list.list'('type.conSem.v'),sK293(X10,X11,X9,X8,X7,X6))))) | sP39(X9,X11,X10) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))) | s(bool,X12) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))) | s(bool,'T_0') = s(bool,X12)) )),
  inference(subsumption_resolution,[],[f28509,f531])).
fof(f28509,plain,(
  ( ! [X6,X12,X10,X8,X7,X11,X9] : (~p(s(bool,'T_0')) | sP38(X9,sK294(X10,X11,X9,X8,X7,X6),X10,sK296(X10,X11,X9,X8,X7,X6),sK295(X10,X11,X9,X8,X7,X6)) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK291(X10,X11,X9,X8,X7,X6)))),s('type.list.list'('type.modSem.v'),sK292(X10,X11,X9,X8,X7,X6)))),s('type.list.list'('type.conSem.v'),sK293(X10,X11,X9,X8,X7,X6))))) | sP39(X9,X11,X10) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))) | s(bool,X12) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))) | s(bool,'T_0') = s(bool,X12)) )),
  inference(superposition,[],[f903,f1319])).
fof(f28472,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X8),s('type.conSem.v',X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6)))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X2))),s('type.conSem.v',X3)))) | sP38(X0,X1,X4,X7,'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X8),s('type.modSem.v',X2))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X5)))) )),
  inference(equality_resolution,[],[f868])).
fof(f28462,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X8),s('type.conSem.v',X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6)))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X2))),s('type.conSem.v',X3)))) | sP30(X0,X1,X4,X7,'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X8),s('type.modSem.v',X2))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X5)))) )),
  inference(equality_resolution,[],[f802])).
fof(f28438,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X8),s('type.conSem.v',X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6)))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X2))),s('type.conSem.v',X3)))) | sP21(X0,X1,X4,X7,'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X8),s('type.modSem.v',X2))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X5)))) )),
  inference(equality_resolution,[],[f727])).
fof(f28423,plain,(
  ( ! [X6,X12,X10,X8,X7,X11,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X7),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X11))),s('type.list.list'('type.modSem.v'),X10))),s('type.list.list'('type.conSem.v'),X9)))) | sP29(X7,sK244(X6,X7,X8,X9,X10,X11),X8,sK246(X6,X7,X8,X9,X10,X11),sK245(X6,X7,X8,X9,X10,X11)) | sP31(X8,X7,X6) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X11),s('type.list.list'('type.modSem.v'),X10),s('type.list.list'('type.conSem.v'),X9)))) | s(bool,X12) = s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK247(X6,X7,X8,X9,X10,X11)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK248(X6,X7,X8,X9,X10,X11)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK249(X6,X7,X8,X9,X10,X11)))) | s(bool,'T_0') = s(bool,X12)) )),
  inference(subsumption_resolution,[],[f28416,f531])).
fof(f28416,plain,(
  ( ! [X6,X12,X10,X8,X7,X11,X9] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X7),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X11))),s('type.list.list'('type.modSem.v'),X10))),s('type.list.list'('type.conSem.v'),X9)))) | sP29(X7,sK244(X6,X7,X8,X9,X10,X11),X8,sK246(X6,X7,X8,X9,X10,X11),sK245(X6,X7,X8,X9,X10,X11)) | sP31(X8,X7,X6) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X11),s('type.list.list'('type.modSem.v'),X10),s('type.list.list'('type.conSem.v'),X9)))) | s(bool,X12) = s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK247(X6,X7,X8,X9,X10,X11)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK248(X6,X7,X8,X9,X10,X11)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK249(X6,X7,X8,X9,X10,X11)))) | s(bool,'T_0') = s(bool,X12)) )),
  inference(superposition,[],[f838,f1319])).
fof(f28347,plain,(
  ( ! [X6,X12,X10,X8,X7,X11,X9] : (p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X8),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X11))),s('type.modSem.v',X10))),s('type.conSem.v',X9)))) | sP20(X7,sK194(X6,X7,X8,X9,X10,X11),X8,sK196(X6,X7,X8,X9,X10,X11),sK195(X6,X7,X8,X9,X10,X11)) | sP22(X8,X7,X6) | ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X11),s('type.modSem.v',X10),s('type.conSem.v',X9)))) | s(bool,X12) = s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK197(X6,X7,X8,X9,X10,X11)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK198(X6,X7,X8,X9,X10,X11)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK199(X6,X7,X8,X9,X10,X11)))) | s(bool,'T_0') = s(bool,X12)) )),
  inference(subsumption_resolution,[],[f28340,f531])).
fof(f28340,plain,(
  ( ! [X6,X12,X10,X8,X7,X11,X9] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X8),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X11))),s('type.modSem.v',X10))),s('type.conSem.v',X9)))) | sP20(X7,sK194(X6,X7,X8,X9,X10,X11),X8,sK196(X6,X7,X8,X9,X10,X11),sK195(X6,X7,X8,X9,X10,X11)) | sP22(X8,X7,X6) | ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X11),s('type.modSem.v',X10),s('type.conSem.v',X9)))) | s(bool,X12) = s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK197(X6,X7,X8,X9,X10,X11)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK198(X6,X7,X8,X9,X10,X11)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK199(X6,X7,X8,X9,X10,X11)))) | s(bool,'T_0') = s(bool,X12)) )),
  inference(superposition,[],[f763,f1319])).
fof(f28308,plain,(
  ( ! [X6,X12,X10,X8,X7,X11,X9] : (sP30(X8,sK247(X7,X6,X8,X9,X10,X11),X7,sK249(X7,X6,X8,X9,X10,X11),sK248(X7,X6,X8,X9,X10,X11)) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X11))),s('type.list.list'('type.modSem.v'),X10))),s('type.list.list'('type.conSem.v'),X9)))) | sP31(X8,X6,X7) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X11),s('type.list.list'('type.modSem.v'),X10),s('type.list.list'('type.conSem.v'),X9)))) | s(bool,X12) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK244(X7,X6,X8,X9,X10,X11)))),s('type.list.list'('type.modSem.v'),sK245(X7,X6,X8,X9,X10,X11)))),s('type.list.list'('type.conSem.v'),sK246(X7,X6,X8,X9,X10,X11)))) | s(bool,'T_0') = s(bool,X12)) )),
  inference(subsumption_resolution,[],[f28301,f531])).
fof(f28301,plain,(
  ( ! [X6,X12,X10,X8,X7,X11,X9] : (~p(s(bool,'T_0')) | sP30(X8,sK247(X7,X6,X8,X9,X10,X11),X7,sK249(X7,X6,X8,X9,X10,X11),sK248(X7,X6,X8,X9,X10,X11)) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X11))),s('type.list.list'('type.modSem.v'),X10))),s('type.list.list'('type.conSem.v'),X9)))) | sP31(X8,X6,X7) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X11),s('type.list.list'('type.modSem.v'),X10),s('type.list.list'('type.conSem.v'),X9)))) | s(bool,X12) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK244(X7,X6,X8,X9,X10,X11)))),s('type.list.list'('type.modSem.v'),sK245(X7,X6,X8,X9,X10,X11)))),s('type.list.list'('type.conSem.v'),sK246(X7,X6,X8,X9,X10,X11)))) | s(bool,'T_0') = s(bool,X12)) )),
  inference(superposition,[],[f837,f1319])).
fof(f28264,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X2) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X3) | s('type.list.list'('type.string.char'),X0) != s('type.list.list'('type.string.char'),X1) | s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X2),s('type.list.list'('type.string.char'),X0))) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X3),s('type.list.list'('type.string.char'),X1)))) )),
  inference(equality_resolution,[],[f1027])).
fof(f27392,plain,(
  ( ! [X6,X12,X10,X8,X7,X11,X9] : (sP21(X8,sK197(X7,X6,X8,X9,X10,X11),X7,sK199(X7,X6,X8,X9,X10,X11),sK198(X7,X6,X8,X9,X10,X11)) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X8),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X11))),s('type.modSem.v',X10))),s('type.conSem.v',X9)))) | sP22(X8,X6,X7) | ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X11),s('type.modSem.v',X10),s('type.conSem.v',X9)))) | s(bool,X12) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK194(X7,X6,X8,X9,X10,X11)))),s('type.list.list'('type.modSem.v'),sK195(X7,X6,X8,X9,X10,X11)))),s('type.list.list'('type.conSem.v'),sK196(X7,X6,X8,X9,X10,X11)))) | s(bool,'T_0') = s(bool,X12)) )),
  inference(subsumption_resolution,[],[f27385,f531])).
fof(f27385,plain,(
  ( ! [X6,X12,X10,X8,X7,X11,X9] : (~p(s(bool,'T_0')) | sP21(X8,sK197(X7,X6,X8,X9,X10,X11),X7,sK199(X7,X6,X8,X9,X10,X11),sK198(X7,X6,X8,X9,X10,X11)) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X8),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X11))),s('type.modSem.v',X10))),s('type.conSem.v',X9)))) | sP22(X8,X6,X7) | ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X11),s('type.modSem.v',X10),s('type.conSem.v',X9)))) | s(bool,X12) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X6),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK194(X7,X6,X8,X9,X10,X11)))),s('type.list.list'('type.modSem.v'),sK195(X7,X6,X8,X9,X10,X11)))),s('type.list.list'('type.conSem.v'),sK196(X7,X6,X8,X9,X10,X11)))) | s(bool,'T_0') = s(bool,X12)) )),
  inference(superposition,[],[f762,f1319])).
fof(f27371,plain,(
  ( ! [X6,X12,X10,X8,X7,X11,X9] : (sP38(X9,sK294(X10,X11,X9,X8,X7,X6),X10,sK296(X10,X11,X9,X8,X7,X6),sK295(X10,X11,X9,X8,X7,X6)) | sP37(X11,sK291(X10,X11,X9,X8,X7,X6),X9,sK293(X10,X11,X9,X8,X7,X6),sK292(X10,X11,X9,X8,X7,X6)) | sP39(X9,X11,X10) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))) | s(bool,X12) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))) | s(bool,'T_0') = s(bool,X12)) )),
  inference(subsumption_resolution,[],[f27364,f531])).
fof(f27364,plain,(
  ( ! [X6,X12,X10,X8,X7,X11,X9] : (~p(s(bool,'T_0')) | sP38(X9,sK294(X10,X11,X9,X8,X7,X6),X10,sK296(X10,X11,X9,X8,X7,X6),sK295(X10,X11,X9,X8,X7,X6)) | sP37(X11,sK291(X10,X11,X9,X8,X7,X6),X9,sK293(X10,X11,X9,X8,X7,X6),sK292(X10,X11,X9,X8,X7,X6)) | sP39(X9,X11,X10) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))) | s(bool,X12) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))) | s(bool,'T_0') = s(bool,X12)) )),
  inference(superposition,[],[f902,f1319])).
fof(f27356,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0) != s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3) | s('type.list.list'('type.string.char'),X1) != s('type.list.list'('type.string.char'),X4) | s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0),s('type.list.list'('type.string.char'),X1),s('type.modLang.exp',X2))) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3),s('type.list.list'('type.string.char'),X4),s('type.modLang.exp',X2)))) )),
  inference(equality_resolution,[],[f1023])).
fof(f27339,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.list.list'('type.conSem.v'),X7) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X6),s('type.list.list'('type.conSem.v'),X3))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X5))),s('type.conSem.v',X6)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X2))),s('type.list.list'('type.conSem.v'),X3)))) | sP37(X0,X1,X4,X7,'const.list.CONS_2'(s('type.modSem.v',X5),s('type.list.list'('type.modSem.v'),X2)))) )),
  inference(equality_resolution,[],[f878])).
fof(f27326,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.list.list'('type.conSem.v'),X7) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X6),s('type.list.list'('type.conSem.v'),X3))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X5))),s('type.conSem.v',X6)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X2))),s('type.list.list'('type.conSem.v'),X3)))) | sP29(X0,X1,X4,X7,'const.list.CONS_2'(s('type.modSem.v',X5),s('type.list.list'('type.modSem.v'),X2)))) )),
  inference(equality_resolution,[],[f812])).
fof(f27301,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.list.list'('type.conSem.v'),X7) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X6),s('type.list.list'('type.conSem.v'),X3))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X5))),s('type.conSem.v',X6)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X2))),s('type.list.list'('type.conSem.v'),X3)))) | sP20(X0,X1,X4,X7,'const.list.CONS_2'(s('type.modSem.v',X5),s('type.list.list'('type.modSem.v'),X2)))) )),
  inference(equality_resolution,[],[f737])).
fof(f27259,plain,(
  ( ! [X26,X24,X23,X21,X27,X25,X22] : (sP30(X24,sK247(X25,X26,X24,X23,X22,X21),X25,sK249(X25,X26,X24,X23,X22,X21),sK248(X25,X26,X24,X23,X22,X21)) | sP29(X26,sK244(X25,X26,X24,X23,X22,X21),X24,sK246(X25,X26,X24,X23,X22,X21),sK245(X25,X26,X24,X23,X22,X21)) | sP31(X24,X26,X25) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X26),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X22))),s('type.list.list'('type.conSem.v'),X23)))) | s(bool,X27) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21),s('type.list.list'('type.modSem.v'),X22),s('type.list.list'('type.conSem.v'),X23))) | s(bool,'T_0') = s(bool,X27)) )),
  inference(subsumption_resolution,[],[f27248,f531])).
fof(f27248,plain,(
  ( ! [X26,X24,X23,X21,X27,X25,X22] : (~p(s(bool,'T_0')) | sP30(X24,sK247(X25,X26,X24,X23,X22,X21),X25,sK249(X25,X26,X24,X23,X22,X21),sK248(X25,X26,X24,X23,X22,X21)) | sP29(X26,sK244(X25,X26,X24,X23,X22,X21),X24,sK246(X25,X26,X24,X23,X22,X21),sK245(X25,X26,X24,X23,X22,X21)) | sP31(X24,X26,X25) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X26),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X22))),s('type.list.list'('type.conSem.v'),X23)))) | s(bool,X27) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21),s('type.list.list'('type.modSem.v'),X22),s('type.list.list'('type.conSem.v'),X23))) | s(bool,'T_0') = s(bool,X27)) )),
  inference(superposition,[],[f836,f1319])).
fof(f27241,plain,(
  ( ! [X6,X10,X8,X7,X5,X11,X9] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.list.list'('type.modSem.v'),X7),s('type.list.list'('type.conSem.v'),sK54)))) | sP30(X8,sK247(X9,X10,X8,sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X5,'type.list.list'('type.conSem.v')),X7,X6),X9,sK249(X9,X10,X8,sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X5,'type.list.list'('type.conSem.v')),X7,X6),sK248(X9,X10,X8,sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X5,'type.list.list'('type.conSem.v')),X7,X6)) | sP29(X10,sK244(X9,X10,X8,sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X5,'type.list.list'('type.conSem.v')),X7,X6),X8,sK246(X9,X10,X8,sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X5,'type.list.list'('type.conSem.v')),X7,X6),sK245(X9,X10,X8,sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X5,'type.list.list'('type.conSem.v')),X7,X6)) | sP31(X8,X10,X9) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.modSem.v'),X7))),s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X5,'type.list.list'('type.conSem.v')))))) | s(bool,X11) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X5),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X11)) ) | $spl4),
  inference(superposition,[],[f836,f9620])).
fof(f27255,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.modSem.v'),X1))),s('type.list.list'('type.conSem.v'),sK54)))) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),sK54)))) | sP30(X2,sK247(X3,X4,X2,'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X1,X0),X3,sK249(X3,X4,X2,'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X1,X0),sK248(X3,X4,X2,'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X1,X0)) | sP29(X4,sK244(X3,X4,X2,'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X1,X0),X2,sK246(X3,X4,X2,'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X1,X0),sK245(X3,X4,X2,'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X1,X0)) | sP31(X2,X4,X3)) ) | $spl4),
  inference(forward_demodulation,[],[f27240,f1043])).
fof(f27240,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),sK54)))) | sP30(X2,sK247(X3,X4,X2,'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X1,X0),X3,sK249(X3,X4,X2,'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X1,X0),sK248(X3,X4,X2,'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X1,X0)) | sP29(X4,sK244(X3,X4,X2,'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X1,X0),X2,sK246(X3,X4,X2,'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X1,X0),sK245(X3,X4,X2,'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X1,X0)) | sP31(X2,X4,X3) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.modSem.v'),X1))),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56))))))) ) | $spl4),
  inference(superposition,[],[f836,f1043])).
fof(f27227,plain,(
  ( ! [X14,X19,X17,X15,X13,X18,X16] : (sP21(X16,sK197(X17,X18,X16,X15,X14,X13),X17,sK199(X17,X18,X16,X15,X14,X13),sK198(X17,X18,X16,X15,X14,X13)) | sP20(X18,sK194(X17,X18,X16,X15,X14,X13),X16,sK196(X17,X18,X16,X15,X14,X13),sK195(X17,X18,X16,X15,X14,X13)) | sP22(X16,X18,X17) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X16),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13))),s('type.modSem.v',X14))),s('type.conSem.v',X15)))) | s(bool,X19) = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13),s('type.modSem.v',X14),s('type.conSem.v',X15))) | s(bool,'T_0') = s(bool,X19)) )),
  inference(subsumption_resolution,[],[f27219,f531])).
fof(f27219,plain,(
  ( ! [X14,X19,X17,X15,X13,X18,X16] : (~p(s(bool,'T_0')) | sP21(X16,sK197(X17,X18,X16,X15,X14,X13),X17,sK199(X17,X18,X16,X15,X14,X13),sK198(X17,X18,X16,X15,X14,X13)) | sP20(X18,sK194(X17,X18,X16,X15,X14,X13),X16,sK196(X17,X18,X16,X15,X14,X13),sK195(X17,X18,X16,X15,X14,X13)) | sP22(X16,X18,X17) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X16),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13))),s('type.modSem.v',X14))),s('type.conSem.v',X15)))) | s(bool,X19) = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13),s('type.modSem.v',X14),s('type.conSem.v',X15))) | s(bool,'T_0') = s(bool,X19)) )),
  inference(superposition,[],[f761,f1319])).
fof(f26970,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),'const.list.NIL_0'),s('type.list.list'('type.string.char'),X1))) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp')),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X4))),s('type.list.list'('type.string.char'),X5)))) )),
  inference(unit_resulting_resolution,[],[f605,f1025])).
fof(f26871,plain,(
  ( ! [X6,X4,X5,X3] : (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3)))) | s(bool,X6) = s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),sK299(X3,X4,X5)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f26864,f531])).
fof(f26864,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'T_0')) | p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3)))) | s(bool,X6) = s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),sK299(X3,X4,X5)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f909,f1319])).
fof(f25110,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X1),s('type.list.list'('type.string.char'),'const.list.NIL_0'))) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X3),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char',X4),s('type.list.list'('type.string.char'),X5)))))) )),
  inference(unit_resulting_resolution,[],[f605,f1026])).
fof(f25011,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.conSem.v',X4) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X3))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X2))),s('type.list.list'('type.conSem.v'),X3)))) | sP35(X0,X1,X4,'const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X2)))) )),
  inference(equality_resolution,[],[f886])).
fof(f24958,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.conSem.v',X4) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X3))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X2))),s('type.list.list'('type.conSem.v'),X3)))) | sP27(X0,X1,X4,'const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X2)))) )),
  inference(equality_resolution,[],[f820])).
fof(f24930,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.conSem.v',X4) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X3))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X2))),s('type.list.list'('type.conSem.v'),X3)))) | sP18(X0,X1,X4,'const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X2)))) )),
  inference(equality_resolution,[],[f745])).
fof(f23337,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0),s('type.list.list'('type.string.char'),'const.list.NIL_0'),s('type.modLang.exp',X1))) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X2),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char',X3),s('type.list.list'('type.string.char'),X4))),s('type.modLang.exp',X5)))) )),
  inference(unit_resulting_resolution,[],[f605,f1021])).
fof(f23297,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.conSem.v',X4) != s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X3))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X2))),s('type.list.list'('type.conSem.v'),X3)))) | sP36(X0,X1,X4,'const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X2)))) )),
  inference(equality_resolution,[],[f882])).
fof(f23077,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.conSem.v',X4) != s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X3))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X2))),s('type.list.list'('type.conSem.v'),X3)))) | sP28(X0,X1,X4,'const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X2)))) )),
  inference(equality_resolution,[],[f816])).
fof(f23012,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.conSem.v',X4) != s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X3))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X2))),s('type.list.list'('type.conSem.v'),X3)))) | sP19(X0,X1,X4,'const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X2)))) )),
  inference(equality_resolution,[],[f741])).
fof(f22860,plain,(
  ( ! [X4,X2,X5,X3] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),sK251(sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X2,'type.list.list'('type.conSem.v')),X3,X4)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4))),s('type.list.list'('type.modSem.v'),X3))),s('type.list.list'('type.conSem.v'),sK54)))) | p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4),s('type.list.list'('type.modSem.v'),X3),s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X2,'type.list.list'('type.conSem.v')))))) | s(bool,X5) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X2),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X5)) ) | $spl4),
  inference(superposition,[],[f843,f9620])).
fof(f19481,plain,(
  ( ! [X0,X1] : (sP49('T_0','const.bool.BOUNDED_1'(s(bool,X0)),X1)) )),
  inference(unit_resulting_resolution,[],[f18176,f985])).
fof(f17710,plain,(
  ( ! [X35] : (s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X35),s('type.list.list'('type.conSem.v'),sK54))) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X35,'type.list.list'('type.conSem.v')))) ) | $spl4),
  inference(forward_demodulation,[],[f17709,f2947])).
fof(f17709,plain,(
  ( ! [X35,X34] : (s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X35),s('type.list.list'('type.conSem.v'),sK54))) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X34),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X35,'type.list.list'('type.conSem.v')))) ) | $spl4),
  inference(subsumption_resolution,[],[f17697,f1048])).
fof(f17697,plain,(
  ( ! [X35,X34] : (p(s(bool,'F_0')) | s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X35),s('type.list.list'('type.conSem.v'),sK54))) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X34),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X35,'type.list.list'('type.conSem.v')))) ) | $spl4),
  inference(superposition,[],[f17429,f2947])).
fof(f18176,plain,(
  ( ! [X0,X1] : (sP50('T_0','const.bool.BOUNDED_1'(s(bool,X0)),X1)) )),
  inference(unit_resulting_resolution,[],[f1102,f1102,f18061])).
fof(f19434,plain,(
  ( ! [X4,X2,X3] : (p(s(bool,happ(s(fun(bool,bool),X2),s(bool,sK65('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X2,bool))))) | s(bool,X4) = s(bool,happ(s(fun(bool,bool),X2),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X4)) ) | $spl4),
  inference(subsumption_resolution,[],[f19427,f531])).
fof(f19427,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),X2),s(bool,sK65('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X2,bool))))) | s(bool,X4) = s(bool,happ(s(fun(bool,bool),X2),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X4)) ) | $spl4),
  inference(superposition,[],[f4089,f1319])).
fof(f18593,plain,(
  ( ! [X10,X8,X7,X11,X9] : (s('type.conSem.v',X8) != s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),sK54))) | p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X10))),s('type.conSem.v',X8)))) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9),s('type.list.list'('type.modSem.v'),X10),s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X7,'type.list.list'('type.conSem.v')))))) | s(bool,X11) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X7),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X11)) ) | $spl4),
  inference(superposition,[],[f846,f9620])).
fof(f18061,plain,(
  ( ! [X80,X81,X79,X82] : (sP50(X80,'const.bool.BOUNDED_1'(s(bool,X79)),X81) | s(bool,X80) = s(bool,X82) | s(bool,'T_0') = s(bool,X82)) )),
  inference(subsumption_resolution,[],[f18035,f531])).
fof(f18035,plain,(
  ( ! [X80,X81,X79,X82] : (~p(s(bool,'T_0')) | sP50(X80,'const.bool.BOUNDED_1'(s(bool,X79)),X81) | s(bool,X80) = s(bool,X82) | s(bool,'T_0') = s(bool,X82)) )),
  inference(superposition,[],[f9585,f538])).
fof(f18055,plain,(
  ( ! [X2,X0,X1] : (sP50(X0,'T_0',X2) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) )),
  inference(duplicate_literal_removal,[],[f18054])).
fof(f18054,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) = s(bool,X1) | sP50(X0,'T_0',X2) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) )),
  inference(condensation,[],[f18053])).
fof(f18053,plain,(
  ( ! [X39,X41,X38,X42,X40] : (sP50(X39,'T_0',X40) | s(bool,X39) = s(bool,X41) | s(bool,'T_0') = s(bool,X41) | s(bool,X38) = s(bool,X42) | s(bool,'T_0') = s(bool,X42)) )),
  inference(subsumption_resolution,[],[f18025,f1535])).
fof(f18025,plain,(
  ( ! [X39,X41,X38,X42,X40] : (~p(s(bool,X38)) | sP50(X39,'T_0',X40) | s(bool,X39) = s(bool,X41) | s(bool,'T_0') = s(bool,X41) | s(bool,X38) = s(bool,X42) | s(bool,'T_0') = s(bool,X42)) )),
  inference(superposition,[],[f9585,f1319])).
fof(f18050,plain,(
  ( ! [X6,X4,X8,X7,X5] : (sP50(X5,X4,X6) | s(bool,X5) = s(bool,X7) | s(bool,'T_0') = s(bool,X7) | s(bool,X4) = s(bool,X8) | s(bool,'T_0') = s(bool,X8)) )),
  inference(subsumption_resolution,[],[f18018,f531])).
fof(f18018,plain,(
  ( ! [X6,X4,X8,X7,X5] : (~p(s(bool,'T_0')) | sP50(X5,X4,X6) | s(bool,X5) = s(bool,X7) | s(bool,'T_0') = s(bool,X7) | s(bool,X4) = s(bool,X8) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f9585,f1319])).
fof(f17360,plain,(
  ( ! [X699,X700,X702,X704,X701,X703] : (s(bool,X700) != s(bool,X701) | s(X702,X703) != s(X702,X704) | s('type.pair.prod'(bool,X702),'const.pair.,_2'(s(bool,X701),s(X702,X703))) = s('type.pair.prod'(bool,X702),'const.pair.,_2'(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X699),s('type.list.list'('type.conSem.v'),sK54))),s(X702,X704))) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X699,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X700)) ) | $spl4),
  inference(superposition,[],[f652,f9620])).
fof(f17356,plain,(
  ( ! [X677,X679,X675,X680,X676,X678] : (s('type.pair.prod'(X677,bool),'const.pair.,_2'(s(X677,X678),s(bool,X679))) != s('type.pair.prod'(X677,bool),'const.pair.,_2'(s(X677,X680),s(bool,X676))) | s(bool,X679) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X675),s('type.list.list'('type.conSem.v'),sK54))) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X675,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X676)) ) | $spl4),
  inference(superposition,[],[f651,f9620])).
fof(f17353,plain,(
  ( ! [X660,X662,X658,X661,X657,X659] : (s('type.pair.prod'(bool,X659),'const.pair.,_2'(s(bool,X658),s(X659,X662))) != s('type.pair.prod'(bool,X659),'const.pair.,_2'(s(bool,X660),s(X659,X661))) | s(bool,X660) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X657),s('type.list.list'('type.conSem.v'),sK54))) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X657,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X658)) ) | $spl4),
  inference(superposition,[],[f650,f9620])).
fof(f17348,plain,(
  ( ! [X633,X635,X631,X632,X634] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X632),s('type.list.list'(bool),X633))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X634),s('type.list.list'(bool),X635))) | s(bool,X634) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X631),s('type.list.list'('type.conSem.v'),sK54))) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X631,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X632)) ) | $spl4),
  inference(superposition,[],[f606,f9620])).
fof(f17346,plain,(
  ( ! [X625,X627,X626] : (~p(s(bool,happ(s(fun(bool,bool),X627),s(bool,X626)))) | p(s(bool,happ(s(fun(bool,bool),X627),s(bool,sK65(happ(s(fun('type.list.list'('type.conSem.v'),bool),X625),s('type.list.list'('type.conSem.v'),sK54)),X627,bool))))) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X625,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X626)) ) | $spl4),
  inference(superposition,[],[f604,f9620])).
fof(f17345,plain,(
  ( ! [X623,X624,X622] : (~p(s(bool,happ(s(fun(bool,bool),X624),s(bool,X623)))) | s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X622),s('type.list.list'('type.conSem.v'),sK54))) = s(bool,sK65(happ(s(fun('type.list.list'('type.conSem.v'),bool),X622),s('type.list.list'('type.conSem.v'),sK54)),X624,bool)) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X622,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X623)) ) | $spl4),
  inference(superposition,[],[f603,f9620])).
fof(f17344,plain,(
  ( ! [X621,X619,X620,X618] : (~p(s(bool,happ(s(fun(bool,bool),X620),s(bool,X619)))) | p(s(bool,happ(s(fun(bool,bool),X620),s(bool,X621)))) | s(bool,X621) != s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X618),s('type.list.list'('type.conSem.v'),sK54))) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X618,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X619)) ) | $spl4),
  inference(superposition,[],[f602,f9620])).
fof(f17198,plain,(
  ( ! [X182,X184,X183,X181] : (sP48('const.bool.BOUNDED_1'(s(bool,X182)),X183,X184) | ~sP47('const.bool.BOUNDED_1'(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X181),s('type.list.list'('type.conSem.v'),sK54)))),X183,X184) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X181,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X182)) ) | $spl4),
  inference(superposition,[],[f1299,f9620])).
fof(f17197,plain,(
  ( ! [X177,X180,X178,X179] : (sP50('const.bool.BOUNDED_1'(s(bool,X178)),X179,X180) | ~sP49('const.bool.BOUNDED_1'(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X177),s('type.list.list'('type.conSem.v'),sK54)))),X179,X180) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X177,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X178)) ) | $spl4),
  inference(superposition,[],[f1274,f9620])).
fof(f17429,plain,(
  ( ! [X0,X1] : (p(s(bool,X0)) | s(bool,X0) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X1),s('type.list.list'('type.conSem.v'),sK54))) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X1,'type.list.list'('type.conSem.v')))) ) | $spl4),
  inference(condensation,[],[f17428])).
fof(f17428,plain,(
  ( ! [X28,X26,X27] : (p(s(bool,X27)) | p(s(bool,X28)) | s(bool,X28) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X26),s('type.list.list'('type.conSem.v'),sK54))) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X26,'type.list.list'('type.conSem.v')))) ) | $spl4),
  inference(subsumption_resolution,[],[f17155,f547])).
fof(f17155,plain,(
  ( ! [X28,X26,X27] : (p(s(bool,X27)) | p(s(bool,X28)) | s(bool,X28) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X26),s('type.list.list'('type.conSem.v'),sK54))) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X26,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X27)) ) | $spl4),
  inference(superposition,[],[f609,f9620])).
fof(f17142,plain,(
  ( ! [X881,X878,X880,X879] : (s(X880,f(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X881),s('type.list.list'('type.conSem.v'),sK54))))) != s(X880,g(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X881),s('type.list.list'('type.conSem.v'),sK54))))) | s(fun(bool,X880),X878) = s(fun(bool,X880),X879) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X881,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,sK66(X878,X879,X880,bool))) ) | $spl4),
  inference(superposition,[],[f649,f9620])).
fof(f17141,plain,(
  ( ! [X874,X876,X875,X877] : (~p(s(bool,happ(s(fun(bool,bool),X874),s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X876),s('type.list.list'('type.conSem.v'),sK54)))))) | p(s(bool,X875)) | p(s(bool,happ(s(fun(bool,bool),X874),s(bool,X877)))) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X876,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,sK64(X874,X875,bool))) ) | $spl4),
  inference(superposition,[],[f601,f9620])).
fof(f17140,plain,(
  ( ! [X872,X870,X873,X871] : (~p(s(bool,happ(s(fun(bool,bool),X870),s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X872),s('type.list.list'('type.conSem.v'),sK54)))))) | p(s(bool,X871)) | p(s(bool,happ(s(fun(bool,bool),X870),s(bool,X873)))) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X872,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,sK63(X870,X871,bool))) ) | $spl4),
  inference(superposition,[],[f599,f9620])).
fof(f17139,plain,(
  ( ! [X866,X868,X867,X869] : (~p(s(bool,happ(s(fun(bool,bool),X867),s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X868),s('type.list.list'('type.conSem.v'),sK54)))))) | ~p(s(bool,X866)) | p(s(bool,happ(s(fun(bool,bool),X867),s(bool,X869)))) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X868,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,sK62(X866,X867,bool))) ) | $spl4),
  inference(superposition,[],[f596,f9620])).
fof(f17138,plain,(
  ( ! [X864,X863,X865,X862] : (~p(s(bool,happ(s(fun(bool,bool),X863),s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X864),s('type.list.list'('type.conSem.v'),sK54)))))) | ~p(s(bool,X862)) | p(s(bool,happ(s(fun(bool,bool),X863),s(bool,X865)))) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X864,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,sK61(X862,X863,bool))) ) | $spl4),
  inference(superposition,[],[f594,f9620])).
fof(f17137,plain,(
  ( ! [X860,X859,X861,X858] : (~p(s(bool,happ(s(fun(bool,bool),X858),s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X860),s('type.list.list'('type.conSem.v'),sK54)))))) | p(s(bool,happ(s(fun(bool,bool),X858),s(bool,X861)))) | ~p(s(bool,X859)) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X860,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,sK60(X858,X859,bool))) ) | $spl4),
  inference(superposition,[],[f593,f9620])).
fof(f17136,plain,(
  ( ! [X854,X857,X855,X856] : (~p(s(bool,happ(s(fun(bool,bool),X854),s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X856),s('type.list.list'('type.conSem.v'),sK54)))))) | p(s(bool,happ(s(fun(bool,bool),X854),s(bool,X857)))) | ~p(s(bool,X855)) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X856,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,sK59(X854,X855,bool))) ) | $spl4),
  inference(superposition,[],[f591,f9620])).
fof(f17135,plain,(
  ( ! [X850,X852,X851,X853] : (~p(s(bool,happ(s(fun(bool,bool),X851),s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X852),s('type.list.list'('type.conSem.v'),sK54)))))) | ~p(s(bool,happ(s(fun(bool,bool),X850),s(bool,X853)))) | p(s(bool,happ(s(fun(bool,bool),X851),s(bool,sK58(X850,X851,bool))))) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X852,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,sK57(X850,X851,bool))) ) | $spl4),
  inference(superposition,[],[f587,f9620])).
fof(f17134,plain,(
  ( ! [X848,X847,X849,X846] : (s(bool,f(s(X846,sK66(X847,X848,bool,X846)))) != s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X849),s('type.list.list'('type.conSem.v'),sK54))) | s(fun(X846,bool),X847) = s(fun(X846,bool),X848) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X849,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,g(s(X846,sK66(X847,X848,bool,X846))))) ) | $spl4),
  inference(superposition,[],[f649,f9620])).
fof(f17124,plain,(
  ( ! [X798,X802,X800,X799,X803,X801] : (s(bool,X800) != s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X799),s('type.list.list'('type.conSem.v'),sK54))) | s(X801,X802) != s(X801,X803) | s('type.pair.prod'(bool,X801),'const.pair.,_2'(s(bool,X798),s(X801,X803))) = s('type.pair.prod'(bool,X801),'const.pair.,_2'(s(bool,X800),s(X801,X802))) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X799,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X798)) ) | $spl4),
  inference(superposition,[],[f652,f9620])).
fof(f17120,plain,(
  ( ! [X779,X777,X775,X778,X776,X774] : (s('type.pair.prod'(X776,bool),'const.pair.,_2'(s(X776,X777),s(bool,X778))) != s('type.pair.prod'(X776,bool),'const.pair.,_2'(s(X776,X779),s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X775),s('type.list.list'('type.conSem.v'),sK54))))) | s(bool,X774) = s(bool,X778) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X775,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X774)) ) | $spl4),
  inference(superposition,[],[f651,f9620])).
fof(f17117,plain,(
  ( ! [X761,X757,X759,X760,X756,X758] : (s('type.pair.prod'(bool,X758),'const.pair.,_2'(s(bool,X759),s(X758,X760))) != s('type.pair.prod'(bool,X758),'const.pair.,_2'(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X757),s('type.list.list'('type.conSem.v'),sK54))),s(X758,X761))) | s(bool,X756) = s(bool,X759) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X757,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X756)) ) | $spl4),
  inference(superposition,[],[f650,f9620])).
fof(f17112,plain,(
  ( ! [X732,X734,X730,X733,X731] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X733),s('type.list.list'(bool),X734))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X731),s('type.list.list'('type.conSem.v'),sK54))),s('type.list.list'(bool),X732))) | s(bool,X730) = s(bool,X733) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X731,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X730)) ) | $spl4),
  inference(superposition,[],[f606,f9620])).
fof(f17110,plain,(
  ( ! [X724,X726,X725] : (~p(s(bool,happ(s(fun(bool,bool),X726),s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X725),s('type.list.list'('type.conSem.v'),sK54)))))) | p(s(bool,happ(s(fun(bool,bool),X726),s(bool,sK65(X724,X726,bool))))) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X725,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X724)) ) | $spl4),
  inference(superposition,[],[f604,f9620])).
fof(f17109,plain,(
  ( ! [X722,X721,X723] : (~p(s(bool,happ(s(fun(bool,bool),X723),s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X722),s('type.list.list'('type.conSem.v'),sK54)))))) | s(bool,X721) = s(bool,sK65(X721,X723,bool)) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X722,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X721)) ) | $spl4),
  inference(superposition,[],[f603,f9620])).
fof(f17108,plain,(
  ( ! [X720,X718,X717,X719] : (~p(s(bool,happ(s(fun(bool,bool),X719),s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X718),s('type.list.list'('type.conSem.v'),sK54)))))) | p(s(bool,happ(s(fun(bool,bool),X719),s(bool,X720)))) | s(bool,X717) != s(bool,X720) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X718,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X717)) ) | $spl4),
  inference(superposition,[],[f602,f9620])).
fof(f16932,plain,(
  ( ! [X167,X169,X170,X168] : (sP48('const.bool.BOUNDED_1'(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X168),s('type.list.list'('type.conSem.v'),sK54)))),X169,X170) | ~sP47('const.bool.BOUNDED_1'(s(bool,X167)),X169,X170) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X168,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X167)) ) | $spl4),
  inference(superposition,[],[f1299,f9620])).
fof(f16931,plain,(
  ( ! [X165,X163,X166,X164] : (sP50('const.bool.BOUNDED_1'(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X164),s('type.list.list'('type.conSem.v'),sK54)))),X165,X166) | ~sP49('const.bool.BOUNDED_1'(s(bool,X163)),X165,X166) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X164,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X163)) ) | $spl4),
  inference(superposition,[],[f1274,f9620])).
fof(f16873,plain,(
  ( ! [X158,X156,X154,X159,X157,X155] : (s('type.list.list'('type.conSem.v'),sK54) != s('type.list.list'('type.conSem.v'),X155) | s(X156,X157) != s(X156,X158) | s('type.pair.prod'('type.list.list'('type.conSem.v'),X156),'const.pair.,_2'(s('type.list.list'('type.conSem.v'),X155),s(X156,X157))) = s('type.pair.prod'('type.list.list'('type.conSem.v'),X156),'const.pair.,_2'(s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X154,'type.list.list'('type.conSem.v'))),s(X156,X158))) | s(bool,X159) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X154),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X159)) ) | $spl4),
  inference(superposition,[],[f652,f9620])).
fof(f16869,plain,(
  ( ! [X134,X132,X130,X135,X133,X131] : (s('type.pair.prod'(X131,'type.list.list'('type.conSem.v')),'const.pair.,_2'(s(X131,X134),s('type.list.list'('type.conSem.v'),sK54))) != s('type.pair.prod'(X131,'type.list.list'('type.conSem.v')),'const.pair.,_2'(s(X131,X132),s('type.list.list'('type.conSem.v'),X133))) | s('type.list.list'('type.conSem.v'),X133) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X130,'type.list.list'('type.conSem.v'))) | s(bool,X135) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X130),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X135)) ) | $spl4),
  inference(superposition,[],[f651,f9620])).
fof(f16866,plain,(
  ( ! [X116,X114,X112,X117,X115,X113] : (s('type.pair.prod'('type.list.list'('type.conSem.v'),X113),'const.pair.,_2'(s('type.list.list'('type.conSem.v'),sK54),s(X113,X116))) != s('type.pair.prod'('type.list.list'('type.conSem.v'),X113),'const.pair.,_2'(s('type.list.list'('type.conSem.v'),X114),s(X113,X115))) | s('type.list.list'('type.conSem.v'),X114) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X112,'type.list.list'('type.conSem.v'))) | s(bool,X117) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X112),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X117)) ) | $spl4),
  inference(superposition,[],[f650,f9620])).
fof(f16861,plain,(
  ( ! [X90,X88,X87,X89,X86] : (s('type.list.list'('type.list.list'('type.conSem.v')),'const.list.CONS_2'(s('type.list.list'('type.conSem.v'),sK54),s('type.list.list'('type.list.list'('type.conSem.v')),X87))) != s('type.list.list'('type.list.list'('type.conSem.v')),'const.list.CONS_2'(s('type.list.list'('type.conSem.v'),X88),s('type.list.list'('type.list.list'('type.conSem.v')),X89))) | s('type.list.list'('type.conSem.v'),X88) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X86,'type.list.list'('type.conSem.v'))) | s(bool,X90) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X86),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X90)) ) | $spl4),
  inference(superposition,[],[f606,f9620])).
fof(f16859,plain,(
  ( ! [X80,X81,X82] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X81),s('type.list.list'('type.conSem.v'),sK54)))) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X81),s('type.list.list'('type.conSem.v'),sK65(sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X80,'type.list.list'('type.conSem.v')),X81,'type.list.list'('type.conSem.v')))))) | s(bool,X82) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X80),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X82)) ) | $spl4),
  inference(superposition,[],[f604,f9620])).
fof(f16858,plain,(
  ( ! [X78,X79,X77] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X78),s('type.list.list'('type.conSem.v'),sK54)))) | s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X77,'type.list.list'('type.conSem.v'))) = s('type.list.list'('type.conSem.v'),sK65(sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X77,'type.list.list'('type.conSem.v')),X78,'type.list.list'('type.conSem.v'))) | s(bool,X79) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X77),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X79)) ) | $spl4),
  inference(superposition,[],[f603,f9620])).
fof(f16857,plain,(
  ( ! [X76,X74,X75,X73] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X74),s('type.list.list'('type.conSem.v'),sK54)))) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X74),s('type.list.list'('type.conSem.v'),X75)))) | s('type.list.list'('type.conSem.v'),X75) != s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X73,'type.list.list'('type.conSem.v'))) | s(bool,X76) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X73),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X76)) ) | $spl4),
  inference(superposition,[],[f602,f9620])).
fof(f16854,plain,(
  ( ! [X61,X59,X62,X60,X63] : (s('type.list.list'('type.conSem.v'),sK54) != s('type.list.list'('type.conSem.v'),X60) | s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X62),s('type.list.list'('type.conSem.v'),X60))) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X61),s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X59,'type.list.list'('type.conSem.v'))))) | s('type.conSem.v',X61) != s('type.conSem.v',X62) | s(bool,X63) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X59),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X63)) ) | $spl4),
  inference(superposition,[],[f608,f9620])).
fof(f16852,plain,(
  ( ! [X52,X50,X53,X51,X49] : (s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X50),s('type.list.list'('type.conSem.v'),sK54))) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X51),s('type.list.list'('type.conSem.v'),X52))) | s('type.list.list'('type.conSem.v'),X52) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X49,'type.list.list'('type.conSem.v'))) | s(bool,X53) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X49),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X53)) ) | $spl4),
  inference(superposition,[],[f607,f9620])).
fof(f16841,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),X2),s('type.list.list'('type.conSem.v'),sK54)))) | sP23(X1,sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X0,'type.list.list'('type.conSem.v')),X2) | s(bool,X3) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X0),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X3)) ) | $spl4),
  inference(superposition,[],[f779,f9620])).
fof(f16741,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.pair.prod'(X0,'type.modSem.v'),'const.pair.,_2'(s(X0,X1),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))))) != s('type.pair.prod'(X0,'type.modSem.v'),'const.pair.,_2'(s(X0,X2),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X3),s('type.list.list'('type.modSem.v'),X4)))))))) )),
  inference(unit_resulting_resolution,[],[f2359,f651])).
fof(f16742,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.pair.prod'('type.modSem.v',X0),'const.pair.,_2'(s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))),s(X0,X1))) != s('type.pair.prod'('type.modSem.v',X0),'const.pair.,_2'(s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X2),s('type.list.list'('type.modSem.v'),X3))))),s(X0,X4)))) )),
  inference(unit_resulting_resolution,[],[f2359,f650])).
fof(f16743,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.modSem.v'),X0))) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X1),s('type.list.list'('type.modSem.v'),X2))))),s('type.list.list'('type.modSem.v'),X3)))) )),
  inference(unit_resulting_resolution,[],[f2359,f606])).
fof(f16701,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.list.list'('type.list.list'('type.conSem.v')),'const.list.CONS_2'(s('type.list.list'('type.conSem.v'),X0),s('type.list.list'('type.list.list'('type.conSem.v')),'const.list.CONS_2'(s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X1),s('type.list.list'('type.conSem.v'),sK54))),s('type.list.list'('type.list.list'('type.conSem.v')),X2))))) != s('type.list.list'('type.list.list'('type.conSem.v')),'const.list.CONS_2'(s('type.list.list'('type.conSem.v'),X3),s('type.list.list'('type.list.list'('type.conSem.v')),'const.list.CONS_2'(s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X4),s('type.list.list'('type.conSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.conSem.v')),X5)))))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f2871,f607])).
fof(f16702,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'(X0,'type.list.list'('type.list.list'('type.conSem.v'))),'const.pair.,_2'(s(X0,X1),s('type.list.list'('type.list.list'('type.conSem.v')),'const.list.CONS_2'(s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X2),s('type.list.list'('type.conSem.v'),sK54))),s('type.list.list'('type.list.list'('type.conSem.v')),X3))))) != s('type.pair.prod'(X0,'type.list.list'('type.list.list'('type.conSem.v'))),'const.pair.,_2'(s(X0,X4),s('type.list.list'('type.list.list'('type.conSem.v')),'const.list.CONS_2'(s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X5),s('type.list.list'('type.conSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.conSem.v')),X6)))))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f2871,f651])).
fof(f16703,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'('type.list.list'('type.list.list'('type.conSem.v')),X0),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.conSem.v')),'const.list.CONS_2'(s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X1),s('type.list.list'('type.conSem.v'),sK54))),s('type.list.list'('type.list.list'('type.conSem.v')),X2))),s(X0,X3))) != s('type.pair.prod'('type.list.list'('type.list.list'('type.conSem.v')),X0),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.conSem.v')),'const.list.CONS_2'(s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X4),s('type.list.list'('type.conSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.conSem.v')),X5))),s(X0,X6)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f2871,f650])).
fof(f16704,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.list.list'('type.list.list'('type.list.list'('type.conSem.v'))),'const.list.CONS_2'(s('type.list.list'('type.list.list'('type.conSem.v')),'const.list.CONS_2'(s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X0),s('type.list.list'('type.conSem.v'),sK54))),s('type.list.list'('type.list.list'('type.conSem.v')),X1))),s('type.list.list'('type.list.list'('type.list.list'('type.conSem.v'))),X2))) != s('type.list.list'('type.list.list'('type.list.list'('type.conSem.v'))),'const.list.CONS_2'(s('type.list.list'('type.list.list'('type.conSem.v')),'const.list.CONS_2'(s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X3),s('type.list.list'('type.conSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.conSem.v')),X4))),s('type.list.list'('type.list.list'('type.list.list'('type.conSem.v'))),X5)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f2871,f606])).
fof(f4089,plain,(
  ( ! [X194,X195] : (~p(s(bool,happ(s(fun(bool,bool),X195),s(bool,'F_0')))) | p(s(bool,happ(s(fun(bool,bool),X195),s(bool,sK65('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X194),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X195,bool)))))) ) | $spl4),
  inference(superposition,[],[f604,f2947])).
fof(f4157,plain,(
  ( ! [X192,X193] : (~p(s(bool,happ(s(fun(bool,bool),X193),s(bool,'F_0')))) | s(bool,'F_0') = s(bool,sK65('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X192),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X193,bool))) ) | $spl4),
  inference(forward_demodulation,[],[f4088,f2947])).
fof(f4088,plain,(
  ( ! [X192,X193] : (~p(s(bool,happ(s(fun(bool,bool),X193),s(bool,'F_0')))) | s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X192),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))) = s(bool,sK65('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X192),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X193,bool))) ) | $spl4),
  inference(superposition,[],[f603,f2947])).
fof(f6224,plain,(
  ( ! [X540,X538,X539] : (s(bool,'F_0') = s(bool,sK65('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X538),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X540,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X540),s(bool,X539)))) | s(bool,'T_0') = s(bool,X539)) ) | $spl4),
  inference(forward_demodulation,[],[f6108,f2947])).
fof(f6108,plain,(
  ( ! [X540,X538,X539] : (~p(s(bool,happ(s(fun(bool,bool),X540),s(bool,X539)))) | s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X538),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))) = s(bool,sK65('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X538),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X540,bool)) | s(bool,'T_0') = s(bool,X539)) ) | $spl4),
  inference(superposition,[],[f603,f5688])).
fof(f6109,plain,(
  ( ! [X542,X541,X543] : (~p(s(bool,happ(s(fun(bool,bool),X543),s(bool,X542)))) | p(s(bool,happ(s(fun(bool,bool),X543),s(bool,sK65('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X541),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X543,bool))))) | s(bool,'T_0') = s(bool,X542)) ) | $spl4),
  inference(superposition,[],[f604,f5688])).
fof(f9619,plain,(
  ( ! [X635,X634] : (p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X634),s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X634,'type.list.list'('type.conSem.v')))))) | s(bool,X635) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X634),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X635)) ) | $spl4),
  inference(subsumption_resolution,[],[f8239,f531])).
fof(f8239,plain,(
  ( ! [X635,X634] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X634),s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X634,'type.list.list'('type.conSem.v')))))) | s(bool,X635) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X634),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X635)) ) | $spl4),
  inference(superposition,[],[f2431,f1319])).
fof(f2431,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X0),s('type.list.list'('type.conSem.v'),sK54)))) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X0),s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X0,'type.list.list'('type.conSem.v'))))))) ) | $spl4),
  inference(superposition,[],[f604,f1043])).
fof(f2336,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X0),s('type.list.list'('type.conSem.v'),sK54)))) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X0,'type.list.list'('type.conSem.v')))) ) | $spl4),
  inference(forward_demodulation,[],[f2329,f1043])).
fof(f2329,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X0),s('type.list.list'('type.conSem.v'),sK54)))) | s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56))) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X0,'type.list.list'('type.conSem.v')))) ) | $spl4),
  inference(superposition,[],[f603,f1043])).
fof(f603,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | s(X0,X2) = s(X0,sK65(X2,X1,X0))) )),
  inference(cnf_transformation,[],[f323])).
fof(f323,plain,(
  ! [X0,X1,X2] : ((! [X4] : (s(X0,X2) != s(X0,X4) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | (s(X0,X2) = s(X0,sK65(X2,X1,X0)) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK65(X2,X1,X0))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK65])],[f322])).
fof(f322,plain,(
  ! [X0,X1,X2] : ((! [X4] : (s(X0,X2) != s(X0,X4) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | ? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))))))),
  inference(rectify,[],[f321])).
fof(f321,plain,(
  ! [X0,X1,X2] : ((! [X3] : (s(X0,X2) != s(X0,X3) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | ? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))))))),
  inference(nnf_transformation,[],[f116])).
fof(f116,plain,(
  ! [X0,X1,X2] : (? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) <=> p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))))),
  inference(flattening,[],[f115])).
fof(f115,plain,(
  ! [X0] : ! [X1,X2] : (? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) <=> p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))))),
  inference(rectify,[],[f54])).
fof(f54,axiom,(
  ! [X47] : ! [X49,X60] : (? [X23] : (s(X47,X23) = s(X47,X60) & p(s(bool,happ(s(fun(X47,bool),X49),s(X47,X23))))) <=> p(s(bool,happ(s(fun(X47,bool),X49),s(X47,X60)))))),
  file('thm.mod_to_conProof.v_rel_eqns|split|5','thm.bool.UNWIND_THM2')).
fof(f604,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK65(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f323])).
fof(f9607,plain,(
  ( ! [X584,X586,X585,X587] : (p(s(bool,happ(s(fun(X584,bool),X585),s(X584,sK65(X586,X585,X584))))) | s(bool,X587) = s(bool,happ(s(fun(X584,bool),X585),s(X584,X586))) | s(bool,'T_0') = s(bool,X587)) )),
  inference(subsumption_resolution,[],[f8227,f531])).
fof(f8227,plain,(
  ( ! [X584,X586,X585,X587] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X584,bool),X585),s(X584,sK65(X586,X585,X584))))) | s(bool,X587) = s(bool,happ(s(fun(X584,bool),X585),s(X584,X586))) | s(bool,'T_0') = s(bool,X587)) )),
  inference(superposition,[],[f604,f1319])).
fof(f9608,plain,(
  ( ! [X588,X590,X589,X591] : (s(X588,X590) = s(X588,sK65(X590,X589,X588)) | s(bool,X591) = s(bool,happ(s(fun(X588,bool),X589),s(X588,X590))) | s(bool,'T_0') = s(bool,X591)) )),
  inference(subsumption_resolution,[],[f8228,f531])).
fof(f8228,plain,(
  ( ! [X588,X590,X589,X591] : (~p(s(bool,'T_0')) | s(X588,X590) = s(X588,sK65(X590,X589,X588)) | s(bool,X591) = s(bool,happ(s(fun(X588,bool),X589),s(X588,X590))) | s(bool,'T_0') = s(bool,X591)) )),
  inference(superposition,[],[f603,f1319])).
fof(f8009,plain,(
  ( ! [X546,X547,X548] : (~p(s(bool,happ(s(fun(bool,bool),X547),s(bool,X546)))) | s(bool,'T_0') = s(bool,sK65('T_0',X547,bool)) | s(bool,X546) = s(bool,X548) | s(bool,'T_0') = s(bool,X548)) )),
  inference(superposition,[],[f603,f1319])).
fof(f8010,plain,(
  ( ! [X549,X551,X550] : (~p(s(bool,happ(s(fun(bool,bool),X550),s(bool,X549)))) | p(s(bool,happ(s(fun(bool,bool),X550),s(bool,sK65('T_0',X550,bool))))) | s(bool,X549) = s(bool,X551) | s(bool,'T_0') = s(bool,X551)) )),
  inference(superposition,[],[f604,f1319])).
fof(f2331,plain,(
  ( ! [X4,X3] : (~p(s(bool,happ(s(fun(bool,bool),X4),s(bool,X3)))) | s(bool,'F_0') = s(bool,sK65('F_0',X4,bool)) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f603,f539])).
fof(f2433,plain,(
  ( ! [X4,X3] : (~p(s(bool,happ(s(fun(bool,bool),X4),s(bool,X3)))) | p(s(bool,happ(s(fun(bool,bool),X4),s(bool,sK65('F_0',X4,bool))))) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f604,f539])).
fof(f2330,plain,(
  ( ! [X2,X1] : (~p(s(bool,happ(s(fun(bool,bool),X2),s(bool,'F_0')))) | s(bool,X1) = s(bool,sK65(X1,X2,bool)) | s(bool,'T_0') = s(bool,X1)) )),
  inference(superposition,[],[f603,f539])).
fof(f2432,plain,(
  ( ! [X2,X1] : (~p(s(bool,happ(s(fun(bool,bool),X2),s(bool,'F_0')))) | p(s(bool,happ(s(fun(bool,bool),X2),s(bool,sK65(X1,X2,bool))))) | s(bool,'T_0') = s(bool,X1)) )),
  inference(superposition,[],[f604,f539])).
fof(f7550,plain,(
  ( ! [X662,X661,X663] : (~p(s(bool,happ(s(fun(bool,bool),X663),s(bool,X662)))) | s(bool,X661) = s(bool,sK65(X661,X663,bool)) | s(bool,'T_0') = s(bool,X662) | s(bool,'T_0') = s(bool,X661)) )),
  inference(superposition,[],[f603,f1319])).
fof(f7551,plain,(
  ( ! [X666,X664,X665] : (~p(s(bool,happ(s(fun(bool,bool),X666),s(bool,X665)))) | p(s(bool,happ(s(fun(bool,bool),X666),s(bool,sK65(X664,X666,bool))))) | s(bool,'T_0') = s(bool,X665) | s(bool,'T_0') = s(bool,X664)) )),
  inference(superposition,[],[f604,f1319])).
fof(f8245,plain,(
  ( ! [X656,X657,X655] : (~p(s(bool,happ(s(fun(bool,bool),X656),s(bool,'T_0')))) | s(bool,X655) = s(bool,sK65(X655,X656,bool)) | s(bool,X655) = s(bool,X657) | s(bool,'T_0') = s(bool,X657)) )),
  inference(superposition,[],[f603,f1319])).
fof(f8246,plain,(
  ( ! [X660,X658,X659] : (~p(s(bool,happ(s(fun(bool,bool),X659),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X659),s(bool,sK65(X658,X659,bool))))) | s(bool,X658) = s(bool,X660) | s(bool,'T_0') = s(bool,X660)) )),
  inference(superposition,[],[f604,f1319])).
fof(f2339,plain,(
  ( ! [X8,X7] : (~p(s(bool,happ(s(fun(bool,bool),X8),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,sK65('const.bool.BOUNDED_1'(s(bool,X7)),X8,bool))) )),
  inference(forward_demodulation,[],[f2334,f538])).
fof(f2334,plain,(
  ( ! [X8,X7] : (~p(s(bool,happ(s(fun(bool,bool),X8),s(bool,'T_0')))) | s(bool,'const.bool.BOUNDED_1'(s(bool,X7))) = s(bool,sK65('const.bool.BOUNDED_1'(s(bool,X7)),X8,bool))) )),
  inference(superposition,[],[f603,f538])).
fof(f2436,plain,(
  ( ! [X8,X7] : (~p(s(bool,happ(s(fun(bool,bool),X8),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X8),s(bool,sK65('const.bool.BOUNDED_1'(s(bool,X7)),X8,bool)))))) )),
  inference(superposition,[],[f604,f538])).
fof(f12990,plain,(
  ( ! [X45,X46,X44] : (sP1('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X44),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X45) | s(bool,X45) = s(bool,X46) | s(bool,'T_0') = s(bool,X46)) ) | $spl4),
  inference(subsumption_resolution,[],[f12976,f1048])).
fof(f12976,plain,(
  ( ! [X45,X46,X44] : (p(s(bool,'F_0')) | sP1('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X44),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X45) | s(bool,X45) = s(bool,X46) | s(bool,'T_0') = s(bool,X46)) ) | $spl4),
  inference(superposition,[],[f9572,f2947])).
fof(f12983,plain,(
  ( ! [X2,X0,X1] : (sP1(X0,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X0)) )),
  inference(subsumption_resolution,[],[f12963,f1048])).
fof(f12963,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'F_0')) | sP1(X0,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f9572,f539])).
fof(f12912,plain,(
  ( ! [X45,X46,X44] : (sP1(X45,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X44),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,X45) = s(bool,X46) | s(bool,'T_0') = s(bool,X46)) ) | $spl4),
  inference(subsumption_resolution,[],[f12897,f1048])).
fof(f12897,plain,(
  ( ! [X45,X46,X44] : (p(s(bool,'F_0')) | sP1(X45,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X44),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,X45) = s(bool,X46) | s(bool,'T_0') = s(bool,X46)) ) | $spl4),
  inference(superposition,[],[f9571,f2947])).
fof(f12904,plain,(
  ( ! [X2,X0,X1] : (sP1(X1,X0) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X0)) )),
  inference(subsumption_resolution,[],[f12884,f1048])).
fof(f12884,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'F_0')) | sP1(X1,X0) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f9571,f539])).
fof(f12824,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) != s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f9567,f539])).
fof(f551,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'F_0') != s(bool,X0)) )),
  inference(cnf_transformation,[],[f284])).
fof(f284,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f86])).
fof(f86,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f85])).
fof(f85,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f57])).
fof(f57,axiom,(
  ! [X38] : (s(bool,'F_0') = s(bool,X38) <=> ~p(s(bool,X38)))),
  file('thm.mod_to_conProof.v_rel_eqns|split|5','thm.bool.EQ_CLAUSES|split|3')).
fof(f552,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f284])).
fof(f2442,plain,(
  ( ! [X2,X0,X1] : (~sP49('const.bool.BOUNDED_1'(s(bool,X0)),X1,X2) | sP50('const.bool.BOUNDED_1'(s(bool,'F_0')),X1,X2) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f1274,f539])).
fof(f2443,plain,(
  ( ! [X4,X5,X3] : (~sP49('const.bool.BOUNDED_1'(s(bool,'F_0')),X4,X5) | sP50('const.bool.BOUNDED_1'(s(bool,X3)),X4,X5) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f1274,f539])).
fof(f2474,plain,(
  ( ! [X2,X0,X1] : (~sP47('const.bool.BOUNDED_1'(s(bool,X0)),X1,X2) | sP48('const.bool.BOUNDED_1'(s(bool,'F_0')),X1,X2) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f1299,f539])).
fof(f2475,plain,(
  ( ! [X4,X5,X3] : (~sP47('const.bool.BOUNDED_1'(s(bool,'F_0')),X4,X5) | sP48('const.bool.BOUNDED_1'(s(bool,X3)),X4,X5) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f1299,f539])).
fof(f2525,plain,(
  ( ! [X0,X1] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X0))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X1)))) )),
  inference(unit_resulting_resolution,[],[f1102,f606])).
fof(f2529,plain,(
  ( ! [X6,X4,X5,X3] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X4))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X5),s('type.list.list'(bool),X6))) | s(bool,X3) = s(bool,X5) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f606,f539])).
fof(f2530,plain,(
  ( ! [X10,X8,X7,X9] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X7),s('type.list.list'(bool),X8))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X9),s('type.list.list'(bool),X10))) | s(bool,'F_0') = s(bool,X9) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f606,f539])).
fof(f2564,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'(bool,X0),'const.pair.,_2'(s(bool,'T_0'),s(X0,X1))) != s('type.pair.prod'(bool,X0),'const.pair.,_2'(s(bool,'F_0'),s(X0,X2)))) )),
  inference(unit_resulting_resolution,[],[f1102,f650])).
fof(f2568,plain,(
  ( ! [X6,X4,X8,X7,X5] : (s('type.pair.prod'(bool,X5),'const.pair.,_2'(s(bool,'F_0'),s(X5,X6))) != s('type.pair.prod'(bool,X5),'const.pair.,_2'(s(bool,X7),s(X5,X8))) | s(bool,X4) = s(bool,X7) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f650,f539])).
fof(f2569,plain,(
  ( ! [X12,X10,X13,X11,X9] : (s('type.pair.prod'(bool,X10),'const.pair.,_2'(s(bool,X9),s(X10,X11))) != s('type.pair.prod'(bool,X10),'const.pair.,_2'(s(bool,X12),s(X10,X13))) | s(bool,'F_0') = s(bool,X12) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f650,f539])).
fof(f2607,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'(X0,bool),'const.pair.,_2'(s(X0,X1),s(bool,'F_0'))) != s('type.pair.prod'(X0,bool),'const.pair.,_2'(s(X0,X2),s(bool,'T_0')))) )),
  inference(unit_resulting_resolution,[],[f1102,f651])).
fof(f2617,plain,(
  ( ! [X6,X4,X8,X7,X5] : (s('type.pair.prod'(X5,bool),'const.pair.,_2'(s(X5,X6),s(bool,'F_0'))) != s('type.pair.prod'(X5,bool),'const.pair.,_2'(s(X5,X7),s(bool,X8))) | s(bool,X4) = s(bool,X8) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f651,f539])).
fof(f2618,plain,(
  ( ! [X12,X10,X13,X11,X9] : (s('type.pair.prod'(X10,bool),'const.pair.,_2'(s(X10,X11),s(bool,X9))) != s('type.pair.prod'(X10,bool),'const.pair.,_2'(s(X10,X12),s(bool,X13))) | s(bool,'F_0') = s(bool,X13) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f651,f539])).
fof(f2672,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),X0),s(bool,'F_0')))) | p(s(bool,happ(s(fun(bool,bool),X0),s(bool,X2)))) | ~p(s(bool,X1)) | s(bool,'T_0') = s(bool,sK59(X0,X1,bool))) )),
  inference(superposition,[],[f591,f539])).
fof(f2684,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),X0),s(bool,'F_0')))) | p(s(bool,happ(s(fun(bool,bool),X0),s(bool,X2)))) | ~p(s(bool,X1)) | s(bool,'T_0') = s(bool,sK60(X0,X1,bool))) )),
  inference(superposition,[],[f593,f539])).
fof(f2696,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,'F_0')))) | ~p(s(bool,X0)) | p(s(bool,happ(s(fun(bool,bool),X1),s(bool,X2)))) | s(bool,'T_0') = s(bool,sK61(X0,X1,bool))) )),
  inference(superposition,[],[f594,f539])).
fof(f2706,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,'F_0')))) | ~p(s(bool,X0)) | p(s(bool,happ(s(fun(bool,bool),X1),s(bool,X2)))) | s(bool,'T_0') = s(bool,sK62(X0,X1,bool))) )),
  inference(superposition,[],[f596,f539])).
fof(f2718,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),X0),s(bool,'F_0')))) | p(s(bool,X1)) | p(s(bool,happ(s(fun(bool,bool),X0),s(bool,X2)))) | s(bool,'T_0') = s(bool,sK63(X0,X1,bool))) )),
  inference(superposition,[],[f599,f539])).
fof(f2734,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),X0),s(bool,'F_0')))) | p(s(bool,X1)) | p(s(bool,happ(s(fun(bool,bool),X0),s(bool,X2)))) | s(bool,'T_0') = s(bool,sK64(X0,X1,bool))) )),
  inference(superposition,[],[f601,f539])).
fof(f2753,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0')))) | p(s(bool,happ(s(fun(bool,bool),X3),s(bool,X4)))) | s(bool,X2) != s(bool,X4) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f602,f539])).
fof(f2754,plain,(
  ( ! [X6,X7,X5] : (~p(s(bool,happ(s(fun(bool,bool),X6),s(bool,X5)))) | p(s(bool,happ(s(fun(bool,bool),X6),s(bool,X7)))) | s(bool,'F_0') != s(bool,X7) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f602,f539])).
fof(f2876,plain,(
  ( ! [X2,X0,X1] : (s(X2,f(s(bool,'F_0'))) != s(X2,g(s(bool,'F_0'))) | s(fun(bool,X2),X0) = s(fun(bool,X2),X1) | s(bool,'T_0') = s(bool,sK66(X0,X1,X2,bool))) )),
  inference(superposition,[],[f649,f539])).
fof(f2877,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') != s(bool,f(s(X0,sK66(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,'T_0') = s(bool,g(s(X0,sK66(X1,X2,bool,X0))))) )),
  inference(superposition,[],[f649,f539])).
fof(f2947,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f2937,f609])).
fof(f3442,plain,(
  ( ! [X6,X4,X8,X7,X5] : (s(bool,'F_0') != s(bool,X5) | s(X6,X7) != s(X6,X8) | s('type.pair.prod'(bool,X6),'const.pair.,_2'(s(bool,X4),s(X6,X7))) = s('type.pair.prod'(bool,X6),'const.pair.,_2'(s(bool,X5),s(X6,X8))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f652,f539])).
fof(f3443,plain,(
  ( ! [X12,X10,X13,X11,X9] : (s(bool,X9) != s(bool,X10) | s(X11,X12) != s(X11,X13) | s('type.pair.prod'(bool,X11),'const.pair.,_2'(s(bool,'F_0'),s(X11,X12))) = s('type.pair.prod'(bool,X11),'const.pair.,_2'(s(bool,X10),s(X11,X13))) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f652,f539])).
fof(f3884,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,'F_0')))) | ~p(s(bool,happ(s(fun(bool,bool),X0),s(bool,X2)))) | p(s(bool,happ(s(fun(bool,bool),X1),s(bool,sK58(X0,X1,bool))))) | s(bool,'T_0') = s(bool,sK57(X0,X1,bool))) )),
  inference(superposition,[],[f587,f539])).
fof(f4091,plain,(
  ( ! [X198,X200,X199,X201] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X199))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X200),s('type.list.list'(bool),X201))) | s(bool,X200) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X198),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(superposition,[],[f606,f2947])).
fof(f4096,plain,(
  ( ! [X222,X220,X219,X223,X221] : (s('type.pair.prod'(bool,X220),'const.pair.,_2'(s(bool,'F_0'),s(X220,X223))) != s('type.pair.prod'(bool,X220),'const.pair.,_2'(s(bool,X221),s(X220,X222))) | s(bool,X221) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X219),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(superposition,[],[f650,f2947])).
fof(f4099,plain,(
  ( ! [X237,X235,X238,X236,X234] : (s('type.pair.prod'(X235,bool),'const.pair.,_2'(s(X235,X238),s(bool,'F_0'))) != s('type.pair.prod'(X235,bool),'const.pair.,_2'(s(X235,X236),s(bool,X237))) | s(bool,X237) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X234),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(superposition,[],[f651,f2947])).
fof(f9618,plain,(
  ( ! [X633,X631,X632] : (s(bool,'F_0') = s(bool,sK65('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X632),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X631,bool)) | s(bool,X633) = s(bool,happ(s(fun(bool,bool),X631),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X633)) ) | $spl4),
  inference(subsumption_resolution,[],[f8238,f531])).
fof(f8238,plain,(
  ( ! [X633,X631,X632] : (~p(s(bool,'T_0')) | s(bool,'F_0') = s(bool,sK65('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X632),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X631,bool)) | s(bool,X633) = s(bool,happ(s(fun(bool,bool),X631),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X633)) ) | $spl4),
  inference(superposition,[],[f4157,f1319])).
fof(f8270,plain,(
  ( ! [X779,X781,X782,X780] : (s(bool,'T_0') != s(bool,f(s(X779,sK66(X780,X781,bool,X779)))) | s(fun(X779,bool),X780) = s(fun(X779,bool),X781) | s(bool,X782) = s(bool,g(s(X779,sK66(X780,X781,bool,X779)))) | s(bool,'T_0') = s(bool,X782)) )),
  inference(superposition,[],[f649,f1319])).
fof(f7575,plain,(
  ( ! [X786,X788,X787,X789] : (s(bool,X789) != s(bool,f(s(X786,sK66(X787,X788,bool,X786)))) | s(fun(X786,bool),X787) = s(fun(X786,bool),X788) | s(bool,'T_0') = s(bool,X789) | s(bool,'T_0') = s(bool,g(s(X786,sK66(X787,X788,bool,X786))))) )),
  inference(superposition,[],[f649,f1319])).
fof(f654,plain,(
  ( ! [X6,X2,X0,X8,X7,X1] : (~sP7(X0,X1,X2) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.list.list'('type.modSem.v'),X7),s('type.list.list'('type.conSem.v'),X8)))) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.modSem.v'),X7))),s('type.list.list'('type.conSem.v'),X8))))) )),
  inference(cnf_transformation,[],[f343])).
fof(f343,plain,(
  ! [X0,X1,X2] : (~sP7(X0,X1,X2) | (! [X9,X10,X11] : (~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9),s('type.modSem.v',X10),s('type.conSem.v',X11)))) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s('type.modSem.v',X10))),s('type.conSem.v',X11))))) & ! [X6,X7,X8] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.list.list'('type.modSem.v'),X7),s('type.list.list'('type.conSem.v'),X8)))) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.modSem.v'),X7))),s('type.list.list'('type.conSem.v'),X8))))) & ! [X3,X4,X5] : (~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X5)))))))),
  inference(rectify,[],[f342])).
fof(f342,plain,(
  ! [X2,X1,X0] : (~sP7(X2,X1,X0) | (! [X54,X55,X56] : (~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X54),s('type.modSem.v',X55),s('type.conSem.v',X56)))) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X54))),s('type.modSem.v',X55))),s('type.conSem.v',X56))))) & ! [X51,X52,X53] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X51),s('type.list.list'('type.modSem.v'),X52),s('type.list.list'('type.conSem.v'),X53)))) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X51))),s('type.list.list'('type.modSem.v'),X52))),s('type.list.list'('type.conSem.v'),X53))))) & ! [X48,X49,X50] : (~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X48),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X49),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X50)))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X48))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X49))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X50)))))))),
  inference(nnf_transformation,[],[f222])).
fof(f222,plain,(
  ! [X2,X1,X0] : (~sP7(X2,X1,X0) | (! [X54,X55,X56] : (~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X54),s('type.modSem.v',X55),s('type.conSem.v',X56)))) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X54))),s('type.modSem.v',X55))),s('type.conSem.v',X56))))) & ! [X51,X52,X53] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X51),s('type.list.list'('type.modSem.v'),X52),s('type.list.list'('type.conSem.v'),X53)))) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X51))),s('type.list.list'('type.modSem.v'),X52))),s('type.list.list'('type.conSem.v'),X53))))) & ! [X48,X49,X50] : (~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X48),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X49),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X50)))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X48))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X49))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X50)))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP7])])).
fof(f704,plain,(
  ( ! [X6,X2,X0,X8,X7,X1] : (~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK153(X2,X1,X0)))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK154(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK154(X2,X1,X0))))))) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.list.list'('type.modSem.v'),X7),s('type.list.list'('type.conSem.v'),X8)))) | sP9(X2,X0) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK156(X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) | sP8(X1,X0) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK155(X2,X1,X0)))),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) | sP14(X0,X1) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.modSem.v'),X7))),s('type.list.list'('type.conSem.v'),X8)))) | sP12(X0,X2) | sP11(X0,X2) | sP10(X0,X1) | sP13(X0,X1) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK151(X2,X1,X0)))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK152(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK152(X2,X1,X0)))))))) )),
  inference(cnf_transformation,[],[f383])).
fof(f383,plain,(
  ! [X0,X1,X2] : (~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK151(X2,X1,X0)))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK152(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK152(X2,X1,X0))))))) | sP13(X0,X1) | sP10(X0,X1) | sP11(X0,X2) | sP12(X0,X2) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK153(X2,X1,X0)))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK154(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK154(X2,X1,X0))))))) | sP14(X0,X1) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK155(X2,X1,X0)))),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) | sP8(X1,X0) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK156(X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) | sP9(X2,X0) | (! [X9,X10,X11] : (~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9),s('type.modSem.v',X10),s('type.conSem.v',X11)))) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s('type.modSem.v',X10))),s('type.conSem.v',X11))))) & ! [X6,X7,X8] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.list.list'('type.modSem.v'),X7),s('type.list.list'('type.conSem.v'),X8)))) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.modSem.v'),X7))),s('type.list.list'('type.conSem.v'),X8))))) & ! [X3,X4,X5] : (~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X5)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK151,sK152,sK153,sK154,sK155,sK156])],[f382])).
fof(f382,plain,(
  ! [X0,X1,X2] : (? [X16,X17] : ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X16))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X17))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X17)))))) | sP13(X0,X1) | sP10(X0,X1) | sP11(X0,X2) | sP12(X0,X2) | ? [X14,X15] : ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X15))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X15)))))) | sP14(X0,X1) | ? [X13] : ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13))),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) | sP8(X1,X0) | ? [X12] : ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) | sP9(X2,X0) | (! [X9,X10,X11] : (~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9),s('type.modSem.v',X10),s('type.conSem.v',X11)))) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s('type.modSem.v',X10))),s('type.conSem.v',X11))))) & ! [X6,X7,X8] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.list.list'('type.modSem.v'),X7),s('type.list.list'('type.conSem.v'),X8)))) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.modSem.v'),X7))),s('type.list.list'('type.conSem.v'),X8))))) & ! [X3,X4,X5] : (~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X5)))))))),
  inference(rectify,[],[f231])).
fof(f231,plain,(
  ! [X0,X1,X2] : (? [X46,X47] : ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X46))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X47))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X47)))))) | sP13(X0,X1) | sP10(X0,X1) | sP11(X0,X2) | sP12(X0,X2) | ? [X19,X20] : ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X19))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X20))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X20)))))) | sP14(X0,X1) | ? [X15] : ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X15))),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) | sP8(X1,X0) | ? [X9] : ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) | sP9(X2,X0) | (! [X54,X55,X56] : (~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X54),s('type.modSem.v',X55),s('type.conSem.v',X56)))) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X54))),s('type.modSem.v',X55))),s('type.conSem.v',X56))))) & ! [X51,X52,X53] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X51),s('type.list.list'('type.modSem.v'),X52),s('type.list.list'('type.conSem.v'),X53)))) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X51))),s('type.list.list'('type.modSem.v'),X52))),s('type.list.list'('type.conSem.v'),X53))))) & ! [X48,X49,X50] : (~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X48),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X49),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X50)))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X48))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X49))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X50)))))))),
  inference(definition_folding,[],[f199,f230,f229,f228,f227,f226,f225,f224])).
fof(f224,plain,(
  ! [X1,X0] : (~sP8(X1,X0) | ? [X10,X11,X12,X13,X14] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10),s('type.modSem.v',X11),s('type.conSem.v',X13)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10))),s('type.modSem.v',X11))),s('type.conSem.v',X13)))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10),s('type.list.list'('type.modSem.v'),X12),s('type.list.list'('type.conSem.v'),X14)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10))),s('type.list.list'('type.modSem.v'),X12))),s('type.list.list'('type.conSem.v'),X14)))) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10))),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X11),s('type.list.list'('type.modSem.v'),X12))))),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X13),s('type.list.list'('type.conSem.v'),X14))))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP8])])).
fof(f225,plain,(
  ! [X2,X0] : (~sP9(X2,X0) | ? [X3,X4,X5,X6,X7,X8] : (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.modSem.v',X5),s('type.conSem.v',X8)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X5))),s('type.conSem.v',X8)))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.modSem.v',X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X6))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.conSem.v',X8))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7))))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP9])])).
fof(f226,plain,(
  ! [X0,X1] : (~sP10(X0,X1) | ? [X37,X38,X39,X40,X41,X42] : (s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X40),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X41))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X37),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X38),s('type.semanticPrimitives.tid_or_exn',X39))))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X37),s('type.list.list'('type.modSem.v'),X41),s('type.list.list'('type.conSem.v'),X42)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X37))),s('type.list.list'('type.modSem.v'),X41))),s('type.list.list'('type.conSem.v'),X42)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X37))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X38),s('type.semanticPrimitives.tid_or_exn',X39))))),s('type.list.list'('type.modSem.v'),X41))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X40),s('type.semanticPrimitives.tid_or_exn',X39))))),s('type.list.list'('type.conSem.v'),X42))))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP10])])).
fof(f227,plain,(
  ! [X0,X2] : (~sP11(X0,X2) | ? [X29,X30,X31,X32,X33,X34,X35,X36] : (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X29),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X30),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X33)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X29))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X30))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X33)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X34),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X35),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X36),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X29)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X29))),s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X34),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X30))),s('type.list.list'('type.string.char'),X31),s('type.modLang.exp',X32))))),s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X33),s('type.list.list'('type.string.char'),X31),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X36),s('type.modLang.exp',X32))))))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP11])])).
fof(f228,plain,(
  ! [X0,X2] : (~sP12(X0,X2) | ? [X21,X22,X23,X24,X25,X26,X27,X28] : (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X26)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X26)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X25),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X27),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X25),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X23),s('type.list.list'('type.string.char'),X24))))),s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X26),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X23))),s('type.list.list'('type.string.char'),X24))))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP12])])).
fof(f229,plain,(
  ! [X0,X1] : (~sP13(X0,X1) | ? [X43,X44,X45] : (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X43),s('type.list.list'('type.modSem.v'),X44),s('type.list.list'('type.conSem.v'),X45)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X43))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X43))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X44))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X45))))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP13])])).
fof(f230,plain,(
  ! [X0,X1] : (~sP14(X0,X1) | ? [X16,X17,X18] : (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X16),s('type.list.list'('type.modSem.v'),X17),s('type.list.list'('type.conSem.v'),X18)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X16))),s('type.list.list'('type.modSem.v'),X17))),s('type.list.list'('type.conSem.v'),X18)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X16))),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X17))))),s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X18))))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP14])])).
fof(f199,plain,(
  ! [X0,X1,X2] : (? [X46,X47] : ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X46))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X47))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X47)))))) | ? [X43,X44,X45] : (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X43),s('type.list.list'('type.modSem.v'),X44),s('type.list.list'('type.conSem.v'),X45)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X43))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X43))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X44))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X45))))))) | ? [X37,X38,X39,X40,X41,X42] : (s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X40),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X41))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X37),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X38),s('type.semanticPrimitives.tid_or_exn',X39))))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X37),s('type.list.list'('type.modSem.v'),X41),s('type.list.list'('type.conSem.v'),X42)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X37))),s('type.list.list'('type.modSem.v'),X41))),s('type.list.list'('type.conSem.v'),X42)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X37))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X38),s('type.semanticPrimitives.tid_or_exn',X39))))),s('type.list.list'('type.modSem.v'),X41))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X40),s('type.semanticPrimitives.tid_or_exn',X39))))),s('type.list.list'('type.conSem.v'),X42))))))) | ? [X29,X30,X31,X32,X33,X34,X35,X36] : (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X29),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X30),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X33)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X29))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X30))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X33)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X34),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X35),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X36),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X29)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X29))),s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X34),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X30))),s('type.list.list'('type.string.char'),X31),s('type.modLang.exp',X32))))),s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X33),s('type.list.list'('type.string.char'),X31),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X36),s('type.modLang.exp',X32))))))))) | ? [X21,X22,X23,X24,X25,X26,X27,X28] : (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X26)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X26)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X25),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X27),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X25),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X23),s('type.list.list'('type.string.char'),X24))))),s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X26),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X23))),s('type.list.list'('type.string.char'),X24))))))) | ? [X19,X20] : ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X19))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X20))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X20)))))) | ? [X16,X17,X18] : (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X16),s('type.list.list'('type.modSem.v'),X17),s('type.list.list'('type.conSem.v'),X18)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X16))),s('type.list.list'('type.modSem.v'),X17))),s('type.list.list'('type.conSem.v'),X18)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X16))),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X17))))),s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X18))))))) | ? [X15] : ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X15))),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) | ? [X10,X11,X12,X13,X14] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10),s('type.modSem.v',X11),s('type.conSem.v',X13)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10))),s('type.modSem.v',X11))),s('type.conSem.v',X13)))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10),s('type.list.list'('type.modSem.v'),X12),s('type.list.list'('type.conSem.v'),X14)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10))),s('type.list.list'('type.modSem.v'),X12))),s('type.list.list'('type.conSem.v'),X14)))) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10))),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X11),s('type.list.list'('type.modSem.v'),X12))))),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X13),s('type.list.list'('type.conSem.v'),X14))))))) | ? [X9] : ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) | ? [X3,X4,X5,X6,X7,X8] : (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.modSem.v',X5),s('type.conSem.v',X8)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X5))),s('type.conSem.v',X8)))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.modSem.v',X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X6))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.conSem.v',X8))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7))))))) | (! [X54,X55,X56] : (~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X54),s('type.modSem.v',X55),s('type.conSem.v',X56)))) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X54))),s('type.modSem.v',X55))),s('type.conSem.v',X56))))) & ! [X51,X52,X53] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X51),s('type.list.list'('type.modSem.v'),X52),s('type.list.list'('type.conSem.v'),X53)))) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X51))),s('type.list.list'('type.modSem.v'),X52))),s('type.list.list'('type.conSem.v'),X53))))) & ! [X48,X49,X50] : (~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X48),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X49),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X50)))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X48))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X49))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X50)))))))),
  inference(flattening,[],[f198])).
fof(f198,plain,(
  ! [X0,X1,X2] : ((? [X46,X47] : ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X46))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X47))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X47)))))) | ? [X43,X44,X45] : ((p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X43),s('type.list.list'('type.modSem.v'),X44),s('type.list.list'('type.conSem.v'),X45)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X43))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45))))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X43))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X44))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X45))))))) | ? [X37,X38,X39,X40,X41,X42] : ((s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X40),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X41))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X37),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X38),s('type.semanticPrimitives.tid_or_exn',X39))))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X37),s('type.list.list'('type.modSem.v'),X41),s('type.list.list'('type.conSem.v'),X42)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X37))),s('type.list.list'('type.modSem.v'),X41))),s('type.list.list'('type.conSem.v'),X42))))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X37))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X38),s('type.semanticPrimitives.tid_or_exn',X39))))),s('type.list.list'('type.modSem.v'),X41))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X40),s('type.semanticPrimitives.tid_or_exn',X39))))),s('type.list.list'('type.conSem.v'),X42))))))) | ? [X29,X30,X31,X32,X33,X34,X35,X36] : ((p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X29),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X30),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X33)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X29))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X30))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X33)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X34),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X35),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X36),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X29))))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X29))),s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X34),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X30))),s('type.list.list'('type.string.char'),X31),s('type.modLang.exp',X32))))),s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X33),s('type.list.list'('type.string.char'),X31),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X36),s('type.modLang.exp',X32))))))))) | ? [X21,X22,X23,X24,X25,X26,X27,X28] : ((p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X26)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X26)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X25),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X27),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X25),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X23),s('type.list.list'('type.string.char'),X24))))),s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X26),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X23))),s('type.list.list'('type.string.char'),X24))))))) | ? [X19,X20] : ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X19))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X20))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X20)))))) | ? [X16,X17,X18] : ((p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X16),s('type.list.list'('type.modSem.v'),X17),s('type.list.list'('type.conSem.v'),X18)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X16))),s('type.list.list'('type.modSem.v'),X17))),s('type.list.list'('type.conSem.v'),X18))))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X16))),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X17))))),s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X18))))))) | ? [X15] : ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X15))),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) | ? [X10,X11,X12,X13,X14] : ((p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10),s('type.modSem.v',X11),s('type.conSem.v',X13)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10))),s('type.modSem.v',X11))),s('type.conSem.v',X13)))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10),s('type.list.list'('type.modSem.v'),X12),s('type.list.list'('type.conSem.v'),X14)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10))),s('type.list.list'('type.modSem.v'),X12))),s('type.list.list'('type.conSem.v'),X14))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10))),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X11),s('type.list.list'('type.modSem.v'),X12))))),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X13),s('type.list.list'('type.conSem.v'),X14))))))) | ? [X9] : ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) | ? [X3,X4,X5,X6,X7,X8] : ((p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.modSem.v',X5),s('type.conSem.v',X8)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X5))),s('type.conSem.v',X8))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.modSem.v',X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X6))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.conSem.v',X8))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))))))) | (! [X54,X55,X56] : (~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X54),s('type.modSem.v',X55),s('type.conSem.v',X56)))) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X54))),s('type.modSem.v',X55))),s('type.conSem.v',X56))))) & ! [X51,X52,X53] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X51),s('type.list.list'('type.modSem.v'),X52),s('type.list.list'('type.conSem.v'),X53)))) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X51))),s('type.list.list'('type.modSem.v'),X52))),s('type.list.list'('type.conSem.v'),X53))))) & ! [X48,X49,X50] : (~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X48),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X49),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X50)))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X48))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X49))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X50)))))))),
  inference(ennf_transformation,[],[f145])).
fof(f145,plain,(
  ! [X0,X1,X2] : ((! [X46,X47] : p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X46))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X47))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X47)))))) & ! [X43,X44,X45] : ((p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X43),s('type.list.list'('type.modSem.v'),X44),s('type.list.list'('type.conSem.v'),X45)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X43))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45))))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X43))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X44))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X45))))))) & ! [X37,X38,X39,X40,X41,X42] : ((s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X40),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X41))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X37),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X38),s('type.semanticPrimitives.tid_or_exn',X39))))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X37),s('type.list.list'('type.modSem.v'),X41),s('type.list.list'('type.conSem.v'),X42)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X37))),s('type.list.list'('type.modSem.v'),X41))),s('type.list.list'('type.conSem.v'),X42))))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X37))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X38),s('type.semanticPrimitives.tid_or_exn',X39))))),s('type.list.list'('type.modSem.v'),X41))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X40),s('type.semanticPrimitives.tid_or_exn',X39))))),s('type.list.list'('type.conSem.v'),X42))))))) & ! [X29,X30,X31,X32,X33,X34,X35,X36] : ((p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X29),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X30),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X33)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X29))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X30))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X33)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X34),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X35),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X36),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X29))))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X29))),s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X34),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X30))),s('type.list.list'('type.string.char'),X31),s('type.modLang.exp',X32))))),s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X33),s('type.list.list'('type.string.char'),X31),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X36),s('type.modLang.exp',X32))))))))) & ! [X21,X22,X23,X24,X25,X26,X27,X28] : ((p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X26)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X26)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X25),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X27),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X25),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X23),s('type.list.list'('type.string.char'),X24))))),s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X26),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X23))),s('type.list.list'('type.string.char'),X24))))))) & ! [X19,X20] : p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X19))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X20))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X20)))))) & ! [X16,X17,X18] : ((p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X16),s('type.list.list'('type.modSem.v'),X17),s('type.list.list'('type.conSem.v'),X18)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X16))),s('type.list.list'('type.modSem.v'),X17))),s('type.list.list'('type.conSem.v'),X18))))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X16))),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X17))))),s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X18))))))) & ! [X15] : p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X15))),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) & ! [X10,X11,X12,X13,X14] : ((p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10),s('type.modSem.v',X11),s('type.conSem.v',X13)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10))),s('type.modSem.v',X11))),s('type.conSem.v',X13)))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10),s('type.list.list'('type.modSem.v'),X12),s('type.list.list'('type.conSem.v'),X14)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10))),s('type.list.list'('type.modSem.v'),X12))),s('type.list.list'('type.conSem.v'),X14))))) => p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10))),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X11),s('type.list.list'('type.modSem.v'),X12))))),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X13),s('type.list.list'('type.conSem.v'),X14))))))) & ! [X9] : p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) & ! [X3,X4,X5,X6,X7,X8] : ((p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.modSem.v',X5),s('type.conSem.v',X8)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X5))),s('type.conSem.v',X8))))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.modSem.v',X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X6))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.conSem.v',X8))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))))))) => (! [X54,X55,X56] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X54),s('type.modSem.v',X55),s('type.conSem.v',X56)))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X54))),s('type.modSem.v',X55))),s('type.conSem.v',X56))))) & ! [X51,X52,X53] : (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X51),s('type.list.list'('type.modSem.v'),X52),s('type.list.list'('type.conSem.v'),X53)))) => p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X51))),s('type.list.list'('type.modSem.v'),X52))),s('type.list.list'('type.conSem.v'),X53))))) & ! [X48,X49,X50] : (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X48),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X49),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X50)))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X48))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X49))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X50)))))))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X15,X16,X17] : ((! [X6,X18] : p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X15),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X18))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X18)))))) & ! [X6,X8,X9] : ((p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.list.list'('type.modSem.v'),X8),s('type.list.list'('type.conSem.v'),X9)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X16),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.modSem.v'),X8))),s('type.list.list'('type.conSem.v'),X9))))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X15),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X8))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X9))))))) & ! [X6,X19,X20,X21,X8,X9] : ((s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X21),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X8))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X19),s('type.semanticPrimitives.tid_or_exn',X20))))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.list.list'('type.modSem.v'),X8),s('type.list.list'('type.conSem.v'),X9)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X16),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.modSem.v'),X8))),s('type.list.list'('type.conSem.v'),X9))))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X15),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X19),s('type.semanticPrimitives.tid_or_exn',X20))))),s('type.list.list'('type.modSem.v'),X8))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X21),s('type.semanticPrimitives.tid_or_exn',X20))))),s('type.list.list'('type.conSem.v'),X9))))))) & ! [X6,X22,X23,X24,X25,X26,X27,X28] : ((p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X25)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X17),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X25)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X26),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X27),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X15),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X26),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.string.char'),X23),s('type.modLang.exp',X24))))),s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X25),s('type.list.list'('type.string.char'),X23),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.modLang.exp',X24))))))))) & ! [X6,X22,X29,X23,X26,X25,X27,X28] : ((p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X25)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X17),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X25)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X26),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X27),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X15),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X26),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X29),s('type.list.list'('type.string.char'),X23))))),s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X25),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X29))),s('type.list.list'('type.string.char'),X23))))))) & ! [X6,X30] : p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X15),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X30))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X30)))))) & ! [X6,X8,X9] : ((p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.list.list'('type.modSem.v'),X8),s('type.list.list'('type.conSem.v'),X9)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X16),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.modSem.v'),X8))),s('type.list.list'('type.conSem.v'),X9))))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X15),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X8))))),s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X9))))))) & ! [X6] : p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X16),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) & ! [X6,X7,X8,X10,X9] : ((p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.modSem.v',X7),s('type.conSem.v',X10)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X15),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X7))),s('type.conSem.v',X10)))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.list.list'('type.modSem.v'),X8),s('type.list.list'('type.conSem.v'),X9)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X16),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.modSem.v'),X8))),s('type.list.list'('type.conSem.v'),X9))))) => p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X16),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X7),s('type.list.list'('type.modSem.v'),X8))))),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X10),s('type.list.list'('type.conSem.v'),X9))))))) & ! [X6] : p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X17),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) & ! [X6,X23,X7,X22,X31,X10] : ((p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X17),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31)))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.modSem.v',X7),s('type.conSem.v',X10)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X15),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X7))),s('type.conSem.v',X10))))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X17),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X23),s('type.modSem.v',X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X23),s('type.conSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31)))))))) => (! [X32,X33,X34] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X32),s('type.modSem.v',X33),s('type.conSem.v',X34)))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X15),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X32))),s('type.modSem.v',X33))),s('type.conSem.v',X34))))) & ! [X12,X13,X14] : (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X12),s('type.list.list'('type.modSem.v'),X13),s('type.list.list'('type.conSem.v'),X14)))) => p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X16),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X12))),s('type.list.list'('type.modSem.v'),X13))),s('type.list.list'('type.conSem.v'),X14))))) & ! [X35,X36,X37] : (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X35),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X36),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X17),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X35))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X36))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)))))))),
  file('thm.mod_to_conProof.v_rel_eqns|split|5','thm.mod_to_conProof.v_rel_strongind')).
fof(f778,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.list.list'('type.modSem.v'),X2) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X3),s('type.list.list'('type.modSem.v'),X4))) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X4),s('type.list.list'('type.conSem.v'),X6)))) | ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X3),s('type.conSem.v',X5)))) | s('type.list.list'('type.conSem.v'),X1) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X5),s('type.list.list'('type.conSem.v'),X6))) | sP23(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f416])).
fof(f780,plain,(
  ( ! [X2,X0,X1] : (~sP23(X0,X2,X1) | p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X2))))) )),
  inference(cnf_transformation,[],[f417])).
fof(f836,plain,(
  ( ! [X2,X0,X14,X12,X1,X13] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X2)))) | sP30(X12,sK247(X14,X13,X12,X2,X1,X0),X14,sK249(X14,X13,X12,X2,X1,X0),sK248(X14,X13,X12,X2,X1,X0)) | sP29(X13,sK244(X14,X13,X12,X2,X1,X0),X12,sK246(X14,X13,X12,X2,X1,X0),sK245(X14,X13,X12,X2,X1,X0)) | sP31(X12,X13,X14) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X13),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.modSem.v'),X1))),s('type.list.list'('type.conSem.v'),X2))))) )),
  inference(cnf_transformation,[],[f446])).
fof(f446,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X2)))) | ! [X12,X13,X14] : (sP31(X12,X13,X14) | (sP29(X13,sK244(X14,X13,X12,X2,X1,X0),X12,sK246(X14,X13,X12,X2,X1,X0),sK245(X14,X13,X12,X2,X1,X0)) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X13),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK244(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.modSem.v'),sK245(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK246(X14,X13,X12,X2,X1,X0)))))) | (sP30(X12,sK247(X14,X13,X12,X2,X1,X0),X14,sK249(X14,X13,X12,X2,X1,X0),sK248(X14,X13,X12,X2,X1,X0)) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X14),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK247(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK248(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK249(X14,X13,X12,X2,X1,X0)))))) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X13),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.modSem.v'),X1))),s('type.list.list'('type.conSem.v'),X2)))))) & ((~sP31(sK250(X2,X1,X0),sK251(X2,X1,X0),sK252(X2,X1,X0)) & ! [X9,X10,X11] : (~sP29(sK251(X2,X1,X0),X9,sK250(X2,X1,X0),X11,X10) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),sK251(X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s('type.list.list'('type.modSem.v'),X10))),s('type.list.list'('type.conSem.v'),X11))))) & ! [X6,X7,X8] : (~sP30(sK250(X2,X1,X0),X6,sK252(X2,X1,X0),X8,X7) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),sK252(X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),sK251(X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.modSem.v'),X1))),s('type.list.list'('type.conSem.v'),X2))))) | p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X2))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK244,sK245,sK246,sK247,sK248,sK249,sK250,sK251,sK252])],[f445])).
fof(f445,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X2)))) | ! [X12,X13,X14] : (sP31(X12,X13,X14) | ? [X18,X19,X20] : (sP29(X13,X18,X12,X20,X19) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X13),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X18))),s('type.list.list'('type.modSem.v'),X19))),s('type.list.list'('type.conSem.v'),X20))))) | ? [X15,X16,X17] : (sP30(X12,X15,X14,X17,X16) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X14),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X15))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X16))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X17))))) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X13),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.modSem.v'),X1))),s('type.list.list'('type.conSem.v'),X2)))))) & (? [X3,X4,X5] : (~sP31(X3,X4,X5) & ! [X9,X10,X11] : (~sP29(X4,X9,X3,X11,X10) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s('type.list.list'('type.modSem.v'),X10))),s('type.list.list'('type.conSem.v'),X11))))) & ! [X6,X7,X8] : (~sP30(X3,X6,X5,X8,X7) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.modSem.v'),X1))),s('type.list.list'('type.conSem.v'),X2))))) | p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X2))))))),
  inference(rectify,[],[f444])).
fof(f444,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X2)))) | ! [X3,X4,X5] : (sP31(X3,X4,X5) | ? [X14,X15,X16] : (sP29(X4,X14,X3,X16,X15) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X15))),s('type.list.list'('type.conSem.v'),X16))))) | ? [X6,X7,X8] : (sP30(X3,X6,X5,X8,X7) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))))) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.modSem.v'),X1))),s('type.list.list'('type.conSem.v'),X2)))))) & (? [X3,X4,X5] : (~sP31(X3,X4,X5) & ! [X14,X15,X16] : (~sP29(X4,X14,X3,X16,X15) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X15))),s('type.list.list'('type.conSem.v'),X16))))) & ! [X6,X7,X8] : (~sP30(X3,X6,X5,X8,X7) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.modSem.v'),X1))),s('type.list.list'('type.conSem.v'),X2))))) | p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X2))))))),
  inference(nnf_transformation,[],[f251])).
fof(f251,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X2)))) <=> ! [X3,X4,X5] : (sP31(X3,X4,X5) | ? [X14,X15,X16] : (sP29(X4,X14,X3,X16,X15) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X15))),s('type.list.list'('type.conSem.v'),X16))))) | ? [X6,X7,X8] : (sP30(X3,X6,X5,X8,X7) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))))) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.modSem.v'),X1))),s('type.list.list'('type.conSem.v'),X2))))))),
  inference(definition_folding,[],[f203,f250,f249,f248,f247,f246,f245,f244,f243])).
fof(f243,plain,(
  ! [X4,X21,X23,X22] : (sP24(X4,X21,X23,X22) <=> ? [X41,X42,X43,X44,X45] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.modSem.v'),X44))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X43),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.conSem.v'),X45))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X43),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X44))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP24])])).
fof(f244,plain,(
  ! [X21,X5,X23,X22] : (sP25(X21,X5,X23,X22) <=> ? [X34,X35,X36,X37,X38,X39,X40] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.string.char'),X35),s('type.modLang.exp',X36))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37),s('type.list.list'('type.string.char'),X35),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.modLang.exp',X36))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X39),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP25])])).
fof(f245,plain,(
  ! [X21,X5,X23,X22] : (sP26(X21,X5,X23,X22) <=> ? [X27,X28,X29,X30,X31,X32,X33] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28),s('type.list.list'('type.string.char'),X29))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28))),s('type.list.list'('type.string.char'),X29))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X32),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP26])])).
fof(f246,plain,(
  ! [X4,X21,X23,X22] : (sP27(X4,X21,X23,X22) <=> ? [X46,X47] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X46))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X47))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X46))),s('type.list.list'('type.conSem.v'),X47))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP27])])).
fof(f247,plain,(
  ! [X4,X21,X23,X22] : (sP28(X4,X21,X23,X22) <=> ? [X24,X25] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X24))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X25))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X24))),s('type.list.list'('type.conSem.v'),X25))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP28])])).
fof(f248,plain,(
  ! [X4,X14,X3,X16,X15] : (sP29(X4,X14,X3,X16,X15) <=> ((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X15) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.modSem.v'),X15) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X17),s('type.list.list'('type.modSem.v'),X18))) & s('type.list.list'('type.conSem.v'),X16) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X19),s('type.list.list'('type.conSem.v'),X20))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.modSem.v',X17))),s('type.conSem.v',X19)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X18))),s('type.list.list'('type.conSem.v'),X20)))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP29])])).
fof(f249,plain,(
  ! [X3,X6,X5,X8,X7] : (sP30(X3,X6,X5,X8,X7) <=> ((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13)))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP30])])).
fof(f250,plain,(
  ! [X3,X4,X5] : (sP31(X3,X4,X5) <=> ? [X21,X22,X23] : ((? [X48] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X48))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X48)))) | sP27(X4,X21,X23,X22) | sP24(X4,X21,X23,X22) | sP25(X21,X5,X23,X22) | sP26(X21,X5,X23,X22) | ? [X26] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X26))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26)))) | sP28(X4,X21,X23,X22)) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v',X22))),s('type.conSem.v',X23))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP31])])).
fof(f203,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X2)))) <=> ! [X3,X4,X5] : (? [X21,X22,X23] : ((? [X48] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X48))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X48)))) | ? [X46,X47] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X46))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X47))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X46))),s('type.list.list'('type.conSem.v'),X47))))) | ? [X41,X42,X43,X44,X45] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.modSem.v'),X44))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X43),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.conSem.v'),X45))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X43),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X44))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45))))) | ? [X34,X35,X36,X37,X38,X39,X40] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.string.char'),X35),s('type.modLang.exp',X36))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37),s('type.list.list'('type.string.char'),X35),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.modLang.exp',X36))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X39),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | ? [X27,X28,X29,X30,X31,X32,X33] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28),s('type.list.list'('type.string.char'),X29))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28))),s('type.list.list'('type.string.char'),X29))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X32),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | ? [X26] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X26))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26)))) | ? [X24,X25] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X24))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X25))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X24))),s('type.list.list'('type.conSem.v'),X25)))))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v',X22))),s('type.conSem.v',X23))))) | ? [X14,X15,X16] : (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X15) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.modSem.v'),X15) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X17),s('type.list.list'('type.modSem.v'),X18))) & s('type.list.list'('type.conSem.v'),X16) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X19),s('type.list.list'('type.conSem.v'),X20))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.modSem.v',X17))),s('type.conSem.v',X19)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X18))),s('type.list.list'('type.conSem.v'),X20)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X15))),s('type.list.list'('type.conSem.v'),X16))))) | ? [X6,X7,X8] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))))) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.modSem.v'),X1))),s('type.list.list'('type.conSem.v'),X2))))))),
  inference(flattening,[],[f202])).
fof(f202,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X2)))) <=> ! [X3,X4,X5] : ((? [X21,X22,X23] : ((? [X48] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X48))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X48)))) | ? [X46,X47] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X46))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X47))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X46))),s('type.list.list'('type.conSem.v'),X47))))) | ? [X41,X42,X43,X44,X45] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.modSem.v'),X44))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X43),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.conSem.v'),X45))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X43),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X44))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45))))) | ? [X34,X35,X36,X37,X38,X39,X40] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.string.char'),X35),s('type.modLang.exp',X36))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37),s('type.list.list'('type.string.char'),X35),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.modLang.exp',X36))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X39),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | ? [X27,X28,X29,X30,X31,X32,X33] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28),s('type.list.list'('type.string.char'),X29))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28))),s('type.list.list'('type.string.char'),X29))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X32),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | ? [X26] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X26))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26)))) | ? [X24,X25] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X24))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X25))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X24))),s('type.list.list'('type.conSem.v'),X25)))))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v',X22))),s('type.conSem.v',X23))))) | ? [X14,X15,X16] : (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X15) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.modSem.v'),X15) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X17),s('type.list.list'('type.modSem.v'),X18))) & s('type.list.list'('type.conSem.v'),X16) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X19),s('type.list.list'('type.conSem.v'),X20))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.modSem.v',X17))),s('type.conSem.v',X19)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X18))),s('type.list.list'('type.conSem.v'),X20)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X15))),s('type.list.list'('type.conSem.v'),X16))))) | ? [X6,X7,X8] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))))) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.modSem.v'),X1))),s('type.list.list'('type.conSem.v'),X2))))))),
  inference(ennf_transformation,[],[f148])).
fof(f148,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X2)))) <=> ! [X3,X4,X5] : ((! [X21,X22,X23] : ((? [X48] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X48))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X48)))) | ? [X46,X47] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X46))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X47))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X46))),s('type.list.list'('type.conSem.v'),X47))))) | ? [X41,X42,X43,X44,X45] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.modSem.v'),X44))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X43),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.conSem.v'),X45))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X43),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X44))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45))))) | ? [X34,X35,X36,X37,X38,X39,X40] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.string.char'),X35),s('type.modLang.exp',X36))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37),s('type.list.list'('type.string.char'),X35),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.modLang.exp',X36))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X39),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | ? [X27,X28,X29,X30,X31,X32,X33] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28),s('type.list.list'('type.string.char'),X29))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28))),s('type.list.list'('type.string.char'),X29))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X32),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | ? [X26] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X26))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26)))) | ? [X24,X25] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X24))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X25))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X24))),s('type.list.list'('type.conSem.v'),X25)))))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v',X22))),s('type.conSem.v',X23))))) & ! [X14,X15,X16] : (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X15) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.modSem.v'),X15) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X17),s('type.list.list'('type.modSem.v'),X18))) & s('type.list.list'('type.conSem.v'),X16) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X19),s('type.list.list'('type.conSem.v'),X20))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.modSem.v',X17))),s('type.conSem.v',X19)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X18))),s('type.list.list'('type.conSem.v'),X20)))))) => p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X15))),s('type.list.list'('type.conSem.v'),X16))))) & ! [X6,X7,X8] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13)))))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))))) => p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.modSem.v'),X1))),s('type.list.list'('type.conSem.v'),X2))))))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X5,X39,X40] : (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5),s('type.list.list'('type.modSem.v'),X39),s('type.list.list'('type.conSem.v'),X40)))) <=> ! [X15,X16,X17] : ((! [X32,X33,X34] : ((? [X18] : (s('type.modSem.v',X33) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X18))) & s('type.conSem.v',X34) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X18)))) | ? [X8,X9] : (s('type.modSem.v',X33) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X8))) & s('type.conSem.v',X34) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X9))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X16),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X32))),s('type.list.list'('type.modSem.v'),X8))),s('type.list.list'('type.conSem.v'),X9))))) | ? [X19,X20,X21,X8,X9] : (s('type.modSem.v',X33) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X19),s('type.semanticPrimitives.tid_or_exn',X20))))),s('type.list.list'('type.modSem.v'),X8))) & s('type.conSem.v',X34) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X21),s('type.semanticPrimitives.tid_or_exn',X20))))),s('type.list.list'('type.conSem.v'),X9))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X21),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X8))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X32),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X19),s('type.semanticPrimitives.tid_or_exn',X20))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X16),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X32))),s('type.list.list'('type.modSem.v'),X8))),s('type.list.list'('type.conSem.v'),X9))))) | ? [X22,X23,X24,X25,X26,X27,X28] : (s('type.modSem.v',X33) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X26),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.string.char'),X23),s('type.modLang.exp',X24))) & s('type.conSem.v',X34) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X25),s('type.list.list'('type.string.char'),X23),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.modLang.exp',X24))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X17),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X32))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X25)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X26),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X27),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X32))))) | ? [X22,X29,X23,X26,X25,X27,X28] : (s('type.modSem.v',X33) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X26),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X29),s('type.list.list'('type.string.char'),X23))) & s('type.conSem.v',X34) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X25),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X29))),s('type.list.list'('type.string.char'),X23))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X17),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X32))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X25)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X26),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X27),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X32))))) | ? [X30] : (s('type.modSem.v',X33) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X30))) & s('type.conSem.v',X34) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X30)))) | ? [X8,X9] : (s('type.modSem.v',X33) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X8))) & s('type.conSem.v',X34) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X9))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X16),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X32))),s('type.list.list'('type.modSem.v'),X8))),s('type.list.list'('type.conSem.v'),X9)))))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X15),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X32))),s('type.modSem.v',X33))),s('type.conSem.v',X34))))) & ! [X56,X57,X58] : (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X57) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X58)) | ? [X7,X8,X10,X9] : (s('type.list.list'('type.modSem.v'),X57) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X7),s('type.list.list'('type.modSem.v'),X8))) & s('type.list.list'('type.conSem.v'),X58) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X10),s('type.list.list'('type.conSem.v'),X9))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X15),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X56))),s('type.modSem.v',X7))),s('type.conSem.v',X10)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X16),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X56))),s('type.list.list'('type.modSem.v'),X8))),s('type.list.list'('type.conSem.v'),X9)))))) => p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X16),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X56))),s('type.list.list'('type.modSem.v'),X57))),s('type.list.list'('type.conSem.v'),X58))))) & ! [X35,X36,X37] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X36) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)) | ? [X23,X7,X22,X31,X10] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X36) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X23),s('type.modSem.v',X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X23),s('type.conSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X17),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X35))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X15),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X35))),s('type.modSem.v',X7))),s('type.conSem.v',X10)))))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X17),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X35))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X36))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)))))) => p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X16),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5))),s('type.list.list'('type.modSem.v'),X39))),s('type.list.list'('type.conSem.v'),X40))))))),
  file('thm.mod_to_conProof.v_rel_eqns|split|5','thm.mod_to_conProof.v_rel|49|_def')).
fof(f837,plain,(
  ( ! [X2,X0,X14,X12,X1,X13] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X13),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK244(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.modSem.v'),sK245(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK246(X14,X13,X12,X2,X1,X0))))) | sP30(X12,sK247(X14,X13,X12,X2,X1,X0),X14,sK249(X14,X13,X12,X2,X1,X0),sK248(X14,X13,X12,X2,X1,X0)) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X13),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.modSem.v'),X1))),s('type.list.list'('type.conSem.v'),X2)))) | sP31(X12,X13,X14) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X2))))) )),
  inference(cnf_transformation,[],[f446])).
fof(f838,plain,(
  ( ! [X2,X0,X14,X12,X1,X13] : (~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X14),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK247(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK248(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK249(X14,X13,X12,X2,X1,X0))))) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X13),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.modSem.v'),X1))),s('type.list.list'('type.conSem.v'),X2)))) | sP29(X13,sK244(X14,X13,X12,X2,X1,X0),X12,sK246(X14,X13,X12,X2,X1,X0),sK245(X14,X13,X12,X2,X1,X0)) | sP31(X12,X13,X14) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X2))))) )),
  inference(cnf_transformation,[],[f446])).
fof(f839,plain,(
  ( ! [X2,X0,X14,X12,X1,X13] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X13),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK244(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.modSem.v'),sK245(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK246(X14,X13,X12,X2,X1,X0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X14),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK247(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK248(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK249(X14,X13,X12,X2,X1,X0))))) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X13),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.modSem.v'),X1))),s('type.list.list'('type.conSem.v'),X2)))) | sP31(X12,X13,X14) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X2))))) )),
  inference(cnf_transformation,[],[f446])).
fof(f840,plain,(
  ( ! [X2,X0,X1] : (~sP31(sK250(X2,X1,X0),sK251(X2,X1,X0),sK252(X2,X1,X0)) | p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X2))))) )),
  inference(cnf_transformation,[],[f446])).
fof(f841,plain,(
  ( ! [X2,X0,X10,X1,X11,X9] : (~sP29(sK251(X2,X1,X0),X9,sK250(X2,X1,X0),X11,X10) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),sK251(X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s('type.list.list'('type.modSem.v'),X10))),s('type.list.list'('type.conSem.v'),X11)))) | p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X2))))) )),
  inference(cnf_transformation,[],[f446])).
fof(f842,plain,(
  ( ! [X6,X2,X0,X8,X7,X1] : (~sP30(sK250(X2,X1,X0),X6,sK252(X2,X1,X0),X8,X7) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),sK252(X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))) | p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X2))))) )),
  inference(cnf_transformation,[],[f446])).
fof(f843,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),sK251(X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.modSem.v'),X1))),s('type.list.list'('type.conSem.v'),X2)))) | p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X2))))) )),
  inference(cnf_transformation,[],[f446])).
fof(f846,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X3))) | p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X1))),s('type.conSem.v',X2)))) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X3))))) )),
  inference(cnf_transformation,[],[f449])).
fof(f449,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X1))),s('type.conSem.v',X2)))) | (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),sK253(X2,X1,X0))))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),sK253(X2,X1,X0)))))) & (! [X3] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X3)))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X3)))) | p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X1))),s('type.conSem.v',X2))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK253])],[f448])).
fof(f448,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X1))),s('type.conSem.v',X2)))) | ? [X4] : (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X4)))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X4))))) & (! [X3] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X3)))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X3)))) | p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X1))),s('type.conSem.v',X2))))))),
  inference(rectify,[],[f447])).
fof(f447,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X1))),s('type.conSem.v',X2)))) | ? [X3] : (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X3)))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X3))))) & (! [X3] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X3)))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X3)))) | p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X1))),s('type.conSem.v',X2))))))),
  inference(nnf_transformation,[],[f149])).
fof(f149,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X1))),s('type.conSem.v',X2)))) <=> ? [X3] : (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X3)))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X3)))))),
  inference(rectify,[],[f25])).
fof(f25,axiom,(
  ! [X6,X8,X7] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X8))),s('type.conSem.v',X7)))) <=> ? [X9] : (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.list.list'('type.modSem.v'),X8),s('type.list.list'('type.conSem.v'),X9)))) & s('type.conSem.v',X7) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X9)))))),
  file('thm.mod_to_conProof.v_rel_eqns|split|5','thm.mod_to_conProof.v_rel_eqns|split|3')).
fof(f4519,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X2)))) | p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X1))),s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X2))))))) )),
  inference(equality_resolution,[],[f846])).
fof(f6932,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.list.list'('type.conSem.v'),X5) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X4),s('type.list.list'('type.conSem.v'),X2))) | ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X3),s('type.conSem.v',X4)))) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X2)))) | sP23(X0,X5,'const.list.CONS_2'(s('type.modSem.v',X3),s('type.list.list'('type.modSem.v'),X1)))) )),
  inference(equality_resolution,[],[f778])).
fof(f9600,plain,(
  ( ! [X546,X549,X547,X548] : (sP23(X546,X548,X547) | s(bool,X549) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X546),s('type.list.list'('type.modSem.v'),X547),s('type.list.list'('type.conSem.v'),X548))) | s(bool,'T_0') = s(bool,X549)) )),
  inference(subsumption_resolution,[],[f8217,f531])).
fof(f8217,plain,(
  ( ! [X546,X549,X547,X548] : (~p(s(bool,'T_0')) | sP23(X546,X548,X547) | s(bool,X549) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X546),s('type.list.list'('type.modSem.v'),X547),s('type.list.list'('type.conSem.v'),X548))) | s(bool,'T_0') = s(bool,X549)) )),
  inference(superposition,[],[f779,f1319])).
fof(f9604,plain,(
  ( ! [X573,X569,X571,X572,X568,X570] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X568),s('type.list.list'('type.modSem.v'),X571),s('type.list.list'('type.conSem.v'),X572)))) | p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X568),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X569),s('type.list.list'('type.modSem.v'),X571))),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X570),s('type.list.list'('type.conSem.v'),X572)))))) | s(bool,X573) = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X568),s('type.modSem.v',X569),s('type.conSem.v',X570))) | s(bool,'T_0') = s(bool,X573)) )),
  inference(subsumption_resolution,[],[f8224,f531])).
fof(f8224,plain,(
  ( ! [X573,X569,X571,X572,X568,X570] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X568),s('type.list.list'('type.modSem.v'),X571),s('type.list.list'('type.conSem.v'),X572)))) | p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X568),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X569),s('type.list.list'('type.modSem.v'),X571))),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X570),s('type.list.list'('type.conSem.v'),X572)))))) | s(bool,X573) = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X568),s('type.modSem.v',X569),s('type.conSem.v',X570))) | s(bool,'T_0') = s(bool,X573)) )),
  inference(superposition,[],[f1019,f1319])).
fof(f9621,plain,(
  ( ! [X639,X640,X638,X641] : (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X640),s('type.list.list'('type.modSem.v'),X639),s('type.list.list'('type.conSem.v'),X638)))) | s(bool,X641) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),sK251(X638,X639,X640)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X640))),s('type.list.list'('type.modSem.v'),X639))),s('type.list.list'('type.conSem.v'),X638))) | s(bool,'T_0') = s(bool,X641)) )),
  inference(subsumption_resolution,[],[f8241,f531])).
fof(f8241,plain,(
  ( ! [X639,X640,X638,X641] : (~p(s(bool,'T_0')) | p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X640),s('type.list.list'('type.modSem.v'),X639),s('type.list.list'('type.conSem.v'),X638)))) | s(bool,X641) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),sK251(X638,X639,X640)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X640))),s('type.list.list'('type.modSem.v'),X639))),s('type.list.list'('type.conSem.v'),X638))) | s(bool,'T_0') = s(bool,X641)) )),
  inference(superposition,[],[f843,f1319])).
fof(f9602,plain,(
  ( ! [X561,X563,X560,X562] : (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X560),s('type.list.list'('type.modSem.v'),X561),s('type.list.list'('type.conSem.v'),sK253(X562,X561,X560))))) | s(bool,X563) = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X560),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X561))),s('type.conSem.v',X562))) | s(bool,'T_0') = s(bool,X563)) )),
  inference(subsumption_resolution,[],[f8222,f531])).
fof(f8222,plain,(
  ( ! [X561,X563,X560,X562] : (~p(s(bool,'T_0')) | p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X560),s('type.list.list'('type.modSem.v'),X561),s('type.list.list'('type.conSem.v'),sK253(X562,X561,X560))))) | s(bool,X563) = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X560),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X561))),s('type.conSem.v',X562))) | s(bool,'T_0') = s(bool,X563)) )),
  inference(superposition,[],[f844,f1319])).
fof(f844,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X1))),s('type.conSem.v',X2)))) | p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),sK253(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f449])).
fof(f9601,plain,(
  ( ! [X551,X552,X550] : (sP23(X550,'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X551) | s(bool,X552) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X550),s('type.list.list'('type.modSem.v'),X551),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X552)) ) | $spl4),
  inference(subsumption_resolution,[],[f8218,f531])).
fof(f8218,plain,(
  ( ! [X551,X552,X550] : (~p(s(bool,'T_0')) | sP23(X550,'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X551) | s(bool,X552) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X550),s('type.list.list'('type.modSem.v'),X551),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X552)) ) | $spl4),
  inference(superposition,[],[f2406,f1319])).
fof(f7065,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),X0),s('type.list.list'('type.conSem.v'),sK54)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),sK251('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X0,X1)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X0))),s('type.list.list'('type.conSem.v'),sK54))))) ) | $spl4),
  inference(forward_demodulation,[],[f7061,f1043])).
fof(f7061,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),sK251('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X0,X1)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X0))),s('type.list.list'('type.conSem.v'),sK54)))) | p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),X0),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56))))))) ) | $spl4),
  inference(superposition,[],[f843,f1043])).
fof(f2406,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),sK54)))) | sP23(X0,'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X1)) ) | $spl4),
  inference(superposition,[],[f779,f1043])).
fof(f2941,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X1),s('type.list.list'('type.modSem.v'),X2))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0'))))) )),
  inference(unit_resulting_resolution,[],[f2940,f779])).
fof(f2938,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X1),s('type.list.list'('type.conSem.v'),X2))))))) )),
  inference(unit_resulting_resolution,[],[f2935,f779])).
fof(f775,plain,(
  ( ! [X2,X0,X1] : (~sP23(X0,X1,X2) | s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X2) | p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),sK204(X2,X1,X0)),s('type.list.list'('type.conSem.v'),sK206(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f416])).
fof(f776,plain,(
  ( ! [X2,X0,X1] : (~sP23(X0,X1,X2) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X1) | p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),sK204(X2,X1,X0)),s('type.list.list'('type.conSem.v'),sK206(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f416])).
fof(f675,plain,(
  ( ! [X0,X1] : (~sP14(X0,X1) | p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK112(X1,X0)),s('type.list.list'('type.modSem.v'),sK113(X1,X0)),s('type.list.list'('type.conSem.v'),sK114(X1,X0)))))) )),
  inference(cnf_transformation,[],[f363])).
fof(f363,plain,(
  ! [X0,X1] : (~sP14(X0,X1) | (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK112(X1,X0)),s('type.list.list'('type.modSem.v'),sK113(X1,X0)),s('type.list.list'('type.conSem.v'),sK114(X1,X0))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK112(X1,X0)))),s('type.list.list'('type.modSem.v'),sK113(X1,X0)))),s('type.list.list'('type.conSem.v'),sK114(X1,X0))))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK112(X1,X0)))),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),sK113(X1,X0)))))),s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),sK114(X1,X0)))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK112,sK113,sK114])],[f362])).
fof(f362,plain,(
  ! [X0,X1] : (~sP14(X0,X1) | ? [X2,X3,X4] : (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.modSem.v'),X3),s('type.list.list'('type.conSem.v'),X4)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.list.list'('type.modSem.v'),X3))),s('type.list.list'('type.conSem.v'),X4)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X3))))),s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X4))))))))),
  inference(rectify,[],[f361])).
fof(f361,plain,(
  ! [X0,X1] : (~sP14(X0,X1) | ? [X16,X17,X18] : (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X16),s('type.list.list'('type.modSem.v'),X17),s('type.list.list'('type.conSem.v'),X18)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X16))),s('type.list.list'('type.modSem.v'),X17))),s('type.list.list'('type.conSem.v'),X18)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X16))),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X17))))),s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X18))))))))),
  inference(nnf_transformation,[],[f230])).
fof(f678,plain,(
  ( ! [X0,X1] : (~sP13(X0,X1) | p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK115(X1,X0)),s('type.list.list'('type.modSem.v'),sK116(X1,X0)),s('type.list.list'('type.conSem.v'),sK117(X1,X0)))))) )),
  inference(cnf_transformation,[],[f366])).
fof(f366,plain,(
  ! [X0,X1] : (~sP13(X0,X1) | (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK115(X1,X0)),s('type.list.list'('type.modSem.v'),sK116(X1,X0)),s('type.list.list'('type.conSem.v'),sK117(X1,X0))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK115(X1,X0)))),s('type.list.list'('type.modSem.v'),sK116(X1,X0)))),s('type.list.list'('type.conSem.v'),sK117(X1,X0))))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK115(X1,X0)))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),sK116(X1,X0)))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),sK117(X1,X0)))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK115,sK116,sK117])],[f365])).
fof(f365,plain,(
  ! [X0,X1] : (~sP13(X0,X1) | ? [X2,X3,X4] : (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.modSem.v'),X3),s('type.list.list'('type.conSem.v'),X4)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.list.list'('type.modSem.v'),X3))),s('type.list.list'('type.conSem.v'),X4)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X3))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X4))))))))),
  inference(rectify,[],[f364])).
fof(f364,plain,(
  ! [X0,X1] : (~sP13(X0,X1) | ? [X43,X44,X45] : (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X43),s('type.list.list'('type.modSem.v'),X44),s('type.list.list'('type.conSem.v'),X45)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X43))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X43))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X44))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X45))))))))),
  inference(nnf_transformation,[],[f229])).
fof(f690,plain,(
  ( ! [X0,X1] : (~sP10(X0,X1) | p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK134(X1,X0)),s('type.list.list'('type.modSem.v'),sK138(X1,X0)),s('type.list.list'('type.conSem.v'),sK139(X1,X0)))))) )),
  inference(cnf_transformation,[],[f375])).
fof(f375,plain,(
  ! [X0,X1] : (~sP10(X0,X1) | (s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',sK137(X1,X0)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),sK138(X1,X0)))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK134(X1,X0)),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK135(X1,X0)),s('type.semanticPrimitives.tid_or_exn',sK136(X1,X0)))))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK134(X1,X0)),s('type.list.list'('type.modSem.v'),sK138(X1,X0)),s('type.list.list'('type.conSem.v'),sK139(X1,X0))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK134(X1,X0)))),s('type.list.list'('type.modSem.v'),sK138(X1,X0)))),s('type.list.list'('type.conSem.v'),sK139(X1,X0))))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK134(X1,X0)))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK135(X1,X0)),s('type.semanticPrimitives.tid_or_exn',sK136(X1,X0)))))),s('type.list.list'('type.modSem.v'),sK138(X1,X0)))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',sK137(X1,X0)),s('type.semanticPrimitives.tid_or_exn',sK136(X1,X0)))))),s('type.list.list'('type.conSem.v'),sK139(X1,X0)))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK134,sK135,sK136,sK137,sK138,sK139])],[f374])).
fof(f374,plain,(
  ! [X0,X1] : (~sP10(X0,X1) | ? [X2,X3,X4,X5,X6,X7] : (s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X5),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X6))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.semanticPrimitives.tid_or_exn',X4))))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.modSem.v'),X6),s('type.list.list'('type.conSem.v'),X7)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.list.list'('type.modSem.v'),X6))),s('type.list.list'('type.conSem.v'),X7)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.semanticPrimitives.tid_or_exn',X4))))),s('type.list.list'('type.modSem.v'),X6))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X5),s('type.semanticPrimitives.tid_or_exn',X4))))),s('type.list.list'('type.conSem.v'),X7))))))))),
  inference(rectify,[],[f373])).
fof(f373,plain,(
  ! [X0,X1] : (~sP10(X0,X1) | ? [X37,X38,X39,X40,X41,X42] : (s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X40),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X41))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X37),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X38),s('type.semanticPrimitives.tid_or_exn',X39))))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X37),s('type.list.list'('type.modSem.v'),X41),s('type.list.list'('type.conSem.v'),X42)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X37))),s('type.list.list'('type.modSem.v'),X41))),s('type.list.list'('type.conSem.v'),X42)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X37))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X38),s('type.semanticPrimitives.tid_or_exn',X39))))),s('type.list.list'('type.modSem.v'),X41))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X40),s('type.semanticPrimitives.tid_or_exn',X39))))),s('type.list.list'('type.conSem.v'),X42))))))))),
  inference(nnf_transformation,[],[f226])).
fof(f700,plain,(
  ( ! [X0,X1] : (~sP8(X0,X1) | p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK146(X1,X0)),s('type.list.list'('type.modSem.v'),sK148(X1,X0)),s('type.list.list'('type.conSem.v'),sK150(X1,X0)))))) )),
  inference(cnf_transformation,[],[f381])).
fof(f381,plain,(
  ! [X0,X1] : (~sP8(X0,X1) | (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK146(X1,X0)),s('type.modSem.v',sK147(X1,X0)),s('type.conSem.v',sK149(X1,X0))))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK146(X1,X0)))),s('type.modSem.v',sK147(X1,X0)))),s('type.conSem.v',sK149(X1,X0))))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK146(X1,X0)),s('type.list.list'('type.modSem.v'),sK148(X1,X0)),s('type.list.list'('type.conSem.v'),sK150(X1,X0))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK146(X1,X0)))),s('type.list.list'('type.modSem.v'),sK148(X1,X0)))),s('type.list.list'('type.conSem.v'),sK150(X1,X0))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK146(X1,X0)))),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK147(X1,X0)),s('type.list.list'('type.modSem.v'),sK148(X1,X0)))))),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',sK149(X1,X0)),s('type.list.list'('type.conSem.v'),sK150(X1,X0)))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK146,sK147,sK148,sK149,sK150])],[f380])).
fof(f380,plain,(
  ! [X0,X1] : (~sP8(X0,X1) | ? [X2,X3,X4,X5,X6] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.modSem.v',X3),s('type.conSem.v',X5)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.modSem.v',X3))),s('type.conSem.v',X5)))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.modSem.v'),X4),s('type.list.list'('type.conSem.v'),X6)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.list.list'('type.modSem.v'),X4))),s('type.list.list'('type.conSem.v'),X6)))) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X3),s('type.list.list'('type.modSem.v'),X4))))),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X5),s('type.list.list'('type.conSem.v'),X6))))))))),
  inference(rectify,[],[f379])).
fof(f379,plain,(
  ! [X1,X0] : (~sP8(X1,X0) | ? [X10,X11,X12,X13,X14] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10),s('type.modSem.v',X11),s('type.conSem.v',X13)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10))),s('type.modSem.v',X11))),s('type.conSem.v',X13)))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10),s('type.list.list'('type.modSem.v'),X12),s('type.list.list'('type.conSem.v'),X14)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10))),s('type.list.list'('type.modSem.v'),X12))),s('type.list.list'('type.conSem.v'),X14)))) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10))),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X11),s('type.list.list'('type.modSem.v'),X12))))),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X13),s('type.list.list'('type.conSem.v'),X14))))))))),
  inference(nnf_transformation,[],[f224])).
fof(f653,plain,(
  ( ! [X2,X0,X10,X1,X11,X9] : (~sP7(X0,X1,X2) | ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9),s('type.modSem.v',X10),s('type.conSem.v',X11)))) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s('type.modSem.v',X10))),s('type.conSem.v',X11))))) )),
  inference(cnf_transformation,[],[f343])).
fof(f703,plain,(
  ( ! [X2,X0,X10,X1,X11,X9] : (~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK153(X2,X1,X0)))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK154(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK154(X2,X1,X0))))))) | ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9),s('type.modSem.v',X10),s('type.conSem.v',X11)))) | sP9(X2,X0) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK156(X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) | sP8(X1,X0) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK155(X2,X1,X0)))),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) | sP14(X0,X1) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s('type.modSem.v',X10))),s('type.conSem.v',X11)))) | sP12(X0,X2) | sP11(X0,X2) | sP10(X0,X1) | sP13(X0,X1) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK151(X2,X1,X0)))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK152(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK152(X2,X1,X0)))))))) )),
  inference(cnf_transformation,[],[f383])).
fof(f761,plain,(
  ( ! [X2,X0,X14,X12,X1,X13] : (~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X2)))) | sP21(X12,sK197(X14,X13,X12,X2,X1,X0),X14,sK199(X14,X13,X12,X2,X1,X0),sK198(X14,X13,X12,X2,X1,X0)) | sP20(X13,sK194(X14,X13,X12,X2,X1,X0),X12,sK196(X14,X13,X12,X2,X1,X0),sK195(X14,X13,X12,X2,X1,X0)) | sP22(X12,X13,X14) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X12),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.modSem.v',X1))),s('type.conSem.v',X2))))) )),
  inference(cnf_transformation,[],[f412])).
fof(f412,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X2)))) | ! [X12,X13,X14] : (sP22(X12,X13,X14) | (sP20(X13,sK194(X14,X13,X12,X2,X1,X0),X12,sK196(X14,X13,X12,X2,X1,X0),sK195(X14,X13,X12,X2,X1,X0)) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X13),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK194(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.modSem.v'),sK195(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK196(X14,X13,X12,X2,X1,X0)))))) | (sP21(X12,sK197(X14,X13,X12,X2,X1,X0),X14,sK199(X14,X13,X12,X2,X1,X0),sK198(X14,X13,X12,X2,X1,X0)) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X14),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK197(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK198(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK199(X14,X13,X12,X2,X1,X0)))))) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X12),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.modSem.v',X1))),s('type.conSem.v',X2)))))) & ((~sP22(sK200(X2,X1,X0),sK201(X2,X1,X0),sK202(X2,X1,X0)) & ! [X9,X10,X11] : (~sP20(sK201(X2,X1,X0),X9,sK200(X2,X1,X0),X11,X10) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),sK201(X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s('type.list.list'('type.modSem.v'),X10))),s('type.list.list'('type.conSem.v'),X11))))) & ! [X6,X7,X8] : (~sP21(sK200(X2,X1,X0),X6,sK202(X2,X1,X0),X8,X7) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),sK202(X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.modSem.v',X1))),s('type.conSem.v',X2))))) | p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X2))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK194,sK195,sK196,sK197,sK198,sK199,sK200,sK201,sK202])],[f411])).
fof(f411,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X2)))) | ! [X12,X13,X14] : (sP22(X12,X13,X14) | ? [X18,X19,X20] : (sP20(X13,X18,X12,X20,X19) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X13),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X18))),s('type.list.list'('type.modSem.v'),X19))),s('type.list.list'('type.conSem.v'),X20))))) | ? [X15,X16,X17] : (sP21(X12,X15,X14,X17,X16) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X14),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X15))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X16))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X17))))) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X12),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.modSem.v',X1))),s('type.conSem.v',X2)))))) & (? [X3,X4,X5] : (~sP22(X3,X4,X5) & ! [X9,X10,X11] : (~sP20(X4,X9,X3,X11,X10) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s('type.list.list'('type.modSem.v'),X10))),s('type.list.list'('type.conSem.v'),X11))))) & ! [X6,X7,X8] : (~sP21(X3,X6,X5,X8,X7) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.modSem.v',X1))),s('type.conSem.v',X2))))) | p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X2))))))),
  inference(rectify,[],[f410])).
fof(f410,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X2)))) | ! [X3,X4,X5] : (sP22(X3,X4,X5) | ? [X14,X15,X16] : (sP20(X4,X14,X3,X16,X15) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X15))),s('type.list.list'('type.conSem.v'),X16))))) | ? [X6,X7,X8] : (sP21(X3,X6,X5,X8,X7) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))))) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.modSem.v',X1))),s('type.conSem.v',X2)))))) & (? [X3,X4,X5] : (~sP22(X3,X4,X5) & ! [X14,X15,X16] : (~sP20(X4,X14,X3,X16,X15) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X15))),s('type.list.list'('type.conSem.v'),X16))))) & ! [X6,X7,X8] : (~sP21(X3,X6,X5,X8,X7) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.modSem.v',X1))),s('type.conSem.v',X2))))) | p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X2))))))),
  inference(nnf_transformation,[],[f240])).
fof(f240,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X2)))) <=> ! [X3,X4,X5] : (sP22(X3,X4,X5) | ? [X14,X15,X16] : (sP20(X4,X14,X3,X16,X15) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X15))),s('type.list.list'('type.conSem.v'),X16))))) | ? [X6,X7,X8] : (sP21(X3,X6,X5,X8,X7) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))))) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.modSem.v',X1))),s('type.conSem.v',X2))))))),
  inference(definition_folding,[],[f201,f239,f238,f237,f236,f235,f234,f233,f232])).
fof(f232,plain,(
  ! [X4,X21,X23,X22] : (sP15(X4,X21,X23,X22) <=> ? [X41,X42,X43,X44,X45] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.modSem.v'),X44))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X43),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.conSem.v'),X45))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X43),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X44))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP15])])).
fof(f233,plain,(
  ! [X21,X5,X23,X22] : (sP16(X21,X5,X23,X22) <=> ? [X34,X35,X36,X37,X38,X39,X40] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.string.char'),X35),s('type.modLang.exp',X36))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37),s('type.list.list'('type.string.char'),X35),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.modLang.exp',X36))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X39),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP16])])).
fof(f234,plain,(
  ! [X21,X5,X23,X22] : (sP17(X21,X5,X23,X22) <=> ? [X27,X28,X29,X30,X31,X32,X33] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28),s('type.list.list'('type.string.char'),X29))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28))),s('type.list.list'('type.string.char'),X29))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X32),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP17])])).
fof(f235,plain,(
  ! [X4,X21,X23,X22] : (sP18(X4,X21,X23,X22) <=> ? [X46,X47] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X46))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X47))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X46))),s('type.list.list'('type.conSem.v'),X47))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP18])])).
fof(f236,plain,(
  ! [X4,X21,X23,X22] : (sP19(X4,X21,X23,X22) <=> ? [X24,X25] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X24))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X25))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X24))),s('type.list.list'('type.conSem.v'),X25))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP19])])).
fof(f237,plain,(
  ! [X4,X14,X3,X16,X15] : (sP20(X4,X14,X3,X16,X15) <=> ((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X15) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.modSem.v'),X15) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X17),s('type.list.list'('type.modSem.v'),X18))) & s('type.list.list'('type.conSem.v'),X16) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X19),s('type.list.list'('type.conSem.v'),X20))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.modSem.v',X17))),s('type.conSem.v',X19)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X18))),s('type.list.list'('type.conSem.v'),X20)))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP20])])).
fof(f238,plain,(
  ! [X3,X6,X5,X8,X7] : (sP21(X3,X6,X5,X8,X7) <=> ((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13)))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP21])])).
fof(f239,plain,(
  ! [X3,X4,X5] : (sP22(X3,X4,X5) <=> ? [X21,X22,X23] : ((? [X48] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X48))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X48)))) | sP18(X4,X21,X23,X22) | sP15(X4,X21,X23,X22) | sP16(X21,X5,X23,X22) | sP17(X21,X5,X23,X22) | ? [X26] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X26))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26)))) | sP19(X4,X21,X23,X22)) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v',X22))),s('type.conSem.v',X23))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP22])])).
fof(f201,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X2)))) <=> ! [X3,X4,X5] : (? [X21,X22,X23] : ((? [X48] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X48))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X48)))) | ? [X46,X47] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X46))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X47))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X46))),s('type.list.list'('type.conSem.v'),X47))))) | ? [X41,X42,X43,X44,X45] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.modSem.v'),X44))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X43),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.conSem.v'),X45))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X43),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X44))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45))))) | ? [X34,X35,X36,X37,X38,X39,X40] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.string.char'),X35),s('type.modLang.exp',X36))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37),s('type.list.list'('type.string.char'),X35),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.modLang.exp',X36))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X39),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | ? [X27,X28,X29,X30,X31,X32,X33] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28),s('type.list.list'('type.string.char'),X29))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28))),s('type.list.list'('type.string.char'),X29))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X32),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | ? [X26] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X26))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26)))) | ? [X24,X25] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X24))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X25))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X24))),s('type.list.list'('type.conSem.v'),X25)))))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v',X22))),s('type.conSem.v',X23))))) | ? [X14,X15,X16] : (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X15) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.modSem.v'),X15) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X17),s('type.list.list'('type.modSem.v'),X18))) & s('type.list.list'('type.conSem.v'),X16) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X19),s('type.list.list'('type.conSem.v'),X20))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.modSem.v',X17))),s('type.conSem.v',X19)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X18))),s('type.list.list'('type.conSem.v'),X20)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X15))),s('type.list.list'('type.conSem.v'),X16))))) | ? [X6,X7,X8] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))))) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.modSem.v',X1))),s('type.conSem.v',X2))))))),
  inference(flattening,[],[f200])).
fof(f200,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X2)))) <=> ! [X3,X4,X5] : ((? [X21,X22,X23] : ((? [X48] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X48))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X48)))) | ? [X46,X47] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X46))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X47))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X46))),s('type.list.list'('type.conSem.v'),X47))))) | ? [X41,X42,X43,X44,X45] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.modSem.v'),X44))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X43),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.conSem.v'),X45))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X43),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X44))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45))))) | ? [X34,X35,X36,X37,X38,X39,X40] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.string.char'),X35),s('type.modLang.exp',X36))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37),s('type.list.list'('type.string.char'),X35),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.modLang.exp',X36))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X39),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | ? [X27,X28,X29,X30,X31,X32,X33] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28),s('type.list.list'('type.string.char'),X29))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28))),s('type.list.list'('type.string.char'),X29))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X32),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | ? [X26] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X26))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26)))) | ? [X24,X25] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X24))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X25))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X24))),s('type.list.list'('type.conSem.v'),X25)))))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v',X22))),s('type.conSem.v',X23))))) | ? [X14,X15,X16] : (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X15) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.modSem.v'),X15) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X17),s('type.list.list'('type.modSem.v'),X18))) & s('type.list.list'('type.conSem.v'),X16) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X19),s('type.list.list'('type.conSem.v'),X20))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.modSem.v',X17))),s('type.conSem.v',X19)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X18))),s('type.list.list'('type.conSem.v'),X20)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X15))),s('type.list.list'('type.conSem.v'),X16))))) | ? [X6,X7,X8] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))))) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.modSem.v',X1))),s('type.conSem.v',X2))))))),
  inference(ennf_transformation,[],[f146])).
fof(f146,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X2)))) <=> ! [X3,X4,X5] : ((! [X21,X22,X23] : ((? [X48] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X48))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X48)))) | ? [X46,X47] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X46))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X47))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X46))),s('type.list.list'('type.conSem.v'),X47))))) | ? [X41,X42,X43,X44,X45] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.modSem.v'),X44))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X43),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.conSem.v'),X45))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X43),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X44))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45))))) | ? [X34,X35,X36,X37,X38,X39,X40] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.string.char'),X35),s('type.modLang.exp',X36))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37),s('type.list.list'('type.string.char'),X35),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.modLang.exp',X36))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X39),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | ? [X27,X28,X29,X30,X31,X32,X33] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28),s('type.list.list'('type.string.char'),X29))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28))),s('type.list.list'('type.string.char'),X29))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X32),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | ? [X26] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X26))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26)))) | ? [X24,X25] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X24))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X25))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X24))),s('type.list.list'('type.conSem.v'),X25)))))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v',X22))),s('type.conSem.v',X23))))) & ! [X14,X15,X16] : (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X15) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.modSem.v'),X15) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X17),s('type.list.list'('type.modSem.v'),X18))) & s('type.list.list'('type.conSem.v'),X16) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X19),s('type.list.list'('type.conSem.v'),X20))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.modSem.v',X17))),s('type.conSem.v',X19)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X18))),s('type.list.list'('type.conSem.v'),X20)))))) => p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X15))),s('type.list.list'('type.conSem.v'),X16))))) & ! [X6,X7,X8] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13)))))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.modSem.v',X1))),s('type.conSem.v',X2))))))),
  inference(rectify,[],[f19])).
fof(f19,axiom,(
  ! [X5,X39,X40] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5),s('type.modSem.v',X39),s('type.conSem.v',X40)))) <=> ! [X15,X16,X17] : ((! [X53,X54,X55] : ((? [X18] : (s('type.modSem.v',X54) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X18))) & s('type.conSem.v',X55) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X18)))) | ? [X8,X9] : (s('type.modSem.v',X54) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X8))) & s('type.conSem.v',X55) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X9))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X16),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X53))),s('type.list.list'('type.modSem.v'),X8))),s('type.list.list'('type.conSem.v'),X9))))) | ? [X19,X20,X21,X8,X9] : (s('type.modSem.v',X54) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X19),s('type.semanticPrimitives.tid_or_exn',X20))))),s('type.list.list'('type.modSem.v'),X8))) & s('type.conSem.v',X55) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X21),s('type.semanticPrimitives.tid_or_exn',X20))))),s('type.list.list'('type.conSem.v'),X9))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X21),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X8))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X53),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X19),s('type.semanticPrimitives.tid_or_exn',X20))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X16),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X53))),s('type.list.list'('type.modSem.v'),X8))),s('type.list.list'('type.conSem.v'),X9))))) | ? [X22,X23,X24,X25,X26,X27,X28] : (s('type.modSem.v',X54) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X26),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.string.char'),X23),s('type.modLang.exp',X24))) & s('type.conSem.v',X55) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X25),s('type.list.list'('type.string.char'),X23),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.modLang.exp',X24))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X17),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X53))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X25)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X26),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X27),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X53))))) | ? [X22,X29,X23,X26,X25,X27,X28] : (s('type.modSem.v',X54) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X26),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X29),s('type.list.list'('type.string.char'),X23))) & s('type.conSem.v',X55) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X25),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X29))),s('type.list.list'('type.string.char'),X23))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X17),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X53))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X25)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X26),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X27),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X53))))) | ? [X30] : (s('type.modSem.v',X54) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X30))) & s('type.conSem.v',X55) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X30)))) | ? [X8,X9] : (s('type.modSem.v',X54) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X8))) & s('type.conSem.v',X55) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X9))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X16),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X53))),s('type.list.list'('type.modSem.v'),X8))),s('type.list.list'('type.conSem.v'),X9)))))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X15),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X53))),s('type.modSem.v',X54))),s('type.conSem.v',X55))))) & ! [X12,X13,X14] : (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X13) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X14)) | ? [X7,X8,X10,X9] : (s('type.list.list'('type.modSem.v'),X13) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X7),s('type.list.list'('type.modSem.v'),X8))) & s('type.list.list'('type.conSem.v'),X14) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X10),s('type.list.list'('type.conSem.v'),X9))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X15),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X12))),s('type.modSem.v',X7))),s('type.conSem.v',X10)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X16),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X12))),s('type.list.list'('type.modSem.v'),X8))),s('type.list.list'('type.conSem.v'),X9)))))) => p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X16),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X12))),s('type.list.list'('type.modSem.v'),X13))),s('type.list.list'('type.conSem.v'),X14))))) & ! [X35,X36,X37] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X36) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)) | ? [X23,X7,X22,X31,X10] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X36) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X23),s('type.modSem.v',X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X23),s('type.conSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X17),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X35))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X15),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X35))),s('type.modSem.v',X7))),s('type.conSem.v',X10)))))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X17),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X35))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X36))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)))))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X15),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5))),s('type.modSem.v',X39))),s('type.conSem.v',X40))))))),
  file('thm.mod_to_conProof.v_rel_eqns|split|5','thm.mod_to_conProof.v_rel2_def')).
fof(f762,plain,(
  ( ! [X2,X0,X14,X12,X1,X13] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X13),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK194(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.modSem.v'),sK195(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK196(X14,X13,X12,X2,X1,X0))))) | sP21(X12,sK197(X14,X13,X12,X2,X1,X0),X14,sK199(X14,X13,X12,X2,X1,X0),sK198(X14,X13,X12,X2,X1,X0)) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X12),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.modSem.v',X1))),s('type.conSem.v',X2)))) | sP22(X12,X13,X14) | ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X2))))) )),
  inference(cnf_transformation,[],[f412])).
fof(f763,plain,(
  ( ! [X2,X0,X14,X12,X1,X13] : (~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X14),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK197(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK198(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK199(X14,X13,X12,X2,X1,X0))))) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X12),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.modSem.v',X1))),s('type.conSem.v',X2)))) | sP20(X13,sK194(X14,X13,X12,X2,X1,X0),X12,sK196(X14,X13,X12,X2,X1,X0),sK195(X14,X13,X12,X2,X1,X0)) | sP22(X12,X13,X14) | ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X2))))) )),
  inference(cnf_transformation,[],[f412])).
fof(f764,plain,(
  ( ! [X2,X0,X14,X12,X1,X13] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X13),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK194(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.modSem.v'),sK195(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK196(X14,X13,X12,X2,X1,X0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X14),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK197(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK198(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK199(X14,X13,X12,X2,X1,X0))))) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X12),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.modSem.v',X1))),s('type.conSem.v',X2)))) | sP22(X12,X13,X14) | ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X2))))) )),
  inference(cnf_transformation,[],[f412])).
fof(f765,plain,(
  ( ! [X2,X0,X1] : (~sP22(sK200(X2,X1,X0),sK201(X2,X1,X0),sK202(X2,X1,X0)) | p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X2))))) )),
  inference(cnf_transformation,[],[f412])).
fof(f766,plain,(
  ( ! [X2,X0,X10,X1,X11,X9] : (~sP20(sK201(X2,X1,X0),X9,sK200(X2,X1,X0),X11,X10) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),sK201(X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s('type.list.list'('type.modSem.v'),X10))),s('type.list.list'('type.conSem.v'),X11)))) | p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X2))))) )),
  inference(cnf_transformation,[],[f412])).
fof(f767,plain,(
  ( ! [X6,X2,X0,X8,X7,X1] : (~sP21(sK200(X2,X1,X0),X6,sK202(X2,X1,X0),X8,X7) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),sK202(X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))) | p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X2))))) )),
  inference(cnf_transformation,[],[f412])).
fof(f768,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.modSem.v',X1))),s('type.conSem.v',X2)))) | p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X2))))) )),
  inference(cnf_transformation,[],[f412])).
fof(f9622,plain,(
  ( ! [X644,X642,X645,X643] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X644),s('type.modSem.v',X643),s('type.conSem.v',X642)))) | s(bool,X645) = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(X642,X643,X644)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X644))),s('type.modSem.v',X643))),s('type.conSem.v',X642))) | s(bool,'T_0') = s(bool,X645)) )),
  inference(subsumption_resolution,[],[f8242,f531])).
fof(f8242,plain,(
  ( ! [X644,X642,X645,X643] : (~p(s(bool,'T_0')) | p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X644),s('type.modSem.v',X643),s('type.conSem.v',X642)))) | s(bool,X645) = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(X642,X643,X644)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X644))),s('type.modSem.v',X643))),s('type.conSem.v',X642))) | s(bool,'T_0') = s(bool,X645)) )),
  inference(superposition,[],[f768,f1319])).
fof(f773,plain,(
  ( ! [X2,X0,X1] : (~sP23(X0,X1,X2) | s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X2) | p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',sK203(X2,X1,X0)),s('type.conSem.v',sK205(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f416])).
fof(f774,plain,(
  ( ! [X2,X0,X1] : (~sP23(X0,X1,X2) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X1) | p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',sK203(X2,X1,X0)),s('type.conSem.v',sK205(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f416])).
fof(f845,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X1))),s('type.conSem.v',X2)))) | s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),sK253(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f449])).
fof(f695,plain,(
  ( ! [X0,X1] : (~sP9(X0,X1) | p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK140(X1,X0)),s('type.modSem.v',sK142(X1,X0)),s('type.conSem.v',sK145(X1,X0)))))) )),
  inference(cnf_transformation,[],[f378])).
fof(f378,plain,(
  ! [X0,X1] : (~sP9(X0,X1) | (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK140(X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK143(X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK144(X1,X0))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK140(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK143(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK144(X1,X0))))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK140(X1,X0)),s('type.modSem.v',sK142(X1,X0)),s('type.conSem.v',sK145(X1,X0))))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK140(X1,X0)))),s('type.modSem.v',sK142(X1,X0)))),s('type.conSem.v',sK145(X1,X0))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK140(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK141(X1,X0)),s('type.modSem.v',sK142(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK143(X1,X0)))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK141(X1,X0)),s('type.conSem.v',sK145(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK144(X1,X0)))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK140,sK141,sK142,sK143,sK144,sK145])],[f377])).
fof(f377,plain,(
  ! [X0,X1] : (~sP9(X0,X1) | ? [X2,X3,X4,X5,X6,X7] : (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6)))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.modSem.v',X4),s('type.conSem.v',X7)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.modSem.v',X4))),s('type.conSem.v',X7)))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.modSem.v',X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X5))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.conSem.v',X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6))))))))),
  inference(rectify,[],[f376])).
fof(f376,plain,(
  ! [X2,X0] : (~sP9(X2,X0) | ? [X3,X4,X5,X6,X7,X8] : (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.modSem.v',X5),s('type.conSem.v',X8)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X5))),s('type.conSem.v',X8)))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.modSem.v',X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X6))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.conSem.v',X8))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7))))))))),
  inference(nnf_transformation,[],[f225])).
fof(f698,plain,(
  ( ! [X0,X1] : (~sP8(X0,X1) | p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK146(X1,X0)),s('type.modSem.v',sK147(X1,X0)),s('type.conSem.v',sK149(X1,X0)))))) )),
  inference(cnf_transformation,[],[f381])).
fof(f586,plain,(
  ( ! [X4,X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK58(X2,X1,X0))))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK57(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f307])).
fof(f307,plain,(
  ! [X0,X1,X2] : ((p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK57(X2,X1,X0))))) & ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK57(X2,X1,X0)))))) | ! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK58(X2,X1,X0))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK57,sK58])],[f306])).
fof(f306,plain,(
  ! [X0,X1,X2] : (? [X5] : (p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X5)))) & ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5))))) | ! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) | ? [X3] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))))),
  inference(rectify,[],[f180])).
fof(f180,plain,(
  ! [X0,X1,X2] : (? [X3] : (p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) & ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) | ! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) | ? [X5] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))))),
  inference(flattening,[],[f179])).
fof(f179,plain,(
  ! [X0,X1,X2] : (? [X3] : (p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) & ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) | (! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) | ? [X5] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5))))))),
  inference(ennf_transformation,[],[f106])).
fof(f106,plain,(
  ! [X0,X1,X2] : (! [X3] : (p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) => p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) => (? [X4] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) => ? [X5] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5))))))),
  inference(flattening,[],[f105])).
fof(f105,plain,(
  ! [X0] : ! [X1,X2] : (! [X3] : (p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) => p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) => (? [X4] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) => ? [X5] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5))))))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X47] : ! [X48,X49] : (! [X23] : (p(s(bool,happ(s(fun(X47,bool),X49),s(X47,X23)))) => p(s(bool,happ(s(fun(X47,bool),X48),s(X47,X23))))) => (? [X23] : p(s(bool,happ(s(fun(X47,bool),X49),s(X47,X23)))) => ? [X23] : p(s(bool,happ(s(fun(X47,bool),X48),s(X47,X23))))))),
  file('thm.mod_to_conProof.v_rel_eqns|split|5','thm.bool.MONO_EXISTS')).
fof(f587,plain,(
  ( ! [X4,X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK57(X2,X1,X0))))) | ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK58(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f307])).
fof(f591,plain,(
  ( ! [X2,X0,X5,X1] : (~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK59(X2,X1,X0))))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X5)))) | ~p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f312])).
fof(f312,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,X1)) | ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK59(X2,X1,X0))))) | ! [X5] : (p(s(bool,X1)) & p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X5)))))) & ((~p(s(bool,X1)) | ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK60(X2,X1,X0)))))) | (p(s(bool,X1)) & ! [X3] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK59,sK60])],[f311])).
fof(f311,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,X1)) | ? [X6] : ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X6)))) | ! [X5] : (p(s(bool,X1)) & p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X5)))))) & (? [X4] : (~p(s(bool,X1)) | ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))) | (p(s(bool,X1)) & ! [X3] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))))))),
  inference(rectify,[],[f310])).
fof(f310,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,X1)) | ? [X3] : ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) | ! [X4] : (p(s(bool,X1)) & p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))))) & (? [X4] : (~p(s(bool,X1)) | ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))) | (p(s(bool,X1)) & ! [X3] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))))))),
  inference(flattening,[],[f309])).
fof(f309,plain,(
  ! [X0,X1,X2] : (((~p(s(bool,X1)) | ? [X3] : ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))) | ! [X4] : (p(s(bool,X1)) & p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))))) & (? [X4] : (~p(s(bool,X1)) | ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))) | (p(s(bool,X1)) & ! [X3] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))))))),
  inference(nnf_transformation,[],[f110])).
fof(f110,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X1)) & ! [X3] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))) <=> ! [X4] : (p(s(bool,X1)) & p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))))),
  inference(flattening,[],[f109])).
fof(f109,plain,(
  ! [X0] : ! [X1,X2] : ((p(s(bool,X1)) & ! [X3] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))) <=> ! [X4] : (p(s(bool,X1)) & p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))))),
  inference(rectify,[],[f56])).
fof(f56,axiom,(
  ! [X47] : ! [X49,X48] : ((p(s(bool,X49)) & ! [X23] : p(s(bool,happ(s(fun(X47,bool),X48),s(X47,X23))))) <=> ! [X23] : (p(s(bool,X49)) & p(s(bool,happ(s(fun(X47,bool),X48),s(X47,X23))))))),
  file('thm.mod_to_conProof.v_rel_eqns|split|5','thm.bool.RIGHT_AND_FORALL_THM')).
fof(f593,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK60(X2,X1,X0))))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) | ~p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f312])).
fof(f594,plain,(
  ( ! [X2,X0,X5,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK61(X2,X1,X0))))) | ~p(s(bool,X2)) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5))))) )),
  inference(cnf_transformation,[],[f316])).
fof(f316,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK61(X2,X1,X0))))) | ~p(s(bool,X2)) | ! [X5] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))) & p(s(bool,X2)))) & ((~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK62(X2,X1,X0))))) | ~p(s(bool,X2))) | (! [X3] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,X2)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK61,sK62])],[f315])).
fof(f315,plain,(
  ! [X0,X1,X2] : ((? [X6] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X6)))) | ~p(s(bool,X2)) | ! [X5] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))) & p(s(bool,X2)))) & (? [X4] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | ~p(s(bool,X2))) | (! [X3] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,X2)))))),
  inference(rectify,[],[f314])).
fof(f314,plain,(
  ! [X0,X1,X2] : ((? [X3] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | ~p(s(bool,X2)) | ! [X4] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) & p(s(bool,X2)))) & (? [X4] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | ~p(s(bool,X2))) | (! [X3] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,X2)))))),
  inference(flattening,[],[f313])).
fof(f313,plain,(
  ! [X0,X1,X2] : (((? [X3] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | ~p(s(bool,X2))) | ! [X4] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) & p(s(bool,X2)))) & (? [X4] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | ~p(s(bool,X2))) | (! [X3] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,X2)))))),
  inference(nnf_transformation,[],[f112])).
fof(f112,plain,(
  ! [X0,X1,X2] : ((! [X3] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,X2))) <=> ! [X4] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) & p(s(bool,X2))))),
  inference(flattening,[],[f111])).
fof(f111,plain,(
  ! [X0] : ! [X1,X2] : ((! [X3] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,X2))) <=> ! [X4] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) & p(s(bool,X2))))),
  inference(rectify,[],[f55])).
fof(f55,axiom,(
  ! [X47] : ! [X49,X48] : ((! [X23] : p(s(bool,happ(s(fun(X47,bool),X49),s(X47,X23)))) & p(s(bool,X48))) <=> ! [X23] : (p(s(bool,happ(s(fun(X47,bool),X49),s(X47,X23)))) & p(s(bool,X48))))),
  file('thm.mod_to_conProof.v_rel_eqns|split|5','thm.bool.LEFT_AND_FORALL_THM')).
fof(f596,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK62(X2,X1,X0))))) | ~p(s(bool,X2)) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) )),
  inference(cnf_transformation,[],[f316])).
fof(f599,plain,(
  ( ! [X2,X0,X5,X1] : (~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK63(X2,X1,X0))))) | p(s(bool,X1)) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X5))))) )),
  inference(cnf_transformation,[],[f320])).
fof(f320,plain,(
  ! [X0,X1,X2] : (((~p(s(bool,X1)) & ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK63(X2,X1,X0)))))) | p(s(bool,X1)) | ! [X5] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X5))))) & ((~p(s(bool,X1)) & ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK64(X2,X1,X0)))))) | ! [X3] : (p(s(bool,X1)) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK63,sK64])],[f319])).
fof(f319,plain,(
  ! [X0,X1,X2] : ((? [X6] : (~p(s(bool,X1)) & ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X6))))) | p(s(bool,X1)) | ! [X5] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X5))))) & ((~p(s(bool,X1)) & ? [X4] : ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))) | ! [X3] : (p(s(bool,X1)) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))))))),
  inference(rectify,[],[f318])).
fof(f318,plain,(
  ! [X0,X1,X2] : ((? [X3] : (~p(s(bool,X1)) & ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))) | p(s(bool,X1)) | ! [X4] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))) & ((~p(s(bool,X1)) & ? [X4] : ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))) | ! [X3] : (p(s(bool,X1)) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))))))),
  inference(flattening,[],[f317])).
fof(f317,plain,(
  ! [X0,X1,X2] : ((? [X3] : (~p(s(bool,X1)) & ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))) | (p(s(bool,X1)) | ! [X4] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))))) & ((~p(s(bool,X1)) & ? [X4] : ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))) | ! [X3] : (p(s(bool,X1)) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))))))),
  inference(nnf_transformation,[],[f114])).
fof(f114,plain,(
  ! [X0,X1,X2] : (! [X3] : (p(s(bool,X1)) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))) <=> (p(s(bool,X1)) | ! [X4] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))))),
  inference(flattening,[],[f113])).
fof(f113,plain,(
  ! [X0] : ! [X1,X2] : (! [X3] : (p(s(bool,X1)) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))) <=> (p(s(bool,X1)) | ! [X4] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))))),
  inference(rectify,[],[f59])).
fof(f59,axiom,(
  ! [X47] : ! [X49,X48] : (! [X23] : (p(s(bool,X49)) | p(s(bool,happ(s(fun(X47,bool),X48),s(X47,X23))))) <=> (p(s(bool,X49)) | ! [X23] : p(s(bool,happ(s(fun(X47,bool),X48),s(X47,X23))))))),
  file('thm.mod_to_conProof.v_rel_eqns|split|5','thm.bool.RIGHT_FORALL_OR_THM')).
fof(f601,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK64(X2,X1,X0))))) | p(s(bool,X1)) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))) )),
  inference(cnf_transformation,[],[f320])).
fof(f602,plain,(
  ( ! [X4,X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | s(X0,X2) != s(X0,X4)) )),
  inference(cnf_transformation,[],[f323])).
fof(f9605,plain,(
  ( ! [X575,X576,X578,X574,X577] : (p(s(bool,happ(s(fun(X574,bool),X577),s(X574,sK58(X575,X577,X574))))) | p(s(bool,happ(s(fun(X574,bool),X575),s(X574,sK57(X575,X577,X574))))) | s(bool,X578) = s(bool,happ(s(fun(X574,bool),X575),s(X574,X576))) | s(bool,'T_0') = s(bool,X578)) )),
  inference(subsumption_resolution,[],[f8225,f531])).
fof(f8225,plain,(
  ( ! [X575,X576,X578,X574,X577] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X574,bool),X577),s(X574,sK58(X575,X577,X574))))) | p(s(bool,happ(s(fun(X574,bool),X575),s(X574,sK57(X575,X577,X574))))) | s(bool,X578) = s(bool,happ(s(fun(X574,bool),X575),s(X574,X576))) | s(bool,'T_0') = s(bool,X578)) )),
  inference(superposition,[],[f586,f1319])).
fof(f9606,plain,(
  ( ! [X580,X582,X581,X583,X579] : (p(s(bool,happ(s(fun(X579,bool),X580),s(X579,X582)))) | s(X579,X581) != s(X579,X582) | s(bool,X583) = s(bool,happ(s(fun(X579,bool),X580),s(X579,X581))) | s(bool,'T_0') = s(bool,X583)) )),
  inference(subsumption_resolution,[],[f8226,f531])).
fof(f8226,plain,(
  ( ! [X580,X582,X581,X583,X579] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X579,bool),X580),s(X579,X582)))) | s(X579,X581) != s(X579,X582) | s(bool,X583) = s(bool,happ(s(fun(X579,bool),X580),s(X579,X581))) | s(bool,'T_0') = s(bool,X583)) )),
  inference(superposition,[],[f602,f1319])).
fof(f9609,plain,(
  ( ! [X596,X592,X594,X593,X595] : (~p(s(bool,happ(s(fun(X592,bool),X594),s(X592,X595)))) | p(s(bool,happ(s(fun(X592,bool),X593),s(X592,sK58(X594,X593,X592))))) | s(bool,X596) = s(bool,happ(s(fun(X592,bool),X593),s(X592,sK57(X594,X593,X592)))) | s(bool,'T_0') = s(bool,X596)) )),
  inference(subsumption_resolution,[],[f8229,f531])).
fof(f8229,plain,(
  ( ! [X596,X592,X594,X593,X595] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun(X592,bool),X594),s(X592,X595)))) | p(s(bool,happ(s(fun(X592,bool),X593),s(X592,sK58(X594,X593,X592))))) | s(bool,X596) = s(bool,happ(s(fun(X592,bool),X593),s(X592,sK57(X594,X593,X592)))) | s(bool,'T_0') = s(bool,X596)) )),
  inference(superposition,[],[f587,f1319])).
fof(f9610,plain,(
  ( ! [X600,X598,X601,X597,X599] : (p(s(bool,happ(s(fun(X597,bool),X598),s(X597,X600)))) | ~p(s(bool,X599)) | s(bool,X601) = s(bool,happ(s(fun(X597,bool),X598),s(X597,sK59(X598,X599,X597)))) | s(bool,'T_0') = s(bool,X601)) )),
  inference(subsumption_resolution,[],[f8230,f531])).
fof(f8230,plain,(
  ( ! [X600,X598,X601,X597,X599] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X597,bool),X598),s(X597,X600)))) | ~p(s(bool,X599)) | s(bool,X601) = s(bool,happ(s(fun(X597,bool),X598),s(X597,sK59(X598,X599,X597)))) | s(bool,'T_0') = s(bool,X601)) )),
  inference(superposition,[],[f591,f1319])).
fof(f9611,plain,(
  ( ! [X606,X602,X605,X603,X604] : (p(s(bool,happ(s(fun(X602,bool),X603),s(X602,X605)))) | ~p(s(bool,X604)) | s(bool,X606) = s(bool,happ(s(fun(X602,bool),X603),s(X602,sK60(X603,X604,X602)))) | s(bool,'T_0') = s(bool,X606)) )),
  inference(subsumption_resolution,[],[f8231,f531])).
fof(f8231,plain,(
  ( ! [X606,X602,X605,X603,X604] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X602,bool),X603),s(X602,X605)))) | ~p(s(bool,X604)) | s(bool,X606) = s(bool,happ(s(fun(X602,bool),X603),s(X602,sK60(X603,X604,X602)))) | s(bool,'T_0') = s(bool,X606)) )),
  inference(superposition,[],[f593,f1319])).
fof(f9612,plain,(
  ( ! [X609,X611,X607,X608,X610] : (~p(s(bool,X609)) | p(s(bool,happ(s(fun(X607,bool),X608),s(X607,X610)))) | s(bool,X611) = s(bool,happ(s(fun(X607,bool),X608),s(X607,sK61(X609,X608,X607)))) | s(bool,'T_0') = s(bool,X611)) )),
  inference(subsumption_resolution,[],[f8232,f531])).
fof(f8232,plain,(
  ( ! [X609,X611,X607,X608,X610] : (~p(s(bool,'T_0')) | ~p(s(bool,X609)) | p(s(bool,happ(s(fun(X607,bool),X608),s(X607,X610)))) | s(bool,X611) = s(bool,happ(s(fun(X607,bool),X608),s(X607,sK61(X609,X608,X607)))) | s(bool,'T_0') = s(bool,X611)) )),
  inference(superposition,[],[f594,f1319])).
fof(f9613,plain,(
  ( ! [X613,X615,X616,X612,X614] : (~p(s(bool,X614)) | p(s(bool,happ(s(fun(X612,bool),X613),s(X612,X615)))) | s(bool,X616) = s(bool,happ(s(fun(X612,bool),X613),s(X612,sK62(X614,X613,X612)))) | s(bool,'T_0') = s(bool,X616)) )),
  inference(subsumption_resolution,[],[f8233,f531])).
fof(f8233,plain,(
  ( ! [X613,X615,X616,X612,X614] : (~p(s(bool,'T_0')) | ~p(s(bool,X614)) | p(s(bool,happ(s(fun(X612,bool),X613),s(X612,X615)))) | s(bool,X616) = s(bool,happ(s(fun(X612,bool),X613),s(X612,sK62(X614,X613,X612)))) | s(bool,'T_0') = s(bool,X616)) )),
  inference(superposition,[],[f596,f1319])).
fof(f9614,plain,(
  ( ! [X621,X617,X619,X620,X618] : (p(s(bool,X619)) | p(s(bool,happ(s(fun(X617,bool),X618),s(X617,X620)))) | s(bool,X621) = s(bool,happ(s(fun(X617,bool),X618),s(X617,sK63(X618,X619,X617)))) | s(bool,'T_0') = s(bool,X621)) )),
  inference(subsumption_resolution,[],[f8234,f531])).
fof(f8234,plain,(
  ( ! [X621,X617,X619,X620,X618] : (~p(s(bool,'T_0')) | p(s(bool,X619)) | p(s(bool,happ(s(fun(X617,bool),X618),s(X617,X620)))) | s(bool,X621) = s(bool,happ(s(fun(X617,bool),X618),s(X617,sK63(X618,X619,X617)))) | s(bool,'T_0') = s(bool,X621)) )),
  inference(superposition,[],[f599,f1319])).
fof(f9615,plain,(
  ( ! [X625,X623,X624,X626,X622] : (p(s(bool,X624)) | p(s(bool,happ(s(fun(X622,bool),X623),s(X622,X625)))) | s(bool,X626) = s(bool,happ(s(fun(X622,bool),X623),s(X622,sK64(X623,X624,X622)))) | s(bool,'T_0') = s(bool,X626)) )),
  inference(subsumption_resolution,[],[f8235,f531])).
fof(f8235,plain,(
  ( ! [X625,X623,X624,X626,X622] : (~p(s(bool,'T_0')) | p(s(bool,X624)) | p(s(bool,happ(s(fun(X622,bool),X623),s(X622,X625)))) | s(bool,X626) = s(bool,happ(s(fun(X622,bool),X623),s(X622,sK64(X623,X624,X622)))) | s(bool,'T_0') = s(bool,X626)) )),
  inference(superposition,[],[f601,f1319])).
fof(f7549,plain,(
  ( ! [X660,X658,X657,X659] : (~p(s(bool,happ(s(fun(bool,bool),X659),s(bool,X658)))) | p(s(bool,happ(s(fun(bool,bool),X659),s(bool,X660)))) | s(bool,X657) != s(bool,X660) | s(bool,'T_0') = s(bool,X658) | s(bool,'T_0') = s(bool,X657)) )),
  inference(superposition,[],[f602,f1319])).
fof(f7576,plain,(
  ( ! [X790,X793,X791,X792] : (~p(s(bool,happ(s(fun(bool,bool),X791),s(bool,X792)))) | ~p(s(bool,happ(s(fun(bool,bool),X790),s(bool,X793)))) | p(s(bool,happ(s(fun(bool,bool),X791),s(bool,sK58(X790,X791,bool))))) | s(bool,'T_0') = s(bool,X792) | s(bool,'T_0') = s(bool,sK57(X790,X791,bool))) )),
  inference(superposition,[],[f587,f1319])).
fof(f7577,plain,(
  ( ! [X796,X795,X797,X794] : (~p(s(bool,happ(s(fun(bool,bool),X794),s(bool,X796)))) | p(s(bool,happ(s(fun(bool,bool),X794),s(bool,X797)))) | ~p(s(bool,X795)) | s(bool,'T_0') = s(bool,X796) | s(bool,'T_0') = s(bool,sK59(X794,X795,bool))) )),
  inference(superposition,[],[f591,f1319])).
fof(f7578,plain,(
  ( ! [X798,X800,X799,X801] : (~p(s(bool,happ(s(fun(bool,bool),X798),s(bool,X800)))) | p(s(bool,happ(s(fun(bool,bool),X798),s(bool,X801)))) | ~p(s(bool,X799)) | s(bool,'T_0') = s(bool,X800) | s(bool,'T_0') = s(bool,sK60(X798,X799,bool))) )),
  inference(superposition,[],[f593,f1319])).
fof(f7579,plain,(
  ( ! [X802,X804,X803,X805] : (~p(s(bool,happ(s(fun(bool,bool),X803),s(bool,X804)))) | ~p(s(bool,X802)) | p(s(bool,happ(s(fun(bool,bool),X803),s(bool,X805)))) | s(bool,'T_0') = s(bool,X804) | s(bool,'T_0') = s(bool,sK61(X802,X803,bool))) )),
  inference(superposition,[],[f594,f1319])).
fof(f7580,plain,(
  ( ! [X808,X806,X809,X807] : (~p(s(bool,happ(s(fun(bool,bool),X807),s(bool,X808)))) | ~p(s(bool,X806)) | p(s(bool,happ(s(fun(bool,bool),X807),s(bool,X809)))) | s(bool,'T_0') = s(bool,X808) | s(bool,'T_0') = s(bool,sK62(X806,X807,bool))) )),
  inference(superposition,[],[f596,f1319])).
fof(f7581,plain,(
  ( ! [X810,X812,X811,X813] : (~p(s(bool,happ(s(fun(bool,bool),X810),s(bool,X812)))) | p(s(bool,X811)) | p(s(bool,happ(s(fun(bool,bool),X810),s(bool,X813)))) | s(bool,'T_0') = s(bool,X812) | s(bool,'T_0') = s(bool,sK63(X810,X811,bool))) )),
  inference(superposition,[],[f599,f1319])).
fof(f7582,plain,(
  ( ! [X817,X814,X816,X815] : (~p(s(bool,happ(s(fun(bool,bool),X814),s(bool,X816)))) | p(s(bool,X815)) | p(s(bool,happ(s(fun(bool,bool),X814),s(bool,X817)))) | s(bool,'T_0') = s(bool,X816) | s(bool,'T_0') = s(bool,sK64(X814,X815,bool))) )),
  inference(superposition,[],[f601,f1319])).
fof(f8008,plain,(
  ( ! [X542,X545,X543,X544] : (~p(s(bool,happ(s(fun(bool,bool),X543),s(bool,X542)))) | p(s(bool,happ(s(fun(bool,bool),X543),s(bool,X544)))) | s(bool,'T_0') != s(bool,X544) | s(bool,X542) = s(bool,X545) | s(bool,'T_0') = s(bool,X545)) )),
  inference(superposition,[],[f602,f1319])).
fof(f8244,plain,(
  ( ! [X652,X654,X653,X651] : (~p(s(bool,happ(s(fun(bool,bool),X652),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X652),s(bool,X653)))) | s(bool,X651) != s(bool,X653) | s(bool,X651) = s(bool,X654) | s(bool,'T_0') = s(bool,X654)) )),
  inference(superposition,[],[f602,f1319])).
fof(f8271,plain,(
  ( ! [X786,X784,X783,X785] : (~p(s(bool,happ(s(fun(bool,bool),X784),s(bool,'T_0')))) | ~p(s(bool,happ(s(fun(bool,bool),X783),s(bool,X785)))) | p(s(bool,happ(s(fun(bool,bool),X784),s(bool,sK58(X783,X784,bool))))) | s(bool,X786) = s(bool,sK57(X783,X784,bool)) | s(bool,'T_0') = s(bool,X786)) )),
  inference(superposition,[],[f587,f1319])).
fof(f8272,plain,(
  ( ! [X790,X788,X787,X789] : (~p(s(bool,happ(s(fun(bool,bool),X787),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X787),s(bool,X789)))) | ~p(s(bool,X788)) | s(bool,X790) = s(bool,sK59(X787,X788,bool)) | s(bool,'T_0') = s(bool,X790)) )),
  inference(superposition,[],[f591,f1319])).
fof(f8273,plain,(
  ( ! [X793,X791,X794,X792] : (~p(s(bool,happ(s(fun(bool,bool),X791),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X791),s(bool,X793)))) | ~p(s(bool,X792)) | s(bool,X794) = s(bool,sK60(X791,X792,bool)) | s(bool,'T_0') = s(bool,X794)) )),
  inference(superposition,[],[f593,f1319])).
fof(f8274,plain,(
  ( ! [X798,X796,X795,X797] : (~p(s(bool,happ(s(fun(bool,bool),X796),s(bool,'T_0')))) | ~p(s(bool,X795)) | p(s(bool,happ(s(fun(bool,bool),X796),s(bool,X797)))) | s(bool,X798) = s(bool,sK61(X795,X796,bool)) | s(bool,'T_0') = s(bool,X798)) )),
  inference(superposition,[],[f594,f1319])).
fof(f8275,plain,(
  ( ! [X802,X800,X799,X801] : (~p(s(bool,happ(s(fun(bool,bool),X800),s(bool,'T_0')))) | ~p(s(bool,X799)) | p(s(bool,happ(s(fun(bool,bool),X800),s(bool,X801)))) | s(bool,X802) = s(bool,sK62(X799,X800,bool)) | s(bool,'T_0') = s(bool,X802)) )),
  inference(superposition,[],[f596,f1319])).
fof(f8276,plain,(
  ( ! [X806,X804,X803,X805] : (~p(s(bool,happ(s(fun(bool,bool),X803),s(bool,'T_0')))) | p(s(bool,X804)) | p(s(bool,happ(s(fun(bool,bool),X803),s(bool,X805)))) | s(bool,X806) = s(bool,sK63(X803,X804,bool)) | s(bool,'T_0') = s(bool,X806)) )),
  inference(superposition,[],[f599,f1319])).
fof(f8277,plain,(
  ( ! [X810,X808,X809,X807] : (~p(s(bool,happ(s(fun(bool,bool),X807),s(bool,'T_0')))) | p(s(bool,X808)) | p(s(bool,happ(s(fun(bool,bool),X807),s(bool,X809)))) | s(bool,X810) = s(bool,sK64(X807,X808,bool)) | s(bool,'T_0') = s(bool,X810)) )),
  inference(superposition,[],[f601,f1319])).
fof(f655,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP7(X0,X1,X2) | ~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X5))))) )),
  inference(cnf_transformation,[],[f343])).
fof(f705,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X5)))) | sP9(X2,X0) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK156(X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) | sP8(X1,X0) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK155(X2,X1,X0)))),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) | sP14(X0,X1) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK153(X2,X1,X0)))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK154(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK154(X2,X1,X0))))))) | sP12(X0,X2) | sP11(X0,X2) | sP10(X0,X1) | sP13(X0,X1) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK151(X2,X1,X0)))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK152(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK152(X2,X1,X0)))))))) )),
  inference(cnf_transformation,[],[f383])).
fof(f727,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.modSem.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X6))),s('type.conSem.v',X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.conSem.v',X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))) | sP21(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f390])).
fof(f390,plain,(
  ! [X0,X1,X2,X3,X4] : ((~sP21(X0,X1,X2,X3,X4) | (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3)) | (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK162(X4,X3,X2,X1,X0)),s('type.modSem.v',sK163(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK164(X4,X3,X2,X1,X0)))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK162(X4,X3,X2,X1,X0)),s('type.conSem.v',sK166(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK165(X4,X3,X2,X1,X0)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK164(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK165(X4,X3,X2,X1,X0))))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',sK163(X4,X3,X2,X1,X0)))),s('type.conSem.v',sK166(X4,X3,X2,X1,X0))))))) & (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3)) & ! [X5,X6,X7,X8,X9] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.modSem.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.conSem.v',X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X6))),s('type.conSem.v',X9)))))) | sP21(X0,X1,X2,X3,X4)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK162,sK163,sK164,sK165,sK166])],[f389])).
fof(f389,plain,(
  ! [X0,X1,X2,X3,X4] : ((~sP21(X0,X1,X2,X3,X4) | (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3)) | ? [X10,X11,X12,X13,X14] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X10),s('type.modSem.v',X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X12))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X10),s('type.conSem.v',X14))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X13))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X13)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X11))),s('type.conSem.v',X14)))))) & (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3)) & ! [X5,X6,X7,X8,X9] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.modSem.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.conSem.v',X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X6))),s('type.conSem.v',X9)))))) | sP21(X0,X1,X2,X3,X4)))),
  inference(rectify,[],[f388])).
fof(f388,plain,(
  ! [X3,X6,X5,X8,X7] : ((~sP21(X3,X6,X5,X8,X7) | (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13)))))) & (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) & ! [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13)))))) | sP21(X3,X6,X5,X8,X7)))),
  inference(flattening,[],[f387])).
fof(f387,plain,(
  ! [X3,X6,X5,X8,X7] : ((~sP21(X3,X6,X5,X8,X7) | ((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13))))))) & (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) & ! [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13)))))) | sP21(X3,X6,X5,X8,X7)))),
  inference(nnf_transformation,[],[f238])).
fof(f750,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5),s('type.list.list'('type.string.char'),X6))) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5))),s('type.list.list'('type.string.char'),X6))) | sP17(X0,X1,X2,X3)) )),
  inference(cnf_transformation,[],[f403])).
fof(f403,plain,(
  ! [X0,X1,X2,X3] : ((~sP17(X0,X1,X2,X3) | (s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK178(X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK175(X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),sK176(X3,X2,X1,X0)),s('type.list.list'('type.string.char'),sK177(X3,X2,X1,X0)))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK179(X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK181(X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),sK176(X3,X2,X1,X0)))),s('type.list.list'('type.string.char'),sK177(X3,X2,X1,X0)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK175(X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK179(X3,X2,X1,X0))))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK178(X3,X2,X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK180(X3,X2,X1,X0)),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK181(X3,X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))))) & (! [X4,X5,X6,X7,X8,X9,X10] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5),s('type.list.list'('type.string.char'),X6))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5))),s('type.list.list'('type.string.char'),X6))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))))) | sP17(X0,X1,X2,X3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK175,sK176,sK177,sK178,sK179,sK180,sK181])],[f402])).
fof(f402,plain,(
  ! [X0,X1,X2,X3] : ((~sP17(X0,X1,X2,X3) | ? [X11,X12,X13,X14,X15,X16,X17] : (s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X14),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X12),s('type.list.list'('type.string.char'),X13))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X17),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X12))),s('type.list.list'('type.string.char'),X13))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X15)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X14),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X16),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X17),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))))) & (! [X4,X5,X6,X7,X8,X9,X10] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5),s('type.list.list'('type.string.char'),X6))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5))),s('type.list.list'('type.string.char'),X6))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))))) | sP17(X0,X1,X2,X3)))),
  inference(rectify,[],[f401])).
fof(f401,plain,(
  ! [X21,X5,X23,X22] : ((~sP17(X21,X5,X23,X22) | ? [X27,X28,X29,X30,X31,X32,X33] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28),s('type.list.list'('type.string.char'),X29))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28))),s('type.list.list'('type.string.char'),X29))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X32),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21)))))) & (! [X27,X28,X29,X30,X31,X32,X33] : (s('type.modSem.v',X22) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28),s('type.list.list'('type.string.char'),X29))) | s('type.conSem.v',X23) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28))),s('type.list.list'('type.string.char'),X29))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31)))) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X32),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | sP17(X21,X5,X23,X22)))),
  inference(nnf_transformation,[],[f234])).
fof(f755,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.string.char'),X5),s('type.modLang.exp',X6))) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7),s('type.list.list'('type.string.char'),X5),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.modLang.exp',X6))))) | sP16(X0,X1,X2,X3)) )),
  inference(cnf_transformation,[],[f406])).
fof(f406,plain,(
  ! [X0,X1,X2,X3] : ((~sP16(X0,X1,X2,X3) | (s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK186(X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK182(X3,X2,X1,X0)))),s('type.list.list'('type.string.char'),sK183(X3,X2,X1,X0)),s('type.modLang.exp',sK184(X3,X2,X1,X0)))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK185(X3,X2,X1,X0)),s('type.list.list'('type.string.char'),sK183(X3,X2,X1,X0)),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK188(X3,X2,X1,X0)),s('type.modLang.exp',sK184(X3,X2,X1,X0)))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK182(X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK185(X3,X2,X1,X0))))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK186(X3,X2,X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK187(X3,X2,X1,X0)),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK188(X3,X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))))) & (! [X4,X5,X6,X7,X8,X9,X10] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.string.char'),X5),s('type.modLang.exp',X6))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7),s('type.list.list'('type.string.char'),X5),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.modLang.exp',X6))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))))) | sP16(X0,X1,X2,X3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK182,sK183,sK184,sK185,sK186,sK187,sK188])],[f405])).
fof(f405,plain,(
  ! [X0,X1,X2,X3] : ((~sP16(X0,X1,X2,X3) | ? [X11,X12,X13,X14,X15,X16,X17] : (s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.string.char'),X12),s('type.modLang.exp',X13))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X14),s('type.list.list'('type.string.char'),X12),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X17),s('type.modLang.exp',X13))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X14)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X15),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X16),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X17),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))))) & (! [X4,X5,X6,X7,X8,X9,X10] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.string.char'),X5),s('type.modLang.exp',X6))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7),s('type.list.list'('type.string.char'),X5),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.modLang.exp',X6))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))))) | sP16(X0,X1,X2,X3)))),
  inference(rectify,[],[f404])).
fof(f404,plain,(
  ! [X21,X5,X23,X22] : ((~sP16(X21,X5,X23,X22) | ? [X34,X35,X36,X37,X38,X39,X40] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.string.char'),X35),s('type.modLang.exp',X36))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37),s('type.list.list'('type.string.char'),X35),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.modLang.exp',X36))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X39),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21)))))) & (! [X34,X35,X36,X37,X38,X39,X40] : (s('type.modSem.v',X22) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.string.char'),X35),s('type.modLang.exp',X36))) | s('type.conSem.v',X23) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37),s('type.list.list'('type.string.char'),X35),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.modLang.exp',X36))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)))) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X39),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | sP16(X21,X5,X23,X22)))),
  inference(nnf_transformation,[],[f233])).
fof(f802,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.modSem.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X6))),s('type.conSem.v',X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.conSem.v',X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))) | sP30(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f424])).
fof(f424,plain,(
  ! [X0,X1,X2,X3,X4] : ((~sP30(X0,X1,X2,X3,X4) | (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3)) | (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK212(X4,X3,X2,X1,X0)),s('type.modSem.v',sK213(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK214(X4,X3,X2,X1,X0)))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK212(X4,X3,X2,X1,X0)),s('type.conSem.v',sK216(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK215(X4,X3,X2,X1,X0)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK214(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK215(X4,X3,X2,X1,X0))))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',sK213(X4,X3,X2,X1,X0)))),s('type.conSem.v',sK216(X4,X3,X2,X1,X0))))))) & (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3)) & ! [X5,X6,X7,X8,X9] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.modSem.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.conSem.v',X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X6))),s('type.conSem.v',X9)))))) | sP30(X0,X1,X2,X3,X4)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK212,sK213,sK214,sK215,sK216])],[f423])).
fof(f423,plain,(
  ! [X0,X1,X2,X3,X4] : ((~sP30(X0,X1,X2,X3,X4) | (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3)) | ? [X10,X11,X12,X13,X14] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X10),s('type.modSem.v',X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X12))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X10),s('type.conSem.v',X14))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X13))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X13)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X11))),s('type.conSem.v',X14)))))) & (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3)) & ! [X5,X6,X7,X8,X9] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.modSem.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.conSem.v',X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X6))),s('type.conSem.v',X9)))))) | sP30(X0,X1,X2,X3,X4)))),
  inference(rectify,[],[f422])).
fof(f422,plain,(
  ! [X3,X6,X5,X8,X7] : ((~sP30(X3,X6,X5,X8,X7) | (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13)))))) & (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) & ! [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13)))))) | sP30(X3,X6,X5,X8,X7)))),
  inference(flattening,[],[f421])).
fof(f421,plain,(
  ! [X3,X6,X5,X8,X7] : ((~sP30(X3,X6,X5,X8,X7) | ((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13))))))) & (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) & ! [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13)))))) | sP30(X3,X6,X5,X8,X7)))),
  inference(nnf_transformation,[],[f249])).
fof(f825,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5),s('type.list.list'('type.string.char'),X6))) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5))),s('type.list.list'('type.string.char'),X6))) | sP26(X0,X1,X2,X3)) )),
  inference(cnf_transformation,[],[f437])).
fof(f437,plain,(
  ! [X0,X1,X2,X3] : ((~sP26(X0,X1,X2,X3) | (s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK228(X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK225(X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),sK226(X3,X2,X1,X0)),s('type.list.list'('type.string.char'),sK227(X3,X2,X1,X0)))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK229(X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK231(X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),sK226(X3,X2,X1,X0)))),s('type.list.list'('type.string.char'),sK227(X3,X2,X1,X0)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK225(X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK229(X3,X2,X1,X0))))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK228(X3,X2,X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK230(X3,X2,X1,X0)),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK231(X3,X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))))) & (! [X4,X5,X6,X7,X8,X9,X10] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5),s('type.list.list'('type.string.char'),X6))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5))),s('type.list.list'('type.string.char'),X6))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))))) | sP26(X0,X1,X2,X3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK225,sK226,sK227,sK228,sK229,sK230,sK231])],[f436])).
fof(f436,plain,(
  ! [X0,X1,X2,X3] : ((~sP26(X0,X1,X2,X3) | ? [X11,X12,X13,X14,X15,X16,X17] : (s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X14),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X12),s('type.list.list'('type.string.char'),X13))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X17),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X12))),s('type.list.list'('type.string.char'),X13))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X15)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X14),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X16),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X17),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))))) & (! [X4,X5,X6,X7,X8,X9,X10] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5),s('type.list.list'('type.string.char'),X6))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5))),s('type.list.list'('type.string.char'),X6))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))))) | sP26(X0,X1,X2,X3)))),
  inference(rectify,[],[f435])).
fof(f435,plain,(
  ! [X21,X5,X23,X22] : ((~sP26(X21,X5,X23,X22) | ? [X27,X28,X29,X30,X31,X32,X33] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28),s('type.list.list'('type.string.char'),X29))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28))),s('type.list.list'('type.string.char'),X29))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X32),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21)))))) & (! [X27,X28,X29,X30,X31,X32,X33] : (s('type.modSem.v',X22) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28),s('type.list.list'('type.string.char'),X29))) | s('type.conSem.v',X23) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28))),s('type.list.list'('type.string.char'),X29))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31)))) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X32),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | sP26(X21,X5,X23,X22)))),
  inference(nnf_transformation,[],[f245])).
fof(f830,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.string.char'),X5),s('type.modLang.exp',X6))) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7),s('type.list.list'('type.string.char'),X5),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.modLang.exp',X6))))) | sP25(X0,X1,X2,X3)) )),
  inference(cnf_transformation,[],[f440])).
fof(f440,plain,(
  ! [X0,X1,X2,X3] : ((~sP25(X0,X1,X2,X3) | (s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK236(X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK232(X3,X2,X1,X0)))),s('type.list.list'('type.string.char'),sK233(X3,X2,X1,X0)),s('type.modLang.exp',sK234(X3,X2,X1,X0)))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK235(X3,X2,X1,X0)),s('type.list.list'('type.string.char'),sK233(X3,X2,X1,X0)),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK238(X3,X2,X1,X0)),s('type.modLang.exp',sK234(X3,X2,X1,X0)))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK232(X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK235(X3,X2,X1,X0))))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK236(X3,X2,X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK237(X3,X2,X1,X0)),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK238(X3,X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))))) & (! [X4,X5,X6,X7,X8,X9,X10] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.string.char'),X5),s('type.modLang.exp',X6))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7),s('type.list.list'('type.string.char'),X5),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.modLang.exp',X6))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))))) | sP25(X0,X1,X2,X3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK232,sK233,sK234,sK235,sK236,sK237,sK238])],[f439])).
fof(f439,plain,(
  ! [X0,X1,X2,X3] : ((~sP25(X0,X1,X2,X3) | ? [X11,X12,X13,X14,X15,X16,X17] : (s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.string.char'),X12),s('type.modLang.exp',X13))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X14),s('type.list.list'('type.string.char'),X12),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X17),s('type.modLang.exp',X13))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X14)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X15),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X16),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X17),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))))) & (! [X4,X5,X6,X7,X8,X9,X10] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.string.char'),X5),s('type.modLang.exp',X6))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7),s('type.list.list'('type.string.char'),X5),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.modLang.exp',X6))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))))) | sP25(X0,X1,X2,X3)))),
  inference(rectify,[],[f438])).
fof(f438,plain,(
  ! [X21,X5,X23,X22] : ((~sP25(X21,X5,X23,X22) | ? [X34,X35,X36,X37,X38,X39,X40] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.string.char'),X35),s('type.modLang.exp',X36))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37),s('type.list.list'('type.string.char'),X35),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.modLang.exp',X36))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X39),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21)))))) & (! [X34,X35,X36,X37,X38,X39,X40] : (s('type.modSem.v',X22) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.string.char'),X35),s('type.modLang.exp',X36))) | s('type.conSem.v',X23) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37),s('type.list.list'('type.string.char'),X35),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.modLang.exp',X36))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)))) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X39),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | sP25(X21,X5,X23,X22)))),
  inference(nnf_transformation,[],[f244])).
fof(f868,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.modSem.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X6))),s('type.conSem.v',X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.conSem.v',X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))) | sP38(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f456])).
fof(f456,plain,(
  ! [X0,X1,X2,X3,X4] : ((~sP38(X0,X1,X2,X3,X4) | (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3)) | (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK259(X4,X3,X2,X1,X0)),s('type.modSem.v',sK260(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK261(X4,X3,X2,X1,X0)))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK259(X4,X3,X2,X1,X0)),s('type.conSem.v',sK263(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK262(X4,X3,X2,X1,X0)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK261(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK262(X4,X3,X2,X1,X0))))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',sK260(X4,X3,X2,X1,X0)))),s('type.conSem.v',sK263(X4,X3,X2,X1,X0))))))) & (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3)) & ! [X5,X6,X7,X8,X9] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.modSem.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.conSem.v',X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X6))),s('type.conSem.v',X9)))))) | sP38(X0,X1,X2,X3,X4)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK259,sK260,sK261,sK262,sK263])],[f455])).
fof(f455,plain,(
  ! [X0,X1,X2,X3,X4] : ((~sP38(X0,X1,X2,X3,X4) | (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3)) | ? [X10,X11,X12,X13,X14] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X10),s('type.modSem.v',X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X12))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X10),s('type.conSem.v',X14))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X13))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X13)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X11))),s('type.conSem.v',X14)))))) & (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3)) & ! [X5,X6,X7,X8,X9] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.modSem.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.conSem.v',X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X6))),s('type.conSem.v',X9)))))) | sP38(X0,X1,X2,X3,X4)))),
  inference(rectify,[],[f454])).
fof(f454,plain,(
  ! [X3,X6,X5,X8,X7] : ((~sP38(X3,X6,X5,X8,X7) | (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13)))))) & (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) & ! [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13)))))) | sP38(X3,X6,X5,X8,X7)))),
  inference(flattening,[],[f453])).
fof(f453,plain,(
  ! [X3,X6,X5,X8,X7] : ((~sP38(X3,X6,X5,X8,X7) | ((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13))))))) & (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) & ! [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13)))))) | sP38(X3,X6,X5,X8,X7)))),
  inference(nnf_transformation,[],[f258])).
fof(f258,plain,(
  ! [X3,X6,X5,X8,X7] : (sP38(X3,X6,X5,X8,X7) <=> ((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13)))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP38])])).
fof(f891,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5),s('type.list.list'('type.string.char'),X6))) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5))),s('type.list.list'('type.string.char'),X6))) | sP34(X0,X1,X2,X3)) )),
  inference(cnf_transformation,[],[f469])).
fof(f469,plain,(
  ! [X0,X1,X2,X3] : ((~sP34(X0,X1,X2,X3) | (s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK275(X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK272(X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),sK273(X3,X2,X1,X0)),s('type.list.list'('type.string.char'),sK274(X3,X2,X1,X0)))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK276(X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK278(X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),sK273(X3,X2,X1,X0)))),s('type.list.list'('type.string.char'),sK274(X3,X2,X1,X0)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK272(X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK276(X3,X2,X1,X0))))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK275(X3,X2,X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK277(X3,X2,X1,X0)),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK278(X3,X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))))) & (! [X4,X5,X6,X7,X8,X9,X10] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5),s('type.list.list'('type.string.char'),X6))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5))),s('type.list.list'('type.string.char'),X6))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))))) | sP34(X0,X1,X2,X3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK272,sK273,sK274,sK275,sK276,sK277,sK278])],[f468])).
fof(f468,plain,(
  ! [X0,X1,X2,X3] : ((~sP34(X0,X1,X2,X3) | ? [X11,X12,X13,X14,X15,X16,X17] : (s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X14),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X12),s('type.list.list'('type.string.char'),X13))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X17),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X12))),s('type.list.list'('type.string.char'),X13))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X15)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X14),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X16),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X17),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))))) & (! [X4,X5,X6,X7,X8,X9,X10] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5),s('type.list.list'('type.string.char'),X6))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5))),s('type.list.list'('type.string.char'),X6))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))))) | sP34(X0,X1,X2,X3)))),
  inference(rectify,[],[f467])).
fof(f467,plain,(
  ! [X21,X5,X23,X22] : ((~sP34(X21,X5,X23,X22) | ? [X27,X28,X29,X30,X31,X32,X33] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28),s('type.list.list'('type.string.char'),X29))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28))),s('type.list.list'('type.string.char'),X29))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X32),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21)))))) & (! [X27,X28,X29,X30,X31,X32,X33] : (s('type.modSem.v',X22) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28),s('type.list.list'('type.string.char'),X29))) | s('type.conSem.v',X23) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28))),s('type.list.list'('type.string.char'),X29))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31)))) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X32),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | sP34(X21,X5,X23,X22)))),
  inference(nnf_transformation,[],[f254])).
fof(f254,plain,(
  ! [X21,X5,X23,X22] : (sP34(X21,X5,X23,X22) <=> ? [X27,X28,X29,X30,X31,X32,X33] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28),s('type.list.list'('type.string.char'),X29))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28))),s('type.list.list'('type.string.char'),X29))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X32),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP34])])).
fof(f896,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.string.char'),X5),s('type.modLang.exp',X6))) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7),s('type.list.list'('type.string.char'),X5),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.modLang.exp',X6))))) | sP33(X0,X1,X2,X3)) )),
  inference(cnf_transformation,[],[f472])).
fof(f472,plain,(
  ! [X0,X1,X2,X3] : ((~sP33(X0,X1,X2,X3) | (s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK283(X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK279(X3,X2,X1,X0)))),s('type.list.list'('type.string.char'),sK280(X3,X2,X1,X0)),s('type.modLang.exp',sK281(X3,X2,X1,X0)))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK282(X3,X2,X1,X0)),s('type.list.list'('type.string.char'),sK280(X3,X2,X1,X0)),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK285(X3,X2,X1,X0)),s('type.modLang.exp',sK281(X3,X2,X1,X0)))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK279(X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK282(X3,X2,X1,X0))))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK283(X3,X2,X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK284(X3,X2,X1,X0)),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK285(X3,X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))))) & (! [X4,X5,X6,X7,X8,X9,X10] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.string.char'),X5),s('type.modLang.exp',X6))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7),s('type.list.list'('type.string.char'),X5),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.modLang.exp',X6))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))))) | sP33(X0,X1,X2,X3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK279,sK280,sK281,sK282,sK283,sK284,sK285])],[f471])).
fof(f471,plain,(
  ! [X0,X1,X2,X3] : ((~sP33(X0,X1,X2,X3) | ? [X11,X12,X13,X14,X15,X16,X17] : (s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.string.char'),X12),s('type.modLang.exp',X13))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X14),s('type.list.list'('type.string.char'),X12),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X17),s('type.modLang.exp',X13))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X14)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X15),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X16),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X17),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))))) & (! [X4,X5,X6,X7,X8,X9,X10] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.string.char'),X5),s('type.modLang.exp',X6))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7),s('type.list.list'('type.string.char'),X5),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.modLang.exp',X6))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))))) | sP33(X0,X1,X2,X3)))),
  inference(rectify,[],[f470])).
fof(f470,plain,(
  ! [X21,X5,X23,X22] : ((~sP33(X21,X5,X23,X22) | ? [X34,X35,X36,X37,X38,X39,X40] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.string.char'),X35),s('type.modLang.exp',X36))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37),s('type.list.list'('type.string.char'),X35),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.modLang.exp',X36))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X39),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21)))))) & (! [X34,X35,X36,X37,X38,X39,X40] : (s('type.modSem.v',X22) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.string.char'),X35),s('type.modLang.exp',X36))) | s('type.conSem.v',X23) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37),s('type.list.list'('type.string.char'),X35),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.modLang.exp',X36))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)))) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X39),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | sP33(X21,X5,X23,X22)))),
  inference(nnf_transformation,[],[f253])).
fof(f253,plain,(
  ! [X21,X5,X23,X22] : (sP33(X21,X5,X23,X22) <=> ? [X34,X35,X36,X37,X38,X39,X40] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.string.char'),X35),s('type.modLang.exp',X36))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37),s('type.list.list'('type.string.char'),X35),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.modLang.exp',X36))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X39),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP33])])).
fof(f902,plain,(
  ( ! [X2,X0,X14,X12,X1,X13] : (~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2)))) | sP38(X12,sK294(X14,X13,X12,X2,X1,X0),X14,sK296(X14,X13,X12,X2,X1,X0),sK295(X14,X13,X12,X2,X1,X0)) | sP37(X13,sK291(X14,X13,X12,X2,X1,X0),X12,sK293(X14,X13,X12,X2,X1,X0),sK292(X14,X13,X12,X2,X1,X0)) | sP39(X12,X13,X14) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X14),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2))))) )),
  inference(cnf_transformation,[],[f478])).
fof(f478,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2)))) | ! [X12,X13,X14] : (sP39(X12,X13,X14) | (sP37(X13,sK291(X14,X13,X12,X2,X1,X0),X12,sK293(X14,X13,X12,X2,X1,X0),sK292(X14,X13,X12,X2,X1,X0)) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X13),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK291(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.modSem.v'),sK292(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK293(X14,X13,X12,X2,X1,X0)))))) | (sP38(X12,sK294(X14,X13,X12,X2,X1,X0),X14,sK296(X14,X13,X12,X2,X1,X0),sK295(X14,X13,X12,X2,X1,X0)) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X14),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK294(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK295(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK296(X14,X13,X12,X2,X1,X0)))))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X14),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2)))))) & ((~sP39(sK297(X2,X1,X0),sK298(X2,X1,X0),sK299(X2,X1,X0)) & ! [X9,X10,X11] : (~sP37(sK298(X2,X1,X0),X9,sK297(X2,X1,X0),X11,X10) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),sK298(X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s('type.list.list'('type.modSem.v'),X10))),s('type.list.list'('type.conSem.v'),X11))))) & ! [X6,X7,X8] : (~sP38(sK297(X2,X1,X0),X6,sK299(X2,X1,X0),X8,X7) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),sK299(X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),sK299(X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2))))) | p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK291,sK292,sK293,sK294,sK295,sK296,sK297,sK298,sK299])],[f477])).
fof(f477,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2)))) | ! [X12,X13,X14] : (sP39(X12,X13,X14) | ? [X18,X19,X20] : (sP37(X13,X18,X12,X20,X19) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X13),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X18))),s('type.list.list'('type.modSem.v'),X19))),s('type.list.list'('type.conSem.v'),X20))))) | ? [X15,X16,X17] : (sP38(X12,X15,X14,X17,X16) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X14),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X15))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X16))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X17))))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X14),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2)))))) & (? [X3,X4,X5] : (~sP39(X3,X4,X5) & ! [X9,X10,X11] : (~sP37(X4,X9,X3,X11,X10) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s('type.list.list'('type.modSem.v'),X10))),s('type.list.list'('type.conSem.v'),X11))))) & ! [X6,X7,X8] : (~sP38(X3,X6,X5,X8,X7) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2))))) | p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2))))))),
  inference(rectify,[],[f476])).
fof(f476,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2)))) | ! [X3,X4,X5] : (sP39(X3,X4,X5) | ? [X14,X15,X16] : (sP37(X4,X14,X3,X16,X15) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X15))),s('type.list.list'('type.conSem.v'),X16))))) | ? [X6,X7,X8] : (sP38(X3,X6,X5,X8,X7) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2)))))) & (? [X3,X4,X5] : (~sP39(X3,X4,X5) & ! [X14,X15,X16] : (~sP37(X4,X14,X3,X16,X15) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X15))),s('type.list.list'('type.conSem.v'),X16))))) & ! [X6,X7,X8] : (~sP38(X3,X6,X5,X8,X7) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2))))) | p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2))))))),
  inference(nnf_transformation,[],[f260])).
fof(f260,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2)))) <=> ! [X3,X4,X5] : (sP39(X3,X4,X5) | ? [X14,X15,X16] : (sP37(X4,X14,X3,X16,X15) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X15))),s('type.list.list'('type.conSem.v'),X16))))) | ? [X6,X7,X8] : (sP38(X3,X6,X5,X8,X7) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2))))))),
  inference(definition_folding,[],[f205,f259,f258,f257,f256,f255,f254,f253,f252])).
fof(f252,plain,(
  ! [X4,X21,X23,X22] : (sP32(X4,X21,X23,X22) <=> ? [X41,X42,X43,X44,X45] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.modSem.v'),X44))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X43),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.conSem.v'),X45))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X43),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X44))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP32])])).
fof(f255,plain,(
  ! [X4,X21,X23,X22] : (sP35(X4,X21,X23,X22) <=> ? [X46,X47] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X46))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X47))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X46))),s('type.list.list'('type.conSem.v'),X47))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP35])])).
fof(f256,plain,(
  ! [X4,X21,X23,X22] : (sP36(X4,X21,X23,X22) <=> ? [X24,X25] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X24))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X25))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X24))),s('type.list.list'('type.conSem.v'),X25))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP36])])).
fof(f257,plain,(
  ! [X4,X14,X3,X16,X15] : (sP37(X4,X14,X3,X16,X15) <=> ((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X15) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.modSem.v'),X15) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X17),s('type.list.list'('type.modSem.v'),X18))) & s('type.list.list'('type.conSem.v'),X16) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X19),s('type.list.list'('type.conSem.v'),X20))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.modSem.v',X17))),s('type.conSem.v',X19)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X18))),s('type.list.list'('type.conSem.v'),X20)))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP37])])).
fof(f259,plain,(
  ! [X3,X4,X5] : (sP39(X3,X4,X5) <=> ? [X21,X22,X23] : ((? [X48] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X48))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X48)))) | sP35(X4,X21,X23,X22) | sP32(X4,X21,X23,X22) | sP33(X21,X5,X23,X22) | sP34(X21,X5,X23,X22) | ? [X26] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X26))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26)))) | sP36(X4,X21,X23,X22)) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v',X22))),s('type.conSem.v',X23))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP39])])).
fof(f205,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2)))) <=> ! [X3,X4,X5] : (? [X21,X22,X23] : ((? [X48] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X48))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X48)))) | ? [X46,X47] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X46))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X47))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X46))),s('type.list.list'('type.conSem.v'),X47))))) | ? [X41,X42,X43,X44,X45] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.modSem.v'),X44))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X43),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.conSem.v'),X45))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X43),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X44))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45))))) | ? [X34,X35,X36,X37,X38,X39,X40] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.string.char'),X35),s('type.modLang.exp',X36))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37),s('type.list.list'('type.string.char'),X35),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.modLang.exp',X36))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X39),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | ? [X27,X28,X29,X30,X31,X32,X33] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28),s('type.list.list'('type.string.char'),X29))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28))),s('type.list.list'('type.string.char'),X29))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X32),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | ? [X26] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X26))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26)))) | ? [X24,X25] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X24))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X25))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X24))),s('type.list.list'('type.conSem.v'),X25)))))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v',X22))),s('type.conSem.v',X23))))) | ? [X14,X15,X16] : (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X15) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.modSem.v'),X15) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X17),s('type.list.list'('type.modSem.v'),X18))) & s('type.list.list'('type.conSem.v'),X16) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X19),s('type.list.list'('type.conSem.v'),X20))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.modSem.v',X17))),s('type.conSem.v',X19)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X18))),s('type.list.list'('type.conSem.v'),X20)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X15))),s('type.list.list'('type.conSem.v'),X16))))) | ? [X6,X7,X8] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2))))))),
  inference(flattening,[],[f204])).
fof(f204,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2)))) <=> ! [X3,X4,X5] : ((? [X21,X22,X23] : ((? [X48] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X48))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X48)))) | ? [X46,X47] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X46))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X47))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X46))),s('type.list.list'('type.conSem.v'),X47))))) | ? [X41,X42,X43,X44,X45] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.modSem.v'),X44))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X43),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.conSem.v'),X45))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X43),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X44))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45))))) | ? [X34,X35,X36,X37,X38,X39,X40] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.string.char'),X35),s('type.modLang.exp',X36))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37),s('type.list.list'('type.string.char'),X35),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.modLang.exp',X36))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X39),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | ? [X27,X28,X29,X30,X31,X32,X33] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28),s('type.list.list'('type.string.char'),X29))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28))),s('type.list.list'('type.string.char'),X29))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X32),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | ? [X26] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X26))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26)))) | ? [X24,X25] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X24))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X25))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X24))),s('type.list.list'('type.conSem.v'),X25)))))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v',X22))),s('type.conSem.v',X23))))) | ? [X14,X15,X16] : (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X15) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.modSem.v'),X15) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X17),s('type.list.list'('type.modSem.v'),X18))) & s('type.list.list'('type.conSem.v'),X16) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X19),s('type.list.list'('type.conSem.v'),X20))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.modSem.v',X17))),s('type.conSem.v',X19)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X18))),s('type.list.list'('type.conSem.v'),X20)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X15))),s('type.list.list'('type.conSem.v'),X16))))) | ? [X6,X7,X8] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2))))))),
  inference(ennf_transformation,[],[f150])).
fof(f150,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2)))) <=> ! [X3,X4,X5] : ((! [X21,X22,X23] : ((? [X48] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X48))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X48)))) | ? [X46,X47] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X46))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X47))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X46))),s('type.list.list'('type.conSem.v'),X47))))) | ? [X41,X42,X43,X44,X45] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.modSem.v'),X44))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X43),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.conSem.v'),X45))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X43),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X44))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45))))) | ? [X34,X35,X36,X37,X38,X39,X40] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.string.char'),X35),s('type.modLang.exp',X36))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37),s('type.list.list'('type.string.char'),X35),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.modLang.exp',X36))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X39),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | ? [X27,X28,X29,X30,X31,X32,X33] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28),s('type.list.list'('type.string.char'),X29))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28))),s('type.list.list'('type.string.char'),X29))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X32),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | ? [X26] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X26))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26)))) | ? [X24,X25] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X24))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X25))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X24))),s('type.list.list'('type.conSem.v'),X25)))))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v',X22))),s('type.conSem.v',X23))))) & ! [X14,X15,X16] : (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X15) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.modSem.v'),X15) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X17),s('type.list.list'('type.modSem.v'),X18))) & s('type.list.list'('type.conSem.v'),X16) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X19),s('type.list.list'('type.conSem.v'),X20))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.modSem.v',X17))),s('type.conSem.v',X19)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X18))),s('type.list.list'('type.conSem.v'),X20)))))) => p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X15))),s('type.list.list'('type.conSem.v'),X16))))) & ! [X6,X7,X8] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13)))))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2))))))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X5,X39,X40] : (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X39),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X40)))) <=> ! [X15,X16,X17] : ((! [X32,X33,X34] : ((? [X18] : (s('type.modSem.v',X33) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X18))) & s('type.conSem.v',X34) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X18)))) | ? [X8,X9] : (s('type.modSem.v',X33) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X8))) & s('type.conSem.v',X34) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X9))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X16),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X32))),s('type.list.list'('type.modSem.v'),X8))),s('type.list.list'('type.conSem.v'),X9))))) | ? [X19,X20,X21,X8,X9] : (s('type.modSem.v',X33) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X19),s('type.semanticPrimitives.tid_or_exn',X20))))),s('type.list.list'('type.modSem.v'),X8))) & s('type.conSem.v',X34) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X21),s('type.semanticPrimitives.tid_or_exn',X20))))),s('type.list.list'('type.conSem.v'),X9))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X21),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X8))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X32),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X19),s('type.semanticPrimitives.tid_or_exn',X20))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X16),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X32))),s('type.list.list'('type.modSem.v'),X8))),s('type.list.list'('type.conSem.v'),X9))))) | ? [X22,X23,X24,X25,X26,X27,X28] : (s('type.modSem.v',X33) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X26),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.string.char'),X23),s('type.modLang.exp',X24))) & s('type.conSem.v',X34) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X25),s('type.list.list'('type.string.char'),X23),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.modLang.exp',X24))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X17),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X32))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X25)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X26),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X27),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X32))))) | ? [X22,X29,X23,X26,X25,X27,X28] : (s('type.modSem.v',X33) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X26),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X29),s('type.list.list'('type.string.char'),X23))) & s('type.conSem.v',X34) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X25),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X29))),s('type.list.list'('type.string.char'),X23))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X17),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X32))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X25)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X26),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X27),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X32))))) | ? [X30] : (s('type.modSem.v',X33) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X30))) & s('type.conSem.v',X34) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X30)))) | ? [X8,X9] : (s('type.modSem.v',X33) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X8))) & s('type.conSem.v',X34) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X9))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X16),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X32))),s('type.list.list'('type.modSem.v'),X8))),s('type.list.list'('type.conSem.v'),X9)))))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X15),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X32))),s('type.modSem.v',X33))),s('type.conSem.v',X34))))) & ! [X12,X13,X14] : (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X13) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X14)) | ? [X7,X8,X10,X9] : (s('type.list.list'('type.modSem.v'),X13) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X7),s('type.list.list'('type.modSem.v'),X8))) & s('type.list.list'('type.conSem.v'),X14) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X10),s('type.list.list'('type.conSem.v'),X9))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X15),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X12))),s('type.modSem.v',X7))),s('type.conSem.v',X10)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X16),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X12))),s('type.list.list'('type.modSem.v'),X8))),s('type.list.list'('type.conSem.v'),X9)))))) => p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X16),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X12))),s('type.list.list'('type.modSem.v'),X13))),s('type.list.list'('type.conSem.v'),X14))))) & ! [X41,X42,X43] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X42) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X43)) | ? [X23,X7,X22,X31,X10] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X42) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X23),s('type.modSem.v',X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X43) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X23),s('type.conSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X17),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X41))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X15),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X41))),s('type.modSem.v',X7))),s('type.conSem.v',X10)))))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X17),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X41))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X42))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X43)))))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X17),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X39))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X40))))))),
  file('thm.mod_to_conProof.v_rel_eqns|split|5','thm.mod_to_conProof.v_rel|48|_def')).
fof(f903,plain,(
  ( ! [X2,X0,X14,X12,X1,X13] : (~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2)))) | sP38(X12,sK294(X14,X13,X12,X2,X1,X0),X14,sK296(X14,X13,X12,X2,X1,X0),sK295(X14,X13,X12,X2,X1,X0)) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X13),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK291(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.modSem.v'),sK292(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK293(X14,X13,X12,X2,X1,X0))))) | sP39(X12,X13,X14) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X14),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2))))) )),
  inference(cnf_transformation,[],[f478])).
fof(f904,plain,(
  ( ! [X2,X0,X14,X12,X1,X13] : (~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X14),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK294(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK295(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK296(X14,X13,X12,X2,X1,X0))))) | sP37(X13,sK291(X14,X13,X12,X2,X1,X0),X12,sK293(X14,X13,X12,X2,X1,X0),sK292(X14,X13,X12,X2,X1,X0)) | sP39(X12,X13,X14) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X14),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2))))) )),
  inference(cnf_transformation,[],[f478])).
fof(f905,plain,(
  ( ! [X2,X0,X14,X12,X1,X13] : (~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X14),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK294(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK295(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK296(X14,X13,X12,X2,X1,X0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X13),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK291(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.modSem.v'),sK292(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK293(X14,X13,X12,X2,X1,X0))))) | sP39(X12,X13,X14) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X14),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2))))) )),
  inference(cnf_transformation,[],[f478])).
fof(f737,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.list.list'('type.modSem.v'),X4) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X5),s('type.list.list'('type.modSem.v'),X6))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X6))),s('type.list.list'('type.conSem.v'),X8)))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X5))),s('type.conSem.v',X7)))) | s('type.list.list'('type.conSem.v'),X3) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X7),s('type.list.list'('type.conSem.v'),X8))) | sP20(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f394])).
fof(f394,plain,(
  ! [X0,X1,X2,X3,X4] : ((~sP20(X0,X1,X2,X3,X4) | (s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X4) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X3)) | (s('type.list.list'('type.modSem.v'),X4) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK167(X4,X3,X2,X1,X0)),s('type.list.list'('type.modSem.v'),sK168(X4,X3,X2,X1,X0)))) & s('type.list.list'('type.conSem.v'),X3) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',sK169(X4,X3,X2,X1,X0)),s('type.list.list'('type.conSem.v'),sK170(X4,X3,X2,X1,X0)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',sK167(X4,X3,X2,X1,X0)))),s('type.conSem.v',sK169(X4,X3,X2,X1,X0))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),sK168(X4,X3,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK170(X4,X3,X2,X1,X0))))))) & (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') != s('type.list.list'('type.modSem.v'),X4) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') != s('type.list.list'('type.conSem.v'),X3)) & ! [X5,X6,X7,X8] : (s('type.list.list'('type.modSem.v'),X4) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X5),s('type.list.list'('type.modSem.v'),X6))) | s('type.list.list'('type.conSem.v'),X3) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X7),s('type.list.list'('type.conSem.v'),X8))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X5))),s('type.conSem.v',X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X6))),s('type.list.list'('type.conSem.v'),X8)))))) | sP20(X0,X1,X2,X3,X4)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK167,sK168,sK169,sK170])],[f393])).
fof(f393,plain,(
  ! [X0,X1,X2,X3,X4] : ((~sP20(X0,X1,X2,X3,X4) | (s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X4) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X3)) | ? [X9,X10,X11,X12] : (s('type.list.list'('type.modSem.v'),X4) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X9),s('type.list.list'('type.modSem.v'),X10))) & s('type.list.list'('type.conSem.v'),X3) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X11),s('type.list.list'('type.conSem.v'),X12))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X9))),s('type.conSem.v',X11)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X10))),s('type.list.list'('type.conSem.v'),X12)))))) & (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') != s('type.list.list'('type.modSem.v'),X4) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') != s('type.list.list'('type.conSem.v'),X3)) & ! [X5,X6,X7,X8] : (s('type.list.list'('type.modSem.v'),X4) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X5),s('type.list.list'('type.modSem.v'),X6))) | s('type.list.list'('type.conSem.v'),X3) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X7),s('type.list.list'('type.conSem.v'),X8))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X5))),s('type.conSem.v',X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X6))),s('type.list.list'('type.conSem.v'),X8)))))) | sP20(X0,X1,X2,X3,X4)))),
  inference(rectify,[],[f392])).
fof(f392,plain,(
  ! [X4,X14,X3,X16,X15] : ((~sP20(X4,X14,X3,X16,X15) | (s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X15) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.modSem.v'),X15) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X17),s('type.list.list'('type.modSem.v'),X18))) & s('type.list.list'('type.conSem.v'),X16) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X19),s('type.list.list'('type.conSem.v'),X20))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.modSem.v',X17))),s('type.conSem.v',X19)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X18))),s('type.list.list'('type.conSem.v'),X20)))))) & (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') != s('type.list.list'('type.modSem.v'),X15) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') != s('type.list.list'('type.conSem.v'),X16)) & ! [X17,X18,X19,X20] : (s('type.list.list'('type.modSem.v'),X15) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X17),s('type.list.list'('type.modSem.v'),X18))) | s('type.list.list'('type.conSem.v'),X16) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X19),s('type.list.list'('type.conSem.v'),X20))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.modSem.v',X17))),s('type.conSem.v',X19)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X18))),s('type.list.list'('type.conSem.v'),X20)))))) | sP20(X4,X14,X3,X16,X15)))),
  inference(flattening,[],[f391])).
fof(f391,plain,(
  ! [X4,X14,X3,X16,X15] : ((~sP20(X4,X14,X3,X16,X15) | ((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X15) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.modSem.v'),X15) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X17),s('type.list.list'('type.modSem.v'),X18))) & s('type.list.list'('type.conSem.v'),X16) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X19),s('type.list.list'('type.conSem.v'),X20))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.modSem.v',X17))),s('type.conSem.v',X19)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X18))),s('type.list.list'('type.conSem.v'),X20))))))) & (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') != s('type.list.list'('type.modSem.v'),X15) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') != s('type.list.list'('type.conSem.v'),X16)) & ! [X17,X18,X19,X20] : (s('type.list.list'('type.modSem.v'),X15) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X17),s('type.list.list'('type.modSem.v'),X18))) | s('type.list.list'('type.conSem.v'),X16) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X19),s('type.list.list'('type.conSem.v'),X20))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.modSem.v',X17))),s('type.conSem.v',X19)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X18))),s('type.list.list'('type.conSem.v'),X20)))))) | sP20(X4,X14,X3,X16,X15)))),
  inference(nnf_transformation,[],[f237])).
fof(f741,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X4))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X4))),s('type.list.list'('type.conSem.v'),X5)))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X5))) | sP19(X0,X1,X2,X3)) )),
  inference(cnf_transformation,[],[f397])).
fof(f397,plain,(
  ! [X0,X1,X2,X3] : ((~sP19(X0,X1,X2,X3) | (s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),sK171(X3,X2,X1,X0)))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),sK172(X3,X2,X1,X0)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),sK171(X3,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK172(X3,X2,X1,X0))))))) & (! [X4,X5] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X4))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X5))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X4))),s('type.list.list'('type.conSem.v'),X5))))) | sP19(X0,X1,X2,X3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK171,sK172])],[f396])).
fof(f396,plain,(
  ! [X0,X1,X2,X3] : ((~sP19(X0,X1,X2,X3) | ? [X6,X7] : (s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X6))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X7))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X6))),s('type.list.list'('type.conSem.v'),X7)))))) & (! [X4,X5] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X4))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X5))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X4))),s('type.list.list'('type.conSem.v'),X5))))) | sP19(X0,X1,X2,X3)))),
  inference(rectify,[],[f395])).
fof(f395,plain,(
  ! [X4,X21,X23,X22] : ((~sP19(X4,X21,X23,X22) | ? [X24,X25] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X24))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X25))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X24))),s('type.list.list'('type.conSem.v'),X25)))))) & (! [X24,X25] : (s('type.modSem.v',X22) != s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X24))) | s('type.conSem.v',X23) != s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X25))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X24))),s('type.list.list'('type.conSem.v'),X25))))) | sP19(X4,X21,X23,X22)))),
  inference(nnf_transformation,[],[f236])).
fof(f745,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X4))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X4))),s('type.list.list'('type.conSem.v'),X5)))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X5))) | sP18(X0,X1,X2,X3)) )),
  inference(cnf_transformation,[],[f400])).
fof(f400,plain,(
  ! [X0,X1,X2,X3] : ((~sP18(X0,X1,X2,X3) | (s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),sK173(X3,X2,X1,X0)))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),sK174(X3,X2,X1,X0)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),sK173(X3,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK174(X3,X2,X1,X0))))))) & (! [X4,X5] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X4))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X5))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X4))),s('type.list.list'('type.conSem.v'),X5))))) | sP18(X0,X1,X2,X3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK173,sK174])],[f399])).
fof(f399,plain,(
  ! [X0,X1,X2,X3] : ((~sP18(X0,X1,X2,X3) | ? [X6,X7] : (s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X6))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X7))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X6))),s('type.list.list'('type.conSem.v'),X7)))))) & (! [X4,X5] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X4))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X5))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X4))),s('type.list.list'('type.conSem.v'),X5))))) | sP18(X0,X1,X2,X3)))),
  inference(rectify,[],[f398])).
fof(f398,plain,(
  ! [X4,X21,X23,X22] : ((~sP18(X4,X21,X23,X22) | ? [X46,X47] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X46))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X47))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X46))),s('type.list.list'('type.conSem.v'),X47)))))) & (! [X46,X47] : (s('type.modSem.v',X22) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X46))) | s('type.conSem.v',X23) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X47))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X46))),s('type.list.list'('type.conSem.v'),X47))))) | sP18(X4,X21,X23,X22)))),
  inference(nnf_transformation,[],[f235])).
fof(f760,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X6),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X7))))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.semanticPrimitives.tid_or_exn',X5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X7))),s('type.list.list'('type.conSem.v'),X8)))) | sP15(X0,X1,X2,X3) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X6),s('type.semanticPrimitives.tid_or_exn',X5))))),s('type.list.list'('type.conSem.v'),X8))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.semanticPrimitives.tid_or_exn',X5))))),s('type.list.list'('type.modSem.v'),X7)))) )),
  inference(cnf_transformation,[],[f409])).
fof(f409,plain,(
  ! [X0,X1,X2,X3] : ((~sP15(X0,X1,X2,X3) | (s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK189(X3,X2,X1,X0)),s('type.semanticPrimitives.tid_or_exn',sK190(X3,X2,X1,X0)))))),s('type.list.list'('type.modSem.v'),sK192(X3,X2,X1,X0)))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',sK191(X3,X2,X1,X0)),s('type.semanticPrimitives.tid_or_exn',sK190(X3,X2,X1,X0)))))),s('type.list.list'('type.conSem.v'),sK193(X3,X2,X1,X0)))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',sK191(X3,X2,X1,X0)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),sK192(X3,X2,X1,X0)))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK189(X3,X2,X1,X0)),s('type.semanticPrimitives.tid_or_exn',sK190(X3,X2,X1,X0)))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),sK192(X3,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK193(X3,X2,X1,X0))))))) & (! [X4,X5,X6,X7,X8] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.semanticPrimitives.tid_or_exn',X5))))),s('type.list.list'('type.modSem.v'),X7))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X6),s('type.semanticPrimitives.tid_or_exn',X5))))),s('type.list.list'('type.conSem.v'),X8))) | s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X6),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X7))))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.semanticPrimitives.tid_or_exn',X5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X7))),s('type.list.list'('type.conSem.v'),X8))))) | sP15(X0,X1,X2,X3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK189,sK190,sK191,sK192,sK193])],[f408])).
fof(f408,plain,(
  ! [X0,X1,X2,X3] : ((~sP15(X0,X1,X2,X3) | ? [X9,X10,X11,X12,X13] : (s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.semanticPrimitives.tid_or_exn',X10))))),s('type.list.list'('type.modSem.v'),X12))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X11),s('type.semanticPrimitives.tid_or_exn',X10))))),s('type.list.list'('type.conSem.v'),X13))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X11),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X12))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.semanticPrimitives.tid_or_exn',X10))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X12))),s('type.list.list'('type.conSem.v'),X13)))))) & (! [X4,X5,X6,X7,X8] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.semanticPrimitives.tid_or_exn',X5))))),s('type.list.list'('type.modSem.v'),X7))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X6),s('type.semanticPrimitives.tid_or_exn',X5))))),s('type.list.list'('type.conSem.v'),X8))) | s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X6),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X7))))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.semanticPrimitives.tid_or_exn',X5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X7))),s('type.list.list'('type.conSem.v'),X8))))) | sP15(X0,X1,X2,X3)))),
  inference(rectify,[],[f407])).
fof(f407,plain,(
  ! [X4,X21,X23,X22] : ((~sP15(X4,X21,X23,X22) | ? [X41,X42,X43,X44,X45] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.modSem.v'),X44))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X43),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.conSem.v'),X45))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X43),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X44))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45)))))) & (! [X41,X42,X43,X44,X45] : (s('type.modSem.v',X22) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.modSem.v'),X44))) | s('type.conSem.v',X23) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X43),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.conSem.v'),X45))) | s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X43),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X44))))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45))))) | sP15(X4,X21,X23,X22)))),
  inference(nnf_transformation,[],[f232])).
fof(f812,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.list.list'('type.modSem.v'),X4) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X5),s('type.list.list'('type.modSem.v'),X6))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X6))),s('type.list.list'('type.conSem.v'),X8)))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X5))),s('type.conSem.v',X7)))) | s('type.list.list'('type.conSem.v'),X3) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X7),s('type.list.list'('type.conSem.v'),X8))) | sP29(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f428])).
fof(f428,plain,(
  ! [X0,X1,X2,X3,X4] : ((~sP29(X0,X1,X2,X3,X4) | (s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X4) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X3)) | (s('type.list.list'('type.modSem.v'),X4) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK217(X4,X3,X2,X1,X0)),s('type.list.list'('type.modSem.v'),sK218(X4,X3,X2,X1,X0)))) & s('type.list.list'('type.conSem.v'),X3) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',sK219(X4,X3,X2,X1,X0)),s('type.list.list'('type.conSem.v'),sK220(X4,X3,X2,X1,X0)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',sK217(X4,X3,X2,X1,X0)))),s('type.conSem.v',sK219(X4,X3,X2,X1,X0))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),sK218(X4,X3,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK220(X4,X3,X2,X1,X0))))))) & (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') != s('type.list.list'('type.modSem.v'),X4) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') != s('type.list.list'('type.conSem.v'),X3)) & ! [X5,X6,X7,X8] : (s('type.list.list'('type.modSem.v'),X4) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X5),s('type.list.list'('type.modSem.v'),X6))) | s('type.list.list'('type.conSem.v'),X3) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X7),s('type.list.list'('type.conSem.v'),X8))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X5))),s('type.conSem.v',X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X6))),s('type.list.list'('type.conSem.v'),X8)))))) | sP29(X0,X1,X2,X3,X4)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK217,sK218,sK219,sK220])],[f427])).
fof(f427,plain,(
  ! [X0,X1,X2,X3,X4] : ((~sP29(X0,X1,X2,X3,X4) | (s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X4) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X3)) | ? [X9,X10,X11,X12] : (s('type.list.list'('type.modSem.v'),X4) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X9),s('type.list.list'('type.modSem.v'),X10))) & s('type.list.list'('type.conSem.v'),X3) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X11),s('type.list.list'('type.conSem.v'),X12))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X9))),s('type.conSem.v',X11)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X10))),s('type.list.list'('type.conSem.v'),X12)))))) & (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') != s('type.list.list'('type.modSem.v'),X4) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') != s('type.list.list'('type.conSem.v'),X3)) & ! [X5,X6,X7,X8] : (s('type.list.list'('type.modSem.v'),X4) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X5),s('type.list.list'('type.modSem.v'),X6))) | s('type.list.list'('type.conSem.v'),X3) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X7),s('type.list.list'('type.conSem.v'),X8))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X5))),s('type.conSem.v',X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X6))),s('type.list.list'('type.conSem.v'),X8)))))) | sP29(X0,X1,X2,X3,X4)))),
  inference(rectify,[],[f426])).
fof(f426,plain,(
  ! [X4,X14,X3,X16,X15] : ((~sP29(X4,X14,X3,X16,X15) | (s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X15) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.modSem.v'),X15) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X17),s('type.list.list'('type.modSem.v'),X18))) & s('type.list.list'('type.conSem.v'),X16) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X19),s('type.list.list'('type.conSem.v'),X20))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.modSem.v',X17))),s('type.conSem.v',X19)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X18))),s('type.list.list'('type.conSem.v'),X20)))))) & (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') != s('type.list.list'('type.modSem.v'),X15) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') != s('type.list.list'('type.conSem.v'),X16)) & ! [X17,X18,X19,X20] : (s('type.list.list'('type.modSem.v'),X15) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X17),s('type.list.list'('type.modSem.v'),X18))) | s('type.list.list'('type.conSem.v'),X16) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X19),s('type.list.list'('type.conSem.v'),X20))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.modSem.v',X17))),s('type.conSem.v',X19)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X18))),s('type.list.list'('type.conSem.v'),X20)))))) | sP29(X4,X14,X3,X16,X15)))),
  inference(flattening,[],[f425])).
fof(f425,plain,(
  ! [X4,X14,X3,X16,X15] : ((~sP29(X4,X14,X3,X16,X15) | ((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X15) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.modSem.v'),X15) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X17),s('type.list.list'('type.modSem.v'),X18))) & s('type.list.list'('type.conSem.v'),X16) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X19),s('type.list.list'('type.conSem.v'),X20))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.modSem.v',X17))),s('type.conSem.v',X19)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X18))),s('type.list.list'('type.conSem.v'),X20))))))) & (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') != s('type.list.list'('type.modSem.v'),X15) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') != s('type.list.list'('type.conSem.v'),X16)) & ! [X17,X18,X19,X20] : (s('type.list.list'('type.modSem.v'),X15) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X17),s('type.list.list'('type.modSem.v'),X18))) | s('type.list.list'('type.conSem.v'),X16) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X19),s('type.list.list'('type.conSem.v'),X20))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.modSem.v',X17))),s('type.conSem.v',X19)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X18))),s('type.list.list'('type.conSem.v'),X20)))))) | sP29(X4,X14,X3,X16,X15)))),
  inference(nnf_transformation,[],[f248])).
fof(f816,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X4))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X4))),s('type.list.list'('type.conSem.v'),X5)))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X5))) | sP28(X0,X1,X2,X3)) )),
  inference(cnf_transformation,[],[f431])).
fof(f431,plain,(
  ! [X0,X1,X2,X3] : ((~sP28(X0,X1,X2,X3) | (s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),sK221(X3,X2,X1,X0)))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),sK222(X3,X2,X1,X0)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),sK221(X3,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK222(X3,X2,X1,X0))))))) & (! [X4,X5] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X4))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X5))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X4))),s('type.list.list'('type.conSem.v'),X5))))) | sP28(X0,X1,X2,X3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK221,sK222])],[f430])).
fof(f430,plain,(
  ! [X0,X1,X2,X3] : ((~sP28(X0,X1,X2,X3) | ? [X6,X7] : (s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X6))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X7))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X6))),s('type.list.list'('type.conSem.v'),X7)))))) & (! [X4,X5] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X4))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X5))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X4))),s('type.list.list'('type.conSem.v'),X5))))) | sP28(X0,X1,X2,X3)))),
  inference(rectify,[],[f429])).
fof(f429,plain,(
  ! [X4,X21,X23,X22] : ((~sP28(X4,X21,X23,X22) | ? [X24,X25] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X24))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X25))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X24))),s('type.list.list'('type.conSem.v'),X25)))))) & (! [X24,X25] : (s('type.modSem.v',X22) != s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X24))) | s('type.conSem.v',X23) != s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X25))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X24))),s('type.list.list'('type.conSem.v'),X25))))) | sP28(X4,X21,X23,X22)))),
  inference(nnf_transformation,[],[f247])).
fof(f820,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X4))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X4))),s('type.list.list'('type.conSem.v'),X5)))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X5))) | sP27(X0,X1,X2,X3)) )),
  inference(cnf_transformation,[],[f434])).
fof(f434,plain,(
  ! [X0,X1,X2,X3] : ((~sP27(X0,X1,X2,X3) | (s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),sK223(X3,X2,X1,X0)))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),sK224(X3,X2,X1,X0)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),sK223(X3,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK224(X3,X2,X1,X0))))))) & (! [X4,X5] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X4))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X5))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X4))),s('type.list.list'('type.conSem.v'),X5))))) | sP27(X0,X1,X2,X3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK223,sK224])],[f433])).
fof(f433,plain,(
  ! [X0,X1,X2,X3] : ((~sP27(X0,X1,X2,X3) | ? [X6,X7] : (s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X6))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X7))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X6))),s('type.list.list'('type.conSem.v'),X7)))))) & (! [X4,X5] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X4))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X5))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X4))),s('type.list.list'('type.conSem.v'),X5))))) | sP27(X0,X1,X2,X3)))),
  inference(rectify,[],[f432])).
fof(f432,plain,(
  ! [X4,X21,X23,X22] : ((~sP27(X4,X21,X23,X22) | ? [X46,X47] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X46))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X47))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X46))),s('type.list.list'('type.conSem.v'),X47)))))) & (! [X46,X47] : (s('type.modSem.v',X22) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X46))) | s('type.conSem.v',X23) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X47))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X46))),s('type.list.list'('type.conSem.v'),X47))))) | sP27(X4,X21,X23,X22)))),
  inference(nnf_transformation,[],[f246])).
fof(f835,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X6),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X7))))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.semanticPrimitives.tid_or_exn',X5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X7))),s('type.list.list'('type.conSem.v'),X8)))) | sP24(X0,X1,X2,X3) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X6),s('type.semanticPrimitives.tid_or_exn',X5))))),s('type.list.list'('type.conSem.v'),X8))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.semanticPrimitives.tid_or_exn',X5))))),s('type.list.list'('type.modSem.v'),X7)))) )),
  inference(cnf_transformation,[],[f443])).
fof(f443,plain,(
  ! [X0,X1,X2,X3] : ((~sP24(X0,X1,X2,X3) | (s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK239(X3,X2,X1,X0)),s('type.semanticPrimitives.tid_or_exn',sK240(X3,X2,X1,X0)))))),s('type.list.list'('type.modSem.v'),sK242(X3,X2,X1,X0)))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',sK241(X3,X2,X1,X0)),s('type.semanticPrimitives.tid_or_exn',sK240(X3,X2,X1,X0)))))),s('type.list.list'('type.conSem.v'),sK243(X3,X2,X1,X0)))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',sK241(X3,X2,X1,X0)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),sK242(X3,X2,X1,X0)))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK239(X3,X2,X1,X0)),s('type.semanticPrimitives.tid_or_exn',sK240(X3,X2,X1,X0)))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),sK242(X3,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK243(X3,X2,X1,X0))))))) & (! [X4,X5,X6,X7,X8] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.semanticPrimitives.tid_or_exn',X5))))),s('type.list.list'('type.modSem.v'),X7))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X6),s('type.semanticPrimitives.tid_or_exn',X5))))),s('type.list.list'('type.conSem.v'),X8))) | s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X6),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X7))))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.semanticPrimitives.tid_or_exn',X5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X7))),s('type.list.list'('type.conSem.v'),X8))))) | sP24(X0,X1,X2,X3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK239,sK240,sK241,sK242,sK243])],[f442])).
fof(f442,plain,(
  ! [X0,X1,X2,X3] : ((~sP24(X0,X1,X2,X3) | ? [X9,X10,X11,X12,X13] : (s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.semanticPrimitives.tid_or_exn',X10))))),s('type.list.list'('type.modSem.v'),X12))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X11),s('type.semanticPrimitives.tid_or_exn',X10))))),s('type.list.list'('type.conSem.v'),X13))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X11),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X12))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.semanticPrimitives.tid_or_exn',X10))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X12))),s('type.list.list'('type.conSem.v'),X13)))))) & (! [X4,X5,X6,X7,X8] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.semanticPrimitives.tid_or_exn',X5))))),s('type.list.list'('type.modSem.v'),X7))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X6),s('type.semanticPrimitives.tid_or_exn',X5))))),s('type.list.list'('type.conSem.v'),X8))) | s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X6),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X7))))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.semanticPrimitives.tid_or_exn',X5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X7))),s('type.list.list'('type.conSem.v'),X8))))) | sP24(X0,X1,X2,X3)))),
  inference(rectify,[],[f441])).
fof(f441,plain,(
  ! [X4,X21,X23,X22] : ((~sP24(X4,X21,X23,X22) | ? [X41,X42,X43,X44,X45] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.modSem.v'),X44))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X43),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.conSem.v'),X45))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X43),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X44))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45)))))) & (! [X41,X42,X43,X44,X45] : (s('type.modSem.v',X22) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.modSem.v'),X44))) | s('type.conSem.v',X23) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X43),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.conSem.v'),X45))) | s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X43),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X44))))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45))))) | sP24(X4,X21,X23,X22)))),
  inference(nnf_transformation,[],[f243])).
fof(f878,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.list.list'('type.modSem.v'),X4) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X5),s('type.list.list'('type.modSem.v'),X6))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X6))),s('type.list.list'('type.conSem.v'),X8)))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X5))),s('type.conSem.v',X7)))) | s('type.list.list'('type.conSem.v'),X3) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X7),s('type.list.list'('type.conSem.v'),X8))) | sP37(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f460])).
fof(f460,plain,(
  ! [X0,X1,X2,X3,X4] : ((~sP37(X0,X1,X2,X3,X4) | (s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X4) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X3)) | (s('type.list.list'('type.modSem.v'),X4) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK264(X4,X3,X2,X1,X0)),s('type.list.list'('type.modSem.v'),sK265(X4,X3,X2,X1,X0)))) & s('type.list.list'('type.conSem.v'),X3) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',sK266(X4,X3,X2,X1,X0)),s('type.list.list'('type.conSem.v'),sK267(X4,X3,X2,X1,X0)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',sK264(X4,X3,X2,X1,X0)))),s('type.conSem.v',sK266(X4,X3,X2,X1,X0))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),sK265(X4,X3,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK267(X4,X3,X2,X1,X0))))))) & (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') != s('type.list.list'('type.modSem.v'),X4) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') != s('type.list.list'('type.conSem.v'),X3)) & ! [X5,X6,X7,X8] : (s('type.list.list'('type.modSem.v'),X4) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X5),s('type.list.list'('type.modSem.v'),X6))) | s('type.list.list'('type.conSem.v'),X3) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X7),s('type.list.list'('type.conSem.v'),X8))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X5))),s('type.conSem.v',X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X6))),s('type.list.list'('type.conSem.v'),X8)))))) | sP37(X0,X1,X2,X3,X4)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK264,sK265,sK266,sK267])],[f459])).
fof(f459,plain,(
  ! [X0,X1,X2,X3,X4] : ((~sP37(X0,X1,X2,X3,X4) | (s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X4) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X3)) | ? [X9,X10,X11,X12] : (s('type.list.list'('type.modSem.v'),X4) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X9),s('type.list.list'('type.modSem.v'),X10))) & s('type.list.list'('type.conSem.v'),X3) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X11),s('type.list.list'('type.conSem.v'),X12))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X9))),s('type.conSem.v',X11)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X10))),s('type.list.list'('type.conSem.v'),X12)))))) & (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') != s('type.list.list'('type.modSem.v'),X4) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') != s('type.list.list'('type.conSem.v'),X3)) & ! [X5,X6,X7,X8] : (s('type.list.list'('type.modSem.v'),X4) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X5),s('type.list.list'('type.modSem.v'),X6))) | s('type.list.list'('type.conSem.v'),X3) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X7),s('type.list.list'('type.conSem.v'),X8))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X5))),s('type.conSem.v',X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X6))),s('type.list.list'('type.conSem.v'),X8)))))) | sP37(X0,X1,X2,X3,X4)))),
  inference(rectify,[],[f458])).
fof(f458,plain,(
  ! [X4,X14,X3,X16,X15] : ((~sP37(X4,X14,X3,X16,X15) | (s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X15) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.modSem.v'),X15) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X17),s('type.list.list'('type.modSem.v'),X18))) & s('type.list.list'('type.conSem.v'),X16) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X19),s('type.list.list'('type.conSem.v'),X20))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.modSem.v',X17))),s('type.conSem.v',X19)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X18))),s('type.list.list'('type.conSem.v'),X20)))))) & (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') != s('type.list.list'('type.modSem.v'),X15) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') != s('type.list.list'('type.conSem.v'),X16)) & ! [X17,X18,X19,X20] : (s('type.list.list'('type.modSem.v'),X15) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X17),s('type.list.list'('type.modSem.v'),X18))) | s('type.list.list'('type.conSem.v'),X16) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X19),s('type.list.list'('type.conSem.v'),X20))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.modSem.v',X17))),s('type.conSem.v',X19)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X18))),s('type.list.list'('type.conSem.v'),X20)))))) | sP37(X4,X14,X3,X16,X15)))),
  inference(flattening,[],[f457])).
fof(f457,plain,(
  ! [X4,X14,X3,X16,X15] : ((~sP37(X4,X14,X3,X16,X15) | ((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X15) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.modSem.v'),X15) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X17),s('type.list.list'('type.modSem.v'),X18))) & s('type.list.list'('type.conSem.v'),X16) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X19),s('type.list.list'('type.conSem.v'),X20))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.modSem.v',X17))),s('type.conSem.v',X19)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X18))),s('type.list.list'('type.conSem.v'),X20))))))) & (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') != s('type.list.list'('type.modSem.v'),X15) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') != s('type.list.list'('type.conSem.v'),X16)) & ! [X17,X18,X19,X20] : (s('type.list.list'('type.modSem.v'),X15) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X17),s('type.list.list'('type.modSem.v'),X18))) | s('type.list.list'('type.conSem.v'),X16) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X19),s('type.list.list'('type.conSem.v'),X20))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.modSem.v',X17))),s('type.conSem.v',X19)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X18))),s('type.list.list'('type.conSem.v'),X20)))))) | sP37(X4,X14,X3,X16,X15)))),
  inference(nnf_transformation,[],[f257])).
fof(f882,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X4))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X4))),s('type.list.list'('type.conSem.v'),X5)))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X5))) | sP36(X0,X1,X2,X3)) )),
  inference(cnf_transformation,[],[f463])).
fof(f463,plain,(
  ! [X0,X1,X2,X3] : ((~sP36(X0,X1,X2,X3) | (s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),sK268(X3,X2,X1,X0)))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),sK269(X3,X2,X1,X0)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),sK268(X3,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK269(X3,X2,X1,X0))))))) & (! [X4,X5] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X4))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X5))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X4))),s('type.list.list'('type.conSem.v'),X5))))) | sP36(X0,X1,X2,X3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK268,sK269])],[f462])).
fof(f462,plain,(
  ! [X0,X1,X2,X3] : ((~sP36(X0,X1,X2,X3) | ? [X6,X7] : (s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X6))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X7))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X6))),s('type.list.list'('type.conSem.v'),X7)))))) & (! [X4,X5] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X4))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X5))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X4))),s('type.list.list'('type.conSem.v'),X5))))) | sP36(X0,X1,X2,X3)))),
  inference(rectify,[],[f461])).
fof(f461,plain,(
  ! [X4,X21,X23,X22] : ((~sP36(X4,X21,X23,X22) | ? [X24,X25] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X24))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X25))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X24))),s('type.list.list'('type.conSem.v'),X25)))))) & (! [X24,X25] : (s('type.modSem.v',X22) != s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X24))) | s('type.conSem.v',X23) != s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X25))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X24))),s('type.list.list'('type.conSem.v'),X25))))) | sP36(X4,X21,X23,X22)))),
  inference(nnf_transformation,[],[f256])).
fof(f886,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X4))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X4))),s('type.list.list'('type.conSem.v'),X5)))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X5))) | sP35(X0,X1,X2,X3)) )),
  inference(cnf_transformation,[],[f466])).
fof(f466,plain,(
  ! [X0,X1,X2,X3] : ((~sP35(X0,X1,X2,X3) | (s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),sK270(X3,X2,X1,X0)))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),sK271(X3,X2,X1,X0)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),sK270(X3,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK271(X3,X2,X1,X0))))))) & (! [X4,X5] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X4))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X5))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X4))),s('type.list.list'('type.conSem.v'),X5))))) | sP35(X0,X1,X2,X3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK270,sK271])],[f465])).
fof(f465,plain,(
  ! [X0,X1,X2,X3] : ((~sP35(X0,X1,X2,X3) | ? [X6,X7] : (s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X6))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X7))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X6))),s('type.list.list'('type.conSem.v'),X7)))))) & (! [X4,X5] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X4))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X5))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X4))),s('type.list.list'('type.conSem.v'),X5))))) | sP35(X0,X1,X2,X3)))),
  inference(rectify,[],[f464])).
fof(f464,plain,(
  ! [X4,X21,X23,X22] : ((~sP35(X4,X21,X23,X22) | ? [X46,X47] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X46))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X47))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X46))),s('type.list.list'('type.conSem.v'),X47)))))) & (! [X46,X47] : (s('type.modSem.v',X22) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X46))) | s('type.conSem.v',X23) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X47))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X46))),s('type.list.list'('type.conSem.v'),X47))))) | sP35(X4,X21,X23,X22)))),
  inference(nnf_transformation,[],[f255])).
fof(f901,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X6),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X7))))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.semanticPrimitives.tid_or_exn',X5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X7))),s('type.list.list'('type.conSem.v'),X8)))) | sP32(X0,X1,X2,X3) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X6),s('type.semanticPrimitives.tid_or_exn',X5))))),s('type.list.list'('type.conSem.v'),X8))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.semanticPrimitives.tid_or_exn',X5))))),s('type.list.list'('type.modSem.v'),X7)))) )),
  inference(cnf_transformation,[],[f475])).
fof(f475,plain,(
  ! [X0,X1,X2,X3] : ((~sP32(X0,X1,X2,X3) | (s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK286(X3,X2,X1,X0)),s('type.semanticPrimitives.tid_or_exn',sK287(X3,X2,X1,X0)))))),s('type.list.list'('type.modSem.v'),sK289(X3,X2,X1,X0)))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',sK288(X3,X2,X1,X0)),s('type.semanticPrimitives.tid_or_exn',sK287(X3,X2,X1,X0)))))),s('type.list.list'('type.conSem.v'),sK290(X3,X2,X1,X0)))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',sK288(X3,X2,X1,X0)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),sK289(X3,X2,X1,X0)))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK286(X3,X2,X1,X0)),s('type.semanticPrimitives.tid_or_exn',sK287(X3,X2,X1,X0)))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),sK289(X3,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK290(X3,X2,X1,X0))))))) & (! [X4,X5,X6,X7,X8] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.semanticPrimitives.tid_or_exn',X5))))),s('type.list.list'('type.modSem.v'),X7))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X6),s('type.semanticPrimitives.tid_or_exn',X5))))),s('type.list.list'('type.conSem.v'),X8))) | s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X6),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X7))))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.semanticPrimitives.tid_or_exn',X5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X7))),s('type.list.list'('type.conSem.v'),X8))))) | sP32(X0,X1,X2,X3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK286,sK287,sK288,sK289,sK290])],[f474])).
fof(f474,plain,(
  ! [X0,X1,X2,X3] : ((~sP32(X0,X1,X2,X3) | ? [X9,X10,X11,X12,X13] : (s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.semanticPrimitives.tid_or_exn',X10))))),s('type.list.list'('type.modSem.v'),X12))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X11),s('type.semanticPrimitives.tid_or_exn',X10))))),s('type.list.list'('type.conSem.v'),X13))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X11),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X12))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.semanticPrimitives.tid_or_exn',X10))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X12))),s('type.list.list'('type.conSem.v'),X13)))))) & (! [X4,X5,X6,X7,X8] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.semanticPrimitives.tid_or_exn',X5))))),s('type.list.list'('type.modSem.v'),X7))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X6),s('type.semanticPrimitives.tid_or_exn',X5))))),s('type.list.list'('type.conSem.v'),X8))) | s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X6),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X7))))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.semanticPrimitives.tid_or_exn',X5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X7))),s('type.list.list'('type.conSem.v'),X8))))) | sP32(X0,X1,X2,X3)))),
  inference(rectify,[],[f473])).
fof(f473,plain,(
  ! [X4,X21,X23,X22] : ((~sP32(X4,X21,X23,X22) | ? [X41,X42,X43,X44,X45] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.modSem.v'),X44))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X43),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.conSem.v'),X45))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X43),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X44))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45)))))) & (! [X41,X42,X43,X44,X45] : (s('type.modSem.v',X22) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.modSem.v'),X44))) | s('type.conSem.v',X23) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X43),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.conSem.v'),X45))) | s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X43),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X44))))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45))))) | sP32(X4,X21,X23,X22)))),
  inference(nnf_transformation,[],[f252])).
fof(f658,plain,(
  ( ! [X0,X1] : (~sP6(X0,X1) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK67(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK68(X1,X0)),s('type.modSem.v',sK69(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK70(X1,X0)))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK68(X1,X0)),s('type.conSem.v',sK72(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK71(X1,X0)))))))) )),
  inference(cnf_transformation,[],[f346])).
fof(f346,plain,(
  ! [X0,X1] : (~sP6(X0,X1) | (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK67(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK70(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK71(X1,X0))))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK67(X1,X0)))),s('type.modSem.v',sK69(X1,X0)))),s('type.conSem.v',sK72(X1,X0))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK67(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK68(X1,X0)),s('type.modSem.v',sK69(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK70(X1,X0)))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK68(X1,X0)),s('type.conSem.v',sK72(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK71(X1,X0)))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK67,sK68,sK69,sK70,sK71,sK72])],[f345])).
fof(f345,plain,(
  ! [X0,X1] : (~sP6(X0,X1) | ? [X2,X3,X4,X5,X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.modSem.v',X4))),s('type.conSem.v',X7)))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.modSem.v',X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X5))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.conSem.v',X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6))))))))),
  inference(rectify,[],[f344])).
fof(f344,plain,(
  ! [X2,X0] : (~sP6(X2,X0) | ? [X3,X4,X5,X6,X7,X8] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X5))),s('type.conSem.v',X8)))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.modSem.v',X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X6))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.conSem.v',X8))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7))))))))),
  inference(nnf_transformation,[],[f221])).
fof(f221,plain,(
  ! [X2,X0] : (~sP6(X2,X0) | ? [X3,X4,X5,X6,X7,X8] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X5))),s('type.conSem.v',X8)))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.modSem.v',X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X6))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.conSem.v',X8))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7))))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP6])])).
fof(f697,plain,(
  ( ! [X0,X1] : (~sP9(X0,X1) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK140(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK141(X1,X0)),s('type.modSem.v',sK142(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK143(X1,X0)))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK141(X1,X0)),s('type.conSem.v',sK145(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK144(X1,X0)))))))) )),
  inference(cnf_transformation,[],[f378])).
fof(f661,plain,(
  ( ! [X0,X1] : (~sP5(X0,X1) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK73(X1,X0)))),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK74(X1,X0)),s('type.list.list'('type.modSem.v'),sK75(X1,X0)))))),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',sK76(X1,X0)),s('type.list.list'('type.conSem.v'),sK77(X1,X0)))))))) )),
  inference(cnf_transformation,[],[f349])).
fof(f349,plain,(
  ! [X0,X1] : (~sP5(X0,X1) | (p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK73(X1,X0)))),s('type.modSem.v',sK74(X1,X0)))),s('type.conSem.v',sK76(X1,X0))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK73(X1,X0)))),s('type.list.list'('type.modSem.v'),sK75(X1,X0)))),s('type.list.list'('type.conSem.v'),sK77(X1,X0))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK73(X1,X0)))),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK74(X1,X0)),s('type.list.list'('type.modSem.v'),sK75(X1,X0)))))),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',sK76(X1,X0)),s('type.list.list'('type.conSem.v'),sK77(X1,X0)))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK73,sK74,sK75,sK76,sK77])],[f348])).
fof(f348,plain,(
  ! [X0,X1] : (~sP5(X0,X1) | ? [X2,X3,X4,X5,X6] : (p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.modSem.v',X3))),s('type.conSem.v',X5)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.list.list'('type.modSem.v'),X4))),s('type.list.list'('type.conSem.v'),X6)))) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X3),s('type.list.list'('type.modSem.v'),X4))))),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X5),s('type.list.list'('type.conSem.v'),X6))))))))),
  inference(rectify,[],[f347])).
fof(f347,plain,(
  ! [X1,X0] : (~sP5(X1,X0) | ? [X10,X11,X12,X13,X14] : (p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10))),s('type.modSem.v',X11))),s('type.conSem.v',X13)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10))),s('type.list.list'('type.modSem.v'),X12))),s('type.list.list'('type.conSem.v'),X14)))) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10))),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X11),s('type.list.list'('type.modSem.v'),X12))))),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X13),s('type.list.list'('type.conSem.v'),X14))))))))),
  inference(nnf_transformation,[],[f220])).
fof(f220,plain,(
  ! [X1,X0] : (~sP5(X1,X0) | ? [X10,X11,X12,X13,X14] : (p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10))),s('type.modSem.v',X11))),s('type.conSem.v',X13)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10))),s('type.list.list'('type.modSem.v'),X12))),s('type.list.list'('type.conSem.v'),X14)))) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10))),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X11),s('type.list.list'('type.modSem.v'),X12))))),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X13),s('type.list.list'('type.conSem.v'),X14))))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP5])])).
fof(f702,plain,(
  ( ! [X0,X1] : (~sP8(X0,X1) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK146(X1,X0)))),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK147(X1,X0)),s('type.list.list'('type.modSem.v'),sK148(X1,X0)))))),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',sK149(X1,X0)),s('type.list.list'('type.conSem.v'),sK150(X1,X0)))))))) )),
  inference(cnf_transformation,[],[f381])).
fof(f671,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK105(X2,X1,X0)))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK106(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK106(X2,X1,X0))))))) | sP6(X2,X0) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK111(X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) | sP5(X1,X0) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK110(X2,X1,X0)))),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK107(X2,X1,X0)))),s('type.list.list'('type.modSem.v'),sK108(X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK109(X2,X1,X0))))) | sP7(X2,X1,X0) | sP4(X0,X2) | sP3(X0,X2) | sP2(X0,X1) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK102(X2,X1,X0)))),s('type.list.list'('type.modSem.v'),sK103(X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK104(X2,X1,X0))))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK100(X2,X1,X0)))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK101(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK101(X2,X1,X0)))))))) )),
  inference(cnf_transformation,[],[f360])).
fof(f360,plain,(
  ! [X0,X1,X2] : (~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK100(X2,X1,X0)))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK101(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK101(X2,X1,X0))))))) | (p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK102(X2,X1,X0)))),s('type.list.list'('type.modSem.v'),sK103(X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK104(X2,X1,X0))))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK102(X2,X1,X0)))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),sK103(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),sK104(X2,X1,X0)))))))) | sP2(X0,X1) | sP3(X0,X2) | sP4(X0,X2) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK105(X2,X1,X0)))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK106(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK106(X2,X1,X0))))))) | (p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK107(X2,X1,X0)))),s('type.list.list'('type.modSem.v'),sK108(X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK109(X2,X1,X0))))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK107(X2,X1,X0)))),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),sK108(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),sK109(X2,X1,X0)))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK110(X2,X1,X0)))),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) | sP5(X1,X0) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK111(X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) | sP6(X2,X0) | sP7(X2,X1,X0))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK100,sK101,sK102,sK103,sK104,sK105,sK106,sK107,sK108,sK109,sK110,sK111])],[f359])).
fof(f359,plain,(
  ! [X0,X1,X2] : (? [X13,X14] : ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X14))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X14)))))) | ? [X10,X11,X12] : (p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10))),s('type.list.list'('type.modSem.v'),X11))),s('type.list.list'('type.conSem.v'),X12)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X11))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X12))))))) | sP2(X0,X1) | sP3(X0,X2) | sP4(X0,X2) | ? [X8,X9] : ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X8))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X9))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X9)))))) | ? [X5,X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5))),s('type.list.list'('type.modSem.v'),X6))),s('type.list.list'('type.conSem.v'),X7)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5))),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X6))))),s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X7))))))) | ? [X4] : ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4))),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) | sP5(X1,X0) | ? [X3] : ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) | sP6(X2,X0) | sP7(X2,X1,X0))),
  inference(rectify,[],[f223])).
fof(f223,plain,(
  ! [X0,X1,X2] : (? [X46,X47] : ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X46))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X47))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X47)))))) | ? [X43,X44,X45] : (p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X43))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X43))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X44))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X45))))))) | sP2(X0,X1) | sP3(X0,X2) | sP4(X0,X2) | ? [X19,X20] : ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X19))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X20))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X20)))))) | ? [X16,X17,X18] : (p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X16))),s('type.list.list'('type.modSem.v'),X17))),s('type.list.list'('type.conSem.v'),X18)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X16))),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X17))))),s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X18))))))) | ? [X15] : ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X15))),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) | sP5(X1,X0) | ? [X9] : ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) | sP6(X2,X0) | sP7(X2,X1,X0))),
  inference(definition_folding,[],[f197,f222,f221,f220,f219,f218,f217])).
fof(f217,plain,(
  ! [X0,X1] : (~sP2(X0,X1) | ? [X37,X38,X39,X40,X41,X42] : (s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X40),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X41))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X37),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X38),s('type.semanticPrimitives.tid_or_exn',X39))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X37))),s('type.list.list'('type.modSem.v'),X41))),s('type.list.list'('type.conSem.v'),X42)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X37))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X38),s('type.semanticPrimitives.tid_or_exn',X39))))),s('type.list.list'('type.modSem.v'),X41))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X40),s('type.semanticPrimitives.tid_or_exn',X39))))),s('type.list.list'('type.conSem.v'),X42))))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP2])])).
fof(f218,plain,(
  ! [X0,X2] : (~sP3(X0,X2) | ? [X29,X30,X31,X32,X33,X34,X35,X36] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X29))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X30))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X33)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X34),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X35),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X36),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X29)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X29))),s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X34),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X30))),s('type.list.list'('type.string.char'),X31),s('type.modLang.exp',X32))))),s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X33),s('type.list.list'('type.string.char'),X31),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X36),s('type.modLang.exp',X32))))))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP3])])).
fof(f219,plain,(
  ! [X0,X2] : (~sP4(X0,X2) | ? [X21,X22,X23,X24,X25,X26,X27,X28] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X26)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X25),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X27),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X25),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X23),s('type.list.list'('type.string.char'),X24))))),s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X26),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X23))),s('type.list.list'('type.string.char'),X24))))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP4])])).
fof(f197,plain,(
  ! [X0,X1,X2] : (? [X46,X47] : ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X46))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X47))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X47)))))) | ? [X43,X44,X45] : (p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X43))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X43))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X44))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X45))))))) | ? [X37,X38,X39,X40,X41,X42] : (s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X40),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X41))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X37),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X38),s('type.semanticPrimitives.tid_or_exn',X39))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X37))),s('type.list.list'('type.modSem.v'),X41))),s('type.list.list'('type.conSem.v'),X42)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X37))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X38),s('type.semanticPrimitives.tid_or_exn',X39))))),s('type.list.list'('type.modSem.v'),X41))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X40),s('type.semanticPrimitives.tid_or_exn',X39))))),s('type.list.list'('type.conSem.v'),X42))))))) | ? [X29,X30,X31,X32,X33,X34,X35,X36] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X29))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X30))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X33)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X34),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X35),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X36),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X29)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X29))),s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X34),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X30))),s('type.list.list'('type.string.char'),X31),s('type.modLang.exp',X32))))),s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X33),s('type.list.list'('type.string.char'),X31),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X36),s('type.modLang.exp',X32))))))))) | ? [X21,X22,X23,X24,X25,X26,X27,X28] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X26)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X25),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X27),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X25),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X23),s('type.list.list'('type.string.char'),X24))))),s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X26),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X23))),s('type.list.list'('type.string.char'),X24))))))) | ? [X19,X20] : ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X19))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X20))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X20)))))) | ? [X16,X17,X18] : (p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X16))),s('type.list.list'('type.modSem.v'),X17))),s('type.list.list'('type.conSem.v'),X18)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X16))),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X17))))),s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X18))))))) | ? [X15] : ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X15))),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) | ? [X10,X11,X12,X13,X14] : (p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10))),s('type.modSem.v',X11))),s('type.conSem.v',X13)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10))),s('type.list.list'('type.modSem.v'),X12))),s('type.list.list'('type.conSem.v'),X14)))) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10))),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X11),s('type.list.list'('type.modSem.v'),X12))))),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X13),s('type.list.list'('type.conSem.v'),X14))))))) | ? [X9] : ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) | ? [X3,X4,X5,X6,X7,X8] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X5))),s('type.conSem.v',X8)))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.modSem.v',X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X6))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.conSem.v',X8))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7))))))) | (! [X54,X55,X56] : (~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X54),s('type.modSem.v',X55),s('type.conSem.v',X56)))) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X54))),s('type.modSem.v',X55))),s('type.conSem.v',X56))))) & ! [X51,X52,X53] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X51),s('type.list.list'('type.modSem.v'),X52),s('type.list.list'('type.conSem.v'),X53)))) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X51))),s('type.list.list'('type.modSem.v'),X52))),s('type.list.list'('type.conSem.v'),X53))))) & ! [X48,X49,X50] : (~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X48),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X49),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X50)))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X48))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X49))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X50)))))))),
  inference(flattening,[],[f196])).
fof(f196,plain,(
  ! [X0,X1,X2] : ((? [X46,X47] : ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X46))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X47))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X47)))))) | ? [X43,X44,X45] : (p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X43))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X43))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X44))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X45))))))) | ? [X37,X38,X39,X40,X41,X42] : ((s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X40),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X41))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X37),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X38),s('type.semanticPrimitives.tid_or_exn',X39))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X37))),s('type.list.list'('type.modSem.v'),X41))),s('type.list.list'('type.conSem.v'),X42))))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X37))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X38),s('type.semanticPrimitives.tid_or_exn',X39))))),s('type.list.list'('type.modSem.v'),X41))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X40),s('type.semanticPrimitives.tid_or_exn',X39))))),s('type.list.list'('type.conSem.v'),X42))))))) | ? [X29,X30,X31,X32,X33,X34,X35,X36] : ((p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X29))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X30))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X33)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X34),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X35),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X36),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X29))))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X29))),s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X34),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X30))),s('type.list.list'('type.string.char'),X31),s('type.modLang.exp',X32))))),s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X33),s('type.list.list'('type.string.char'),X31),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X36),s('type.modLang.exp',X32))))))))) | ? [X21,X22,X23,X24,X25,X26,X27,X28] : ((p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X26)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X25),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X27),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X25),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X23),s('type.list.list'('type.string.char'),X24))))),s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X26),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X23))),s('type.list.list'('type.string.char'),X24))))))) | ? [X19,X20] : ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X19))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X20))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X20)))))) | ? [X16,X17,X18] : (p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X16))),s('type.list.list'('type.modSem.v'),X17))),s('type.list.list'('type.conSem.v'),X18)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X16))),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X17))))),s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X18))))))) | ? [X15] : ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X15))),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) | ? [X10,X11,X12,X13,X14] : ((p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10))),s('type.modSem.v',X11))),s('type.conSem.v',X13)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10))),s('type.list.list'('type.modSem.v'),X12))),s('type.list.list'('type.conSem.v'),X14))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10))),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X11),s('type.list.list'('type.modSem.v'),X12))))),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X13),s('type.list.list'('type.conSem.v'),X14))))))) | ? [X9] : ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) | ? [X3,X4,X5,X6,X7,X8] : ((p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X5))),s('type.conSem.v',X8))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.modSem.v',X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X6))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.conSem.v',X8))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))))))) | (! [X54,X55,X56] : (~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X54),s('type.modSem.v',X55),s('type.conSem.v',X56)))) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X54))),s('type.modSem.v',X55))),s('type.conSem.v',X56))))) & ! [X51,X52,X53] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X51),s('type.list.list'('type.modSem.v'),X52),s('type.list.list'('type.conSem.v'),X53)))) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X51))),s('type.list.list'('type.modSem.v'),X52))),s('type.list.list'('type.conSem.v'),X53))))) & ! [X48,X49,X50] : (~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X48),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X49),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X50)))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X48))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X49))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X50)))))))),
  inference(ennf_transformation,[],[f144])).
fof(f144,plain,(
  ! [X0,X1,X2] : ((! [X46,X47] : p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X46))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X47))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X47)))))) & ! [X43,X44,X45] : (p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X43))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45)))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X43))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X44))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X45))))))) & ! [X37,X38,X39,X40,X41,X42] : ((s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X40),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X41))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X37),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X38),s('type.semanticPrimitives.tid_or_exn',X39))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X37))),s('type.list.list'('type.modSem.v'),X41))),s('type.list.list'('type.conSem.v'),X42))))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X37))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X38),s('type.semanticPrimitives.tid_or_exn',X39))))),s('type.list.list'('type.modSem.v'),X41))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X40),s('type.semanticPrimitives.tid_or_exn',X39))))),s('type.list.list'('type.conSem.v'),X42))))))) & ! [X29,X30,X31,X32,X33,X34,X35,X36] : ((p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X29))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X30))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X33)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X34),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X35),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X36),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X29))))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X29))),s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X34),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X30))),s('type.list.list'('type.string.char'),X31),s('type.modLang.exp',X32))))),s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X33),s('type.list.list'('type.string.char'),X31),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X36),s('type.modLang.exp',X32))))))))) & ! [X21,X22,X23,X24,X25,X26,X27,X28] : ((p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X26)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X25),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X27),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X25),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X23),s('type.list.list'('type.string.char'),X24))))),s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X26),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X23))),s('type.list.list'('type.string.char'),X24))))))) & ! [X19,X20] : p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X19))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X20))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X20)))))) & ! [X16,X17,X18] : (p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X16))),s('type.list.list'('type.modSem.v'),X17))),s('type.list.list'('type.conSem.v'),X18)))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X16))),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X17))))),s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X18))))))) & ! [X15] : p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X15))),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) & ! [X10,X11,X12,X13,X14] : ((p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10))),s('type.modSem.v',X11))),s('type.conSem.v',X13)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10))),s('type.list.list'('type.modSem.v'),X12))),s('type.list.list'('type.conSem.v'),X14))))) => p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10))),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X11),s('type.list.list'('type.modSem.v'),X12))))),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X13),s('type.list.list'('type.conSem.v'),X14))))))) & ! [X9] : p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) & ! [X3,X4,X5,X6,X7,X8] : ((p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X5))),s('type.conSem.v',X8))))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.modSem.v',X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X6))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.conSem.v',X8))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))))))) => (! [X54,X55,X56] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X54),s('type.modSem.v',X55),s('type.conSem.v',X56)))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X54))),s('type.modSem.v',X55))),s('type.conSem.v',X56))))) & ! [X51,X52,X53] : (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X51),s('type.list.list'('type.modSem.v'),X52),s('type.list.list'('type.conSem.v'),X53)))) => p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X51))),s('type.list.list'('type.modSem.v'),X52))),s('type.list.list'('type.conSem.v'),X53))))) & ! [X48,X49,X50] : (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X48),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X49),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X50)))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X48))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X49))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X50)))))))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X15,X16,X17] : ((! [X6,X18] : p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X15),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X18))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X18)))))) & ! [X6,X8,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X16),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.modSem.v'),X8))),s('type.list.list'('type.conSem.v'),X9)))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X15),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X8))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X9))))))) & ! [X6,X19,X20,X21,X8,X9] : ((s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X21),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X8))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X19),s('type.semanticPrimitives.tid_or_exn',X20))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X16),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.modSem.v'),X8))),s('type.list.list'('type.conSem.v'),X9))))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X15),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X19),s('type.semanticPrimitives.tid_or_exn',X20))))),s('type.list.list'('type.modSem.v'),X8))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X21),s('type.semanticPrimitives.tid_or_exn',X20))))),s('type.list.list'('type.conSem.v'),X9))))))) & ! [X6,X22,X23,X24,X25,X26,X27,X28] : ((p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X17),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X25)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X26),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X27),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X15),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X26),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.string.char'),X23),s('type.modLang.exp',X24))))),s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X25),s('type.list.list'('type.string.char'),X23),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.modLang.exp',X24))))))))) & ! [X6,X22,X29,X23,X26,X25,X27,X28] : ((p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X17),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X25)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X26),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X27),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X15),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X26),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X29),s('type.list.list'('type.string.char'),X23))))),s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X25),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X29))),s('type.list.list'('type.string.char'),X23))))))) & ! [X6,X30] : p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X15),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X30))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X30)))))) & ! [X6,X8,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X16),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.modSem.v'),X8))),s('type.list.list'('type.conSem.v'),X9)))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X15),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X8))))),s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X9))))))) & ! [X6] : p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X16),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) & ! [X6,X7,X8,X10,X9] : ((p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X15),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X7))),s('type.conSem.v',X10)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X16),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.modSem.v'),X8))),s('type.list.list'('type.conSem.v'),X9))))) => p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X16),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X7),s('type.list.list'('type.modSem.v'),X8))))),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X10),s('type.list.list'('type.conSem.v'),X9))))))) & ! [X6] : p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X17),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) & ! [X6,X23,X7,X22,X31,X10] : ((p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X17),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X15),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X7))),s('type.conSem.v',X10))))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X17),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X23),s('type.modSem.v',X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X23),s('type.conSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31)))))))) => (! [X32,X33,X34] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X32),s('type.modSem.v',X33),s('type.conSem.v',X34)))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X15),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X32))),s('type.modSem.v',X33))),s('type.conSem.v',X34))))) & ! [X12,X13,X14] : (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X12),s('type.list.list'('type.modSem.v'),X13),s('type.list.list'('type.conSem.v'),X14)))) => p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X16),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X12))),s('type.list.list'('type.modSem.v'),X13))),s('type.list.list'('type.conSem.v'),X14))))) & ! [X35,X36,X37] : (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X35),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X36),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X17),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X35))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X36))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)))))))),
  file('thm.mod_to_conProof.v_rel_eqns|split|5','thm.mod_to_conProof.v_rel_ind')).
fof(f672,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK105(X2,X1,X0)))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK106(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK106(X2,X1,X0))))))) | sP6(X2,X0) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK111(X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) | sP5(X1,X0) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK110(X2,X1,X0)))),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK107(X2,X1,X0)))),s('type.list.list'('type.modSem.v'),sK108(X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK109(X2,X1,X0))))) | sP7(X2,X1,X0) | sP4(X0,X2) | sP3(X0,X2) | sP2(X0,X1) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK102(X2,X1,X0)))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),sK103(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),sK104(X2,X1,X0))))))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK100(X2,X1,X0)))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK101(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK101(X2,X1,X0)))))))) )),
  inference(cnf_transformation,[],[f360])).
fof(f673,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK107(X2,X1,X0)))),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),sK108(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),sK109(X2,X1,X0))))))) | sP6(X2,X0) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK111(X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) | sP5(X1,X0) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK110(X2,X1,X0)))),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) | sP7(X2,X1,X0) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK105(X2,X1,X0)))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK106(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK106(X2,X1,X0))))))) | sP4(X0,X2) | sP3(X0,X2) | sP2(X0,X1) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK102(X2,X1,X0)))),s('type.list.list'('type.modSem.v'),sK103(X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK104(X2,X1,X0))))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK100(X2,X1,X0)))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK101(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK101(X2,X1,X0)))))))) )),
  inference(cnf_transformation,[],[f360])).
fof(f674,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK107(X2,X1,X0)))),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),sK108(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),sK109(X2,X1,X0))))))) | sP6(X2,X0) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK111(X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) | sP5(X1,X0) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK110(X2,X1,X0)))),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) | sP7(X2,X1,X0) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK105(X2,X1,X0)))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK106(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK106(X2,X1,X0))))))) | sP4(X0,X2) | sP3(X0,X2) | sP2(X0,X1) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK102(X2,X1,X0)))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),sK103(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),sK104(X2,X1,X0))))))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK100(X2,X1,X0)))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK101(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK101(X2,X1,X0)))))))) )),
  inference(cnf_transformation,[],[f360])).
fof(f656,plain,(
  ( ! [X0,X1] : (~sP6(X0,X1) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK67(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK70(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK71(X1,X0)))))) )),
  inference(cnf_transformation,[],[f346])).
fof(f660,plain,(
  ( ! [X0,X1] : (~sP5(X0,X1) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK73(X1,X0)))),s('type.list.list'('type.modSem.v'),sK75(X1,X0)))),s('type.list.list'('type.conSem.v'),sK77(X1,X0)))))) )),
  inference(cnf_transformation,[],[f349])).
fof(f662,plain,(
  ( ! [X0,X1] : (~sP4(X0,X1) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK78(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK79(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK83(X1,X0)))))) )),
  inference(cnf_transformation,[],[f352])).
fof(f352,plain,(
  ! [X0,X1] : (~sP4(X0,X1) | (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK78(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK79(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK83(X1,X0))))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK82(X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK84(X1,X0)),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK85(X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK78(X1,X0))))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK78(X1,X0)))),s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK82(X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK79(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),sK80(X1,X0)),s('type.list.list'('type.string.char'),sK81(X1,X0)))))),s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK83(X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK85(X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),sK80(X1,X0)))),s('type.list.list'('type.string.char'),sK81(X1,X0)))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK78,sK79,sK80,sK81,sK82,sK83,sK84,sK85])],[f351])).
fof(f351,plain,(
  ! [X0,X1] : (~sP4(X0,X1) | ? [X2,X3,X4,X5,X6,X7,X8,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X6),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X9),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X4),s('type.list.list'('type.string.char'),X5))))),s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X9),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X4))),s('type.list.list'('type.string.char'),X5))))))))),
  inference(rectify,[],[f350])).
fof(f350,plain,(
  ! [X0,X2] : (~sP4(X0,X2) | ? [X21,X22,X23,X24,X25,X26,X27,X28] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X26)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X25),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X27),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X25),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X23),s('type.list.list'('type.string.char'),X24))))),s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X26),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X23))),s('type.list.list'('type.string.char'),X24))))))))),
  inference(nnf_transformation,[],[f219])).
fof(f665,plain,(
  ( ! [X0,X1] : (~sP3(X0,X1) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK86(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK87(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK90(X1,X0)))))) )),
  inference(cnf_transformation,[],[f355])).
fof(f355,plain,(
  ! [X0,X1] : (~sP3(X0,X1) | (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK86(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK87(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK90(X1,X0))))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK91(X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK92(X1,X0)),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK93(X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK86(X1,X0))))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK86(X1,X0)))),s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK91(X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK87(X1,X0)))),s('type.list.list'('type.string.char'),sK88(X1,X0)),s('type.modLang.exp',sK89(X1,X0)))))),s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK90(X1,X0)),s('type.list.list'('type.string.char'),sK88(X1,X0)),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK93(X1,X0)),s('type.modLang.exp',sK89(X1,X0)))))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK86,sK87,sK88,sK89,sK90,sK91,sK92,sK93])],[f354])).
fof(f354,plain,(
  ! [X0,X1] : (~sP3(X0,X1) | ? [X2,X3,X4,X5,X6,X7,X8,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X9),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X3))),s('type.list.list'('type.string.char'),X4),s('type.modLang.exp',X5))))),s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6),s('type.list.list'('type.string.char'),X4),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X9),s('type.modLang.exp',X5))))))))))),
  inference(rectify,[],[f353])).
fof(f353,plain,(
  ! [X0,X2] : (~sP3(X0,X2) | ? [X29,X30,X31,X32,X33,X34,X35,X36] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X29))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X30))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X33)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X34),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X35),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X36),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X29)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X29))),s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X34),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X30))),s('type.list.list'('type.string.char'),X31),s('type.modLang.exp',X32))))),s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X33),s('type.list.list'('type.string.char'),X31),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X36),s('type.modLang.exp',X32))))))))))),
  inference(nnf_transformation,[],[f218])).
fof(f669,plain,(
  ( ! [X0,X1] : (~sP2(X0,X1) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK94(X1,X0)))),s('type.list.list'('type.modSem.v'),sK98(X1,X0)))),s('type.list.list'('type.conSem.v'),sK99(X1,X0)))))) )),
  inference(cnf_transformation,[],[f358])).
fof(f358,plain,(
  ! [X0,X1] : (~sP2(X0,X1) | (s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',sK97(X1,X0)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),sK98(X1,X0)))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK94(X1,X0)),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK95(X1,X0)),s('type.semanticPrimitives.tid_or_exn',sK96(X1,X0)))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK94(X1,X0)))),s('type.list.list'('type.modSem.v'),sK98(X1,X0)))),s('type.list.list'('type.conSem.v'),sK99(X1,X0))))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK94(X1,X0)))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK95(X1,X0)),s('type.semanticPrimitives.tid_or_exn',sK96(X1,X0)))))),s('type.list.list'('type.modSem.v'),sK98(X1,X0)))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',sK97(X1,X0)),s('type.semanticPrimitives.tid_or_exn',sK96(X1,X0)))))),s('type.list.list'('type.conSem.v'),sK99(X1,X0)))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK94,sK95,sK96,sK97,sK98,sK99])],[f357])).
fof(f357,plain,(
  ! [X0,X1] : (~sP2(X0,X1) | ? [X2,X3,X4,X5,X6,X7] : (s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X5),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X6))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.semanticPrimitives.tid_or_exn',X4))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.list.list'('type.modSem.v'),X6))),s('type.list.list'('type.conSem.v'),X7)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.semanticPrimitives.tid_or_exn',X4))))),s('type.list.list'('type.modSem.v'),X6))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X5),s('type.semanticPrimitives.tid_or_exn',X4))))),s('type.list.list'('type.conSem.v'),X7))))))))),
  inference(rectify,[],[f356])).
fof(f356,plain,(
  ! [X0,X1] : (~sP2(X0,X1) | ? [X37,X38,X39,X40,X41,X42] : (s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X40),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X41))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X37),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X38),s('type.semanticPrimitives.tid_or_exn',X39))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X37))),s('type.list.list'('type.modSem.v'),X41))),s('type.list.list'('type.conSem.v'),X42)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X37))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X38),s('type.semanticPrimitives.tid_or_exn',X39))))),s('type.list.list'('type.modSem.v'),X41))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X40),s('type.semanticPrimitives.tid_or_exn',X39))))),s('type.list.list'('type.conSem.v'),X42))))))))),
  inference(nnf_transformation,[],[f217])).
fof(f676,plain,(
  ( ! [X0,X1] : (~sP14(X0,X1) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK112(X1,X0)))),s('type.list.list'('type.modSem.v'),sK113(X1,X0)))),s('type.list.list'('type.conSem.v'),sK114(X1,X0)))))) )),
  inference(cnf_transformation,[],[f363])).
fof(f679,plain,(
  ( ! [X0,X1] : (~sP13(X0,X1) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK115(X1,X0)))),s('type.list.list'('type.modSem.v'),sK116(X1,X0)))),s('type.list.list'('type.conSem.v'),sK117(X1,X0)))))) )),
  inference(cnf_transformation,[],[f366])).
fof(f682,plain,(
  ( ! [X0,X1] : (~sP12(X0,X1) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK118(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK119(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK123(X1,X0)))))) )),
  inference(cnf_transformation,[],[f369])).
fof(f369,plain,(
  ! [X0,X1] : (~sP12(X0,X1) | (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK118(X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK119(X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK123(X1,X0))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK118(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK119(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK123(X1,X0))))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK122(X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK124(X1,X0)),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK125(X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK118(X1,X0))))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK118(X1,X0)))),s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK122(X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK119(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),sK120(X1,X0)),s('type.list.list'('type.string.char'),sK121(X1,X0)))))),s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK123(X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK125(X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),sK120(X1,X0)))),s('type.list.list'('type.string.char'),sK121(X1,X0)))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK118,sK119,sK120,sK121,sK122,sK123,sK124,sK125])],[f368])).
fof(f368,plain,(
  ! [X0,X1] : (~sP12(X0,X1) | ? [X2,X3,X4,X5,X6,X7,X8,X9] : (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X6),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X9),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X4),s('type.list.list'('type.string.char'),X5))))),s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X9),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X4))),s('type.list.list'('type.string.char'),X5))))))))),
  inference(rectify,[],[f367])).
fof(f367,plain,(
  ! [X0,X2] : (~sP12(X0,X2) | ? [X21,X22,X23,X24,X25,X26,X27,X28] : (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X26)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X26)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X25),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X27),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X25),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X23),s('type.list.list'('type.string.char'),X24))))),s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X26),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X23))),s('type.list.list'('type.string.char'),X24))))))))),
  inference(nnf_transformation,[],[f228])).
fof(f686,plain,(
  ( ! [X0,X1] : (~sP11(X0,X1) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK126(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK127(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK130(X1,X0)))))) )),
  inference(cnf_transformation,[],[f372])).
fof(f372,plain,(
  ! [X0,X1] : (~sP11(X0,X1) | (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK126(X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK127(X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK130(X1,X0))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK126(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK127(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK130(X1,X0))))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK131(X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK132(X1,X0)),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK133(X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK126(X1,X0))))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK126(X1,X0)))),s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK131(X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK127(X1,X0)))),s('type.list.list'('type.string.char'),sK128(X1,X0)),s('type.modLang.exp',sK129(X1,X0)))))),s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK130(X1,X0)),s('type.list.list'('type.string.char'),sK128(X1,X0)),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK133(X1,X0)),s('type.modLang.exp',sK129(X1,X0)))))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK126,sK127,sK128,sK129,sK130,sK131,sK132,sK133])],[f371])).
fof(f371,plain,(
  ! [X0,X1] : (~sP11(X0,X1) | ? [X2,X3,X4,X5,X6,X7,X8,X9] : (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X9),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X3))),s('type.list.list'('type.string.char'),X4),s('type.modLang.exp',X5))))),s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6),s('type.list.list'('type.string.char'),X4),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X9),s('type.modLang.exp',X5))))))))))),
  inference(rectify,[],[f370])).
fof(f370,plain,(
  ! [X0,X2] : (~sP11(X0,X2) | ? [X29,X30,X31,X32,X33,X34,X35,X36] : (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X29),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X30),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X33)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X29))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X30))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X33)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X34),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X35),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X36),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X29)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X29))),s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X34),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X30))),s('type.list.list'('type.string.char'),X31),s('type.modLang.exp',X32))))),s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X33),s('type.list.list'('type.string.char'),X31),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X36),s('type.modLang.exp',X32))))))))))),
  inference(nnf_transformation,[],[f227])).
fof(f691,plain,(
  ( ! [X0,X1] : (~sP10(X0,X1) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK134(X1,X0)))),s('type.list.list'('type.modSem.v'),sK138(X1,X0)))),s('type.list.list'('type.conSem.v'),sK139(X1,X0)))))) )),
  inference(cnf_transformation,[],[f375])).
fof(f694,plain,(
  ( ! [X0,X1] : (~sP9(X0,X1) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK140(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK143(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK144(X1,X0)))))) )),
  inference(cnf_transformation,[],[f378])).
fof(f701,plain,(
  ( ! [X0,X1] : (~sP8(X0,X1) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK146(X1,X0)))),s('type.list.list'('type.modSem.v'),sK148(X1,X0)))),s('type.list.list'('type.conSem.v'),sK150(X1,X0)))))) )),
  inference(cnf_transformation,[],[f381])).
fof(f722,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP21(X0,X1,X2,X3,X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK164(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK165(X4,X3,X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f390])).
fof(f723,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP21(X0,X1,X2,X3,X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK164(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK165(X4,X3,X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f390])).
fof(f734,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP20(X0,X1,X2,X3,X4) | s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X4) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),sK168(X4,X3,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK170(X4,X3,X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f394])).
fof(f735,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP20(X0,X1,X2,X3,X4) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X3) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),sK168(X4,X3,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK170(X4,X3,X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f394])).
fof(f740,plain,(
  ( ! [X2,X0,X3,X1] : (~sP19(X0,X1,X2,X3) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),sK171(X3,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK172(X3,X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f397])).
fof(f744,plain,(
  ( ! [X2,X0,X3,X1] : (~sP18(X0,X1,X2,X3) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),sK173(X3,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK174(X3,X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f400])).
fof(f748,plain,(
  ( ! [X2,X0,X3,X1] : (~sP17(X0,X1,X2,X3) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK175(X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK179(X3,X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f403])).
fof(f753,plain,(
  ( ! [X2,X0,X3,X1] : (~sP16(X0,X1,X2,X3) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK182(X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK185(X3,X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f406])).
fof(f759,plain,(
  ( ! [X2,X0,X3,X1] : (~sP15(X0,X1,X2,X3) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),sK192(X3,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK193(X3,X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f409])).
fof(f797,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP30(X0,X1,X2,X3,X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK214(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK215(X4,X3,X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f424])).
fof(f798,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP30(X0,X1,X2,X3,X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK214(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK215(X4,X3,X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f424])).
fof(f809,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP29(X0,X1,X2,X3,X4) | s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X4) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),sK218(X4,X3,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK220(X4,X3,X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f428])).
fof(f810,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP29(X0,X1,X2,X3,X4) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X3) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),sK218(X4,X3,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK220(X4,X3,X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f428])).
fof(f815,plain,(
  ( ! [X2,X0,X3,X1] : (~sP28(X0,X1,X2,X3) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),sK221(X3,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK222(X3,X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f431])).
fof(f819,plain,(
  ( ! [X2,X0,X3,X1] : (~sP27(X0,X1,X2,X3) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),sK223(X3,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK224(X3,X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f434])).
fof(f823,plain,(
  ( ! [X2,X0,X3,X1] : (~sP26(X0,X1,X2,X3) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK225(X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK229(X3,X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f437])).
fof(f828,plain,(
  ( ! [X2,X0,X3,X1] : (~sP25(X0,X1,X2,X3) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK232(X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK235(X3,X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f440])).
fof(f834,plain,(
  ( ! [X2,X0,X3,X1] : (~sP24(X0,X1,X2,X3) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),sK242(X3,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK243(X3,X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f443])).
fof(f863,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP38(X0,X1,X2,X3,X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK261(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK262(X4,X3,X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f456])).
fof(f864,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP38(X0,X1,X2,X3,X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK261(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK262(X4,X3,X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f456])).
fof(f875,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP37(X0,X1,X2,X3,X4) | s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X4) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),sK265(X4,X3,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK267(X4,X3,X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f460])).
fof(f876,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP37(X0,X1,X2,X3,X4) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X3) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),sK265(X4,X3,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK267(X4,X3,X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f460])).
fof(f881,plain,(
  ( ! [X2,X0,X3,X1] : (~sP36(X0,X1,X2,X3) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),sK268(X3,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK269(X3,X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f463])).
fof(f885,plain,(
  ( ! [X2,X0,X3,X1] : (~sP35(X0,X1,X2,X3) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),sK270(X3,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK271(X3,X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f466])).
fof(f889,plain,(
  ( ! [X2,X0,X3,X1] : (~sP34(X0,X1,X2,X3) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK272(X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK276(X3,X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f469])).
fof(f894,plain,(
  ( ! [X2,X0,X3,X1] : (~sP33(X0,X1,X2,X3) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK279(X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK282(X3,X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f472])).
fof(f900,plain,(
  ( ! [X2,X0,X3,X1] : (~sP32(X0,X1,X2,X3) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),sK289(X3,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK290(X3,X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f475])).
fof(f907,plain,(
  ( ! [X2,X0,X10,X1,X11,X9] : (~sP37(sK298(X2,X1,X0),X9,sK297(X2,X1,X0),X11,X10) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),sK298(X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s('type.list.list'('type.modSem.v'),X10))),s('type.list.list'('type.conSem.v'),X11)))) | p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2))))) )),
  inference(cnf_transformation,[],[f478])).
fof(f909,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),sK299(X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2)))) | p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2))))) )),
  inference(cnf_transformation,[],[f478])).
fof(f908,plain,(
  ( ! [X6,X2,X0,X8,X7,X1] : (~sP38(sK297(X2,X1,X0),X6,sK299(X2,X1,X0),X8,X7) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),sK299(X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))) | p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2))))) )),
  inference(cnf_transformation,[],[f478])).
fof(f9620,plain,(
  ( ! [X636,X637] : (s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X636,'type.list.list'('type.conSem.v'))) | s(bool,X637) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X636),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X637)) ) | $spl4),
  inference(subsumption_resolution,[],[f8240,f531])).
fof(f8240,plain,(
  ( ! [X636,X637] : (~p(s(bool,'T_0')) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X636,'type.list.list'('type.conSem.v'))) | s(bool,X637) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X636),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X637)) ) | $spl4),
  inference(superposition,[],[f2336,f1319])).
fof(f711,plain,(
  ( ! [X4,X2,X0,X7,X5,X3,X1] : (s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7))) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5)))) | sP22(X0,X1,X2) | s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X7)))) )),
  inference(cnf_transformation,[],[f386])).
fof(f386,plain,(
  ! [X0,X1,X2] : ((~sP22(X0,X1,X2) | (((s('type.modSem.v',sK158(X2,X1,X0)) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK160(X2,X1,X0)))) & s('type.conSem.v',sK159(X2,X1,X0)) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK160(X2,X1,X0))))) | sP18(X1,sK157(X2,X1,X0),sK159(X2,X1,X0),sK158(X2,X1,X0)) | sP15(X1,sK157(X2,X1,X0),sK159(X2,X1,X0),sK158(X2,X1,X0)) | sP16(sK157(X2,X1,X0),X2,sK159(X2,X1,X0),sK158(X2,X1,X0)) | sP17(sK157(X2,X1,X0),X2,sK159(X2,X1,X0),sK158(X2,X1,X0)) | (s('type.modSem.v',sK158(X2,X1,X0)) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK161(X2,X1,X0)))) & s('type.conSem.v',sK159(X2,X1,X0)) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK161(X2,X1,X0))))) | sP19(X1,sK157(X2,X1,X0),sK159(X2,X1,X0),sK158(X2,X1,X0))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK157(X2,X1,X0)))),s('type.modSem.v',sK158(X2,X1,X0)))),s('type.conSem.v',sK159(X2,X1,X0))))))) & (! [X3,X4,X5] : ((! [X7] : (s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X7))) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7)))) & ~sP18(X1,X3,X5,X4) & ~sP15(X1,X3,X5,X4) & ~sP16(X3,X2,X5,X4) & ~sP17(X3,X2,X5,X4) & ! [X6] : (s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X6))) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6)))) & ~sP19(X1,X3,X5,X4)) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5))))) | sP22(X0,X1,X2)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK157,sK158,sK159,sK160,sK161])],[f385])).
fof(f385,plain,(
  ! [X0,X1,X2] : ((~sP22(X0,X1,X2) | ? [X8,X9,X10] : ((? [X12] : (s('type.modSem.v',X9) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X12))) & s('type.conSem.v',X10) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X12)))) | sP18(X1,X8,X10,X9) | sP15(X1,X8,X10,X9) | sP16(X8,X2,X10,X9) | sP17(X8,X2,X10,X9) | ? [X11] : (s('type.modSem.v',X9) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X11))) & s('type.conSem.v',X10) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X11)))) | sP19(X1,X8,X10,X9)) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X8))),s('type.modSem.v',X9))),s('type.conSem.v',X10)))))) & (! [X3,X4,X5] : ((! [X7] : (s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X7))) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7)))) & ~sP18(X1,X3,X5,X4) & ~sP15(X1,X3,X5,X4) & ~sP16(X3,X2,X5,X4) & ~sP17(X3,X2,X5,X4) & ! [X6] : (s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X6))) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6)))) & ~sP19(X1,X3,X5,X4)) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5))))) | sP22(X0,X1,X2)))),
  inference(rectify,[],[f384])).
fof(f384,plain,(
  ! [X3,X4,X5] : ((~sP22(X3,X4,X5) | ? [X21,X22,X23] : ((? [X48] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X48))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X48)))) | sP18(X4,X21,X23,X22) | sP15(X4,X21,X23,X22) | sP16(X21,X5,X23,X22) | sP17(X21,X5,X23,X22) | ? [X26] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X26))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26)))) | sP19(X4,X21,X23,X22)) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v',X22))),s('type.conSem.v',X23)))))) & (! [X21,X22,X23] : ((! [X48] : (s('type.modSem.v',X22) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X48))) | s('type.conSem.v',X23) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X48)))) & ~sP18(X4,X21,X23,X22) & ~sP15(X4,X21,X23,X22) & ~sP16(X21,X5,X23,X22) & ~sP17(X21,X5,X23,X22) & ! [X26] : (s('type.modSem.v',X22) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X26))) | s('type.conSem.v',X23) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26)))) & ~sP19(X4,X21,X23,X22)) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v',X22))),s('type.conSem.v',X23))))) | sP22(X3,X4,X5)))),
  inference(nnf_transformation,[],[f239])).
fof(f712,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP18(X1,X3,X5,X4) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5)))) | sP22(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f386])).
fof(f713,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP15(X1,X3,X5,X4) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5)))) | sP22(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f386])).
fof(f714,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP16(X3,X2,X5,X4) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5)))) | sP22(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f386])).
fof(f715,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP17(X3,X2,X5,X4) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5)))) | sP22(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f386])).
fof(f716,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6))) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5)))) | sP22(X0,X1,X2) | s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X6)))) )),
  inference(cnf_transformation,[],[f386])).
fof(f717,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP19(X1,X3,X5,X4) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5)))) | sP22(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f386])).
fof(f786,plain,(
  ( ! [X4,X2,X0,X7,X5,X3,X1] : (s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7))) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5)))) | sP31(X0,X1,X2) | s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X7)))) )),
  inference(cnf_transformation,[],[f420])).
fof(f420,plain,(
  ! [X0,X1,X2] : ((~sP31(X0,X1,X2) | (((s('type.modSem.v',sK208(X2,X1,X0)) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK210(X2,X1,X0)))) & s('type.conSem.v',sK209(X2,X1,X0)) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK210(X2,X1,X0))))) | sP27(X1,sK207(X2,X1,X0),sK209(X2,X1,X0),sK208(X2,X1,X0)) | sP24(X1,sK207(X2,X1,X0),sK209(X2,X1,X0),sK208(X2,X1,X0)) | sP25(sK207(X2,X1,X0),X2,sK209(X2,X1,X0),sK208(X2,X1,X0)) | sP26(sK207(X2,X1,X0),X2,sK209(X2,X1,X0),sK208(X2,X1,X0)) | (s('type.modSem.v',sK208(X2,X1,X0)) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK211(X2,X1,X0)))) & s('type.conSem.v',sK209(X2,X1,X0)) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK211(X2,X1,X0))))) | sP28(X1,sK207(X2,X1,X0),sK209(X2,X1,X0),sK208(X2,X1,X0))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK207(X2,X1,X0)))),s('type.modSem.v',sK208(X2,X1,X0)))),s('type.conSem.v',sK209(X2,X1,X0))))))) & (! [X3,X4,X5] : ((! [X7] : (s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X7))) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7)))) & ~sP27(X1,X3,X5,X4) & ~sP24(X1,X3,X5,X4) & ~sP25(X3,X2,X5,X4) & ~sP26(X3,X2,X5,X4) & ! [X6] : (s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X6))) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6)))) & ~sP28(X1,X3,X5,X4)) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5))))) | sP31(X0,X1,X2)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK207,sK208,sK209,sK210,sK211])],[f419])).
fof(f419,plain,(
  ! [X0,X1,X2] : ((~sP31(X0,X1,X2) | ? [X8,X9,X10] : ((? [X12] : (s('type.modSem.v',X9) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X12))) & s('type.conSem.v',X10) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X12)))) | sP27(X1,X8,X10,X9) | sP24(X1,X8,X10,X9) | sP25(X8,X2,X10,X9) | sP26(X8,X2,X10,X9) | ? [X11] : (s('type.modSem.v',X9) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X11))) & s('type.conSem.v',X10) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X11)))) | sP28(X1,X8,X10,X9)) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X8))),s('type.modSem.v',X9))),s('type.conSem.v',X10)))))) & (! [X3,X4,X5] : ((! [X7] : (s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X7))) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7)))) & ~sP27(X1,X3,X5,X4) & ~sP24(X1,X3,X5,X4) & ~sP25(X3,X2,X5,X4) & ~sP26(X3,X2,X5,X4) & ! [X6] : (s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X6))) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6)))) & ~sP28(X1,X3,X5,X4)) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5))))) | sP31(X0,X1,X2)))),
  inference(rectify,[],[f418])).
fof(f418,plain,(
  ! [X3,X4,X5] : ((~sP31(X3,X4,X5) | ? [X21,X22,X23] : ((? [X48] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X48))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X48)))) | sP27(X4,X21,X23,X22) | sP24(X4,X21,X23,X22) | sP25(X21,X5,X23,X22) | sP26(X21,X5,X23,X22) | ? [X26] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X26))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26)))) | sP28(X4,X21,X23,X22)) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v',X22))),s('type.conSem.v',X23)))))) & (! [X21,X22,X23] : ((! [X48] : (s('type.modSem.v',X22) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X48))) | s('type.conSem.v',X23) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X48)))) & ~sP27(X4,X21,X23,X22) & ~sP24(X4,X21,X23,X22) & ~sP25(X21,X5,X23,X22) & ~sP26(X21,X5,X23,X22) & ! [X26] : (s('type.modSem.v',X22) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X26))) | s('type.conSem.v',X23) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26)))) & ~sP28(X4,X21,X23,X22)) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v',X22))),s('type.conSem.v',X23))))) | sP31(X3,X4,X5)))),
  inference(nnf_transformation,[],[f250])).
fof(f787,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP27(X1,X3,X5,X4) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5)))) | sP31(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f420])).
fof(f788,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP24(X1,X3,X5,X4) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5)))) | sP31(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f420])).
fof(f789,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP25(X3,X2,X5,X4) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5)))) | sP31(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f420])).
fof(f790,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP26(X3,X2,X5,X4) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5)))) | sP31(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f420])).
fof(f791,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6))) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5)))) | sP31(X0,X1,X2) | s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X6)))) )),
  inference(cnf_transformation,[],[f420])).
fof(f792,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP28(X1,X3,X5,X4) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5)))) | sP31(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f420])).
fof(f852,plain,(
  ( ! [X4,X2,X0,X7,X5,X3,X1] : (s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7))) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5)))) | sP39(X0,X1,X2) | s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X7)))) )),
  inference(cnf_transformation,[],[f452])).
fof(f452,plain,(
  ! [X0,X1,X2] : ((~sP39(X0,X1,X2) | (((s('type.modSem.v',sK255(X2,X1,X0)) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK257(X2,X1,X0)))) & s('type.conSem.v',sK256(X2,X1,X0)) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK257(X2,X1,X0))))) | sP35(X1,sK254(X2,X1,X0),sK256(X2,X1,X0),sK255(X2,X1,X0)) | sP32(X1,sK254(X2,X1,X0),sK256(X2,X1,X0),sK255(X2,X1,X0)) | sP33(sK254(X2,X1,X0),X2,sK256(X2,X1,X0),sK255(X2,X1,X0)) | sP34(sK254(X2,X1,X0),X2,sK256(X2,X1,X0),sK255(X2,X1,X0)) | (s('type.modSem.v',sK255(X2,X1,X0)) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK258(X2,X1,X0)))) & s('type.conSem.v',sK256(X2,X1,X0)) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK258(X2,X1,X0))))) | sP36(X1,sK254(X2,X1,X0),sK256(X2,X1,X0),sK255(X2,X1,X0))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK254(X2,X1,X0)))),s('type.modSem.v',sK255(X2,X1,X0)))),s('type.conSem.v',sK256(X2,X1,X0))))))) & (! [X3,X4,X5] : ((! [X7] : (s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X7))) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7)))) & ~sP35(X1,X3,X5,X4) & ~sP32(X1,X3,X5,X4) & ~sP33(X3,X2,X5,X4) & ~sP34(X3,X2,X5,X4) & ! [X6] : (s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X6))) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6)))) & ~sP36(X1,X3,X5,X4)) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5))))) | sP39(X0,X1,X2)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK254,sK255,sK256,sK257,sK258])],[f451])).
fof(f451,plain,(
  ! [X0,X1,X2] : ((~sP39(X0,X1,X2) | ? [X8,X9,X10] : ((? [X12] : (s('type.modSem.v',X9) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X12))) & s('type.conSem.v',X10) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X12)))) | sP35(X1,X8,X10,X9) | sP32(X1,X8,X10,X9) | sP33(X8,X2,X10,X9) | sP34(X8,X2,X10,X9) | ? [X11] : (s('type.modSem.v',X9) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X11))) & s('type.conSem.v',X10) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X11)))) | sP36(X1,X8,X10,X9)) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X8))),s('type.modSem.v',X9))),s('type.conSem.v',X10)))))) & (! [X3,X4,X5] : ((! [X7] : (s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X7))) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7)))) & ~sP35(X1,X3,X5,X4) & ~sP32(X1,X3,X5,X4) & ~sP33(X3,X2,X5,X4) & ~sP34(X3,X2,X5,X4) & ! [X6] : (s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X6))) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6)))) & ~sP36(X1,X3,X5,X4)) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5))))) | sP39(X0,X1,X2)))),
  inference(rectify,[],[f450])).
fof(f450,plain,(
  ! [X3,X4,X5] : ((~sP39(X3,X4,X5) | ? [X21,X22,X23] : ((? [X48] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X48))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X48)))) | sP35(X4,X21,X23,X22) | sP32(X4,X21,X23,X22) | sP33(X21,X5,X23,X22) | sP34(X21,X5,X23,X22) | ? [X26] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X26))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26)))) | sP36(X4,X21,X23,X22)) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v',X22))),s('type.conSem.v',X23)))))) & (! [X21,X22,X23] : ((! [X48] : (s('type.modSem.v',X22) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X48))) | s('type.conSem.v',X23) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X48)))) & ~sP35(X4,X21,X23,X22) & ~sP32(X4,X21,X23,X22) & ~sP33(X21,X5,X23,X22) & ~sP34(X21,X5,X23,X22) & ! [X26] : (s('type.modSem.v',X22) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X26))) | s('type.conSem.v',X23) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26)))) & ~sP36(X4,X21,X23,X22)) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v',X22))),s('type.conSem.v',X23))))) | sP39(X3,X4,X5)))),
  inference(nnf_transformation,[],[f259])).
fof(f853,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP35(X1,X3,X5,X4) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5)))) | sP39(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f452])).
fof(f854,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP32(X1,X3,X5,X4) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5)))) | sP39(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f452])).
fof(f855,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP33(X3,X2,X5,X4) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5)))) | sP39(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f452])).
fof(f856,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP34(X3,X2,X5,X4) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5)))) | sP39(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f452])).
fof(f857,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6))) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5)))) | sP39(X0,X1,X2) | s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X6)))) )),
  inference(cnf_transformation,[],[f452])).
fof(f858,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP36(X1,X3,X5,X4) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5)))) | sP39(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f452])).
fof(f6273,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.modSem.v',X2) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X3))) | sP39(X0,X4,X5) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X2))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X3))))))) )),
  inference(equality_resolution,[],[f852])).
fof(f6247,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.modSem.v',X2) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X3))) | sP31(X0,X4,X5) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X2))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X3))))))) )),
  inference(equality_resolution,[],[f786])).
fof(f6240,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.modSem.v',X2) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X3))) | sP22(X0,X4,X5) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X2))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X3))))))) )),
  inference(equality_resolution,[],[f711])).
fof(f670,plain,(
  ( ! [X0,X1] : (~sP2(X0,X1) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK94(X1,X0)))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK95(X1,X0)),s('type.semanticPrimitives.tid_or_exn',sK96(X1,X0)))))),s('type.list.list'('type.modSem.v'),sK98(X1,X0)))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',sK97(X1,X0)),s('type.semanticPrimitives.tid_or_exn',sK96(X1,X0)))))),s('type.list.list'('type.conSem.v'),sK99(X1,X0)))))))) )),
  inference(cnf_transformation,[],[f358])).
fof(f680,plain,(
  ( ! [X0,X1] : (~sP13(X0,X1) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK115(X1,X0)))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),sK116(X1,X0)))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),sK117(X1,X0)))))))) )),
  inference(cnf_transformation,[],[f366])).
fof(f692,plain,(
  ( ! [X0,X1] : (~sP10(X0,X1) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK134(X1,X0)))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK135(X1,X0)),s('type.semanticPrimitives.tid_or_exn',sK136(X1,X0)))))),s('type.list.list'('type.modSem.v'),sK138(X1,X0)))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',sK137(X1,X0)),s('type.semanticPrimitives.tid_or_exn',sK136(X1,X0)))))),s('type.list.list'('type.conSem.v'),sK139(X1,X0)))))))) )),
  inference(cnf_transformation,[],[f375])).
fof(f667,plain,(
  ( ! [X0,X1] : (~sP3(X0,X1) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK86(X1,X0)))),s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK91(X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK87(X1,X0)))),s('type.list.list'('type.string.char'),sK88(X1,X0)),s('type.modLang.exp',sK89(X1,X0)))))),s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK90(X1,X0)),s('type.list.list'('type.string.char'),sK88(X1,X0)),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK93(X1,X0)),s('type.modLang.exp',sK89(X1,X0)))))))))) )),
  inference(cnf_transformation,[],[f355])).
fof(f688,plain,(
  ( ! [X0,X1] : (~sP11(X0,X1) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK126(X1,X0)))),s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK131(X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK127(X1,X0)))),s('type.list.list'('type.string.char'),sK128(X1,X0)),s('type.modLang.exp',sK129(X1,X0)))))),s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK130(X1,X0)),s('type.list.list'('type.string.char'),sK128(X1,X0)),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK133(X1,X0)),s('type.modLang.exp',sK129(X1,X0)))))))))) )),
  inference(cnf_transformation,[],[f372])).
fof(f664,plain,(
  ( ! [X0,X1] : (~sP4(X0,X1) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK78(X1,X0)))),s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK82(X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK79(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),sK80(X1,X0)),s('type.list.list'('type.string.char'),sK81(X1,X0)))))),s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK83(X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK85(X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),sK80(X1,X0)))),s('type.list.list'('type.string.char'),sK81(X1,X0)))))))) )),
  inference(cnf_transformation,[],[f352])).
fof(f684,plain,(
  ( ! [X0,X1] : (~sP12(X0,X1) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK118(X1,X0)))),s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK122(X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK119(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),sK120(X1,X0)),s('type.list.list'('type.string.char'),sK121(X1,X0)))))),s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK123(X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK125(X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),sK120(X1,X0)))),s('type.list.list'('type.string.char'),sK121(X1,X0)))))))) )),
  inference(cnf_transformation,[],[f369])).
fof(f6286,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.modSem.v',X2) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X3))) | sP39(X0,X4,X5) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X2))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X3))))))) )),
  inference(equality_resolution,[],[f857])).
fof(f6256,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.modSem.v',X2) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X3))) | sP31(X0,X4,X5) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X2))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X3))))))) )),
  inference(equality_resolution,[],[f791])).
fof(f6241,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.modSem.v',X2) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X3))) | sP22(X0,X4,X5) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X2))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X3))))))) )),
  inference(equality_resolution,[],[f716])).
fof(f677,plain,(
  ( ! [X0,X1] : (~sP14(X0,X1) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK112(X1,X0)))),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),sK113(X1,X0)))))),s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),sK114(X1,X0)))))))) )),
  inference(cnf_transformation,[],[f363])).
fof(f657,plain,(
  ( ! [X0,X1] : (~sP6(X0,X1) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK67(X1,X0)))),s('type.modSem.v',sK69(X1,X0)))),s('type.conSem.v',sK72(X1,X0)))))) )),
  inference(cnf_transformation,[],[f346])).
fof(f659,plain,(
  ( ! [X0,X1] : (~sP5(X0,X1) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK73(X1,X0)))),s('type.modSem.v',sK74(X1,X0)))),s('type.conSem.v',sK76(X1,X0)))))) )),
  inference(cnf_transformation,[],[f349])).
fof(f696,plain,(
  ( ! [X0,X1] : (~sP9(X0,X1) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK140(X1,X0)))),s('type.modSem.v',sK142(X1,X0)))),s('type.conSem.v',sK145(X1,X0)))))) )),
  inference(cnf_transformation,[],[f378])).
fof(f699,plain,(
  ( ! [X0,X1] : (~sP8(X0,X1) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK146(X1,X0)))),s('type.modSem.v',sK147(X1,X0)))),s('type.conSem.v',sK149(X1,X0)))))) )),
  inference(cnf_transformation,[],[f381])).
fof(f710,plain,(
  ( ! [X2,X0,X1] : (~sP22(X0,X1,X2) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK157(X2,X1,X0)))),s('type.modSem.v',sK158(X2,X1,X0)))),s('type.conSem.v',sK159(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f386])).
fof(f724,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP21(X0,X1,X2,X3,X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',sK163(X4,X3,X2,X1,X0)))),s('type.conSem.v',sK166(X4,X3,X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f390])).
fof(f725,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP21(X0,X1,X2,X3,X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',sK163(X4,X3,X2,X1,X0)))),s('type.conSem.v',sK166(X4,X3,X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f390])).
fof(f732,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP20(X0,X1,X2,X3,X4) | s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X4) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',sK167(X4,X3,X2,X1,X0)))),s('type.conSem.v',sK169(X4,X3,X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f394])).
fof(f733,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP20(X0,X1,X2,X3,X4) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X3) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',sK167(X4,X3,X2,X1,X0)))),s('type.conSem.v',sK169(X4,X3,X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f394])).
fof(f785,plain,(
  ( ! [X2,X0,X1] : (~sP31(X0,X1,X2) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK207(X2,X1,X0)))),s('type.modSem.v',sK208(X2,X1,X0)))),s('type.conSem.v',sK209(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f420])).
fof(f799,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP30(X0,X1,X2,X3,X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',sK213(X4,X3,X2,X1,X0)))),s('type.conSem.v',sK216(X4,X3,X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f424])).
fof(f800,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP30(X0,X1,X2,X3,X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',sK213(X4,X3,X2,X1,X0)))),s('type.conSem.v',sK216(X4,X3,X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f424])).
fof(f807,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP29(X0,X1,X2,X3,X4) | s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X4) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',sK217(X4,X3,X2,X1,X0)))),s('type.conSem.v',sK219(X4,X3,X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f428])).
fof(f808,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP29(X0,X1,X2,X3,X4) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X3) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',sK217(X4,X3,X2,X1,X0)))),s('type.conSem.v',sK219(X4,X3,X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f428])).
fof(f851,plain,(
  ( ! [X2,X0,X1] : (~sP39(X0,X1,X2) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK254(X2,X1,X0)))),s('type.modSem.v',sK255(X2,X1,X0)))),s('type.conSem.v',sK256(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f452])).
fof(f865,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP38(X0,X1,X2,X3,X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',sK260(X4,X3,X2,X1,X0)))),s('type.conSem.v',sK263(X4,X3,X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f456])).
fof(f866,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP38(X0,X1,X2,X3,X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',sK260(X4,X3,X2,X1,X0)))),s('type.conSem.v',sK263(X4,X3,X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f456])).
fof(f873,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP37(X0,X1,X2,X3,X4) | s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X4) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',sK264(X4,X3,X2,X1,X0)))),s('type.conSem.v',sK266(X4,X3,X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f460])).
fof(f874,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP37(X0,X1,X2,X3,X4) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X3) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',sK264(X4,X3,X2,X1,X0)))),s('type.conSem.v',sK266(X4,X3,X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f460])).
fof(f906,plain,(
  ( ! [X2,X0,X1] : (~sP39(sK297(X2,X1,X0),sK298(X2,X1,X0),sK299(X2,X1,X0)) | p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2))))) )),
  inference(cnf_transformation,[],[f478])).
fof(f681,plain,(
  ( ! [X0,X1] : (~sP12(X0,X1) | p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK118(X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK119(X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK123(X1,X0)))))) )),
  inference(cnf_transformation,[],[f369])).
fof(f685,plain,(
  ( ! [X0,X1] : (~sP11(X0,X1) | p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK126(X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK127(X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK130(X1,X0)))))) )),
  inference(cnf_transformation,[],[f372])).
fof(f693,plain,(
  ( ! [X0,X1] : (~sP9(X0,X1) | p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK140(X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK143(X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK144(X1,X0)))))) )),
  inference(cnf_transformation,[],[f378])).
fof(f663,plain,(
  ( ! [X0,X1] : (~sP4(X0,X1) | p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK82(X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK84(X1,X0)),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK85(X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK78(X1,X0)))))) )),
  inference(cnf_transformation,[],[f352])).
fof(f666,plain,(
  ( ! [X0,X1] : (~sP3(X0,X1) | p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK91(X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK92(X1,X0)),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK93(X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK86(X1,X0)))))) )),
  inference(cnf_transformation,[],[f355])).
fof(f683,plain,(
  ( ! [X0,X1] : (~sP12(X0,X1) | p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK122(X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK124(X1,X0)),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK125(X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK118(X1,X0)))))) )),
  inference(cnf_transformation,[],[f369])).
fof(f687,plain,(
  ( ! [X0,X1] : (~sP11(X0,X1) | p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK131(X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK132(X1,X0)),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK133(X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK126(X1,X0)))))) )),
  inference(cnf_transformation,[],[f372])).
fof(f749,plain,(
  ( ! [X2,X0,X3,X1] : (~sP17(X0,X1,X2,X3) | p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK178(X3,X2,X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK180(X3,X2,X1,X0)),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK181(X3,X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))))) )),
  inference(cnf_transformation,[],[f403])).
fof(f754,plain,(
  ( ! [X2,X0,X3,X1] : (~sP16(X0,X1,X2,X3) | p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK186(X3,X2,X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK187(X3,X2,X1,X0)),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK188(X3,X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))))) )),
  inference(cnf_transformation,[],[f406])).
fof(f824,plain,(
  ( ! [X2,X0,X3,X1] : (~sP26(X0,X1,X2,X3) | p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK228(X3,X2,X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK230(X3,X2,X1,X0)),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK231(X3,X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))))) )),
  inference(cnf_transformation,[],[f437])).
fof(f829,plain,(
  ( ! [X2,X0,X3,X1] : (~sP25(X0,X1,X2,X3) | p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK236(X3,X2,X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK237(X3,X2,X1,X0)),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK238(X3,X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))))) )),
  inference(cnf_transformation,[],[f440])).
fof(f890,plain,(
  ( ! [X2,X0,X3,X1] : (~sP34(X0,X1,X2,X3) | p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK275(X3,X2,X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK277(X3,X2,X1,X0)),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK278(X3,X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))))) )),
  inference(cnf_transformation,[],[f469])).
fof(f895,plain,(
  ( ! [X2,X0,X3,X1] : (~sP33(X0,X1,X2,X3) | p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK283(X3,X2,X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK284(X3,X2,X1,X0)),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK285(X3,X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))))) )),
  inference(cnf_transformation,[],[f472])).
fof(f8278,plain,(
  ( ! [X814,X812,X811,X813] : (s(X813,f(s(bool,'T_0'))) != s(X813,g(s(bool,'T_0'))) | s(fun(bool,X813),X811) = s(fun(bool,X813),X812) | s(bool,X814) = s(bool,sK66(X811,X812,X813,bool)) | s(bool,'T_0') = s(bool,X814)) )),
  inference(superposition,[],[f649,f1319])).
fof(f8260,plain,(
  ( ! [X736,X732,X734,X737,X733,X735] : (s(bool,'T_0') != s(bool,X733) | s(X734,X735) != s(X734,X736) | s('type.pair.prod'(bool,X734),'const.pair.,_2'(s(bool,X732),s(X734,X736))) = s('type.pair.prod'(bool,X734),'const.pair.,_2'(s(bool,X733),s(X734,X735))) | s(bool,X732) = s(bool,X737) | s(bool,'T_0') = s(bool,X737)) )),
  inference(superposition,[],[f652,f1319])).
fof(f8256,plain,(
  ( ! [X712,X708,X710,X713,X709,X711] : (s('type.pair.prod'(X709,bool),'const.pair.,_2'(s(X709,X712),s(bool,'T_0'))) != s('type.pair.prod'(X709,bool),'const.pair.,_2'(s(X709,X710),s(bool,X711))) | s(bool,X708) = s(bool,X711) | s(bool,X708) = s(bool,X713) | s(bool,'T_0') = s(bool,X713)) )),
  inference(superposition,[],[f651,f1319])).
fof(f8253,plain,(
  ( ! [X693,X695,X691,X692,X694,X690] : (s('type.pair.prod'(bool,X691),'const.pair.,_2'(s(bool,'T_0'),s(X691,X694))) != s('type.pair.prod'(bool,X691),'const.pair.,_2'(s(bool,X692),s(X691,X693))) | s(bool,X690) = s(bool,X692) | s(bool,X690) = s(bool,X695) | s(bool,'T_0') = s(bool,X695)) )),
  inference(superposition,[],[f650,f1319])).
fof(f8248,plain,(
  ( ! [X666,X668,X664,X667,X665] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X665))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X666),s('type.list.list'(bool),X667))) | s(bool,X664) = s(bool,X666) | s(bool,X664) = s(bool,X668) | s(bool,'T_0') = s(bool,X668)) )),
  inference(superposition,[],[f606,f1319])).
fof(f9603,plain,(
  ( ! [X565,X567,X564,X566] : (s('type.conSem.v',X566) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),sK253(X566,X565,X564)))) | s(bool,X567) = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X564),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X565))),s('type.conSem.v',X566))) | s(bool,'T_0') = s(bool,X567)) )),
  inference(subsumption_resolution,[],[f8223,f531])).
fof(f8223,plain,(
  ( ! [X565,X567,X564,X566] : (~p(s(bool,'T_0')) | s('type.conSem.v',X566) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),sK253(X566,X565,X564)))) | s(bool,X567) = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X564),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X565))),s('type.conSem.v',X566))) | s(bool,'T_0') = s(bool,X567)) )),
  inference(superposition,[],[f845,f1319])).
fof(f9598,plain,(
  ( ! [X273,X275,X272,X274] : (~sP50('const.bool.BOUNDED_1'(s(bool,X274)),X273,X272) | p(s(bool,X273)) | s(bool,X272) = s(bool,X275) | s(bool,'T_0') = s(bool,X275)) )),
  inference(subsumption_resolution,[],[f8114,f531])).
fof(f8114,plain,(
  ( ! [X273,X275,X272,X274] : (~p(s(bool,'T_0')) | p(s(bool,X273)) | ~sP50('const.bool.BOUNDED_1'(s(bool,X274)),X273,X272) | s(bool,X272) = s(bool,X275) | s(bool,'T_0') = s(bool,X275)) )),
  inference(superposition,[],[f2024,f1319])).
fof(f9597,plain,(
  ( ! [X269,X271,X268,X270] : (~sP49(X268,X269,'const.bool.BOUNDED_1'(s(bool,X270))) | p(s(bool,X269)) | s(bool,X268) = s(bool,X271) | s(bool,'T_0') = s(bool,X271)) )),
  inference(subsumption_resolution,[],[f8113,f531])).
fof(f8113,plain,(
  ( ! [X269,X271,X268,X270] : (~p(s(bool,'T_0')) | p(s(bool,X269)) | ~sP49(X268,X269,'const.bool.BOUNDED_1'(s(bool,X270))) | s(bool,X268) = s(bool,X271) | s(bool,'T_0') = s(bool,X271)) )),
  inference(superposition,[],[f1990,f1319])).
fof(f9596,plain,(
  ( ! [X246,X244,X247,X245] : (~sP46(X245,X244,'const.bool.BOUNDED_1'(s(bool,X246))) | p(s(bool,X245)) | s(bool,X244) = s(bool,X247) | s(bool,'T_0') = s(bool,X247)) )),
  inference(subsumption_resolution,[],[f8106,f531])).
fof(f8106,plain,(
  ( ! [X246,X244,X247,X245] : (~p(s(bool,'T_0')) | p(s(bool,X245)) | ~sP46(X245,X244,'const.bool.BOUNDED_1'(s(bool,X246))) | s(bool,X244) = s(bool,X247) | s(bool,'T_0') = s(bool,X247)) )),
  inference(superposition,[],[f1750,f1319])).
fof(f9595,plain,(
  ( ! [X243,X241,X242,X240] : (~sP45(X240,'const.bool.BOUNDED_1'(s(bool,X242)),X241) | p(s(bool,X241)) | s(bool,X240) = s(bool,X243) | s(bool,'T_0') = s(bool,X243)) )),
  inference(subsumption_resolution,[],[f8105,f531])).
fof(f8105,plain,(
  ( ! [X243,X241,X242,X240] : (~p(s(bool,'T_0')) | p(s(bool,X241)) | ~sP45(X240,'const.bool.BOUNDED_1'(s(bool,X242)),X241) | s(bool,X240) = s(bool,X243) | s(bool,'T_0') = s(bool,X243)) )),
  inference(superposition,[],[f1724,f1319])).
fof(f9594,plain,(
  ( ! [X239,X237,X238,X236] : (~sP42(X236,'const.bool.BOUNDED_1'(s(bool,X238)),X237) | p(s(bool,X237)) | s(bool,X236) = s(bool,X239) | s(bool,'T_0') = s(bool,X239)) )),
  inference(subsumption_resolution,[],[f8104,f531])).
fof(f8104,plain,(
  ( ! [X239,X237,X238,X236] : (~p(s(bool,'T_0')) | p(s(bool,X237)) | ~sP42(X236,'const.bool.BOUNDED_1'(s(bool,X238)),X237) | s(bool,X236) = s(bool,X239) | s(bool,'T_0') = s(bool,X239)) )),
  inference(superposition,[],[f1677,f1319])).
fof(f9593,plain,(
  ( ! [X235,X233,X234,X232] : (~sP43(X232,'const.bool.BOUNDED_1'(s(bool,X234)),X233) | p(s(bool,X233)) | s(bool,X232) = s(bool,X235) | s(bool,'T_0') = s(bool,X235)) )),
  inference(subsumption_resolution,[],[f8103,f531])).
fof(f8103,plain,(
  ( ! [X235,X233,X234,X232] : (~p(s(bool,'T_0')) | p(s(bool,X233)) | ~sP43(X232,'const.bool.BOUNDED_1'(s(bool,X234)),X233) | s(bool,X232) = s(bool,X235) | s(bool,'T_0') = s(bool,X235)) )),
  inference(superposition,[],[f1659,f1319])).
fof(f9592,plain,(
  ( ! [X132,X130,X131,X129] : (sP48('const.bool.BOUNDED_1'(s(bool,X130)),X129,X131) | s(bool,X129) = s(bool,X132) | s(bool,'T_0') = s(bool,X132)) )),
  inference(subsumption_resolution,[],[f8072,f531])).
fof(f8072,plain,(
  ( ! [X132,X130,X131,X129] : (~p(s(bool,'T_0')) | sP48('const.bool.BOUNDED_1'(s(bool,X130)),X129,X131) | s(bool,X129) = s(bool,X132) | s(bool,'T_0') = s(bool,X132)) )),
  inference(superposition,[],[f1222,f1319])).
fof(f9591,plain,(
  ( ! [X127,X125,X128,X126] : (sP48('const.bool.BOUNDED_1'(s(bool,X126)),X127,X125) | s(bool,X125) = s(bool,X128) | s(bool,'T_0') = s(bool,X128)) )),
  inference(subsumption_resolution,[],[f8071,f531])).
fof(f8071,plain,(
  ( ! [X127,X125,X128,X126] : (~p(s(bool,'T_0')) | sP48('const.bool.BOUNDED_1'(s(bool,X126)),X127,X125) | s(bool,X125) = s(bool,X128) | s(bool,'T_0') = s(bool,X128)) )),
  inference(superposition,[],[f1210,f1319])).
fof(f9590,plain,(
  ( ! [X123,X121,X124,X122] : (sP40(X121,X122,'const.bool.BOUNDED_1'(s(bool,X123))) | s(bool,X121) = s(bool,X124) | s(bool,'T_0') = s(bool,X124)) )),
  inference(subsumption_resolution,[],[f8070,f531])).
fof(f8070,plain,(
  ( ! [X123,X121,X124,X122] : (~p(s(bool,'T_0')) | sP40(X121,X122,'const.bool.BOUNDED_1'(s(bool,X123))) | s(bool,X121) = s(bool,X124) | s(bool,'T_0') = s(bool,X124)) )),
  inference(superposition,[],[f1187,f1319])).
fof(f9589,plain,(
  ( ! [X118,X120,X119,X117] : (sP40(X117,'const.bool.BOUNDED_1'(s(bool,X118)),X119) | s(bool,X117) = s(bool,X120) | s(bool,'T_0') = s(bool,X120)) )),
  inference(subsumption_resolution,[],[f8069,f531])).
fof(f8069,plain,(
  ( ! [X118,X120,X119,X117] : (~p(s(bool,'T_0')) | sP40(X117,'const.bool.BOUNDED_1'(s(bool,X118)),X119) | s(bool,X117) = s(bool,X120) | s(bool,'T_0') = s(bool,X120)) )),
  inference(superposition,[],[f1182,f1319])).
fof(f9588,plain,(
  ( ! [X99,X97,X100,X98] : (~sP47(X97,X98,X99) | sP48(X97,X98,X99) | s(bool,X97) = s(bool,X100) | s(bool,'T_0') = s(bool,X100)) )),
  inference(subsumption_resolution,[],[f8062,f531])).
fof(f8062,plain,(
  ( ! [X99,X97,X100,X98] : (~p(s(bool,'T_0')) | ~sP47(X97,X98,X99) | sP48(X97,X98,X99) | s(bool,X97) = s(bool,X100) | s(bool,'T_0') = s(bool,X100)) )),
  inference(superposition,[],[f1029,f1319])).
fof(f9587,plain,(
  ( ! [X94,X95,X93,X96] : (~sP49(X93,X94,X95) | sP50(X93,X94,X95) | s(bool,X93) = s(bool,X96) | s(bool,'T_0') = s(bool,X96)) )),
  inference(subsumption_resolution,[],[f8061,f531])).
fof(f8061,plain,(
  ( ! [X94,X95,X93,X96] : (~p(s(bool,'T_0')) | ~sP49(X93,X94,X95) | sP50(X93,X94,X95) | s(bool,X93) = s(bool,X96) | s(bool,'T_0') = s(bool,X96)) )),
  inference(superposition,[],[f1028,f1319])).
fof(f9586,plain,(
  ( ! [X92,X90,X91,X89] : (~p(s(bool,X90)) | p(s(bool,X91)) | ~sP50(X89,X91,X90) | s(bool,X89) = s(bool,X92) | s(bool,'T_0') = s(bool,X92)) )),
  inference(subsumption_resolution,[],[f8060,f531])).
fof(f8060,plain,(
  ( ! [X92,X90,X91,X89] : (~p(s(bool,'T_0')) | ~p(s(bool,X90)) | p(s(bool,X91)) | ~sP50(X89,X91,X90) | s(bool,X89) = s(bool,X92) | s(bool,'T_0') = s(bool,X92)) )),
  inference(superposition,[],[f997,f1319])).
fof(f9585,plain,(
  ( ! [X88,X87,X85,X86] : (~p(s(bool,X86)) | sP50(X85,X86,X87) | s(bool,X85) = s(bool,X88) | s(bool,'T_0') = s(bool,X88)) )),
  inference(subsumption_resolution,[],[f8059,f531])).
fof(f8059,plain,(
  ( ! [X88,X87,X85,X86] : (~p(s(bool,'T_0')) | ~p(s(bool,X86)) | sP50(X85,X86,X87) | s(bool,X85) = s(bool,X88) | s(bool,'T_0') = s(bool,X88)) )),
  inference(superposition,[],[f996,f1319])).
fof(f9584,plain,(
  ( ! [X83,X81,X84,X82] : (sP50(X81,X83,X82) | p(s(bool,X82)) | s(bool,X81) = s(bool,X84) | s(bool,'T_0') = s(bool,X84)) )),
  inference(subsumption_resolution,[],[f8058,f531])).
fof(f8058,plain,(
  ( ! [X83,X81,X84,X82] : (~p(s(bool,'T_0')) | p(s(bool,X82)) | sP50(X81,X83,X82) | s(bool,X81) = s(bool,X84) | s(bool,'T_0') = s(bool,X84)) )),
  inference(superposition,[],[f995,f1319])).
fof(f9583,plain,(
  ( ! [X80,X78,X79,X77] : (~sP49(X79,X78,X77) | ~p(s(bool,X79)) | p(s(bool,X78)) | s(bool,X77) = s(bool,X80) | s(bool,'T_0') = s(bool,X80)) )),
  inference(subsumption_resolution,[],[f8057,f531])).
fof(f8057,plain,(
  ( ! [X80,X78,X79,X77] : (~p(s(bool,'T_0')) | p(s(bool,X78)) | ~p(s(bool,X79)) | ~sP49(X79,X78,X77) | s(bool,X77) = s(bool,X80) | s(bool,'T_0') = s(bool,X80)) )),
  inference(superposition,[],[f990,f1319])).
fof(f9582,plain,(
  ( ! [X76,X74,X75,X73] : (~sP48(X73,X75,X74) | p(s(bool,X75)) | p(s(bool,X74)) | s(bool,X73) = s(bool,X76) | s(bool,'T_0') = s(bool,X76)) )),
  inference(subsumption_resolution,[],[f8056,f531])).
fof(f8056,plain,(
  ( ! [X76,X74,X75,X73] : (~p(s(bool,'T_0')) | p(s(bool,X74)) | p(s(bool,X75)) | ~sP48(X73,X75,X74) | s(bool,X73) = s(bool,X76) | s(bool,'T_0') = s(bool,X76)) )),
  inference(superposition,[],[f980,f1319])).
fof(f9581,plain,(
  ( ! [X70,X72,X71,X69] : (sP48(X69,X70,X71) | ~p(s(bool,X70)) | s(bool,X69) = s(bool,X72) | s(bool,'T_0') = s(bool,X72)) )),
  inference(subsumption_resolution,[],[f8055,f531])).
fof(f8055,plain,(
  ( ! [X70,X72,X71,X69] : (~p(s(bool,'T_0')) | ~p(s(bool,X70)) | sP48(X69,X70,X71) | s(bool,X69) = s(bool,X72) | s(bool,'T_0') = s(bool,X72)) )),
  inference(superposition,[],[f979,f1319])).
fof(f9580,plain,(
  ( ! [X68,X66,X67,X65] : (sP48(X65,X67,X66) | ~p(s(bool,X66)) | s(bool,X65) = s(bool,X68) | s(bool,'T_0') = s(bool,X68)) )),
  inference(subsumption_resolution,[],[f8054,f531])).
fof(f8054,plain,(
  ( ! [X68,X66,X67,X65] : (~p(s(bool,'T_0')) | ~p(s(bool,X66)) | sP48(X65,X67,X66) | s(bool,X65) = s(bool,X68) | s(bool,'T_0') = s(bool,X68)) )),
  inference(superposition,[],[f978,f1319])).
fof(f9579,plain,(
  ( ! [X61,X64,X62,X63] : (~sP47(X61,X62,X63) | p(s(bool,X63)) | p(s(bool,X62)) | s(bool,X61) = s(bool,X64) | s(bool,'T_0') = s(bool,X64)) )),
  inference(subsumption_resolution,[],[f8053,f531])).
fof(f8053,plain,(
  ( ! [X61,X64,X62,X63] : (~p(s(bool,'T_0')) | p(s(bool,X62)) | p(s(bool,X63)) | ~sP47(X61,X62,X63) | s(bool,X61) = s(bool,X64) | s(bool,'T_0') = s(bool,X64)) )),
  inference(superposition,[],[f973,f1319])).
fof(f9578,plain,(
  ( ! [X59,X57,X60,X58] : (~sP46(X59,X58,X57) | p(s(bool,X59)) | ~p(s(bool,X58)) | s(bool,X57) = s(bool,X60) | s(bool,'T_0') = s(bool,X60)) )),
  inference(subsumption_resolution,[],[f8052,f531])).
fof(f8052,plain,(
  ( ! [X59,X57,X60,X58] : (~p(s(bool,'T_0')) | ~p(s(bool,X58)) | p(s(bool,X59)) | ~sP46(X59,X58,X57) | s(bool,X57) = s(bool,X60) | s(bool,'T_0') = s(bool,X60)) )),
  inference(superposition,[],[f965,f1319])).
fof(f9577,plain,(
  ( ! [X54,X56,X55,X53] : (~sP45(X54,X53,X55) | p(s(bool,X55)) | ~p(s(bool,X54)) | s(bool,X53) = s(bool,X56) | s(bool,'T_0') = s(bool,X56)) )),
  inference(subsumption_resolution,[],[f8051,f531])).
fof(f8051,plain,(
  ( ! [X54,X56,X55,X53] : (~p(s(bool,'T_0')) | ~p(s(bool,X54)) | p(s(bool,X55)) | ~sP45(X54,X53,X55) | s(bool,X53) = s(bool,X56) | s(bool,'T_0') = s(bool,X56)) )),
  inference(superposition,[],[f956,f1319])).
fof(f9576,plain,(
  ( ! [X52,X50,X51,X49] : (~sP42(X50,X49,X51) | p(s(bool,X51)) | ~p(s(bool,X50)) | s(bool,X49) = s(bool,X52) | s(bool,'T_0') = s(bool,X52)) )),
  inference(subsumption_resolution,[],[f8050,f531])).
fof(f8050,plain,(
  ( ! [X52,X50,X51,X49] : (~p(s(bool,'T_0')) | ~p(s(bool,X50)) | p(s(bool,X51)) | ~sP42(X50,X49,X51) | s(bool,X49) = s(bool,X52) | s(bool,'T_0') = s(bool,X52)) )),
  inference(superposition,[],[f937,f1319])).
fof(f9575,plain,(
  ( ! [X47,X45,X48,X46] : (~sP43(X46,X45,X47) | p(s(bool,X47)) | ~p(s(bool,X46)) | s(bool,X45) = s(bool,X48) | s(bool,'T_0') = s(bool,X48)) )),
  inference(subsumption_resolution,[],[f8049,f531])).
fof(f8049,plain,(
  ( ! [X47,X45,X48,X46] : (~p(s(bool,'T_0')) | ~p(s(bool,X46)) | p(s(bool,X47)) | ~sP43(X46,X45,X47) | s(bool,X45) = s(bool,X48) | s(bool,'T_0') = s(bool,X48)) )),
  inference(superposition,[],[f933,f1319])).
fof(f9574,plain,(
  ( ! [X43,X41,X44,X42] : (sP40(X42,X43,X41) | ~p(s(bool,X42)) | s(bool,X41) = s(bool,X44) | s(bool,'T_0') = s(bool,X44)) )),
  inference(subsumption_resolution,[],[f8048,f531])).
fof(f8048,plain,(
  ( ! [X43,X41,X44,X42] : (~p(s(bool,'T_0')) | ~p(s(bool,X42)) | sP40(X42,X43,X41) | s(bool,X41) = s(bool,X44) | s(bool,'T_0') = s(bool,X44)) )),
  inference(superposition,[],[f921,f1319])).
fof(f9573,plain,(
  ( ! [X39,X37,X38,X40] : (sP40(X38,X37,X39) | ~p(s(bool,X38)) | s(bool,X37) = s(bool,X40) | s(bool,'T_0') = s(bool,X40)) )),
  inference(subsumption_resolution,[],[f8047,f531])).
fof(f8047,plain,(
  ( ! [X39,X37,X38,X40] : (~p(s(bool,'T_0')) | ~p(s(bool,X38)) | sP40(X38,X37,X39) | s(bool,X37) = s(bool,X40) | s(bool,'T_0') = s(bool,X40)) )),
  inference(superposition,[],[f920,f1319])).
fof(f9572,plain,(
  ( ! [X30,X31,X32] : (p(s(bool,X31)) | sP1(X31,X30) | s(bool,X30) = s(bool,X32) | s(bool,'T_0') = s(bool,X32)) )),
  inference(subsumption_resolution,[],[f8045,f531])).
fof(f8045,plain,(
  ( ! [X30,X31,X32] : (~p(s(bool,'T_0')) | p(s(bool,X31)) | sP1(X31,X30) | s(bool,X30) = s(bool,X32) | s(bool,'T_0') = s(bool,X32)) )),
  inference(superposition,[],[f643,f1319])).
fof(f9571,plain,(
  ( ! [X28,X29,X27] : (p(s(bool,X28)) | sP1(X27,X28) | s(bool,X27) = s(bool,X29) | s(bool,'T_0') = s(bool,X29)) )),
  inference(subsumption_resolution,[],[f8044,f531])).
fof(f8044,plain,(
  ( ! [X28,X29,X27] : (~p(s(bool,'T_0')) | p(s(bool,X28)) | sP1(X27,X28) | s(bool,X27) = s(bool,X29) | s(bool,'T_0') = s(bool,X29)) )),
  inference(superposition,[],[f640,f1319])).
fof(f9570,plain,(
  ( ! [X26,X24,X25] : (sP0(X24,X25) | s(bool,X24) = s(bool,X26) | s(bool,'T_0') = s(bool,X26)) )),
  inference(subsumption_resolution,[],[f8043,f531])).
fof(f8043,plain,(
  ( ! [X26,X24,X25] : (~p(s(bool,'T_0')) | sP0(X24,X25) | s(bool,X24) = s(bool,X26) | s(bool,'T_0') = s(bool,X26)) )),
  inference(superposition,[],[f625,f1319])).
fof(f9569,plain,(
  ( ! [X23,X21,X22] : (sP0(X22,X21) | s(bool,X21) = s(bool,X23) | s(bool,'T_0') = s(bool,X23)) )),
  inference(subsumption_resolution,[],[f8042,f531])).
fof(f8042,plain,(
  ( ! [X23,X21,X22] : (~p(s(bool,'T_0')) | sP0(X22,X21) | s(bool,X21) = s(bool,X23) | s(bool,'T_0') = s(bool,X23)) )),
  inference(superposition,[],[f624,f1319])).
fof(f9568,plain,(
  ( ! [X19,X20,X18] : (~p(s(bool,X19)) | s(bool,X18) = s(bool,X19) | s(bool,X18) = s(bool,X20) | s(bool,'T_0') = s(bool,X20)) )),
  inference(subsumption_resolution,[],[f8041,f531])).
fof(f8041,plain,(
  ( ! [X19,X20,X18] : (~p(s(bool,'T_0')) | ~p(s(bool,X19)) | s(bool,X18) = s(bool,X19) | s(bool,X18) = s(bool,X20) | s(bool,'T_0') = s(bool,X20)) )),
  inference(superposition,[],[f612,f1319])).
fof(f9567,plain,(
  ( ! [X8,X9] : (s(bool,'F_0') != s(bool,X8) | s(bool,X8) = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) )),
  inference(subsumption_resolution,[],[f8037,f531])).
fof(f8037,plain,(
  ( ! [X8,X9] : (~p(s(bool,'T_0')) | s(bool,'F_0') != s(bool,X8) | s(bool,X8) = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f551,f1319])).
fof(f8024,plain,(
  ( ! [X625,X627,X623,X628,X624,X626] : (s(bool,X623) != s(bool,X624) | s(X625,X626) != s(X625,X627) | s('type.pair.prod'(bool,X625),'const.pair.,_2'(s(bool,'T_0'),s(X625,X627))) = s('type.pair.prod'(bool,X625),'const.pair.,_2'(s(bool,X624),s(X625,X626))) | s(bool,X623) = s(bool,X628) | s(bool,'T_0') = s(bool,X628)) )),
  inference(superposition,[],[f652,f1319])).
fof(f7885,plain,(
  ( ! [X182,X180,X183,X181] : (~sP47('const.bool.BOUNDED_1'(s(bool,'T_0')),X181,X182) | sP48('const.bool.BOUNDED_1'(s(bool,X180)),X181,X182) | s(bool,X180) = s(bool,X183) | s(bool,'T_0') = s(bool,X183)) )),
  inference(superposition,[],[f1299,f1319])).
fof(f7884,plain,(
  ( ! [X177,X178,X176,X179] : (~sP49('const.bool.BOUNDED_1'(s(bool,'T_0')),X177,X178) | sP50('const.bool.BOUNDED_1'(s(bool,X176)),X177,X178) | s(bool,X176) = s(bool,X179) | s(bool,'T_0') = s(bool,X179)) )),
  inference(superposition,[],[f1274,f1319])).
fof(f7834,plain,(
  ( ! [X4,X2,X3] : (s(bool,X2) != s(bool,X3) | p(s(bool,X3)) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f547,f1319])).
fof(f7583,plain,(
  ( ! [X819,X821,X818,X820] : (s(X820,f(s(bool,X821))) != s(X820,g(s(bool,X821))) | s(fun(bool,X820),X818) = s(fun(bool,X820),X819) | s(bool,'T_0') = s(bool,X821) | s(bool,'T_0') = s(bool,sK66(X818,X819,X820,bool))) )),
  inference(superposition,[],[f649,f1319])).
fof(f7565,plain,(
  ( ! [X738,X741,X743,X739,X740,X742] : (s(bool,X739) != s(bool,X740) | s(X741,X742) != s(X741,X743) | s('type.pair.prod'(bool,X741),'const.pair.,_2'(s(bool,X738),s(X741,X743))) = s('type.pair.prod'(bool,X741),'const.pair.,_2'(s(bool,X740),s(X741,X742))) | s(bool,'T_0') = s(bool,X739) | s(bool,'T_0') = s(bool,X738)) )),
  inference(superposition,[],[f652,f1319])).
fof(f7561,plain,(
  ( ! [X716,X718,X714,X717,X719,X715] : (s('type.pair.prod'(X716,bool),'const.pair.,_2'(s(X716,X717),s(bool,X718))) != s('type.pair.prod'(X716,bool),'const.pair.,_2'(s(X716,X719),s(bool,X715))) | s(bool,X714) = s(bool,X718) | s(bool,'T_0') = s(bool,X715) | s(bool,'T_0') = s(bool,X714)) )),
  inference(superposition,[],[f651,f1319])).
fof(f7558,plain,(
  ( ! [X697,X699,X700,X696,X698,X701] : (s('type.pair.prod'(bool,X698),'const.pair.,_2'(s(bool,X697),s(X698,X701))) != s('type.pair.prod'(bool,X698),'const.pair.,_2'(s(bool,X699),s(X698,X700))) | s(bool,X696) = s(bool,X699) | s(bool,'T_0') = s(bool,X697) | s(bool,'T_0') = s(bool,X696)) )),
  inference(superposition,[],[f650,f1319])).
fof(f7553,plain,(
  ( ! [X670,X673,X671,X672,X674] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X671),s('type.list.list'(bool),X672))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X673),s('type.list.list'(bool),X674))) | s(bool,X670) = s(bool,X673) | s(bool,'T_0') = s(bool,X671) | s(bool,'T_0') = s(bool,X670)) )),
  inference(superposition,[],[f606,f1319])).
fof(f7384,plain,(
  ( ! [X167,X169,X170,X168] : (~sP47('const.bool.BOUNDED_1'(s(bool,X167)),X169,X170) | sP48('const.bool.BOUNDED_1'(s(bool,X168)),X169,X170) | s(bool,'T_0') = s(bool,X168) | s(bool,'T_0') = s(bool,X167)) )),
  inference(superposition,[],[f1299,f1319])).
fof(f7383,plain,(
  ( ! [X165,X163,X166,X164] : (~sP49('const.bool.BOUNDED_1'(s(bool,X163)),X165,X166) | sP50('const.bool.BOUNDED_1'(s(bool,X164)),X165,X166) | s(bool,'T_0') = s(bool,X164) | s(bool,'T_0') = s(bool,X163)) )),
  inference(superposition,[],[f1274,f1319])).
fof(f7303,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f1319,f1319])).
fof(f7227,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.conSem.v'),X1)),'const.pair.,_2'(s(X0,X2),s('type.pair.prod'('type.list.list'('type.conSem.v'),X1),'const.pair.,_2'(s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X3),s('type.list.list'('type.conSem.v'),sK54))),s(X1,X4))))) != s('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.conSem.v'),X1)),'const.pair.,_2'(s(X0,X5),s('type.pair.prod'('type.list.list'('type.conSem.v'),X1),'const.pair.,_2'(s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X6),s('type.list.list'('type.conSem.v'),'const.list.NIL_0'))),s(X1,X7)))))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f2870,f651])).
fof(f7228,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.pair.prod'('type.pair.prod'('type.list.list'('type.conSem.v'),X0),X1),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.conSem.v'),X0),'const.pair.,_2'(s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X2),s('type.list.list'('type.conSem.v'),sK54))),s(X0,X3))),s(X1,X4))) != s('type.pair.prod'('type.pair.prod'('type.list.list'('type.conSem.v'),X0),X1),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.conSem.v'),X0),'const.pair.,_2'(s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X5),s('type.list.list'('type.conSem.v'),'const.list.NIL_0'))),s(X0,X6))),s(X1,X7)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f2870,f650])).
fof(f7229,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.conSem.v'),X0)),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.conSem.v'),X0),'const.pair.,_2'(s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X1),s('type.list.list'('type.conSem.v'),sK54))),s(X0,X2))),s('type.list.list'('type.pair.prod'('type.list.list'('type.conSem.v'),X0)),X3))) != s('type.list.list'('type.pair.prod'('type.list.list'('type.conSem.v'),X0)),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.conSem.v'),X0),'const.pair.,_2'(s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X4),s('type.list.list'('type.conSem.v'),'const.list.NIL_0'))),s(X0,X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.conSem.v'),X0)),X6)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f2870,f606])).
fof(f7173,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.pair.prod'(X0,'type.pair.prod'(X1,'type.list.list'('type.conSem.v'))),'const.pair.,_2'(s(X0,X2),s('type.pair.prod'(X1,'type.list.list'('type.conSem.v')),'const.pair.,_2'(s(X1,X3),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X4),s('type.list.list'('type.conSem.v'),sK54))))))) != s('type.pair.prod'(X0,'type.pair.prod'(X1,'type.list.list'('type.conSem.v'))),'const.pair.,_2'(s(X0,X5),s('type.pair.prod'(X1,'type.list.list'('type.conSem.v')),'const.pair.,_2'(s(X1,X6),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X7),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))))))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f2869,f651])).
fof(f7174,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.pair.prod'('type.pair.prod'(X0,'type.list.list'('type.conSem.v')),X1),'const.pair.,_2'(s('type.pair.prod'(X0,'type.list.list'('type.conSem.v')),'const.pair.,_2'(s(X0,X2),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X3),s('type.list.list'('type.conSem.v'),sK54))))),s(X1,X4))) != s('type.pair.prod'('type.pair.prod'(X0,'type.list.list'('type.conSem.v')),X1),'const.pair.,_2'(s('type.pair.prod'(X0,'type.list.list'('type.conSem.v')),'const.pair.,_2'(s(X0,X5),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X6),s('type.list.list'('type.conSem.v'),'const.list.NIL_0'))))),s(X1,X7)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f2869,f650])).
fof(f7175,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.list.list'('type.pair.prod'(X0,'type.list.list'('type.conSem.v'))),'const.list.CONS_2'(s('type.pair.prod'(X0,'type.list.list'('type.conSem.v')),'const.pair.,_2'(s(X0,X1),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X2),s('type.list.list'('type.conSem.v'),sK54))))),s('type.list.list'('type.pair.prod'(X0,'type.list.list'('type.conSem.v'))),X3))) != s('type.list.list'('type.pair.prod'(X0,'type.list.list'('type.conSem.v'))),'const.list.CONS_2'(s('type.pair.prod'(X0,'type.list.list'('type.conSem.v')),'const.pair.,_2'(s(X0,X4),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X5),s('type.list.list'('type.conSem.v'),'const.list.NIL_0'))))),s('type.list.list'('type.pair.prod'(X0,'type.list.list'('type.conSem.v'))),X6)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f2869,f606])).
fof(f7026,plain,(
  ( ! [X0,X1] : (~sP44('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f3048,f926])).
fof(f7020,plain,(
  ( ! [X0,X1] : (~sP44('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f3047,f926])).
fof(f7014,plain,(
  ( ! [X0,X1] : (~sP44('F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f3037,f926])).
fof(f6236,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X0),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X1),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X2),s('type.list.list'('type.conSem.v'),sK54))))))) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X3),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X4),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X5),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))))))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f2868,f607])).
fof(f6237,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'(X0,'type.list.list'('type.conSem.v')),'const.pair.,_2'(s(X0,X1),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X2),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X3),s('type.list.list'('type.conSem.v'),sK54))))))) != s('type.pair.prod'(X0,'type.list.list'('type.conSem.v')),'const.pair.,_2'(s(X0,X4),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X5),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X6),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))))))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f2868,f651])).
fof(f6238,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'('type.list.list'('type.conSem.v'),X0),'const.pair.,_2'(s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X1),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X2),s('type.list.list'('type.conSem.v'),sK54))))),s(X0,X3))) != s('type.pair.prod'('type.list.list'('type.conSem.v'),X0),'const.pair.,_2'(s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X4),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X5),s('type.list.list'('type.conSem.v'),'const.list.NIL_0'))))),s(X0,X6)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f2868,f650])).
fof(f6239,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.list.list'('type.list.list'('type.conSem.v')),'const.list.CONS_2'(s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X0),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X1),s('type.list.list'('type.conSem.v'),sK54))))),s('type.list.list'('type.list.list'('type.conSem.v')),X2))) != s('type.list.list'('type.list.list'('type.conSem.v')),'const.list.CONS_2'(s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X3),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X4),s('type.list.list'('type.conSem.v'),'const.list.NIL_0'))))),s('type.list.list'('type.list.list'('type.conSem.v')),X5)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f2868,f606])).
fof(f6119,plain,(
  ( ! [X596,X592,X594,X593,X595,X591] : (s('type.pair.prod'(X593,bool),'const.pair.,_2'(s(X593,X594),s(bool,X595))) != s('type.pair.prod'(X593,bool),'const.pair.,_2'(s(X593,X596),s(bool,X592))) | s(bool,X595) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X591),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X592)) ) | $spl4),
  inference(superposition,[],[f651,f5688])).
fof(f6116,plain,(
  ( ! [X573,X575,X576,X578,X574,X577] : (s('type.pair.prod'(bool,X575),'const.pair.,_2'(s(bool,X574),s(X575,X578))) != s('type.pair.prod'(bool,X575),'const.pair.,_2'(s(bool,X576),s(X575,X577))) | s(bool,X576) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X573),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X574)) ) | $spl4),
  inference(superposition,[],[f650,f5688])).
fof(f6111,plain,(
  ( ! [X549,X551,X547,X548,X550] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X548),s('type.list.list'(bool),X549))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X550),s('type.list.list'(bool),X551))) | s(bool,X550) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X547),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X548)) ) | $spl4),
  inference(superposition,[],[f606,f5688])).
fof(f5916,plain,(
  ( ! [X699,X700,X702,X704,X701,X703] : (s(bool,X701) != s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X700),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))) | s(X702,X703) != s(X702,X704) | s('type.pair.prod'(bool,X702),'const.pair.,_2'(s(bool,X699),s(X702,X704))) = s('type.pair.prod'(bool,X702),'const.pair.,_2'(s(bool,X701),s(X702,X703))) | s(bool,'T_0') = s(bool,X699)) ) | $spl4),
  inference(superposition,[],[f652,f5688])).
fof(f5689,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP38(X0,X1,X2,'const.list.NIL_0','const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4)))) )),
  inference(unit_resulting_resolution,[],[f605,f605,f861])).
fof(f5688,plain,(
  ( ! [X6,X7] : (s(bool,X7) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X7)) ) | $spl4),
  inference(subsumption_resolution,[],[f5683,f1048])).
fof(f5683,plain,(
  ( ! [X6,X7] : (p(s(bool,'F_0')) | s(bool,X7) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X7)) ) | $spl4),
  inference(superposition,[],[f1535,f2947])).
fof(f5670,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP38(X0,X1,X2,'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4)),'const.list.NIL_0')) )),
  inference(unit_resulting_resolution,[],[f605,f605,f860])).
fof(f5631,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP30(X0,X1,X2,'const.list.NIL_0','const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4)))) )),
  inference(unit_resulting_resolution,[],[f605,f605,f795])).
fof(f5321,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP30(X0,X1,X2,'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4)),'const.list.NIL_0')) )),
  inference(unit_resulting_resolution,[],[f605,f605,f794])).
fof(f5257,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP21(X0,X1,X2,'const.list.NIL_0','const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4)))) )),
  inference(unit_resulting_resolution,[],[f605,f605,f720])).
fof(f5248,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP21(X0,X1,X2,'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4)),'const.list.NIL_0')) )),
  inference(unit_resulting_resolution,[],[f605,f605,f719])).
fof(f5007,plain,(
  ( ! [X0] : (~sP49('const.bool.BOUNDED_1'(s(bool,X0)),'F_0','T_0')) )),
  inference(unit_resulting_resolution,[],[f531,f1048,f4986,f989])).
fof(f5003,plain,(
  ( ! [X14,X15,X13] : (~sP50('const.bool.BOUNDED_1'(s(bool,X15)),X14,'const.bool.BOUNDED_1'(s(bool,X13))) | p(s(bool,X14))) )),
  inference(subsumption_resolution,[],[f4997,f531])).
fof(f4997,plain,(
  ( ! [X14,X15,X13] : (~p(s(bool,'T_0')) | p(s(bool,X14)) | ~sP50('const.bool.BOUNDED_1'(s(bool,X15)),X14,'const.bool.BOUNDED_1'(s(bool,X13)))) )),
  inference(superposition,[],[f2024,f538])).
fof(f4986,plain,(
  ( ! [X0] : (~sP50('const.bool.BOUNDED_1'(s(bool,X0)),'F_0','T_0')) )),
  inference(unit_resulting_resolution,[],[f531,f1048,f2024])).
fof(f4922,plain,(
  ( ! [X0,X1] : (~sP50('const.bool.BOUNDED_1'(s(bool,X0)),'F_0','const.bool.BOUNDED_1'(s(bool,X1)))) )),
  inference(unit_resulting_resolution,[],[f4901,f985])).
fof(f4901,plain,(
  ( ! [X0,X1] : (~sP49('const.bool.BOUNDED_1'(s(bool,X0)),'F_0','const.bool.BOUNDED_1'(s(bool,X1)))) )),
  inference(unit_resulting_resolution,[],[f1048,f4845])).
fof(f4849,plain,(
  ( ! [X0] : (~sP50('T_0','F_0','const.bool.BOUNDED_1'(s(bool,X0)))) )),
  inference(unit_resulting_resolution,[],[f4826,f985])).
fof(f4845,plain,(
  ( ! [X14,X15,X13] : (~sP49('const.bool.BOUNDED_1'(s(bool,X13)),X14,'const.bool.BOUNDED_1'(s(bool,X15))) | p(s(bool,X14))) )),
  inference(subsumption_resolution,[],[f4838,f531])).
fof(f4838,plain,(
  ( ! [X14,X15,X13] : (~p(s(bool,'T_0')) | p(s(bool,X14)) | ~sP49('const.bool.BOUNDED_1'(s(bool,X13)),X14,'const.bool.BOUNDED_1'(s(bool,X15)))) )),
  inference(superposition,[],[f1990,f538])).
fof(f4826,plain,(
  ( ! [X0] : (~sP49('T_0','F_0','const.bool.BOUNDED_1'(s(bool,X0)))) )),
  inference(unit_resulting_resolution,[],[f531,f1048,f1990])).
fof(f4785,plain,(
  ( ! [X0] : (~sP48('const.bool.BOUNDED_1'(s(bool,X0)),'F_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f4761,f968])).
fof(f4761,plain,(
  ( ! [X0] : (~sP47('const.bool.BOUNDED_1'(s(bool,X0)),'F_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f1048,f1048,f1894])).
fof(f4733,plain,(
  ( ! [X14,X15,X13] : (~sP46(X14,'const.bool.BOUNDED_1'(s(bool,X13)),'const.bool.BOUNDED_1'(s(bool,X15))) | p(s(bool,X14))) )),
  inference(subsumption_resolution,[],[f4728,f531])).
fof(f4728,plain,(
  ( ! [X14,X15,X13] : (~p(s(bool,'T_0')) | p(s(bool,X14)) | ~sP46(X14,'const.bool.BOUNDED_1'(s(bool,X13)),'const.bool.BOUNDED_1'(s(bool,X15)))) )),
  inference(superposition,[],[f1750,f538])).
fof(f4652,plain,(
  ( ! [X0,X1] : (~sP46('F_0','const.bool.BOUNDED_1'(s(bool,X0)),'const.bool.BOUNDED_1'(s(bool,X1)))) )),
  inference(unit_resulting_resolution,[],[f4631,f949])).
fof(f4631,plain,(
  ( ! [X0,X1] : (~sP45('const.bool.BOUNDED_1'(s(bool,X0)),'const.bool.BOUNDED_1'(s(bool,X1)),'F_0')) )),
  inference(unit_resulting_resolution,[],[f1048,f4574])).
fof(f4578,plain,(
  ( ! [X0] : (~sP46('F_0','T_0','const.bool.BOUNDED_1'(s(bool,X0)))) )),
  inference(unit_resulting_resolution,[],[f4555,f949])).
fof(f4574,plain,(
  ( ! [X14,X15,X13] : (~sP45('const.bool.BOUNDED_1'(s(bool,X13)),'const.bool.BOUNDED_1'(s(bool,X15)),X14) | p(s(bool,X14))) )),
  inference(subsumption_resolution,[],[f4567,f531])).
fof(f4567,plain,(
  ( ! [X14,X15,X13] : (~p(s(bool,'T_0')) | p(s(bool,X14)) | ~sP45('const.bool.BOUNDED_1'(s(bool,X13)),'const.bool.BOUNDED_1'(s(bool,X15)),X14)) )),
  inference(superposition,[],[f1724,f538])).
fof(f4555,plain,(
  ( ! [X0] : (~sP45('T_0','const.bool.BOUNDED_1'(s(bool,X0)),'F_0')) )),
  inference(unit_resulting_resolution,[],[f531,f1048,f1724])).
fof(f4489,plain,(
  ( ! [X0,X1] : (~sP44('F_0','const.bool.BOUNDED_1'(s(bool,X0)),'const.bool.BOUNDED_1'(s(bool,X1)))) )),
  inference(unit_resulting_resolution,[],[f4468,f927])).
fof(f4468,plain,(
  ( ! [X0,X1] : (~sP42('const.bool.BOUNDED_1'(s(bool,X0)),'const.bool.BOUNDED_1'(s(bool,X1)),'F_0')) )),
  inference(unit_resulting_resolution,[],[f1048,f4433])).
fof(f4433,plain,(
  ( ! [X14,X15,X13] : (~sP42('const.bool.BOUNDED_1'(s(bool,X13)),'const.bool.BOUNDED_1'(s(bool,X15)),X14) | p(s(bool,X14))) )),
  inference(subsumption_resolution,[],[f4426,f531])).
fof(f4426,plain,(
  ( ! [X14,X15,X13] : (~p(s(bool,'T_0')) | p(s(bool,X14)) | ~sP42('const.bool.BOUNDED_1'(s(bool,X13)),'const.bool.BOUNDED_1'(s(bool,X15)),X14)) )),
  inference(superposition,[],[f1677,f538])).
fof(f4355,plain,(
  ( ! [X0,X1] : (~sP44('const.bool.BOUNDED_1'(s(bool,X0)),'F_0','const.bool.BOUNDED_1'(s(bool,X1)))) )),
  inference(unit_resulting_resolution,[],[f4334,f928])).
fof(f4334,plain,(
  ( ! [X0,X1] : (~sP43('const.bool.BOUNDED_1'(s(bool,X0)),'const.bool.BOUNDED_1'(s(bool,X1)),'F_0')) )),
  inference(unit_resulting_resolution,[],[f1048,f4280])).
fof(f4284,plain,(
  ( ! [X0] : (~sP44('T_0','F_0','const.bool.BOUNDED_1'(s(bool,X0)))) )),
  inference(unit_resulting_resolution,[],[f4261,f928])).
fof(f4280,plain,(
  ( ! [X14,X15,X13] : (~sP43('const.bool.BOUNDED_1'(s(bool,X13)),'const.bool.BOUNDED_1'(s(bool,X15)),X14) | p(s(bool,X14))) )),
  inference(subsumption_resolution,[],[f4273,f531])).
fof(f4273,plain,(
  ( ! [X14,X15,X13] : (~p(s(bool,'T_0')) | p(s(bool,X14)) | ~sP43('const.bool.BOUNDED_1'(s(bool,X13)),'const.bool.BOUNDED_1'(s(bool,X15)),X14)) )),
  inference(superposition,[],[f1659,f538])).
fof(f4261,plain,(
  ( ! [X0] : (~sP43('T_0','const.bool.BOUNDED_1'(s(bool,X0)),'F_0')) )),
  inference(unit_resulting_resolution,[],[f531,f1048,f1659])).
fof(f4234,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'('type.list.list'('type.conSem.v')),'const.list.CONS_2'(s('type.list.list'('type.conSem.v'),X0),s('type.list.list'('type.list.list'('type.conSem.v')),'const.list.CONS_2'(s('type.list.list'('type.conSem.v'),sK54),s('type.list.list'('type.list.list'('type.conSem.v')),X1))))) != s('type.list.list'('type.list.list'('type.conSem.v')),'const.list.CONS_2'(s('type.list.list'('type.conSem.v'),X2),s('type.list.list'('type.list.list'('type.conSem.v')),'const.list.CONS_2'(s('type.list.list'('type.conSem.v'),'const.list.NIL_0'),s('type.list.list'('type.list.list'('type.conSem.v')),X3)))))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f2527,f607])).
fof(f4235,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.pair.prod'(X0,'type.list.list'('type.list.list'('type.conSem.v'))),'const.pair.,_2'(s(X0,X1),s('type.list.list'('type.list.list'('type.conSem.v')),'const.list.CONS_2'(s('type.list.list'('type.conSem.v'),sK54),s('type.list.list'('type.list.list'('type.conSem.v')),X2))))) != s('type.pair.prod'(X0,'type.list.list'('type.list.list'('type.conSem.v'))),'const.pair.,_2'(s(X0,X3),s('type.list.list'('type.list.list'('type.conSem.v')),'const.list.CONS_2'(s('type.list.list'('type.conSem.v'),'const.list.NIL_0'),s('type.list.list'('type.list.list'('type.conSem.v')),X4)))))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f2527,f651])).
fof(f4236,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.pair.prod'('type.list.list'('type.list.list'('type.conSem.v')),X0),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.conSem.v')),'const.list.CONS_2'(s('type.list.list'('type.conSem.v'),'const.list.NIL_0'),s('type.list.list'('type.list.list'('type.conSem.v')),X1))),s(X0,X2))) != s('type.pair.prod'('type.list.list'('type.list.list'('type.conSem.v')),X0),'const.pair.,_2'(s('type.list.list'('type.list.list'('type.conSem.v')),'const.list.CONS_2'(s('type.list.list'('type.conSem.v'),sK54),s('type.list.list'('type.list.list'('type.conSem.v')),X3))),s(X0,X4)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f2527,f650])).
fof(f4237,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'('type.list.list'('type.list.list'('type.conSem.v'))),'const.list.CONS_2'(s('type.list.list'('type.list.list'('type.conSem.v')),'const.list.CONS_2'(s('type.list.list'('type.conSem.v'),'const.list.NIL_0'),s('type.list.list'('type.list.list'('type.conSem.v')),X0))),s('type.list.list'('type.list.list'('type.list.list'('type.conSem.v'))),X1))) != s('type.list.list'('type.list.list'('type.list.list'('type.conSem.v'))),'const.list.CONS_2'(s('type.list.list'('type.list.list'('type.conSem.v')),'const.list.CONS_2'(s('type.list.list'('type.conSem.v'),sK54),s('type.list.list'('type.list.list'('type.conSem.v')),X2))),s('type.list.list'('type.list.list'('type.list.list'('type.conSem.v'))),X3)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f2527,f606])).
fof(f4202,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.modSem.v'),X0) != s('type.list.list'('type.modSem.v'),X1) | s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X2),s('type.list.list'('type.modSem.v'),X0))) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X2),s('type.list.list'('type.modSem.v'),X1)))) )),
  inference(equality_resolution,[],[f1018])).
fof(f4160,plain,(
  ( ! [X0,X1] : (~sP42('const.bool.BOUNDED_1'(s(bool,X0)),'T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f531,f1060,f3018,f3058,f930])).
fof(f3840,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP37(X0,X1,X2,'const.list.NIL_0','const.list.CONS_2'(s('type.modSem.v',X3),s('type.list.list'('type.modSem.v'),X4)))) )),
  inference(unit_resulting_resolution,[],[f605,f605,f871])).
fof(f3835,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP37(X0,X1,X2,'const.list.CONS_2'(s('type.conSem.v',X3),s('type.list.list'('type.conSem.v'),X4)),'const.list.NIL_0')) )),
  inference(unit_resulting_resolution,[],[f605,f605,f870])).
fof(f3836,plain,(
  ( ! [X2,X0,X1] : (~sP37(X0,X1,X2,sK54,'const.list.NIL_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1626,f605,f870])).
fof(f3776,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP29(X0,X1,X2,'const.list.NIL_0','const.list.CONS_2'(s('type.modSem.v',X3),s('type.list.list'('type.modSem.v'),X4)))) )),
  inference(unit_resulting_resolution,[],[f605,f605,f805])).
fof(f3759,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP29(X0,X1,X2,'const.list.CONS_2'(s('type.conSem.v',X3),s('type.list.list'('type.conSem.v'),X4)),'const.list.NIL_0')) )),
  inference(unit_resulting_resolution,[],[f605,f605,f804])).
fof(f3760,plain,(
  ( ! [X2,X0,X1] : (~sP29(X0,X1,X2,sK54,'const.list.NIL_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1626,f605,f804])).
fof(f3684,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP20(X0,X1,X2,'const.list.NIL_0','const.list.CONS_2'(s('type.modSem.v',X3),s('type.list.list'('type.modSem.v'),X4)))) )),
  inference(unit_resulting_resolution,[],[f605,f605,f730])).
fof(f3679,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP20(X0,X1,X2,'const.list.CONS_2'(s('type.conSem.v',X3),s('type.list.list'('type.conSem.v'),X4)),'const.list.NIL_0')) )),
  inference(unit_resulting_resolution,[],[f605,f605,f729])).
fof(f3680,plain,(
  ( ! [X2,X0,X1] : (~sP20(X0,X1,X2,sK54,'const.list.NIL_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1626,f605,f729])).
fof(f3622,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,X1) != s(X0,X3) | s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2)))) )),
  inference(equality_resolution,[],[f608])).
fof(f3613,plain,(
  ( ! [X0] : (~sP44('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0','F_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f3046,f926])).
fof(f3608,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X1),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X2),s('type.list.list'('type.modSem.v'),X3)))))) )),
  inference(unit_resulting_resolution,[],[f605,f1017])).
fof(f3605,plain,(
  ( ! [X0] : (~sP44('F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f3036,f926])).
fof(f3600,plain,(
  ( ! [X0] : (~sP44('F_0','F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f3026,f926])).
fof(f3589,plain,(
  ( ! [X0] : (sP44('F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'T_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f531,f1060,f1054,f3025,f930])).
fof(f3591,plain,(
  ( ! [X0,X1] : (sP44('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'T_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f531,f1060,f3018,f3025,f930])).
fof(f3568,plain,(
  ( ! [X0] : (sP44('F_0','T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f1059,f1054,f3024,f932])).
fof(f3558,plain,(
  ( ! [X0] : (~sP44('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'T_0','T_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f3019,f927])).
fof(f3537,plain,(
  ( ! [X0] : (sP44('T_0','F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f1058,f1057,f3017,f931])).
fof(f3530,plain,(
  ( ! [X0] : (~sP44('T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'T_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f3012,f928])).
fof(f3453,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(X0,X1) != s(X0,X2) | s('type.pair.prod'(X3,X0),'const.pair.,_2'(s(X3,X4),s(X0,X1))) = s('type.pair.prod'(X3,X0),'const.pair.,_2'(s(X3,X4),s(X0,X2)))) )),
  inference(equality_resolution,[],[f652])).
fof(f2943,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f2937,f547])).
fof(f2948,plain,(
  ( ! [X0,X1] : (s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f2937,f2937,f609])).
fof(f2949,plain,(
  ( ! [X0] : (~sP1('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f2937,f638])).
fof(f2951,plain,(
  ( ! [X0] : (~sP1('F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f2937,f638])).
fof(f2952,plain,(
  ( ! [X0,X1] : (~sP1('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f2937,f2937,f638])).
fof(f2953,plain,(
  ( ! [X0] : (sP1('T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f531,f2937,f640])).
fof(f2954,plain,(
  ( ! [X0] : (sP1('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'T_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f531,f2937,f643])).
fof(f2955,plain,(
  ( ! [X0,X1] : (~sP40(X0,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f2937,f916])).
fof(f2964,plain,(
  ( ! [X0,X1] : (~sP40(X0,'F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f2937,f916])).
fof(f2965,plain,(
  ( ! [X2,X0,X1] : (~sP40(X0,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f2937,f2937,f916])).
fof(f2973,plain,(
  ( ! [X0,X1] : (~sP40('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0',X1)) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f2937,f917])).
fof(f2978,plain,(
  ( ! [X0,X1] : (~sP40('F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X1)) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f2937,f917])).
fof(f2979,plain,(
  ( ! [X2,X0,X1] : (~sP40('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X2)) ) | $spl4),
  inference(unit_resulting_resolution,[],[f2937,f2937,f917])).
fof(f2987,plain,(
  ( ! [X0] : (~sP44('T_0','T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f531,f531,f2937,f929])).
fof(f2994,plain,(
  ( ! [X0] : (sP44('T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1058,f1053,f1056,f2937,f931])).
fof(f3012,plain,(
  ( ! [X0] : (~sP43('T_0','T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f531,f531,f2937,f933])).
fof(f3017,plain,(
  ( ! [X2,X0,X1] : (sP43(X0,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X2)) ) | $spl4),
  inference(unit_resulting_resolution,[],[f2937,f935])).
fof(f3018,plain,(
  ( ! [X2,X0,X1] : (sP43('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X1,X2)) ) | $spl4),
  inference(unit_resulting_resolution,[],[f2937,f936])).
fof(f3019,plain,(
  ( ! [X0] : (~sP42('T_0','T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f531,f531,f2937,f937])).
fof(f3024,plain,(
  ( ! [X2,X0,X1] : (sP42(X0,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X2)) ) | $spl4),
  inference(unit_resulting_resolution,[],[f2937,f939])).
fof(f3025,plain,(
  ( ! [X2,X0,X1] : (sP42('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X1,X2)) ) | $spl4),
  inference(unit_resulting_resolution,[],[f2937,f940])).
fof(f3026,plain,(
  ( ! [X0] : (~sP41('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0','F_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f1048,f2937,f941])).
fof(f3036,plain,(
  ( ! [X0] : (~sP41('F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f1048,f2937,f941])).
fof(f3037,plain,(
  ( ! [X0,X1] : (~sP41('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f2937,f1048,f2937,f941])).
fof(f3046,plain,(
  ( ! [X0] : (~sP41('F_0','F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f1048,f2937,f941])).
fof(f3047,plain,(
  ( ! [X0,X1] : (~sP41('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f2937,f1048,f2937,f941])).
fof(f3048,plain,(
  ( ! [X0,X1] : (~sP41('F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f2937,f2937,f941])).
fof(f3049,plain,(
  ( ! [X2,X0,X1] : (~sP41('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f2937,f2937,f2937,f941])).
fof(f3056,plain,(
  ( ! [X0] : (sP44('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0','T_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1102,f2937,f945])).
fof(f3057,plain,(
  ( ! [X0] : (sP44('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'T_0','F_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1102,f2937,f945])).
fof(f3058,plain,(
  ( ! [X0,X1] : (~sP44('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.bool.BOUNDED_1'(s(bool,X1)),'T_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f538,f2937,f948])).
fof(f3061,plain,(
  ( ! [X0,X1] : (~sP44('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'T_0','const.bool.BOUNDED_1'(s(bool,X1)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f538,f2937,f948])).
fof(f3064,plain,(
  ( ! [X0,X1] : (~sP46('T_0',X0,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f531,f2937,f950])).
fof(f3067,plain,(
  ( ! [X0,X1] : (~sP46('T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X1)) ) | $spl4),
  inference(unit_resulting_resolution,[],[f531,f2937,f951])).
fof(f3070,plain,(
  ( ! [X0] : (~sP45('T_0','T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f531,f531,f2937,f956])).
fof(f3075,plain,(
  ( ! [X2,X0,X1] : (sP45(X0,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X2)) ) | $spl4),
  inference(unit_resulting_resolution,[],[f2937,f958])).
fof(f3076,plain,(
  ( ! [X2,X0,X1] : (sP45('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X1,X2)) ) | $spl4),
  inference(unit_resulting_resolution,[],[f2937,f959])).
fof(f3077,plain,(
  ( ! [X0,X1] : (sP46('F_0',X0,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f2937,f960])).
fof(f3082,plain,(
  ( ! [X2,X0,X1] : (sP46('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X1,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f2937,f2937,f960])).
fof(f3083,plain,(
  ( ! [X0,X1] : (sP46('F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X1)) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f2937,f961])).
fof(f3088,plain,(
  ( ! [X2,X0,X1] : (sP46('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X2)) ) | $spl4),
  inference(unit_resulting_resolution,[],[f2937,f2937,f961])).
fof(f3089,plain,(
  ( ! [X0] : (~sP46('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'T_0','T_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f531,f531,f2937,f965])).
fof(f3090,plain,(
  ( ! [X0,X1] : (~sP48('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X1,'T_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f531,f2937,f966])).
fof(f3091,plain,(
  ( ! [X0,X1] : (~sP48('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'T_0',X1)) ) | $spl4),
  inference(unit_resulting_resolution,[],[f531,f2937,f967])).
fof(f3120,plain,(
  ( ! [X0] : (~sP47('T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f531,f1048,f2937,f973])).
fof(f3127,plain,(
  ( ! [X0] : (~sP47('T_0','F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f531,f2937,f973])).
fof(f3128,plain,(
  ( ! [X0,X1] : (~sP47('T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f2937,f531,f2937,f973])).
fof(f3134,plain,(
  ( ! [X2,X0,X1] : (sP47('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X1,X2)) ) | $spl4),
  inference(unit_resulting_resolution,[],[f2937,f976])).
fof(f3135,plain,(
  ( ! [X0] : (sP48('F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f1048,f2937,f977])).
fof(f3140,plain,(
  ( ! [X0] : (sP48('F_0','F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f1048,f2937,f977])).
fof(f3142,plain,(
  ( ! [X0,X1] : (sP48('F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f2937,f2937,f977])).
fof(f3145,plain,(
  ( ! [X0] : (sP48('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0','F_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f1048,f2937,f977])).
fof(f3146,plain,(
  ( ! [X0,X1] : (sP48('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f2937,f1048,f2937,f977])).
fof(f3147,plain,(
  ( ! [X0,X1] : (sP48('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f2937,f2937,f977])).
fof(f3148,plain,(
  ( ! [X2,X0,X1] : (sP48('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f2937,f2937,f2937,f977])).
fof(f3149,plain,(
  ( ! [X0] : (~sP48('T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f531,f2937,f980])).
fof(f3154,plain,(
  ( ! [X0] : (~sP48('T_0','F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f531,f1048,f2937,f980])).
fof(f3155,plain,(
  ( ! [X0,X1] : (~sP48('T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f531,f2937,f2937,f980])).
fof(f3159,plain,(
  ( ! [X0,X1] : (~sP50('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X1,'F_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f2937,f983])).
fof(f3161,plain,(
  ( ! [X0,X1] : (~sP50('F_0',X0,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f2937,f983])).
fof(f3162,plain,(
  ( ! [X2,X0,X1] : (~sP50('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X1,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f2937,f2937,f983])).
fof(f3171,plain,(
  ( ! [X0,X1] : (~sP50('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'T_0',X1)) ) | $spl4),
  inference(unit_resulting_resolution,[],[f531,f2937,f984])).
fof(f3183,plain,(
  ( ! [X0] : (~sP49('T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'T_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f531,f531,f2937,f990])).
fof(f3187,plain,(
  ( ! [X2,X0,X1] : (sP49(X0,X1,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f2937,f991])).
fof(f3188,plain,(
  ( ! [X2,X0,X1] : (sP49('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X1,X2)) ) | $spl4),
  inference(unit_resulting_resolution,[],[f2937,f993])).
fof(f3189,plain,(
  ( ! [X0] : (sP50('F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'T_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f531,f2937,f994])).
fof(f3193,plain,(
  ( ! [X0] : (sP50('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0','T_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f531,f2937,f994])).
fof(f3194,plain,(
  ( ! [X0,X1] : (sP50('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'T_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f2937,f531,f2937,f994])).
fof(f3195,plain,(
  ( ! [X0,X1] : (sP50('T_0',X0,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f531,f2937,f995])).
fof(f3198,plain,(
  ( ! [X0] : (~sP50('T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'T_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f531,f531,f2937,f997])).
fof(f3200,plain,(
  ( ! [X0,X1] : (sP46('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X1,'F_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1062,f2937,f1030])).
fof(f3202,plain,(
  ( ! [X0,X1] : (sP46('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0',X1)) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1063,f2937,f1030])).
fof(f3204,plain,(
  ( ! [X0] : (~sP0('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f2937,f1049])).
fof(f3210,plain,(
  ( ! [X0] : (~sP0('F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1048,f2937,f1049])).
fof(f3211,plain,(
  ( ! [X0,X1] : (~sP0('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f2937,f2937,f1049])).
fof(f3216,plain,(
  ( ! [X0,X1] : (sP1('const.bool.BOUNDED_1'(s(bool,X0)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f2937,f1129])).
fof(f3217,plain,(
  ( ! [X0,X1] : (sP1('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.bool.BOUNDED_1'(s(bool,X1)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f2937,f1136])).
fof(f3218,plain,(
  ( ! [X2,X0,X1] : (sP50('const.bool.BOUNDED_1'(s(bool,X0)),X1,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f2937,f1242])).
fof(f2940,plain,(
  ( ! [X2,X0,X1] : (~sP23(X0,'const.list.NIL_0','const.list.CONS_2'(s('type.modSem.v',X1),s('type.list.list'('type.modSem.v'),X2)))) )),
  inference(unit_resulting_resolution,[],[f605,f605,f771])).
fof(f2937,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f2936,f779])).
fof(f2936,plain,(
  ( ! [X0] : (~sP23(X0,sK54,'const.list.NIL_0')) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1626,f605,f770])).
fof(f2868,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X0),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X1),s('type.list.list'('type.conSem.v'),'const.list.NIL_0'))))) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X2),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X3),s('type.list.list'('type.conSem.v'),sK54)))))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f2846,f607])).
fof(f2869,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.pair.prod'(X0,'type.list.list'('type.conSem.v')),'const.pair.,_2'(s(X0,X1),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X2),s('type.list.list'('type.conSem.v'),'const.list.NIL_0'))))) != s('type.pair.prod'(X0,'type.list.list'('type.conSem.v')),'const.pair.,_2'(s(X0,X3),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X4),s('type.list.list'('type.conSem.v'),sK54)))))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f2846,f651])).
fof(f2870,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.pair.prod'('type.list.list'('type.conSem.v'),X0),'const.pair.,_2'(s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X1),s('type.list.list'('type.conSem.v'),'const.list.NIL_0'))),s(X0,X2))) != s('type.pair.prod'('type.list.list'('type.conSem.v'),X0),'const.pair.,_2'(s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X3),s('type.list.list'('type.conSem.v'),sK54))),s(X0,X4)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f2846,f650])).
fof(f2871,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'('type.list.list'('type.conSem.v')),'const.list.CONS_2'(s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X0),s('type.list.list'('type.conSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.conSem.v')),X1))) != s('type.list.list'('type.list.list'('type.conSem.v')),'const.list.CONS_2'(s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X2),s('type.list.list'('type.conSem.v'),sK54))),s('type.list.list'('type.list.list'('type.conSem.v')),X3)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f2846,f606])).
fof(f2854,plain,(
  ( ! [X0,X1] : (s('type.list.list'('type.conSem.v'),sK54) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X0),s('type.list.list'('type.conSem.v'),X1))) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),X1)) ) | $spl4),
  inference(superposition,[],[f607,f1043])).
fof(f2853,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X0),s('type.list.list'('type.conSem.v'),sK54))) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X1),s('type.list.list'('type.conSem.v'),X2))) | s('type.list.list'('type.conSem.v'),X2) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)))) ) | $spl4),
  inference(superposition,[],[f607,f1043])).
fof(f2845,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),'const.list.NIL_0'))) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))))) )),
  inference(unit_resulting_resolution,[],[f605,f607])).
fof(f2846,plain,(
  ( ! [X0,X1] : (s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X0),s('type.list.list'('type.conSem.v'),sK54))) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X1),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1626,f607])).
fof(f2657,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'(X0,'type.pair.prod'(X1,'type.list.list'('type.conSem.v'))),'const.pair.,_2'(s(X0,X2),s('type.pair.prod'(X1,'type.list.list'('type.conSem.v')),'const.pair.,_2'(s(X1,X3),s('type.list.list'('type.conSem.v'),'const.list.NIL_0'))))) != s('type.pair.prod'(X0,'type.pair.prod'(X1,'type.list.list'('type.conSem.v'))),'const.pair.,_2'(s(X0,X4),s('type.pair.prod'(X1,'type.list.list'('type.conSem.v')),'const.pair.,_2'(s(X1,X5),s('type.list.list'('type.conSem.v'),sK54)))))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f2609,f651])).
fof(f2658,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'('type.pair.prod'(X0,'type.list.list'('type.conSem.v')),X1),'const.pair.,_2'(s('type.pair.prod'(X0,'type.list.list'('type.conSem.v')),'const.pair.,_2'(s(X0,X2),s('type.list.list'('type.conSem.v'),'const.list.NIL_0'))),s(X1,X3))) != s('type.pair.prod'('type.pair.prod'(X0,'type.list.list'('type.conSem.v')),X1),'const.pair.,_2'(s('type.pair.prod'(X0,'type.list.list'('type.conSem.v')),'const.pair.,_2'(s(X0,X4),s('type.list.list'('type.conSem.v'),sK54))),s(X1,X5)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f2609,f650])).
fof(f2659,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'('type.pair.prod'(X0,'type.list.list'('type.conSem.v'))),'const.list.CONS_2'(s('type.pair.prod'(X0,'type.list.list'('type.conSem.v')),'const.pair.,_2'(s(X0,X1),s('type.list.list'('type.conSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.pair.prod'(X0,'type.list.list'('type.conSem.v'))),X2))) != s('type.list.list'('type.pair.prod'(X0,'type.list.list'('type.conSem.v'))),'const.list.CONS_2'(s('type.pair.prod'(X0,'type.list.list'('type.conSem.v')),'const.pair.,_2'(s(X0,X3),s('type.list.list'('type.conSem.v'),sK54))),s('type.list.list'('type.pair.prod'(X0,'type.list.list'('type.conSem.v'))),X4)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f2609,f606])).
fof(f2640,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.conSem.v'),X1)),'const.pair.,_2'(s(X0,X2),s('type.pair.prod'('type.list.list'('type.conSem.v'),X1),'const.pair.,_2'(s('type.list.list'('type.conSem.v'),sK54),s(X1,X3))))) != s('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.conSem.v'),X1)),'const.pair.,_2'(s(X0,X4),s('type.pair.prod'('type.list.list'('type.conSem.v'),X1),'const.pair.,_2'(s('type.list.list'('type.conSem.v'),'const.list.NIL_0'),s(X1,X5)))))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f2566,f651])).
fof(f2641,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'('type.pair.prod'('type.list.list'('type.conSem.v'),X0),X1),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.conSem.v'),X0),'const.pair.,_2'(s('type.list.list'('type.conSem.v'),'const.list.NIL_0'),s(X0,X2))),s(X1,X3))) != s('type.pair.prod'('type.pair.prod'('type.list.list'('type.conSem.v'),X0),X1),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.conSem.v'),X0),'const.pair.,_2'(s('type.list.list'('type.conSem.v'),sK54),s(X0,X4))),s(X1,X5)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f2566,f650])).
fof(f2642,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.conSem.v'),X0)),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.conSem.v'),X0),'const.pair.,_2'(s('type.list.list'('type.conSem.v'),'const.list.NIL_0'),s(X0,X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.conSem.v'),X0)),X2))) != s('type.list.list'('type.pair.prod'('type.list.list'('type.conSem.v'),X0)),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.conSem.v'),X0),'const.pair.,_2'(s('type.list.list'('type.conSem.v'),sK54),s(X0,X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.conSem.v'),X0)),X4)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f2566,f606])).
fof(f2621,plain,(
  ( ! [X26,X24,X23,X25,X22] : (s('type.pair.prod'(X23,bool),'const.pair.,_2'(s(X23,X24),s(bool,'T_0'))) != s('type.pair.prod'(X23,bool),'const.pair.,_2'(s(X23,X25),s(bool,X26))) | s(bool,X26) = s(bool,'const.bool.BOUNDED_1'(s(bool,X22)))) )),
  inference(superposition,[],[f651,f538])).
fof(f2608,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'(X0,'type.list.list'(X1)),'const.pair.,_2'(s(X0,X2),s('type.list.list'(X1),'const.list.NIL_0'))) != s('type.pair.prod'(X0,'type.list.list'(X1)),'const.pair.,_2'(s(X0,X3),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X4),s('type.list.list'(X1),X5)))))) )),
  inference(unit_resulting_resolution,[],[f605,f651])).
fof(f2609,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'(X0,'type.list.list'('type.conSem.v')),'const.pair.,_2'(s(X0,X1),s('type.list.list'('type.conSem.v'),sK54))) != s('type.pair.prod'(X0,'type.list.list'('type.conSem.v')),'const.pair.,_2'(s(X0,X2),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1626,f651])).
fof(f2572,plain,(
  ( ! [X26,X24,X23,X25,X22] : (s('type.pair.prod'(bool,X23),'const.pair.,_2'(s(bool,'T_0'),s(X23,X24))) != s('type.pair.prod'(bool,X23),'const.pair.,_2'(s(bool,X25),s(X23,X26))) | s(bool,X25) = s(bool,'const.bool.BOUNDED_1'(s(bool,X22)))) )),
  inference(superposition,[],[f650,f538])).
fof(f2565,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'('type.list.list'(X0),X1),'const.pair.,_2'(s('type.list.list'(X0),'const.list.NIL_0'),s(X1,X2))) != s('type.pair.prod'('type.list.list'(X0),X1),'const.pair.,_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))),s(X1,X5)))) )),
  inference(unit_resulting_resolution,[],[f605,f650])).
fof(f2566,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'('type.list.list'('type.conSem.v'),X0),'const.pair.,_2'(s('type.list.list'('type.conSem.v'),'const.list.NIL_0'),s(X0,X1))) != s('type.pair.prod'('type.list.list'('type.conSem.v'),X0),'const.pair.,_2'(s('type.list.list'('type.conSem.v'),sK54),s(X0,X2)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1626,f650])).
fof(f2535,plain,(
  ( ! [X0,X1] : (s('type.list.list'('type.conSem.v'),sK54) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X0),s('type.list.list'('type.conSem.v'),X1))) | s('type.conSem.v',sK55) = s('type.conSem.v',X0)) ) | $spl4),
  inference(superposition,[],[f606,f1043])).
fof(f2533,plain,(
  ( ! [X19,X17,X20,X18] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X18))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X19),s('type.list.list'(bool),X20))) | s(bool,X19) = s(bool,'const.bool.BOUNDED_1'(s(bool,X17)))) )),
  inference(superposition,[],[f606,f538])).
fof(f2526,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'('type.list.list'(X0)),'const.list.CONS_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'('type.list.list'(X0)),X1))) != s('type.list.list'('type.list.list'(X0)),'const.list.CONS_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X3))),s('type.list.list'('type.list.list'(X0)),X4)))) )),
  inference(unit_resulting_resolution,[],[f605,f606])).
fof(f2527,plain,(
  ( ! [X0,X1] : (s('type.list.list'('type.list.list'('type.conSem.v')),'const.list.CONS_2'(s('type.list.list'('type.conSem.v'),'const.list.NIL_0'),s('type.list.list'('type.list.list'('type.conSem.v')),X0))) != s('type.list.list'('type.list.list'('type.conSem.v')),'const.list.CONS_2'(s('type.list.list'('type.conSem.v'),sK54),s('type.list.list'('type.list.list'('type.conSem.v')),X1)))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f1626,f606])).
fof(f2359,plain,(
  ( ! [X0,X1] : (s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))) != s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X0),s('type.list.list'('type.modSem.v'),X1)))))) )),
  inference(unit_resulting_resolution,[],[f605,f621])).
fof(f2295,plain,(
  ( ! [X0] : (~sP42('T_0','const.bool.BOUNDED_1'(s(bool,X0)),'F_0')) )),
  inference(unit_resulting_resolution,[],[f1059,f1609,f1052,f1048,f932])).
fof(f2268,plain,(
  sP44('T_0','F_0','F_0')),
  inference(unit_resulting_resolution,[],[f1058,f1053,f1056,f1048,f931])).
fof(f2221,plain,(
  ( ! [X0] : (~sP42('const.bool.BOUNDED_1'(s(bool,X0)),'T_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f1060,f1607,f1054,f531,f930])).
fof(f2225,plain,(
  sP44('T_0','T_0','T_0')),
  inference(unit_resulting_resolution,[],[f1060,f1052,f1055,f531,f930])).
fof(f2024,plain,(
  ( ! [X10,X8,X9] : (~p(s(bool,X9)) | p(s(bool,X10)) | ~sP50('const.bool.BOUNDED_1'(s(bool,X8)),X10,X9)) )),
  inference(subsumption_resolution,[],[f2020,f531])).
fof(f2020,plain,(
  ( ! [X10,X8,X9] : (~p(s(bool,'T_0')) | ~p(s(bool,X9)) | p(s(bool,X10)) | ~sP50('const.bool.BOUNDED_1'(s(bool,X8)),X10,X9)) )),
  inference(superposition,[],[f997,f538])).
fof(f1994,plain,(
  ~sP50('T_0','F_0','T_0')),
  inference(unit_resulting_resolution,[],[f1982,f985])).
fof(f1990,plain,(
  ( ! [X10,X8,X9] : (~p(s(bool,X10)) | p(s(bool,X9)) | ~sP49(X10,X9,'const.bool.BOUNDED_1'(s(bool,X8)))) )),
  inference(subsumption_resolution,[],[f1986,f531])).
fof(f1986,plain,(
  ( ! [X10,X8,X9] : (~p(s(bool,'T_0')) | p(s(bool,X9)) | ~p(s(bool,X10)) | ~sP49(X10,X9,'const.bool.BOUNDED_1'(s(bool,X8)))) )),
  inference(superposition,[],[f990,f538])).
fof(f1982,plain,(
  ~sP49('T_0','F_0','T_0')),
  inference(unit_resulting_resolution,[],[f531,f1048,f531,f990])).
fof(f1970,plain,(
  sP50('F_0','F_0','T_0')),
  inference(unit_resulting_resolution,[],[f1069,f531,f1048,f989])).
fof(f1929,plain,(
  ( ! [X10,X8,X9] : (~sP48('const.bool.BOUNDED_1'(s(bool,X8)),X10,X9) | p(s(bool,X10)) | p(s(bool,X9))) )),
  inference(subsumption_resolution,[],[f1923,f531])).
fof(f1923,plain,(
  ( ! [X10,X8,X9] : (~p(s(bool,'T_0')) | p(s(bool,X9)) | p(s(bool,X10)) | ~sP48('const.bool.BOUNDED_1'(s(bool,X8)),X10,X9)) )),
  inference(superposition,[],[f980,f538])).
fof(f1898,plain,(
  ~sP48('T_0','F_0','F_0')),
  inference(unit_resulting_resolution,[],[f1884,f968])).
fof(f1894,plain,(
  ( ! [X10,X8,X9] : (~sP47('const.bool.BOUNDED_1'(s(bool,X8)),X9,X10) | p(s(bool,X10)) | p(s(bool,X9))) )),
  inference(subsumption_resolution,[],[f1888,f531])).
fof(f1888,plain,(
  ( ! [X10,X8,X9] : (~p(s(bool,'T_0')) | p(s(bool,X9)) | p(s(bool,X10)) | ~sP47('const.bool.BOUNDED_1'(s(bool,X8)),X9,X10)) )),
  inference(superposition,[],[f973,f538])).
fof(f1884,plain,(
  ~sP47('T_0','F_0','F_0')),
  inference(unit_resulting_resolution,[],[f1048,f1048,f531,f973])).
fof(f1872,plain,(
  sP48('F_0','F_0','F_0')),
  inference(unit_resulting_resolution,[],[f1066,f1048,f1048,f972])).
fof(f1750,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X1)) | p(s(bool,X2)) | ~sP46(X2,X1,'const.bool.BOUNDED_1'(s(bool,X0)))) )),
  inference(subsumption_resolution,[],[f1746,f531])).
fof(f1746,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP46(X2,X1,'const.bool.BOUNDED_1'(s(bool,X0)))) )),
  inference(superposition,[],[f965,f538])).
fof(f1728,plain,(
  ~sP46('F_0','T_0','T_0')),
  inference(unit_resulting_resolution,[],[f1718,f949])).
fof(f1724,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X1)) | p(s(bool,X2)) | ~sP45(X1,'const.bool.BOUNDED_1'(s(bool,X0)),X2)) )),
  inference(subsumption_resolution,[],[f1719,f531])).
fof(f1719,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP45(X1,'const.bool.BOUNDED_1'(s(bool,X0)),X2)) )),
  inference(superposition,[],[f956,f538])).
fof(f1718,plain,(
  ~sP45('T_0','T_0','F_0')),
  inference(unit_resulting_resolution,[],[f1048,f531,f531,f956])).
fof(f1706,plain,(
  sP46('T_0','T_0','T_0')),
  inference(unit_resulting_resolution,[],[f1061,f531,f531,f952])).
fof(f1702,plain,(
  ~sP44('F_0','F_0','F_0')),
  inference(unit_resulting_resolution,[],[f1689,f926])).
fof(f1689,plain,(
  ~sP41('F_0','F_0','F_0')),
  inference(unit_resulting_resolution,[],[f1048,f1048,f1048,f941])).
fof(f1681,plain,(
  ~sP44('F_0','T_0','T_0')),
  inference(unit_resulting_resolution,[],[f1671,f927])).
fof(f1677,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X1)) | p(s(bool,X2)) | ~sP42(X1,'const.bool.BOUNDED_1'(s(bool,X0)),X2)) )),
  inference(subsumption_resolution,[],[f1672,f531])).
fof(f1672,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP42(X1,'const.bool.BOUNDED_1'(s(bool,X0)),X2)) )),
  inference(superposition,[],[f937,f538])).
fof(f1671,plain,(
  ~sP42('T_0','T_0','F_0')),
  inference(unit_resulting_resolution,[],[f1048,f531,f531,f937])).
fof(f1659,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X1)) | p(s(bool,X2)) | ~sP43(X1,'const.bool.BOUNDED_1'(s(bool,X0)),X2)) )),
  inference(subsumption_resolution,[],[f1653,f531])).
fof(f1653,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP43(X1,'const.bool.BOUNDED_1'(s(bool,X0)),X2)) )),
  inference(superposition,[],[f933,f538])).
fof(f1652,plain,(
  ~sP43('T_0','T_0','F_0')),
  inference(unit_resulting_resolution,[],[f1048,f531,f531,f933])).
fof(f1634,plain,(
  ( ! [X0,X1] : (sP50('const.bool.BOUNDED_1'(s(bool,X0)),'T_0',X1)) )),
  inference(unit_resulting_resolution,[],[f531,f1254])).
fof(f1626,plain,(
  s('type.list.list'('type.conSem.v'),'const.list.NIL_0') != s('type.list.list'('type.conSem.v'),sK54) | $spl4),
  inference(superposition,[],[f605,f1043])).
fof(f1607,plain,(
  ( ! [X0] : (~sP44('F_0','const.bool.BOUNDED_1'(s(bool,X0)),'T_0')) )),
  inference(unit_resulting_resolution,[],[f1048,f538,f948])).
fof(f1609,plain,(
  ( ! [X0] : (~sP44('F_0','T_0','const.bool.BOUNDED_1'(s(bool,X0)))) )),
  inference(unit_resulting_resolution,[],[f1048,f538,f948])).
fof(f1598,plain,(
  ~sP44('T_0','F_0','T_0')),
  inference(unit_resulting_resolution,[],[f531,f1102,f947])).
fof(f1600,plain,(
  ~sP44('T_0','T_0','F_0')),
  inference(unit_resulting_resolution,[],[f531,f1102,f947])).
fof(f1583,plain,(
  ( ! [X0] : (sP43('T_0','T_0','const.bool.BOUNDED_1'(s(bool,X0)))) )),
  inference(unit_resulting_resolution,[],[f1581,f928])).
fof(f1581,plain,(
  ( ! [X0] : (sP44('T_0','const.bool.BOUNDED_1'(s(bool,X0)),'T_0')) )),
  inference(unit_resulting_resolution,[],[f531,f538,f946])).
fof(f1582,plain,(
  ( ! [X0] : (sP44('T_0','T_0','const.bool.BOUNDED_1'(s(bool,X0)))) )),
  inference(unit_resulting_resolution,[],[f531,f538,f946])).
fof(f1573,plain,(
  sP44('F_0','F_0','T_0')),
  inference(unit_resulting_resolution,[],[f1048,f1102,f945])).
fof(f1574,plain,(
  sP44('F_0','T_0','F_0')),
  inference(unit_resulting_resolution,[],[f1048,f1102,f945])).
fof(f1561,plain,(
  ( ! [X0,X1] : (sP50('const.bool.BOUNDED_1'(s(bool,X0)),X1,'F_0')) )),
  inference(unit_resulting_resolution,[],[f1048,f1242])).
fof(f1537,plain,(
  ( ! [X2,X0,X1] : (sP47('const.bool.BOUNDED_1'(s(bool,X0)),'const.bool.BOUNDED_1'(s(bool,X1)),X2)) )),
  inference(unit_resulting_resolution,[],[f1516,f968])).
fof(f1516,plain,(
  ( ! [X2,X0,X1] : (sP48('const.bool.BOUNDED_1'(s(bool,X1)),'const.bool.BOUNDED_1'(s(bool,X0)),X2)) )),
  inference(subsumption_resolution,[],[f1513,f531])).
fof(f1513,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | sP48('const.bool.BOUNDED_1'(s(bool,X1)),'const.bool.BOUNDED_1'(s(bool,X0)),X2)) )),
  inference(superposition,[],[f1222,f538])).
fof(f1512,plain,(
  ( ! [X0,X1] : (sP48('const.bool.BOUNDED_1'(s(bool,X0)),'T_0',X1)) )),
  inference(unit_resulting_resolution,[],[f531,f1222])).
fof(f1401,plain,(
  ( ! [X2,X0,X1] : (sP47('const.bool.BOUNDED_1'(s(bool,X0)),X1,'const.bool.BOUNDED_1'(s(bool,X2)))) )),
  inference(unit_resulting_resolution,[],[f1310,f968])).
fof(f1310,plain,(
  ( ! [X2,X0,X1] : (sP48('const.bool.BOUNDED_1'(s(bool,X1)),X2,'const.bool.BOUNDED_1'(s(bool,X0)))) )),
  inference(subsumption_resolution,[],[f1309,f531])).
fof(f1309,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | sP48('const.bool.BOUNDED_1'(s(bool,X1)),X2,'const.bool.BOUNDED_1'(s(bool,X0)))) )),
  inference(superposition,[],[f1210,f538])).
fof(f1308,plain,(
  ( ! [X0,X1] : (sP48('const.bool.BOUNDED_1'(s(bool,X0)),X1,'T_0')) )),
  inference(unit_resulting_resolution,[],[f531,f1210])).
fof(f1254,plain,(
  ( ! [X2,X0,X1] : (sP50('const.bool.BOUNDED_1'(s(bool,X0)),X1,X2) | ~p(s(bool,X1))) )),
  inference(subsumption_resolution,[],[f1253,f531])).
fof(f1253,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,X1)) | sP50('const.bool.BOUNDED_1'(s(bool,X0)),X1,X2)) )),
  inference(superposition,[],[f996,f538])).
fof(f1252,plain,(
  ( ! [X0] : (sP50('T_0','T_0',X0)) )),
  inference(unit_resulting_resolution,[],[f531,f531,f996])).
fof(f1249,plain,(
  ( ! [X2,X0,X1] : (sP40('const.bool.BOUNDED_1'(s(bool,X0)),X1,'const.bool.BOUNDED_1'(s(bool,X2)))) )),
  inference(subsumption_resolution,[],[f1248,f531])).
fof(f1248,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | sP40('const.bool.BOUNDED_1'(s(bool,X0)),X1,'const.bool.BOUNDED_1'(s(bool,X2)))) )),
  inference(superposition,[],[f1187,f538])).
fof(f1246,plain,(
  ( ! [X0,X1] : (sP40('T_0',X0,'const.bool.BOUNDED_1'(s(bool,X1)))) )),
  inference(unit_resulting_resolution,[],[f531,f1187])).
fof(f1242,plain,(
  ( ! [X2,X0,X1] : (sP50('const.bool.BOUNDED_1'(s(bool,X0)),X2,X1) | p(s(bool,X1))) )),
  inference(subsumption_resolution,[],[f1241,f531])).
fof(f1241,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,X1)) | sP50('const.bool.BOUNDED_1'(s(bool,X0)),X2,X1)) )),
  inference(superposition,[],[f995,f538])).
fof(f1240,plain,(
  ( ! [X0] : (sP50('T_0',X0,'F_0')) )),
  inference(unit_resulting_resolution,[],[f1048,f531,f995])).
fof(f1233,plain,(
  ( ! [X0] : (~sP50('F_0','T_0',X0)) )),
  inference(unit_resulting_resolution,[],[f531,f1048,f984])).
fof(f1229,plain,(
  ( ! [X0] : (~sP50('F_0',X0,'F_0')) )),
  inference(unit_resulting_resolution,[],[f1048,f1048,f983])).
fof(f1228,plain,(
  ( ! [X2,X0,X1] : (sP40('const.bool.BOUNDED_1'(s(bool,X0)),'const.bool.BOUNDED_1'(s(bool,X1)),X2)) )),
  inference(subsumption_resolution,[],[f1227,f531])).
fof(f1227,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | sP40('const.bool.BOUNDED_1'(s(bool,X0)),'const.bool.BOUNDED_1'(s(bool,X1)),X2)) )),
  inference(superposition,[],[f1182,f538])).
fof(f1226,plain,(
  ( ! [X0,X1] : (sP40('T_0','const.bool.BOUNDED_1'(s(bool,X0)),X1)) )),
  inference(unit_resulting_resolution,[],[f531,f1182])).
fof(f1222,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X1)) | sP48('const.bool.BOUNDED_1'(s(bool,X0)),X1,X2)) )),
  inference(subsumption_resolution,[],[f1221,f531])).
fof(f1221,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,X1)) | sP48('const.bool.BOUNDED_1'(s(bool,X0)),X1,X2)) )),
  inference(superposition,[],[f979,f538])).
fof(f1220,plain,(
  ( ! [X0] : (sP48('T_0','T_0',X0)) )),
  inference(unit_resulting_resolution,[],[f531,f531,f979])).
fof(f1210,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X1)) | sP48('const.bool.BOUNDED_1'(s(bool,X0)),X2,X1)) )),
  inference(subsumption_resolution,[],[f1209,f531])).
fof(f1209,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,X1)) | sP48('const.bool.BOUNDED_1'(s(bool,X0)),X2,X1)) )),
  inference(superposition,[],[f978,f538])).
fof(f1208,plain,(
  ( ! [X0] : (sP48('T_0',X0,'T_0')) )),
  inference(unit_resulting_resolution,[],[f531,f531,f978])).
fof(f1205,plain,(
  ( ! [X0] : (~sP48('F_0','T_0',X0)) )),
  inference(unit_resulting_resolution,[],[f531,f1048,f967])).
fof(f1204,plain,(
  ( ! [X0] : (~sP48('F_0',X0,'T_0')) )),
  inference(unit_resulting_resolution,[],[f531,f1048,f966])).
fof(f1200,plain,(
  ( ! [X0] : (sP46('F_0','F_0',X0)) )),
  inference(unit_resulting_resolution,[],[f1048,f1048,f961])).
fof(f1194,plain,(
  ( ! [X0] : (sP46('F_0',X0,'F_0')) )),
  inference(unit_resulting_resolution,[],[f1048,f1048,f960])).
fof(f1191,plain,(
  ( ! [X0] : (~sP46('T_0','F_0',X0)) )),
  inference(unit_resulting_resolution,[],[f531,f1048,f951])).
fof(f1190,plain,(
  ( ! [X0] : (~sP46('T_0',X0,'F_0')) )),
  inference(unit_resulting_resolution,[],[f531,f1048,f950])).
fof(f1187,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X1)) | sP40(X1,X2,'const.bool.BOUNDED_1'(s(bool,X0)))) )),
  inference(subsumption_resolution,[],[f1186,f531])).
fof(f1186,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,X1)) | sP40(X1,X2,'const.bool.BOUNDED_1'(s(bool,X0)))) )),
  inference(superposition,[],[f921,f538])).
fof(f1185,plain,(
  ( ! [X0] : (sP40('T_0',X0,'T_0')) )),
  inference(unit_resulting_resolution,[],[f531,f531,f921])).
fof(f1182,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X1)) | sP40(X1,'const.bool.BOUNDED_1'(s(bool,X0)),X2)) )),
  inference(subsumption_resolution,[],[f1181,f531])).
fof(f1181,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,X1)) | sP40(X1,'const.bool.BOUNDED_1'(s(bool,X0)),X2)) )),
  inference(superposition,[],[f920,f538])).
fof(f1166,plain,(
  ( ! [X0] : (~sP40('F_0','F_0',X0)) )),
  inference(unit_resulting_resolution,[],[f1048,f1048,f917])).
fof(f1162,plain,(
  ( ! [X0] : (sP1('F_0','const.bool.BOUNDED_1'(s(bool,X0)))) )),
  inference(unit_resulting_resolution,[],[f1048,f1136])).
fof(f1159,plain,(
  ( ! [X0] : (~sP40(X0,'F_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f1048,f1048,f916])).
fof(f1147,plain,(
  ~sP0('F_0','F_0')),
  inference(unit_resulting_resolution,[],[f1048,f1048,f1049])).
fof(f1139,plain,(
  ( ! [X0] : (sP1('const.bool.BOUNDED_1'(s(bool,X0)),'F_0')) )),
  inference(unit_resulting_resolution,[],[f1048,f1129])).
fof(f1136,plain,(
  ( ! [X0,X1] : (sP1(X1,'const.bool.BOUNDED_1'(s(bool,X0))) | p(s(bool,X1))) )),
  inference(subsumption_resolution,[],[f1135,f531])).
fof(f1135,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,X1)) | sP1(X1,'const.bool.BOUNDED_1'(s(bool,X0)))) )),
  inference(superposition,[],[f643,f538])).
fof(f1134,plain,(
  sP1('F_0','T_0')),
  inference(unit_resulting_resolution,[],[f1048,f531,f643])).
fof(f1129,plain,(
  ( ! [X0,X1] : (sP1('const.bool.BOUNDED_1'(s(bool,X0)),X1) | p(s(bool,X1))) )),
  inference(subsumption_resolution,[],[f1128,f531])).
fof(f1128,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,X1)) | sP1('const.bool.BOUNDED_1'(s(bool,X0)),X1)) )),
  inference(superposition,[],[f640,f538])).
fof(f1127,plain,(
  sP1('T_0','F_0')),
  inference(unit_resulting_resolution,[],[f1048,f531,f640])).
fof(f1124,plain,(
  ~sP1('T_0','T_0')),
  inference(unit_resulting_resolution,[],[f531,f531,f639])).
fof(f1123,plain,(
  ~sP1('F_0','F_0')),
  inference(unit_resulting_resolution,[],[f1048,f1048,f638])).
fof(f1087,plain,(
  ( ! [X2,X3] : (sP0(X3,'const.bool.BOUNDED_1'(s(bool,X2)))) )),
  inference(subsumption_resolution,[],[f1085,f531])).
fof(f1085,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | sP0(X3,'const.bool.BOUNDED_1'(s(bool,X2)))) )),
  inference(superposition,[],[f624,f538])).
fof(f1086,plain,(
  ( ! [X0,X1] : (sP0('const.bool.BOUNDED_1'(s(bool,X0)),X1)) )),
  inference(subsumption_resolution,[],[f1084,f531])).
fof(f1084,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | sP0('const.bool.BOUNDED_1'(s(bool,X0)),X1)) )),
  inference(superposition,[],[f625,f538])).
fof(f1070,plain,(
  ( ! [X0,X1] : (sP40(X0,'T_0',X1)) )),
  inference(unit_resulting_resolution,[],[f531,f1031])).
fof(f1069,plain,(
  ( ! [X0,X1] : (sP49('F_0',X0,X1)) )),
  inference(unit_resulting_resolution,[],[f1048,f993])).
fof(f1068,plain,(
  ( ! [X0,X1] : (sP49(X0,'T_0',X1)) )),
  inference(unit_resulting_resolution,[],[f531,f992])).
fof(f1067,plain,(
  ( ! [X0,X1] : (sP49(X0,X1,'F_0')) )),
  inference(unit_resulting_resolution,[],[f1048,f991])).
fof(f1066,plain,(
  ( ! [X0,X1] : (sP47('F_0',X0,X1)) )),
  inference(unit_resulting_resolution,[],[f1048,f976])).
fof(f1065,plain,(
  ( ! [X0,X1] : (sP47(X0,'T_0',X1)) )),
  inference(unit_resulting_resolution,[],[f531,f975])).
fof(f1064,plain,(
  ( ! [X0,X1] : (sP47(X0,X1,'T_0')) )),
  inference(unit_resulting_resolution,[],[f531,f974])).
fof(f1063,plain,(
  ( ! [X0,X1] : (sP45('F_0',X0,X1)) )),
  inference(unit_resulting_resolution,[],[f1048,f959])).
fof(f1062,plain,(
  ( ! [X0,X1] : (sP45(X0,'F_0',X1)) )),
  inference(unit_resulting_resolution,[],[f1048,f958])).
fof(f1061,plain,(
  ( ! [X0,X1] : (sP45(X0,X1,'T_0')) )),
  inference(unit_resulting_resolution,[],[f531,f957])).
fof(f1060,plain,(
  ( ! [X0,X1] : (sP41('T_0',X0,X1)) )),
  inference(unit_resulting_resolution,[],[f531,f944])).
fof(f1059,plain,(
  ( ! [X0,X1] : (sP41(X0,'T_0',X1)) )),
  inference(unit_resulting_resolution,[],[f531,f943])).
fof(f1058,plain,(
  ( ! [X0,X1] : (sP41(X0,X1,'T_0')) )),
  inference(unit_resulting_resolution,[],[f531,f942])).
fof(f1057,plain,(
  ( ! [X0,X1] : (sP42('F_0',X0,X1)) )),
  inference(unit_resulting_resolution,[],[f1048,f940])).
fof(f1056,plain,(
  ( ! [X0,X1] : (sP42(X0,'F_0',X1)) )),
  inference(unit_resulting_resolution,[],[f1048,f939])).
fof(f1055,plain,(
  ( ! [X0,X1] : (sP42(X0,X1,'T_0')) )),
  inference(unit_resulting_resolution,[],[f531,f938])).
fof(f1054,plain,(
  ( ! [X0,X1] : (sP43('F_0',X0,X1)) )),
  inference(unit_resulting_resolution,[],[f1048,f936])).
fof(f1053,plain,(
  ( ! [X0,X1] : (sP43(X0,'F_0',X1)) )),
  inference(unit_resulting_resolution,[],[f1048,f935])).
fof(f1052,plain,(
  ( ! [X0,X1] : (sP43(X0,X1,'T_0')) )),
  inference(unit_resulting_resolution,[],[f531,f934])).
fof(f1051,plain,(
  ( ! [X0] : (sP0('T_0',X0)) )),
  inference(unit_resulting_resolution,[],[f531,f625])).
fof(f1050,plain,(
  ( ! [X0] : (sP0(X0,'T_0')) )),
  inference(unit_resulting_resolution,[],[f531,f624])).
fof(f1024,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X1),s('type.list.list'('type.string.char'),X2))) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X4),s('type.list.list'('type.string.char'),X5))) | s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0) = s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3)) )),
  inference(cnf_transformation,[],[f526])).
fof(f526,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X1),s('type.list.list'('type.string.char'),X2))) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X4),s('type.list.list'('type.string.char'),X5))) | (s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0) = s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X1) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X4) & s('type.list.list'('type.string.char'),X2) = s('type.list.list'('type.string.char'),X5))) & (s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0) != s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X1) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X4) | s('type.list.list'('type.string.char'),X2) != s('type.list.list'('type.string.char'),X5) | s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X1),s('type.list.list'('type.string.char'),X2))) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X4),s('type.list.list'('type.string.char'),X5)))))),
  inference(flattening,[],[f525])).
fof(f525,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X1),s('type.list.list'('type.string.char'),X2))) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X4),s('type.list.list'('type.string.char'),X5))) | (s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0) = s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X1) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X4) & s('type.list.list'('type.string.char'),X2) = s('type.list.list'('type.string.char'),X5))) & ((s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0) != s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X1) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X4) | s('type.list.list'('type.string.char'),X2) != s('type.list.list'('type.string.char'),X5)) | s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X1),s('type.list.list'('type.string.char'),X2))) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X4),s('type.list.list'('type.string.char'),X5)))))),
  inference(nnf_transformation,[],[f166])).
fof(f166,plain,(
  ! [X0,X1,X2,X3,X4,X5] : (s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X1),s('type.list.list'('type.string.char'),X2))) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X4),s('type.list.list'('type.string.char'),X5))) <=> (s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0) = s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X1) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X4) & s('type.list.list'('type.string.char'),X2) = s('type.list.list'('type.string.char'),X5)))),
  inference(rectify,[],[f36])).
fof(f36,axiom,(
  ! [X32,X33,X34,X65,X66,X67] : (s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X32),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X33),s('type.list.list'('type.string.char'),X34))) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X65),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X66),s('type.list.list'('type.string.char'),X67))) <=> (s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X32) = s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X65) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X33) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X66) & s('type.list.list'('type.string.char'),X34) = s('type.list.list'('type.string.char'),X67)))),
  file('thm.mod_to_conProof.v_rel_eqns|split|5','thm.modSem.v_|49||49||split|3')).
fof(f1025,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X1),s('type.list.list'('type.string.char'),X2))) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X4),s('type.list.list'('type.string.char'),X5))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X1) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X4)) )),
  inference(cnf_transformation,[],[f526])).
fof(f1026,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X1),s('type.list.list'('type.string.char'),X2))) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X4),s('type.list.list'('type.string.char'),X5))) | s('type.list.list'('type.string.char'),X2) = s('type.list.list'('type.string.char'),X5)) )),
  inference(cnf_transformation,[],[f526])).
fof(f1027,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0) != s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3) | s('type.list.list'('type.string.char'),X2) != s('type.list.list'('type.string.char'),X5) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X1) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X4) | s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X1),s('type.list.list'('type.string.char'),X2))) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X4),s('type.list.list'('type.string.char'),X5)))) )),
  inference(cnf_transformation,[],[f526])).
fof(f1020,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0),s('type.list.list'('type.string.char'),X1),s('type.modLang.exp',X2))) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3),s('type.list.list'('type.string.char'),X4),s('type.modLang.exp',X5))) | s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0) = s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3)) )),
  inference(cnf_transformation,[],[f524])).
fof(f524,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0),s('type.list.list'('type.string.char'),X1),s('type.modLang.exp',X2))) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3),s('type.list.list'('type.string.char'),X4),s('type.modLang.exp',X5))) | (s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0) = s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3) & s('type.list.list'('type.string.char'),X1) = s('type.list.list'('type.string.char'),X4) & s('type.modLang.exp',X2) = s('type.modLang.exp',X5))) & (s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0) != s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3) | s('type.list.list'('type.string.char'),X1) != s('type.list.list'('type.string.char'),X4) | s('type.modLang.exp',X2) != s('type.modLang.exp',X5) | s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0),s('type.list.list'('type.string.char'),X1),s('type.modLang.exp',X2))) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3),s('type.list.list'('type.string.char'),X4),s('type.modLang.exp',X5)))))),
  inference(flattening,[],[f523])).
fof(f523,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0),s('type.list.list'('type.string.char'),X1),s('type.modLang.exp',X2))) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3),s('type.list.list'('type.string.char'),X4),s('type.modLang.exp',X5))) | (s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0) = s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3) & s('type.list.list'('type.string.char'),X1) = s('type.list.list'('type.string.char'),X4) & s('type.modLang.exp',X2) = s('type.modLang.exp',X5))) & ((s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0) != s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3) | s('type.list.list'('type.string.char'),X1) != s('type.list.list'('type.string.char'),X4) | s('type.modLang.exp',X2) != s('type.modLang.exp',X5)) | s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0),s('type.list.list'('type.string.char'),X1),s('type.modLang.exp',X2))) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3),s('type.list.list'('type.string.char'),X4),s('type.modLang.exp',X5)))))),
  inference(nnf_transformation,[],[f165])).
fof(f165,plain,(
  ! [X0,X1,X2,X3,X4,X5] : (s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0),s('type.list.list'('type.string.char'),X1),s('type.modLang.exp',X2))) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3),s('type.list.list'('type.string.char'),X4),s('type.modLang.exp',X5))) <=> (s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0) = s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3) & s('type.list.list'('type.string.char'),X1) = s('type.list.list'('type.string.char'),X4) & s('type.modLang.exp',X2) = s('type.modLang.exp',X5)))),
  inference(rectify,[],[f34])).
fof(f34,axiom,(
  ! [X32,X33,X34,X65,X66,X67] : (s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X32),s('type.list.list'('type.string.char'),X33),s('type.modLang.exp',X34))) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X65),s('type.list.list'('type.string.char'),X66),s('type.modLang.exp',X67))) <=> (s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X32) = s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X65) & s('type.list.list'('type.string.char'),X33) = s('type.list.list'('type.string.char'),X66) & s('type.modLang.exp',X34) = s('type.modLang.exp',X67)))),
  file('thm.mod_to_conProof.v_rel_eqns|split|5','thm.modSem.v_|49||49||split|2')).
fof(f1021,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0),s('type.list.list'('type.string.char'),X1),s('type.modLang.exp',X2))) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3),s('type.list.list'('type.string.char'),X4),s('type.modLang.exp',X5))) | s('type.list.list'('type.string.char'),X1) = s('type.list.list'('type.string.char'),X4)) )),
  inference(cnf_transformation,[],[f524])).
fof(f1022,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0),s('type.list.list'('type.string.char'),X1),s('type.modLang.exp',X2))) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3),s('type.list.list'('type.string.char'),X4),s('type.modLang.exp',X5))) | s('type.modLang.exp',X2) = s('type.modLang.exp',X5)) )),
  inference(cnf_transformation,[],[f524])).
fof(f1023,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.modLang.exp',X2) != s('type.modLang.exp',X5) | s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0),s('type.list.list'('type.string.char'),X1),s('type.modLang.exp',X2))) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3),s('type.list.list'('type.string.char'),X4),s('type.modLang.exp',X5))) | s('type.list.list'('type.string.char'),X1) != s('type.list.list'('type.string.char'),X4) | s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0) != s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3)) )),
  inference(cnf_transformation,[],[f524])).
fof(f1016,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X0),s('type.list.list'('type.modSem.v'),X1))) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X2),s('type.list.list'('type.modSem.v'),X3))) | s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X0) = s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X2)) )),
  inference(cnf_transformation,[],[f522])).
fof(f522,plain,(
  ! [X0,X1,X2,X3] : ((s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X0),s('type.list.list'('type.modSem.v'),X1))) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X2),s('type.list.list'('type.modSem.v'),X3))) | (s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X0) = s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X2) & s('type.list.list'('type.modSem.v'),X1) = s('type.list.list'('type.modSem.v'),X3))) & (s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X0) != s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X2) | s('type.list.list'('type.modSem.v'),X1) != s('type.list.list'('type.modSem.v'),X3) | s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X0),s('type.list.list'('type.modSem.v'),X1))) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X2),s('type.list.list'('type.modSem.v'),X3)))))),
  inference(flattening,[],[f521])).
fof(f521,plain,(
  ! [X0,X1,X2,X3] : ((s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X0),s('type.list.list'('type.modSem.v'),X1))) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X2),s('type.list.list'('type.modSem.v'),X3))) | (s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X0) = s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X2) & s('type.list.list'('type.modSem.v'),X1) = s('type.list.list'('type.modSem.v'),X3))) & ((s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X0) != s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X2) | s('type.list.list'('type.modSem.v'),X1) != s('type.list.list'('type.modSem.v'),X3)) | s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X0),s('type.list.list'('type.modSem.v'),X1))) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X2),s('type.list.list'('type.modSem.v'),X3)))))),
  inference(nnf_transformation,[],[f163])).
fof(f163,plain,(
  ! [X0,X1,X2,X3] : (s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X0),s('type.list.list'('type.modSem.v'),X1))) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X2),s('type.list.list'('type.modSem.v'),X3))) <=> (s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X0) = s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X2) & s('type.list.list'('type.modSem.v'),X1) = s('type.list.list'('type.modSem.v'),X3)))),
  inference(rectify,[],[f64])).
fof(f64,axiom,(
  ! [X32,X33,X65,X66] : (s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X32),s('type.list.list'('type.modSem.v'),X33))) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X65),s('type.list.list'('type.modSem.v'),X66))) <=> (s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X32) = s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X65) & s('type.list.list'('type.modSem.v'),X33) = s('type.list.list'('type.modSem.v'),X66)))),
  file('thm.mod_to_conProof.v_rel_eqns|split|5','thm.modSem.v_|49||49||split|1')).
fof(f1017,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X0),s('type.list.list'('type.modSem.v'),X1))) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X2),s('type.list.list'('type.modSem.v'),X3))) | s('type.list.list'('type.modSem.v'),X1) = s('type.list.list'('type.modSem.v'),X3)) )),
  inference(cnf_transformation,[],[f522])).
fof(f1018,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X0) != s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X2) | s('type.list.list'('type.modSem.v'),X1) != s('type.list.list'('type.modSem.v'),X3) | s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X0),s('type.list.list'('type.modSem.v'),X1))) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X2),s('type.list.list'('type.modSem.v'),X3)))) )),
  inference(cnf_transformation,[],[f522])).
fof(f994,plain,(
  ( ! [X2,X0,X1] : (sP50(X2,X0,X1) | p(s(bool,X0)) | ~p(s(bool,X1)) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f520])).
fof(f520,plain,(
  ! [X0,X1,X2] : ((((p(s(bool,X2)) | ~p(s(bool,X1)) | p(s(bool,X0))) & (~p(s(bool,X2)) | (p(s(bool,X1)) & ~p(s(bool,X0))))) | sP50(X2,X0,X1)) & (~sP50(X2,X0,X1) | ((~p(s(bool,X2)) | ~p(s(bool,X1)) | p(s(bool,X0))) & ((p(s(bool,X1)) & ~p(s(bool,X0))) | p(s(bool,X2))))))),
  inference(flattening,[],[f519])).
fof(f519,plain,(
  ! [X0,X1,X2] : ((((p(s(bool,X2)) | (~p(s(bool,X1)) | p(s(bool,X0)))) & (~p(s(bool,X2)) | (p(s(bool,X1)) & ~p(s(bool,X0))))) | sP50(X2,X0,X1)) & (~sP50(X2,X0,X1) | ((~p(s(bool,X2)) | (~p(s(bool,X1)) | p(s(bool,X0)))) & ((p(s(bool,X1)) & ~p(s(bool,X0))) | p(s(bool,X2))))))),
  inference(nnf_transformation,[],[f276])).
fof(f276,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (~p(s(bool,X1)) | p(s(bool,X0)))) <=> sP50(X2,X0,X1))),
  inference(definition_folding,[],[f206,f275,f274])).
fof(f274,plain,(
  ! [X2,X0,X1] : (sP49(X2,X0,X1) <=> (~p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP49])])).
fof(f206,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (~p(s(bool,X1)) | p(s(bool,X0)))) <=> ((p(s(bool,X2)) | p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & (~p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2)))))),
  inference(ennf_transformation,[],[f160])).
fof(f160,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) => p(s(bool,X0)))) <=> ((p(s(bool,X2)) | p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & (~p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2)))))),
  inference(flattening,[],[f159])).
fof(f159,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) => p(s(bool,X0)))) <=> ((p(s(bool,X2)) | p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & (~p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2)))))),
  inference(rectify,[],[f43])).
fof(f43,axiom,(
  ! [X68,X63,X64] : ((p(s(bool,X64)) <=> (p(s(bool,X63)) => p(s(bool,X68)))) <=> ((p(s(bool,X64)) | p(s(bool,X63))) & (p(s(bool,X64)) | ~p(s(bool,X68))) & (~p(s(bool,X63)) | p(s(bool,X68)) | ~p(s(bool,X64)))))),
  file('thm.mod_to_conProof.v_rel_eqns|split|5','thm.sat.sat_27_prove_ltb')).
fof(f995,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X2)) | p(s(bool,X1)) | sP50(X2,X0,X1)) )),
  inference(cnf_transformation,[],[f520])).
fof(f996,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X2)) | ~p(s(bool,X0)) | sP50(X2,X0,X1)) )),
  inference(cnf_transformation,[],[f520])).
fof(f997,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X2)) | ~p(s(bool,X1)) | p(s(bool,X0)) | ~sP50(X2,X0,X1)) )),
  inference(cnf_transformation,[],[f520])).
fof(f990,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X2)) | p(s(bool,X1)) | ~p(s(bool,X0)) | ~sP49(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f518])).
fof(f518,plain,(
  ! [X0,X1,X2] : ((~sP49(X0,X1,X2) | ~p(s(bool,X2)) | p(s(bool,X1)) | ~p(s(bool,X0))) & ((p(s(bool,X2)) & ~p(s(bool,X1)) & p(s(bool,X0))) | sP49(X0,X1,X2)))),
  inference(rectify,[],[f517])).
fof(f517,plain,(
  ! [X2,X0,X1] : ((~sP49(X2,X0,X1) | ~p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2))) & ((p(s(bool,X1)) & ~p(s(bool,X0)) & p(s(bool,X2))) | sP49(X2,X0,X1)))),
  inference(flattening,[],[f516])).
fof(f516,plain,(
  ! [X2,X0,X1] : ((~sP49(X2,X0,X1) | (~p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2)))) & ((p(s(bool,X1)) & ~p(s(bool,X0)) & p(s(bool,X2))) | sP49(X2,X0,X1)))),
  inference(nnf_transformation,[],[f274])).
fof(f991,plain,(
  ( ! [X2,X0,X1] : (sP49(X0,X1,X2) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f518])).
fof(f992,plain,(
  ( ! [X2,X0,X1] : (sP49(X0,X1,X2) | ~p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f518])).
fof(f993,plain,(
  ( ! [X2,X0,X1] : (sP49(X0,X1,X2) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f518])).
fof(f983,plain,(
  ( ! [X2,X0,X1] : (~sP50(X0,X1,X2) | p(s(bool,X0)) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f515])).
fof(f984,plain,(
  ( ! [X2,X0,X1] : (~sP50(X0,X1,X2) | p(s(bool,X0)) | ~p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f515])).
fof(f985,plain,(
  ( ! [X2,X0,X1] : (~sP50(X0,X1,X2) | sP49(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f515])).
fof(f987,plain,(
  ( ! [X2,X0,X1] : (sP50(X0,X1,X2) | ~sP49(X0,X1,X2) | ~p(s(bool,X0)) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f515])).
fof(f988,plain,(
  ( ! [X2,X0,X1] : (sP50(X0,X1,X2) | ~sP49(X0,X1,X2) | p(s(bool,X1)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f515])).
fof(f989,plain,(
  ( ! [X2,X0,X1] : (sP50(X0,X1,X2) | ~sP49(X0,X1,X2) | p(s(bool,X1)) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f515])).
fof(f977,plain,(
  ( ! [X2,X0,X1] : (sP48(X2,X0,X1) | p(s(bool,X0)) | p(s(bool,X1)) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f512])).
fof(f512,plain,(
  ! [X0,X1,X2] : ((((p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0))) & (~p(s(bool,X2)) | (~p(s(bool,X1)) & ~p(s(bool,X0))))) | sP48(X2,X0,X1)) & (~sP48(X2,X0,X1) | ((~p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0))) & ((~p(s(bool,X1)) & ~p(s(bool,X0))) | p(s(bool,X2))))))),
  inference(flattening,[],[f511])).
fof(f511,plain,(
  ! [X0,X1,X2] : ((((p(s(bool,X2)) | (p(s(bool,X1)) | p(s(bool,X0)))) & (~p(s(bool,X2)) | (~p(s(bool,X1)) & ~p(s(bool,X0))))) | sP48(X2,X0,X1)) & (~sP48(X2,X0,X1) | ((~p(s(bool,X2)) | (p(s(bool,X1)) | p(s(bool,X0)))) & ((~p(s(bool,X1)) & ~p(s(bool,X0))) | p(s(bool,X2))))))),
  inference(nnf_transformation,[],[f273])).
fof(f273,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) | p(s(bool,X0)))) <=> sP48(X2,X0,X1))),
  inference(definition_folding,[],[f158,f272,f271])).
fof(f271,plain,(
  ! [X2,X0,X1] : (sP47(X2,X0,X1) <=> (p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP47])])).
fof(f158,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) | p(s(bool,X0)))) <=> ((p(s(bool,X2)) | ~p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & (p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2)))))),
  inference(flattening,[],[f157])).
fof(f157,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) | p(s(bool,X0)))) <=> ((p(s(bool,X2)) | ~p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & (p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2)))))),
  inference(rectify,[],[f52])).
fof(f52,axiom,(
  ! [X68,X63,X64] : ((p(s(bool,X64)) <=> (p(s(bool,X63)) | p(s(bool,X68)))) <=> ((p(s(bool,X64)) | ~p(s(bool,X63))) & (p(s(bool,X64)) | ~p(s(bool,X68))) & (p(s(bool,X63)) | p(s(bool,X68)) | ~p(s(bool,X64)))))),
  file('thm.mod_to_conProof.v_rel_eqns|split|5','thm.sat.sat_25_prove_ltb')).
fof(f978,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X2)) | ~p(s(bool,X1)) | sP48(X2,X0,X1)) )),
  inference(cnf_transformation,[],[f512])).
fof(f979,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X2)) | ~p(s(bool,X0)) | sP48(X2,X0,X1)) )),
  inference(cnf_transformation,[],[f512])).
fof(f980,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0)) | ~sP48(X2,X0,X1)) )),
  inference(cnf_transformation,[],[f512])).
fof(f973,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X0)) | p(s(bool,X1)) | p(s(bool,X2)) | ~sP47(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f510])).
fof(f510,plain,(
  ! [X0,X1,X2] : ((~sP47(X0,X1,X2) | p(s(bool,X2)) | p(s(bool,X1)) | ~p(s(bool,X0))) & ((~p(s(bool,X2)) & ~p(s(bool,X1)) & p(s(bool,X0))) | sP47(X0,X1,X2)))),
  inference(rectify,[],[f509])).
fof(f509,plain,(
  ! [X2,X0,X1] : ((~sP47(X2,X0,X1) | p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2))) & ((~p(s(bool,X1)) & ~p(s(bool,X0)) & p(s(bool,X2))) | sP47(X2,X0,X1)))),
  inference(flattening,[],[f508])).
fof(f508,plain,(
  ! [X2,X0,X1] : ((~sP47(X2,X0,X1) | (p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2)))) & ((~p(s(bool,X1)) & ~p(s(bool,X0)) & p(s(bool,X2))) | sP47(X2,X0,X1)))),
  inference(nnf_transformation,[],[f271])).
fof(f974,plain,(
  ( ! [X2,X0,X1] : (sP47(X0,X1,X2) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f510])).
fof(f975,plain,(
  ( ! [X2,X0,X1] : (sP47(X0,X1,X2) | ~p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f510])).
fof(f976,plain,(
  ( ! [X2,X0,X1] : (sP47(X0,X1,X2) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f510])).
fof(f966,plain,(
  ( ! [X2,X0,X1] : (~sP48(X0,X1,X2) | p(s(bool,X0)) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f507])).
fof(f967,plain,(
  ( ! [X2,X0,X1] : (~sP48(X0,X1,X2) | p(s(bool,X0)) | ~p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f507])).
fof(f968,plain,(
  ( ! [X2,X0,X1] : (~sP48(X0,X1,X2) | sP47(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f507])).
fof(f970,plain,(
  ( ! [X2,X0,X1] : (sP48(X0,X1,X2) | ~sP47(X0,X1,X2) | ~p(s(bool,X0)) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f507])).
fof(f971,plain,(
  ( ! [X2,X0,X1] : (sP48(X0,X1,X2) | ~sP47(X0,X1,X2) | p(s(bool,X1)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f507])).
fof(f972,plain,(
  ( ! [X2,X0,X1] : (sP48(X0,X1,X2) | ~sP47(X0,X1,X2) | p(s(bool,X1)) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f507])).
fof(f960,plain,(
  ( ! [X2,X0,X1] : (sP46(X2,X0,X1) | p(s(bool,X1)) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f504])).
fof(f504,plain,(
  ! [X0,X1,X2] : ((((p(s(bool,X2)) | (p(s(bool,X1)) & p(s(bool,X0)))) & (~p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0)))) | sP46(X2,X0,X1)) & (~sP46(X2,X0,X1) | ((~p(s(bool,X2)) | (p(s(bool,X1)) & p(s(bool,X0)))) & (~p(s(bool,X1)) | ~p(s(bool,X0)) | p(s(bool,X2))))))),
  inference(flattening,[],[f503])).
fof(f503,plain,(
  ! [X0,X1,X2] : ((((p(s(bool,X2)) | (p(s(bool,X1)) & p(s(bool,X0)))) & (~p(s(bool,X2)) | (~p(s(bool,X1)) | ~p(s(bool,X0))))) | sP46(X2,X0,X1)) & (~sP46(X2,X0,X1) | ((~p(s(bool,X2)) | (p(s(bool,X1)) & p(s(bool,X0)))) & ((~p(s(bool,X1)) | ~p(s(bool,X0))) | p(s(bool,X2))))))),
  inference(nnf_transformation,[],[f270])).
fof(f270,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) & p(s(bool,X0)))) <=> sP46(X2,X0,X1))),
  inference(definition_folding,[],[f156,f269,f268])).
fof(f268,plain,(
  ! [X0,X1,X2] : (sP45(X0,X1,X2) <=> (p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP45])])).
fof(f269,plain,(
  ! [X2,X0,X1] : (sP46(X2,X0,X1) <=> (sP45(X0,X1,X2) & (p(s(bool,X1)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X2)))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP46])])).
fof(f156,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) & p(s(bool,X0)))) <=> ((p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0))) & (p(s(bool,X1)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X2)))))),
  inference(flattening,[],[f155])).
fof(f155,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) & p(s(bool,X0)))) <=> ((p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0))) & (p(s(bool,X1)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X2)))))),
  inference(rectify,[],[f46])).
fof(f46,axiom,(
  ! [X68,X63,X64] : ((p(s(bool,X64)) <=> (p(s(bool,X63)) & p(s(bool,X68)))) <=> ((p(s(bool,X64)) | ~p(s(bool,X63)) | ~p(s(bool,X68))) & (p(s(bool,X63)) | ~p(s(bool,X64))) & (p(s(bool,X68)) | ~p(s(bool,X64)))))),
  file('thm.mod_to_conProof.v_rel_eqns|split|5','thm.sat.sat_23_prove_ltb')).
fof(f961,plain,(
  ( ! [X2,X0,X1] : (sP46(X2,X0,X1) | p(s(bool,X0)) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f504])).
fof(f962,plain,(
  ( ! [X2,X0,X1] : (sP46(X2,X0,X1) | ~p(s(bool,X0)) | ~p(s(bool,X1)) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f504])).
fof(f965,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X1)) | ~p(s(bool,X0)) | p(s(bool,X2)) | ~sP46(X2,X0,X1)) )),
  inference(cnf_transformation,[],[f504])).
fof(f956,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X1)) | ~p(s(bool,X0)) | p(s(bool,X2)) | ~sP45(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f502])).
fof(f502,plain,(
  ! [X0,X1,X2] : ((~sP45(X0,X1,X2) | p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0))) & ((~p(s(bool,X2)) & p(s(bool,X1)) & p(s(bool,X0))) | sP45(X0,X1,X2)))),
  inference(flattening,[],[f501])).
fof(f501,plain,(
  ! [X0,X1,X2] : ((~sP45(X0,X1,X2) | (p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0)))) & ((~p(s(bool,X2)) & p(s(bool,X1)) & p(s(bool,X0))) | sP45(X0,X1,X2)))),
  inference(nnf_transformation,[],[f268])).
fof(f957,plain,(
  ( ! [X2,X0,X1] : (sP45(X0,X1,X2) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f502])).
fof(f958,plain,(
  ( ! [X2,X0,X1] : (sP45(X0,X1,X2) | p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f502])).
fof(f959,plain,(
  ( ! [X2,X0,X1] : (sP45(X0,X1,X2) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f502])).
fof(f949,plain,(
  ( ! [X2,X0,X1] : (~sP46(X0,X1,X2) | sP45(X1,X2,X0)) )),
  inference(cnf_transformation,[],[f500])).
fof(f500,plain,(
  ! [X0,X1,X2] : ((~sP46(X0,X1,X2) | (sP45(X1,X2,X0) & (p(s(bool,X2)) | ~p(s(bool,X0))) & (p(s(bool,X1)) | ~p(s(bool,X0))))) & (~sP45(X1,X2,X0) | (~p(s(bool,X2)) & p(s(bool,X0))) | (~p(s(bool,X1)) & p(s(bool,X0))) | sP46(X0,X1,X2)))),
  inference(rectify,[],[f499])).
fof(f499,plain,(
  ! [X2,X0,X1] : ((~sP46(X2,X0,X1) | (sP45(X0,X1,X2) & (p(s(bool,X1)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X2))))) & (~sP45(X0,X1,X2) | (~p(s(bool,X1)) & p(s(bool,X2))) | (~p(s(bool,X0)) & p(s(bool,X2))) | sP46(X2,X0,X1)))),
  inference(flattening,[],[f498])).
fof(f498,plain,(
  ! [X2,X0,X1] : ((~sP46(X2,X0,X1) | (sP45(X0,X1,X2) & (p(s(bool,X1)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X2))))) & ((~sP45(X0,X1,X2) | (~p(s(bool,X1)) & p(s(bool,X2))) | (~p(s(bool,X0)) & p(s(bool,X2)))) | sP46(X2,X0,X1)))),
  inference(nnf_transformation,[],[f269])).
fof(f950,plain,(
  ( ! [X2,X0,X1] : (~sP46(X0,X1,X2) | p(s(bool,X2)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f500])).
fof(f951,plain,(
  ( ! [X2,X0,X1] : (~sP46(X0,X1,X2) | p(s(bool,X1)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f500])).
fof(f952,plain,(
  ( ! [X2,X0,X1] : (sP46(X0,X1,X2) | ~p(s(bool,X1)) | ~p(s(bool,X2)) | ~sP45(X1,X2,X0)) )),
  inference(cnf_transformation,[],[f500])).
fof(f1030,plain,(
  ( ! [X2,X0,X1] : (sP46(X0,X1,X2) | p(s(bool,X0)) | ~sP45(X1,X2,X0)) )),
  inference(duplicate_literal_removal,[],[f955])).
fof(f955,plain,(
  ( ! [X2,X0,X1] : (sP46(X0,X1,X2) | p(s(bool,X0)) | p(s(bool,X0)) | ~sP45(X1,X2,X0)) )),
  inference(cnf_transformation,[],[f500])).
fof(f945,plain,(
  ( ! [X2,X0,X1] : (sP44(X2,X1,X0) | s(bool,X0) = s(bool,X1) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f497])).
fof(f497,plain,(
  ! [X0,X1,X2] : ((((p(s(bool,X2)) | s(bool,X0) = s(bool,X1)) & (~p(s(bool,X2)) | s(bool,X0) != s(bool,X1))) | sP44(X2,X1,X0)) & (~sP44(X2,X1,X0) | ((~p(s(bool,X2)) | s(bool,X0) = s(bool,X1)) & (s(bool,X0) != s(bool,X1) | p(s(bool,X2))))))),
  inference(nnf_transformation,[],[f267])).
fof(f267,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> s(bool,X0) = s(bool,X1)) <=> sP44(X2,X1,X0))),
  inference(definition_folding,[],[f154,f266,f265,f264,f263])).
fof(f263,plain,(
  ! [X0,X1,X2] : (sP41(X0,X1,X2) <=> (p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP41])])).
fof(f264,plain,(
  ! [X1,X0,X2] : (sP42(X1,X0,X2) <=> (p(s(bool,X2)) | ~p(s(bool,X0)) | ~p(s(bool,X1))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP42])])).
fof(f265,plain,(
  ! [X2,X0,X1] : (sP43(X2,X0,X1) <=> (p(s(bool,X1)) | ~p(s(bool,X0)) | ~p(s(bool,X2))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP43])])).
fof(f266,plain,(
  ! [X2,X1,X0] : (sP44(X2,X1,X0) <=> (sP41(X0,X1,X2) & sP42(X1,X0,X2) & sP43(X2,X0,X1) & (p(s(bool,X0)) | ~p(s(bool,X1)) | ~p(s(bool,X2)))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP44])])).
fof(f154,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> s(bool,X0) = s(bool,X1)) <=> ((p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0))) & (p(s(bool,X2)) | ~p(s(bool,X0)) | ~p(s(bool,X1))) & (p(s(bool,X1)) | ~p(s(bool,X0)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X1)) | ~p(s(bool,X2)))))),
  inference(flattening,[],[f153])).
fof(f153,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> s(bool,X0) = s(bool,X1)) <=> ((p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0))) & (p(s(bool,X2)) | ~p(s(bool,X0)) | ~p(s(bool,X1))) & (p(s(bool,X1)) | ~p(s(bool,X0)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X1)) | ~p(s(bool,X2)))))),
  inference(rectify,[],[f44])).
fof(f44,axiom,(
  ! [X68,X63,X64] : ((p(s(bool,X64)) <=> s(bool,X63) = s(bool,X68)) <=> ((p(s(bool,X64)) | p(s(bool,X63)) | p(s(bool,X68))) & (p(s(bool,X64)) | ~p(s(bool,X68)) | ~p(s(bool,X63))) & (p(s(bool,X63)) | ~p(s(bool,X68)) | ~p(s(bool,X64))) & (p(s(bool,X68)) | ~p(s(bool,X63)) | ~p(s(bool,X64)))))),
  file('thm.mod_to_conProof.v_rel_eqns|split|5','thm.sat.sat_2|49|_prove_ltb')).
fof(f946,plain,(
  ( ! [X2,X0,X1] : (sP44(X2,X1,X0) | s(bool,X0) != s(bool,X1) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f497])).
fof(f947,plain,(
  ( ! [X2,X0,X1] : (~sP44(X2,X1,X0) | ~p(s(bool,X2)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f497])).
fof(f948,plain,(
  ( ! [X2,X0,X1] : (~sP44(X2,X1,X0) | s(bool,X0) != s(bool,X1) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f497])).
fof(f941,plain,(
  ( ! [X2,X0,X1] : (~sP41(X0,X1,X2) | p(s(bool,X1)) | p(s(bool,X2)) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f496])).
fof(f496,plain,(
  ! [X0,X1,X2] : ((~sP41(X0,X1,X2) | p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0))) & ((~p(s(bool,X2)) & ~p(s(bool,X1)) & ~p(s(bool,X0))) | sP41(X0,X1,X2)))),
  inference(flattening,[],[f495])).
fof(f495,plain,(
  ! [X0,X1,X2] : ((~sP41(X0,X1,X2) | (p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0)))) & ((~p(s(bool,X2)) & ~p(s(bool,X1)) & ~p(s(bool,X0))) | sP41(X0,X1,X2)))),
  inference(nnf_transformation,[],[f263])).
fof(f942,plain,(
  ( ! [X2,X0,X1] : (sP41(X0,X1,X2) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f496])).
fof(f943,plain,(
  ( ! [X2,X0,X1] : (sP41(X0,X1,X2) | ~p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f496])).
fof(f944,plain,(
  ( ! [X2,X0,X1] : (sP41(X0,X1,X2) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f496])).
fof(f937,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X1)) | ~p(s(bool,X0)) | p(s(bool,X2)) | ~sP42(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f494])).
fof(f494,plain,(
  ! [X0,X1,X2] : ((~sP42(X0,X1,X2) | p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0))) & ((~p(s(bool,X2)) & p(s(bool,X1)) & p(s(bool,X0))) | sP42(X0,X1,X2)))),
  inference(rectify,[],[f493])).
fof(f493,plain,(
  ! [X1,X0,X2] : ((~sP42(X1,X0,X2) | p(s(bool,X2)) | ~p(s(bool,X0)) | ~p(s(bool,X1))) & ((~p(s(bool,X2)) & p(s(bool,X0)) & p(s(bool,X1))) | sP42(X1,X0,X2)))),
  inference(flattening,[],[f492])).
fof(f492,plain,(
  ! [X1,X0,X2] : ((~sP42(X1,X0,X2) | (p(s(bool,X2)) | ~p(s(bool,X0)) | ~p(s(bool,X1)))) & ((~p(s(bool,X2)) & p(s(bool,X0)) & p(s(bool,X1))) | sP42(X1,X0,X2)))),
  inference(nnf_transformation,[],[f264])).
fof(f938,plain,(
  ( ! [X2,X0,X1] : (sP42(X0,X1,X2) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f494])).
fof(f939,plain,(
  ( ! [X2,X0,X1] : (sP42(X0,X1,X2) | p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f494])).
fof(f940,plain,(
  ( ! [X2,X0,X1] : (sP42(X0,X1,X2) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f494])).
fof(f933,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X1)) | ~p(s(bool,X0)) | p(s(bool,X2)) | ~sP43(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f491])).
fof(f491,plain,(
  ! [X0,X1,X2] : ((~sP43(X0,X1,X2) | p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0))) & ((~p(s(bool,X2)) & p(s(bool,X1)) & p(s(bool,X0))) | sP43(X0,X1,X2)))),
  inference(rectify,[],[f490])).
fof(f490,plain,(
  ! [X2,X0,X1] : ((~sP43(X2,X0,X1) | p(s(bool,X1)) | ~p(s(bool,X0)) | ~p(s(bool,X2))) & ((~p(s(bool,X1)) & p(s(bool,X0)) & p(s(bool,X2))) | sP43(X2,X0,X1)))),
  inference(flattening,[],[f489])).
fof(f489,plain,(
  ! [X2,X0,X1] : ((~sP43(X2,X0,X1) | (p(s(bool,X1)) | ~p(s(bool,X0)) | ~p(s(bool,X2)))) & ((~p(s(bool,X1)) & p(s(bool,X0)) & p(s(bool,X2))) | sP43(X2,X0,X1)))),
  inference(nnf_transformation,[],[f265])).
fof(f934,plain,(
  ( ! [X2,X0,X1] : (sP43(X0,X1,X2) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f491])).
fof(f935,plain,(
  ( ! [X2,X0,X1] : (sP43(X0,X1,X2) | p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f491])).
fof(f936,plain,(
  ( ! [X2,X0,X1] : (sP43(X0,X1,X2) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f491])).
fof(f926,plain,(
  ( ! [X2,X0,X1] : (~sP44(X0,X1,X2) | sP41(X2,X1,X0)) )),
  inference(cnf_transformation,[],[f488])).
fof(f488,plain,(
  ! [X0,X1,X2] : ((~sP44(X0,X1,X2) | (sP41(X2,X1,X0) & sP42(X1,X2,X0) & sP43(X0,X2,X1) & (p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0))))) & (~sP41(X2,X1,X0) | ~sP42(X1,X2,X0) | ~sP43(X0,X2,X1) | (~p(s(bool,X2)) & p(s(bool,X1)) & p(s(bool,X0))) | sP44(X0,X1,X2)))),
  inference(rectify,[],[f487])).
fof(f487,plain,(
  ! [X2,X1,X0] : ((~sP44(X2,X1,X0) | (sP41(X0,X1,X2) & sP42(X1,X0,X2) & sP43(X2,X0,X1) & (p(s(bool,X0)) | ~p(s(bool,X1)) | ~p(s(bool,X2))))) & (~sP41(X0,X1,X2) | ~sP42(X1,X0,X2) | ~sP43(X2,X0,X1) | (~p(s(bool,X0)) & p(s(bool,X1)) & p(s(bool,X2))) | sP44(X2,X1,X0)))),
  inference(flattening,[],[f486])).
fof(f486,plain,(
  ! [X2,X1,X0] : ((~sP44(X2,X1,X0) | (sP41(X0,X1,X2) & sP42(X1,X0,X2) & sP43(X2,X0,X1) & (p(s(bool,X0)) | ~p(s(bool,X1)) | ~p(s(bool,X2))))) & ((~sP41(X0,X1,X2) | ~sP42(X1,X0,X2) | ~sP43(X2,X0,X1) | (~p(s(bool,X0)) & p(s(bool,X1)) & p(s(bool,X2)))) | sP44(X2,X1,X0)))),
  inference(nnf_transformation,[],[f266])).
fof(f927,plain,(
  ( ! [X2,X0,X1] : (~sP44(X0,X1,X2) | sP42(X1,X2,X0)) )),
  inference(cnf_transformation,[],[f488])).
fof(f928,plain,(
  ( ! [X2,X0,X1] : (~sP44(X0,X1,X2) | sP43(X0,X2,X1)) )),
  inference(cnf_transformation,[],[f488])).
fof(f929,plain,(
  ( ! [X2,X0,X1] : (~sP44(X0,X1,X2) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f488])).
fof(f930,plain,(
  ( ! [X2,X0,X1] : (~sP42(X1,X2,X0) | ~p(s(bool,X2)) | ~sP43(X0,X2,X1) | sP44(X0,X1,X2) | ~sP41(X2,X1,X0)) )),
  inference(cnf_transformation,[],[f488])).
fof(f931,plain,(
  ( ! [X2,X0,X1] : (~sP42(X1,X2,X0) | p(s(bool,X1)) | ~sP43(X0,X2,X1) | sP44(X0,X1,X2) | ~sP41(X2,X1,X0)) )),
  inference(cnf_transformation,[],[f488])).
fof(f932,plain,(
  ( ! [X2,X0,X1] : (~sP42(X1,X2,X0) | p(s(bool,X0)) | ~sP43(X0,X2,X1) | sP44(X0,X1,X2) | ~sP41(X2,X1,X0)) )),
  inference(cnf_transformation,[],[f488])).
fof(f916,plain,(
  ( ! [X2,X0,X1] : (~sP40(X0,X1,X2) | p(s(bool,X1)) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f483])).
fof(f483,plain,(
  ! [X0,X1,X2] : ((~sP40(X0,X1,X2) | ((p(s(bool,X1)) | p(s(bool,X2))) & (p(s(bool,X1)) | p(s(bool,X0))))) & ((~p(s(bool,X1)) & ~p(s(bool,X2))) | (~p(s(bool,X1)) & ~p(s(bool,X0))) | sP40(X0,X1,X2)))),
  inference(rectify,[],[f482])).
fof(f482,plain,(
  ! [X2,X0,X1] : ((~sP40(X2,X0,X1) | ((p(s(bool,X0)) | p(s(bool,X1))) & (p(s(bool,X0)) | p(s(bool,X2))))) & ((~p(s(bool,X0)) & ~p(s(bool,X1))) | (~p(s(bool,X0)) & ~p(s(bool,X2))) | sP40(X2,X0,X1)))),
  inference(flattening,[],[f481])).
fof(f481,plain,(
  ! [X2,X0,X1] : ((~sP40(X2,X0,X1) | ((p(s(bool,X0)) | p(s(bool,X1))) & (p(s(bool,X0)) | p(s(bool,X2))))) & (((~p(s(bool,X0)) & ~p(s(bool,X1))) | (~p(s(bool,X0)) & ~p(s(bool,X2)))) | sP40(X2,X0,X1)))),
  inference(nnf_transformation,[],[f261])).
fof(f261,plain,(
  ! [X2,X0,X1] : (sP40(X2,X0,X1) <=> ((p(s(bool,X0)) | p(s(bool,X1))) & (p(s(bool,X0)) | p(s(bool,X2)))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP40])])).
fof(f917,plain,(
  ( ! [X2,X0,X1] : (~sP40(X0,X1,X2) | p(s(bool,X1)) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f483])).
fof(f1031,plain,(
  ( ! [X2,X0,X1] : (sP40(X0,X1,X2) | ~p(s(bool,X1))) )),
  inference(duplicate_literal_removal,[],[f918])).
fof(f918,plain,(
  ( ! [X2,X0,X1] : (sP40(X0,X1,X2) | ~p(s(bool,X1)) | ~p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f483])).
fof(f919,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X2)) | ~p(s(bool,X1)) | sP40(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f483])).
fof(f920,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X1)) | ~p(s(bool,X0)) | sP40(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f483])).
fof(f921,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X2)) | ~p(s(bool,X0)) | sP40(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f483])).
fof(f897,plain,(
  ( ! [X2,X0,X3,X1] : (~sP32(X0,X1,X2,X3) | s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK286(X3,X2,X1,X0)),s('type.semanticPrimitives.tid_or_exn',sK287(X3,X2,X1,X0)))))),s('type.list.list'('type.modSem.v'),sK289(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f475])).
fof(f898,plain,(
  ( ! [X2,X0,X3,X1] : (~sP32(X0,X1,X2,X3) | s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',sK288(X3,X2,X1,X0)),s('type.semanticPrimitives.tid_or_exn',sK287(X3,X2,X1,X0)))))),s('type.list.list'('type.conSem.v'),sK290(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f475])).
fof(f899,plain,(
  ( ! [X2,X0,X3,X1] : (~sP32(X0,X1,X2,X3) | s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',sK288(X3,X2,X1,X0)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),sK289(X3,X2,X1,X0)))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK286(X3,X2,X1,X0)),s('type.semanticPrimitives.tid_or_exn',sK287(X3,X2,X1,X0))))))) )),
  inference(cnf_transformation,[],[f475])).
fof(f892,plain,(
  ( ! [X2,X0,X3,X1] : (~sP33(X0,X1,X2,X3) | s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK283(X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK279(X3,X2,X1,X0)))),s('type.list.list'('type.string.char'),sK280(X3,X2,X1,X0)),s('type.modLang.exp',sK281(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f472])).
fof(f893,plain,(
  ( ! [X2,X0,X3,X1] : (~sP33(X0,X1,X2,X3) | s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK282(X3,X2,X1,X0)),s('type.list.list'('type.string.char'),sK280(X3,X2,X1,X0)),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK285(X3,X2,X1,X0)),s('type.modLang.exp',sK281(X3,X2,X1,X0))))))) )),
  inference(cnf_transformation,[],[f472])).
fof(f887,plain,(
  ( ! [X2,X0,X3,X1] : (~sP34(X0,X1,X2,X3) | s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK275(X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK272(X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),sK273(X3,X2,X1,X0)),s('type.list.list'('type.string.char'),sK274(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f469])).
fof(f888,plain,(
  ( ! [X2,X0,X3,X1] : (~sP34(X0,X1,X2,X3) | s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK276(X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK278(X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),sK273(X3,X2,X1,X0)))),s('type.list.list'('type.string.char'),sK274(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f469])).
fof(f883,plain,(
  ( ! [X2,X0,X3,X1] : (~sP35(X0,X1,X2,X3) | s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),sK270(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f466])).
fof(f884,plain,(
  ( ! [X2,X0,X3,X1] : (~sP35(X0,X1,X2,X3) | s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),sK271(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f466])).
fof(f879,plain,(
  ( ! [X2,X0,X3,X1] : (~sP36(X0,X1,X2,X3) | s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),sK268(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f463])).
fof(f880,plain,(
  ( ! [X2,X0,X3,X1] : (~sP36(X0,X1,X2,X3) | s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),sK269(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f463])).
fof(f869,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP37(X0,X1,X2,X3,X4) | s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X4) | s('type.list.list'('type.modSem.v'),X4) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK264(X4,X3,X2,X1,X0)),s('type.list.list'('type.modSem.v'),sK265(X4,X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f460])).
fof(f870,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP37(X0,X1,X2,X3,X4) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X3) | s('type.list.list'('type.modSem.v'),X4) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK264(X4,X3,X2,X1,X0)),s('type.list.list'('type.modSem.v'),sK265(X4,X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f460])).
fof(f871,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP37(X0,X1,X2,X3,X4) | s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X4) | s('type.list.list'('type.conSem.v'),X3) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',sK266(X4,X3,X2,X1,X0)),s('type.list.list'('type.conSem.v'),sK267(X4,X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f460])).
fof(f872,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP37(X0,X1,X2,X3,X4) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X3) | s('type.list.list'('type.conSem.v'),X3) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',sK266(X4,X3,X2,X1,X0)),s('type.list.list'('type.conSem.v'),sK267(X4,X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f460])).
fof(f877,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP37(X0,X1,X2,X3,X4) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') != s('type.list.list'('type.conSem.v'),X3) | s('type.list.list'('type.modSem.v'),'const.list.NIL_0') != s('type.list.list'('type.modSem.v'),X4)) )),
  inference(cnf_transformation,[],[f460])).
fof(f859,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP38(X0,X1,X2,X3,X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK259(X4,X3,X2,X1,X0)),s('type.modSem.v',sK260(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK261(X4,X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f456])).
fof(f860,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP38(X0,X1,X2,X3,X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK259(X4,X3,X2,X1,X0)),s('type.modSem.v',sK260(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK261(X4,X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f456])).
fof(f861,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP38(X0,X1,X2,X3,X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK259(X4,X3,X2,X1,X0)),s('type.conSem.v',sK263(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK262(X4,X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f456])).
fof(f862,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP38(X0,X1,X2,X3,X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK259(X4,X3,X2,X1,X0)),s('type.conSem.v',sK263(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK262(X4,X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f456])).
fof(f867,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP38(X0,X1,X2,X3,X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4)) )),
  inference(cnf_transformation,[],[f456])).
fof(f847,plain,(
  ( ! [X2,X0,X1] : (~sP39(X0,X1,X2) | s('type.modSem.v',sK255(X2,X1,X0)) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK258(X2,X1,X0)))) | sP34(sK254(X2,X1,X0),X2,sK256(X2,X1,X0),sK255(X2,X1,X0)) | sP33(sK254(X2,X1,X0),X2,sK256(X2,X1,X0),sK255(X2,X1,X0)) | sP32(X1,sK254(X2,X1,X0),sK256(X2,X1,X0),sK255(X2,X1,X0)) | sP35(X1,sK254(X2,X1,X0),sK256(X2,X1,X0),sK255(X2,X1,X0)) | s('type.modSem.v',sK255(X2,X1,X0)) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK257(X2,X1,X0)))) | sP36(X1,sK254(X2,X1,X0),sK256(X2,X1,X0),sK255(X2,X1,X0))) )),
  inference(cnf_transformation,[],[f452])).
fof(f848,plain,(
  ( ! [X2,X0,X1] : (~sP39(X0,X1,X2) | s('type.modSem.v',sK255(X2,X1,X0)) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK258(X2,X1,X0)))) | sP34(sK254(X2,X1,X0),X2,sK256(X2,X1,X0),sK255(X2,X1,X0)) | sP33(sK254(X2,X1,X0),X2,sK256(X2,X1,X0),sK255(X2,X1,X0)) | sP32(X1,sK254(X2,X1,X0),sK256(X2,X1,X0),sK255(X2,X1,X0)) | sP35(X1,sK254(X2,X1,X0),sK256(X2,X1,X0),sK255(X2,X1,X0)) | s('type.conSem.v',sK256(X2,X1,X0)) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK257(X2,X1,X0)))) | sP36(X1,sK254(X2,X1,X0),sK256(X2,X1,X0),sK255(X2,X1,X0))) )),
  inference(cnf_transformation,[],[f452])).
fof(f849,plain,(
  ( ! [X2,X0,X1] : (~sP39(X0,X1,X2) | s('type.conSem.v',sK256(X2,X1,X0)) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK258(X2,X1,X0)))) | sP34(sK254(X2,X1,X0),X2,sK256(X2,X1,X0),sK255(X2,X1,X0)) | sP33(sK254(X2,X1,X0),X2,sK256(X2,X1,X0),sK255(X2,X1,X0)) | sP32(X1,sK254(X2,X1,X0),sK256(X2,X1,X0),sK255(X2,X1,X0)) | sP35(X1,sK254(X2,X1,X0),sK256(X2,X1,X0),sK255(X2,X1,X0)) | s('type.modSem.v',sK255(X2,X1,X0)) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK257(X2,X1,X0)))) | sP36(X1,sK254(X2,X1,X0),sK256(X2,X1,X0),sK255(X2,X1,X0))) )),
  inference(cnf_transformation,[],[f452])).
fof(f850,plain,(
  ( ! [X2,X0,X1] : (~sP39(X0,X1,X2) | s('type.conSem.v',sK256(X2,X1,X0)) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK258(X2,X1,X0)))) | sP34(sK254(X2,X1,X0),X2,sK256(X2,X1,X0),sK255(X2,X1,X0)) | sP33(sK254(X2,X1,X0),X2,sK256(X2,X1,X0),sK255(X2,X1,X0)) | sP32(X1,sK254(X2,X1,X0),sK256(X2,X1,X0),sK255(X2,X1,X0)) | sP35(X1,sK254(X2,X1,X0),sK256(X2,X1,X0),sK255(X2,X1,X0)) | s('type.conSem.v',sK256(X2,X1,X0)) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK257(X2,X1,X0)))) | sP36(X1,sK254(X2,X1,X0),sK256(X2,X1,X0),sK255(X2,X1,X0))) )),
  inference(cnf_transformation,[],[f452])).
fof(f831,plain,(
  ( ! [X2,X0,X3,X1] : (~sP24(X0,X1,X2,X3) | s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK239(X3,X2,X1,X0)),s('type.semanticPrimitives.tid_or_exn',sK240(X3,X2,X1,X0)))))),s('type.list.list'('type.modSem.v'),sK242(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f443])).
fof(f832,plain,(
  ( ! [X2,X0,X3,X1] : (~sP24(X0,X1,X2,X3) | s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',sK241(X3,X2,X1,X0)),s('type.semanticPrimitives.tid_or_exn',sK240(X3,X2,X1,X0)))))),s('type.list.list'('type.conSem.v'),sK243(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f443])).
fof(f833,plain,(
  ( ! [X2,X0,X3,X1] : (~sP24(X0,X1,X2,X3) | s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',sK241(X3,X2,X1,X0)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),sK242(X3,X2,X1,X0)))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK239(X3,X2,X1,X0)),s('type.semanticPrimitives.tid_or_exn',sK240(X3,X2,X1,X0))))))) )),
  inference(cnf_transformation,[],[f443])).
fof(f826,plain,(
  ( ! [X2,X0,X3,X1] : (~sP25(X0,X1,X2,X3) | s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK236(X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK232(X3,X2,X1,X0)))),s('type.list.list'('type.string.char'),sK233(X3,X2,X1,X0)),s('type.modLang.exp',sK234(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f440])).
fof(f827,plain,(
  ( ! [X2,X0,X3,X1] : (~sP25(X0,X1,X2,X3) | s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK235(X3,X2,X1,X0)),s('type.list.list'('type.string.char'),sK233(X3,X2,X1,X0)),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK238(X3,X2,X1,X0)),s('type.modLang.exp',sK234(X3,X2,X1,X0))))))) )),
  inference(cnf_transformation,[],[f440])).
fof(f821,plain,(
  ( ! [X2,X0,X3,X1] : (~sP26(X0,X1,X2,X3) | s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK228(X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK225(X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),sK226(X3,X2,X1,X0)),s('type.list.list'('type.string.char'),sK227(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f437])).
fof(f822,plain,(
  ( ! [X2,X0,X3,X1] : (~sP26(X0,X1,X2,X3) | s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK229(X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK231(X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),sK226(X3,X2,X1,X0)))),s('type.list.list'('type.string.char'),sK227(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f437])).
fof(f817,plain,(
  ( ! [X2,X0,X3,X1] : (~sP27(X0,X1,X2,X3) | s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),sK223(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f434])).
fof(f818,plain,(
  ( ! [X2,X0,X3,X1] : (~sP27(X0,X1,X2,X3) | s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),sK224(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f434])).
fof(f813,plain,(
  ( ! [X2,X0,X3,X1] : (~sP28(X0,X1,X2,X3) | s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),sK221(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f431])).
fof(f814,plain,(
  ( ! [X2,X0,X3,X1] : (~sP28(X0,X1,X2,X3) | s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),sK222(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f431])).
fof(f803,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP29(X0,X1,X2,X3,X4) | s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X4) | s('type.list.list'('type.modSem.v'),X4) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK217(X4,X3,X2,X1,X0)),s('type.list.list'('type.modSem.v'),sK218(X4,X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f428])).
fof(f804,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP29(X0,X1,X2,X3,X4) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X3) | s('type.list.list'('type.modSem.v'),X4) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK217(X4,X3,X2,X1,X0)),s('type.list.list'('type.modSem.v'),sK218(X4,X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f428])).
fof(f805,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP29(X0,X1,X2,X3,X4) | s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X4) | s('type.list.list'('type.conSem.v'),X3) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',sK219(X4,X3,X2,X1,X0)),s('type.list.list'('type.conSem.v'),sK220(X4,X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f428])).
fof(f806,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP29(X0,X1,X2,X3,X4) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X3) | s('type.list.list'('type.conSem.v'),X3) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',sK219(X4,X3,X2,X1,X0)),s('type.list.list'('type.conSem.v'),sK220(X4,X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f428])).
fof(f811,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP29(X0,X1,X2,X3,X4) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') != s('type.list.list'('type.conSem.v'),X3) | s('type.list.list'('type.modSem.v'),'const.list.NIL_0') != s('type.list.list'('type.modSem.v'),X4)) )),
  inference(cnf_transformation,[],[f428])).
fof(f793,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP30(X0,X1,X2,X3,X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK212(X4,X3,X2,X1,X0)),s('type.modSem.v',sK213(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK214(X4,X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f424])).
fof(f794,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP30(X0,X1,X2,X3,X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK212(X4,X3,X2,X1,X0)),s('type.modSem.v',sK213(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK214(X4,X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f424])).
fof(f795,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP30(X0,X1,X2,X3,X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK212(X4,X3,X2,X1,X0)),s('type.conSem.v',sK216(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK215(X4,X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f424])).
fof(f796,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP30(X0,X1,X2,X3,X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK212(X4,X3,X2,X1,X0)),s('type.conSem.v',sK216(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK215(X4,X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f424])).
fof(f801,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP30(X0,X1,X2,X3,X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4)) )),
  inference(cnf_transformation,[],[f424])).
fof(f781,plain,(
  ( ! [X2,X0,X1] : (~sP31(X0,X1,X2) | s('type.modSem.v',sK208(X2,X1,X0)) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK211(X2,X1,X0)))) | sP26(sK207(X2,X1,X0),X2,sK209(X2,X1,X0),sK208(X2,X1,X0)) | sP25(sK207(X2,X1,X0),X2,sK209(X2,X1,X0),sK208(X2,X1,X0)) | sP24(X1,sK207(X2,X1,X0),sK209(X2,X1,X0),sK208(X2,X1,X0)) | sP27(X1,sK207(X2,X1,X0),sK209(X2,X1,X0),sK208(X2,X1,X0)) | s('type.modSem.v',sK208(X2,X1,X0)) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK210(X2,X1,X0)))) | sP28(X1,sK207(X2,X1,X0),sK209(X2,X1,X0),sK208(X2,X1,X0))) )),
  inference(cnf_transformation,[],[f420])).
fof(f782,plain,(
  ( ! [X2,X0,X1] : (~sP31(X0,X1,X2) | s('type.modSem.v',sK208(X2,X1,X0)) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK211(X2,X1,X0)))) | sP26(sK207(X2,X1,X0),X2,sK209(X2,X1,X0),sK208(X2,X1,X0)) | sP25(sK207(X2,X1,X0),X2,sK209(X2,X1,X0),sK208(X2,X1,X0)) | sP24(X1,sK207(X2,X1,X0),sK209(X2,X1,X0),sK208(X2,X1,X0)) | sP27(X1,sK207(X2,X1,X0),sK209(X2,X1,X0),sK208(X2,X1,X0)) | s('type.conSem.v',sK209(X2,X1,X0)) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK210(X2,X1,X0)))) | sP28(X1,sK207(X2,X1,X0),sK209(X2,X1,X0),sK208(X2,X1,X0))) )),
  inference(cnf_transformation,[],[f420])).
fof(f783,plain,(
  ( ! [X2,X0,X1] : (~sP31(X0,X1,X2) | s('type.conSem.v',sK209(X2,X1,X0)) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK211(X2,X1,X0)))) | sP26(sK207(X2,X1,X0),X2,sK209(X2,X1,X0),sK208(X2,X1,X0)) | sP25(sK207(X2,X1,X0),X2,sK209(X2,X1,X0),sK208(X2,X1,X0)) | sP24(X1,sK207(X2,X1,X0),sK209(X2,X1,X0),sK208(X2,X1,X0)) | sP27(X1,sK207(X2,X1,X0),sK209(X2,X1,X0),sK208(X2,X1,X0)) | s('type.modSem.v',sK208(X2,X1,X0)) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK210(X2,X1,X0)))) | sP28(X1,sK207(X2,X1,X0),sK209(X2,X1,X0),sK208(X2,X1,X0))) )),
  inference(cnf_transformation,[],[f420])).
fof(f784,plain,(
  ( ! [X2,X0,X1] : (~sP31(X0,X1,X2) | s('type.conSem.v',sK209(X2,X1,X0)) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK211(X2,X1,X0)))) | sP26(sK207(X2,X1,X0),X2,sK209(X2,X1,X0),sK208(X2,X1,X0)) | sP25(sK207(X2,X1,X0),X2,sK209(X2,X1,X0),sK208(X2,X1,X0)) | sP24(X1,sK207(X2,X1,X0),sK209(X2,X1,X0),sK208(X2,X1,X0)) | sP27(X1,sK207(X2,X1,X0),sK209(X2,X1,X0),sK208(X2,X1,X0)) | s('type.conSem.v',sK209(X2,X1,X0)) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK210(X2,X1,X0)))) | sP28(X1,sK207(X2,X1,X0),sK209(X2,X1,X0),sK208(X2,X1,X0))) )),
  inference(cnf_transformation,[],[f420])).
fof(f769,plain,(
  ( ! [X2,X0,X1] : (~sP23(X0,X1,X2) | s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X2) | s('type.list.list'('type.modSem.v'),X2) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK203(X2,X1,X0)),s('type.list.list'('type.modSem.v'),sK204(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f416])).
fof(f771,plain,(
  ( ! [X2,X0,X1] : (~sP23(X0,X1,X2) | s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X2) | s('type.list.list'('type.conSem.v'),X1) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',sK205(X2,X1,X0)),s('type.list.list'('type.conSem.v'),sK206(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f416])).
fof(f772,plain,(
  ( ! [X2,X0,X1] : (~sP23(X0,X1,X2) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X1) | s('type.list.list'('type.conSem.v'),X1) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',sK205(X2,X1,X0)),s('type.list.list'('type.conSem.v'),sK206(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f416])).
fof(f777,plain,(
  ( ! [X2,X0,X1] : (sP23(X0,X1,X2) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') != s('type.list.list'('type.conSem.v'),X1) | s('type.list.list'('type.modSem.v'),'const.list.NIL_0') != s('type.list.list'('type.modSem.v'),X2)) )),
  inference(cnf_transformation,[],[f416])).
fof(f756,plain,(
  ( ! [X2,X0,X3,X1] : (~sP15(X0,X1,X2,X3) | s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK189(X3,X2,X1,X0)),s('type.semanticPrimitives.tid_or_exn',sK190(X3,X2,X1,X0)))))),s('type.list.list'('type.modSem.v'),sK192(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f409])).
fof(f757,plain,(
  ( ! [X2,X0,X3,X1] : (~sP15(X0,X1,X2,X3) | s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',sK191(X3,X2,X1,X0)),s('type.semanticPrimitives.tid_or_exn',sK190(X3,X2,X1,X0)))))),s('type.list.list'('type.conSem.v'),sK193(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f409])).
fof(f758,plain,(
  ( ! [X2,X0,X3,X1] : (~sP15(X0,X1,X2,X3) | s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',sK191(X3,X2,X1,X0)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),sK192(X3,X2,X1,X0)))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK189(X3,X2,X1,X0)),s('type.semanticPrimitives.tid_or_exn',sK190(X3,X2,X1,X0))))))) )),
  inference(cnf_transformation,[],[f409])).
fof(f751,plain,(
  ( ! [X2,X0,X3,X1] : (~sP16(X0,X1,X2,X3) | s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK186(X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK182(X3,X2,X1,X0)))),s('type.list.list'('type.string.char'),sK183(X3,X2,X1,X0)),s('type.modLang.exp',sK184(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f406])).
fof(f752,plain,(
  ( ! [X2,X0,X3,X1] : (~sP16(X0,X1,X2,X3) | s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK185(X3,X2,X1,X0)),s('type.list.list'('type.string.char'),sK183(X3,X2,X1,X0)),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK188(X3,X2,X1,X0)),s('type.modLang.exp',sK184(X3,X2,X1,X0))))))) )),
  inference(cnf_transformation,[],[f406])).
fof(f746,plain,(
  ( ! [X2,X0,X3,X1] : (~sP17(X0,X1,X2,X3) | s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK178(X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK175(X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),sK176(X3,X2,X1,X0)),s('type.list.list'('type.string.char'),sK177(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f403])).
fof(f747,plain,(
  ( ! [X2,X0,X3,X1] : (~sP17(X0,X1,X2,X3) | s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK179(X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK181(X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),sK176(X3,X2,X1,X0)))),s('type.list.list'('type.string.char'),sK177(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f403])).
fof(f742,plain,(
  ( ! [X2,X0,X3,X1] : (~sP18(X0,X1,X2,X3) | s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),sK173(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f400])).
fof(f743,plain,(
  ( ! [X2,X0,X3,X1] : (~sP18(X0,X1,X2,X3) | s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),sK174(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f400])).
fof(f738,plain,(
  ( ! [X2,X0,X3,X1] : (~sP19(X0,X1,X2,X3) | s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),sK171(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f397])).
fof(f739,plain,(
  ( ! [X2,X0,X3,X1] : (~sP19(X0,X1,X2,X3) | s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),sK172(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f397])).
fof(f728,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP20(X0,X1,X2,X3,X4) | s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X4) | s('type.list.list'('type.modSem.v'),X4) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK167(X4,X3,X2,X1,X0)),s('type.list.list'('type.modSem.v'),sK168(X4,X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f394])).
fof(f729,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP20(X0,X1,X2,X3,X4) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X3) | s('type.list.list'('type.modSem.v'),X4) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK167(X4,X3,X2,X1,X0)),s('type.list.list'('type.modSem.v'),sK168(X4,X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f394])).
fof(f730,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP20(X0,X1,X2,X3,X4) | s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X4) | s('type.list.list'('type.conSem.v'),X3) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',sK169(X4,X3,X2,X1,X0)),s('type.list.list'('type.conSem.v'),sK170(X4,X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f394])).
fof(f731,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP20(X0,X1,X2,X3,X4) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X3) | s('type.list.list'('type.conSem.v'),X3) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',sK169(X4,X3,X2,X1,X0)),s('type.list.list'('type.conSem.v'),sK170(X4,X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f394])).
fof(f736,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP20(X0,X1,X2,X3,X4) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') != s('type.list.list'('type.conSem.v'),X3) | s('type.list.list'('type.modSem.v'),'const.list.NIL_0') != s('type.list.list'('type.modSem.v'),X4)) )),
  inference(cnf_transformation,[],[f394])).
fof(f718,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP21(X0,X1,X2,X3,X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK162(X4,X3,X2,X1,X0)),s('type.modSem.v',sK163(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK164(X4,X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f390])).
fof(f719,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP21(X0,X1,X2,X3,X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK162(X4,X3,X2,X1,X0)),s('type.modSem.v',sK163(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK164(X4,X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f390])).
fof(f720,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP21(X0,X1,X2,X3,X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK162(X4,X3,X2,X1,X0)),s('type.conSem.v',sK166(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK165(X4,X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f390])).
fof(f721,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP21(X0,X1,X2,X3,X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK162(X4,X3,X2,X1,X0)),s('type.conSem.v',sK166(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK165(X4,X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f390])).
fof(f726,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP21(X0,X1,X2,X3,X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4)) )),
  inference(cnf_transformation,[],[f390])).
fof(f706,plain,(
  ( ! [X2,X0,X1] : (~sP22(X0,X1,X2) | s('type.modSem.v',sK158(X2,X1,X0)) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK161(X2,X1,X0)))) | sP17(sK157(X2,X1,X0),X2,sK159(X2,X1,X0),sK158(X2,X1,X0)) | sP16(sK157(X2,X1,X0),X2,sK159(X2,X1,X0),sK158(X2,X1,X0)) | sP15(X1,sK157(X2,X1,X0),sK159(X2,X1,X0),sK158(X2,X1,X0)) | sP18(X1,sK157(X2,X1,X0),sK159(X2,X1,X0),sK158(X2,X1,X0)) | s('type.modSem.v',sK158(X2,X1,X0)) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK160(X2,X1,X0)))) | sP19(X1,sK157(X2,X1,X0),sK159(X2,X1,X0),sK158(X2,X1,X0))) )),
  inference(cnf_transformation,[],[f386])).
fof(f707,plain,(
  ( ! [X2,X0,X1] : (~sP22(X0,X1,X2) | s('type.modSem.v',sK158(X2,X1,X0)) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK161(X2,X1,X0)))) | sP17(sK157(X2,X1,X0),X2,sK159(X2,X1,X0),sK158(X2,X1,X0)) | sP16(sK157(X2,X1,X0),X2,sK159(X2,X1,X0),sK158(X2,X1,X0)) | sP15(X1,sK157(X2,X1,X0),sK159(X2,X1,X0),sK158(X2,X1,X0)) | sP18(X1,sK157(X2,X1,X0),sK159(X2,X1,X0),sK158(X2,X1,X0)) | s('type.conSem.v',sK159(X2,X1,X0)) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK160(X2,X1,X0)))) | sP19(X1,sK157(X2,X1,X0),sK159(X2,X1,X0),sK158(X2,X1,X0))) )),
  inference(cnf_transformation,[],[f386])).
fof(f708,plain,(
  ( ! [X2,X0,X1] : (~sP22(X0,X1,X2) | s('type.conSem.v',sK159(X2,X1,X0)) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK161(X2,X1,X0)))) | sP17(sK157(X2,X1,X0),X2,sK159(X2,X1,X0),sK158(X2,X1,X0)) | sP16(sK157(X2,X1,X0),X2,sK159(X2,X1,X0),sK158(X2,X1,X0)) | sP15(X1,sK157(X2,X1,X0),sK159(X2,X1,X0),sK158(X2,X1,X0)) | sP18(X1,sK157(X2,X1,X0),sK159(X2,X1,X0),sK158(X2,X1,X0)) | s('type.modSem.v',sK158(X2,X1,X0)) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK160(X2,X1,X0)))) | sP19(X1,sK157(X2,X1,X0),sK159(X2,X1,X0),sK158(X2,X1,X0))) )),
  inference(cnf_transformation,[],[f386])).
fof(f709,plain,(
  ( ! [X2,X0,X1] : (~sP22(X0,X1,X2) | s('type.conSem.v',sK159(X2,X1,X0)) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK161(X2,X1,X0)))) | sP17(sK157(X2,X1,X0),X2,sK159(X2,X1,X0),sK158(X2,X1,X0)) | sP16(sK157(X2,X1,X0),X2,sK159(X2,X1,X0),sK158(X2,X1,X0)) | sP15(X1,sK157(X2,X1,X0),sK159(X2,X1,X0),sK158(X2,X1,X0)) | sP18(X1,sK157(X2,X1,X0),sK159(X2,X1,X0),sK158(X2,X1,X0)) | s('type.conSem.v',sK159(X2,X1,X0)) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK160(X2,X1,X0)))) | sP19(X1,sK157(X2,X1,X0),sK159(X2,X1,X0),sK158(X2,X1,X0))) )),
  inference(cnf_transformation,[],[f386])).
fof(f689,plain,(
  ( ! [X0,X1] : (~sP10(X0,X1) | s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',sK137(X1,X0)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),sK138(X1,X0)))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK134(X1,X0)),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK135(X1,X0)),s('type.semanticPrimitives.tid_or_exn',sK136(X1,X0))))))) )),
  inference(cnf_transformation,[],[f375])).
fof(f668,plain,(
  ( ! [X0,X1] : (~sP2(X0,X1) | s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',sK97(X1,X0)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),sK98(X1,X0)))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK94(X1,X0)),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK95(X1,X0)),s('type.semanticPrimitives.tid_or_exn',sK96(X1,X0))))))) )),
  inference(cnf_transformation,[],[f358])).
fof(f650,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,X3))) != s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X4),s(X1,X5))) | s(X0,X2) = s(X0,X4)) )),
  inference(cnf_transformation,[],[f341])).
fof(f341,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,X3))) != s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X4),s(X1,X5))) | (s(X0,X2) = s(X0,X4) & s(X1,X3) = s(X1,X5))) & (s(X0,X2) != s(X0,X4) | s(X1,X3) != s(X1,X5) | s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,X3))) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X4),s(X1,X5)))))),
  inference(flattening,[],[f340])).
fof(f340,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,X3))) != s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X4),s(X1,X5))) | (s(X0,X2) = s(X0,X4) & s(X1,X3) = s(X1,X5))) & ((s(X0,X2) != s(X0,X4) | s(X1,X3) != s(X1,X5)) | s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,X3))) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X4),s(X1,X5)))))),
  inference(nnf_transformation,[],[f143])).
fof(f143,plain,(
  ! [X0,X1,X2,X3,X4,X5] : (s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,X3))) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X4),s(X1,X5))) <=> (s(X0,X2) = s(X0,X4) & s(X1,X3) = s(X1,X5)))),
  inference(flattening,[],[f142])).
fof(f142,plain,(
  ! [X0,X1] : ! [X2,X3,X4,X5] : (s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,X3))) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X4),s(X1,X5))) <=> (s(X0,X2) = s(X0,X4) & s(X1,X3) = s(X1,X5)))),
  inference(rectify,[],[f31])).
fof(f31,axiom,(
  ! [X47,X46] : ! [X23,X51,X60,X62] : (s('type.pair.prod'(X47,X46),'const.pair.,_2'(s(X47,X23),s(X46,X51))) = s('type.pair.prod'(X47,X46),'const.pair.,_2'(s(X47,X60),s(X46,X62))) <=> (s(X47,X23) = s(X47,X60) & s(X46,X51) = s(X46,X62)))),
  file('thm.mod_to_conProof.v_rel_eqns|split|5','thm.pair.CLOSED_PAIR_EQ')).
fof(f651,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,X3))) != s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X4),s(X1,X5))) | s(X1,X3) = s(X1,X5)) )),
  inference(cnf_transformation,[],[f341])).
fof(f652,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X0,X2) != s(X0,X4) | s(X1,X3) != s(X1,X5) | s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,X3))) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X4),s(X1,X5)))) )),
  inference(cnf_transformation,[],[f341])).
fof(f649,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,f(s(X0,sK66(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK66(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3)) )),
  inference(cnf_transformation,[],[f339])).
fof(f339,plain,(
  ! [X0,X1,X2,X3] : (s(X1,f(s(X0,sK66(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK66(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK66])],[f195])).
fof(f195,plain,(
  ! [X0,X1,X2,X3] : (? [X4] : s(X1,f(s(X0,X4))) != s(X1,g(s(X0,X4))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(ennf_transformation,[],[f141])).
fof(f141,plain,(
  ! [X0,X1,X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(flattening,[],[f140])).
fof(f140,plain,(
  ! [X0,X1] : ! [X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(rectify,[],[f4])).
fof(f4,axiom,(
  ! [X1,X2] : ! [X3,X4] : (! [X5] : s(X2,f(s(X1,X5))) = s(X2,g(s(X1,X5))) => s(fun(X1,X2),X3) = s(fun(X1,X2),X4))),
  file('thm.mod_to_conProof.v_rel_eqns|split|5',aHL_EXT)).
fof(f638,plain,(
  ( ! [X0,X1] : (~sP1(X0,X1) | p(s(bool,X0)) | p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f337])).
fof(f337,plain,(
  ! [X0,X1] : ((~sP1(X0,X1) | ((p(s(bool,X0)) | p(s(bool,X1))) & (~p(s(bool,X1)) | ~p(s(bool,X0))))) & ((~p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & p(s(bool,X0))) | sP1(X0,X1)))),
  inference(rectify,[],[f336])).
fof(f336,plain,(
  ! [X1,X0] : ((~sP1(X1,X0) | ((p(s(bool,X1)) | p(s(bool,X0))) & (~p(s(bool,X0)) | ~p(s(bool,X1))))) & ((~p(s(bool,X1)) & ~p(s(bool,X0))) | (p(s(bool,X0)) & p(s(bool,X1))) | sP1(X1,X0)))),
  inference(flattening,[],[f335])).
fof(f335,plain,(
  ! [X1,X0] : ((~sP1(X1,X0) | ((p(s(bool,X1)) | p(s(bool,X0))) & (~p(s(bool,X0)) | ~p(s(bool,X1))))) & (((~p(s(bool,X1)) & ~p(s(bool,X0))) | (p(s(bool,X0)) & p(s(bool,X1)))) | sP1(X1,X0)))),
  inference(nnf_transformation,[],[f215])).
fof(f215,plain,(
  ! [X1,X0] : (sP1(X1,X0) <=> ((p(s(bool,X1)) | p(s(bool,X0))) & (~p(s(bool,X0)) | ~p(s(bool,X1)))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP1])])).
fof(f639,plain,(
  ( ! [X0,X1] : (~sP1(X0,X1) | ~p(s(bool,X1)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f337])).
fof(f640,plain,(
  ( ! [X0,X1] : (~p(s(bool,X0)) | p(s(bool,X1)) | sP1(X0,X1)) )),
  inference(cnf_transformation,[],[f337])).
fof(f643,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | p(s(bool,X0)) | sP1(X0,X1)) )),
  inference(cnf_transformation,[],[f337])).
fof(f1049,plain,(
  ( ! [X0,X1] : (~sP0(X0,X1) | p(s(bool,X1)) | p(s(bool,X0))) )),
  inference(subsumption_resolution,[],[f623,f1048])).
fof(f623,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | p(s(bool,X0)) | p(s(bool,X1)) | ~sP0(X0,X1)) )),
  inference(cnf_transformation,[],[f330])).
fof(f330,plain,(
  ! [X0,X1] : ((~sP0(X0,X1) | p(s(bool,X1)) | p(s(bool,X0)) | p(s(bool,'F_0'))) & ((~p(s(bool,X1)) & ~p(s(bool,X0)) & ~p(s(bool,'F_0'))) | sP0(X0,X1)))),
  inference(flattening,[],[f329])).
fof(f329,plain,(
  ! [X0,X1] : ((~sP0(X0,X1) | (p(s(bool,X1)) | p(s(bool,X0)) | p(s(bool,'F_0')))) & ((~p(s(bool,X1)) & ~p(s(bool,X0)) & ~p(s(bool,'F_0'))) | sP0(X0,X1)))),
  inference(nnf_transformation,[],[f213])).
fof(f213,plain,(
  ! [X0,X1] : (sP0(X0,X1) <=> (p(s(bool,X1)) | p(s(bool,X0)) | p(s(bool,'F_0'))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP0])])).
fof(f624,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | sP0(X0,X1)) )),
  inference(cnf_transformation,[],[f330])).
fof(f625,plain,(
  ( ! [X0,X1] : (~p(s(bool,X0)) | sP0(X0,X1)) )),
  inference(cnf_transformation,[],[f330])).
fof(f621,plain,(
  ( ! [X0,X1] : (s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X0))) != s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X1))) | s('type.list.list'('type.modSem.v'),X0) = s('type.list.list'('type.modSem.v'),X1)) )),
  inference(cnf_transformation,[],[f328])).
fof(f328,plain,(
  ! [X0,X1] : ((s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X0))) != s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X1))) | s('type.list.list'('type.modSem.v'),X0) = s('type.list.list'('type.modSem.v'),X1)) & (s('type.list.list'('type.modSem.v'),X0) != s('type.list.list'('type.modSem.v'),X1) | s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X0))) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X1)))))),
  inference(nnf_transformation,[],[f131])).
fof(f131,plain,(
  ! [X0,X1] : (s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X0))) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X1))) <=> s('type.list.list'('type.modSem.v'),X0) = s('type.list.list'('type.modSem.v'),X1))),
  inference(rectify,[],[f51])).
fof(f51,axiom,(
  ! [X60,X61] : (s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X60))) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X61))) <=> s('type.list.list'('type.modSem.v'),X60) = s('type.list.list'('type.modSem.v'),X61))),
  file('thm.mod_to_conProof.v_rel_eqns|split|5','thm.modSem.v_|49||49||split|5')).
fof(f622,plain,(
  ( ! [X0,X1] : (s('type.list.list'('type.modSem.v'),X0) != s('type.list.list'('type.modSem.v'),X1) | s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X0))) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X1)))) )),
  inference(cnf_transformation,[],[f328])).
fof(f619,plain,(
  ( ! [X0,X1] : (s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X0))) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X1))) | s('type.ast.lit',X0) = s('type.ast.lit',X1)) )),
  inference(cnf_transformation,[],[f327])).
fof(f327,plain,(
  ! [X0,X1] : ((s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X0))) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X1))) | s('type.ast.lit',X0) = s('type.ast.lit',X1)) & (s('type.ast.lit',X0) != s('type.ast.lit',X1) | s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X0))) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X1)))))),
  inference(nnf_transformation,[],[f130])).
fof(f130,plain,(
  ! [X0,X1] : (s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X0))) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X1))) <=> s('type.ast.lit',X0) = s('type.ast.lit',X1))),
  inference(rectify,[],[f29])).
fof(f29,axiom,(
  ! [X60,X61] : (s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X60))) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X61))) <=> s('type.ast.lit',X60) = s('type.ast.lit',X61))),
  file('thm.mod_to_conProof.v_rel_eqns|split|5','thm.modSem.v_|49||49||split|0')).
fof(f620,plain,(
  ( ! [X0,X1] : (s('type.ast.lit',X0) != s('type.ast.lit',X1) | s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X0))) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X1)))) )),
  inference(cnf_transformation,[],[f327])).
fof(f617,plain,(
  ( ! [X0,X1] : (s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X0))) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num',X1)) )),
  inference(cnf_transformation,[],[f326])).
fof(f326,plain,(
  ! [X0,X1] : ((s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X0))) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num',X1)) & (s('type.num.num',X0) != s('type.num.num',X1) | s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X0))) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X1)))))),
  inference(nnf_transformation,[],[f129])).
fof(f129,plain,(
  ! [X0,X1] : (s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X0))) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X1))) <=> s('type.num.num',X0) = s('type.num.num',X1))),
  inference(rectify,[],[f39])).
fof(f39,axiom,(
  ! [X60,X61] : (s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X60))) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X61))) <=> s('type.num.num',X60) = s('type.num.num',X61))),
  file('thm.mod_to_conProof.v_rel_eqns|split|5','thm.modSem.v_|49||49||split|4')).
fof(f618,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) != s('type.num.num',X1) | s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X0))) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f326])).
fof(f606,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))) | s(X0,X1) = s(X0,X3)) )),
  inference(cnf_transformation,[],[f325])).
fof(f325,plain,(
  ! [X0,X1,X2,X3,X4] : ((s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))) | (s(X0,X1) = s(X0,X3) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),X4))) & (s(X0,X1) != s(X0,X3) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),X4) | s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))))),
  inference(flattening,[],[f324])).
fof(f324,plain,(
  ! [X0,X1,X2,X3,X4] : ((s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))) | (s(X0,X1) = s(X0,X3) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),X4))) & ((s(X0,X1) != s(X0,X3) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),X4)) | s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))))),
  inference(nnf_transformation,[],[f120])).
fof(f120,plain,(
  ! [X0,X1,X2,X3,X4] : (s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))) <=> (s(X0,X1) = s(X0,X3) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),X4)))),
  inference(flattening,[],[f119])).
fof(f119,plain,(
  ! [X0] : ! [X1,X2,X3,X4] : (s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))) <=> (s(X0,X1) = s(X0,X3) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),X4)))),
  inference(rectify,[],[f35])).
fof(f35,axiom,(
  ! [X47] : ! [X32,X33,X65,X66] : (s('type.list.list'(X47),'const.list.CONS_2'(s(X47,X32),s('type.list.list'(X47),X33))) = s('type.list.list'(X47),'const.list.CONS_2'(s(X47,X65),s('type.list.list'(X47),X66))) <=> (s(X47,X32) = s(X47,X65) & s('type.list.list'(X47),X33) = s('type.list.list'(X47),X66)))),
  file('thm.mod_to_conProof.v_rel_eqns|split|5','thm.list.list_|49||49|')).
fof(f607,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),X4)) )),
  inference(cnf_transformation,[],[f325])).
fof(f608,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'(X0),X2) != s('type.list.list'(X0),X4) | s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))) | s(X0,X1) != s(X0,X3)) )),
  inference(cnf_transformation,[],[f325])).
fof(f118294,plain,(
  ( ! [X412,X411] : (s(bool,X411) != s(bool,X412) | s(bool,X411) = s(bool,g(s(bool,X411))) | p(s(bool,X412))) ) | $spl376),
  inference(cnf_transformation,[],[f118294_D])).
fof(f118294_D,plain,(
  ( ! [X412,X411] : (s(bool,X411) != s(bool,X412) | s(bool,X411) = s(bool,g(s(bool,X411))) | p(s(bool,X412))) ) <=> ~$spl376),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl376])])).
fof(f118293,plain,(
  ( ! [X412,X413,X411] : (s(bool,'T_0') = s(bool,X413) | s(bool,X411) != s(bool,X412) | p(s(bool,X412)) | s(bool,X411) = s(bool,g(s(bool,X411)))) ) | ($spl4 | $spl224 | $spl231)),
  inference(forward_demodulation,[],[f118292,f538])).
fof(f118292,plain,(
  ( ! [X412,X413,X411] : (s(bool,X411) != s(bool,X412) | p(s(bool,X412)) | s(bool,X413) = s(bool,'const.bool.BOUNDED_1'(s(bool,X411))) | s(bool,X411) = s(bool,g(s(bool,X411)))) ) | ($spl4 | $spl224 | $spl231)),
  inference(subsumption_resolution,[],[f118027,f112803])).
fof(f118027,plain,(
  ( ! [X412,X413,X411] : (s(bool,X411) != s(bool,X412) | p(s(bool,X412)) | s(bool,X413) = s(bool,'const.bool.BOUNDED_1'(s(bool,X411))) | s(bool,'T_0') = s(bool,X413) | s(bool,X411) = s(bool,g(s(bool,X411)))) ) | ($spl4 | $spl231)),
  inference(superposition,[],[f7834,f106445])).
fof(f118284,plain,(
  ( ! [X265,X267,X268,X266] : (s('type.pair.prod'(X266,bool),'const.pair.,_2'(s(X266,X267),s(bool,'F_0'))) != s('type.pair.prod'(X266,bool),'const.pair.,_2'(s(X266,X268),s(bool,X265))) | s(bool,X265) = s(bool,g(s(bool,X265)))) ) | $spl374),
  inference(cnf_transformation,[],[f118284_D])).
fof(f118284_D,plain,(
  ( ! [X265,X267,X268,X266] : (s('type.pair.prod'(X266,bool),'const.pair.,_2'(s(X266,X267),s(bool,'F_0'))) != s('type.pair.prod'(X266,bool),'const.pair.,_2'(s(X266,X268),s(bool,X265))) | s(bool,X265) = s(bool,g(s(bool,X265)))) ) <=> ~$spl374),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl374])])).
fof(f118283,plain,(
  ( ! [X269,X265,X267,X268,X266] : (s(bool,'T_0') = s(bool,X269) | s('type.pair.prod'(X266,bool),'const.pair.,_2'(s(X266,X267),s(bool,'F_0'))) != s('type.pair.prod'(X266,bool),'const.pair.,_2'(s(X266,X268),s(bool,X265))) | s(bool,X265) = s(bool,g(s(bool,X265)))) ) | ($spl4 | $spl224 | $spl231)),
  inference(forward_demodulation,[],[f118282,f538])).
fof(f118282,plain,(
  ( ! [X269,X265,X267,X268,X266] : (s('type.pair.prod'(X266,bool),'const.pair.,_2'(s(X266,X267),s(bool,'F_0'))) != s('type.pair.prod'(X266,bool),'const.pair.,_2'(s(X266,X268),s(bool,X265))) | s(bool,X269) = s(bool,'const.bool.BOUNDED_1'(s(bool,X265))) | s(bool,X265) = s(bool,g(s(bool,X265)))) ) | ($spl4 | $spl224 | $spl231)),
  inference(subsumption_resolution,[],[f117961,f112803])).
fof(f117961,plain,(
  ( ! [X269,X265,X267,X268,X266] : (s('type.pair.prod'(X266,bool),'const.pair.,_2'(s(X266,X267),s(bool,'F_0'))) != s('type.pair.prod'(X266,bool),'const.pair.,_2'(s(X266,X268),s(bool,X265))) | s(bool,X269) = s(bool,'const.bool.BOUNDED_1'(s(bool,X265))) | s(bool,'T_0') = s(bool,X269) | s(bool,X265) = s(bool,g(s(bool,X265)))) ) | ($spl4 | $spl231)),
  inference(superposition,[],[f2617,f106445])).
fof(f118277,plain,(
  ( ! [X243,X241,X244,X242] : (s('type.pair.prod'(bool,X242),'const.pair.,_2'(s(bool,'F_0'),s(X242,X243))) != s('type.pair.prod'(bool,X242),'const.pair.,_2'(s(bool,X241),s(X242,X244))) | s(bool,X241) = s(bool,g(s(bool,X241)))) ) | $spl372),
  inference(cnf_transformation,[],[f118277_D])).
fof(f118277_D,plain,(
  ( ! [X243,X241,X244,X242] : (s('type.pair.prod'(bool,X242),'const.pair.,_2'(s(bool,'F_0'),s(X242,X243))) != s('type.pair.prod'(bool,X242),'const.pair.,_2'(s(bool,X241),s(X242,X244))) | s(bool,X241) = s(bool,g(s(bool,X241)))) ) <=> ~$spl372),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl372])])).
fof(f118276,plain,(
  ( ! [X243,X241,X244,X242,X245] : (s(bool,'T_0') = s(bool,X245) | s('type.pair.prod'(bool,X242),'const.pair.,_2'(s(bool,'F_0'),s(X242,X243))) != s('type.pair.prod'(bool,X242),'const.pair.,_2'(s(bool,X241),s(X242,X244))) | s(bool,X241) = s(bool,g(s(bool,X241)))) ) | ($spl4 | $spl224 | $spl231)),
  inference(forward_demodulation,[],[f118275,f538])).
fof(f118275,plain,(
  ( ! [X243,X241,X244,X242,X245] : (s('type.pair.prod'(bool,X242),'const.pair.,_2'(s(bool,'F_0'),s(X242,X243))) != s('type.pair.prod'(bool,X242),'const.pair.,_2'(s(bool,X241),s(X242,X244))) | s(bool,X245) = s(bool,'const.bool.BOUNDED_1'(s(bool,X241))) | s(bool,X241) = s(bool,g(s(bool,X241)))) ) | ($spl4 | $spl224 | $spl231)),
  inference(subsumption_resolution,[],[f117956,f112803])).
fof(f117956,plain,(
  ( ! [X243,X241,X244,X242,X245] : (s('type.pair.prod'(bool,X242),'const.pair.,_2'(s(bool,'F_0'),s(X242,X243))) != s('type.pair.prod'(bool,X242),'const.pair.,_2'(s(bool,X241),s(X242,X244))) | s(bool,X245) = s(bool,'const.bool.BOUNDED_1'(s(bool,X241))) | s(bool,'T_0') = s(bool,X245) | s(bool,X241) = s(bool,g(s(bool,X241)))) ) | ($spl4 | $spl231)),
  inference(superposition,[],[f2568,f106445])).
fof(f118270,plain,(
  ( ! [X222,X223,X224] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X223))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X222),s('type.list.list'(bool),X224))) | s(bool,X222) = s(bool,g(s(bool,X222)))) ) | $spl370),
  inference(cnf_transformation,[],[f118270_D])).
fof(f118270_D,plain,(
  ( ! [X222,X223,X224] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X223))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X222),s('type.list.list'(bool),X224))) | s(bool,X222) = s(bool,g(s(bool,X222)))) ) <=> ~$spl370),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl370])])).
fof(f118269,plain,(
  ( ! [X222,X225,X223,X224] : (s(bool,'T_0') = s(bool,X225) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X223))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X222),s('type.list.list'(bool),X224))) | s(bool,X222) = s(bool,g(s(bool,X222)))) ) | ($spl4 | $spl224 | $spl231)),
  inference(forward_demodulation,[],[f118268,f538])).
fof(f118268,plain,(
  ( ! [X222,X225,X223,X224] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X223))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X222),s('type.list.list'(bool),X224))) | s(bool,X225) = s(bool,'const.bool.BOUNDED_1'(s(bool,X222))) | s(bool,X222) = s(bool,g(s(bool,X222)))) ) | ($spl4 | $spl224 | $spl231)),
  inference(subsumption_resolution,[],[f117951,f112803])).
fof(f117951,plain,(
  ( ! [X222,X225,X223,X224] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X223))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X222),s('type.list.list'(bool),X224))) | s(bool,X225) = s(bool,'const.bool.BOUNDED_1'(s(bool,X222))) | s(bool,'T_0') = s(bool,X225) | s(bool,X222) = s(bool,g(s(bool,X222)))) ) | ($spl4 | $spl231)),
  inference(superposition,[],[f2529,f106445])).
fof(f114565,plain,(
  ( ! [X6,X7] : (s(bool,X6) != s(bool,X7) | s(bool,'T_0') = s(bool,X6) | s(bool,'F_0') = s(bool,X7)) ) | $spl368),
  inference(cnf_transformation,[],[f114565_D])).
fof(f114565_D,plain,(
  ( ! [X6,X7] : (s(bool,X6) != s(bool,X7) | s(bool,'T_0') = s(bool,X6) | s(bool,'F_0') = s(bool,X7)) ) <=> ~$spl368),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl368])])).
fof(f114566,plain,(
  ( ! [X10,X8,X9] : (s(bool,X9) != s(bool,X10) | s(bool,'F_0') = s(bool,X10) | p(s(bool,X8)) | s(bool,'T_0') = s(bool,X9)) ) | $spl366),
  inference(subsumption_resolution,[],[f114520,f547])).
fof(f114520,plain,(
  ( ! [X10,X8,X9] : (s(bool,X9) != s(bool,X10) | s(bool,'F_0') = s(bool,X10) | p(s(bool,X8)) | s(bool,'T_0') = s(bool,X8) | s(bool,'T_0') = s(bool,X9)) ) | $spl366),
  inference(superposition,[],[f114351,f1319])).
fof(f114564,plain,(
  ( ! [X6,X7,X5] : (s(bool,X6) != s(bool,X7) | s(bool,'F_0') = s(bool,X7) | p(s(bool,X5)) | s(bool,'T_0') = s(bool,X6)) ) | $spl366),
  inference(subsumption_resolution,[],[f114519,f547])).
fof(f114519,plain,(
  ( ! [X6,X7,X5] : (s(bool,X6) != s(bool,X7) | s(bool,'F_0') = s(bool,X7) | p(s(bool,X5)) | s(bool,'T_0') = s(bool,X6) | s(bool,'T_0') = s(bool,X5)) ) | $spl366),
  inference(superposition,[],[f114351,f1319])).
fof(f114351,plain,(
  ( ! [X410,X411] : (s(bool,X410) != s(bool,X411) | s(bool,'F_0') = s(bool,X410) | p(s(bool,X411))) ) | $spl366),
  inference(cnf_transformation,[],[f114351_D])).
fof(f114351_D,plain,(
  ( ! [X410,X411] : (s(bool,X410) != s(bool,X411) | s(bool,'F_0') = s(bool,X410) | p(s(bool,X411))) ) <=> ~$spl366),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl366])])).
fof(f114350,plain,(
  ( ! [X412,X410,X411] : (s(bool,'T_0') = s(bool,X412) | s(bool,X410) != s(bool,X411) | p(s(bool,X411)) | s(bool,'F_0') = s(bool,X410)) ) | ($spl4 | $spl224 | $spl231)),
  inference(forward_demodulation,[],[f114349,f538])).
fof(f114349,plain,(
  ( ! [X412,X410,X411] : (s(bool,X410) != s(bool,X411) | p(s(bool,X411)) | s(bool,X412) = s(bool,'const.bool.BOUNDED_1'(s(bool,X410))) | s(bool,'F_0') = s(bool,X410)) ) | ($spl4 | $spl224 | $spl231)),
  inference(subsumption_resolution,[],[f114085,f112803])).
fof(f114085,plain,(
  ( ! [X412,X410,X411] : (s(bool,X410) != s(bool,X411) | p(s(bool,X411)) | s(bool,X412) = s(bool,'const.bool.BOUNDED_1'(s(bool,X410))) | s(bool,'T_0') = s(bool,X412) | s(bool,'F_0') = s(bool,X410)) ) | ($spl4 | $spl231)),
  inference(superposition,[],[f7834,f106100])).
fof(f112786,plain,(
  ( ! [X850,X849] : (s(bool,'T_0') != s(bool,X849) | s(bool,X849) = s(bool,'const.bool.BOUNDED_1'(s(bool,X850)))) ) | $spl364),
  inference(cnf_transformation,[],[f112786_D])).
fof(f112786_D,plain,(
  ( ! [X850,X849] : (s(bool,'T_0') != s(bool,X849) | s(bool,X849) = s(bool,'const.bool.BOUNDED_1'(s(bool,X850)))) ) <=> ~$spl364),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl364])])).
fof(f112785,plain,(
  ( ! [X850,X848,X849] : (s(bool,'T_0') != s(bool,X849) | s(bool,'T_0') = s(bool,X848) | s(bool,X849) = s(bool,'const.bool.BOUNDED_1'(s(bool,X850)))) ) | ($spl224 | $spl238 | $spl240)),
  inference(forward_demodulation,[],[f111573,f34144])).
fof(f34144,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'F_0'))) | $spl238),
  inference(cnf_transformation,[],[f34144_D])).
fof(f34144_D,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'F_0'))) <=> ~$spl238),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl238])])).
fof(f111573,plain,(
  ( ! [X850,X848,X849] : (s(bool,X849) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X848) | s(bool,X849) = s(bool,'const.bool.BOUNDED_1'(s(bool,X850)))) ) | ($spl224 | $spl240)),
  inference(duplicate_literal_removal,[],[f111130])).
fof(f111130,plain,(
  ( ! [X850,X848,X849] : (s(bool,X849) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X848) | s(bool,X849) = s(bool,'const.bool.BOUNDED_1'(s(bool,X850))) | s(bool,'T_0') = s(bool,X848)) ) | ($spl224 | $spl240)),
  inference(superposition,[],[f34146,f33535])).
fof(f112779,plain,(
  ( ! [X476,X472,X474,X471,X475,X473] : (s('type.pair.prod'(X472,bool),'const.pair.,_2'(s(X472,X473),s(bool,X471))) != s('type.pair.prod'(X472,bool),'const.pair.,_2'(s(X472,X474),s(bool,X475))) | s(bool,X471) = s(bool,'const.bool.BOUNDED_1'(s(bool,X476))) | s(bool,'F_0') = s(bool,X475)) ) | $spl362),
  inference(cnf_transformation,[],[f112779_D])).
fof(f112779_D,plain,(
  ( ! [X476,X472,X474,X471,X475,X473] : (s('type.pair.prod'(X472,bool),'const.pair.,_2'(s(X472,X473),s(bool,X471))) != s('type.pair.prod'(X472,bool),'const.pair.,_2'(s(X472,X474),s(bool,X475))) | s(bool,X471) = s(bool,'const.bool.BOUNDED_1'(s(bool,X476))) | s(bool,'F_0') = s(bool,X475)) ) <=> ~$spl362),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl362])])).
fof(f111584,plain,(
  ( ! [X476,X472,X474,X471,X475,X473,X470] : (s('type.pair.prod'(X472,bool),'const.pair.,_2'(s(X472,X473),s(bool,X471))) != s('type.pair.prod'(X472,bool),'const.pair.,_2'(s(X472,X474),s(bool,X475))) | s(bool,'F_0') = s(bool,X475) | s(bool,'T_0') = s(bool,X470) | s(bool,X471) = s(bool,'const.bool.BOUNDED_1'(s(bool,X476)))) ) | $spl224),
  inference(duplicate_literal_removal,[],[f111041])).
fof(f111041,plain,(
  ( ! [X476,X472,X474,X471,X475,X473,X470] : (s('type.pair.prod'(X472,bool),'const.pair.,_2'(s(X472,X473),s(bool,X471))) != s('type.pair.prod'(X472,bool),'const.pair.,_2'(s(X472,X474),s(bool,X475))) | s(bool,'F_0') = s(bool,X475) | s(bool,'T_0') = s(bool,X470) | s(bool,X471) = s(bool,'const.bool.BOUNDED_1'(s(bool,X476))) | s(bool,'T_0') = s(bool,X470)) ) | $spl224),
  inference(superposition,[],[f2618,f33535])).
fof(f112778,plain,(
  ( ! [X441,X438,X440,X442,X437,X439] : (s('type.pair.prod'(bool,X438),'const.pair.,_2'(s(bool,X437),s(X438,X439))) != s('type.pair.prod'(bool,X438),'const.pair.,_2'(s(bool,X440),s(X438,X441))) | s(bool,X437) = s(bool,'const.bool.BOUNDED_1'(s(bool,X442))) | s(bool,'F_0') = s(bool,X440)) ) | $spl360),
  inference(cnf_transformation,[],[f112778_D])).
fof(f112778_D,plain,(
  ( ! [X441,X438,X440,X442,X437,X439] : (s('type.pair.prod'(bool,X438),'const.pair.,_2'(s(bool,X437),s(X438,X439))) != s('type.pair.prod'(bool,X438),'const.pair.,_2'(s(bool,X440),s(X438,X441))) | s(bool,X437) = s(bool,'const.bool.BOUNDED_1'(s(bool,X442))) | s(bool,'F_0') = s(bool,X440)) ) <=> ~$spl360),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl360])])).
fof(f111585,plain,(
  ( ! [X441,X436,X438,X440,X442,X437,X439] : (s('type.pair.prod'(bool,X438),'const.pair.,_2'(s(bool,X437),s(X438,X439))) != s('type.pair.prod'(bool,X438),'const.pair.,_2'(s(bool,X440),s(X438,X441))) | s(bool,'F_0') = s(bool,X440) | s(bool,'T_0') = s(bool,X436) | s(bool,X437) = s(bool,'const.bool.BOUNDED_1'(s(bool,X442)))) ) | $spl224),
  inference(duplicate_literal_removal,[],[f111036])).
fof(f111036,plain,(
  ( ! [X441,X436,X438,X440,X442,X437,X439] : (s('type.pair.prod'(bool,X438),'const.pair.,_2'(s(bool,X437),s(X438,X439))) != s('type.pair.prod'(bool,X438),'const.pair.,_2'(s(bool,X440),s(X438,X441))) | s(bool,'F_0') = s(bool,X440) | s(bool,'T_0') = s(bool,X436) | s(bool,X437) = s(bool,'const.bool.BOUNDED_1'(s(bool,X442))) | s(bool,'T_0') = s(bool,X436)) ) | $spl224),
  inference(superposition,[],[f2569,f33535])).
fof(f112777,plain,(
  ( ! [X408,X410,X407,X409,X411] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X407),s('type.list.list'(bool),X408))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X409),s('type.list.list'(bool),X410))) | s(bool,X407) = s(bool,'const.bool.BOUNDED_1'(s(bool,X411))) | s(bool,'F_0') = s(bool,X409)) ) | $spl358),
  inference(cnf_transformation,[],[f112777_D])).
fof(f112777_D,plain,(
  ( ! [X408,X410,X407,X409,X411] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X407),s('type.list.list'(bool),X408))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X409),s('type.list.list'(bool),X410))) | s(bool,X407) = s(bool,'const.bool.BOUNDED_1'(s(bool,X411))) | s(bool,'F_0') = s(bool,X409)) ) <=> ~$spl358),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl358])])).
fof(f111586,plain,(
  ( ! [X408,X410,X407,X409,X411,X406] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X407),s('type.list.list'(bool),X408))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X409),s('type.list.list'(bool),X410))) | s(bool,'F_0') = s(bool,X409) | s(bool,'T_0') = s(bool,X406) | s(bool,X407) = s(bool,'const.bool.BOUNDED_1'(s(bool,X411)))) ) | $spl224),
  inference(duplicate_literal_removal,[],[f111031])).
fof(f111031,plain,(
  ( ! [X408,X410,X407,X409,X411,X406] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X407),s('type.list.list'(bool),X408))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X409),s('type.list.list'(bool),X410))) | s(bool,'F_0') = s(bool,X409) | s(bool,'T_0') = s(bool,X406) | s(bool,X407) = s(bool,'const.bool.BOUNDED_1'(s(bool,X411))) | s(bool,'T_0') = s(bool,X406)) ) | $spl224),
  inference(superposition,[],[f2530,f33535])).
fof(f112531,plain,(
  ( ! [X982,X979,X983] : (s(bool,X979) = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | s(bool,X979) = s(bool,X982) | s(bool,X982) = s(bool,'const.bool.BOUNDED_1'(s(bool,X983)))) ) | $spl356),
  inference(cnf_transformation,[],[f112531_D])).
fof(f112531_D,plain,(
  ( ! [X982,X979,X983] : (s(bool,X979) = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | s(bool,X979) = s(bool,X982) | s(bool,X982) = s(bool,'const.bool.BOUNDED_1'(s(bool,X983)))) ) <=> ~$spl356),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl356])])).
fof(f106723,plain,(
  ( ! [X377,X376,X378] : (s('type.pair.prod'(X376,bool),'const.pair.,_2'(s(X376,X377),s(bool,'T_0'))) != s('type.pair.prod'(X376,bool),'const.pair.,_2'(s(X376,X378),s(bool,'T_0')))) ) | $spl340),
  inference(cnf_transformation,[],[f106723_D])).
fof(f106723_D,plain,(
  ( ! [X377,X376,X378] : (s('type.pair.prod'(X376,bool),'const.pair.,_2'(s(X376,X377),s(bool,'T_0'))) != s('type.pair.prod'(X376,bool),'const.pair.,_2'(s(X376,X378),s(bool,'T_0')))) ) <=> ~$spl340),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl340])])).
fof(f110003,plain,(
  ( ! [X990,X994,X992,X991,X995,X993] : (s('type.pair.prod'(X991,bool),'const.pair.,_2'(s(X991,X992),s(bool,'T_0'))) != s('type.pair.prod'(X991,bool),'const.pair.,_2'(s(X991,X993),s(bool,'T_0'))) | s(bool,X990) = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | s(bool,X994) = s(bool,'const.bool.BOUNDED_1'(s(bool,X995))) | s(bool,X990) = s(bool,X994)) ) | ($spl8 | $spl224)),
  inference(superposition,[],[f81962,f33535])).
fof(f81962,plain,(
  ( ! [X325,X323,X324,X322] : (s('type.pair.prod'(X322,bool),'const.pair.,_2'(s(X322,X325),s(bool,'T_0'))) != s('type.pair.prod'(X322,bool),'const.pair.,_2'(s(X322,X323),s(bool,X324))) | s(bool,X324) = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl8),
  inference(superposition,[],[f651,f80297])).
fof(f106722,plain,(
  ( ! [X349,X347,X348] : (s('type.pair.prod'(bool,X347),'const.pair.,_2'(s(bool,'T_0'),s(X347,X348))) != s('type.pair.prod'(bool,X347),'const.pair.,_2'(s(bool,'T_0'),s(X347,X349)))) ) | $spl338),
  inference(cnf_transformation,[],[f106722_D])).
fof(f106722_D,plain,(
  ( ! [X349,X347,X348] : (s('type.pair.prod'(bool,X347),'const.pair.,_2'(s(bool,'T_0'),s(X347,X348))) != s('type.pair.prod'(bool,X347),'const.pair.,_2'(s(bool,'T_0'),s(X347,X349)))) ) <=> ~$spl338),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl338])])).
fof(f110002,plain,(
  ( ! [X984,X988,X987,X985,X989,X986] : (s('type.pair.prod'(bool,X985),'const.pair.,_2'(s(bool,'T_0'),s(X985,X986))) != s('type.pair.prod'(bool,X985),'const.pair.,_2'(s(bool,'T_0'),s(X985,X987))) | s(bool,X984) = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | s(bool,X988) = s(bool,'const.bool.BOUNDED_1'(s(bool,X989))) | s(bool,X984) = s(bool,X988)) ) | ($spl8 | $spl224)),
  inference(superposition,[],[f81959,f33535])).
fof(f81959,plain,(
  ( ! [X313,X310,X312,X311] : (s('type.pair.prod'(bool,X310),'const.pair.,_2'(s(bool,'T_0'),s(X310,X313))) != s('type.pair.prod'(bool,X310),'const.pair.,_2'(s(bool,X311),s(X310,X312))) | s(bool,X311) = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl8),
  inference(superposition,[],[f650,f80297])).
fof(f19466,plain,(
  ( ! [X4,X5] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X4))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X5)))) ) | $spl202),
  inference(cnf_transformation,[],[f19466_D])).
fof(f19466_D,plain,(
  ( ! [X4,X5] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X4))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X5)))) ) <=> ~$spl202),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl202])])).
fof(f110001,plain,(
  ( ! [X982,X980,X979,X983,X981] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X980))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X981))) | s(bool,X979) = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | s(bool,X982) = s(bool,'const.bool.BOUNDED_1'(s(bool,X983))) | s(bool,X979) = s(bool,X982)) ) | ($spl8 | $spl224)),
  inference(superposition,[],[f81954,f33535])).
fof(f81954,plain,(
  ( ! [X294,X296,X295] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X294))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X295),s('type.list.list'(bool),X296))) | s(bool,X295) = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl8),
  inference(superposition,[],[f606,f80297])).
fof(f112302,plain,(
  ( ! [X30,X31,X29,X27] : (s(bool,X29) = s(bool,'const.bool.BOUNDED_1'(s(bool,X30))) | s(bool,X27) = s(bool,'const.bool.BOUNDED_1'(s(bool,X31))) | s(bool,X27) = s(bool,X29)) ) | $spl348),
  inference(cnf_transformation,[],[f112302_D])).
fof(f112302_D,plain,(
  ( ! [X30,X31,X29,X27] : (s(bool,X29) = s(bool,'const.bool.BOUNDED_1'(s(bool,X30))) | s(bool,X27) = s(bool,'const.bool.BOUNDED_1'(s(bool,X31))) | s(bool,X27) = s(bool,X29)) ) <=> ~$spl348),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl348])])).
fof(f109876,plain,(
  ( ! [X484,X486,X488,X490,X485,X487,X489] : (s('type.pair.prod'(X485,bool),'const.pair.,_2'(s(X485,X486),s(bool,'T_0'))) != s('type.pair.prod'(X485,bool),'const.pair.,_2'(s(X485,X487),s(bool,'T_0'))) | s(bool,X484) = s(bool,'const.bool.BOUNDED_1'(s(bool,X488))) | s(bool,X489) = s(bool,'const.bool.BOUNDED_1'(s(bool,X490))) | s(bool,X484) = s(bool,X489)) ) | $spl224),
  inference(superposition,[],[f2621,f33535])).
fof(f112528,plain,(
  ( ! [X412,X416,X415] : (s(bool,X412) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56))) | s(bool,X412) = s(bool,X415) | s(bool,X415) = s(bool,'const.bool.BOUNDED_1'(s(bool,X416)))) ) | $spl354),
  inference(cnf_transformation,[],[f112528_D])).
fof(f112528_D,plain,(
  ( ! [X412,X416,X415] : (s(bool,X412) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56))) | s(bool,X412) = s(bool,X415) | s(bool,X415) = s(bool,'const.bool.BOUNDED_1'(s(bool,X416)))) ) <=> ~$spl354),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl354])])).
fof(f109875,plain,(
  ( ! [X478,X480,X482,X479,X481,X483] : (s('type.pair.prod'(X479,bool),'const.pair.,_2'(s(X479,X480),s(bool,'T_0'))) != s('type.pair.prod'(X479,bool),'const.pair.,_2'(s(X479,X481),s(bool,'T_0'))) | s(bool,X478) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56))) | s(bool,X482) = s(bool,'const.bool.BOUNDED_1'(s(bool,X483))) | s(bool,X478) = s(bool,X482)) ) | ($spl6 | $spl224)),
  inference(superposition,[],[f2619,f33535])).
fof(f2619,plain,(
  ( ! [X14,X17,X15,X16] : (s('type.pair.prod'(X14,bool),'const.pair.,_2'(s(X14,X15),s(bool,'T_0'))) != s('type.pair.prod'(X14,bool),'const.pair.,_2'(s(X14,X16),s(bool,X17))) | s(bool,X17) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)))) ) | $spl6),
  inference(superposition,[],[f651,f1111])).
fof(f109871,plain,(
  ( ! [X453,X455,X451,X452,X454,X450,X456] : (s('type.pair.prod'(bool,X451),'const.pair.,_2'(s(bool,'T_0'),s(X451,X452))) != s('type.pair.prod'(bool,X451),'const.pair.,_2'(s(bool,'T_0'),s(X451,X453))) | s(bool,X450) = s(bool,'const.bool.BOUNDED_1'(s(bool,X454))) | s(bool,X455) = s(bool,'const.bool.BOUNDED_1'(s(bool,X456))) | s(bool,X450) = s(bool,X455)) ) | $spl224),
  inference(superposition,[],[f2572,f33535])).
fof(f109870,plain,(
  ( ! [X445,X447,X449,X444,X446,X448] : (s('type.pair.prod'(bool,X445),'const.pair.,_2'(s(bool,'T_0'),s(X445,X446))) != s('type.pair.prod'(bool,X445),'const.pair.,_2'(s(bool,'T_0'),s(X445,X447))) | s(bool,X444) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56))) | s(bool,X448) = s(bool,'const.bool.BOUNDED_1'(s(bool,X449))) | s(bool,X444) = s(bool,X448)) ) | ($spl6 | $spl224)),
  inference(superposition,[],[f2570,f33535])).
fof(f2570,plain,(
  ( ! [X14,X17,X15,X16] : (s('type.pair.prod'(bool,X14),'const.pair.,_2'(s(bool,'T_0'),s(X14,X15))) != s('type.pair.prod'(bool,X14),'const.pair.,_2'(s(bool,X16),s(X14,X17))) | s(bool,X16) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)))) ) | $spl6),
  inference(superposition,[],[f650,f1111])).
fof(f109866,plain,(
  ( ! [X420,X422,X418,X421,X417,X419] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X418))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X419))) | s(bool,X417) = s(bool,'const.bool.BOUNDED_1'(s(bool,X420))) | s(bool,X421) = s(bool,'const.bool.BOUNDED_1'(s(bool,X422))) | s(bool,X417) = s(bool,X421)) ) | $spl224),
  inference(superposition,[],[f2533,f33535])).
fof(f109865,plain,(
  ( ! [X412,X414,X416,X413,X415] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X413))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X414))) | s(bool,X412) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56))) | s(bool,X415) = s(bool,'const.bool.BOUNDED_1'(s(bool,X416))) | s(bool,X412) = s(bool,X415)) ) | ($spl6 | $spl224)),
  inference(superposition,[],[f2531,f33535])).
fof(f2531,plain,(
  ( ! [X12,X13,X11] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X11))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X12),s('type.list.list'(bool),X13))) | s(bool,X12) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)))) ) | $spl6),
  inference(superposition,[],[f606,f1111])).
fof(f112201,plain,(
  ( ! [X45,X43,X41,X44,X42] : (s(bool,X42) = s(bool,X43) | s(bool,X43) = s(bool,'const.bool.BOUNDED_1'(s(bool,X44))) | s(bool,'T_0') = s(bool,X41) | s(bool,X42) = s(bool,'const.bool.BOUNDED_1'(s(bool,X45)))) ) | $spl224),
  inference(duplicate_literal_removal,[],[f108583])).
fof(f108583,plain,(
  ( ! [X45,X43,X41,X44,X42] : (s(bool,X42) = s(bool,X43) | s(bool,X43) = s(bool,'const.bool.BOUNDED_1'(s(bool,X44))) | s(bool,'T_0') = s(bool,X41) | s(bool,X42) = s(bool,'const.bool.BOUNDED_1'(s(bool,X45))) | s(bool,'T_0') = s(bool,X41)) ) | $spl224),
  inference(superposition,[],[f33535,f33535])).
fof(f112225,plain,(
  ( ! [X47,X50,X48,X46,X49] : (s(bool,'T_0') = s(bool,X47) | s(bool,X46) = s(bool,'const.bool.BOUNDED_1'(s(bool,X48))) | s(bool,X49) = s(bool,'const.bool.BOUNDED_1'(s(bool,X50))) | s(bool,X46) = s(bool,X49)) ) | $spl224),
  inference(duplicate_literal_removal,[],[f108552])).
fof(f108552,plain,(
  ( ! [X47,X50,X48,X46,X49] : (s(bool,'T_0') = s(bool,X47) | s(bool,X46) = s(bool,'const.bool.BOUNDED_1'(s(bool,X48))) | s(bool,'T_0') = s(bool,X47) | s(bool,X49) = s(bool,'const.bool.BOUNDED_1'(s(bool,X50))) | s(bool,X46) = s(bool,X49)) ) | $spl224),
  inference(superposition,[],[f33535,f33535])).
fof(f112309,plain,(
  ( ! [X59,X60] : (s(bool,X59) = s(bool,'const.bool.BOUNDED_1'(s(bool,X60))) | s(bool,X59) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl352),
  inference(cnf_transformation,[],[f112309_D])).
fof(f112309_D,plain,(
  ( ! [X59,X60] : (s(bool,X59) = s(bool,'const.bool.BOUNDED_1'(s(bool,X60))) | s(bool,X59) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) ) <=> ~$spl352),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl352])])).
fof(f112235,plain,(
  ( ! [X59,X60,X58] : (s(bool,'T_0') = s(bool,X58) | s(bool,X59) = s(bool,'const.bool.BOUNDED_1'(s(bool,X60))) | s(bool,X59) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) ) | ($spl1 | $spl224)),
  inference(duplicate_literal_removal,[],[f108536])).
fof(f108536,plain,(
  ( ! [X59,X60,X58] : (s(bool,'T_0') = s(bool,X58) | s(bool,X59) = s(bool,'const.bool.BOUNDED_1'(s(bool,X60))) | s(bool,X59) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X58)) ) | ($spl1 | $spl224)),
  inference(superposition,[],[f33535,f81281])).
fof(f81281,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X0)) ) | $spl1),
  inference(subsumption_resolution,[],[f81163,f531])).
fof(f81163,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s(bool,X0) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X0)) ) | $spl1),
  inference(superposition,[],[f1040,f1319])).
fof(f112303,plain,(
  ( ! [X50,X49] : (s(bool,X49) = s(bool,'const.bool.BOUNDED_1'(s(bool,X50))) | s(bool,'F_0') = s(bool,X49)) ) | $spl350),
  inference(cnf_transformation,[],[f112303_D])).
fof(f112303_D,plain,(
  ( ! [X50,X49] : (s(bool,X49) = s(bool,'const.bool.BOUNDED_1'(s(bool,X50))) | s(bool,'F_0') = s(bool,X49)) ) <=> ~$spl350),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl350])])).
fof(f112237,plain,(
  ( ! [X50,X48,X49] : (s(bool,'T_0') = s(bool,X48) | s(bool,X49) = s(bool,'const.bool.BOUNDED_1'(s(bool,X50))) | s(bool,'F_0') = s(bool,X49)) ) | $spl224),
  inference(duplicate_literal_removal,[],[f108532])).
fof(f108532,plain,(
  ( ! [X50,X48,X49] : (s(bool,'T_0') = s(bool,X48) | s(bool,X49) = s(bool,'const.bool.BOUNDED_1'(s(bool,X50))) | s(bool,'F_0') = s(bool,X49) | s(bool,'T_0') = s(bool,X48)) ) | $spl224),
  inference(superposition,[],[f33535,f539])).
fof(f112238,plain,(
  ( ! [X30,X28,X31,X29,X27] : (s(bool,'T_0') = s(bool,X28) | s(bool,X29) = s(bool,'const.bool.BOUNDED_1'(s(bool,X30))) | s(bool,X27) = s(bool,X29) | s(bool,X27) = s(bool,'const.bool.BOUNDED_1'(s(bool,X31)))) ) | $spl224),
  inference(duplicate_literal_removal,[],[f108528])).
fof(f108528,plain,(
  ( ! [X30,X28,X31,X29,X27] : (s(bool,'T_0') = s(bool,X28) | s(bool,X29) = s(bool,'const.bool.BOUNDED_1'(s(bool,X30))) | s(bool,X27) = s(bool,X29) | s(bool,X27) = s(bool,'const.bool.BOUNDED_1'(s(bool,X31))) | s(bool,'T_0') = s(bool,X28)) ) | $spl224),
  inference(superposition,[],[f33535,f33535])).
fof(f93019,plain,(
  ( ! [X985,X986] : (s(fun(bool,bool),X985) = s(fun(bool,bool),X986)) ) | $spl256),
  inference(cnf_transformation,[],[f93019_D])).
fof(f93019_D,plain,(
  ( ! [X985,X986] : (s(fun(bool,bool),X985) = s(fun(bool,bool),X986)) ) <=> ~$spl256),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl256])])).
fof(f108395,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | $spl347),
  inference(cnf_transformation,[],[f108395_D])).
fof(f108395_D,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) <=> ~$spl347),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl347])])).
fof(f108393,plain,(
  ( ! [X932,X931] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X931) = s(fun(bool,bool),X932)) ) | ($spl232 | $spl258)),
  inference(forward_demodulation,[],[f108330,f93020])).
fof(f108330,plain,(
  ( ! [X932,X931] : (s(bool,f(s(bool,'T_0'))) != s(bool,g(s(bool,'T_0'))) | s(fun(bool,bool),X931) = s(fun(bool,bool),X932)) ) | $spl232),
  inference(duplicate_literal_removal,[],[f108264])).
fof(f108264,plain,(
  ( ! [X932,X931] : (s(bool,f(s(bool,'T_0'))) != s(bool,g(s(bool,'T_0'))) | s(fun(bool,bool),X931) = s(fun(bool,bool),X932) | s(fun(bool,bool),X931) = s(fun(bool,bool),X932)) ) | $spl232),
  inference(superposition,[],[f649,f34140])).
fof(f106864,plain,(
  ( ! [X2062,X2063,X2061] : (s(fun(bool,bool),X2061) = s(fun(bool,bool),X2062) | s(bool,X2063) = s(bool,sK66(X2061,X2062,bool,bool)) | s(bool,X2063) = s(bool,'const.bool.BOUNDED_1'(s(bool,X2063))) | s(bool,'T_0') = s(bool,g(s(bool,sK66(X2061,X2062,bool,bool))))) ) | $spl344),
  inference(cnf_transformation,[],[f106864_D])).
fof(f106864_D,plain,(
  ( ! [X2062,X2063,X2061] : (s(fun(bool,bool),X2061) = s(fun(bool,bool),X2062) | s(bool,X2063) = s(bool,sK66(X2061,X2062,bool,bool)) | s(bool,X2063) = s(bool,'const.bool.BOUNDED_1'(s(bool,X2063))) | s(bool,'T_0') = s(bool,g(s(bool,sK66(X2061,X2062,bool,bool))))) ) <=> ~$spl344),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl344])])).
fof(f36230,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | $spl245),
  inference(cnf_transformation,[],[f36230_D])).
fof(f36230_D,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) <=> ~$spl245),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl245])])).
fof(f105663,plain,(
  ( ! [X2062,X2063,X2061] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X2061) = s(fun(bool,bool),X2062) | s(bool,'T_0') = s(bool,g(s(bool,sK66(X2061,X2062,bool,bool)))) | s(bool,X2063) = s(bool,'const.bool.BOUNDED_1'(s(bool,X2063))) | s(bool,X2063) = s(bool,sK66(X2061,X2062,bool,bool))) )),
  inference(superposition,[],[f2877,f7837])).
fof(f106726,plain,(
  ( ! [X767,X770] : (s(bool,X767) = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | s(bool,X767) = s(bool,X770) | s(bool,X770) = s(bool,'const.bool.BOUNDED_1'(s(bool,X770)))) ) | $spl342),
  inference(cnf_transformation,[],[f106726_D])).
fof(f106726_D,plain,(
  ( ! [X767,X770] : (s(bool,X767) = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | s(bool,X767) = s(bool,X770) | s(bool,X770) = s(bool,'const.bool.BOUNDED_1'(s(bool,X770)))) ) <=> ~$spl342),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl342])])).
fof(f105259,plain,(
  ( ! [X779,X777,X778,X776,X780] : (s('type.pair.prod'(X777,bool),'const.pair.,_2'(s(X777,X778),s(bool,'T_0'))) != s('type.pair.prod'(X777,bool),'const.pair.,_2'(s(X777,X779),s(bool,'T_0'))) | s(bool,X776) = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | s(bool,X780) = s(bool,'const.bool.BOUNDED_1'(s(bool,X780))) | s(bool,X776) = s(bool,X780)) ) | $spl8),
  inference(superposition,[],[f81962,f7837])).
fof(f105258,plain,(
  ( ! [X771,X775,X773,X774,X772] : (s('type.pair.prod'(bool,X772),'const.pair.,_2'(s(bool,'T_0'),s(X772,X773))) != s('type.pair.prod'(bool,X772),'const.pair.,_2'(s(bool,'T_0'),s(X772,X774))) | s(bool,X771) = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | s(bool,X775) = s(bool,'const.bool.BOUNDED_1'(s(bool,X775))) | s(bool,X771) = s(bool,X775)) ) | $spl8),
  inference(superposition,[],[f81959,f7837])).
fof(f105257,plain,(
  ( ! [X767,X769,X770,X768] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X768))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X769))) | s(bool,X767) = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | s(bool,X770) = s(bool,'const.bool.BOUNDED_1'(s(bool,X770))) | s(bool,X767) = s(bool,X770)) ) | $spl8),
  inference(superposition,[],[f81954,f7837])).
fof(f106721,plain,(
  ( ! [X327,X323,X326] : (s(bool,X323) = s(bool,'const.bool.BOUNDED_1'(s(bool,X326))) | s(bool,X323) = s(bool,X327) | s(bool,X327) = s(bool,'const.bool.BOUNDED_1'(s(bool,X327)))) ) | $spl336),
  inference(cnf_transformation,[],[f106721_D])).
fof(f106721_D,plain,(
  ( ! [X327,X323,X326] : (s(bool,X323) = s(bool,'const.bool.BOUNDED_1'(s(bool,X326))) | s(bool,X323) = s(bool,X327) | s(bool,X327) = s(bool,'const.bool.BOUNDED_1'(s(bool,X327)))) ) <=> ~$spl336),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl336])])).
fof(f105126,plain,(
  ( ! [X383,X385,X380,X382,X384,X381] : (s('type.pair.prod'(X381,bool),'const.pair.,_2'(s(X381,X382),s(bool,'T_0'))) != s('type.pair.prod'(X381,bool),'const.pair.,_2'(s(X381,X383),s(bool,'T_0'))) | s(bool,X380) = s(bool,'const.bool.BOUNDED_1'(s(bool,X384))) | s(bool,X385) = s(bool,'const.bool.BOUNDED_1'(s(bool,X385))) | s(bool,X380) = s(bool,X385)) )),
  inference(superposition,[],[f2621,f7837])).
fof(f106720,plain,(
  ( ! [X322,X319] : (s(bool,X319) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56))) | s(bool,X319) = s(bool,X322) | s(bool,X322) = s(bool,'const.bool.BOUNDED_1'(s(bool,X322)))) ) | $spl334),
  inference(cnf_transformation,[],[f106720_D])).
fof(f106720_D,plain,(
  ( ! [X322,X319] : (s(bool,X319) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56))) | s(bool,X319) = s(bool,X322) | s(bool,X322) = s(bool,'const.bool.BOUNDED_1'(s(bool,X322)))) ) <=> ~$spl334),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl334])])).
fof(f105125,plain,(
  ( ! [X377,X379,X376,X378,X375] : (s('type.pair.prod'(X376,bool),'const.pair.,_2'(s(X376,X377),s(bool,'T_0'))) != s('type.pair.prod'(X376,bool),'const.pair.,_2'(s(X376,X378),s(bool,'T_0'))) | s(bool,X375) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56))) | s(bool,X379) = s(bool,'const.bool.BOUNDED_1'(s(bool,X379))) | s(bool,X375) = s(bool,X379)) ) | $spl6),
  inference(superposition,[],[f2619,f7837])).
fof(f105121,plain,(
  ( ! [X356,X352,X354,X351,X353,X355] : (s('type.pair.prod'(bool,X352),'const.pair.,_2'(s(bool,'T_0'),s(X352,X353))) != s('type.pair.prod'(bool,X352),'const.pair.,_2'(s(bool,'T_0'),s(X352,X354))) | s(bool,X351) = s(bool,'const.bool.BOUNDED_1'(s(bool,X355))) | s(bool,X356) = s(bool,'const.bool.BOUNDED_1'(s(bool,X356))) | s(bool,X351) = s(bool,X356)) )),
  inference(superposition,[],[f2572,f7837])).
fof(f105120,plain,(
  ( ! [X350,X346,X349,X347,X348] : (s('type.pair.prod'(bool,X347),'const.pair.,_2'(s(bool,'T_0'),s(X347,X348))) != s('type.pair.prod'(bool,X347),'const.pair.,_2'(s(bool,'T_0'),s(X347,X349))) | s(bool,X346) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56))) | s(bool,X350) = s(bool,'const.bool.BOUNDED_1'(s(bool,X350))) | s(bool,X346) = s(bool,X350)) ) | $spl6),
  inference(superposition,[],[f2570,f7837])).
fof(f105116,plain,(
  ( ! [X325,X327,X323,X324,X326] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X324))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X325))) | s(bool,X323) = s(bool,'const.bool.BOUNDED_1'(s(bool,X326))) | s(bool,X327) = s(bool,'const.bool.BOUNDED_1'(s(bool,X327))) | s(bool,X323) = s(bool,X327)) )),
  inference(superposition,[],[f2533,f7837])).
fof(f105115,plain,(
  ( ! [X321,X320,X322,X319] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X320))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X321))) | s(bool,X319) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56))) | s(bool,X322) = s(bool,'const.bool.BOUNDED_1'(s(bool,X322))) | s(bool,X319) = s(bool,X322)) ) | $spl6),
  inference(superposition,[],[f2531,f7837])).
fof(f34140,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,sK66(X0,X1,bool,bool)) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1)) ) | $spl232),
  inference(cnf_transformation,[],[f34140_D])).
fof(f34140_D,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,sK66(X0,X1,bool,bool)) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1)) ) <=> ~$spl232),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl232])])).
fof(f106546,plain,(
  ( ! [X2079] : (s(bool,'F_0') != s(bool,f(s(bool,X2079))) | s(bool,X2079) = s(bool,'const.bool.BOUNDED_1'(s(bool,X2079)))) ) | $spl332),
  inference(cnf_transformation,[],[f106546_D])).
fof(f106546_D,plain,(
  ( ! [X2079] : (s(bool,'F_0') != s(bool,f(s(bool,X2079))) | s(bool,X2079) = s(bool,'const.bool.BOUNDED_1'(s(bool,X2079)))) ) <=> ~$spl332),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl332])])).
fof(f106545,plain,(
  ( ! [X2078,X2079,X2077] : (s(bool,'F_0') != s(bool,f(s(bool,X2079))) | s(fun(bool,bool),X2077) = s(fun(bool,bool),X2078) | s(bool,X2079) = s(bool,'const.bool.BOUNDED_1'(s(bool,X2079))) | s(bool,'T_0') = s(bool,sK66(X2077,X2078,bool,bool))) ) | $spl231),
  inference(subsumption_resolution,[],[f104587,f100108])).
fof(f104587,plain,(
  ( ! [X2078,X2079,X2077] : (s(bool,'F_0') != s(bool,f(s(bool,X2079))) | s(fun(bool,bool),X2077) = s(fun(bool,bool),X2078) | s(bool,'T_0') = s(bool,g(s(bool,sK66(X2077,X2078,bool,bool)))) | s(bool,X2079) = s(bool,'const.bool.BOUNDED_1'(s(bool,X2079))) | s(bool,'T_0') = s(bool,sK66(X2077,X2078,bool,bool))) )),
  inference(superposition,[],[f2877,f7837])).
fof(f99635,plain,(
  ( ! [X10] : (s(bool,'F_0') != s(bool,f(s(bool,X10))) | s(bool,'T_0') = s(bool,X10)) ) | $spl318),
  inference(cnf_transformation,[],[f99635_D])).
fof(f99635_D,plain,(
  ( ! [X10] : (s(bool,'F_0') != s(bool,f(s(bool,X10))) | s(bool,'T_0') = s(bool,X10)) ) <=> ~$spl318),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl318])])).
fof(f106193,plain,(
  ( ! [X2078,X2079,X2077] : (s(bool,'T_0') = s(bool,sK66(X2077,X2078,bool,bool)) | s(bool,'F_0') != s(bool,f(s(bool,X2079))) | s(fun(bool,bool),X2077) = s(fun(bool,bool),X2078) | s(bool,'T_0') = s(bool,X2079)) ) | $spl231),
  inference(subsumption_resolution,[],[f106192,f100108])).
fof(f106192,plain,(
  ( ! [X2078,X2079,X2077] : (s(bool,'T_0') = s(bool,sK66(X2077,X2078,bool,bool)) | s(bool,'F_0') != s(bool,f(s(bool,X2079))) | s(fun(bool,bool),X2077) = s(fun(bool,bool),X2078) | s(bool,'T_0') = s(bool,g(s(bool,sK66(X2077,X2078,bool,bool)))) | s(bool,'T_0') = s(bool,X2079)) )),
  inference(forward_demodulation,[],[f103938,f538])).
fof(f103938,plain,(
  ( ! [X2078,X2079,X2077] : (s(bool,'F_0') != s(bool,f(s(bool,X2079))) | s(fun(bool,bool),X2077) = s(fun(bool,bool),X2078) | s(bool,'T_0') = s(bool,g(s(bool,sK66(X2077,X2078,bool,bool)))) | s(bool,sK66(X2077,X2078,bool,bool)) = s(bool,'const.bool.BOUNDED_1'(s(bool,sK66(X2077,X2078,bool,bool)))) | s(bool,'T_0') = s(bool,X2079)) )),
  inference(superposition,[],[f2877,f7837])).
fof(f106099,plain,(
  ( ! [X26] : (s(bool,X26) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,X26) = s(bool,'const.bool.BOUNDED_1'(s(bool,X26)))) ) | $spl330),
  inference(cnf_transformation,[],[f106099_D])).
fof(f106099_D,plain,(
  ( ! [X26] : (s(bool,X26) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,X26) = s(bool,'const.bool.BOUNDED_1'(s(bool,X26)))) ) <=> ~$spl330),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl330])])).
fof(f106026,plain,(
  ( ! [X30,X29] : (s(bool,'T_0') = s(bool,X29) | s(bool,X30) = s(bool,'const.bool.BOUNDED_1'(s(bool,X30))) | s(bool,X30) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl1),
  inference(duplicate_literal_removal,[],[f102924])).
fof(f102924,plain,(
  ( ! [X30,X29] : (s(bool,'T_0') = s(bool,X29) | s(bool,X30) = s(bool,'const.bool.BOUNDED_1'(s(bool,X30))) | s(bool,X30) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X29)) ) | $spl1),
  inference(superposition,[],[f7837,f81281])).
fof(f106083,plain,(
  ( ! [X29,X27] : (s(bool,X27) = s(bool,'const.bool.BOUNDED_1'(s(bool,X27))) | s(bool,X27) = s(bool,X29) | s(bool,X29) = s(bool,'const.bool.BOUNDED_1'(s(bool,X29)))) ) | $spl326),
  inference(cnf_transformation,[],[f106083_D])).
fof(f106083_D,plain,(
  ( ! [X29,X27] : (s(bool,X27) = s(bool,'const.bool.BOUNDED_1'(s(bool,X27))) | s(bool,X27) = s(bool,X29) | s(bool,X29) = s(bool,'const.bool.BOUNDED_1'(s(bool,X29)))) ) <=> ~$spl326),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl326])])).
fof(f106029,plain,(
  ( ! [X12,X13,X11] : (s(bool,'T_0') = s(bool,X12) | s(bool,X13) = s(bool,'const.bool.BOUNDED_1'(s(bool,X13))) | s(bool,X11) = s(bool,X13) | s(bool,X11) = s(bool,'const.bool.BOUNDED_1'(s(bool,X11)))) )),
  inference(duplicate_literal_removal,[],[f102917])).
fof(f102917,plain,(
  ( ! [X12,X13,X11] : (s(bool,'T_0') = s(bool,X12) | s(bool,X13) = s(bool,'const.bool.BOUNDED_1'(s(bool,X13))) | s(bool,X11) = s(bool,X13) | s(bool,X11) = s(bool,'const.bool.BOUNDED_1'(s(bool,X11))) | s(bool,'T_0') = s(bool,X12)) )),
  inference(superposition,[],[f7837,f7837])).
fof(f106038,plain,(
  ( ! [X26,X25] : (s(bool,X26) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,X26) = s(bool,'const.bool.BOUNDED_1'(s(bool,X26))) | s(bool,'T_0') = s(bool,X25)) ) | $spl1),
  inference(duplicate_literal_removal,[],[f102888])).
fof(f102888,plain,(
  ( ! [X26,X25] : (s(bool,X26) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,X26) = s(bool,'const.bool.BOUNDED_1'(s(bool,X26))) | s(bool,'T_0') = s(bool,X25) | s(bool,'T_0') = s(bool,X25)) ) | $spl1),
  inference(superposition,[],[f7837,f81281])).
fof(f106097,plain,(
  ( ! [X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,X1) = s(bool,'const.bool.BOUNDED_1'(s(bool,X1)))) ) | $spl328),
  inference(cnf_transformation,[],[f106097_D])).
fof(f106097_D,plain,(
  ( ! [X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,X1) = s(bool,'const.bool.BOUNDED_1'(s(bool,X1)))) ) <=> ~$spl328),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl328])])).
fof(f106098,plain,(
  ( ! [X24,X23] : (s(bool,'F_0') = s(bool,X24) | s(bool,X24) = s(bool,'const.bool.BOUNDED_1'(s(bool,X24))) | s(bool,'T_0') = s(bool,X23)) ) | ($spl4 | $spl231 | $spl236)),
  inference(forward_demodulation,[],[f106039,f100137])).
fof(f106039,plain,(
  ( ! [X24,X23] : (s(bool,X24) = s(bool,g(s(bool,'F_0'))) | s(bool,X24) = s(bool,'const.bool.BOUNDED_1'(s(bool,X24))) | s(bool,'T_0') = s(bool,X23)) ) | $spl236),
  inference(duplicate_literal_removal,[],[f102887])).
fof(f102887,plain,(
  ( ! [X24,X23] : (s(bool,X24) = s(bool,g(s(bool,'F_0'))) | s(bool,X24) = s(bool,'const.bool.BOUNDED_1'(s(bool,X24))) | s(bool,'T_0') = s(bool,X23) | s(bool,'T_0') = s(bool,X23)) ) | $spl236),
  inference(superposition,[],[f7837,f34143])).
fof(f106040,plain,(
  ( ! [X21,X22,X20] : (s(bool,X21) = s(bool,X22) | s(bool,X22) = s(bool,'const.bool.BOUNDED_1'(s(bool,X22))) | s(bool,'T_0') = s(bool,X20) | s(bool,X21) = s(bool,'const.bool.BOUNDED_1'(s(bool,X21)))) )),
  inference(duplicate_literal_removal,[],[f102886])).
fof(f102886,plain,(
  ( ! [X21,X22,X20] : (s(bool,X21) = s(bool,X22) | s(bool,X22) = s(bool,'const.bool.BOUNDED_1'(s(bool,X22))) | s(bool,'T_0') = s(bool,X20) | s(bool,X21) = s(bool,'const.bool.BOUNDED_1'(s(bool,X21))) | s(bool,'T_0') = s(bool,X20)) )),
  inference(superposition,[],[f7837,f7837])).
fof(f106045,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,X1) = s(bool,'const.bool.BOUNDED_1'(s(bool,X1))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(duplicate_literal_removal,[],[f102879])).
fof(f102879,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,X1) = s(bool,'const.bool.BOUNDED_1'(s(bool,X1))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f7837,f539])).
fof(f106060,plain,(
  ( ! [X14,X15,X16] : (s(bool,'T_0') = s(bool,X15) | s(bool,X14) = s(bool,'const.bool.BOUNDED_1'(s(bool,X14))) | s(bool,X16) = s(bool,'const.bool.BOUNDED_1'(s(bool,X16))) | s(bool,X14) = s(bool,X16)) )),
  inference(duplicate_literal_removal,[],[f102859])).
fof(f102859,plain,(
  ( ! [X14,X15,X16] : (s(bool,'T_0') = s(bool,X15) | s(bool,X14) = s(bool,'const.bool.BOUNDED_1'(s(bool,X14))) | s(bool,'T_0') = s(bool,X15) | s(bool,X16) = s(bool,'const.bool.BOUNDED_1'(s(bool,X16))) | s(bool,X14) = s(bool,X16)) )),
  inference(superposition,[],[f7837,f7837])).
fof(f106075,plain,(
  ( ! [X28,X29,X27] : (s(bool,X27) = s(bool,'const.bool.BOUNDED_1'(s(bool,X27))) | s(bool,'T_0') = s(bool,X28) | s(bool,X29) = s(bool,'const.bool.BOUNDED_1'(s(bool,X29))) | s(bool,X27) = s(bool,X29)) )),
  inference(duplicate_literal_removal,[],[f102828])).
fof(f102828,plain,(
  ( ! [X28,X29,X27] : (s(bool,X27) = s(bool,'const.bool.BOUNDED_1'(s(bool,X27))) | s(bool,'T_0') = s(bool,X28) | s(bool,'T_0') = s(bool,X28) | s(bool,X29) = s(bool,'const.bool.BOUNDED_1'(s(bool,X29))) | s(bool,X27) = s(bool,X29)) )),
  inference(superposition,[],[f7837,f7837])).
fof(f102542,plain,(
  ( ! [X6,X3] : (s(bool,X3) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56))) | s(bool,'T_0') = s(bool,X6) | s(bool,X3) = s(bool,X6)) ) | $spl324),
  inference(cnf_transformation,[],[f102542_D])).
fof(f102542_D,plain,(
  ( ! [X6,X3] : (s(bool,X3) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56))) | s(bool,'T_0') = s(bool,X6) | s(bool,X3) = s(bool,X6)) ) <=> ~$spl324),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl324])])).
fof(f102523,plain,(
  ( ! [X17,X15,X18,X16] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X16))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X17))) | s(bool,X15) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56))) | s(bool,X15) = s(bool,X18) | s(bool,'T_0') = s(bool,X18)) ) | $spl6),
  inference(superposition,[],[f2531,f1319])).
fof(f102520,plain,(
  ( ! [X6,X4,X5,X3] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X4))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X5))) | s(bool,X3) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56))) | s(bool,X3) = s(bool,X6) | s(bool,'T_0') = s(bool,X6)) ) | $spl6),
  inference(superposition,[],[f2531,f1319])).
fof(f101360,plain,(
  ( ! [X416,X415] : (sP1(g(s(bool,'F_0')),X415) | s(bool,'T_0') = s(bool,X416) | s(bool,X415) = s(bool,X416)) ) | $spl322),
  inference(cnf_transformation,[],[f101360_D])).
fof(f101360_D,plain,(
  ( ! [X416,X415] : (sP1(g(s(bool,'F_0')),X415) | s(bool,'T_0') = s(bool,X416) | s(bool,X415) = s(bool,X416)) ) <=> ~$spl322),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl322])])).
fof(f101359,plain,(
  ( ! [X414,X416,X415] : (p(s(bool,X414)) | sP1(g(s(bool,'F_0')),X415) | s(bool,X415) = s(bool,X416) | s(bool,'T_0') = s(bool,X416)) ) | $spl236),
  inference(subsumption_resolution,[],[f100970,f547])).
fof(f100970,plain,(
  ( ! [X414,X416,X415] : (p(s(bool,X414)) | sP1(g(s(bool,'F_0')),X415) | s(bool,X415) = s(bool,X416) | s(bool,'T_0') = s(bool,X416) | s(bool,'T_0') = s(bool,X414)) ) | $spl236),
  inference(superposition,[],[f9572,f34143])).
fof(f101358,plain,(
  ( ! [X412,X413] : (sP1(X412,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X413) | s(bool,X412) = s(bool,X413)) ) | $spl320),
  inference(cnf_transformation,[],[f101358_D])).
fof(f101358_D,plain,(
  ( ! [X412,X413] : (sP1(X412,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X413) | s(bool,X412) = s(bool,X413)) ) <=> ~$spl320),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl320])])).
fof(f101357,plain,(
  ( ! [X412,X413,X411] : (p(s(bool,X411)) | sP1(X412,g(s(bool,'F_0'))) | s(bool,X412) = s(bool,X413) | s(bool,'T_0') = s(bool,X413)) ) | $spl236),
  inference(subsumption_resolution,[],[f100969,f547])).
fof(f100969,plain,(
  ( ! [X412,X413,X411] : (p(s(bool,X411)) | sP1(X412,g(s(bool,'F_0'))) | s(bool,X412) = s(bool,X413) | s(bool,'T_0') = s(bool,X413) | s(bool,'T_0') = s(bool,X411)) ) | $spl236),
  inference(superposition,[],[f9571,f34143])).
fof(f99634,plain,(
  ( ! [X8,X9] : (s(fun(bool,bool),X8) = s(fun(bool,bool),X9) | s(bool,'T_0') = s(bool,sK66(X8,X9,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,sK66(X8,X9,bool,bool))))) ) | $spl316),
  inference(cnf_transformation,[],[f99634_D])).
fof(f99634_D,plain,(
  ( ! [X8,X9] : (s(fun(bool,bool),X8) = s(fun(bool,bool),X9) | s(bool,'T_0') = s(bool,sK66(X8,X9,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,sK66(X8,X9,bool,bool))))) ) <=> ~$spl316),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl316])])).
fof(f36219,plain,(
  ( ! [X6,X7,X5] : (s(bool,'F_0') != s(bool,f(s(bool,X7))) | s(fun(bool,bool),X5) = s(fun(bool,bool),X6) | s(bool,'T_0') = s(bool,g(s(bool,sK66(X5,X6,bool,bool)))) | s(bool,'T_0') = s(bool,X7) | s(bool,'T_0') = s(bool,sK66(X5,X6,bool,bool))) )),
  inference(superposition,[],[f2877,f1319])).
fof(f36220,plain,(
  ( ! [X10,X8,X9] : (s(bool,'F_0') != s(bool,f(s(bool,X10))) | s(fun(bool,bool),X8) = s(fun(bool,bool),X9) | s(bool,'T_0') = s(bool,g(s(bool,sK66(X8,X9,bool,bool)))) | s(bool,'T_0') = s(bool,sK66(X8,X9,bool,bool)) | s(bool,'T_0') = s(bool,X10)) )),
  inference(superposition,[],[f2877,f1319])).
fof(f99396,plain,(
  ( ! [X807] : (s(bool,X807) = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | s(bool,'T_0') = s(bool,X807)) ) | $spl314),
  inference(cnf_transformation,[],[f99396_D])).
fof(f99396_D,plain,(
  ( ! [X807] : (s(bool,X807) = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | s(bool,'T_0') = s(bool,X807)) ) <=> ~$spl314),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl314])])).
fof(f99380,plain,(
  ( ! [X372,X374,X373,X371] : (s('type.pair.prod'(X372,bool),'const.pair.,_2'(s(X372,X373),s(bool,'T_0'))) != s('type.pair.prod'(X372,bool),'const.pair.,_2'(s(X372,X374),s(bool,X371))) | s(bool,'F_0') = s(bool,g(s(bool,X371)))) ) | $spl294),
  inference(cnf_transformation,[],[f99380_D])).
fof(f99380_D,plain,(
  ( ! [X372,X374,X373,X371] : (s('type.pair.prod'(X372,bool),'const.pair.,_2'(s(X372,X373),s(bool,'T_0'))) != s('type.pair.prod'(X372,bool),'const.pair.,_2'(s(X372,X374),s(bool,X371))) | s(bool,'F_0') = s(bool,g(s(bool,X371)))) ) <=> ~$spl294),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl294])])).
fof(f97184,plain,(
  ( ! [X819,X817,X818,X816,X820] : (s('type.pair.prod'(X818,bool),'const.pair.,_2'(s(X818,X819),s(bool,'T_0'))) != s('type.pair.prod'(X818,bool),'const.pair.,_2'(s(X818,X820),s(bool,X817))) | s(bool,X816) = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | s(bool,'F_0') = s(bool,g(s(bool,X817))) | s(bool,'T_0') = s(bool,X816)) ) | ($spl4 | $spl8 | $spl259)),
  inference(superposition,[],[f81962,f94073])).
fof(f94073,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,g(s(bool,X0))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | ($spl4 | $spl259)),
  inference(superposition,[],[f93538,f1319])).
fof(f93538,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl4 | $spl259)),
  inference(forward_demodulation,[],[f93409,f82673])).
fof(f93409,plain,(
  ( ! [X0] : (s(bool,g(s(bool,'T_0'))) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | ($spl4 | $spl259)),
  inference(unit_resulting_resolution,[],[f2935,f93021,f84376])).
fof(f99378,plain,(
  ( ! [X350,X349,X347,X348] : (s('type.pair.prod'(bool,X348),'const.pair.,_2'(s(bool,'T_0'),s(X348,X349))) != s('type.pair.prod'(bool,X348),'const.pair.,_2'(s(bool,X347),s(X348,X350))) | s(bool,'F_0') = s(bool,g(s(bool,X347)))) ) | $spl290),
  inference(cnf_transformation,[],[f99378_D])).
fof(f99378_D,plain,(
  ( ! [X350,X349,X347,X348] : (s('type.pair.prod'(bool,X348),'const.pair.,_2'(s(bool,'T_0'),s(X348,X349))) != s('type.pair.prod'(bool,X348),'const.pair.,_2'(s(bool,X347),s(X348,X350))) | s(bool,'F_0') = s(bool,g(s(bool,X347)))) ) <=> ~$spl290),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl290])])).
fof(f97183,plain,(
  ( ! [X814,X812,X811,X815,X813] : (s('type.pair.prod'(bool,X813),'const.pair.,_2'(s(bool,'T_0'),s(X813,X814))) != s('type.pair.prod'(bool,X813),'const.pair.,_2'(s(bool,X812),s(X813,X815))) | s(bool,X811) = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | s(bool,'F_0') = s(bool,g(s(bool,X812))) | s(bool,'T_0') = s(bool,X811)) ) | ($spl4 | $spl8 | $spl259)),
  inference(superposition,[],[f81959,f94073])).
fof(f99376,plain,(
  ( ! [X325,X324,X326] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X325))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X324),s('type.list.list'(bool),X326))) | s(bool,'F_0') = s(bool,g(s(bool,X324)))) ) | $spl286),
  inference(cnf_transformation,[],[f99376_D])).
fof(f99376_D,plain,(
  ( ! [X325,X324,X326] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X325))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X324),s('type.list.list'(bool),X326))) | s(bool,'F_0') = s(bool,g(s(bool,X324)))) ) <=> ~$spl286),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl286])])).
fof(f97182,plain,(
  ( ! [X810,X808,X809,X807] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X809))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X808),s('type.list.list'(bool),X810))) | s(bool,X807) = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | s(bool,'F_0') = s(bool,g(s(bool,X808))) | s(bool,'T_0') = s(bool,X807)) ) | ($spl4 | $spl8 | $spl259)),
  inference(superposition,[],[f81954,f94073])).
fof(f99393,plain,(
  ( ! [X743,X744] : (sP0(f(s(bool,X743)),X744) | s(bool,'F_0') = s(bool,g(s(bool,X743)))) ) | $spl312),
  inference(cnf_transformation,[],[f99393_D])).
fof(f99393_D,plain,(
  ( ! [X743,X744] : (sP0(f(s(bool,X743)),X744) | s(bool,'F_0') = s(bool,g(s(bool,X743)))) ) <=> ~$spl312),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl312])])).
fof(f98929,plain,(
  ( ! [X743,X744,X742] : (sP0(f(s(bool,X743)),X744) | s(bool,'T_0') = s(bool,X742) | s(bool,'F_0') = s(bool,g(s(bool,X743)))) ) | ($spl4 | $spl238 | $spl259)),
  inference(duplicate_literal_removal,[],[f97154])).
fof(f97154,plain,(
  ( ! [X743,X744,X742] : (sP0(f(s(bool,X743)),X744) | s(bool,'T_0') = s(bool,X742) | s(bool,'F_0') = s(bool,g(s(bool,X743))) | s(bool,'T_0') = s(bool,X742)) ) | ($spl4 | $spl238 | $spl259)),
  inference(superposition,[],[f72117,f94073])).
fof(f72117,plain,(
  ( ! [X0,X1] : (sP0(f(s(bool,X0)),X1) | s(bool,'T_0') = s(bool,X0)) ) | $spl238),
  inference(superposition,[],[f72054,f539])).
fof(f72054,plain,(
  ( ! [X4] : (sP0(f(s(bool,'F_0')),X4)) ) | $spl238),
  inference(subsumption_resolution,[],[f71725,f531])).
fof(f71725,plain,(
  ( ! [X4] : (~p(s(bool,'T_0')) | sP0(f(s(bool,'F_0')),X4)) ) | $spl238),
  inference(superposition,[],[f625,f34144])).
fof(f99392,plain,(
  ( ! [X741,X740] : (sP0(X741,f(s(bool,X740))) | s(bool,'F_0') = s(bool,g(s(bool,X740)))) ) | $spl310),
  inference(cnf_transformation,[],[f99392_D])).
fof(f99392_D,plain,(
  ( ! [X741,X740] : (sP0(X741,f(s(bool,X740))) | s(bool,'F_0') = s(bool,g(s(bool,X740)))) ) <=> ~$spl310),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl310])])).
fof(f98930,plain,(
  ( ! [X741,X739,X740] : (sP0(X741,f(s(bool,X740))) | s(bool,'T_0') = s(bool,X739) | s(bool,'F_0') = s(bool,g(s(bool,X740)))) ) | ($spl4 | $spl238 | $spl259)),
  inference(duplicate_literal_removal,[],[f97153])).
fof(f97153,plain,(
  ( ! [X741,X739,X740] : (sP0(X741,f(s(bool,X740))) | s(bool,'T_0') = s(bool,X739) | s(bool,'F_0') = s(bool,g(s(bool,X740))) | s(bool,'T_0') = s(bool,X739)) ) | ($spl4 | $spl238 | $spl259)),
  inference(superposition,[],[f72109,f94073])).
fof(f72109,plain,(
  ( ! [X0,X1] : (sP0(X1,f(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | $spl238),
  inference(superposition,[],[f72053,f539])).
fof(f72053,plain,(
  ( ! [X3] : (sP0(X3,f(s(bool,'F_0')))) ) | $spl238),
  inference(subsumption_resolution,[],[f71724,f531])).
fof(f71724,plain,(
  ( ! [X3] : (~p(s(bool,'T_0')) | sP0(X3,f(s(bool,'F_0')))) ) | $spl238),
  inference(superposition,[],[f624,f34144])).
fof(f99389,plain,(
  ( ! [X671] : (sP44('T_0','T_0',g(s(bool,X671))) | s(bool,'F_0') = s(bool,g(s(bool,X671)))) ) | $spl308),
  inference(cnf_transformation,[],[f99389_D])).
fof(f99389_D,plain,(
  ( ! [X671] : (sP44('T_0','T_0',g(s(bool,X671))) | s(bool,'F_0') = s(bool,g(s(bool,X671)))) ) <=> ~$spl308),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl308])])).
fof(f98933,plain,(
  ( ! [X670,X671] : (sP44('T_0','T_0',g(s(bool,X671))) | s(bool,'T_0') = s(bool,X670) | s(bool,'F_0') = s(bool,g(s(bool,X671)))) ) | ($spl4 | $spl230 | $spl259)),
  inference(duplicate_literal_removal,[],[f97129])).
fof(f97129,plain,(
  ( ! [X670,X671] : (sP44('T_0','T_0',g(s(bool,X671))) | s(bool,'T_0') = s(bool,X670) | s(bool,'F_0') = s(bool,g(s(bool,X671))) | s(bool,'T_0') = s(bool,X670)) ) | ($spl4 | $spl230 | $spl259)),
  inference(superposition,[],[f34748,f94073])).
fof(f34748,plain,(
  ( ! [X0] : (sP44('T_0','T_0',g(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | $spl230),
  inference(superposition,[],[f34220,f539])).
fof(f34220,plain,(
  sP44('T_0','T_0',g(s(bool,'F_0'))) | $spl230),
  inference(unit_resulting_resolution,[],[f531,f34139,f946])).
fof(f99388,plain,(
  ( ! [X669] : (~sP44('F_0','T_0',g(s(bool,X669))) | s(bool,'F_0') = s(bool,g(s(bool,X669)))) ) | $spl306),
  inference(cnf_transformation,[],[f99388_D])).
fof(f99388_D,plain,(
  ( ! [X669] : (~sP44('F_0','T_0',g(s(bool,X669))) | s(bool,'F_0') = s(bool,g(s(bool,X669)))) ) <=> ~$spl306),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl306])])).
fof(f98934,plain,(
  ( ! [X668,X669] : (~sP44('F_0','T_0',g(s(bool,X669))) | s(bool,'T_0') = s(bool,X668) | s(bool,'F_0') = s(bool,g(s(bool,X669)))) ) | ($spl4 | $spl230 | $spl259)),
  inference(duplicate_literal_removal,[],[f97128])).
fof(f97128,plain,(
  ( ! [X668,X669] : (~sP44('F_0','T_0',g(s(bool,X669))) | s(bool,'T_0') = s(bool,X668) | s(bool,'F_0') = s(bool,g(s(bool,X669))) | s(bool,'T_0') = s(bool,X668)) ) | ($spl4 | $spl230 | $spl259)),
  inference(superposition,[],[f34703,f94073])).
fof(f34703,plain,(
  ( ! [X0] : (~sP44('F_0','T_0',g(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | $spl230),
  inference(superposition,[],[f34219,f539])).
fof(f34219,plain,(
  ~sP44('F_0','T_0',g(s(bool,'F_0'))) | $spl230),
  inference(unit_resulting_resolution,[],[f1048,f34139,f948])).
fof(f99387,plain,(
  ( ! [X667] : (sP44('T_0',g(s(bool,X667)),'T_0') | s(bool,'F_0') = s(bool,g(s(bool,X667)))) ) | $spl304),
  inference(cnf_transformation,[],[f99387_D])).
fof(f99387_D,plain,(
  ( ! [X667] : (sP44('T_0',g(s(bool,X667)),'T_0') | s(bool,'F_0') = s(bool,g(s(bool,X667)))) ) <=> ~$spl304),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl304])])).
fof(f98935,plain,(
  ( ! [X666,X667] : (sP44('T_0',g(s(bool,X667)),'T_0') | s(bool,'T_0') = s(bool,X666) | s(bool,'F_0') = s(bool,g(s(bool,X667)))) ) | ($spl4 | $spl230 | $spl259)),
  inference(duplicate_literal_removal,[],[f97127])).
fof(f97127,plain,(
  ( ! [X666,X667] : (sP44('T_0',g(s(bool,X667)),'T_0') | s(bool,'T_0') = s(bool,X666) | s(bool,'F_0') = s(bool,g(s(bool,X667))) | s(bool,'T_0') = s(bool,X666)) ) | ($spl4 | $spl230 | $spl259)),
  inference(superposition,[],[f34694,f94073])).
fof(f34694,plain,(
  ( ! [X0] : (sP44('T_0',g(s(bool,X0)),'T_0') | s(bool,'T_0') = s(bool,X0)) ) | $spl230),
  inference(superposition,[],[f34178,f539])).
fof(f34178,plain,(
  sP44('T_0',g(s(bool,'F_0')),'T_0') | $spl230),
  inference(unit_resulting_resolution,[],[f531,f34139,f946])).
fof(f99386,plain,(
  ( ! [X665] : (~sP44('F_0',g(s(bool,X665)),'T_0') | s(bool,'F_0') = s(bool,g(s(bool,X665)))) ) | $spl302),
  inference(cnf_transformation,[],[f99386_D])).
fof(f99386_D,plain,(
  ( ! [X665] : (~sP44('F_0',g(s(bool,X665)),'T_0') | s(bool,'F_0') = s(bool,g(s(bool,X665)))) ) <=> ~$spl302),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl302])])).
fof(f98936,plain,(
  ( ! [X664,X665] : (~sP44('F_0',g(s(bool,X665)),'T_0') | s(bool,'T_0') = s(bool,X664) | s(bool,'F_0') = s(bool,g(s(bool,X665)))) ) | ($spl4 | $spl230 | $spl259)),
  inference(duplicate_literal_removal,[],[f97126])).
fof(f97126,plain,(
  ( ! [X664,X665] : (~sP44('F_0',g(s(bool,X665)),'T_0') | s(bool,'T_0') = s(bool,X664) | s(bool,'F_0') = s(bool,g(s(bool,X665))) | s(bool,'T_0') = s(bool,X664)) ) | ($spl4 | $spl230 | $spl259)),
  inference(superposition,[],[f34652,f94073])).
fof(f34652,plain,(
  ( ! [X0] : (~sP44('F_0',g(s(bool,X0)),'T_0') | s(bool,'T_0') = s(bool,X0)) ) | $spl230),
  inference(superposition,[],[f34177,f539])).
fof(f34177,plain,(
  ~sP44('F_0',g(s(bool,'F_0')),'T_0') | $spl230),
  inference(unit_resulting_resolution,[],[f1048,f34139,f948])).
fof(f99385,plain,(
  ( ! [X662,X663] : (sP0(g(s(bool,X662)),X663) | s(bool,'F_0') = s(bool,g(s(bool,X662)))) ) | $spl300),
  inference(cnf_transformation,[],[f99385_D])).
fof(f99385_D,plain,(
  ( ! [X662,X663] : (sP0(g(s(bool,X662)),X663) | s(bool,'F_0') = s(bool,g(s(bool,X662)))) ) <=> ~$spl300),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl300])])).
fof(f98937,plain,(
  ( ! [X662,X661,X663] : (sP0(g(s(bool,X662)),X663) | s(bool,'T_0') = s(bool,X661) | s(bool,'F_0') = s(bool,g(s(bool,X662)))) ) | ($spl4 | $spl230 | $spl259)),
  inference(duplicate_literal_removal,[],[f97125])).
fof(f97125,plain,(
  ( ! [X662,X661,X663] : (sP0(g(s(bool,X662)),X663) | s(bool,'T_0') = s(bool,X661) | s(bool,'F_0') = s(bool,g(s(bool,X662))) | s(bool,'T_0') = s(bool,X661)) ) | ($spl4 | $spl230 | $spl259)),
  inference(superposition,[],[f34641,f94073])).
fof(f34641,plain,(
  ( ! [X0,X1] : (sP0(g(s(bool,X0)),X1) | s(bool,'T_0') = s(bool,X0)) ) | $spl230),
  inference(superposition,[],[f34576,f539])).
fof(f34576,plain,(
  ( ! [X4] : (sP0(g(s(bool,'F_0')),X4)) ) | $spl230),
  inference(subsumption_resolution,[],[f34280,f531])).
fof(f34280,plain,(
  ( ! [X4] : (~p(s(bool,'T_0')) | sP0(g(s(bool,'F_0')),X4)) ) | $spl230),
  inference(superposition,[],[f625,f34139])).
fof(f99384,plain,(
  ( ! [X660,X659] : (sP0(X660,g(s(bool,X659))) | s(bool,'F_0') = s(bool,g(s(bool,X659)))) ) | $spl298),
  inference(cnf_transformation,[],[f99384_D])).
fof(f99384_D,plain,(
  ( ! [X660,X659] : (sP0(X660,g(s(bool,X659))) | s(bool,'F_0') = s(bool,g(s(bool,X659)))) ) <=> ~$spl298),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl298])])).
fof(f98938,plain,(
  ( ! [X660,X658,X659] : (sP0(X660,g(s(bool,X659))) | s(bool,'T_0') = s(bool,X658) | s(bool,'F_0') = s(bool,g(s(bool,X659)))) ) | ($spl4 | $spl230 | $spl259)),
  inference(duplicate_literal_removal,[],[f97124])).
fof(f97124,plain,(
  ( ! [X660,X658,X659] : (sP0(X660,g(s(bool,X659))) | s(bool,'T_0') = s(bool,X658) | s(bool,'F_0') = s(bool,g(s(bool,X659))) | s(bool,'T_0') = s(bool,X658)) ) | ($spl4 | $spl230 | $spl259)),
  inference(superposition,[],[f34627,f94073])).
fof(f34627,plain,(
  ( ! [X0,X1] : (sP0(X1,g(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | $spl230),
  inference(superposition,[],[f34575,f539])).
fof(f34575,plain,(
  ( ! [X3] : (sP0(X3,g(s(bool,'F_0')))) ) | $spl230),
  inference(subsumption_resolution,[],[f34279,f531])).
fof(f34279,plain,(
  ( ! [X3] : (~p(s(bool,'T_0')) | sP0(X3,g(s(bool,'F_0')))) ) | $spl230),
  inference(superposition,[],[f624,f34139])).
fof(f99381,plain,(
  ( ! [X377,X379,X378] : (~p(s(bool,happ(s(fun(bool,bool),X378),s(bool,X377)))) | s(bool,'F_0') = s(bool,g(s(bool,X377))) | s(bool,'F_0') != s(bool,X379) | p(s(bool,happ(s(fun(bool,bool),X378),s(bool,X379))))) ) | $spl296),
  inference(cnf_transformation,[],[f99381_D])).
fof(f99381_D,plain,(
  ( ! [X377,X379,X378] : (~p(s(bool,happ(s(fun(bool,bool),X378),s(bool,X377)))) | s(bool,'F_0') = s(bool,g(s(bool,X377))) | s(bool,'F_0') != s(bool,X379) | p(s(bool,happ(s(fun(bool,bool),X378),s(bool,X379))))) ) <=> ~$spl296),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl296])])).
fof(f98945,plain,(
  ( ! [X377,X379,X376,X378] : (~p(s(bool,happ(s(fun(bool,bool),X378),s(bool,X377)))) | p(s(bool,happ(s(fun(bool,bool),X378),s(bool,X379)))) | s(bool,'F_0') != s(bool,X379) | s(bool,'T_0') = s(bool,X376) | s(bool,'F_0') = s(bool,g(s(bool,X377)))) ) | ($spl4 | $spl259)),
  inference(duplicate_literal_removal,[],[f97034])).
fof(f97034,plain,(
  ( ! [X377,X379,X376,X378] : (~p(s(bool,happ(s(fun(bool,bool),X378),s(bool,X377)))) | p(s(bool,happ(s(fun(bool,bool),X378),s(bool,X379)))) | s(bool,'F_0') != s(bool,X379) | s(bool,'T_0') = s(bool,X376) | s(bool,'F_0') = s(bool,g(s(bool,X377))) | s(bool,'T_0') = s(bool,X376)) ) | ($spl4 | $spl259)),
  inference(superposition,[],[f2754,f94073])).
fof(f52691,plain,(
  ( ! [X327,X323] : (s(bool,X323) = s(bool,'const.bool.BOUNDED_1'(s(bool,X327))) | s(bool,'T_0') = s(bool,X323)) ) | $spl246),
  inference(cnf_transformation,[],[f52691_D])).
fof(f52691_D,plain,(
  ( ! [X327,X323] : (s(bool,X323) = s(bool,'const.bool.BOUNDED_1'(s(bool,X327))) | s(bool,'T_0') = s(bool,X323)) ) <=> ~$spl246),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl246])])).
fof(f97033,plain,(
  ( ! [X372,X374,X370,X373,X375,X371] : (s('type.pair.prod'(X372,bool),'const.pair.,_2'(s(X372,X373),s(bool,'T_0'))) != s('type.pair.prod'(X372,bool),'const.pair.,_2'(s(X372,X374),s(bool,X371))) | s(bool,X370) = s(bool,'const.bool.BOUNDED_1'(s(bool,X375))) | s(bool,'F_0') = s(bool,g(s(bool,X371))) | s(bool,'T_0') = s(bool,X370)) ) | ($spl4 | $spl259)),
  inference(superposition,[],[f2621,f94073])).
fof(f99379,plain,(
  ( ! [X360,X362,X359,X361,X363] : (s('type.pair.prod'(X360,bool),'const.pair.,_2'(s(X360,X361),s(bool,X359))) != s('type.pair.prod'(X360,bool),'const.pair.,_2'(s(X360,X362),s(bool,X363))) | s(bool,'F_0') = s(bool,g(s(bool,X359))) | s(bool,'F_0') = s(bool,X363)) ) | $spl292),
  inference(cnf_transformation,[],[f99379_D])).
fof(f99379_D,plain,(
  ( ! [X360,X362,X359,X361,X363] : (s('type.pair.prod'(X360,bool),'const.pair.,_2'(s(X360,X361),s(bool,X359))) != s('type.pair.prod'(X360,bool),'const.pair.,_2'(s(X360,X362),s(bool,X363))) | s(bool,'F_0') = s(bool,g(s(bool,X359))) | s(bool,'F_0') = s(bool,X363)) ) <=> ~$spl292),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl292])])).
fof(f98946,plain,(
  ( ! [X358,X360,X362,X359,X361,X363] : (s('type.pair.prod'(X360,bool),'const.pair.,_2'(s(X360,X361),s(bool,X359))) != s('type.pair.prod'(X360,bool),'const.pair.,_2'(s(X360,X362),s(bool,X363))) | s(bool,'F_0') = s(bool,X363) | s(bool,'T_0') = s(bool,X358) | s(bool,'F_0') = s(bool,g(s(bool,X359)))) ) | ($spl4 | $spl259)),
  inference(duplicate_literal_removal,[],[f97031])).
fof(f97031,plain,(
  ( ! [X358,X360,X362,X359,X361,X363] : (s('type.pair.prod'(X360,bool),'const.pair.,_2'(s(X360,X361),s(bool,X359))) != s('type.pair.prod'(X360,bool),'const.pair.,_2'(s(X360,X362),s(bool,X363))) | s(bool,'F_0') = s(bool,X363) | s(bool,'T_0') = s(bool,X358) | s(bool,'F_0') = s(bool,g(s(bool,X359))) | s(bool,'T_0') = s(bool,X358)) ) | ($spl4 | $spl259)),
  inference(superposition,[],[f2618,f94073])).
fof(f97029,plain,(
  ( ! [X350,X346,X349,X351,X347,X348] : (s('type.pair.prod'(bool,X348),'const.pair.,_2'(s(bool,'T_0'),s(X348,X349))) != s('type.pair.prod'(bool,X348),'const.pair.,_2'(s(bool,X347),s(X348,X350))) | s(bool,X346) = s(bool,'const.bool.BOUNDED_1'(s(bool,X351))) | s(bool,'F_0') = s(bool,g(s(bool,X347))) | s(bool,'T_0') = s(bool,X346)) ) | ($spl4 | $spl259)),
  inference(superposition,[],[f2572,f94073])).
fof(f99377,plain,(
  ( ! [X335,X337,X339,X336,X338] : (s('type.pair.prod'(bool,X336),'const.pair.,_2'(s(bool,X335),s(X336,X337))) != s('type.pair.prod'(bool,X336),'const.pair.,_2'(s(bool,X338),s(X336,X339))) | s(bool,'F_0') = s(bool,g(s(bool,X335))) | s(bool,'F_0') = s(bool,X338)) ) | $spl288),
  inference(cnf_transformation,[],[f99377_D])).
fof(f99377_D,plain,(
  ( ! [X335,X337,X339,X336,X338] : (s('type.pair.prod'(bool,X336),'const.pair.,_2'(s(bool,X335),s(X336,X337))) != s('type.pair.prod'(bool,X336),'const.pair.,_2'(s(bool,X338),s(X336,X339))) | s(bool,'F_0') = s(bool,g(s(bool,X335))) | s(bool,'F_0') = s(bool,X338)) ) <=> ~$spl288),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl288])])).
fof(f98947,plain,(
  ( ! [X335,X337,X339,X334,X336,X338] : (s('type.pair.prod'(bool,X336),'const.pair.,_2'(s(bool,X335),s(X336,X337))) != s('type.pair.prod'(bool,X336),'const.pair.,_2'(s(bool,X338),s(X336,X339))) | s(bool,'F_0') = s(bool,X338) | s(bool,'T_0') = s(bool,X334) | s(bool,'F_0') = s(bool,g(s(bool,X335)))) ) | ($spl4 | $spl259)),
  inference(duplicate_literal_removal,[],[f97027])).
fof(f97027,plain,(
  ( ! [X335,X337,X339,X334,X336,X338] : (s('type.pair.prod'(bool,X336),'const.pair.,_2'(s(bool,X335),s(X336,X337))) != s('type.pair.prod'(bool,X336),'const.pair.,_2'(s(bool,X338),s(X336,X339))) | s(bool,'F_0') = s(bool,X338) | s(bool,'T_0') = s(bool,X334) | s(bool,'F_0') = s(bool,g(s(bool,X335))) | s(bool,'T_0') = s(bool,X334)) ) | ($spl4 | $spl259)),
  inference(superposition,[],[f2569,f94073])).
fof(f97025,plain,(
  ( ! [X325,X327,X323,X324,X326] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X325))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X324),s('type.list.list'(bool),X326))) | s(bool,X323) = s(bool,'const.bool.BOUNDED_1'(s(bool,X327))) | s(bool,'F_0') = s(bool,g(s(bool,X324))) | s(bool,'T_0') = s(bool,X323)) ) | ($spl4 | $spl259)),
  inference(superposition,[],[f2533,f94073])).
fof(f99375,plain,(
  ( ! [X315,X316,X314,X317] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X314),s('type.list.list'(bool),X315))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X316),s('type.list.list'(bool),X317))) | s(bool,'F_0') = s(bool,g(s(bool,X314))) | s(bool,'F_0') = s(bool,X316)) ) | $spl284),
  inference(cnf_transformation,[],[f99375_D])).
fof(f99375_D,plain,(
  ( ! [X315,X316,X314,X317] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X314),s('type.list.list'(bool),X315))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X316),s('type.list.list'(bool),X317))) | s(bool,'F_0') = s(bool,g(s(bool,X314))) | s(bool,'F_0') = s(bool,X316)) ) <=> ~$spl284),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl284])])).
fof(f98948,plain,(
  ( ! [X313,X315,X316,X314,X317] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X314),s('type.list.list'(bool),X315))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X316),s('type.list.list'(bool),X317))) | s(bool,'F_0') = s(bool,X316) | s(bool,'T_0') = s(bool,X313) | s(bool,'F_0') = s(bool,g(s(bool,X314)))) ) | ($spl4 | $spl259)),
  inference(duplicate_literal_removal,[],[f97023])).
fof(f97023,plain,(
  ( ! [X313,X315,X316,X314,X317] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X314),s('type.list.list'(bool),X315))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X316),s('type.list.list'(bool),X317))) | s(bool,'F_0') = s(bool,X316) | s(bool,'T_0') = s(bool,X313) | s(bool,'F_0') = s(bool,g(s(bool,X314))) | s(bool,'T_0') = s(bool,X313)) ) | ($spl4 | $spl259)),
  inference(superposition,[],[f2530,f94073])).
fof(f99374,plain,(
  ( ! [X306,X305,X307] : (~sP47('const.bool.BOUNDED_1'(s(bool,X305)),X306,X307) | s(bool,'F_0') = s(bool,g(s(bool,X305))) | sP48('const.bool.BOUNDED_1'(s(bool,'F_0')),X306,X307)) ) | $spl282),
  inference(cnf_transformation,[],[f99374_D])).
fof(f99374_D,plain,(
  ( ! [X306,X305,X307] : (~sP47('const.bool.BOUNDED_1'(s(bool,X305)),X306,X307) | s(bool,'F_0') = s(bool,g(s(bool,X305))) | sP48('const.bool.BOUNDED_1'(s(bool,'F_0')),X306,X307)) ) <=> ~$spl282),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl282])])).
fof(f98949,plain,(
  ( ! [X304,X306,X305,X307] : (~sP47('const.bool.BOUNDED_1'(s(bool,X305)),X306,X307) | sP48('const.bool.BOUNDED_1'(s(bool,'F_0')),X306,X307) | s(bool,'T_0') = s(bool,X304) | s(bool,'F_0') = s(bool,g(s(bool,X305)))) ) | ($spl4 | $spl259)),
  inference(duplicate_literal_removal,[],[f97021])).
fof(f97021,plain,(
  ( ! [X304,X306,X305,X307] : (~sP47('const.bool.BOUNDED_1'(s(bool,X305)),X306,X307) | sP48('const.bool.BOUNDED_1'(s(bool,'F_0')),X306,X307) | s(bool,'T_0') = s(bool,X304) | s(bool,'F_0') = s(bool,g(s(bool,X305))) | s(bool,'T_0') = s(bool,X304)) ) | ($spl4 | $spl259)),
  inference(superposition,[],[f2474,f94073])).
fof(f99373,plain,(
  ( ! [X302,X301,X303] : (~sP49('const.bool.BOUNDED_1'(s(bool,X301)),X302,X303) | s(bool,'F_0') = s(bool,g(s(bool,X301))) | sP50('const.bool.BOUNDED_1'(s(bool,'F_0')),X302,X303)) ) | $spl280),
  inference(cnf_transformation,[],[f99373_D])).
fof(f99373_D,plain,(
  ( ! [X302,X301,X303] : (~sP49('const.bool.BOUNDED_1'(s(bool,X301)),X302,X303) | s(bool,'F_0') = s(bool,g(s(bool,X301))) | sP50('const.bool.BOUNDED_1'(s(bool,'F_0')),X302,X303)) ) <=> ~$spl280),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl280])])).
fof(f98950,plain,(
  ( ! [X300,X302,X301,X303] : (~sP49('const.bool.BOUNDED_1'(s(bool,X301)),X302,X303) | sP50('const.bool.BOUNDED_1'(s(bool,'F_0')),X302,X303) | s(bool,'T_0') = s(bool,X300) | s(bool,'F_0') = s(bool,g(s(bool,X301)))) ) | ($spl4 | $spl259)),
  inference(duplicate_literal_removal,[],[f97020])).
fof(f97020,plain,(
  ( ! [X300,X302,X301,X303] : (~sP49('const.bool.BOUNDED_1'(s(bool,X301)),X302,X303) | sP50('const.bool.BOUNDED_1'(s(bool,'F_0')),X302,X303) | s(bool,'T_0') = s(bool,X300) | s(bool,'F_0') = s(bool,g(s(bool,X301))) | s(bool,'T_0') = s(bool,X300)) ) | ($spl4 | $spl259)),
  inference(superposition,[],[f2442,f94073])).
fof(f99372,plain,(
  ( ! [X296,X295] : (~p(s(bool,happ(s(fun(bool,bool),X296),s(bool,X295)))) | s(bool,'F_0') = s(bool,g(s(bool,X295))) | p(s(bool,happ(s(fun(bool,bool),X296),s(bool,sK65('F_0',X296,bool)))))) ) | $spl278),
  inference(cnf_transformation,[],[f99372_D])).
fof(f99372_D,plain,(
  ( ! [X296,X295] : (~p(s(bool,happ(s(fun(bool,bool),X296),s(bool,X295)))) | s(bool,'F_0') = s(bool,g(s(bool,X295))) | p(s(bool,happ(s(fun(bool,bool),X296),s(bool,sK65('F_0',X296,bool)))))) ) <=> ~$spl278),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl278])])).
fof(f98951,plain,(
  ( ! [X294,X296,X295] : (~p(s(bool,happ(s(fun(bool,bool),X296),s(bool,X295)))) | p(s(bool,happ(s(fun(bool,bool),X296),s(bool,sK65('F_0',X296,bool))))) | s(bool,'T_0') = s(bool,X294) | s(bool,'F_0') = s(bool,g(s(bool,X295)))) ) | ($spl4 | $spl259)),
  inference(duplicate_literal_removal,[],[f97018])).
fof(f97018,plain,(
  ( ! [X294,X296,X295] : (~p(s(bool,happ(s(fun(bool,bool),X296),s(bool,X295)))) | p(s(bool,happ(s(fun(bool,bool),X296),s(bool,sK65('F_0',X296,bool))))) | s(bool,'T_0') = s(bool,X294) | s(bool,'F_0') = s(bool,g(s(bool,X295))) | s(bool,'T_0') = s(bool,X294)) ) | ($spl4 | $spl259)),
  inference(superposition,[],[f2433,f94073])).
fof(f99371,plain,(
  ( ! [X292,X293] : (~p(s(bool,happ(s(fun(bool,bool),X293),s(bool,X292)))) | s(bool,'F_0') = s(bool,g(s(bool,X292))) | s(bool,'F_0') = s(bool,sK65('F_0',X293,bool))) ) | $spl276),
  inference(cnf_transformation,[],[f99371_D])).
fof(f99371_D,plain,(
  ( ! [X292,X293] : (~p(s(bool,happ(s(fun(bool,bool),X293),s(bool,X292)))) | s(bool,'F_0') = s(bool,g(s(bool,X292))) | s(bool,'F_0') = s(bool,sK65('F_0',X293,bool))) ) <=> ~$spl276),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl276])])).
fof(f98952,plain,(
  ( ! [X292,X293,X291] : (~p(s(bool,happ(s(fun(bool,bool),X293),s(bool,X292)))) | s(bool,'F_0') = s(bool,sK65('F_0',X293,bool)) | s(bool,'T_0') = s(bool,X291) | s(bool,'F_0') = s(bool,g(s(bool,X292)))) ) | ($spl4 | $spl259)),
  inference(duplicate_literal_removal,[],[f97017])).
fof(f97017,plain,(
  ( ! [X292,X293,X291] : (~p(s(bool,happ(s(fun(bool,bool),X293),s(bool,X292)))) | s(bool,'F_0') = s(bool,sK65('F_0',X293,bool)) | s(bool,'T_0') = s(bool,X291) | s(bool,'F_0') = s(bool,g(s(bool,X292))) | s(bool,'T_0') = s(bool,X291)) ) | ($spl4 | $spl259)),
  inference(superposition,[],[f2331,f94073])).
fof(f99366,plain,(
  ( ! [X5] : (s(bool,'T_0') != s(bool,X5) | s(bool,'F_0') = s(bool,g(s(bool,X5)))) ) | $spl274),
  inference(cnf_transformation,[],[f99366_D])).
fof(f99366_D,plain,(
  ( ! [X5] : (s(bool,'T_0') != s(bool,X5) | s(bool,'F_0') = s(bool,g(s(bool,X5)))) ) <=> ~$spl274),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl274])])).
fof(f99365,plain,(
  ( ! [X4,X5] : (s(bool,'T_0') != s(bool,X5) | p(s(bool,X4)) | s(bool,'F_0') = s(bool,g(s(bool,X5)))) ) | ($spl4 | $spl259)),
  inference(subsumption_resolution,[],[f96932,f547])).
fof(f96932,plain,(
  ( ! [X4,X5] : (s(bool,'T_0') != s(bool,X5) | p(s(bool,X4)) | s(bool,'F_0') = s(bool,g(s(bool,X5))) | s(bool,'T_0') = s(bool,X4)) ) | ($spl4 | $spl259)),
  inference(superposition,[],[f547,f94073])).
fof(f99332,plain,(
  ( ! [X52,X53] : (s(bool,'F_0') = s(bool,g(s(bool,sK66(X52,X53,bool,bool)))) | s(fun(bool,bool),X52) = s(fun(bool,bool),X53)) ) | $spl266),
  inference(cnf_transformation,[],[f99332_D])).
fof(f99332_D,plain,(
  ( ! [X52,X53] : (s(bool,'F_0') = s(bool,g(s(bool,sK66(X52,X53,bool,bool)))) | s(fun(bool,bool),X52) = s(fun(bool,bool),X53)) ) <=> ~$spl266),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl266])])).
fof(f98960,plain,(
  ( ! [X1932,X1933,X1931] : (s(bool,'T_0') = s(bool,X1933) | s(fun(bool,bool),X1931) = s(fun(bool,bool),X1932) | s(bool,'F_0') = s(bool,g(s(bool,sK66(X1931,X1932,bool,bool))))) ) | ($spl4 | $spl232 | $spl259)),
  inference(duplicate_literal_removal,[],[f96857])).
fof(f96857,plain,(
  ( ! [X1932,X1933,X1931] : (s(bool,'T_0') = s(bool,X1933) | s(fun(bool,bool),X1931) = s(fun(bool,bool),X1932) | s(bool,'F_0') = s(bool,g(s(bool,sK66(X1931,X1932,bool,bool)))) | s(bool,'T_0') = s(bool,X1933)) ) | ($spl4 | $spl232 | $spl259)),
  inference(superposition,[],[f34140,f94073])).
fof(f99356,plain,(
  ( ! [X588,X590,X591] : (sP1(X588,X590) | s(bool,'F_0') = s(bool,g(s(bool,X588))) | s(bool,'T_0') = s(bool,X591) | s(bool,X590) = s(bool,X591)) ) | $spl272),
  inference(cnf_transformation,[],[f99356_D])).
fof(f99356_D,plain,(
  ( ! [X588,X590,X591] : (sP1(X588,X590) | s(bool,'F_0') = s(bool,g(s(bool,X588))) | s(bool,'T_0') = s(bool,X591) | s(bool,X590) = s(bool,X591)) ) <=> ~$spl272),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl272])])).
fof(f99355,plain,(
  ( ! [X588,X590,X589,X591] : (p(s(bool,X589)) | sP1(X588,X590) | s(bool,X590) = s(bool,X591) | s(bool,'T_0') = s(bool,X591) | s(bool,'F_0') = s(bool,g(s(bool,X588)))) ) | ($spl4 | $spl259)),
  inference(subsumption_resolution,[],[f96365,f547])).
fof(f96365,plain,(
  ( ! [X588,X590,X589,X591] : (p(s(bool,X589)) | sP1(X588,X590) | s(bool,X590) = s(bool,X591) | s(bool,'T_0') = s(bool,X591) | s(bool,'F_0') = s(bool,g(s(bool,X588))) | s(bool,'T_0') = s(bool,X589)) ) | ($spl4 | $spl259)),
  inference(superposition,[],[f9572,f94073])).
fof(f99354,plain,(
  ( ! [X584,X586,X587] : (sP1(X586,X584) | s(bool,'F_0') = s(bool,g(s(bool,X584))) | s(bool,'T_0') = s(bool,X587) | s(bool,X586) = s(bool,X587)) ) | $spl270),
  inference(cnf_transformation,[],[f99354_D])).
fof(f99354_D,plain,(
  ( ! [X584,X586,X587] : (sP1(X586,X584) | s(bool,'F_0') = s(bool,g(s(bool,X584))) | s(bool,'T_0') = s(bool,X587) | s(bool,X586) = s(bool,X587)) ) <=> ~$spl270),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl270])])).
fof(f99353,plain,(
  ( ! [X584,X586,X585,X587] : (p(s(bool,X585)) | sP1(X586,X584) | s(bool,X586) = s(bool,X587) | s(bool,'T_0') = s(bool,X587) | s(bool,'F_0') = s(bool,g(s(bool,X584)))) ) | ($spl4 | $spl259)),
  inference(subsumption_resolution,[],[f96364,f547])).
fof(f96364,plain,(
  ( ! [X584,X586,X585,X587] : (p(s(bool,X585)) | sP1(X586,X584) | s(bool,X586) = s(bool,X587) | s(bool,'T_0') = s(bool,X587) | s(bool,'F_0') = s(bool,g(s(bool,X584))) | s(bool,'T_0') = s(bool,X585)) ) | ($spl4 | $spl259)),
  inference(superposition,[],[f9571,f94073])).
fof(f99333,plain,(
  ( ! [X15] : (s(bool,X15) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'F_0') = s(bool,g(s(bool,X15)))) ) | $spl268),
  inference(cnf_transformation,[],[f99333_D])).
fof(f99333_D,plain,(
  ( ! [X15] : (s(bool,X15) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'F_0') = s(bool,g(s(bool,X15)))) ) <=> ~$spl268),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl268])])).
fof(f99271,plain,(
  ( ! [X28,X29] : (s(bool,'T_0') = s(bool,X28) | s(bool,'F_0') = s(bool,g(s(bool,X29))) | s(bool,X29) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) ) | ($spl1 | $spl4 | $spl259)),
  inference(duplicate_literal_removal,[],[f95796])).
fof(f95796,plain,(
  ( ! [X28,X29] : (s(bool,'T_0') = s(bool,X28) | s(bool,'F_0') = s(bool,g(s(bool,X29))) | s(bool,X29) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X28)) ) | ($spl1 | $spl4 | $spl259)),
  inference(superposition,[],[f94073,f81281])).
fof(f99320,plain,(
  ( ! [X27,X25] : (s(bool,'F_0') = s(bool,g(s(bool,X25))) | s(bool,X25) = s(bool,X27) | s(bool,'F_0') = s(bool,g(s(bool,X27)))) ) | $spl260),
  inference(cnf_transformation,[],[f99320_D])).
fof(f99320_D,plain,(
  ( ! [X27,X25] : (s(bool,'F_0') = s(bool,g(s(bool,X25))) | s(bool,X25) = s(bool,X27) | s(bool,'F_0') = s(bool,g(s(bool,X27)))) ) <=> ~$spl260),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl260])])).
fof(f99273,plain,(
  ( ! [X14,X12,X13] : (s(bool,'T_0') = s(bool,X13) | s(bool,'F_0') = s(bool,g(s(bool,X14))) | s(bool,X12) = s(bool,X14) | s(bool,'F_0') = s(bool,g(s(bool,X12)))) ) | ($spl4 | $spl259)),
  inference(duplicate_literal_removal,[],[f95791])).
fof(f95791,plain,(
  ( ! [X14,X12,X13] : (s(bool,'T_0') = s(bool,X13) | s(bool,'F_0') = s(bool,g(s(bool,X14))) | s(bool,X12) = s(bool,X14) | s(bool,'F_0') = s(bool,g(s(bool,X12))) | s(bool,'T_0') = s(bool,X13)) ) | ($spl4 | $spl259)),
  inference(superposition,[],[f94073,f94073])).
fof(f99282,plain,(
  ( ! [X21,X19,X20] : (s(bool,X20) = s(bool,X21) | s(bool,'F_0') = s(bool,g(s(bool,X21))) | s(bool,'T_0') = s(bool,X19) | s(bool,'F_0') = s(bool,g(s(bool,X20)))) ) | ($spl4 | $spl259)),
  inference(duplicate_literal_removal,[],[f95759])).
fof(f95759,plain,(
  ( ! [X21,X19,X20] : (s(bool,X20) = s(bool,X21) | s(bool,'F_0') = s(bool,g(s(bool,X21))) | s(bool,'T_0') = s(bool,X19) | s(bool,'F_0') = s(bool,g(s(bool,X20))) | s(bool,'T_0') = s(bool,X19)) ) | ($spl4 | $spl259)),
  inference(superposition,[],[f94073,f94073])).
fof(f99283,plain,(
  ( ! [X14,X15] : (s(bool,X15) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'F_0') = s(bool,g(s(bool,X15))) | s(bool,'T_0') = s(bool,X14)) ) | ($spl1 | $spl4 | $spl259)),
  inference(duplicate_literal_removal,[],[f95757])).
fof(f95757,plain,(
  ( ! [X14,X15] : (s(bool,X15) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'F_0') = s(bool,g(s(bool,X15))) | s(bool,'T_0') = s(bool,X14) | s(bool,'T_0') = s(bool,X14)) ) | ($spl1 | $spl4 | $spl259)),
  inference(superposition,[],[f94073,f81281])).
fof(f99324,plain,(
  ( ! [X21] : (s(bool,'F_0') = s(bool,X21) | s(bool,'F_0') = s(bool,g(s(bool,X21)))) ) | $spl264),
  inference(cnf_transformation,[],[f99324_D])).
fof(f99324_D,plain,(
  ( ! [X21] : (s(bool,'F_0') = s(bool,X21) | s(bool,'F_0') = s(bool,g(s(bool,X21)))) ) <=> ~$spl264),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl264])])).
fof(f99288,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,'F_0') = s(bool,g(s(bool,X1))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl4 | $spl259)),
  inference(duplicate_literal_removal,[],[f95752])).
fof(f95752,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,'F_0') = s(bool,g(s(bool,X1))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | ($spl4 | $spl259)),
  inference(superposition,[],[f94073,f539])).
fof(f99289,plain,(
  ( ! [X54,X52,X53] : (s(bool,'T_0') = s(bool,X54) | s(bool,'F_0') = s(bool,g(s(bool,sK66(X52,X53,bool,bool)))) | s(fun(bool,bool),X52) = s(fun(bool,bool),X53)) ) | ($spl4 | $spl232 | $spl259)),
  inference(duplicate_literal_removal,[],[f95751])).
fof(f95751,plain,(
  ( ! [X54,X52,X53] : (s(bool,'T_0') = s(bool,X54) | s(bool,'F_0') = s(bool,g(s(bool,sK66(X52,X53,bool,bool)))) | s(bool,'T_0') = s(bool,X54) | s(fun(bool,bool),X52) = s(fun(bool,bool),X53)) ) | ($spl4 | $spl232 | $spl259)),
  inference(superposition,[],[f94073,f34140])).
fof(f99302,plain,(
  ( ! [X24,X23,X22] : (s(bool,'T_0') = s(bool,X23) | s(bool,'F_0') = s(bool,g(s(bool,X22))) | s(bool,'F_0') = s(bool,g(s(bool,X24))) | s(bool,X22) = s(bool,X24)) ) | ($spl4 | $spl259)),
  inference(duplicate_literal_removal,[],[f95735])).
fof(f95735,plain,(
  ( ! [X24,X23,X22] : (s(bool,'T_0') = s(bool,X23) | s(bool,'F_0') = s(bool,g(s(bool,X22))) | s(bool,'T_0') = s(bool,X23) | s(bool,'F_0') = s(bool,g(s(bool,X24))) | s(bool,X22) = s(bool,X24)) ) | ($spl4 | $spl259)),
  inference(superposition,[],[f94073,f94073])).
fof(f99323,plain,(
  ( ! [X22,X20] : (s(bool,X20) = s(bool,X22) | s(bool,'T_0') = s(bool,g(s(bool,X20))) | s(bool,'T_0') = s(bool,X22)) ) | $spl262),
  inference(cnf_transformation,[],[f99323_D])).
fof(f99323_D,plain,(
  ( ! [X22,X20] : (s(bool,X20) = s(bool,X22) | s(bool,'T_0') = s(bool,g(s(bool,X20))) | s(bool,'T_0') = s(bool,X22)) ) <=> ~$spl262),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl262])])).
fof(f95725,plain,(
  ( ! [X21,X22,X20] : (s(bool,'F_0') = s(bool,X21) | s(bool,X20) = s(bool,X22) | s(bool,'T_0') = s(bool,X22) | s(bool,'F_0') = s(bool,g(s(bool,X21))) | s(bool,'T_0') = s(bool,g(s(bool,X20)))) ) | ($spl4 | $spl259)),
  inference(superposition,[],[f94073,f94073])).
fof(f99312,plain,(
  ( ! [X26,X27,X25] : (s(bool,'F_0') = s(bool,g(s(bool,X25))) | s(bool,'T_0') = s(bool,X26) | s(bool,'F_0') = s(bool,g(s(bool,X27))) | s(bool,X25) = s(bool,X27)) ) | ($spl4 | $spl259)),
  inference(duplicate_literal_removal,[],[f95702])).
fof(f95702,plain,(
  ( ! [X26,X27,X25] : (s(bool,'F_0') = s(bool,g(s(bool,X25))) | s(bool,'T_0') = s(bool,X26) | s(bool,'T_0') = s(bool,X26) | s(bool,'F_0') = s(bool,g(s(bool,X27))) | s(bool,X25) = s(bool,X27)) ) | ($spl4 | $spl259)),
  inference(superposition,[],[f94073,f94073])).
fof(f93021,plain,(
  s(bool,'T_0') != s(bool,g(s(bool,'T_0'))) | $spl259),
  inference(cnf_transformation,[],[f93021_D])).
fof(f93021_D,plain,(
  s(bool,'T_0') != s(bool,g(s(bool,'T_0'))) <=> ~$spl259),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl259])])).
fof(f93018,plain,(
  ( ! [X985,X986] : (s(bool,'T_0') != s(bool,g(s(bool,'T_0'))) | s(fun(bool,bool),X985) = s(fun(bool,bool),X986)) ) | ($spl232 | $spl245)),
  inference(forward_demodulation,[],[f92969,f37350])).
fof(f37350,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | $spl245),
  inference(unit_resulting_resolution,[],[f1048,f36230,f1535])).
fof(f92969,plain,(
  ( ! [X985,X986] : (s(bool,f(s(bool,'T_0'))) != s(bool,g(s(bool,'T_0'))) | s(fun(bool,bool),X985) = s(fun(bool,bool),X986)) ) | $spl232),
  inference(duplicate_literal_removal,[],[f92915])).
fof(f92915,plain,(
  ( ! [X985,X986] : (s(bool,f(s(bool,'T_0'))) != s(bool,g(s(bool,'T_0'))) | s(fun(bool,bool),X985) = s(fun(bool,bool),X986) | s(fun(bool,bool),X985) = s(fun(bool,bool),X986)) ) | $spl232),
  inference(superposition,[],[f649,f34140])).
fof(f80021,plain,(
  $false | ($spl8 | $spl214 | $spl217)),
  inference(global_subsumption,[],[f31147,f530,f529,f528,f527,f531,f538,f539,f548,f547,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f668,f689,f709,f708,f707,f706,f726,f721,f720,f719,f718,f736,f731,f730,f729,f728,f739,f738,f743,f742,f747,f746,f752,f751,f758,f757,f756,f777,f772,f771,f770,f769,f784,f783,f782,f781,f801,f796,f795,f794,f793,f811,f806,f805,f804,f803,f814,f813,f818,f817,f822,f821,f827,f826,f833,f832,f831,f850,f849,f848,f847,f867,f862,f861,f860,f859,f877,f872,f871,f870,f869,f880,f879,f884,f883,f888,f887,f893,f892,f899,f898,f897,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1082,f1081,f1080,f1079,f1078,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1086,f1087,f1102,f1110,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1272,f1274,f1297,f1293,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1707,f1706,f1718,f1724,f1728,f1750,f1758,f1757,f1756,f1755,f1829,f1830,f1831,f1832,f1833,f1834,f1835,f1836,f1837,f1838,f1839,f1840,f1841,f1842,f1843,f1844,f1845,f1872,f1876,f1884,f1893,f1894,f1898,f1911,f1928,f1929,f1966,f1970,f1982,f1989,f1990,f1994,f2005,f2023,f2024,f2025,f2032,f2039,f2229,f2228,f2225,f2221,f2220,f2269,f2268,f2262,f2307,f2295,f2294,f2359,f2441,f2482,f2492,f2504,f2514,f2526,f2532,f2533,f2550,f2565,f2571,f2572,f2597,f2608,f2620,f2621,f2677,f2689,f2698,f2701,f2845,f2935,f2940,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f4202,f4261,f4279,f4280,f4284,f4302,f4317,f4334,f4355,f4432,f4433,f4434,f4449,f4468,f4489,f4555,f4573,f4574,f4578,f4596,f4611,f4631,f4652,f4732,f4733,f4761,f4785,f4826,f4844,f4845,f4849,f4868,f4883,f4901,f4922,f4986,f5002,f5003,f5007,f5027,f5039,f5248,f5257,f5321,f5631,f5670,f5689,f6918,f6944,f6940,f7303,f7383,f7384,f7553,f7558,f7561,f7565,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9603,f8248,f8253,f8256,f8260,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f895,f890,f829,f824,f754,f749,f687,f683,f666,f663,f693,f685,f681,f906,f874,f873,f866,f865,f851,f808,f807,f800,f799,f785,f733,f732,f725,f724,f710,f699,f696,f659,f657,f677,f6241,f6256,f6286,f684,f664,f688,f667,f692,f680,f670,f6240,f6247,f6273,f858,f857,f856,f855,f854,f853,f852,f792,f791,f790,f789,f788,f787,f786,f717,f716,f715,f714,f713,f712,f711,f908,f909,f907,f900,f894,f889,f885,f881,f876,f875,f864,f863,f834,f828,f823,f819,f815,f810,f809,f798,f797,f759,f753,f748,f744,f740,f735,f734,f723,f722,f701,f694,f691,f686,f682,f679,f676,f669,f665,f662,f660,f656,f674,f673,f672,f671,f702,f661,f697,f658,f901,f886,f882,f878,f835,f820,f816,f812,f760,f745,f741,f737,f905,f904,f903,f902,f896,f891,f868,f830,f825,f802,f755,f750,f727,f705,f655,f9617,f8277,f8276,f8275,f8274,f8273,f8272,f8271,f8244,f8008,f7582,f7581,f7580,f7579,f7578,f7577,f7576,f7549,f9615,f9614,f9613,f9612,f9611,f9610,f9609,f9606,f9605,f602,f601,f599,f596,f594,f593,f591,f587,f586,f698,f695,f845,f774,f773,f9622,f768,f767,f766,f765,f764,f763,f762,f761,f703,f653,f700,f690,f678,f675,f6952,f776,f775,f2938,f2941,f844,f9602,f9621,f9604,f9600,f6932,f4519,f1019,f846,f843,f842,f841,f840,f839,f838,f837,f836,f780,f779,f778,f704,f654,f7575,f8270,f3884,f3443,f3442,f2877,f2876,f2754,f2753,f2734,f2718,f2706,f2696,f2684,f2672,f2618,f2617,f2607,f2569,f2568,f2564,f2530,f2529,f2525,f2475,f2474,f2443,f2442,f1048,f552,f551,f12824,f12904,f12907,f12983,f12986,f2436,f2339,f8246,f8245,f7551,f7550,f2432,f2330,f2433,f2331,f8010,f8009,f9608,f9607,f604,f603,f2435,f2338,f7836,f16673,f16688,f16743,f16742,f16741,f18050,f18055,f18060,f18061,f19437,f19444,f19447,f18176,f19481,f23012,f23077,f23297,f23337,f24930,f24958,f25011,f25110,f26871,f26970,f27227,f27259,f27301,f27326,f27339,f27356,f27371,f27392,f28264,f28308,f28347,f28423,f28438,f28462,f28472,f28516,f28563,f28704,f28745,f28834,f28842,f28853,f28872,f28884,f28895,f28905,f28938,f28961,f28989,f29007,f29023,f29042,f29061,f29554,f29572,f31002,f31106,f31736,f31731,f31726,f31723,f31667,f31663,f31662,f31658,f31654,f31650,f31649,f31648,f31647,f31646,f31645,f31644,f31641,f31638,f31635,f31634,f31633,f31632,f31626,f31618,f31617,f31611,f31610,f31577,f31576,f31575,f31569,f31563,f31562,f31555,f31538,f31527,f31525,f31524,f31520,f31519,f31518,f31517,f31514,f31512,f31507,f31506,f31501,f31500,f31477,f31476,f31475,f31474,f31471,f31468,f31467,f31466,f31465,f31464,f31459,f31458,f31451,f31446,f31445,f31430,f31429,f31428,f31424,f31423,f31409,f31408,f31407,f31406,f31404,f31403,f31402,f31400,f31862,f31869,f31895,f31903,f31898,f31920,f31931,f31945,f32174,f32464,f32465,f32471,f32472,f32473,f32474,f32475,f32476,f32477,f32478,f32479,f32480,f32481,f32482,f32483,f32484,f32485,f32486,f32487,f32490,f32491,f32492,f32493,f32494,f32495,f32497,f32499,f32410,f32412,f32417,f32420,f32513,f32756,f32774,f32898,f32921,f32987,f33013,f33191,f33204,f33286,f33285,f33284,f33283,f33282,f33281,f33280,f33279,f33278,f33385,f33386,f33387,f33390,f33392,f33463,f33464,f33465,f33468,f33470,f33514,f33521,f33524,f33566,f33650,f33657,f33729,f33764,f33797,f33796,f33795,f34075,f34074,f34073,f34072,f34071,f34133,f34134,f34135,f34136,f34137,f34156,f34155,f34154,f34153,f34639,f34638,f34637,f35862,f35896,f35925,f35956,f35988,f36024,f36056,f36125,f36218,f36221,f36227,f36690,f36689,f37265,f37446,f37467,f37488,f37518,f37545,f37567,f37594,f37624,f37652,f37676,f37694,f37737,f37736,f37735,f37800,f38370,f38398,f38431,f38430,f38429,f38463,f38462,f38461,f38508,f38579,f38650,f38723,f38743,f38816,f38833,f39249,f39338,f39393,f39831,f39908,f39996,f40082,f43476,f43491,f31145,f1047,f55599])).
fof(f55599,plain,(
  ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) | $spl214),
  inference(unit_resulting_resolution,[],[f531,f31145,f639])).
fof(f43491,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') = s(bool,sK65('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X1,bool)) | s(bool,X2) = s(bool,happ(s(fun(bool,bool),X1),s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X2)) ) | $spl8),
  inference(subsumption_resolution,[],[f43483,f531])).
fof(f43483,plain,(
  ( ! [X2,X1] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,sK65('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X1,bool)) | s(bool,X2) = s(bool,happ(s(fun(bool,bool),X1),s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X2)) ) | $spl8),
  inference(superposition,[],[f32499,f1319])).
fof(f43476,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,X0)))) | s(bool,'T_0') = s(bool,sK65('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X1,bool)) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl8),
  inference(superposition,[],[f32499,f1319])).
fof(f33013,plain,(
  ( ! [X0] : (~sP49('const.bool.BOUNDED_1'(s(bool,X0)),'F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl8),
  inference(unit_resulting_resolution,[],[f31667,f1274])).
fof(f32987,plain,(
  ( ! [X0] : (~sP50('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0','const.bool.BOUNDED_1'(s(bool,X0)))) ) | $spl8),
  inference(unit_resulting_resolution,[],[f31663,f985])).
fof(f32921,plain,(
  ( ! [X0] : (~sP44('F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.bool.BOUNDED_1'(s(bool,X0)))) ) | $spl8),
  inference(unit_resulting_resolution,[],[f31654,f927])).
fof(f32898,plain,(
  ( ! [X0] : (~sP44('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0','const.bool.BOUNDED_1'(s(bool,X0)))) ) | $spl8),
  inference(unit_resulting_resolution,[],[f31650,f928])).
fof(f32774,plain,(
  ~sP44('F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl8),
  inference(unit_resulting_resolution,[],[f31459,f927])).
fof(f32756,plain,(
  ~sP44('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl8),
  inference(unit_resulting_resolution,[],[f31446,f928])).
fof(f32513,plain,(
  ( ! [X0] : (sP43('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'T_0','const.bool.BOUNDED_1'(s(bool,X0)))) ) | $spl8),
  inference(unit_resulting_resolution,[],[f31468,f928])).
fof(f32420,plain,(
  ( ! [X246,X244,X247,X245] : (s('type.pair.prod'(X244,bool),'const.pair.,_2'(s(X244,X247),s(bool,'T_0'))) != s('type.pair.prod'(X244,bool),'const.pair.,_2'(s(X244,X245),s(bool,X246))) | s(bool,X246) = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl8),
  inference(superposition,[],[f651,f31400])).
fof(f32417,plain,(
  ( ! [X235,X233,X234,X232] : (s('type.pair.prod'(bool,X232),'const.pair.,_2'(s(bool,'T_0'),s(X232,X235))) != s('type.pair.prod'(bool,X232),'const.pair.,_2'(s(bool,X233),s(X232,X234))) | s(bool,X233) = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl8),
  inference(superposition,[],[f650,f31400])).
fof(f32412,plain,(
  ( ! [X218,X216,X217] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X216))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X217),s('type.list.list'(bool),X218))) | s(bool,X217) = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl8),
  inference(superposition,[],[f606,f31400])).
fof(f32410,plain,(
  ( ! [X214] : (~p(s(bool,happ(s(fun(bool,bool),X214),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X214),s(bool,sK65('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X214,bool)))))) ) | $spl8),
  inference(superposition,[],[f604,f31400])).
fof(f32499,plain,(
  ( ! [X213] : (~p(s(bool,happ(s(fun(bool,bool),X213),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,sK65('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X213,bool))) ) | $spl8),
  inference(forward_demodulation,[],[f32409,f31400])).
fof(f32409,plain,(
  ( ! [X213] : (~p(s(bool,happ(s(fun(bool,bool),X213),s(bool,'T_0')))) | s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) = s(bool,sK65('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X213,bool))) ) | $spl8),
  inference(superposition,[],[f603,f31400])).
fof(f32497,plain,(
  ( ! [X185,X186,X184] : (sP50(X184,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X185) | s(bool,X184) = s(bool,X186) | s(bool,'T_0') = s(bool,X186)) ) | $spl8),
  inference(subsumption_resolution,[],[f32381,f531])).
fof(f32381,plain,(
  ( ! [X185,X186,X184] : (~p(s(bool,'T_0')) | sP50(X184,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X185) | s(bool,X184) = s(bool,X186) | s(bool,'T_0') = s(bool,X186)) ) | $spl8),
  inference(superposition,[],[f9585,f31400])).
fof(f32495,plain,(
  ( ! [X114,X113] : (~sP50('const.bool.BOUNDED_1'(s(bool,X114)),X113,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | p(s(bool,X113))) ) | $spl8),
  inference(subsumption_resolution,[],[f32301,f531])).
fof(f32301,plain,(
  ( ! [X114,X113] : (~p(s(bool,'T_0')) | p(s(bool,X113)) | ~sP50('const.bool.BOUNDED_1'(s(bool,X114)),X113,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl8),
  inference(superposition,[],[f2024,f31400])).
fof(f32494,plain,(
  ( ! [X111,X112] : (~sP49('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X111,'const.bool.BOUNDED_1'(s(bool,X112))) | p(s(bool,X111))) ) | $spl8),
  inference(subsumption_resolution,[],[f32300,f531])).
fof(f32300,plain,(
  ( ! [X111,X112] : (~p(s(bool,'T_0')) | p(s(bool,X111)) | ~sP49('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X111,'const.bool.BOUNDED_1'(s(bool,X112)))) ) | $spl8),
  inference(superposition,[],[f1990,f31400])).
fof(f32493,plain,(
  ( ! [X105,X106] : (~sP46(X105,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.bool.BOUNDED_1'(s(bool,X106))) | p(s(bool,X105))) ) | $spl8),
  inference(subsumption_resolution,[],[f32297,f531])).
fof(f32297,plain,(
  ( ! [X105,X106] : (~p(s(bool,'T_0')) | p(s(bool,X105)) | ~sP46(X105,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.bool.BOUNDED_1'(s(bool,X106)))) ) | $spl8),
  inference(superposition,[],[f1750,f31400])).
fof(f32492,plain,(
  ( ! [X103,X104] : (~sP45('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.bool.BOUNDED_1'(s(bool,X104)),X103) | p(s(bool,X103))) ) | $spl8),
  inference(subsumption_resolution,[],[f32296,f531])).
fof(f32296,plain,(
  ( ! [X103,X104] : (~p(s(bool,'T_0')) | p(s(bool,X103)) | ~sP45('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.bool.BOUNDED_1'(s(bool,X104)),X103)) ) | $spl8),
  inference(superposition,[],[f1724,f31400])).
fof(f32491,plain,(
  ( ! [X101,X102] : (~sP42('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.bool.BOUNDED_1'(s(bool,X102)),X101) | p(s(bool,X101))) ) | $spl8),
  inference(subsumption_resolution,[],[f32295,f531])).
fof(f32295,plain,(
  ( ! [X101,X102] : (~p(s(bool,'T_0')) | p(s(bool,X101)) | ~sP42('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.bool.BOUNDED_1'(s(bool,X102)),X101)) ) | $spl8),
  inference(superposition,[],[f1677,f31400])).
fof(f32490,plain,(
  ( ! [X99,X100] : (~sP43('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.bool.BOUNDED_1'(s(bool,X100)),X99) | p(s(bool,X99))) ) | $spl8),
  inference(subsumption_resolution,[],[f32294,f531])).
fof(f32294,plain,(
  ( ! [X99,X100] : (~p(s(bool,'T_0')) | p(s(bool,X99)) | ~sP43('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.bool.BOUNDED_1'(s(bool,X100)),X99)) ) | $spl8),
  inference(superposition,[],[f1659,f31400])).
fof(f32487,plain,(
  ( ! [X45,X44] : (sP48('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X44,X45) | ~sP47('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X44,X45)) ) | $spl8),
  inference(subsumption_resolution,[],[f32253,f531])).
fof(f32253,plain,(
  ( ! [X45,X44] : (~p(s(bool,'T_0')) | ~sP47('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X44,X45) | sP48('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X44,X45)) ) | $spl8),
  inference(superposition,[],[f1029,f31400])).
fof(f32486,plain,(
  ( ! [X43,X42] : (sP50('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X42,X43) | ~sP49('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X42,X43)) ) | $spl8),
  inference(subsumption_resolution,[],[f32252,f531])).
fof(f32252,plain,(
  ( ! [X43,X42] : (~p(s(bool,'T_0')) | ~sP49('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X42,X43) | sP50('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X42,X43)) ) | $spl8),
  inference(superposition,[],[f1028,f31400])).
fof(f32485,plain,(
  ( ! [X41,X40] : (~sP50('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X41,X40) | p(s(bool,X41)) | ~p(s(bool,X40))) ) | $spl8),
  inference(subsumption_resolution,[],[f32251,f531])).
fof(f32251,plain,(
  ( ! [X41,X40] : (~p(s(bool,'T_0')) | ~p(s(bool,X40)) | p(s(bool,X41)) | ~sP50('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X41,X40)) ) | $spl8),
  inference(superposition,[],[f997,f31400])).
fof(f32484,plain,(
  ( ! [X39,X38] : (sP50('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X38,X39) | ~p(s(bool,X38))) ) | $spl8),
  inference(subsumption_resolution,[],[f32250,f531])).
fof(f32250,plain,(
  ( ! [X39,X38] : (~p(s(bool,'T_0')) | ~p(s(bool,X38)) | sP50('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X38,X39)) ) | $spl8),
  inference(superposition,[],[f996,f31400])).
fof(f32483,plain,(
  ( ! [X37,X36] : (sP50('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X37,X36) | p(s(bool,X36))) ) | $spl8),
  inference(subsumption_resolution,[],[f32249,f531])).
fof(f32249,plain,(
  ( ! [X37,X36] : (~p(s(bool,'T_0')) | p(s(bool,X36)) | sP50('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X37,X36)) ) | $spl8),
  inference(superposition,[],[f995,f31400])).
fof(f32482,plain,(
  ( ! [X35,X34] : (~sP49(X35,X34,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | ~p(s(bool,X35)) | p(s(bool,X34))) ) | $spl8),
  inference(subsumption_resolution,[],[f32248,f531])).
fof(f32248,plain,(
  ( ! [X35,X34] : (~p(s(bool,'T_0')) | p(s(bool,X34)) | ~p(s(bool,X35)) | ~sP49(X35,X34,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl8),
  inference(superposition,[],[f990,f31400])).
fof(f32481,plain,(
  ( ! [X33,X32] : (~sP48('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X33,X32) | p(s(bool,X33)) | p(s(bool,X32))) ) | $spl8),
  inference(subsumption_resolution,[],[f32247,f531])).
fof(f32247,plain,(
  ( ! [X33,X32] : (~p(s(bool,'T_0')) | p(s(bool,X32)) | p(s(bool,X33)) | ~sP48('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X33,X32)) ) | $spl8),
  inference(superposition,[],[f980,f31400])).
fof(f32480,plain,(
  ( ! [X30,X31] : (sP48('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X30,X31) | ~p(s(bool,X30))) ) | $spl8),
  inference(subsumption_resolution,[],[f32246,f531])).
fof(f32246,plain,(
  ( ! [X30,X31] : (~p(s(bool,'T_0')) | ~p(s(bool,X30)) | sP48('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X30,X31)) ) | $spl8),
  inference(superposition,[],[f979,f31400])).
fof(f32479,plain,(
  ( ! [X28,X29] : (sP48('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X29,X28) | ~p(s(bool,X28))) ) | $spl8),
  inference(subsumption_resolution,[],[f32245,f531])).
fof(f32245,plain,(
  ( ! [X28,X29] : (~p(s(bool,'T_0')) | ~p(s(bool,X28)) | sP48('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X29,X28)) ) | $spl8),
  inference(superposition,[],[f978,f31400])).
fof(f32478,plain,(
  ( ! [X26,X27] : (~sP47('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X26,X27) | p(s(bool,X27)) | p(s(bool,X26))) ) | $spl8),
  inference(subsumption_resolution,[],[f32244,f531])).
fof(f32244,plain,(
  ( ! [X26,X27] : (~p(s(bool,'T_0')) | p(s(bool,X26)) | p(s(bool,X27)) | ~sP47('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X26,X27)) ) | $spl8),
  inference(superposition,[],[f973,f31400])).
fof(f32477,plain,(
  ( ! [X24,X25] : (~sP46(X25,X24,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | p(s(bool,X25)) | ~p(s(bool,X24))) ) | $spl8),
  inference(subsumption_resolution,[],[f32243,f531])).
fof(f32243,plain,(
  ( ! [X24,X25] : (~p(s(bool,'T_0')) | ~p(s(bool,X24)) | p(s(bool,X25)) | ~sP46(X25,X24,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl8),
  inference(superposition,[],[f965,f31400])).
fof(f32476,plain,(
  ( ! [X23,X22] : (~sP45(X22,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X23) | p(s(bool,X23)) | ~p(s(bool,X22))) ) | $spl8),
  inference(subsumption_resolution,[],[f32242,f531])).
fof(f32242,plain,(
  ( ! [X23,X22] : (~p(s(bool,'T_0')) | ~p(s(bool,X22)) | p(s(bool,X23)) | ~sP45(X22,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X23)) ) | $spl8),
  inference(superposition,[],[f956,f31400])).
fof(f32475,plain,(
  ( ! [X21,X20] : (~sP42(X20,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X21) | p(s(bool,X21)) | ~p(s(bool,X20))) ) | $spl8),
  inference(subsumption_resolution,[],[f32241,f531])).
fof(f32241,plain,(
  ( ! [X21,X20] : (~p(s(bool,'T_0')) | ~p(s(bool,X20)) | p(s(bool,X21)) | ~sP42(X20,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X21)) ) | $spl8),
  inference(superposition,[],[f937,f31400])).
fof(f32474,plain,(
  ( ! [X19,X18] : (~sP43(X18,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X19) | p(s(bool,X19)) | ~p(s(bool,X18))) ) | $spl8),
  inference(subsumption_resolution,[],[f32240,f531])).
fof(f32240,plain,(
  ( ! [X19,X18] : (~p(s(bool,'T_0')) | ~p(s(bool,X18)) | p(s(bool,X19)) | ~sP43(X18,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X19)) ) | $spl8),
  inference(superposition,[],[f933,f31400])).
fof(f32473,plain,(
  ( ! [X17,X16] : (sP40(X16,X17,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | ~p(s(bool,X16))) ) | $spl8),
  inference(subsumption_resolution,[],[f32239,f531])).
fof(f32239,plain,(
  ( ! [X17,X16] : (~p(s(bool,'T_0')) | ~p(s(bool,X16)) | sP40(X16,X17,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl8),
  inference(superposition,[],[f921,f31400])).
fof(f32472,plain,(
  ( ! [X11] : (sP1(X11,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | p(s(bool,X11))) ) | $spl8),
  inference(subsumption_resolution,[],[f32236,f531])).
fof(f32236,plain,(
  ( ! [X11] : (~p(s(bool,'T_0')) | p(s(bool,X11)) | sP1(X11,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl8),
  inference(superposition,[],[f643,f31400])).
fof(f32471,plain,(
  ( ! [X10] : (sP1('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X10) | p(s(bool,X10))) ) | $spl8),
  inference(subsumption_resolution,[],[f32235,f531])).
fof(f32235,plain,(
  ( ! [X10] : (~p(s(bool,'T_0')) | p(s(bool,X10)) | sP1('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X10)) ) | $spl8),
  inference(superposition,[],[f640,f31400])).
fof(f32465,plain,(
  ( ! [X4,X3] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),X3),s('type.list.list'('type.conSem.v'),X4)))) | p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),X3))),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),X4))))))) ) | $spl8),
  inference(subsumption_resolution,[],[f32223,f531])).
fof(f32223,plain,(
  ( ! [X4,X3] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),X3),s('type.list.list'('type.conSem.v'),X4)))) | p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),X3))),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),X4))))))) ) | $spl8),
  inference(superposition,[],[f1019,f31400])).
fof(f32464,plain,(
  ( ! [X2,X0,X1] : (sP21(X0,sK197(X1,X2,X0,sK55,sK52,sK51),X1,sK199(X1,X2,X0,sK55,sK52,sK51),sK198(X1,X2,X0,sK55,sK52,sK51)) | sP20(X2,sK194(X1,X2,X0,sK55,sK52,sK51),X0,sK196(X1,X2,X0,sK55,sK52,sK51),sK195(X1,X2,X0,sK55,sK52,sK51)) | sP22(X0,X2,X1) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55))))) ) | $spl8),
  inference(subsumption_resolution,[],[f32222,f531])).
fof(f32222,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | sP21(X0,sK197(X1,X2,X0,sK55,sK52,sK51),X1,sK199(X1,X2,X0,sK55,sK52,sK51),sK198(X1,X2,X0,sK55,sK52,sK51)) | sP20(X2,sK194(X1,X2,X0,sK55,sK52,sK51),X0,sK196(X1,X2,X0,sK55,sK52,sK51),sK195(X1,X2,X0,sK55,sK52,sK51)) | sP22(X0,X2,X1) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55))))) ) | $spl8),
  inference(superposition,[],[f761,f31400])).
fof(f32174,plain,(
  ~sP44('F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'T_0') | $spl8),
  inference(unit_resulting_resolution,[],[f1048,f31400,f948])).
fof(f31945,plain,(
  sP44('F_0','F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl8),
  inference(unit_resulting_resolution,[],[f1048,f1057,f1054,f31467,f931])).
fof(f31931,plain,(
  sP44('F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0') | $spl8),
  inference(unit_resulting_resolution,[],[f1048,f1056,f1054,f31466,f932])).
fof(f31920,plain,(
  sP44('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0','F_0') | $spl8),
  inference(unit_resulting_resolution,[],[f1048,f1057,f1053,f31465,f931])).
fof(f31898,plain,(
  sP44('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'T_0','T_0') | $spl8),
  inference(unit_resulting_resolution,[],[f531,f1060,f1052,f31464,f930])).
fof(f31903,plain,(
  sP44('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'T_0') | $spl8),
  inference(unit_resulting_resolution,[],[f531,f1060,f31451,f31464,f930])).
fof(f31895,plain,(
  ~sP44('F_0','T_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl8),
  inference(unit_resulting_resolution,[],[f31458,f927])).
fof(f31869,plain,(
  sP44('T_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'T_0') | $spl8),
  inference(unit_resulting_resolution,[],[f531,f1060,f1055,f31451,f930])).
fof(f31862,plain,(
  ~sP44('T_0','F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl8),
  inference(unit_resulting_resolution,[],[f31445,f928])).
fof(f31400,plain,(
  s(bool,'T_0') = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl8),
  inference(unit_resulting_resolution,[],[f531,f1047,f612])).
fof(f31402,plain,(
  ( ! [X0] : (sP0(X0,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl8),
  inference(unit_resulting_resolution,[],[f1047,f624])).
fof(f31403,plain,(
  ( ! [X0] : (sP0('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X0)) ) | $spl8),
  inference(unit_resulting_resolution,[],[f1047,f625])).
fof(f31404,plain,(
  ~sP1('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'T_0') | $spl8),
  inference(unit_resulting_resolution,[],[f531,f1047,f639])).
fof(f31406,plain,(
  ~sP1('T_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl8),
  inference(unit_resulting_resolution,[],[f531,f1047,f639])).
fof(f31407,plain,(
  ~sP1('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl8),
  inference(unit_resulting_resolution,[],[f1047,f1047,f639])).
fof(f31408,plain,(
  sP1('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0') | $spl8),
  inference(unit_resulting_resolution,[],[f1048,f1047,f640])).
fof(f31409,plain,(
  sP1('F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl8),
  inference(unit_resulting_resolution,[],[f1048,f1047,f643])).
fof(f31423,plain,(
  ( ! [X0] : (sP40('T_0',X0,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl8),
  inference(unit_resulting_resolution,[],[f531,f1047,f921])).
fof(f31424,plain,(
  ( ! [X0] : (sP40('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X0,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl8),
  inference(unit_resulting_resolution,[],[f1047,f1047,f921])).
fof(f31428,plain,(
  ~sP44('T_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0') | $spl8),
  inference(unit_resulting_resolution,[],[f531,f1048,f1047,f929])).
fof(f31429,plain,(
  ~sP44('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0') | $spl8),
  inference(unit_resulting_resolution,[],[f1047,f1048,f1047,f929])).
fof(f31430,plain,(
  sP44('T_0','T_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl8),
  inference(unit_resulting_resolution,[],[f1059,f1052,f1055,f1047,f930])).
fof(f31445,plain,(
  ~sP43('T_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0') | $spl8),
  inference(unit_resulting_resolution,[],[f531,f1048,f1047,f933])).
fof(f31446,plain,(
  ~sP43('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0') | $spl8),
  inference(unit_resulting_resolution,[],[f1047,f1048,f1047,f933])).
fof(f31451,plain,(
  ( ! [X0,X1] : (sP43(X0,X1,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl8),
  inference(unit_resulting_resolution,[],[f1047,f934])).
fof(f31458,plain,(
  ~sP42('T_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0') | $spl8),
  inference(unit_resulting_resolution,[],[f531,f1048,f1047,f937])).
fof(f31459,plain,(
  ~sP42('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0') | $spl8),
  inference(unit_resulting_resolution,[],[f1047,f1048,f1047,f937])).
fof(f31464,plain,(
  ( ! [X0,X1] : (sP42(X0,X1,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl8),
  inference(unit_resulting_resolution,[],[f1047,f938])).
fof(f31465,plain,(
  ( ! [X0,X1] : (sP41(X0,X1,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl8),
  inference(unit_resulting_resolution,[],[f1047,f942])).
fof(f31466,plain,(
  ( ! [X0,X1] : (sP41(X0,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X1)) ) | $spl8),
  inference(unit_resulting_resolution,[],[f1047,f943])).
fof(f31467,plain,(
  ( ! [X0,X1] : (sP41('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X0,X1)) ) | $spl8),
  inference(unit_resulting_resolution,[],[f1047,f944])).
fof(f31468,plain,(
  ( ! [X0] : (sP44('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.bool.BOUNDED_1'(s(bool,X0)),'T_0')) ) | $spl8),
  inference(unit_resulting_resolution,[],[f538,f1047,f946])).
fof(f31471,plain,(
  ( ! [X0] : (sP44('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'T_0','const.bool.BOUNDED_1'(s(bool,X0)))) ) | $spl8),
  inference(unit_resulting_resolution,[],[f538,f1047,f946])).
fof(f31474,plain,(
  ~sP44('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'T_0','F_0') | $spl8),
  inference(unit_resulting_resolution,[],[f1102,f1047,f947])).
fof(f31475,plain,(
  ~sP44('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0','T_0') | $spl8),
  inference(unit_resulting_resolution,[],[f1102,f1047,f947])).
fof(f31476,plain,(
  ( ! [X0] : (~sP46('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X0,'F_0')) ) | $spl8),
  inference(unit_resulting_resolution,[],[f1048,f1047,f950])).
fof(f31477,plain,(
  ( ! [X0] : (~sP46('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0',X0)) ) | $spl8),
  inference(unit_resulting_resolution,[],[f1048,f1047,f951])).
fof(f31500,plain,(
  ~sP45('T_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0') | $spl8),
  inference(unit_resulting_resolution,[],[f531,f1048,f1047,f956])).
fof(f31501,plain,(
  ~sP45('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0') | $spl8),
  inference(unit_resulting_resolution,[],[f1047,f1048,f1047,f956])).
fof(f31506,plain,(
  ( ! [X0,X1] : (sP45(X0,X1,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl8),
  inference(unit_resulting_resolution,[],[f1047,f957])).
fof(f31507,plain,(
  sP46('T_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'T_0') | $spl8),
  inference(unit_resulting_resolution,[],[f531,f531,f1047,f962])).
fof(f31512,plain,(
  sP46('T_0','T_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl8),
  inference(unit_resulting_resolution,[],[f531,f531,f1047,f962])).
fof(f31514,plain,(
  sP46('T_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl8),
  inference(unit_resulting_resolution,[],[f531,f1047,f1047,f962])).
fof(f31517,plain,(
  sP46('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'T_0','T_0') | $spl8),
  inference(unit_resulting_resolution,[],[f531,f531,f1047,f962])).
fof(f31518,plain,(
  sP46('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'T_0') | $spl8),
  inference(unit_resulting_resolution,[],[f1047,f531,f1047,f962])).
fof(f31519,plain,(
  sP46('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'T_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl8),
  inference(unit_resulting_resolution,[],[f531,f1047,f1047,f962])).
fof(f31520,plain,(
  sP46('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl8),
  inference(unit_resulting_resolution,[],[f1047,f1047,f1047,f962])).
fof(f31524,plain,(
  ~sP46('F_0','T_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl8),
  inference(unit_resulting_resolution,[],[f531,f1048,f1047,f965])).
fof(f31525,plain,(
  ~sP46('F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl8),
  inference(unit_resulting_resolution,[],[f1047,f1048,f1047,f965])).
fof(f31527,plain,(
  ( ! [X0] : (~sP48('F_0',X0,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl8),
  inference(unit_resulting_resolution,[],[f1048,f1047,f966])).
fof(f31538,plain,(
  ( ! [X0] : (~sP48('F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X0)) ) | $spl8),
  inference(unit_resulting_resolution,[],[f1048,f1047,f967])).
fof(f31555,plain,(
  ~sP47('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0','F_0') | $spl8),
  inference(unit_resulting_resolution,[],[f1048,f1048,f1047,f973])).
fof(f31562,plain,(
  ( ! [X0,X1] : (sP47(X0,X1,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl8),
  inference(unit_resulting_resolution,[],[f1047,f974])).
fof(f31563,plain,(
  ( ! [X0,X1] : (sP47(X0,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X1)) ) | $spl8),
  inference(unit_resulting_resolution,[],[f1047,f975])).
fof(f31569,plain,(
  ( ! [X0] : (sP48('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X0,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl8),
  inference(unit_resulting_resolution,[],[f1047,f1047,f978])).
fof(f31575,plain,(
  ( ! [X0] : (sP48('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X0)) ) | $spl8),
  inference(unit_resulting_resolution,[],[f1047,f1047,f979])).
fof(f31576,plain,(
  ~sP48('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0','F_0') | $spl8),
  inference(unit_resulting_resolution,[],[f1048,f1048,f1047,f980])).
fof(f31577,plain,(
  ( ! [X0] : (~sP50('F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X0)) ) | $spl8),
  inference(unit_resulting_resolution,[],[f1048,f1047,f984])).
fof(f31610,plain,(
  ~sP49('T_0','F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl8),
  inference(unit_resulting_resolution,[],[f1048,f531,f1047,f990])).
fof(f31611,plain,(
  ~sP49('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl8),
  inference(unit_resulting_resolution,[],[f1048,f1047,f1047,f990])).
fof(f31617,plain,(
  ( ! [X0,X1] : (sP49(X0,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X1)) ) | $spl8),
  inference(unit_resulting_resolution,[],[f1047,f992])).
fof(f31618,plain,(
  sP50('F_0','F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl8),
  inference(unit_resulting_resolution,[],[f1048,f1048,f1047,f994])).
fof(f31626,plain,(
  ( ! [X0] : (sP50('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X0)) ) | $spl8),
  inference(unit_resulting_resolution,[],[f1047,f1047,f996])).
fof(f31632,plain,(
  ~sP50('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0','T_0') | $spl8),
  inference(unit_resulting_resolution,[],[f531,f1048,f1047,f997])).
fof(f31633,plain,(
  ~sP50('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl8),
  inference(unit_resulting_resolution,[],[f1047,f1048,f1047,f997])).
fof(f31634,plain,(
  ( ! [X0] : (sP50('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X0,'F_0')) ) | $spl8),
  inference(unit_resulting_resolution,[],[f1067,f1047,f1028])).
fof(f31635,plain,(
  ( ! [X0] : (sP50('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'T_0',X0)) ) | $spl8),
  inference(unit_resulting_resolution,[],[f1068,f1047,f1028])).
fof(f31638,plain,(
  ( ! [X0] : (sP48('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X0,'T_0')) ) | $spl8),
  inference(unit_resulting_resolution,[],[f1064,f1047,f1029])).
fof(f31641,plain,(
  ( ! [X0] : (sP48('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'T_0',X0)) ) | $spl8),
  inference(unit_resulting_resolution,[],[f1065,f1047,f1029])).
fof(f31644,plain,(
  ( ! [X0,X1] : (sP40(X0,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X1)) ) | $spl8),
  inference(unit_resulting_resolution,[],[f1047,f1031])).
fof(f31645,plain,(
  ( ! [X0,X1] : (sP40('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.bool.BOUNDED_1'(s(bool,X0)),X1)) ) | $spl8),
  inference(unit_resulting_resolution,[],[f1047,f1182])).
fof(f31646,plain,(
  ( ! [X0,X1] : (sP40('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X0,'const.bool.BOUNDED_1'(s(bool,X1)))) ) | $spl8),
  inference(unit_resulting_resolution,[],[f1047,f1187])).
fof(f31647,plain,(
  ( ! [X0,X1] : (sP48('const.bool.BOUNDED_1'(s(bool,X0)),X1,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl8),
  inference(unit_resulting_resolution,[],[f1047,f1210])).
fof(f31648,plain,(
  ( ! [X0,X1] : (sP48('const.bool.BOUNDED_1'(s(bool,X0)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X1)) ) | $spl8),
  inference(unit_resulting_resolution,[],[f1047,f1222])).
fof(f31649,plain,(
  ( ! [X0,X1] : (sP50('const.bool.BOUNDED_1'(s(bool,X0)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X1)) ) | $spl8),
  inference(unit_resulting_resolution,[],[f1047,f1254])).
fof(f31650,plain,(
  ( ! [X0] : (~sP43('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.bool.BOUNDED_1'(s(bool,X0)),'F_0')) ) | $spl8),
  inference(unit_resulting_resolution,[],[f1048,f1047,f1659])).
fof(f31654,plain,(
  ( ! [X0] : (~sP42('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.bool.BOUNDED_1'(s(bool,X0)),'F_0')) ) | $spl8),
  inference(unit_resulting_resolution,[],[f1048,f1047,f1677])).
fof(f31658,plain,(
  ( ! [X0] : (~sP45('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.bool.BOUNDED_1'(s(bool,X0)),'F_0')) ) | $spl8),
  inference(unit_resulting_resolution,[],[f1048,f1047,f1724])).
fof(f31662,plain,(
  ( ! [X0] : (~sP46('F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.bool.BOUNDED_1'(s(bool,X0)))) ) | $spl8),
  inference(unit_resulting_resolution,[],[f1048,f1047,f1750])).
fof(f31663,plain,(
  ( ! [X0] : (~sP49('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0','const.bool.BOUNDED_1'(s(bool,X0)))) ) | $spl8),
  inference(unit_resulting_resolution,[],[f1048,f1047,f1990])).
fof(f31667,plain,(
  ( ! [X0] : (~sP50('const.bool.BOUNDED_1'(s(bool,X0)),'F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl8),
  inference(unit_resulting_resolution,[],[f1048,f1047,f2024])).
fof(f31723,plain,(
  ( ! [X0] : (sP40('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X0,'T_0')) ) | $spl8),
  inference(unit_resulting_resolution,[],[f1102,f1102,f1047,f9574])).
fof(f31726,plain,(
  ( ! [X0] : (sP48('T_0',X0,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl8),
  inference(unit_resulting_resolution,[],[f1102,f1102,f1047,f9580])).
fof(f31731,plain,(
  ( ! [X0] : (sP48('T_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X0)) ) | $spl8),
  inference(unit_resulting_resolution,[],[f1102,f1102,f1047,f9581])).
fof(f31736,plain,(
  ( ! [X0] : (sP50('T_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X0)) ) | $spl8),
  inference(unit_resulting_resolution,[],[f1102,f1102,f1047,f9585])).
fof(f19437,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X0),s('type.list.list'(bool),X1))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X2),s('type.list.list'(bool),X3))) | s(bool,X2) = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | s(bool,X0) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) ) | $spl8),
  inference(superposition,[],[f2532,f1319])).
fof(f18060,plain,(
  ( ! [X72,X71,X73] : (sP50(X71,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X72) | s(bool,X71) = s(bool,X73) | s(bool,'T_0') = s(bool,X73)) ) | $spl8),
  inference(subsumption_resolution,[],[f18033,f531])).
fof(f18033,plain,(
  ( ! [X72,X71,X73] : (~p(s(bool,'T_0')) | sP50(X71,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X72) | s(bool,X71) = s(bool,X73) | s(bool,'T_0') = s(bool,X73)) ) | $spl8),
  inference(superposition,[],[f9585,f1110])).
fof(f16688,plain,(
  ( ! [X2,X1] : (p(s(bool,happ(s(fun(bool,bool),X1),s(bool,sK65('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X1,bool))))) | s(bool,X2) = s(bool,happ(s(fun(bool,bool),X1),s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X2)) ) | $spl8),
  inference(subsumption_resolution,[],[f16680,f531])).
fof(f16680,plain,(
  ( ! [X2,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),X1),s(bool,sK65('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X1,bool))))) | s(bool,X2) = s(bool,happ(s(fun(bool,bool),X1),s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X2)) ) | $spl8),
  inference(superposition,[],[f2435,f1319])).
fof(f16673,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,X0)))) | p(s(bool,happ(s(fun(bool,bool),X1),s(bool,sK65('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X1,bool))))) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl8),
  inference(superposition,[],[f2435,f1319])).
fof(f7836,plain,(
  ( ! [X12,X10,X11] : (~p(s(bool,happ(s(fun(bool,bool),X11),s(bool,X10)))) | s(bool,'T_0') = s(bool,sK65('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X11,bool)) | s(bool,X10) = s(bool,X12) | s(bool,'T_0') = s(bool,X12)) ) | $spl8),
  inference(superposition,[],[f2338,f1319])).
fof(f2338,plain,(
  ( ! [X6] : (~p(s(bool,happ(s(fun(bool,bool),X6),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,sK65('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X6,bool))) ) | $spl8),
  inference(forward_demodulation,[],[f2333,f1110])).
fof(f2333,plain,(
  ( ! [X6] : (~p(s(bool,happ(s(fun(bool,bool),X6),s(bool,'T_0')))) | s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) = s(bool,sK65('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X6,bool))) ) | $spl8),
  inference(superposition,[],[f603,f1110])).
fof(f2435,plain,(
  ( ! [X6] : (~p(s(bool,happ(s(fun(bool,bool),X6),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X6),s(bool,sK65('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X6,bool)))))) ) | $spl8),
  inference(superposition,[],[f604,f1110])).
fof(f6952,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),X0),s('type.list.list'('type.conSem.v'),X1)))) | p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),X0))),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),X1))))))) ) | $spl8),
  inference(subsumption_resolution,[],[f6948,f531])).
fof(f6948,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),X0),s('type.list.list'('type.conSem.v'),X1)))) | p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),X0))),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),X1))))))) ) | $spl8),
  inference(superposition,[],[f1019,f1110])).
fof(f9617,plain,(
  ( ! [X629,X630] : (s(bool,'T_0') = s(bool,sK65('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X629,bool)) | s(bool,X630) = s(bool,happ(s(fun(bool,bool),X629),s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X630)) ) | $spl8),
  inference(subsumption_resolution,[],[f8237,f531])).
fof(f8237,plain,(
  ( ! [X629,X630] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,sK65('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X629,bool)) | s(bool,X630) = s(bool,happ(s(fun(bool,bool),X629),s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X630)) ) | $spl8),
  inference(superposition,[],[f2338,f1319])).
fof(f6940,plain,(
  ( ! [X0] : (sP48('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X0,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl8),
  inference(unit_resulting_resolution,[],[f1079,f1841])).
fof(f6944,plain,(
  ( ! [X0] : (sP48('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X0)) ) | $spl8),
  inference(unit_resulting_resolution,[],[f1080,f1841])).
fof(f6918,plain,(
  ( ! [X0] : (sP50('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X0)) ) | $spl8),
  inference(unit_resulting_resolution,[],[f1081,f1840])).
fof(f5039,plain,(
  ( ! [X0] : (~sP49('const.bool.BOUNDED_1'(s(bool,X0)),'F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl8),
  inference(unit_resulting_resolution,[],[f5027,f1274])).
fof(f5027,plain,(
  ( ! [X0] : (~sP50('const.bool.BOUNDED_1'(s(bool,X0)),'F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl8),
  inference(unit_resulting_resolution,[],[f1048,f5002])).
fof(f5002,plain,(
  ( ! [X12,X11] : (~sP50('const.bool.BOUNDED_1'(s(bool,X12)),X11,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | p(s(bool,X11))) ) | $spl8),
  inference(subsumption_resolution,[],[f4996,f531])).
fof(f4996,plain,(
  ( ! [X12,X11] : (~p(s(bool,'T_0')) | p(s(bool,X11)) | ~sP50('const.bool.BOUNDED_1'(s(bool,X12)),X11,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl8),
  inference(superposition,[],[f2024,f1110])).
fof(f4883,plain,(
  ( ! [X0] : (~sP50('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0','const.bool.BOUNDED_1'(s(bool,X0)))) ) | $spl8),
  inference(unit_resulting_resolution,[],[f4868,f985])).
fof(f4868,plain,(
  ( ! [X0] : (~sP49('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0','const.bool.BOUNDED_1'(s(bool,X0)))) ) | $spl8),
  inference(unit_resulting_resolution,[],[f1048,f4844])).
fof(f4844,plain,(
  ( ! [X12,X11] : (~sP49('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X11,'const.bool.BOUNDED_1'(s(bool,X12))) | p(s(bool,X11))) ) | $spl8),
  inference(subsumption_resolution,[],[f4837,f531])).
fof(f4837,plain,(
  ( ! [X12,X11] : (~p(s(bool,'T_0')) | p(s(bool,X11)) | ~sP49('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X11,'const.bool.BOUNDED_1'(s(bool,X12)))) ) | $spl8),
  inference(superposition,[],[f1990,f1110])).
fof(f4732,plain,(
  ( ! [X12,X11] : (~sP46(X11,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.bool.BOUNDED_1'(s(bool,X12))) | p(s(bool,X11))) ) | $spl8),
  inference(subsumption_resolution,[],[f4727,f531])).
fof(f4727,plain,(
  ( ! [X12,X11] : (~p(s(bool,'T_0')) | p(s(bool,X11)) | ~sP46(X11,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.bool.BOUNDED_1'(s(bool,X12)))) ) | $spl8),
  inference(superposition,[],[f1750,f1110])).
fof(f4611,plain,(
  ( ! [X0] : (~sP46('F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.bool.BOUNDED_1'(s(bool,X0)))) ) | $spl8),
  inference(unit_resulting_resolution,[],[f4596,f949])).
fof(f4596,plain,(
  ( ! [X0] : (~sP45('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.bool.BOUNDED_1'(s(bool,X0)),'F_0')) ) | $spl8),
  inference(unit_resulting_resolution,[],[f1048,f4573])).
fof(f4573,plain,(
  ( ! [X12,X11] : (~sP45('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.bool.BOUNDED_1'(s(bool,X12)),X11) | p(s(bool,X11))) ) | $spl8),
  inference(subsumption_resolution,[],[f4566,f531])).
fof(f4566,plain,(
  ( ! [X12,X11] : (~p(s(bool,'T_0')) | p(s(bool,X11)) | ~sP45('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.bool.BOUNDED_1'(s(bool,X12)),X11)) ) | $spl8),
  inference(superposition,[],[f1724,f1110])).
fof(f4449,plain,(
  ( ! [X0] : (~sP44('F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.bool.BOUNDED_1'(s(bool,X0)))) ) | $spl8),
  inference(unit_resulting_resolution,[],[f4434,f927])).
fof(f4434,plain,(
  ( ! [X0] : (~sP42('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.bool.BOUNDED_1'(s(bool,X0)),'F_0')) ) | $spl8),
  inference(unit_resulting_resolution,[],[f1048,f4432])).
fof(f4432,plain,(
  ( ! [X12,X11] : (~sP42('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.bool.BOUNDED_1'(s(bool,X12)),X11) | p(s(bool,X11))) ) | $spl8),
  inference(subsumption_resolution,[],[f4425,f531])).
fof(f4425,plain,(
  ( ! [X12,X11] : (~p(s(bool,'T_0')) | p(s(bool,X11)) | ~sP42('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.bool.BOUNDED_1'(s(bool,X12)),X11)) ) | $spl8),
  inference(superposition,[],[f1677,f1110])).
fof(f4317,plain,(
  ( ! [X0] : (~sP44('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0','const.bool.BOUNDED_1'(s(bool,X0)))) ) | $spl8),
  inference(unit_resulting_resolution,[],[f4302,f928])).
fof(f4302,plain,(
  ( ! [X0] : (~sP43('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.bool.BOUNDED_1'(s(bool,X0)),'F_0')) ) | $spl8),
  inference(unit_resulting_resolution,[],[f1048,f4279])).
fof(f4279,plain,(
  ( ! [X12,X11] : (~sP43('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.bool.BOUNDED_1'(s(bool,X12)),X11) | p(s(bool,X11))) ) | $spl8),
  inference(subsumption_resolution,[],[f4272,f531])).
fof(f4272,plain,(
  ( ! [X12,X11] : (~p(s(bool,'T_0')) | p(s(bool,X11)) | ~sP43('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.bool.BOUNDED_1'(s(bool,X12)),X11)) ) | $spl8),
  inference(superposition,[],[f1659,f1110])).
fof(f2701,plain,(
  ~sP49('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0','T_0') | $spl8),
  inference(unit_resulting_resolution,[],[f531,f1048,f2698,f989])).
fof(f2698,plain,(
  ~sP50('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0','T_0') | $spl8),
  inference(unit_resulting_resolution,[],[f531,f1048,f2023])).
fof(f2689,plain,(
  ~sP50('T_0','F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl8),
  inference(unit_resulting_resolution,[],[f2677,f985])).
fof(f2677,plain,(
  ~sP49('T_0','F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl8),
  inference(unit_resulting_resolution,[],[f1048,f531,f1989])).
fof(f2620,plain,(
  ( ! [X21,X19,X20,X18] : (s('type.pair.prod'(X18,bool),'const.pair.,_2'(s(X18,X19),s(bool,'T_0'))) != s('type.pair.prod'(X18,bool),'const.pair.,_2'(s(X18,X20),s(bool,X21))) | s(bool,X21) = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl8),
  inference(superposition,[],[f651,f1110])).
fof(f2597,plain,(
  ~sP48('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0','F_0') | $spl8),
  inference(unit_resulting_resolution,[],[f2550,f968])).
fof(f2571,plain,(
  ( ! [X21,X19,X20,X18] : (s('type.pair.prod'(bool,X18),'const.pair.,_2'(s(bool,'T_0'),s(X18,X19))) != s('type.pair.prod'(bool,X18),'const.pair.,_2'(s(bool,X20),s(X18,X21))) | s(bool,X20) = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl8),
  inference(superposition,[],[f650,f1110])).
fof(f2550,plain,(
  ~sP47('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0','F_0') | $spl8),
  inference(unit_resulting_resolution,[],[f1048,f1048,f1893])).
fof(f2532,plain,(
  ( ! [X14,X15,X16] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X14))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X15),s('type.list.list'(bool),X16))) | s(bool,X15) = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl8),
  inference(superposition,[],[f606,f1110])).
fof(f2514,plain,(
  ~sP46('F_0','T_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl8),
  inference(unit_resulting_resolution,[],[f2504,f949])).
fof(f2504,plain,(
  ~sP45('T_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0') | $spl8),
  inference(unit_resulting_resolution,[],[f531,f1048,f1834])).
fof(f2492,plain,(
  ~sP44('T_0','F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl8),
  inference(unit_resulting_resolution,[],[f2482,f928])).
fof(f2482,plain,(
  ~sP43('T_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0') | $spl8),
  inference(unit_resulting_resolution,[],[f531,f1048,f1832])).
fof(f2441,plain,(
  ( ! [X0,X1] : (sP50('const.bool.BOUNDED_1'(s(bool,X0)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X1)) ) | $spl8),
  inference(unit_resulting_resolution,[],[f1081,f1274])).
fof(f2294,plain,(
  ~sP42('T_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0') | $spl8),
  inference(unit_resulting_resolution,[],[f1077,f1757,f1052,f1048,f932])).
fof(f2307,plain,(
  sP44('F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0') | $spl8),
  inference(unit_resulting_resolution,[],[f1076,f1073,f1056,f1048,f932])).
fof(f2262,plain,(
  sP44('F_0','F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl8),
  inference(unit_resulting_resolution,[],[f1077,f1054,f1057,f1048,f931])).
fof(f2269,plain,(
  sP44('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0','F_0') | $spl8),
  inference(unit_resulting_resolution,[],[f1075,f1053,f1056,f1048,f931])).
fof(f2220,plain,(
  ~sP42('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'T_0','F_0') | $spl8),
  inference(unit_resulting_resolution,[],[f1060,f1755,f1054,f531,f930])).
fof(f2228,plain,(
  sP44('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'T_0','T_0') | $spl8),
  inference(unit_resulting_resolution,[],[f1060,f1052,f1074,f531,f930])).
fof(f2229,plain,(
  sP44('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'T_0') | $spl8),
  inference(unit_resulting_resolution,[],[f1060,f1073,f1074,f531,f930])).
fof(f2039,plain,(
  ( ! [X0] : (sP50('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'T_0',X0)) ) | $spl8),
  inference(unit_resulting_resolution,[],[f531,f1839])).
fof(f2032,plain,(
  ( ! [X0] : (sP50('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X0,'F_0')) ) | $spl8),
  inference(unit_resulting_resolution,[],[f1048,f1838])).
fof(f2025,plain,(
  ( ! [X0] : (sP48('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'T_0',X0)) ) | $spl8),
  inference(unit_resulting_resolution,[],[f531,f1837])).
fof(f2023,plain,(
  ( ! [X6,X7] : (~sP50('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X7,X6) | p(s(bool,X7)) | ~p(s(bool,X6))) ) | $spl8),
  inference(subsumption_resolution,[],[f2019,f531])).
fof(f2019,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | ~p(s(bool,X6)) | p(s(bool,X7)) | ~sP50('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X7,X6)) ) | $spl8),
  inference(superposition,[],[f997,f1110])).
fof(f2005,plain,(
  ( ! [X0] : (sP48('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X0,'T_0')) ) | $spl8),
  inference(unit_resulting_resolution,[],[f531,f1836])).
fof(f1989,plain,(
  ( ! [X6,X7] : (~sP49(X7,X6,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | ~p(s(bool,X7)) | p(s(bool,X6))) ) | $spl8),
  inference(subsumption_resolution,[],[f1985,f531])).
fof(f1985,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | p(s(bool,X6)) | ~p(s(bool,X7)) | ~sP49(X7,X6,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl8),
  inference(superposition,[],[f990,f1110])).
fof(f1966,plain,(
  ( ! [X0] : (sP40('T_0',X0,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl8),
  inference(unit_resulting_resolution,[],[f531,f1831])).
fof(f1928,plain,(
  ( ! [X6,X7] : (~sP48('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X7,X6) | p(s(bool,X7)) | p(s(bool,X6))) ) | $spl8),
  inference(subsumption_resolution,[],[f1922,f531])).
fof(f1922,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | p(s(bool,X6)) | p(s(bool,X7)) | ~sP48('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X7,X6)) ) | $spl8),
  inference(superposition,[],[f980,f1110])).
fof(f1911,plain,(
  sP1('F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl8),
  inference(unit_resulting_resolution,[],[f1048,f1830])).
fof(f1893,plain,(
  ( ! [X6,X7] : (~sP47('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X6,X7) | p(s(bool,X7)) | p(s(bool,X6))) ) | $spl8),
  inference(subsumption_resolution,[],[f1887,f531])).
fof(f1887,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | p(s(bool,X6)) | p(s(bool,X7)) | ~sP47('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X6,X7)) ) | $spl8),
  inference(superposition,[],[f973,f1110])).
fof(f1876,plain,(
  sP1('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0') | $spl8),
  inference(unit_resulting_resolution,[],[f1048,f1829])).
fof(f1845,plain,(
  ( ! [X43,X44] : (sP48('const.bool.BOUNDED_1'(s(bool,X43)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X44)) ) | $spl8),
  inference(subsumption_resolution,[],[f1795,f531])).
fof(f1795,plain,(
  ( ! [X43,X44] : (~p(s(bool,'T_0')) | sP48('const.bool.BOUNDED_1'(s(bool,X43)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X44)) ) | $spl8),
  inference(superposition,[],[f1222,f1110])).
fof(f1844,plain,(
  ( ! [X41,X42] : (sP48('const.bool.BOUNDED_1'(s(bool,X41)),X42,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl8),
  inference(subsumption_resolution,[],[f1794,f531])).
fof(f1794,plain,(
  ( ! [X41,X42] : (~p(s(bool,'T_0')) | sP48('const.bool.BOUNDED_1'(s(bool,X41)),X42,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl8),
  inference(superposition,[],[f1210,f1110])).
fof(f1843,plain,(
  ( ! [X39,X40] : (sP40('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X39,'const.bool.BOUNDED_1'(s(bool,X40)))) ) | $spl8),
  inference(subsumption_resolution,[],[f1793,f531])).
fof(f1793,plain,(
  ( ! [X39,X40] : (~p(s(bool,'T_0')) | sP40('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X39,'const.bool.BOUNDED_1'(s(bool,X40)))) ) | $spl8),
  inference(superposition,[],[f1187,f1110])).
fof(f1842,plain,(
  ( ! [X37,X38] : (sP40('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.bool.BOUNDED_1'(s(bool,X37)),X38)) ) | $spl8),
  inference(subsumption_resolution,[],[f1792,f531])).
fof(f1792,plain,(
  ( ! [X37,X38] : (~p(s(bool,'T_0')) | sP40('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.bool.BOUNDED_1'(s(bool,X37)),X38)) ) | $spl8),
  inference(superposition,[],[f1182,f1110])).
fof(f1841,plain,(
  ( ! [X31,X32] : (sP48('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X31,X32) | ~sP47('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X31,X32)) ) | $spl8),
  inference(subsumption_resolution,[],[f1785,f531])).
fof(f1785,plain,(
  ( ! [X31,X32] : (~p(s(bool,'T_0')) | ~sP47('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X31,X32) | sP48('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X31,X32)) ) | $spl8),
  inference(superposition,[],[f1029,f1110])).
fof(f1840,plain,(
  ( ! [X30,X29] : (sP50('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X29,X30) | ~sP49('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X29,X30)) ) | $spl8),
  inference(subsumption_resolution,[],[f1784,f531])).
fof(f1784,plain,(
  ( ! [X30,X29] : (~p(s(bool,'T_0')) | ~sP49('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X29,X30) | sP50('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X29,X30)) ) | $spl8),
  inference(superposition,[],[f1028,f1110])).
fof(f1839,plain,(
  ( ! [X28,X27] : (sP50('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X27,X28) | ~p(s(bool,X27))) ) | $spl8),
  inference(subsumption_resolution,[],[f1783,f531])).
fof(f1783,plain,(
  ( ! [X28,X27] : (~p(s(bool,'T_0')) | ~p(s(bool,X27)) | sP50('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X27,X28)) ) | $spl8),
  inference(superposition,[],[f996,f1110])).
fof(f1838,plain,(
  ( ! [X26,X25] : (sP50('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X26,X25) | p(s(bool,X25))) ) | $spl8),
  inference(subsumption_resolution,[],[f1782,f531])).
fof(f1782,plain,(
  ( ! [X26,X25] : (~p(s(bool,'T_0')) | p(s(bool,X25)) | sP50('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X26,X25)) ) | $spl8),
  inference(superposition,[],[f995,f1110])).
fof(f1837,plain,(
  ( ! [X24,X23] : (sP48('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X23,X24) | ~p(s(bool,X23))) ) | $spl8),
  inference(subsumption_resolution,[],[f1781,f531])).
fof(f1781,plain,(
  ( ! [X24,X23] : (~p(s(bool,'T_0')) | ~p(s(bool,X23)) | sP48('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X23,X24)) ) | $spl8),
  inference(superposition,[],[f979,f1110])).
fof(f1836,plain,(
  ( ! [X21,X22] : (sP48('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X22,X21) | ~p(s(bool,X21))) ) | $spl8),
  inference(subsumption_resolution,[],[f1780,f531])).
fof(f1780,plain,(
  ( ! [X21,X22] : (~p(s(bool,'T_0')) | ~p(s(bool,X21)) | sP48('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X22,X21)) ) | $spl8),
  inference(superposition,[],[f978,f1110])).
fof(f1835,plain,(
  ( ! [X19,X20] : (~sP46(X20,X19,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | p(s(bool,X20)) | ~p(s(bool,X19))) ) | $spl8),
  inference(subsumption_resolution,[],[f1779,f531])).
fof(f1779,plain,(
  ( ! [X19,X20] : (~p(s(bool,'T_0')) | ~p(s(bool,X19)) | p(s(bool,X20)) | ~sP46(X20,X19,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl8),
  inference(superposition,[],[f965,f1110])).
fof(f1834,plain,(
  ( ! [X17,X18] : (~sP45(X17,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X18) | p(s(bool,X18)) | ~p(s(bool,X17))) ) | $spl8),
  inference(subsumption_resolution,[],[f1778,f531])).
fof(f1778,plain,(
  ( ! [X17,X18] : (~p(s(bool,'T_0')) | ~p(s(bool,X17)) | p(s(bool,X18)) | ~sP45(X17,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X18)) ) | $spl8),
  inference(superposition,[],[f956,f1110])).
fof(f1833,plain,(
  ( ! [X15,X16] : (~sP42(X15,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X16) | p(s(bool,X16)) | ~p(s(bool,X15))) ) | $spl8),
  inference(subsumption_resolution,[],[f1777,f531])).
fof(f1777,plain,(
  ( ! [X15,X16] : (~p(s(bool,'T_0')) | ~p(s(bool,X15)) | p(s(bool,X16)) | ~sP42(X15,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X16)) ) | $spl8),
  inference(superposition,[],[f937,f1110])).
fof(f1832,plain,(
  ( ! [X14,X13] : (~sP43(X13,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X14) | p(s(bool,X14)) | ~p(s(bool,X13))) ) | $spl8),
  inference(subsumption_resolution,[],[f1776,f531])).
fof(f1776,plain,(
  ( ! [X14,X13] : (~p(s(bool,'T_0')) | ~p(s(bool,X13)) | p(s(bool,X14)) | ~sP43(X13,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X14)) ) | $spl8),
  inference(superposition,[],[f933,f1110])).
fof(f1831,plain,(
  ( ! [X12,X11] : (sP40(X11,X12,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | ~p(s(bool,X11))) ) | $spl8),
  inference(subsumption_resolution,[],[f1775,f531])).
fof(f1775,plain,(
  ( ! [X12,X11] : (~p(s(bool,'T_0')) | ~p(s(bool,X11)) | sP40(X11,X12,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl8),
  inference(superposition,[],[f921,f1110])).
fof(f1830,plain,(
  ( ! [X6] : (sP1(X6,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | p(s(bool,X6))) ) | $spl8),
  inference(subsumption_resolution,[],[f1772,f531])).
fof(f1772,plain,(
  ( ! [X6] : (~p(s(bool,'T_0')) | p(s(bool,X6)) | sP1(X6,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl8),
  inference(superposition,[],[f643,f1110])).
fof(f1829,plain,(
  ( ! [X5] : (sP1('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X5) | p(s(bool,X5))) ) | $spl8),
  inference(subsumption_resolution,[],[f1771,f531])).
fof(f1771,plain,(
  ( ! [X5] : (~p(s(bool,'T_0')) | p(s(bool,X5)) | sP1('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X5)) ) | $spl8),
  inference(superposition,[],[f640,f1110])).
fof(f1755,plain,(
  ~sP44('F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'T_0') | $spl8),
  inference(unit_resulting_resolution,[],[f1048,f1110,f948])).
fof(f1756,plain,(
  sP44('T_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'T_0') | $spl8),
  inference(unit_resulting_resolution,[],[f531,f1110,f946])).
fof(f1757,plain,(
  ~sP44('F_0','T_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl8),
  inference(unit_resulting_resolution,[],[f1048,f1110,f948])).
fof(f1758,plain,(
  sP44('T_0','T_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl8),
  inference(unit_resulting_resolution,[],[f531,f1110,f946])).
fof(f1707,plain,(
  sP46('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'T_0','T_0') | $spl8),
  inference(unit_resulting_resolution,[],[f1078,f531,f531,f952])).
fof(f1293,plain,(
  ( ! [X0] : (sP48('T_0',X0,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl8),
  inference(unit_resulting_resolution,[],[f1079,f531,f1029])).
fof(f1297,plain,(
  ( ! [X0] : (sP48('T_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X0)) ) | $spl8),
  inference(unit_resulting_resolution,[],[f1080,f531,f1029])).
fof(f1272,plain,(
  ( ! [X0] : (sP50('T_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X0)) ) | $spl8),
  inference(unit_resulting_resolution,[],[f1081,f531,f1028])).
fof(f1110,plain,(
  s(bool,'T_0') = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl8),
  inference(unit_resulting_resolution,[],[f1047,f548])).
fof(f1071,plain,(
  ( ! [X0] : (sP0(X0,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl8),
  inference(unit_resulting_resolution,[],[f1047,f624])).
fof(f1072,plain,(
  ( ! [X0] : (sP0('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X0)) ) | $spl8),
  inference(unit_resulting_resolution,[],[f1047,f625])).
fof(f1073,plain,(
  ( ! [X0,X1] : (sP43(X0,X1,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl8),
  inference(unit_resulting_resolution,[],[f1047,f934])).
fof(f1074,plain,(
  ( ! [X0,X1] : (sP42(X0,X1,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl8),
  inference(unit_resulting_resolution,[],[f1047,f938])).
fof(f1075,plain,(
  ( ! [X0,X1] : (sP41(X0,X1,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl8),
  inference(unit_resulting_resolution,[],[f1047,f942])).
fof(f1076,plain,(
  ( ! [X0,X1] : (sP41(X0,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X1)) ) | $spl8),
  inference(unit_resulting_resolution,[],[f1047,f943])).
fof(f1077,plain,(
  ( ! [X0,X1] : (sP41('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X0,X1)) ) | $spl8),
  inference(unit_resulting_resolution,[],[f1047,f944])).
fof(f1078,plain,(
  ( ! [X0,X1] : (sP45(X0,X1,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl8),
  inference(unit_resulting_resolution,[],[f1047,f957])).
fof(f1079,plain,(
  ( ! [X0,X1] : (sP47(X0,X1,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl8),
  inference(unit_resulting_resolution,[],[f1047,f974])).
fof(f1080,plain,(
  ( ! [X0,X1] : (sP47(X0,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X1)) ) | $spl8),
  inference(unit_resulting_resolution,[],[f1047,f975])).
fof(f1081,plain,(
  ( ! [X0,X1] : (sP49(X0,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X1)) ) | $spl8),
  inference(unit_resulting_resolution,[],[f1047,f992])).
fof(f1082,plain,(
  ( ! [X0,X1] : (sP40(X0,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X1)) ) | $spl8),
  inference(unit_resulting_resolution,[],[f1047,f1031])).
fof(f31147,plain,(
  ~sP1('T_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl217),
  inference(cnf_transformation,[],[f31147_D])).
fof(f31147_D,plain,(
  ~sP1('T_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) <=> ~$spl217),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl217])])).
fof(f80020,plain,(
  $false | ($spl8 | $spl208 | $spl214)),
  inference(global_subsumption,[],[f31110,f530,f529,f528,f527,f531,f538,f539,f548,f547,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f668,f689,f709,f708,f707,f706,f726,f721,f720,f719,f718,f736,f731,f730,f729,f728,f739,f738,f743,f742,f747,f746,f752,f751,f758,f757,f756,f777,f772,f771,f770,f769,f784,f783,f782,f781,f801,f796,f795,f794,f793,f811,f806,f805,f804,f803,f814,f813,f818,f817,f822,f821,f827,f826,f833,f832,f831,f850,f849,f848,f847,f867,f862,f861,f860,f859,f877,f872,f871,f870,f869,f880,f879,f884,f883,f888,f887,f893,f892,f899,f898,f897,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1082,f1081,f1080,f1079,f1078,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1086,f1087,f1102,f1110,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1272,f1274,f1297,f1293,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1707,f1706,f1718,f1724,f1728,f1750,f1758,f1757,f1756,f1755,f1829,f1830,f1831,f1832,f1833,f1834,f1835,f1836,f1837,f1838,f1839,f1840,f1841,f1842,f1843,f1844,f1845,f1872,f1876,f1884,f1893,f1894,f1898,f1911,f1928,f1929,f1966,f1970,f1982,f1989,f1990,f1994,f2005,f2023,f2024,f2025,f2032,f2039,f2229,f2228,f2225,f2221,f2220,f2269,f2268,f2262,f2307,f2295,f2294,f2359,f2441,f2482,f2492,f2504,f2514,f2526,f2532,f2533,f2550,f2565,f2571,f2572,f2597,f2608,f2620,f2621,f2677,f2689,f2698,f2701,f2845,f2935,f2940,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f4202,f4261,f4279,f4280,f4284,f4302,f4317,f4334,f4355,f4432,f4433,f4434,f4449,f4468,f4489,f4555,f4573,f4574,f4578,f4596,f4611,f4631,f4652,f4732,f4733,f4761,f4785,f4826,f4844,f4845,f4849,f4868,f4883,f4901,f4922,f4986,f5002,f5003,f5007,f5027,f5039,f5248,f5257,f5321,f5631,f5670,f5689,f6918,f6944,f6940,f7303,f7383,f7384,f7553,f7558,f7561,f7565,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9603,f8248,f8253,f8256,f8260,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f895,f890,f829,f824,f754,f749,f687,f683,f666,f663,f693,f685,f681,f906,f874,f873,f866,f865,f851,f808,f807,f800,f799,f785,f733,f732,f725,f724,f710,f699,f696,f659,f657,f677,f6241,f6256,f6286,f684,f664,f688,f667,f692,f680,f670,f6240,f6247,f6273,f858,f857,f856,f855,f854,f853,f852,f792,f791,f790,f789,f788,f787,f786,f717,f716,f715,f714,f713,f712,f711,f908,f909,f907,f900,f894,f889,f885,f881,f876,f875,f864,f863,f834,f828,f823,f819,f815,f810,f809,f798,f797,f759,f753,f748,f744,f740,f735,f734,f723,f722,f701,f694,f691,f686,f682,f679,f676,f669,f665,f662,f660,f656,f674,f673,f672,f671,f702,f661,f697,f658,f901,f886,f882,f878,f835,f820,f816,f812,f760,f745,f741,f737,f905,f904,f903,f902,f896,f891,f868,f830,f825,f802,f755,f750,f727,f705,f655,f9617,f8277,f8276,f8275,f8274,f8273,f8272,f8271,f8244,f8008,f7582,f7581,f7580,f7579,f7578,f7577,f7576,f7549,f9615,f9614,f9613,f9612,f9611,f9610,f9609,f9606,f9605,f602,f601,f599,f596,f594,f593,f591,f587,f586,f698,f695,f845,f774,f773,f9622,f768,f767,f766,f765,f764,f763,f762,f761,f703,f653,f700,f690,f678,f675,f6952,f776,f775,f2938,f2941,f844,f9602,f9621,f9604,f9600,f6932,f4519,f1019,f846,f843,f842,f841,f840,f839,f838,f837,f836,f780,f779,f778,f704,f654,f7575,f8270,f3884,f3443,f3442,f2877,f2876,f2754,f2753,f2734,f2718,f2706,f2696,f2684,f2672,f2618,f2617,f2607,f2569,f2568,f2564,f2530,f2529,f2525,f2475,f2474,f2443,f2442,f1048,f552,f551,f12824,f12904,f12907,f12983,f12986,f2436,f2339,f8246,f8245,f7551,f7550,f2432,f2330,f2433,f2331,f8010,f8009,f9608,f9607,f604,f603,f2435,f2338,f7836,f16673,f16688,f16743,f16742,f16741,f18050,f18055,f18060,f18061,f19437,f19444,f19447,f18176,f19481,f23012,f23077,f23297,f23337,f24930,f24958,f25011,f25110,f26871,f26970,f27227,f27259,f27301,f27326,f27339,f27356,f27371,f27392,f28264,f28308,f28347,f28423,f28438,f28462,f28472,f28516,f28563,f28704,f28745,f28834,f28842,f28853,f28872,f28884,f28895,f28905,f28938,f28961,f28989,f29007,f29023,f29042,f29061,f29554,f29572,f31002,f31106,f31736,f31731,f31726,f31723,f31667,f31663,f31662,f31658,f31654,f31650,f31649,f31648,f31647,f31646,f31645,f31644,f31641,f31638,f31635,f31634,f31633,f31632,f31626,f31618,f31617,f31611,f31610,f31577,f31576,f31575,f31569,f31563,f31562,f31555,f31538,f31527,f31525,f31524,f31520,f31519,f31518,f31517,f31514,f31512,f31507,f31506,f31501,f31500,f31477,f31476,f31475,f31474,f31471,f31468,f31467,f31466,f31465,f31464,f31459,f31458,f31451,f31446,f31445,f31430,f31429,f31428,f31424,f31423,f31409,f31408,f31407,f31406,f31404,f31403,f31402,f31400,f31862,f31869,f31895,f31903,f31898,f31920,f31931,f31945,f32174,f32464,f32465,f32471,f32472,f32473,f32474,f32475,f32476,f32477,f32478,f32479,f32480,f32481,f32482,f32483,f32484,f32485,f32486,f32487,f32490,f32491,f32492,f32493,f32494,f32495,f32497,f32499,f32410,f32412,f32417,f32420,f32513,f32756,f32774,f32898,f32921,f32987,f33013,f33191,f33204,f33286,f33285,f33284,f33283,f33282,f33281,f33280,f33279,f33278,f33385,f33386,f33387,f33390,f33392,f33463,f33464,f33465,f33468,f33470,f33514,f33521,f33524,f33566,f33650,f33657,f33729,f33764,f33797,f33796,f33795,f34075,f34074,f34073,f34072,f34071,f34133,f34134,f34135,f34136,f34137,f34156,f34155,f34154,f34153,f34639,f34638,f34637,f35862,f35896,f35925,f35956,f35988,f36024,f36056,f36125,f36218,f36221,f36227,f36690,f36689,f37265,f37446,f37467,f37488,f37518,f37545,f37567,f37594,f37624,f37652,f37676,f37694,f37737,f37736,f37735,f37800,f38370,f38398,f38431,f38430,f38429,f38463,f38462,f38461,f38508,f38579,f38650,f38723,f38743,f38816,f38833,f39249,f39338,f39393,f39831,f39908,f39996,f40082,f43476,f43491,f31145,f1047,f55599])).
fof(f80019,plain,(
  $false | ($spl8 | $spl214)),
  inference(global_subsumption,[],[f530,f529,f528,f527,f531,f538,f539,f548,f547,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f668,f689,f709,f708,f707,f706,f726,f721,f720,f719,f718,f736,f731,f730,f729,f728,f739,f738,f743,f742,f747,f746,f752,f751,f758,f757,f756,f777,f772,f771,f770,f769,f784,f783,f782,f781,f801,f796,f795,f794,f793,f811,f806,f805,f804,f803,f814,f813,f818,f817,f822,f821,f827,f826,f833,f832,f831,f850,f849,f848,f847,f867,f862,f861,f860,f859,f877,f872,f871,f870,f869,f880,f879,f884,f883,f888,f887,f893,f892,f899,f898,f897,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1082,f1081,f1080,f1079,f1078,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1086,f1087,f1102,f1110,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1272,f1274,f1297,f1293,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1707,f1706,f1718,f1724,f1728,f1750,f1758,f1757,f1756,f1755,f1829,f1830,f1831,f1832,f1833,f1834,f1835,f1836,f1837,f1838,f1839,f1840,f1841,f1842,f1843,f1844,f1845,f1872,f1876,f1884,f1893,f1894,f1898,f1911,f1928,f1929,f1966,f1970,f1982,f1989,f1990,f1994,f2005,f2023,f2024,f2025,f2032,f2039,f2229,f2228,f2225,f2221,f2220,f2269,f2268,f2262,f2307,f2295,f2294,f2359,f2441,f2482,f2492,f2504,f2514,f2526,f2532,f2533,f2550,f2565,f2571,f2572,f2597,f2608,f2620,f2621,f2677,f2689,f2698,f2701,f2845,f2935,f2940,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f4202,f4261,f4279,f4280,f4284,f4302,f4317,f4334,f4355,f4432,f4433,f4434,f4449,f4468,f4489,f4555,f4573,f4574,f4578,f4596,f4611,f4631,f4652,f4732,f4733,f4761,f4785,f4826,f4844,f4845,f4849,f4868,f4883,f4901,f4922,f4986,f5002,f5003,f5007,f5027,f5039,f5248,f5257,f5321,f5631,f5670,f5689,f6918,f6944,f6940,f7303,f7383,f7384,f7553,f7558,f7561,f7565,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9603,f8248,f8253,f8256,f8260,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f895,f890,f829,f824,f754,f749,f687,f683,f666,f663,f693,f685,f681,f906,f874,f873,f866,f865,f851,f808,f807,f800,f799,f785,f733,f732,f725,f724,f710,f699,f696,f659,f657,f677,f6241,f6256,f6286,f684,f664,f688,f667,f692,f680,f670,f6240,f6247,f6273,f858,f857,f856,f855,f854,f853,f852,f792,f791,f790,f789,f788,f787,f786,f717,f716,f715,f714,f713,f712,f711,f908,f909,f907,f900,f894,f889,f885,f881,f876,f875,f864,f863,f834,f828,f823,f819,f815,f810,f809,f798,f797,f759,f753,f748,f744,f740,f735,f734,f723,f722,f701,f694,f691,f686,f682,f679,f676,f669,f665,f662,f660,f656,f674,f673,f672,f671,f702,f661,f697,f658,f901,f886,f882,f878,f835,f820,f816,f812,f760,f745,f741,f737,f905,f904,f903,f902,f896,f891,f868,f830,f825,f802,f755,f750,f727,f705,f655,f9617,f8277,f8276,f8275,f8274,f8273,f8272,f8271,f8244,f8008,f7582,f7581,f7580,f7579,f7578,f7577,f7576,f7549,f9615,f9614,f9613,f9612,f9611,f9610,f9609,f9606,f9605,f602,f601,f599,f596,f594,f593,f591,f587,f586,f698,f695,f845,f774,f773,f9622,f768,f767,f766,f765,f764,f763,f762,f761,f703,f653,f700,f690,f678,f675,f6952,f776,f775,f2938,f2941,f844,f9602,f9621,f9604,f9600,f6932,f4519,f1019,f846,f843,f842,f841,f840,f839,f838,f837,f836,f780,f779,f778,f704,f654,f7575,f8270,f3884,f3443,f3442,f2877,f2876,f2754,f2753,f2734,f2718,f2706,f2696,f2684,f2672,f2618,f2617,f2607,f2569,f2568,f2564,f2530,f2529,f2525,f2475,f2474,f2443,f2442,f1048,f552,f551,f12824,f12904,f12907,f12983,f12986,f2436,f2339,f8246,f8245,f7551,f7550,f2432,f2330,f2433,f2331,f8010,f8009,f9608,f9607,f604,f603,f2435,f2338,f7836,f16673,f16688,f16743,f16742,f16741,f18050,f18055,f18060,f18061,f19437,f19444,f19447,f18176,f19481,f23012,f23077,f23297,f23337,f24930,f24958,f25011,f25110,f26871,f26970,f27227,f27259,f27301,f27326,f27339,f27356,f27371,f27392,f28264,f28308,f28347,f28423,f28438,f28462,f28472,f28516,f28563,f28704,f28745,f28834,f28842,f28853,f28872,f28884,f28895,f28905,f28938,f28961,f28989,f29007,f29023,f29042,f29061,f29554,f29572,f31002,f31106,f31736,f31731,f31726,f31723,f31667,f31663,f31662,f31658,f31654,f31650,f31649,f31648,f31647,f31646,f31645,f31644,f31641,f31638,f31635,f31634,f31633,f31632,f31626,f31618,f31617,f31611,f31610,f31577,f31576,f31575,f31569,f31563,f31562,f31555,f31538,f31527,f31525,f31524,f31520,f31519,f31518,f31517,f31514,f31512,f31507,f31506,f31501,f31500,f31477,f31476,f31475,f31474,f31471,f31468,f31467,f31466,f31465,f31464,f31459,f31458,f31451,f31446,f31445,f31430,f31429,f31428,f31424,f31423,f31409,f31408,f31407,f31406,f31404,f31403,f31402,f31400,f31862,f31869,f31895,f31903,f31898,f31920,f31931,f31945,f32174,f32464,f32465,f32471,f32472,f32473,f32474,f32475,f32476,f32477,f32478,f32479,f32480,f32481,f32482,f32483,f32484,f32485,f32486,f32487,f32490,f32491,f32492,f32493,f32494,f32495,f32497,f32499,f32410,f32412,f32417,f32420,f32513,f32756,f32774,f32898,f32921,f32987,f33013,f33191,f33204,f33286,f33285,f33284,f33283,f33282,f33281,f33280,f33279,f33278,f33385,f33386,f33387,f33390,f33392,f33463,f33464,f33465,f33468,f33470,f33514,f33521,f33524,f33566,f33650,f33657,f33729,f33764,f33797,f33796,f33795,f34075,f34074,f34073,f34072,f34071,f34133,f34134,f34135,f34136,f34137,f34156,f34155,f34154,f34153,f34639,f34638,f34637,f35862,f35896,f35925,f35956,f35988,f36024,f36056,f36125,f36218,f36221,f36227,f36690,f36689,f37265,f37446,f37467,f37488,f37518,f37545,f37567,f37594,f37624,f37652,f37676,f37694,f37737,f37736,f37735,f37800,f38370,f38398,f38431,f38430,f38429,f38463,f38462,f38461,f38508,f38579,f38650,f38723,f38743,f38816,f38833,f39249,f39338,f39393,f39831,f39908,f39996,f40082,f43476,f43491,f31145,f1047,f55599])).
fof(f80018,plain,(
  $false | ($spl8 | $spl214)),
  inference(global_subsumption,[],[f530,f529,f528,f527,f531,f538,f539,f548,f547,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f668,f689,f709,f708,f707,f706,f726,f721,f720,f719,f718,f736,f731,f730,f729,f728,f739,f738,f743,f742,f747,f746,f752,f751,f758,f757,f756,f777,f772,f771,f770,f769,f784,f783,f782,f781,f801,f796,f795,f794,f793,f811,f806,f805,f804,f803,f814,f813,f818,f817,f822,f821,f827,f826,f833,f832,f831,f850,f849,f848,f847,f867,f862,f861,f860,f859,f877,f872,f871,f870,f869,f880,f879,f884,f883,f888,f887,f893,f892,f899,f898,f897,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1082,f1081,f1080,f1079,f1078,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1086,f1087,f1102,f1110,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1272,f1274,f1297,f1293,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1707,f1706,f1718,f1724,f1728,f1750,f1758,f1757,f1756,f1755,f1829,f1830,f1831,f1832,f1833,f1834,f1835,f1836,f1837,f1838,f1839,f1840,f1841,f1842,f1843,f1844,f1845,f1872,f1876,f1884,f1893,f1894,f1898,f1911,f1928,f1929,f1966,f1970,f1982,f1989,f1990,f1994,f2005,f2023,f2024,f2025,f2032,f2039,f2229,f2228,f2225,f2221,f2220,f2269,f2268,f2262,f2307,f2295,f2294,f2359,f2441,f2482,f2492,f2504,f2514,f2526,f2532,f2533,f2550,f2565,f2571,f2572,f2597,f2608,f2620,f2621,f2677,f2689,f2698,f2701,f2845,f2935,f2940,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f4202,f4261,f4279,f4280,f4284,f4302,f4317,f4334,f4355,f4432,f4433,f4434,f4449,f4468,f4489,f4555,f4573,f4574,f4578,f4596,f4611,f4631,f4652,f4732,f4733,f4761,f4785,f4826,f4844,f4845,f4849,f4868,f4883,f4901,f4922,f4986,f5002,f5003,f5007,f5027,f5039,f5248,f5257,f5321,f5631,f5670,f5689,f6918,f6944,f6940,f7303,f7383,f7384,f7553,f7558,f7561,f7565,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9603,f8248,f8253,f8256,f8260,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f895,f890,f829,f824,f754,f749,f687,f683,f666,f663,f693,f685,f681,f906,f874,f873,f866,f865,f851,f808,f807,f800,f799,f785,f733,f732,f725,f724,f710,f699,f696,f659,f657,f677,f6241,f6256,f6286,f684,f664,f688,f667,f692,f680,f670,f6240,f6247,f6273,f858,f857,f856,f855,f854,f853,f852,f792,f791,f790,f789,f788,f787,f786,f717,f716,f715,f714,f713,f712,f711,f908,f909,f907,f900,f894,f889,f885,f881,f876,f875,f864,f863,f834,f828,f823,f819,f815,f810,f809,f798,f797,f759,f753,f748,f744,f740,f735,f734,f723,f722,f701,f694,f691,f686,f682,f679,f676,f669,f665,f662,f660,f656,f674,f673,f672,f671,f702,f661,f697,f658,f901,f886,f882,f878,f835,f820,f816,f812,f760,f745,f741,f737,f905,f904,f903,f902,f896,f891,f868,f830,f825,f802,f755,f750,f727,f705,f655,f9617,f8277,f8276,f8275,f8274,f8273,f8272,f8271,f8244,f8008,f7582,f7581,f7580,f7579,f7578,f7577,f7576,f7549,f9615,f9614,f9613,f9612,f9611,f9610,f9609,f9606,f9605,f602,f601,f599,f596,f594,f593,f591,f587,f586,f698,f695,f845,f774,f773,f9622,f768,f767,f766,f765,f764,f763,f762,f761,f703,f653,f700,f690,f678,f675,f6952,f776,f775,f2938,f2941,f844,f9602,f9621,f9604,f9600,f6932,f4519,f1019,f846,f843,f842,f841,f840,f839,f838,f837,f836,f780,f779,f778,f704,f654,f7575,f8270,f3884,f3443,f3442,f2877,f2876,f2754,f2753,f2734,f2718,f2706,f2696,f2684,f2672,f2618,f2617,f2607,f2569,f2568,f2564,f2530,f2529,f2525,f2475,f2474,f2443,f2442,f1048,f552,f551,f12824,f12904,f12907,f12983,f12986,f2436,f2339,f8246,f8245,f7551,f7550,f2432,f2330,f2433,f2331,f8010,f8009,f9608,f9607,f604,f603,f2435,f2338,f7836,f16673,f16688,f16743,f16742,f16741,f18050,f18055,f18060,f18061,f19437,f19444,f19447,f18176,f19481,f23012,f23077,f23297,f23337,f24930,f24958,f25011,f25110,f26871,f26970,f27227,f27259,f27301,f27326,f27339,f27356,f27371,f27392,f28264,f28308,f28347,f28423,f28438,f28462,f28472,f28516,f28563,f28704,f28745,f28834,f28842,f28853,f28872,f28884,f28895,f28905,f28938,f28961,f28989,f29007,f29023,f29042,f29061,f29554,f29572,f31002,f31106,f31736,f31731,f31726,f31723,f31667,f31663,f31662,f31658,f31654,f31650,f31649,f31648,f31647,f31646,f31645,f31644,f31641,f31638,f31635,f31634,f31633,f31632,f31626,f31618,f31617,f31611,f31610,f31577,f31576,f31575,f31569,f31563,f31562,f31555,f31538,f31527,f31525,f31524,f31520,f31519,f31518,f31517,f31514,f31512,f31507,f31506,f31501,f31500,f31477,f31476,f31475,f31474,f31471,f31468,f31467,f31466,f31465,f31464,f31459,f31458,f31451,f31446,f31445,f31430,f31429,f31428,f31424,f31423,f31409,f31408,f31407,f31406,f31404,f31403,f31402,f31400,f31862,f31869,f31895,f31903,f31898,f31920,f31931,f31945,f32174,f32464,f32465,f32471,f32472,f32473,f32474,f32475,f32476,f32477,f32478,f32479,f32480,f32481,f32482,f32483,f32484,f32485,f32486,f32487,f32490,f32491,f32492,f32493,f32494,f32495,f32497,f32499,f32410,f32412,f32417,f32420,f32513,f32756,f32774,f32898,f32921,f32987,f33013,f33191,f33204,f33286,f33285,f33284,f33283,f33282,f33281,f33280,f33279,f33278,f33385,f33386,f33387,f33390,f33392,f33463,f33464,f33465,f33468,f33470,f33514,f33521,f33524,f33566,f33650,f33657,f33729,f33764,f33797,f33796,f33795,f34075,f34074,f34073,f34072,f34071,f34133,f34134,f34135,f34136,f34137,f34156,f34155,f34154,f34153,f34639,f34638,f34637,f35862,f35896,f35925,f35956,f35988,f36024,f36056,f36125,f36218,f36221,f36227,f36690,f36689,f37265,f37446,f37467,f37488,f37518,f37545,f37567,f37594,f37624,f37652,f37676,f37694,f37737,f37736,f37735,f37800,f38370,f38398,f38431,f38430,f38429,f38463,f38462,f38461,f38508,f38579,f38650,f38723,f38743,f38816,f38833,f39249,f39338,f39393,f39831,f39908,f39996,f40082,f43476,f43491,f31145,f55599,f1047])).
fof(f80017,plain,(
  $false | ($spl4 | $spl8 | $spl214)),
  inference(global_subsumption,[],[f1043,f530,f529,f528,f527,f531,f538,f539,f548,f547,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f668,f689,f709,f708,f707,f706,f726,f721,f720,f719,f718,f736,f731,f730,f729,f728,f739,f738,f743,f742,f747,f746,f752,f751,f758,f757,f756,f777,f772,f771,f770,f769,f784,f783,f782,f781,f801,f796,f795,f794,f793,f811,f806,f805,f804,f803,f814,f813,f818,f817,f822,f821,f827,f826,f833,f832,f831,f850,f849,f848,f847,f867,f862,f861,f860,f859,f877,f872,f871,f870,f869,f880,f879,f884,f883,f888,f887,f893,f892,f899,f898,f897,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1082,f1081,f1080,f1079,f1078,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1086,f1087,f1102,f1110,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1272,f1274,f1297,f1293,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1707,f1706,f1718,f1724,f1728,f1750,f1758,f1757,f1756,f1755,f1829,f1830,f1831,f1832,f1833,f1834,f1835,f1836,f1837,f1838,f1839,f1840,f1841,f1842,f1843,f1844,f1845,f1872,f1876,f1884,f1893,f1894,f1898,f1911,f1928,f1929,f1966,f1970,f1982,f1989,f1990,f1994,f2005,f2023,f2024,f2025,f2032,f2039,f2229,f2228,f2225,f2221,f2220,f2269,f2268,f2262,f2307,f2295,f2294,f2359,f2441,f2482,f2492,f2504,f2514,f2526,f2532,f2533,f2550,f2565,f2571,f2572,f2597,f2608,f2620,f2621,f2677,f2689,f2698,f2701,f2845,f2935,f2940,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f4202,f4261,f4279,f4280,f4284,f4302,f4317,f4334,f4355,f4432,f4433,f4434,f4449,f4468,f4489,f4555,f4573,f4574,f4578,f4596,f4611,f4631,f4652,f4732,f4733,f4761,f4785,f4826,f4844,f4845,f4849,f4868,f4883,f4901,f4922,f4986,f5002,f5003,f5007,f5027,f5039,f5248,f5257,f5321,f5631,f5670,f5689,f6918,f6944,f6940,f7303,f7383,f7384,f7553,f7558,f7561,f7565,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9603,f8248,f8253,f8256,f8260,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f895,f890,f829,f824,f754,f749,f687,f683,f666,f663,f693,f685,f681,f906,f874,f873,f866,f865,f851,f808,f807,f800,f799,f785,f733,f732,f725,f724,f710,f699,f696,f659,f657,f677,f6241,f6256,f6286,f684,f664,f688,f667,f692,f680,f670,f6240,f6247,f6273,f858,f857,f856,f855,f854,f853,f852,f792,f791,f790,f789,f788,f787,f786,f717,f716,f715,f714,f713,f712,f711,f908,f909,f907,f900,f894,f889,f885,f881,f876,f875,f864,f863,f834,f828,f823,f819,f815,f810,f809,f798,f797,f759,f753,f748,f744,f740,f735,f734,f723,f722,f701,f694,f691,f686,f682,f679,f676,f669,f665,f662,f660,f656,f674,f673,f672,f671,f702,f661,f697,f658,f901,f886,f882,f878,f835,f820,f816,f812,f760,f745,f741,f737,f905,f904,f903,f902,f896,f891,f868,f830,f825,f802,f755,f750,f727,f705,f655,f9617,f8277,f8276,f8275,f8274,f8273,f8272,f8271,f8244,f8008,f7582,f7581,f7580,f7579,f7578,f7577,f7576,f7549,f9615,f9614,f9613,f9612,f9611,f9610,f9609,f9606,f9605,f602,f601,f599,f596,f594,f593,f591,f587,f586,f698,f695,f845,f774,f773,f9622,f768,f767,f766,f765,f764,f763,f762,f761,f703,f653,f700,f690,f678,f675,f6952,f776,f775,f2938,f2941,f844,f9602,f9621,f9604,f9600,f6932,f4519,f1019,f846,f843,f842,f841,f840,f839,f838,f837,f836,f780,f779,f778,f704,f654,f7575,f8270,f3884,f3443,f3442,f2877,f2876,f2754,f2753,f2734,f2718,f2706,f2696,f2684,f2672,f2618,f2617,f2607,f2569,f2568,f2564,f2530,f2529,f2525,f2475,f2474,f2443,f2442,f1048,f552,f551,f12824,f12904,f12907,f12983,f12986,f2436,f2339,f8246,f8245,f7551,f7550,f2432,f2330,f2433,f2331,f8010,f8009,f9608,f9607,f604,f603,f2435,f2338,f7836,f16673,f16688,f16743,f16742,f16741,f18050,f18055,f18060,f18061,f19437,f19444,f19447,f18176,f19481,f23012,f23077,f23297,f23337,f24930,f24958,f25011,f25110,f26871,f26970,f27227,f27259,f27301,f27326,f27339,f27356,f27371,f27392,f28264,f28308,f28347,f28423,f28438,f28462,f28472,f28516,f28563,f28704,f28745,f28834,f28842,f28853,f28872,f28884,f28895,f28905,f28938,f28961,f28989,f29007,f29023,f29042,f29061,f29554,f29572,f31002,f31106,f31736,f31731,f31726,f31723,f31667,f31663,f31662,f31658,f31654,f31650,f31649,f31648,f31647,f31646,f31645,f31644,f31641,f31638,f31635,f31634,f31633,f31632,f31626,f31618,f31617,f31611,f31610,f31577,f31576,f31575,f31569,f31563,f31562,f31555,f31538,f31527,f31525,f31524,f31520,f31519,f31518,f31517,f31514,f31512,f31507,f31506,f31501,f31500,f31477,f31476,f31475,f31474,f31471,f31468,f31467,f31466,f31465,f31464,f31459,f31458,f31451,f31446,f31445,f31430,f31429,f31428,f31424,f31423,f31409,f31408,f31407,f31406,f31404,f31403,f31402,f31400,f31862,f31869,f31895,f31903,f31898,f31920,f31931,f31945,f32174,f32464,f32465,f32471,f32472,f32473,f32474,f32475,f32476,f32477,f32478,f32479,f32480,f32481,f32482,f32483,f32484,f32485,f32486,f32487,f32490,f32491,f32492,f32493,f32494,f32495,f32497,f32499,f32410,f32412,f32417,f32420,f32513,f32756,f32774,f32898,f32921,f32987,f33013,f33191,f33204,f33286,f33285,f33284,f33283,f33282,f33281,f33280,f33279,f33278,f33385,f33386,f33387,f33390,f33392,f33463,f33464,f33465,f33468,f33470,f33514,f33521,f33524,f33566,f33650,f33657,f33729,f33764,f33797,f33796,f33795,f34075,f34074,f34073,f34072,f34071,f34133,f34134,f34135,f34136,f34137,f34156,f34155,f34154,f34153,f34639,f34638,f34637,f35862,f35896,f35925,f35956,f35988,f36024,f36056,f36125,f36218,f36221,f36227,f36690,f36689,f37265,f37446,f37467,f37488,f37518,f37545,f37567,f37594,f37624,f37652,f37676,f37694,f37737,f37736,f37735,f37800,f38370,f38398,f38431,f38430,f38429,f38463,f38462,f38461,f38508,f38579,f38650,f38723,f38743,f38816,f38833,f39249,f39338,f39393,f39831,f39908,f39996,f40082,f43476,f43491,f31145,f55599,f1047])).
fof(f80016,plain,(
  $false | ($spl1 | $spl8 | $spl214)),
  inference(global_subsumption,[],[f1040,f530,f529,f528,f527,f531,f538,f539,f548,f547,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f668,f689,f709,f708,f707,f706,f726,f721,f720,f719,f718,f736,f731,f730,f729,f728,f739,f738,f743,f742,f747,f746,f752,f751,f758,f757,f756,f777,f772,f771,f770,f769,f784,f783,f782,f781,f801,f796,f795,f794,f793,f811,f806,f805,f804,f803,f814,f813,f818,f817,f822,f821,f827,f826,f833,f832,f831,f850,f849,f848,f847,f867,f862,f861,f860,f859,f877,f872,f871,f870,f869,f880,f879,f884,f883,f888,f887,f893,f892,f899,f898,f897,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1082,f1081,f1080,f1079,f1078,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1086,f1087,f1102,f1110,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1272,f1274,f1297,f1293,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1707,f1706,f1718,f1724,f1728,f1750,f1758,f1757,f1756,f1755,f1829,f1830,f1831,f1832,f1833,f1834,f1835,f1836,f1837,f1838,f1839,f1840,f1841,f1842,f1843,f1844,f1845,f1872,f1876,f1884,f1893,f1894,f1898,f1911,f1928,f1929,f1966,f1970,f1982,f1989,f1990,f1994,f2005,f2023,f2024,f2025,f2032,f2039,f2229,f2228,f2225,f2221,f2220,f2269,f2268,f2262,f2307,f2295,f2294,f2359,f2441,f2482,f2492,f2504,f2514,f2526,f2532,f2533,f2550,f2565,f2571,f2572,f2597,f2608,f2620,f2621,f2677,f2689,f2698,f2701,f2845,f2935,f2940,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f4202,f4261,f4279,f4280,f4284,f4302,f4317,f4334,f4355,f4432,f4433,f4434,f4449,f4468,f4489,f4555,f4573,f4574,f4578,f4596,f4611,f4631,f4652,f4732,f4733,f4761,f4785,f4826,f4844,f4845,f4849,f4868,f4883,f4901,f4922,f4986,f5002,f5003,f5007,f5027,f5039,f5248,f5257,f5321,f5631,f5670,f5689,f6918,f6944,f6940,f7303,f7383,f7384,f7553,f7558,f7561,f7565,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9603,f8248,f8253,f8256,f8260,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f895,f890,f829,f824,f754,f749,f687,f683,f666,f663,f693,f685,f681,f906,f874,f873,f866,f865,f851,f808,f807,f800,f799,f785,f733,f732,f725,f724,f710,f699,f696,f659,f657,f677,f6241,f6256,f6286,f684,f664,f688,f667,f692,f680,f670,f6240,f6247,f6273,f858,f857,f856,f855,f854,f853,f852,f792,f791,f790,f789,f788,f787,f786,f717,f716,f715,f714,f713,f712,f711,f908,f909,f907,f900,f894,f889,f885,f881,f876,f875,f864,f863,f834,f828,f823,f819,f815,f810,f809,f798,f797,f759,f753,f748,f744,f740,f735,f734,f723,f722,f701,f694,f691,f686,f682,f679,f676,f669,f665,f662,f660,f656,f674,f673,f672,f671,f702,f661,f697,f658,f901,f886,f882,f878,f835,f820,f816,f812,f760,f745,f741,f737,f905,f904,f903,f902,f896,f891,f868,f830,f825,f802,f755,f750,f727,f705,f655,f9617,f8277,f8276,f8275,f8274,f8273,f8272,f8271,f8244,f8008,f7582,f7581,f7580,f7579,f7578,f7577,f7576,f7549,f9615,f9614,f9613,f9612,f9611,f9610,f9609,f9606,f9605,f602,f601,f599,f596,f594,f593,f591,f587,f586,f698,f695,f845,f774,f773,f9622,f768,f767,f766,f765,f764,f763,f762,f761,f703,f653,f700,f690,f678,f675,f6952,f776,f775,f2938,f2941,f844,f9602,f9621,f9604,f9600,f6932,f4519,f1019,f846,f843,f842,f841,f840,f839,f838,f837,f836,f780,f779,f778,f704,f654,f7575,f8270,f3884,f3443,f3442,f2877,f2876,f2754,f2753,f2734,f2718,f2706,f2696,f2684,f2672,f2618,f2617,f2607,f2569,f2568,f2564,f2530,f2529,f2525,f2475,f2474,f2443,f2442,f1048,f552,f551,f12824,f12904,f12907,f12983,f12986,f2436,f2339,f8246,f8245,f7551,f7550,f2432,f2330,f2433,f2331,f8010,f8009,f9608,f9607,f604,f603,f2435,f2338,f7836,f16673,f16688,f16743,f16742,f16741,f18050,f18055,f18060,f18061,f19437,f19444,f19447,f18176,f19481,f23012,f23077,f23297,f23337,f24930,f24958,f25011,f25110,f26871,f26970,f27227,f27259,f27301,f27326,f27339,f27356,f27371,f27392,f28264,f28308,f28347,f28423,f28438,f28462,f28472,f28516,f28563,f28704,f28745,f28834,f28842,f28853,f28872,f28884,f28895,f28905,f28938,f28961,f28989,f29007,f29023,f29042,f29061,f29554,f29572,f31002,f31106,f31736,f31731,f31726,f31723,f31667,f31663,f31662,f31658,f31654,f31650,f31649,f31648,f31647,f31646,f31645,f31644,f31641,f31638,f31635,f31634,f31633,f31632,f31626,f31618,f31617,f31611,f31610,f31577,f31576,f31575,f31569,f31563,f31562,f31555,f31538,f31527,f31525,f31524,f31520,f31519,f31518,f31517,f31514,f31512,f31507,f31506,f31501,f31500,f31477,f31476,f31475,f31474,f31471,f31468,f31467,f31466,f31465,f31464,f31459,f31458,f31451,f31446,f31445,f31430,f31429,f31428,f31424,f31423,f31409,f31408,f31407,f31406,f31404,f31403,f31402,f31400,f31862,f31869,f31895,f31903,f31898,f31920,f31931,f31945,f32174,f32464,f32465,f32471,f32472,f32473,f32474,f32475,f32476,f32477,f32478,f32479,f32480,f32481,f32482,f32483,f32484,f32485,f32486,f32487,f32490,f32491,f32492,f32493,f32494,f32495,f32497,f32499,f32410,f32412,f32417,f32420,f32513,f32756,f32774,f32898,f32921,f32987,f33013,f33191,f33204,f33286,f33285,f33284,f33283,f33282,f33281,f33280,f33279,f33278,f33385,f33386,f33387,f33390,f33392,f33463,f33464,f33465,f33468,f33470,f33514,f33521,f33524,f33566,f33650,f33657,f33729,f33764,f33797,f33796,f33795,f34075,f34074,f34073,f34072,f34071,f34133,f34134,f34135,f34136,f34137,f34156,f34155,f34154,f34153,f34639,f34638,f34637,f35862,f35896,f35925,f35956,f35988,f36024,f36056,f36125,f36218,f36221,f36227,f36690,f36689,f37265,f37446,f37467,f37488,f37518,f37545,f37567,f37594,f37624,f37652,f37676,f37694,f37737,f37736,f37735,f37800,f38370,f38398,f38431,f38430,f38429,f38463,f38462,f38461,f38508,f38579,f38650,f38723,f38743,f38816,f38833,f39249,f39338,f39393,f39831,f39908,f39996,f40082,f43476,f43491,f31145,f55599,f1047])).
fof(f80015,plain,(
  $false | ($spl1 | $spl8 | $spl216)),
  inference(global_subsumption,[],[f1040,f530,f529,f528,f527,f531,f538,f539,f548,f547,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f668,f689,f709,f708,f707,f706,f726,f721,f720,f719,f718,f736,f731,f730,f729,f728,f739,f738,f743,f742,f747,f746,f752,f751,f758,f757,f756,f777,f772,f771,f770,f769,f784,f783,f782,f781,f801,f796,f795,f794,f793,f811,f806,f805,f804,f803,f814,f813,f818,f817,f822,f821,f827,f826,f833,f832,f831,f850,f849,f848,f847,f867,f862,f861,f860,f859,f877,f872,f871,f870,f869,f880,f879,f884,f883,f888,f887,f893,f892,f899,f898,f897,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1082,f1081,f1080,f1079,f1078,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1086,f1087,f1102,f1110,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1272,f1274,f1297,f1293,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1707,f1706,f1718,f1724,f1728,f1750,f1758,f1757,f1756,f1755,f1829,f1830,f1831,f1832,f1833,f1834,f1835,f1836,f1837,f1838,f1839,f1840,f1841,f1842,f1843,f1844,f1845,f1872,f1876,f1884,f1893,f1894,f1898,f1911,f1928,f1929,f1966,f1970,f1982,f1989,f1990,f1994,f2005,f2023,f2024,f2025,f2032,f2039,f2229,f2228,f2225,f2221,f2220,f2269,f2268,f2262,f2307,f2295,f2294,f2359,f2441,f2482,f2492,f2504,f2514,f2526,f2532,f2533,f2550,f2565,f2571,f2572,f2597,f2608,f2620,f2621,f2677,f2689,f2698,f2701,f2845,f2935,f2940,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f4202,f4261,f4279,f4280,f4284,f4302,f4317,f4334,f4355,f4432,f4433,f4434,f4449,f4468,f4489,f4555,f4573,f4574,f4578,f4596,f4611,f4631,f4652,f4732,f4733,f4761,f4785,f4826,f4844,f4845,f4849,f4868,f4883,f4901,f4922,f4986,f5002,f5003,f5007,f5027,f5039,f5248,f5257,f5321,f5631,f5670,f5689,f6918,f6944,f6940,f7303,f7383,f7384,f7553,f7558,f7561,f7565,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9603,f8248,f8253,f8256,f8260,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f895,f890,f829,f824,f754,f749,f687,f683,f666,f663,f693,f685,f681,f906,f874,f873,f866,f865,f851,f808,f807,f800,f799,f785,f733,f732,f725,f724,f710,f699,f696,f659,f657,f677,f6241,f6256,f6286,f684,f664,f688,f667,f692,f680,f670,f6240,f6247,f6273,f858,f857,f856,f855,f854,f853,f852,f792,f791,f790,f789,f788,f787,f786,f717,f716,f715,f714,f713,f712,f711,f908,f909,f907,f900,f894,f889,f885,f881,f876,f875,f864,f863,f834,f828,f823,f819,f815,f810,f809,f798,f797,f759,f753,f748,f744,f740,f735,f734,f723,f722,f701,f694,f691,f686,f682,f679,f676,f669,f665,f662,f660,f656,f674,f673,f672,f671,f702,f661,f697,f658,f901,f886,f882,f878,f835,f820,f816,f812,f760,f745,f741,f737,f905,f904,f903,f902,f896,f891,f868,f830,f825,f802,f755,f750,f727,f705,f655,f9617,f8277,f8276,f8275,f8274,f8273,f8272,f8271,f8244,f8008,f7582,f7581,f7580,f7579,f7578,f7577,f7576,f7549,f9615,f9614,f9613,f9612,f9611,f9610,f9609,f9606,f9605,f602,f601,f599,f596,f594,f593,f591,f587,f586,f698,f695,f845,f774,f773,f9622,f768,f767,f766,f765,f764,f763,f762,f761,f703,f653,f700,f690,f678,f675,f6952,f776,f775,f2938,f2941,f844,f9602,f9621,f9604,f9600,f6932,f4519,f1019,f846,f843,f842,f841,f840,f839,f838,f837,f836,f780,f779,f778,f704,f654,f7575,f8270,f3884,f3443,f3442,f2877,f2876,f2754,f2753,f2734,f2718,f2706,f2696,f2684,f2672,f2618,f2617,f2607,f2569,f2568,f2564,f2530,f2529,f2525,f2475,f2474,f2443,f2442,f1048,f552,f551,f12824,f12904,f12907,f12983,f12986,f2436,f2339,f8246,f8245,f7551,f7550,f2432,f2330,f2433,f2331,f8010,f8009,f9608,f9607,f604,f603,f2435,f2338,f7836,f16673,f16688,f16743,f16742,f16741,f18050,f18055,f18060,f18061,f19437,f19444,f19447,f18176,f19481,f23012,f23077,f23297,f23337,f24930,f24958,f25011,f25110,f26871,f26970,f27227,f27259,f27301,f27326,f27339,f27356,f27371,f27392,f28264,f28308,f28347,f28423,f28438,f28462,f28472,f28516,f28563,f28704,f28745,f28834,f28842,f28853,f28872,f28884,f28895,f28905,f28938,f28961,f28989,f29007,f29023,f29042,f29061,f29554,f29572,f31002,f31106,f31736,f31731,f31726,f31723,f31667,f31663,f31662,f31658,f31654,f31650,f31649,f31648,f31647,f31646,f31645,f31644,f31641,f31638,f31635,f31634,f31633,f31632,f31626,f31618,f31617,f31611,f31610,f31577,f31576,f31575,f31569,f31563,f31562,f31555,f31538,f31527,f31525,f31524,f31520,f31519,f31518,f31517,f31514,f31512,f31507,f31506,f31501,f31500,f31477,f31476,f31475,f31474,f31471,f31468,f31467,f31466,f31465,f31464,f31459,f31458,f31451,f31446,f31445,f31430,f31429,f31428,f31424,f31423,f31409,f31408,f31407,f31406,f31404,f31403,f31402,f31400,f31862,f31869,f31895,f31903,f31898,f31920,f31931,f31945,f32174,f32464,f32465,f32471,f32472,f32473,f32474,f32475,f32476,f32477,f32478,f32479,f32480,f32481,f32482,f32483,f32484,f32485,f32486,f32487,f32490,f32491,f32492,f32493,f32494,f32495,f32497,f32499,f32410,f32412,f32417,f32420,f32513,f32756,f32774,f32898,f32921,f32987,f33013,f33191,f33204,f33286,f33285,f33284,f33283,f33282,f33281,f33280,f33279,f33278,f33385,f33386,f33387,f33390,f33392,f33463,f33464,f33465,f33468,f33470,f33514,f33521,f33524,f33566,f33650,f33657,f33729,f33764,f33797,f33796,f33795,f34075,f34074,f34073,f34072,f34071,f34133,f34134,f34135,f34136,f34137,f34156,f34155,f34154,f34153,f34639,f34638,f34637,f35862,f35896,f35925,f35956,f35988,f36024,f36056,f36125,f36218,f36221,f36227,f36690,f36689,f37265,f37446,f37467,f37488,f37518,f37545,f37567,f37594,f37624,f37652,f37676,f37694,f37737,f37736,f37735,f37800,f38370,f38398,f38431,f38430,f38429,f38463,f38462,f38461,f38508,f38579,f38650,f38723,f38743,f38816,f38833,f39249,f39338,f39393,f39831,f39908,f39996,f40082,f43476,f43491,f31148,f55601,f1047])).
fof(f55601,plain,(
  ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) | $spl216),
  inference(unit_resulting_resolution,[],[f531,f31148,f639])).
fof(f80014,plain,(
  $false | ($spl4 | $spl8 | $spl216)),
  inference(global_subsumption,[],[f1043,f530,f529,f528,f527,f531,f538,f539,f548,f547,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f668,f689,f709,f708,f707,f706,f726,f721,f720,f719,f718,f736,f731,f730,f729,f728,f739,f738,f743,f742,f747,f746,f752,f751,f758,f757,f756,f777,f772,f771,f770,f769,f784,f783,f782,f781,f801,f796,f795,f794,f793,f811,f806,f805,f804,f803,f814,f813,f818,f817,f822,f821,f827,f826,f833,f832,f831,f850,f849,f848,f847,f867,f862,f861,f860,f859,f877,f872,f871,f870,f869,f880,f879,f884,f883,f888,f887,f893,f892,f899,f898,f897,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1082,f1081,f1080,f1079,f1078,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1086,f1087,f1102,f1110,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1272,f1274,f1297,f1293,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1707,f1706,f1718,f1724,f1728,f1750,f1758,f1757,f1756,f1755,f1829,f1830,f1831,f1832,f1833,f1834,f1835,f1836,f1837,f1838,f1839,f1840,f1841,f1842,f1843,f1844,f1845,f1872,f1876,f1884,f1893,f1894,f1898,f1911,f1928,f1929,f1966,f1970,f1982,f1989,f1990,f1994,f2005,f2023,f2024,f2025,f2032,f2039,f2229,f2228,f2225,f2221,f2220,f2269,f2268,f2262,f2307,f2295,f2294,f2359,f2441,f2482,f2492,f2504,f2514,f2526,f2532,f2533,f2550,f2565,f2571,f2572,f2597,f2608,f2620,f2621,f2677,f2689,f2698,f2701,f2845,f2935,f2940,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f4202,f4261,f4279,f4280,f4284,f4302,f4317,f4334,f4355,f4432,f4433,f4434,f4449,f4468,f4489,f4555,f4573,f4574,f4578,f4596,f4611,f4631,f4652,f4732,f4733,f4761,f4785,f4826,f4844,f4845,f4849,f4868,f4883,f4901,f4922,f4986,f5002,f5003,f5007,f5027,f5039,f5248,f5257,f5321,f5631,f5670,f5689,f6918,f6944,f6940,f7303,f7383,f7384,f7553,f7558,f7561,f7565,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9603,f8248,f8253,f8256,f8260,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f895,f890,f829,f824,f754,f749,f687,f683,f666,f663,f693,f685,f681,f906,f874,f873,f866,f865,f851,f808,f807,f800,f799,f785,f733,f732,f725,f724,f710,f699,f696,f659,f657,f677,f6241,f6256,f6286,f684,f664,f688,f667,f692,f680,f670,f6240,f6247,f6273,f858,f857,f856,f855,f854,f853,f852,f792,f791,f790,f789,f788,f787,f786,f717,f716,f715,f714,f713,f712,f711,f908,f909,f907,f900,f894,f889,f885,f881,f876,f875,f864,f863,f834,f828,f823,f819,f815,f810,f809,f798,f797,f759,f753,f748,f744,f740,f735,f734,f723,f722,f701,f694,f691,f686,f682,f679,f676,f669,f665,f662,f660,f656,f674,f673,f672,f671,f702,f661,f697,f658,f901,f886,f882,f878,f835,f820,f816,f812,f760,f745,f741,f737,f905,f904,f903,f902,f896,f891,f868,f830,f825,f802,f755,f750,f727,f705,f655,f9617,f8277,f8276,f8275,f8274,f8273,f8272,f8271,f8244,f8008,f7582,f7581,f7580,f7579,f7578,f7577,f7576,f7549,f9615,f9614,f9613,f9612,f9611,f9610,f9609,f9606,f9605,f602,f601,f599,f596,f594,f593,f591,f587,f586,f698,f695,f845,f774,f773,f9622,f768,f767,f766,f765,f764,f763,f762,f761,f703,f653,f700,f690,f678,f675,f6952,f776,f775,f2938,f2941,f844,f9602,f9621,f9604,f9600,f6932,f4519,f1019,f846,f843,f842,f841,f840,f839,f838,f837,f836,f780,f779,f778,f704,f654,f7575,f8270,f3884,f3443,f3442,f2877,f2876,f2754,f2753,f2734,f2718,f2706,f2696,f2684,f2672,f2618,f2617,f2607,f2569,f2568,f2564,f2530,f2529,f2525,f2475,f2474,f2443,f2442,f1048,f552,f551,f12824,f12904,f12907,f12983,f12986,f2436,f2339,f8246,f8245,f7551,f7550,f2432,f2330,f2433,f2331,f8010,f8009,f9608,f9607,f604,f603,f2435,f2338,f7836,f16673,f16688,f16743,f16742,f16741,f18050,f18055,f18060,f18061,f19437,f19444,f19447,f18176,f19481,f23012,f23077,f23297,f23337,f24930,f24958,f25011,f25110,f26871,f26970,f27227,f27259,f27301,f27326,f27339,f27356,f27371,f27392,f28264,f28308,f28347,f28423,f28438,f28462,f28472,f28516,f28563,f28704,f28745,f28834,f28842,f28853,f28872,f28884,f28895,f28905,f28938,f28961,f28989,f29007,f29023,f29042,f29061,f29554,f29572,f31002,f31106,f31736,f31731,f31726,f31723,f31667,f31663,f31662,f31658,f31654,f31650,f31649,f31648,f31647,f31646,f31645,f31644,f31641,f31638,f31635,f31634,f31633,f31632,f31626,f31618,f31617,f31611,f31610,f31577,f31576,f31575,f31569,f31563,f31562,f31555,f31538,f31527,f31525,f31524,f31520,f31519,f31518,f31517,f31514,f31512,f31507,f31506,f31501,f31500,f31477,f31476,f31475,f31474,f31471,f31468,f31467,f31466,f31465,f31464,f31459,f31458,f31451,f31446,f31445,f31430,f31429,f31428,f31424,f31423,f31409,f31408,f31407,f31406,f31404,f31403,f31402,f31400,f31862,f31869,f31895,f31903,f31898,f31920,f31931,f31945,f32174,f32464,f32465,f32471,f32472,f32473,f32474,f32475,f32476,f32477,f32478,f32479,f32480,f32481,f32482,f32483,f32484,f32485,f32486,f32487,f32490,f32491,f32492,f32493,f32494,f32495,f32497,f32499,f32410,f32412,f32417,f32420,f32513,f32756,f32774,f32898,f32921,f32987,f33013,f33191,f33204,f33286,f33285,f33284,f33283,f33282,f33281,f33280,f33279,f33278,f33385,f33386,f33387,f33390,f33392,f33463,f33464,f33465,f33468,f33470,f33514,f33521,f33524,f33566,f33650,f33657,f33729,f33764,f33797,f33796,f33795,f34075,f34074,f34073,f34072,f34071,f34133,f34134,f34135,f34136,f34137,f34156,f34155,f34154,f34153,f34639,f34638,f34637,f35862,f35896,f35925,f35956,f35988,f36024,f36056,f36125,f36218,f36221,f36227,f36690,f36689,f37265,f37446,f37467,f37488,f37518,f37545,f37567,f37594,f37624,f37652,f37676,f37694,f37737,f37736,f37735,f37800,f38370,f38398,f38431,f38430,f38429,f38463,f38462,f38461,f38508,f38579,f38650,f38723,f38743,f38816,f38833,f39249,f39338,f39393,f39831,f39908,f39996,f40082,f43476,f43491,f31148,f55601,f1047])).
fof(f80013,plain,(
  $false | ($spl8 | $spl216)),
  inference(global_subsumption,[],[f530,f529,f528,f527,f531,f538,f539,f548,f547,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f668,f689,f709,f708,f707,f706,f726,f721,f720,f719,f718,f736,f731,f730,f729,f728,f739,f738,f743,f742,f747,f746,f752,f751,f758,f757,f756,f777,f772,f771,f770,f769,f784,f783,f782,f781,f801,f796,f795,f794,f793,f811,f806,f805,f804,f803,f814,f813,f818,f817,f822,f821,f827,f826,f833,f832,f831,f850,f849,f848,f847,f867,f862,f861,f860,f859,f877,f872,f871,f870,f869,f880,f879,f884,f883,f888,f887,f893,f892,f899,f898,f897,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1082,f1081,f1080,f1079,f1078,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1086,f1087,f1102,f1110,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1272,f1274,f1297,f1293,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1707,f1706,f1718,f1724,f1728,f1750,f1758,f1757,f1756,f1755,f1829,f1830,f1831,f1832,f1833,f1834,f1835,f1836,f1837,f1838,f1839,f1840,f1841,f1842,f1843,f1844,f1845,f1872,f1876,f1884,f1893,f1894,f1898,f1911,f1928,f1929,f1966,f1970,f1982,f1989,f1990,f1994,f2005,f2023,f2024,f2025,f2032,f2039,f2229,f2228,f2225,f2221,f2220,f2269,f2268,f2262,f2307,f2295,f2294,f2359,f2441,f2482,f2492,f2504,f2514,f2526,f2532,f2533,f2550,f2565,f2571,f2572,f2597,f2608,f2620,f2621,f2677,f2689,f2698,f2701,f2845,f2935,f2940,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f4202,f4261,f4279,f4280,f4284,f4302,f4317,f4334,f4355,f4432,f4433,f4434,f4449,f4468,f4489,f4555,f4573,f4574,f4578,f4596,f4611,f4631,f4652,f4732,f4733,f4761,f4785,f4826,f4844,f4845,f4849,f4868,f4883,f4901,f4922,f4986,f5002,f5003,f5007,f5027,f5039,f5248,f5257,f5321,f5631,f5670,f5689,f6918,f6944,f6940,f7303,f7383,f7384,f7553,f7558,f7561,f7565,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9603,f8248,f8253,f8256,f8260,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f895,f890,f829,f824,f754,f749,f687,f683,f666,f663,f693,f685,f681,f906,f874,f873,f866,f865,f851,f808,f807,f800,f799,f785,f733,f732,f725,f724,f710,f699,f696,f659,f657,f677,f6241,f6256,f6286,f684,f664,f688,f667,f692,f680,f670,f6240,f6247,f6273,f858,f857,f856,f855,f854,f853,f852,f792,f791,f790,f789,f788,f787,f786,f717,f716,f715,f714,f713,f712,f711,f908,f909,f907,f900,f894,f889,f885,f881,f876,f875,f864,f863,f834,f828,f823,f819,f815,f810,f809,f798,f797,f759,f753,f748,f744,f740,f735,f734,f723,f722,f701,f694,f691,f686,f682,f679,f676,f669,f665,f662,f660,f656,f674,f673,f672,f671,f702,f661,f697,f658,f901,f886,f882,f878,f835,f820,f816,f812,f760,f745,f741,f737,f905,f904,f903,f902,f896,f891,f868,f830,f825,f802,f755,f750,f727,f705,f655,f9617,f8277,f8276,f8275,f8274,f8273,f8272,f8271,f8244,f8008,f7582,f7581,f7580,f7579,f7578,f7577,f7576,f7549,f9615,f9614,f9613,f9612,f9611,f9610,f9609,f9606,f9605,f602,f601,f599,f596,f594,f593,f591,f587,f586,f698,f695,f845,f774,f773,f9622,f768,f767,f766,f765,f764,f763,f762,f761,f703,f653,f700,f690,f678,f675,f6952,f776,f775,f2938,f2941,f844,f9602,f9621,f9604,f9600,f6932,f4519,f1019,f846,f843,f842,f841,f840,f839,f838,f837,f836,f780,f779,f778,f704,f654,f7575,f8270,f3884,f3443,f3442,f2877,f2876,f2754,f2753,f2734,f2718,f2706,f2696,f2684,f2672,f2618,f2617,f2607,f2569,f2568,f2564,f2530,f2529,f2525,f2475,f2474,f2443,f2442,f1048,f552,f551,f12824,f12904,f12907,f12983,f12986,f2436,f2339,f8246,f8245,f7551,f7550,f2432,f2330,f2433,f2331,f8010,f8009,f9608,f9607,f604,f603,f2435,f2338,f7836,f16673,f16688,f16743,f16742,f16741,f18050,f18055,f18060,f18061,f19437,f19444,f19447,f18176,f19481,f23012,f23077,f23297,f23337,f24930,f24958,f25011,f25110,f26871,f26970,f27227,f27259,f27301,f27326,f27339,f27356,f27371,f27392,f28264,f28308,f28347,f28423,f28438,f28462,f28472,f28516,f28563,f28704,f28745,f28834,f28842,f28853,f28872,f28884,f28895,f28905,f28938,f28961,f28989,f29007,f29023,f29042,f29061,f29554,f29572,f31002,f31106,f31736,f31731,f31726,f31723,f31667,f31663,f31662,f31658,f31654,f31650,f31649,f31648,f31647,f31646,f31645,f31644,f31641,f31638,f31635,f31634,f31633,f31632,f31626,f31618,f31617,f31611,f31610,f31577,f31576,f31575,f31569,f31563,f31562,f31555,f31538,f31527,f31525,f31524,f31520,f31519,f31518,f31517,f31514,f31512,f31507,f31506,f31501,f31500,f31477,f31476,f31475,f31474,f31471,f31468,f31467,f31466,f31465,f31464,f31459,f31458,f31451,f31446,f31445,f31430,f31429,f31428,f31424,f31423,f31409,f31408,f31407,f31406,f31404,f31403,f31402,f31400,f31862,f31869,f31895,f31903,f31898,f31920,f31931,f31945,f32174,f32464,f32465,f32471,f32472,f32473,f32474,f32475,f32476,f32477,f32478,f32479,f32480,f32481,f32482,f32483,f32484,f32485,f32486,f32487,f32490,f32491,f32492,f32493,f32494,f32495,f32497,f32499,f32410,f32412,f32417,f32420,f32513,f32756,f32774,f32898,f32921,f32987,f33013,f33191,f33204,f33286,f33285,f33284,f33283,f33282,f33281,f33280,f33279,f33278,f33385,f33386,f33387,f33390,f33392,f33463,f33464,f33465,f33468,f33470,f33514,f33521,f33524,f33566,f33650,f33657,f33729,f33764,f33797,f33796,f33795,f34075,f34074,f34073,f34072,f34071,f34133,f34134,f34135,f34136,f34137,f34156,f34155,f34154,f34153,f34639,f34638,f34637,f35862,f35896,f35925,f35956,f35988,f36024,f36056,f36125,f36218,f36221,f36227,f36690,f36689,f37265,f37446,f37467,f37488,f37518,f37545,f37567,f37594,f37624,f37652,f37676,f37694,f37737,f37736,f37735,f37800,f38370,f38398,f38431,f38430,f38429,f38463,f38462,f38461,f38508,f38579,f38650,f38723,f38743,f38816,f38833,f39249,f39338,f39393,f39831,f39908,f39996,f40082,f43476,f43491,f31148,f55601,f1047])).
fof(f80012,plain,(
  $false | ($spl8 | $spl216)),
  inference(global_subsumption,[],[f530,f529,f528,f527,f531,f538,f539,f548,f547,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f668,f689,f709,f708,f707,f706,f726,f721,f720,f719,f718,f736,f731,f730,f729,f728,f739,f738,f743,f742,f747,f746,f752,f751,f758,f757,f756,f777,f772,f771,f770,f769,f784,f783,f782,f781,f801,f796,f795,f794,f793,f811,f806,f805,f804,f803,f814,f813,f818,f817,f822,f821,f827,f826,f833,f832,f831,f850,f849,f848,f847,f867,f862,f861,f860,f859,f877,f872,f871,f870,f869,f880,f879,f884,f883,f888,f887,f893,f892,f899,f898,f897,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1082,f1081,f1080,f1079,f1078,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1086,f1087,f1102,f1110,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1272,f1274,f1297,f1293,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1707,f1706,f1718,f1724,f1728,f1750,f1758,f1757,f1756,f1755,f1829,f1830,f1831,f1832,f1833,f1834,f1835,f1836,f1837,f1838,f1839,f1840,f1841,f1842,f1843,f1844,f1845,f1872,f1876,f1884,f1893,f1894,f1898,f1911,f1928,f1929,f1966,f1970,f1982,f1989,f1990,f1994,f2005,f2023,f2024,f2025,f2032,f2039,f2229,f2228,f2225,f2221,f2220,f2269,f2268,f2262,f2307,f2295,f2294,f2359,f2441,f2482,f2492,f2504,f2514,f2526,f2532,f2533,f2550,f2565,f2571,f2572,f2597,f2608,f2620,f2621,f2677,f2689,f2698,f2701,f2845,f2935,f2940,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f4202,f4261,f4279,f4280,f4284,f4302,f4317,f4334,f4355,f4432,f4433,f4434,f4449,f4468,f4489,f4555,f4573,f4574,f4578,f4596,f4611,f4631,f4652,f4732,f4733,f4761,f4785,f4826,f4844,f4845,f4849,f4868,f4883,f4901,f4922,f4986,f5002,f5003,f5007,f5027,f5039,f5248,f5257,f5321,f5631,f5670,f5689,f6918,f6944,f6940,f7303,f7383,f7384,f7553,f7558,f7561,f7565,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9603,f8248,f8253,f8256,f8260,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f895,f890,f829,f824,f754,f749,f687,f683,f666,f663,f693,f685,f681,f906,f874,f873,f866,f865,f851,f808,f807,f800,f799,f785,f733,f732,f725,f724,f710,f699,f696,f659,f657,f677,f6241,f6256,f6286,f684,f664,f688,f667,f692,f680,f670,f6240,f6247,f6273,f858,f857,f856,f855,f854,f853,f852,f792,f791,f790,f789,f788,f787,f786,f717,f716,f715,f714,f713,f712,f711,f908,f909,f907,f900,f894,f889,f885,f881,f876,f875,f864,f863,f834,f828,f823,f819,f815,f810,f809,f798,f797,f759,f753,f748,f744,f740,f735,f734,f723,f722,f701,f694,f691,f686,f682,f679,f676,f669,f665,f662,f660,f656,f674,f673,f672,f671,f702,f661,f697,f658,f901,f886,f882,f878,f835,f820,f816,f812,f760,f745,f741,f737,f905,f904,f903,f902,f896,f891,f868,f830,f825,f802,f755,f750,f727,f705,f655,f9617,f8277,f8276,f8275,f8274,f8273,f8272,f8271,f8244,f8008,f7582,f7581,f7580,f7579,f7578,f7577,f7576,f7549,f9615,f9614,f9613,f9612,f9611,f9610,f9609,f9606,f9605,f602,f601,f599,f596,f594,f593,f591,f587,f586,f698,f695,f845,f774,f773,f9622,f768,f767,f766,f765,f764,f763,f762,f761,f703,f653,f700,f690,f678,f675,f6952,f776,f775,f2938,f2941,f844,f9602,f9621,f9604,f9600,f6932,f4519,f1019,f846,f843,f842,f841,f840,f839,f838,f837,f836,f780,f779,f778,f704,f654,f7575,f8270,f3884,f3443,f3442,f2877,f2876,f2754,f2753,f2734,f2718,f2706,f2696,f2684,f2672,f2618,f2617,f2607,f2569,f2568,f2564,f2530,f2529,f2525,f2475,f2474,f2443,f2442,f1048,f552,f551,f12824,f12904,f12907,f12983,f12986,f2436,f2339,f8246,f8245,f7551,f7550,f2432,f2330,f2433,f2331,f8010,f8009,f9608,f9607,f604,f603,f2435,f2338,f7836,f16673,f16688,f16743,f16742,f16741,f18050,f18055,f18060,f18061,f19437,f19444,f19447,f18176,f19481,f23012,f23077,f23297,f23337,f24930,f24958,f25011,f25110,f26871,f26970,f27227,f27259,f27301,f27326,f27339,f27356,f27371,f27392,f28264,f28308,f28347,f28423,f28438,f28462,f28472,f28516,f28563,f28704,f28745,f28834,f28842,f28853,f28872,f28884,f28895,f28905,f28938,f28961,f28989,f29007,f29023,f29042,f29061,f29554,f29572,f31002,f31106,f1047,f31736,f31731,f31726,f31723,f31667,f31663,f31662,f31658,f31654,f31650,f31649,f31648,f31647,f31646,f31645,f31644,f31641,f31638,f31635,f31634,f31633,f31632,f31626,f31618,f31617,f31611,f31610,f31577,f31576,f31575,f31569,f31563,f31562,f31555,f31538,f31527,f31525,f31524,f31520,f31519,f31518,f31517,f31514,f31512,f31507,f31506,f31501,f31500,f31477,f31476,f31475,f31474,f31471,f31468,f31467,f31466,f31465,f31464,f31459,f31458,f31451,f31446,f31445,f31430,f31429,f31428,f31424,f31423,f31409,f31408,f31407,f31406,f31404,f31403,f31402,f31400,f31862,f31869,f31895,f31903,f31898,f31920,f31931,f31945,f32174,f32464,f32465,f32471,f32472,f32473,f32474,f32475,f32476,f32477,f32478,f32479,f32480,f32481,f32482,f32483,f32484,f32485,f32486,f32487,f32490,f32491,f32492,f32493,f32494,f32495,f32497,f32499,f32410,f32412,f32417,f32420,f32513,f32756,f32774,f32898,f32921,f32987,f33013,f33191,f33204,f33286,f33285,f33284,f33283,f33282,f33281,f33280,f33279,f33278,f33385,f33386,f33387,f33390,f33392,f33463,f33464,f33465,f33468,f33470,f33514,f33521,f33524,f33566,f33650,f33657,f33729,f33764,f33797,f33796,f33795,f34075,f34074,f34073,f34072,f34071,f34133,f34134,f34135,f34136,f34137,f34156,f34155,f34154,f34153,f34639,f34638,f34637,f35862,f35896,f35925,f35956,f35988,f36024,f36056,f36125,f36218,f36221,f36227,f36690,f36689,f37265,f37446,f37467,f37488,f37518,f37545,f37567,f37594,f37624,f37652,f37676,f37694,f37737,f37736,f37735,f37800,f38370,f38398,f38431,f38430,f38429,f38463,f38462,f38461,f38508,f38579,f38650,f38723,f38743,f38816,f38833,f39249,f39338,f39393,f39831,f39908,f39996,f40082,f43476,f43491,f31148,f55601])).
fof(f80011,plain,(
  $false | ($spl8 | $spl214 | $spl216)),
  inference(global_subsumption,[],[f55599,f530,f529,f528,f527,f531,f538,f539,f548,f547,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f668,f689,f709,f708,f707,f706,f726,f721,f720,f719,f718,f736,f731,f730,f729,f728,f739,f738,f743,f742,f747,f746,f752,f751,f758,f757,f756,f777,f772,f771,f770,f769,f784,f783,f782,f781,f801,f796,f795,f794,f793,f811,f806,f805,f804,f803,f814,f813,f818,f817,f822,f821,f827,f826,f833,f832,f831,f850,f849,f848,f847,f867,f862,f861,f860,f859,f877,f872,f871,f870,f869,f880,f879,f884,f883,f888,f887,f893,f892,f899,f898,f897,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1082,f1081,f1080,f1079,f1078,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1086,f1087,f1102,f1110,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1272,f1274,f1297,f1293,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1707,f1706,f1718,f1724,f1728,f1750,f1758,f1757,f1756,f1755,f1829,f1830,f1831,f1832,f1833,f1834,f1835,f1836,f1837,f1838,f1839,f1840,f1841,f1842,f1843,f1844,f1845,f1872,f1876,f1884,f1893,f1894,f1898,f1911,f1928,f1929,f1966,f1970,f1982,f1989,f1990,f1994,f2005,f2023,f2024,f2025,f2032,f2039,f2229,f2228,f2225,f2221,f2220,f2269,f2268,f2262,f2307,f2295,f2294,f2359,f2441,f2482,f2492,f2504,f2514,f2526,f2532,f2533,f2550,f2565,f2571,f2572,f2597,f2608,f2620,f2621,f2677,f2689,f2698,f2701,f2845,f2935,f2940,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f4202,f4261,f4279,f4280,f4284,f4302,f4317,f4334,f4355,f4432,f4433,f4434,f4449,f4468,f4489,f4555,f4573,f4574,f4578,f4596,f4611,f4631,f4652,f4732,f4733,f4761,f4785,f4826,f4844,f4845,f4849,f4868,f4883,f4901,f4922,f4986,f5002,f5003,f5007,f5027,f5039,f5248,f5257,f5321,f5631,f5670,f5689,f6918,f6944,f6940,f7303,f7383,f7384,f7553,f7558,f7561,f7565,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9603,f8248,f8253,f8256,f8260,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f895,f890,f829,f824,f754,f749,f687,f683,f666,f663,f693,f685,f681,f906,f874,f873,f866,f865,f851,f808,f807,f800,f799,f785,f733,f732,f725,f724,f710,f699,f696,f659,f657,f677,f6241,f6256,f6286,f684,f664,f688,f667,f692,f680,f670,f6240,f6247,f6273,f858,f857,f856,f855,f854,f853,f852,f792,f791,f790,f789,f788,f787,f786,f717,f716,f715,f714,f713,f712,f711,f908,f909,f907,f900,f894,f889,f885,f881,f876,f875,f864,f863,f834,f828,f823,f819,f815,f810,f809,f798,f797,f759,f753,f748,f744,f740,f735,f734,f723,f722,f701,f694,f691,f686,f682,f679,f676,f669,f665,f662,f660,f656,f674,f673,f672,f671,f702,f661,f697,f658,f901,f886,f882,f878,f835,f820,f816,f812,f760,f745,f741,f737,f905,f904,f903,f902,f896,f891,f868,f830,f825,f802,f755,f750,f727,f705,f655,f9617,f8277,f8276,f8275,f8274,f8273,f8272,f8271,f8244,f8008,f7582,f7581,f7580,f7579,f7578,f7577,f7576,f7549,f9615,f9614,f9613,f9612,f9611,f9610,f9609,f9606,f9605,f602,f601,f599,f596,f594,f593,f591,f587,f586,f698,f695,f845,f774,f773,f9622,f768,f767,f766,f765,f764,f763,f762,f761,f703,f653,f700,f690,f678,f675,f6952,f776,f775,f2938,f2941,f844,f9602,f9621,f9604,f9600,f6932,f4519,f1019,f846,f843,f842,f841,f840,f839,f838,f837,f836,f780,f779,f778,f704,f654,f7575,f8270,f3884,f3443,f3442,f2877,f2876,f2754,f2753,f2734,f2718,f2706,f2696,f2684,f2672,f2618,f2617,f2607,f2569,f2568,f2564,f2530,f2529,f2525,f2475,f2474,f2443,f2442,f1048,f552,f551,f12824,f12904,f12907,f12983,f12986,f2436,f2339,f8246,f8245,f7551,f7550,f2432,f2330,f2433,f2331,f8010,f8009,f9608,f9607,f604,f603,f2435,f2338,f7836,f16673,f16688,f16743,f16742,f16741,f18050,f18055,f18060,f18061,f19437,f19444,f19447,f18176,f19481,f23012,f23077,f23297,f23337,f24930,f24958,f25011,f25110,f26871,f26970,f27227,f27259,f27301,f27326,f27339,f27356,f27371,f27392,f28264,f28308,f28347,f28423,f28438,f28462,f28472,f28516,f28563,f28704,f28745,f28834,f28842,f28853,f28872,f28884,f28895,f28905,f28938,f28961,f28989,f29007,f29023,f29042,f29061,f29554,f29572,f31002,f31106,f1047,f31736,f31731,f31726,f31723,f31667,f31663,f31662,f31658,f31654,f31650,f31649,f31648,f31647,f31646,f31645,f31644,f31641,f31638,f31635,f31634,f31633,f31632,f31626,f31618,f31617,f31611,f31610,f31577,f31576,f31575,f31569,f31563,f31562,f31555,f31538,f31527,f31525,f31524,f31520,f31519,f31518,f31517,f31514,f31512,f31507,f31506,f31501,f31500,f31477,f31476,f31475,f31474,f31471,f31468,f31467,f31466,f31465,f31464,f31459,f31458,f31451,f31446,f31445,f31430,f31429,f31428,f31424,f31423,f31409,f31408,f31407,f31406,f31404,f31403,f31402,f31400,f31862,f31869,f31895,f31903,f31898,f31920,f31931,f31945,f32174,f32464,f32465,f32471,f32472,f32473,f32474,f32475,f32476,f32477,f32478,f32479,f32480,f32481,f32482,f32483,f32484,f32485,f32486,f32487,f32490,f32491,f32492,f32493,f32494,f32495,f32497,f32499,f32410,f32412,f32417,f32420,f32513,f32756,f32774,f32898,f32921,f32987,f33013,f33191,f33204,f33286,f33285,f33284,f33283,f33282,f33281,f33280,f33279,f33278,f33385,f33386,f33387,f33390,f33392,f33463,f33464,f33465,f33468,f33470,f33514,f33521,f33524,f33566,f33650,f33657,f33729,f33764,f33797,f33796,f33795,f34075,f34074,f34073,f34072,f34071,f34133,f34134,f34135,f34136,f34137,f34156,f34155,f34154,f34153,f34639,f34638,f34637,f35862,f35896,f35925,f35956,f35988,f36024,f36056,f36125,f36218,f36221,f36227,f36690,f36689,f37265,f37446,f37467,f37488,f37518,f37545,f37567,f37594,f37624,f37652,f37676,f37694,f37737,f37736,f37735,f37800,f38370,f38398,f38431,f38430,f38429,f38463,f38462,f38461,f38508,f38579,f38650,f38723,f38743,f38816,f38833,f39249,f39338,f39393,f39831,f39908,f39996,f40082,f43476,f43491,f31148])).
fof(f80010,plain,(
  $false | ($spl8 | $spl208 | $spl216)),
  inference(global_subsumption,[],[f31110,f530,f529,f528,f527,f531,f538,f539,f548,f547,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f668,f689,f709,f708,f707,f706,f726,f721,f720,f719,f718,f736,f731,f730,f729,f728,f739,f738,f743,f742,f747,f746,f752,f751,f758,f757,f756,f777,f772,f771,f770,f769,f784,f783,f782,f781,f801,f796,f795,f794,f793,f811,f806,f805,f804,f803,f814,f813,f818,f817,f822,f821,f827,f826,f833,f832,f831,f850,f849,f848,f847,f867,f862,f861,f860,f859,f877,f872,f871,f870,f869,f880,f879,f884,f883,f888,f887,f893,f892,f899,f898,f897,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1082,f1081,f1080,f1079,f1078,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1086,f1087,f1102,f1110,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1272,f1274,f1297,f1293,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1707,f1706,f1718,f1724,f1728,f1750,f1758,f1757,f1756,f1755,f1829,f1830,f1831,f1832,f1833,f1834,f1835,f1836,f1837,f1838,f1839,f1840,f1841,f1842,f1843,f1844,f1845,f1872,f1876,f1884,f1893,f1894,f1898,f1911,f1928,f1929,f1966,f1970,f1982,f1989,f1990,f1994,f2005,f2023,f2024,f2025,f2032,f2039,f2229,f2228,f2225,f2221,f2220,f2269,f2268,f2262,f2307,f2295,f2294,f2359,f2441,f2482,f2492,f2504,f2514,f2526,f2532,f2533,f2550,f2565,f2571,f2572,f2597,f2608,f2620,f2621,f2677,f2689,f2698,f2701,f2845,f2935,f2940,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f4202,f4261,f4279,f4280,f4284,f4302,f4317,f4334,f4355,f4432,f4433,f4434,f4449,f4468,f4489,f4555,f4573,f4574,f4578,f4596,f4611,f4631,f4652,f4732,f4733,f4761,f4785,f4826,f4844,f4845,f4849,f4868,f4883,f4901,f4922,f4986,f5002,f5003,f5007,f5027,f5039,f5248,f5257,f5321,f5631,f5670,f5689,f6918,f6944,f6940,f7303,f7383,f7384,f7553,f7558,f7561,f7565,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9603,f8248,f8253,f8256,f8260,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f895,f890,f829,f824,f754,f749,f687,f683,f666,f663,f693,f685,f681,f906,f874,f873,f866,f865,f851,f808,f807,f800,f799,f785,f733,f732,f725,f724,f710,f699,f696,f659,f657,f677,f6241,f6256,f6286,f684,f664,f688,f667,f692,f680,f670,f6240,f6247,f6273,f858,f857,f856,f855,f854,f853,f852,f792,f791,f790,f789,f788,f787,f786,f717,f716,f715,f714,f713,f712,f711,f908,f909,f907,f900,f894,f889,f885,f881,f876,f875,f864,f863,f834,f828,f823,f819,f815,f810,f809,f798,f797,f759,f753,f748,f744,f740,f735,f734,f723,f722,f701,f694,f691,f686,f682,f679,f676,f669,f665,f662,f660,f656,f674,f673,f672,f671,f702,f661,f697,f658,f901,f886,f882,f878,f835,f820,f816,f812,f760,f745,f741,f737,f905,f904,f903,f902,f896,f891,f868,f830,f825,f802,f755,f750,f727,f705,f655,f9617,f8277,f8276,f8275,f8274,f8273,f8272,f8271,f8244,f8008,f7582,f7581,f7580,f7579,f7578,f7577,f7576,f7549,f9615,f9614,f9613,f9612,f9611,f9610,f9609,f9606,f9605,f602,f601,f599,f596,f594,f593,f591,f587,f586,f698,f695,f845,f774,f773,f9622,f768,f767,f766,f765,f764,f763,f762,f761,f703,f653,f700,f690,f678,f675,f6952,f776,f775,f2938,f2941,f844,f9602,f9621,f9604,f9600,f6932,f4519,f1019,f846,f843,f842,f841,f840,f839,f838,f837,f836,f780,f779,f778,f704,f654,f7575,f8270,f3884,f3443,f3442,f2877,f2876,f2754,f2753,f2734,f2718,f2706,f2696,f2684,f2672,f2618,f2617,f2607,f2569,f2568,f2564,f2530,f2529,f2525,f2475,f2474,f2443,f2442,f1048,f552,f551,f12824,f12904,f12907,f12983,f12986,f2436,f2339,f8246,f8245,f7551,f7550,f2432,f2330,f2433,f2331,f8010,f8009,f9608,f9607,f604,f603,f2435,f2338,f7836,f16673,f16688,f16743,f16742,f16741,f18050,f18055,f18060,f18061,f19437,f19444,f19447,f18176,f19481,f23012,f23077,f23297,f23337,f24930,f24958,f25011,f25110,f26871,f26970,f27227,f27259,f27301,f27326,f27339,f27356,f27371,f27392,f28264,f28308,f28347,f28423,f28438,f28462,f28472,f28516,f28563,f28704,f28745,f28834,f28842,f28853,f28872,f28884,f28895,f28905,f28938,f28961,f28989,f29007,f29023,f29042,f29061,f29554,f29572,f31002,f31106,f1047,f31736,f31731,f31726,f31723,f31667,f31663,f31662,f31658,f31654,f31650,f31649,f31648,f31647,f31646,f31645,f31644,f31641,f31638,f31635,f31634,f31633,f31632,f31626,f31618,f31617,f31611,f31610,f31577,f31576,f31575,f31569,f31563,f31562,f31555,f31538,f31527,f31525,f31524,f31520,f31519,f31518,f31517,f31514,f31512,f31507,f31506,f31501,f31500,f31477,f31476,f31475,f31474,f31471,f31468,f31467,f31466,f31465,f31464,f31459,f31458,f31451,f31446,f31445,f31430,f31429,f31428,f31424,f31423,f31409,f31408,f31407,f31406,f31404,f31403,f31402,f31400,f31862,f31869,f31895,f31903,f31898,f31920,f31931,f31945,f32174,f32464,f32465,f32471,f32472,f32473,f32474,f32475,f32476,f32477,f32478,f32479,f32480,f32481,f32482,f32483,f32484,f32485,f32486,f32487,f32490,f32491,f32492,f32493,f32494,f32495,f32497,f32499,f32410,f32412,f32417,f32420,f32513,f32756,f32774,f32898,f32921,f32987,f33013,f33191,f33204,f33286,f33285,f33284,f33283,f33282,f33281,f33280,f33279,f33278,f33385,f33386,f33387,f33390,f33392,f33463,f33464,f33465,f33468,f33470,f33514,f33521,f33524,f33566,f33650,f33657,f33729,f33764,f33797,f33796,f33795,f34075,f34074,f34073,f34072,f34071,f34133,f34134,f34135,f34136,f34137,f34156,f34155,f34154,f34153,f34639,f34638,f34637,f35862,f35896,f35925,f35956,f35988,f36024,f36056,f36125,f36218,f36221,f36227,f36690,f36689,f37265,f37446,f37467,f37488,f37518,f37545,f37567,f37594,f37624,f37652,f37676,f37694,f37737,f37736,f37735,f37800,f38370,f38398,f38431,f38430,f38429,f38463,f38462,f38461,f38508,f38579,f38650,f38723,f38743,f38816,f38833,f39249,f39338,f39393,f39831,f39908,f39996,f40082,f43476,f43491,f31148])).
fof(f79635,plain,(
  $false | ($spl0 | $spl229)),
  inference(subsumption_resolution,[],[f79634,f531])).
fof(f79634,plain,(
  ~p(s(bool,'T_0')) | ($spl0 | $spl229)),
  inference(backward_demodulation,[],[f79467,f34014])).
fof(f79467,plain,(
  s(bool,'T_0') = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK205('const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53)),sK54,sK51)))) | $spl0),
  inference(backward_demodulation,[],[f79247,f77576])).
fof(f77576,plain,(
  s(bool,'T_0') = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK203('const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53)),sK54,sK51)),s('type.conSem.v',sK205('const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53)),sK54,sK51)))) | $spl0),
  inference(unit_resulting_resolution,[],[f531,f54550,f612])).
fof(f54550,plain,(
  p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK203('const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53)),sK54,sK51)),s('type.conSem.v',sK205('const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53)),sK54,sK51))))) | $spl0),
  inference(unit_resulting_resolution,[],[f605,f54028,f773])).
fof(f54028,plain,(
  sP23(sK51,sK54,'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))) | $spl0),
  inference(unit_resulting_resolution,[],[f1039,f779])).
fof(f79247,plain,(
  s('type.modSem.v',sK52) = s('type.modSem.v',sK203('const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53)),sK54,sK51)) | $spl0),
  inference(unit_resulting_resolution,[],[f54546,f606])).
fof(f54546,plain,(
  s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK203('const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53)),sK54,sK51)),s('type.list.list'('type.modSem.v'),sK204('const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53)),sK54,sK51)))) | $spl0),
  inference(unit_resulting_resolution,[],[f605,f54028,f769])).
fof(f73818,plain,(
  ( ! [X288,X287,X289,X286] : (s('type.pair.prod'(bool,X287),'const.pair.,_2'(s(bool,'F_0'),s(X287,X288))) = s('type.pair.prod'(bool,X287),'const.pair.,_2'(s(bool,X286),s(X287,X289))) | s(X287,X288) != s(X287,X289)) ) | $spl254),
  inference(cnf_transformation,[],[f73818_D])).
fof(f73818_D,plain,(
  ( ! [X288,X287,X289,X286] : (s('type.pair.prod'(bool,X287),'const.pair.,_2'(s(bool,'F_0'),s(X287,X288))) = s('type.pair.prod'(bool,X287),'const.pair.,_2'(s(bool,X286),s(X287,X289))) | s(X287,X288) != s(X287,X289)) ) <=> ~$spl254),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl254])])).
fof(f73817,plain,(
  ( ! [X288,X285,X287,X289,X286] : (s('type.pair.prod'(bool,X287),'const.pair.,_2'(s(bool,'F_0'),s(X287,X288))) = s('type.pair.prod'(bool,X287),'const.pair.,_2'(s(bool,X286),s(X287,X289))) | s(X287,X288) != s(X287,X289) | s(bool,'T_0') = s(bool,X285)) ) | ($spl9 | $spl200)),
  inference(global_subsumption,[],[f530,f529,f528,f527,f531,f538,f539,f548,f547,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f668,f689,f709,f708,f707,f706,f726,f721,f720,f719,f718,f736,f731,f730,f729,f728,f739,f738,f743,f742,f747,f746,f752,f751,f758,f757,f756,f777,f772,f771,f770,f769,f784,f783,f782,f781,f801,f796,f795,f794,f793,f811,f806,f805,f804,f803,f814,f813,f818,f817,f822,f821,f827,f826,f833,f832,f831,f850,f849,f848,f847,f867,f862,f861,f860,f859,f877,f872,f871,f870,f869,f880,f879,f884,f883,f888,f887,f893,f892,f899,f898,f897,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2359,f2526,f2533,f2565,f2572,f2608,f2621,f2845,f2935,f2940,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f4202,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5689,f7303,f7383,f7384,f7553,f7558,f7561,f7565,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9603,f8248,f8253,f8256,f8260,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f895,f890,f829,f824,f754,f749,f687,f683,f666,f663,f693,f685,f681,f906,f874,f873,f866,f865,f851,f808,f807,f800,f799,f785,f733,f732,f725,f724,f710,f699,f696,f659,f657,f677,f6241,f6256,f6286,f684,f664,f688,f667,f692,f680,f670,f6240,f6247,f6273,f858,f857,f856,f855,f854,f853,f852,f792,f791,f790,f789,f788,f787,f786,f717,f716,f715,f714,f713,f712,f711,f908,f909,f907,f900,f894,f889,f885,f881,f876,f875,f864,f863,f834,f828,f823,f819,f815,f810,f809,f798,f797,f759,f753,f748,f744,f740,f735,f734,f723,f722,f701,f694,f691,f686,f682,f679,f676,f669,f665,f662,f660,f656,f674,f673,f672,f671,f702,f661,f697,f658,f901,f886,f882,f878,f835,f820,f816,f812,f760,f745,f741,f737,f905,f904,f903,f902,f896,f891,f868,f830,f825,f802,f755,f750,f727,f705,f655,f8277,f8276,f8275,f8274,f8273,f8272,f8271,f8244,f8008,f7582,f7581,f7580,f7579,f7578,f7577,f7576,f7549,f9615,f9614,f9613,f9612,f9611,f9610,f9609,f9606,f9605,f602,f601,f599,f596,f594,f593,f591,f587,f586,f698,f695,f845,f774,f773,f9622,f768,f767,f766,f765,f764,f763,f762,f761,f703,f653,f700,f690,f678,f675,f776,f775,f2938,f2941,f844,f9602,f9621,f9604,f9600,f6932,f4519,f1019,f846,f843,f842,f841,f840,f839,f838,f837,f836,f780,f779,f778,f704,f654,f7575,f8270,f3884,f3443,f3442,f2877,f2876,f2754,f2753,f2734,f2718,f2706,f2696,f2684,f2672,f2618,f2617,f2607,f2569,f2568,f2564,f2530,f2529,f2525,f2475,f2474,f2443,f2442,f1048,f552,f551,f12824,f12904,f12907,f12983,f12986,f2436,f2339,f8246,f8245,f7551,f7550,f2432,f2330,f2433,f2331,f8010,f8009,f9608,f9607,f604,f603,f16743,f16742,f16741,f18050,f18055,f18061,f18176,f19481,f19851,f19849,f19847,f19845,f19843,f19841,f19795,f19794,f19789,f19785,f19784,f19779,f19766,f19765,f19764,f19760,f19759,f19754,f19752,f19750,f19743,f19742,f19738,f19737,f19736,f19712,f19704,f19703,f19701,f19692,f19691,f19690,f19689,f19686,f19684,f19679,f19678,f19637,f19636,f19634,f19629,f19628,f19623,f19622,f19621,f19611,f19606,f19603,f19600,f19598,f19596,f19591,f19590,f19589,f19588,f19581,f19580,f19572,f19571,f19570,f19564,f19563,f19546,f19541,f19535,f19534,f19530,f19524,f19523,f19516,f19513,f19512,f19510,f19504,f19503,f20010,f20637,f20661,f20677,f20675,f20689,f20694,f20699,f21645,f22464,f22511,f23012,f23077,f23297,f23337,f23729,f23967,f23969,f23974,f23977,f24930,f24958,f25011,f25110,f25170,f25176,f25182,f26871,f26970,f27227,f27259,f27301,f27326,f27339,f27356,f27371,f27392,f28264,f28308,f28347,f28423,f28438,f28462,f28472,f28516,f28563,f28704,f28745,f28834,f28842,f28853,f28872,f28884,f28895,f28905,f28938,f28961,f28989,f29007,f29023,f29042,f29061,f29554,f29572,f29636,f31002,f31106,f31094,f31109,f31095,f25204,f31139,f24133,f24132,f21338,f19465,f33191,f33204,f33286,f33285,f33284,f33283,f33282,f33281,f33280,f33279,f33278,f33385,f33386,f33387,f33390,f33392,f33463,f33464,f33465,f33468,f33470,f33514,f33521,f33524,f33566,f33650,f33657,f33729,f33764,f33797,f33796,f33795,f34075,f34074,f34073,f34072,f34071,f34133,f34134,f34135,f34136,f34137,f34156,f34155,f34154,f34153,f34639,f34638,f34637,f35862,f35896,f35925,f35956,f35988,f36024,f36056,f36125,f36218,f36221,f36227,f36690,f36689,f37265,f37446,f37467,f37488,f37518,f37545,f37567,f37594,f37624,f37652,f37676,f37694,f37737,f37736,f37735,f37800,f38370,f38398,f38431,f38430,f38429,f38463,f38462,f38461,f38508,f38579,f38650,f38723,f38743,f38816,f38833,f39249,f39338,f39393,f39831,f39908,f39996,f40082,f1046,f53314,f53312,f53310,f53308,f53306,f53304,f53258,f53257,f53250,f53244,f53243,f53236,f53223,f53222,f53221,f53215,f53214,f53207,f53205,f53203,f53196,f53195,f53191,f53190,f53189,f53169,f53158,f53157,f53155,f53146,f53145,f53144,f53143,f53140,f53138,f53133,f53132,f53091,f53090,f53088,f53083,f53082,f53077,f53076,f53075,f53066,f53062,f53061,f53057,f53052,f53050,f53045,f53044,f53043,f53042,f53035,f53034,f53026,f53025,f53024,f53018,f53017,f53000,f52995,f52985,f52984,f52980,f52970,f52969,f52958,f52955,f52954,f52952,f52946,f52945,f52944,f53495,f55612,f55636,f55652,f55650,f55664,f55669,f55674,f56217,f56439,f61982,f64642,f64698,f65056,f67144,f67141,f67138,f67089,f67087,f67085,f67083,f67081,f67079,f67030,f67029,f67022,f67015,f67014,f67006,f66992,f66991,f66990,f66983,f66982,f66974,f66973,f66972,f66971,f66970,f66962,f66961,f66957,f66956,f66955,f66947,f66933,f66922,f66921,f66919,f66910,f66909,f66908,f66907,f66903,f66901,f66895,f66894,f66878,f66877,f66868,f66845,f66844,f66842,f66836,f66835,f66829,f66828,f66827,f66817,f66812,f66810,f66804,f66799,f66797,f66796,f66794,f66787,f66786,f66785,f66784,f66775,f66774,f66764,f66763,f66762,f66756,f66755,f66735,f66732,f66725,f66714,f66713,f66708,f66697,f66696,f66684,f66681,f66680,f66678,f66673,f66672,f66670,f66668,f66666,f66665,f66664,f66663,f66662,f66661,f66660,f66659,f66658,f66657,f67350,f67354,f68257,f68025,f68027,f68032,f68035,f66671,f66937,f56134,f72660,f72708,f73742])).
fof(f73742,plain,(
  ( ! [X288,X285,X287,X289,X286] : (s(bool,X286) != s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | s(X287,X288) != s(X287,X289) | s('type.pair.prod'(bool,X287),'const.pair.,_2'(s(bool,'F_0'),s(X287,X288))) = s('type.pair.prod'(bool,X287),'const.pair.,_2'(s(bool,X286),s(X287,X289))) | s(bool,'T_0') = s(bool,X285)) ) | $spl9),
  inference(duplicate_literal_removal,[],[f73164])).
fof(f73164,plain,(
  ( ! [X288,X285,X287,X289,X286] : (s(bool,X286) != s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | s(X287,X288) != s(X287,X289) | s('type.pair.prod'(bool,X287),'const.pair.,_2'(s(bool,'F_0'),s(X287,X288))) = s('type.pair.prod'(bool,X287),'const.pair.,_2'(s(bool,X286),s(X287,X289))) | s(bool,'T_0') = s(bool,X285) | s(bool,'T_0') = s(bool,X285)) ) | $spl9),
  inference(superposition,[],[f3443,f53495])).
fof(f72708,plain,(
  ( ! [X0,X1] : (~sP44('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.bool.BOUNDED_1'(s(bool,X0)),'const.bool.BOUNDED_1'(s(bool,X1)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f53306,f927])).
fof(f72660,plain,(
  ( ! [X0,X1] : (~sP44('const.bool.BOUNDED_1'(s(bool,X0)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.bool.BOUNDED_1'(s(bool,X1)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f53304,f928])).
fof(f56134,plain,(
  ( ! [X0] : (sP50('T_0',X0,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f53189,f52946,f52946,f9587])).
fof(f66937,plain,(
  sP50('T_0',happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl9),
  inference(unit_resulting_resolution,[],[f531,f53189,f52944,f988])).
fof(f66671,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55))) | $spl9),
  inference(unit_resulting_resolution,[],[f52944,f552])).
fof(f68035,plain,(
  ( ! [X325,X323,X324,X326] : (s('type.pair.prod'(X323,bool),'const.pair.,_2'(s(X323,X326),s(bool,'F_0'))) != s('type.pair.prod'(X323,bool),'const.pair.,_2'(s(X323,X324),s(bool,X325))) | s(bool,X325) = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl9),
  inference(superposition,[],[f651,f61982])).
fof(f68032,plain,(
  ( ! [X313,X312,X314,X311] : (s('type.pair.prod'(bool,X311),'const.pair.,_2'(s(bool,'F_0'),s(X311,X314))) != s('type.pair.prod'(bool,X311),'const.pair.,_2'(s(bool,X312),s(X311,X313))) | s(bool,X312) = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl9),
  inference(superposition,[],[f650,f61982])).
fof(f68027,plain,(
  ( ! [X296,X295,X297] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X295))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X296),s('type.list.list'(bool),X297))) | s(bool,X296) = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl9),
  inference(superposition,[],[f606,f61982])).
fof(f68025,plain,(
  ( ! [X293] : (~p(s(bool,happ(s(fun(bool,bool),X293),s(bool,'F_0')))) | p(s(bool,happ(s(fun(bool,bool),X293),s(bool,sK65('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X293,bool)))))) ) | $spl9),
  inference(superposition,[],[f604,f61982])).
fof(f68257,plain,(
  ( ! [X292] : (s(bool,'F_0') = s(bool,sK65('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X292,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X292),s(bool,'F_0'))))) ) | $spl9),
  inference(forward_demodulation,[],[f68024,f61982])).
fof(f68024,plain,(
  ( ! [X292] : (~p(s(bool,happ(s(fun(bool,bool),X292),s(bool,'F_0')))) | s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) = s(bool,sK65('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X292,bool))) ) | $spl9),
  inference(superposition,[],[f603,f61982])).
fof(f67354,plain,(
  ~sP44('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl9),
  inference(unit_resulting_resolution,[],[f53045,f926])).
fof(f67350,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55))) | s(bool,'T_0') = s(bool,X0)) ) | $spl9),
  inference(subsumption_resolution,[],[f67183,f531])).
fof(f67183,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s(bool,X0) = s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55))) | s(bool,'T_0') = s(bool,X0)) ) | $spl9),
  inference(superposition,[],[f52944,f1319])).
fof(f66657,plain,(
  ~sP18(sK201(sK55,sK52,sK51),sK51,sK55,sK52) | $spl9),
  inference(unit_resulting_resolution,[],[f52945,f52944,f712])).
fof(f66658,plain,(
  ~sP15(sK201(sK55,sK52,sK51),sK51,sK55,sK52) | $spl9),
  inference(unit_resulting_resolution,[],[f52945,f52944,f713])).
fof(f66659,plain,(
  ~sP16(sK51,sK202(sK55,sK52,sK51),sK55,sK52) | $spl9),
  inference(unit_resulting_resolution,[],[f52945,f52944,f714])).
fof(f66660,plain,(
  ~sP17(sK51,sK202(sK55,sK52,sK51),sK55,sK52) | $spl9),
  inference(unit_resulting_resolution,[],[f52945,f52944,f715])).
fof(f66661,plain,(
  ~sP19(sK201(sK55,sK52,sK51),sK51,sK55,sK52) | $spl9),
  inference(unit_resulting_resolution,[],[f52945,f52944,f717])).
fof(f66662,plain,(
  ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK59(happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52)),'T_0','type.conSem.v'))))) | $spl9),
  inference(unit_resulting_resolution,[],[f531,f52944,f591])).
fof(f66663,plain,(
  ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK60(happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52)),'T_0','type.conSem.v'))))) | $spl9),
  inference(unit_resulting_resolution,[],[f531,f52944,f593])).
fof(f66664,plain,(
  ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK61('T_0',happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52)),'type.conSem.v'))))) | $spl9),
  inference(unit_resulting_resolution,[],[f531,f52944,f594])).
fof(f66665,plain,(
  ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK62('T_0',happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52)),'type.conSem.v'))))) | $spl9),
  inference(unit_resulting_resolution,[],[f531,f52944,f596])).
fof(f66666,plain,(
  ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK63(happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52)),'F_0','type.conSem.v'))))) | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f52944,f599])).
fof(f66668,plain,(
  ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK64(happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52)),'F_0','type.conSem.v'))))) | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f52944,f601])).
fof(f66670,plain,(
  s(bool,'T_0') != s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55))) | $spl9),
  inference(unit_resulting_resolution,[],[f52944,f547])).
fof(f66672,plain,(
  ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK63(happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52)),happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),'type.conSem.v'))))) | $spl9),
  inference(unit_resulting_resolution,[],[f52944,f52944,f599])).
fof(f66673,plain,(
  ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK64(happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52)),happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),'type.conSem.v'))))) | $spl9),
  inference(unit_resulting_resolution,[],[f52944,f52944,f601])).
fof(f66678,plain,(
  ~sP1(happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),'F_0') | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f52944,f638])).
fof(f66680,plain,(
  ~sP1('F_0',happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55))) | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f52944,f638])).
fof(f66681,plain,(
  ~sP1(happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55))) | $spl9),
  inference(unit_resulting_resolution,[],[f52944,f52944,f638])).
fof(f66684,plain,(
  ( ! [X0] : (~sP40(X0,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),'F_0')) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f52944,f916])).
fof(f66696,plain,(
  ( ! [X0] : (~sP40(X0,'F_0',happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f52944,f916])).
fof(f66697,plain,(
  ( ! [X0] : (~sP40(X0,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f52944,f52944,f916])).
fof(f66708,plain,(
  ( ! [X0] : (~sP40(happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),'F_0',X0)) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f52944,f917])).
fof(f66713,plain,(
  ( ! [X0] : (~sP40('F_0',happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),X0)) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f52944,f917])).
fof(f66714,plain,(
  ( ! [X0] : (~sP40(happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),X0)) ) | $spl9),
  inference(unit_resulting_resolution,[],[f52944,f52944,f917])).
fof(f66725,plain,(
  ~sP44('T_0','T_0',happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55))) | $spl9),
  inference(unit_resulting_resolution,[],[f531,f531,f52944,f929])).
fof(f66732,plain,(
  sP44('T_0',happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),'F_0') | $spl9),
  inference(unit_resulting_resolution,[],[f1058,f1053,f1056,f52944,f931])).
fof(f66735,plain,(
  sP44('T_0',happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl9),
  inference(unit_resulting_resolution,[],[f1058,f53017,f53024,f52944,f931])).
fof(f66755,plain,(
  ( ! [X0,X1] : (sP43(X0,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),X1)) ) | $spl9),
  inference(unit_resulting_resolution,[],[f52944,f935])).
fof(f66756,plain,(
  ( ! [X0,X1] : (sP43(happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),X0,X1)) ) | $spl9),
  inference(unit_resulting_resolution,[],[f52944,f936])).
fof(f66762,plain,(
  ( ! [X0,X1] : (sP42(X0,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),X1)) ) | $spl9),
  inference(unit_resulting_resolution,[],[f52944,f939])).
fof(f66763,plain,(
  ( ! [X0,X1] : (sP42(happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),X0,X1)) ) | $spl9),
  inference(unit_resulting_resolution,[],[f52944,f940])).
fof(f66764,plain,(
  ~sP41(happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),'F_0','F_0') | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f1048,f52944,f941])).
fof(f66774,plain,(
  ~sP41('F_0',happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),'F_0') | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f1048,f52944,f941])).
fof(f66775,plain,(
  ~sP41(happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),'F_0') | $spl9),
  inference(unit_resulting_resolution,[],[f52944,f1048,f52944,f941])).
fof(f66784,plain,(
  ~sP41('F_0','F_0',happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55))) | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f1048,f52944,f941])).
fof(f66785,plain,(
  ~sP41(happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),'F_0',happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55))) | $spl9),
  inference(unit_resulting_resolution,[],[f52944,f1048,f52944,f941])).
fof(f66786,plain,(
  ~sP41('F_0',happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55))) | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f52944,f52944,f941])).
fof(f66787,plain,(
  ~sP41(happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55))) | $spl9),
  inference(unit_resulting_resolution,[],[f52944,f52944,f52944,f941])).
fof(f66794,plain,(
  sP44(happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),'F_0','T_0') | $spl9),
  inference(unit_resulting_resolution,[],[f1102,f52944,f945])).
fof(f66796,plain,(
  sP44(happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'T_0') | $spl9),
  inference(unit_resulting_resolution,[],[f52946,f52944,f945])).
fof(f66797,plain,(
  sP44(happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),'T_0','F_0') | $spl9),
  inference(unit_resulting_resolution,[],[f1102,f52944,f945])).
fof(f66799,plain,(
  sP44(happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),'T_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl9),
  inference(unit_resulting_resolution,[],[f52946,f52944,f945])).
fof(f66804,plain,(
  ( ! [X0] : (~sP44(happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),'const.bool.BOUNDED_1'(s(bool,X0)),'T_0')) ) | $spl9),
  inference(unit_resulting_resolution,[],[f538,f52944,f948])).
fof(f66810,plain,(
  ( ! [X0] : (~sP44(happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),'T_0','const.bool.BOUNDED_1'(s(bool,X0)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f538,f52944,f948])).
fof(f66812,plain,(
  ( ! [X0] : (~sP46('T_0',X0,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f531,f52944,f950])).
fof(f66817,plain,(
  ( ! [X0] : (~sP46('T_0',happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),X0)) ) | $spl9),
  inference(unit_resulting_resolution,[],[f531,f52944,f951])).
fof(f66827,plain,(
  ( ! [X0,X1] : (sP45(X0,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),X1)) ) | $spl9),
  inference(unit_resulting_resolution,[],[f52944,f958])).
fof(f66828,plain,(
  ( ! [X0,X1] : (sP45(happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),X0,X1)) ) | $spl9),
  inference(unit_resulting_resolution,[],[f52944,f959])).
fof(f66829,plain,(
  ( ! [X0] : (sP46('F_0',X0,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f52944,f960])).
fof(f66835,plain,(
  ( ! [X0] : (sP46(happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),X0,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f52944,f52944,f960])).
fof(f66836,plain,(
  ( ! [X0] : (sP46('F_0',happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),X0)) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f52944,f961])).
fof(f66842,plain,(
  ( ! [X0] : (sP46(happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),X0)) ) | $spl9),
  inference(unit_resulting_resolution,[],[f52944,f52944,f961])).
fof(f66844,plain,(
  ( ! [X0] : (~sP48(happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),X0,'T_0')) ) | $spl9),
  inference(unit_resulting_resolution,[],[f531,f52944,f966])).
fof(f66845,plain,(
  ( ! [X0] : (~sP48(happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),'T_0',X0)) ) | $spl9),
  inference(unit_resulting_resolution,[],[f531,f52944,f967])).
fof(f66868,plain,(
  sP48('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),'F_0') | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f53132,f52944,f972])).
fof(f66877,plain,(
  sP48('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0',happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55))) | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f53132,f52944,f972])).
fof(f66878,plain,(
  sP48('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55))) | $spl9),
  inference(unit_resulting_resolution,[],[f52944,f53132,f52944,f972])).
fof(f66894,plain,(
  ( ! [X0,X1] : (sP47(happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),X0,X1)) ) | $spl9),
  inference(unit_resulting_resolution,[],[f52944,f976])).
fof(f66895,plain,(
  sP48('F_0',happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),'F_0') | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f1048,f52944,f977])).
fof(f66901,plain,(
  sP48('F_0','F_0',happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55))) | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f1048,f52944,f977])).
fof(f66903,plain,(
  sP48('F_0',happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55))) | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f52944,f52944,f977])).
fof(f66907,plain,(
  sP48(happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),'F_0','F_0') | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f1048,f52944,f977])).
fof(f66908,plain,(
  sP48(happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),'F_0') | $spl9),
  inference(unit_resulting_resolution,[],[f52944,f1048,f52944,f977])).
fof(f66909,plain,(
  sP48(happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),'F_0',happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55))) | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f52944,f52944,f977])).
fof(f66910,plain,(
  sP48(happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55))) | $spl9),
  inference(unit_resulting_resolution,[],[f52944,f52944,f52944,f977])).
fof(f66919,plain,(
  ( ! [X0] : (~sP50(happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),X0,'F_0')) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f52944,f983])).
fof(f66921,plain,(
  ( ! [X0] : (~sP50('F_0',X0,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f52944,f983])).
fof(f66922,plain,(
  ( ! [X0] : (~sP50(happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),X0,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f52944,f52944,f983])).
fof(f66933,plain,(
  ( ! [X0] : (~sP50(happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),'T_0',X0)) ) | $spl9),
  inference(unit_resulting_resolution,[],[f531,f52944,f984])).
fof(f66947,plain,(
  sP50('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),'T_0') | $spl9),
  inference(unit_resulting_resolution,[],[f531,f53190,f52944,f989])).
fof(f66955,plain,(
  ( ! [X0,X1] : (sP49(X0,X1,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f52944,f991])).
fof(f66956,plain,(
  ( ! [X0,X1] : (sP49(happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),X0,X1)) ) | $spl9),
  inference(unit_resulting_resolution,[],[f52944,f993])).
fof(f66957,plain,(
  sP50('F_0',happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),'T_0') | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f531,f52944,f994])).
fof(f66961,plain,(
  sP50(happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),'F_0','T_0') | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f531,f52944,f994])).
fof(f66962,plain,(
  sP50(happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),'T_0') | $spl9),
  inference(unit_resulting_resolution,[],[f52944,f531,f52944,f994])).
fof(f66970,plain,(
  ( ! [X0] : (sP46(happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),X0,'F_0')) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1062,f52944,f1030])).
fof(f66971,plain,(
  ( ! [X0] : (sP46(happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),X0,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f53075,f52944,f1030])).
fof(f66972,plain,(
  ( ! [X0] : (sP46(happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),'F_0',X0)) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1063,f52944,f1030])).
fof(f66973,plain,(
  ( ! [X0] : (sP46(happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X0)) ) | $spl9),
  inference(unit_resulting_resolution,[],[f53076,f52944,f1030])).
fof(f66974,plain,(
  ~sP0(happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),'F_0') | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f52944,f1049])).
fof(f66982,plain,(
  ~sP0('F_0',happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55))) | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f52944,f1049])).
fof(f66983,plain,(
  ~sP0(happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55))) | $spl9),
  inference(unit_resulting_resolution,[],[f52944,f52944,f1049])).
fof(f66990,plain,(
  ( ! [X0] : (sP1('const.bool.BOUNDED_1'(s(bool,X0)),happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f52944,f1129])).
fof(f66991,plain,(
  ( ! [X0] : (sP1(happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),'const.bool.BOUNDED_1'(s(bool,X0)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f52944,f1136])).
fof(f66992,plain,(
  ( ! [X0,X1] : (sP50('const.bool.BOUNDED_1'(s(bool,X0)),X1,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f52944,f1242])).
fof(f67006,plain,(
  ( ! [X0] : (~sP47('const.bool.BOUNDED_1'(s(bool,X0)),'F_0',happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f52944,f1894])).
fof(f67014,plain,(
  ( ! [X0] : (~sP47('const.bool.BOUNDED_1'(s(bool,X0)),happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),'F_0')) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f52944,f1894])).
fof(f67015,plain,(
  ( ! [X0] : (~sP47('const.bool.BOUNDED_1'(s(bool,X0)),happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f52944,f52944,f1894])).
fof(f67022,plain,(
  ( ! [X0] : (~sP48('const.bool.BOUNDED_1'(s(bool,X0)),happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),'F_0')) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f52944,f1929])).
fof(f67029,plain,(
  ( ! [X0] : (~sP48('const.bool.BOUNDED_1'(s(bool,X0)),'F_0',happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f52944,f1929])).
fof(f67030,plain,(
  ( ! [X0] : (~sP48('const.bool.BOUNDED_1'(s(bool,X0)),happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f52944,f52944,f1929])).
fof(f67079,plain,(
  ( ! [X0,X1] : (~sP43('const.bool.BOUNDED_1'(s(bool,X0)),'const.bool.BOUNDED_1'(s(bool,X1)),happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f52944,f4280])).
fof(f67081,plain,(
  ( ! [X0,X1] : (~sP42('const.bool.BOUNDED_1'(s(bool,X0)),'const.bool.BOUNDED_1'(s(bool,X1)),happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f52944,f4433])).
fof(f67083,plain,(
  ( ! [X0,X1] : (~sP45('const.bool.BOUNDED_1'(s(bool,X0)),'const.bool.BOUNDED_1'(s(bool,X1)),happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f52944,f4574])).
fof(f67085,plain,(
  ( ! [X0,X1] : (~sP46(happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),'const.bool.BOUNDED_1'(s(bool,X0)),'const.bool.BOUNDED_1'(s(bool,X1)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f52944,f4733])).
fof(f67087,plain,(
  ( ! [X0,X1] : (~sP49('const.bool.BOUNDED_1'(s(bool,X0)),happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),'const.bool.BOUNDED_1'(s(bool,X1)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f52944,f4845])).
fof(f67089,plain,(
  ( ! [X0,X1] : (~sP50('const.bool.BOUNDED_1'(s(bool,X0)),happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),'const.bool.BOUNDED_1'(s(bool,X1)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f52944,f5003])).
fof(f67138,plain,(
  sP1('T_0',happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55))) | $spl9),
  inference(unit_resulting_resolution,[],[f52946,f52946,f52944,f9571])).
fof(f67141,plain,(
  sP1(happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)),'T_0') | $spl9),
  inference(unit_resulting_resolution,[],[f52946,f52946,f52944,f9572])).
fof(f67144,plain,(
  ( ! [X0] : (sP50('T_0',X0,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f52946,f52946,f52944,f9584])).
fof(f65056,plain,(
  ~sP44('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0') | $spl9),
  inference(unit_resulting_resolution,[],[f53044,f926])).
fof(f64698,plain,(
  ~sP44('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl9),
  inference(unit_resulting_resolution,[],[f53043,f926])).
fof(f64642,plain,(
  ~sP44('F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl9),
  inference(unit_resulting_resolution,[],[f53035,f926])).
fof(f61982,plain,(
  s(bool,'F_0') = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl9),
  inference(unit_resulting_resolution,[],[f1102,f53215,f9570])).
fof(f56439,plain,(
  ( ! [X0] : (~sP42('const.bool.BOUNDED_1'(s(bool,X0)),'T_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f531,f1060,f53018,f53057,f930])).
fof(f56217,plain,(
  ~sP44('T_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'T_0') | $spl9),
  inference(unit_resulting_resolution,[],[f531,f52946,f947])).
fof(f55674,plain,(
  ~sP44('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0','F_0') | $spl9),
  inference(unit_resulting_resolution,[],[f53042,f926])).
fof(f55669,plain,(
  ~sP44('F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0') | $spl9),
  inference(unit_resulting_resolution,[],[f53034,f926])).
fof(f55664,plain,(
  ~sP44('F_0','F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl9),
  inference(unit_resulting_resolution,[],[f53026,f926])).
fof(f55650,plain,(
  sP44('F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'T_0') | $spl9),
  inference(unit_resulting_resolution,[],[f531,f1060,f1054,f53025,f930])).
fof(f55652,plain,(
  sP44('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'T_0') | $spl9),
  inference(unit_resulting_resolution,[],[f531,f1060,f53018,f53025,f930])).
fof(f55636,plain,(
  sP44('F_0','T_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f1059,f1054,f53024,f932])).
fof(f55612,plain,(
  sP44('T_0','F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f1058,f1057,f53017,f931])).
fof(f53495,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | s(bool,'T_0') = s(bool,X0)) ) | $spl9),
  inference(subsumption_resolution,[],[f53379,f531])).
fof(f53379,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s(bool,X0) = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | s(bool,'T_0') = s(bool,X0)) ) | $spl9),
  inference(superposition,[],[f1046,f1319])).
fof(f52944,plain,(
  ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK200(sK55,sK52,sK51)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51))),s('type.modSem.v',sK52))),s('type.conSem.v',sK55)))) | $spl9),
  inference(unit_resulting_resolution,[],[f1046,f768])).
fof(f52945,plain,(
  ~sP22(sK200(sK55,sK52,sK51),sK201(sK55,sK52,sK51),sK202(sK55,sK52,sK51)) | $spl9),
  inference(unit_resulting_resolution,[],[f1046,f765])).
fof(f52946,plain,(
  s(bool,'T_0') != s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl9),
  inference(unit_resulting_resolution,[],[f1046,f547])).
fof(f52952,plain,(
  ~sP1('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0') | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f1046,f638])).
fof(f52954,plain,(
  ~sP1('F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f1046,f638])).
fof(f52955,plain,(
  ~sP1('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl9),
  inference(unit_resulting_resolution,[],[f1046,f1046,f638])).
fof(f52958,plain,(
  ( ! [X0] : (~sP40(X0,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0')) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f1046,f916])).
fof(f52969,plain,(
  ( ! [X0] : (~sP40(X0,'F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f1046,f916])).
fof(f52970,plain,(
  ( ! [X0] : (~sP40(X0,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1046,f1046,f916])).
fof(f52980,plain,(
  ( ! [X0] : (~sP40('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0',X0)) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f1046,f917])).
fof(f52984,plain,(
  ( ! [X0] : (~sP40('F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X0)) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f1046,f917])).
fof(f52985,plain,(
  ( ! [X0] : (~sP40('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X0)) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1046,f1046,f917])).
fof(f52995,plain,(
  ~sP44('T_0','T_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl9),
  inference(unit_resulting_resolution,[],[f531,f531,f1046,f929])).
fof(f53000,plain,(
  sP44('T_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0') | $spl9),
  inference(unit_resulting_resolution,[],[f1058,f1053,f1056,f1046,f931])).
fof(f53017,plain,(
  ( ! [X0,X1] : (sP43(X0,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X1)) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1046,f935])).
fof(f53018,plain,(
  ( ! [X0,X1] : (sP43('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X0,X1)) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1046,f936])).
fof(f53024,plain,(
  ( ! [X0,X1] : (sP42(X0,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X1)) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1046,f939])).
fof(f53025,plain,(
  ( ! [X0,X1] : (sP42('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X0,X1)) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1046,f940])).
fof(f53026,plain,(
  ~sP41('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0','F_0') | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f1048,f1046,f941])).
fof(f53034,plain,(
  ~sP41('F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0') | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f1048,f1046,f941])).
fof(f53035,plain,(
  ~sP41('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0') | $spl9),
  inference(unit_resulting_resolution,[],[f1046,f1048,f1046,f941])).
fof(f53042,plain,(
  ~sP41('F_0','F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f1048,f1046,f941])).
fof(f53043,plain,(
  ~sP41('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl9),
  inference(unit_resulting_resolution,[],[f1046,f1048,f1046,f941])).
fof(f53044,plain,(
  ~sP41('F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f1046,f1046,f941])).
fof(f53045,plain,(
  ~sP41('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl9),
  inference(unit_resulting_resolution,[],[f1046,f1046,f1046,f941])).
fof(f53050,plain,(
  sP44('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0','T_0') | $spl9),
  inference(unit_resulting_resolution,[],[f1102,f1046,f945])).
fof(f53052,plain,(
  sP44('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'T_0','F_0') | $spl9),
  inference(unit_resulting_resolution,[],[f1102,f1046,f945])).
fof(f53057,plain,(
  ( ! [X0] : (~sP44('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.bool.BOUNDED_1'(s(bool,X0)),'T_0')) ) | $spl9),
  inference(unit_resulting_resolution,[],[f538,f1046,f948])).
fof(f53061,plain,(
  ( ! [X0] : (~sP44('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'T_0','const.bool.BOUNDED_1'(s(bool,X0)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f538,f1046,f948])).
fof(f53062,plain,(
  ( ! [X0] : (~sP46('T_0',X0,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f531,f1046,f950])).
fof(f53066,plain,(
  ( ! [X0] : (~sP46('T_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X0)) ) | $spl9),
  inference(unit_resulting_resolution,[],[f531,f1046,f951])).
fof(f53075,plain,(
  ( ! [X0,X1] : (sP45(X0,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X1)) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1046,f958])).
fof(f53076,plain,(
  ( ! [X0,X1] : (sP45('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X0,X1)) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1046,f959])).
fof(f53077,plain,(
  ( ! [X0] : (sP46('F_0',X0,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f1046,f960])).
fof(f53082,plain,(
  ( ! [X0] : (sP46('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X0,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1046,f1046,f960])).
fof(f53083,plain,(
  ( ! [X0] : (sP46('F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X0)) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f1046,f961])).
fof(f53088,plain,(
  ( ! [X0] : (sP46('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X0)) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1046,f1046,f961])).
fof(f53090,plain,(
  ( ! [X0] : (~sP48('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X0,'T_0')) ) | $spl9),
  inference(unit_resulting_resolution,[],[f531,f1046,f966])).
fof(f53091,plain,(
  ( ! [X0] : (~sP48('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'T_0',X0)) ) | $spl9),
  inference(unit_resulting_resolution,[],[f531,f1046,f967])).
fof(f53132,plain,(
  ( ! [X0,X1] : (sP47('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X0,X1)) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1046,f976])).
fof(f53133,plain,(
  sP48('F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0') | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f1048,f1046,f977])).
fof(f53138,plain,(
  sP48('F_0','F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f1048,f1046,f977])).
fof(f53140,plain,(
  sP48('F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f1046,f1046,f977])).
fof(f53143,plain,(
  sP48('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0','F_0') | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f1048,f1046,f977])).
fof(f53144,plain,(
  sP48('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0') | $spl9),
  inference(unit_resulting_resolution,[],[f1046,f1048,f1046,f977])).
fof(f53145,plain,(
  sP48('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f1046,f1046,f977])).
fof(f53146,plain,(
  sP48('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl9),
  inference(unit_resulting_resolution,[],[f1046,f1046,f1046,f977])).
fof(f53155,plain,(
  ( ! [X0] : (~sP50('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X0,'F_0')) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f1046,f983])).
fof(f53157,plain,(
  ( ! [X0] : (~sP50('F_0',X0,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f1046,f983])).
fof(f53158,plain,(
  ( ! [X0] : (~sP50('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X0,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1046,f1046,f983])).
fof(f53169,plain,(
  ( ! [X0] : (~sP50('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'T_0',X0)) ) | $spl9),
  inference(unit_resulting_resolution,[],[f531,f1046,f984])).
fof(f53189,plain,(
  ( ! [X0,X1] : (sP49(X0,X1,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1046,f991])).
fof(f53190,plain,(
  ( ! [X0,X1] : (sP49('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X0,X1)) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1046,f993])).
fof(f53191,plain,(
  sP50('F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'T_0') | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f531,f1046,f994])).
fof(f53195,plain,(
  sP50('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0','T_0') | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f531,f1046,f994])).
fof(f53196,plain,(
  sP50('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'T_0') | $spl9),
  inference(unit_resulting_resolution,[],[f1046,f531,f1046,f994])).
fof(f53203,plain,(
  ( ! [X0] : (sP46('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X0,'F_0')) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1062,f1046,f1030])).
fof(f53205,plain,(
  ( ! [X0] : (sP46('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0',X0)) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1063,f1046,f1030])).
fof(f53207,plain,(
  ~sP0('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0') | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f1046,f1049])).
fof(f53214,plain,(
  ~sP0('F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f1046,f1049])).
fof(f53215,plain,(
  ~sP0('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl9),
  inference(unit_resulting_resolution,[],[f1046,f1046,f1049])).
fof(f53221,plain,(
  ( ! [X0] : (sP1('const.bool.BOUNDED_1'(s(bool,X0)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1046,f1129])).
fof(f53222,plain,(
  ( ! [X0] : (sP1('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.bool.BOUNDED_1'(s(bool,X0)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1046,f1136])).
fof(f53223,plain,(
  ( ! [X0,X1] : (sP50('const.bool.BOUNDED_1'(s(bool,X0)),X1,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1046,f1242])).
fof(f53236,plain,(
  ( ! [X0] : (~sP47('const.bool.BOUNDED_1'(s(bool,X0)),'F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f1046,f1894])).
fof(f53243,plain,(
  ( ! [X0] : (~sP47('const.bool.BOUNDED_1'(s(bool,X0)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0')) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f1046,f1894])).
fof(f53244,plain,(
  ( ! [X0] : (~sP47('const.bool.BOUNDED_1'(s(bool,X0)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1046,f1046,f1894])).
fof(f53250,plain,(
  ( ! [X0] : (~sP48('const.bool.BOUNDED_1'(s(bool,X0)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0')) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f1046,f1929])).
fof(f53257,plain,(
  ( ! [X0] : (~sP48('const.bool.BOUNDED_1'(s(bool,X0)),'F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f1046,f1929])).
fof(f53258,plain,(
  ( ! [X0] : (~sP48('const.bool.BOUNDED_1'(s(bool,X0)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1046,f1046,f1929])).
fof(f53304,plain,(
  ( ! [X0,X1] : (~sP43('const.bool.BOUNDED_1'(s(bool,X0)),'const.bool.BOUNDED_1'(s(bool,X1)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1046,f4280])).
fof(f53306,plain,(
  ( ! [X0,X1] : (~sP42('const.bool.BOUNDED_1'(s(bool,X0)),'const.bool.BOUNDED_1'(s(bool,X1)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1046,f4433])).
fof(f53308,plain,(
  ( ! [X0,X1] : (~sP45('const.bool.BOUNDED_1'(s(bool,X0)),'const.bool.BOUNDED_1'(s(bool,X1)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1046,f4574])).
fof(f53310,plain,(
  ( ! [X0,X1] : (~sP46('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.bool.BOUNDED_1'(s(bool,X0)),'const.bool.BOUNDED_1'(s(bool,X1)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1046,f4733])).
fof(f53312,plain,(
  ( ! [X0,X1] : (~sP49('const.bool.BOUNDED_1'(s(bool,X0)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.bool.BOUNDED_1'(s(bool,X1)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1046,f4845])).
fof(f53314,plain,(
  ( ! [X0,X1] : (~sP50('const.bool.BOUNDED_1'(s(bool,X0)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.bool.BOUNDED_1'(s(bool,X1)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1046,f5003])).
fof(f1046,plain,(
  ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) | $spl9),
  inference(cnf_transformation,[],[f1046_D])).
fof(f1046_D,plain,(
  ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) <=> ~$spl9),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl9])])).
fof(f21338,plain,(
  ( ! [X0] : (sP50('T_0',X0,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f19736,f19504,f19504,f9587])).
fof(f31139,plain,(
  ( ! [X449,X448] : (s(bool,'F_0') = s(bool,sK65('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X449,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X449),s(bool,X448)))) | s(bool,'T_0') = s(bool,X448)) ) | $spl9),
  inference(forward_demodulation,[],[f23966,f25204])).
fof(f23966,plain,(
  ( ! [X449,X448] : (~p(s(bool,happ(s(fun(bool,bool),X449),s(bool,X448)))) | s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) = s(bool,sK65('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X449,bool)) | s(bool,'T_0') = s(bool,X448)) ) | $spl9),
  inference(superposition,[],[f603,f20010])).
fof(f25204,plain,(
  s(bool,'F_0') = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl9),
  inference(unit_resulting_resolution,[],[f531,f1102,f19704,f9585])).
fof(f31109,plain,(
  ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) | $spl9),
  inference(global_subsumption,[],[f530,f529,f528,f527,f531,f538,f539,f548,f547,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f668,f689,f709,f708,f707,f706,f726,f721,f720,f719,f718,f736,f731,f730,f729,f728,f739,f738,f743,f742,f747,f746,f752,f751,f758,f757,f756,f777,f772,f771,f770,f769,f784,f783,f782,f781,f801,f796,f795,f794,f793,f811,f806,f805,f804,f803,f814,f813,f818,f817,f822,f821,f827,f826,f833,f832,f831,f850,f849,f848,f847,f867,f862,f861,f860,f859,f877,f872,f871,f870,f869,f880,f879,f884,f883,f888,f887,f893,f892,f899,f898,f897,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2359,f2526,f2533,f2565,f2572,f2608,f2621,f2845,f2935,f2940,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f4202,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5689,f7303,f7383,f7384,f7553,f7558,f7561,f7565,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9603,f8248,f8253,f8256,f8260,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f895,f890,f829,f824,f754,f749,f687,f683,f666,f663,f693,f685,f681,f906,f874,f873,f866,f865,f851,f808,f807,f800,f799,f785,f733,f732,f725,f724,f710,f699,f696,f659,f657,f677,f6241,f6256,f6286,f684,f664,f688,f667,f692,f680,f670,f6240,f6247,f6273,f858,f857,f856,f855,f854,f853,f852,f792,f791,f790,f789,f788,f787,f786,f717,f716,f715,f714,f713,f712,f711,f908,f909,f907,f900,f894,f889,f885,f881,f876,f875,f864,f863,f834,f828,f823,f819,f815,f810,f809,f798,f797,f759,f753,f748,f744,f740,f735,f734,f723,f722,f701,f694,f691,f686,f682,f679,f676,f669,f665,f662,f660,f656,f674,f673,f672,f671,f702,f661,f697,f658,f901,f886,f882,f878,f835,f820,f816,f812,f760,f745,f741,f737,f905,f904,f903,f902,f896,f891,f868,f830,f825,f802,f755,f750,f727,f705,f655,f8277,f8276,f8275,f8274,f8273,f8272,f8271,f8244,f8008,f7582,f7581,f7580,f7579,f7578,f7577,f7576,f7549,f9615,f9614,f9613,f9612,f9611,f9610,f9609,f9606,f9605,f602,f601,f599,f596,f594,f593,f591,f587,f586,f698,f695,f845,f774,f773,f9622,f768,f767,f766,f765,f764,f763,f762,f761,f703,f653,f700,f690,f678,f675,f776,f775,f2938,f2941,f844,f9602,f9621,f9604,f9600,f6932,f4519,f1019,f846,f843,f842,f841,f840,f839,f838,f837,f836,f780,f779,f778,f704,f654,f7575,f8270,f3884,f3443,f3442,f2877,f2876,f2754,f2753,f2734,f2718,f2706,f2696,f2684,f2672,f2618,f2617,f2607,f2569,f2568,f2564,f2530,f2529,f2525,f2475,f2474,f2443,f2442,f1048,f552,f551,f12824,f12904,f12907,f12983,f12986,f2436,f2339,f8246,f8245,f7551,f7550,f2432,f2330,f2433,f2331,f8010,f8009,f9608,f9607,f604,f603,f16743,f16742,f16741,f18050,f18055,f18061,f18176,f1046,f19481,f19851,f19849,f19847,f19845,f19843,f19841,f19795,f19794,f19789,f19785,f19784,f19779,f19766,f19765,f19764,f19760,f19759,f19754,f19752,f19750,f19743,f19742,f19738,f19737,f19736,f19712,f19704,f19703,f19701,f19692,f19691,f19690,f19689,f19686,f19684,f19679,f19678,f19637,f19636,f19634,f19629,f19628,f19623,f19622,f19621,f19611,f19606,f19603,f19600,f19598,f19596,f19591,f19590,f19589,f19588,f19581,f19580,f19572,f19571,f19570,f19564,f19563,f19546,f19541,f19535,f19534,f19530,f19524,f19523,f19516,f19513,f19512,f19510,f19504,f19503,f20010,f20637,f20661,f20677,f20675,f20689,f20694,f20699,f21645,f22464,f22511,f23012,f23077,f23297,f23337,f23729,f23967,f23969,f23974,f23977,f24930,f24958,f25011,f25110,f25170,f25176,f25182,f26871,f26970,f27227,f27259,f27301,f27326,f27339,f27356,f27371,f27392,f28264,f28308,f28347,f28423,f28438,f28462,f28472,f28516,f28563,f28704,f28745,f28834,f28842,f28853,f28872,f28884,f28895,f28905,f28938,f28961,f28989,f29007,f29023,f29042,f29061,f29554,f29572,f29636,f31002,f31106,f31094])).
fof(f31094,plain,(
  ( ! [X21,X20] : (~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) | s(bool,'F_0') = s(bool,sK65('F_0',X20,bool)) | s(bool,'T_0') = s(bool,X21) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X20),s(bool,X21)))) ) | $spl9),
  inference(superposition,[],[f2331,f20010])).
fof(f29636,plain,(
  ~sP44('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl9),
  inference(unit_resulting_resolution,[],[f19591,f926])).
fof(f25182,plain,(
  ~sP44('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0') | $spl9),
  inference(unit_resulting_resolution,[],[f19590,f926])).
fof(f25176,plain,(
  ~sP44('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl9),
  inference(unit_resulting_resolution,[],[f19589,f926])).
fof(f25170,plain,(
  ~sP44('F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl9),
  inference(unit_resulting_resolution,[],[f19581,f926])).
fof(f23977,plain,(
  ( ! [X492,X494,X490,X493,X491] : (s('type.pair.prod'(X491,bool),'const.pair.,_2'(s(X491,X492),s(bool,X493))) != s('type.pair.prod'(X491,bool),'const.pair.,_2'(s(X491,X494),s(bool,X490))) | s(bool,X493) = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | s(bool,'T_0') = s(bool,X490)) ) | $spl9),
  inference(superposition,[],[f651,f20010])).
fof(f23974,plain,(
  ( ! [X476,X478,X475,X477,X479] : (s('type.pair.prod'(bool,X476),'const.pair.,_2'(s(bool,X475),s(X476,X479))) != s('type.pair.prod'(bool,X476),'const.pair.,_2'(s(bool,X477),s(X476,X478))) | s(bool,X477) = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | s(bool,'T_0') = s(bool,X475)) ) | $spl9),
  inference(superposition,[],[f650,f20010])).
fof(f23969,plain,(
  ( ! [X455,X457,X454,X456] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X454),s('type.list.list'(bool),X455))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X456),s('type.list.list'(bool),X457))) | s(bool,X456) = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | s(bool,'T_0') = s(bool,X454)) ) | $spl9),
  inference(superposition,[],[f606,f20010])).
fof(f23967,plain,(
  ( ! [X451,X450] : (~p(s(bool,happ(s(fun(bool,bool),X451),s(bool,X450)))) | p(s(bool,happ(s(fun(bool,bool),X451),s(bool,sK65('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X451,bool))))) | s(bool,'T_0') = s(bool,X450)) ) | $spl9),
  inference(superposition,[],[f604,f20010])).
fof(f23729,plain,(
  ( ! [X592,X594,X590,X593,X591] : (s(bool,X591) != s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | s(X592,X593) != s(X592,X594) | s('type.pair.prod'(bool,X592),'const.pair.,_2'(s(bool,X590),s(X592,X594))) = s('type.pair.prod'(bool,X592),'const.pair.,_2'(s(bool,X591),s(X592,X593))) | s(bool,'T_0') = s(bool,X590)) ) | $spl9),
  inference(superposition,[],[f652,f20010])).
fof(f22511,plain,(
  ( ! [X0,X1] : (~sP44('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.bool.BOUNDED_1'(s(bool,X0)),'const.bool.BOUNDED_1'(s(bool,X1)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f19843,f927])).
fof(f22464,plain,(
  ( ! [X0,X1] : (~sP44('const.bool.BOUNDED_1'(s(bool,X0)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.bool.BOUNDED_1'(s(bool,X1)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f19841,f928])).
fof(f21645,plain,(
  ( ! [X0] : (~sP42('const.bool.BOUNDED_1'(s(bool,X0)),'T_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f531,f1060,f19564,f19600,f930])).
fof(f20699,plain,(
  ~sP44('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0','F_0') | $spl9),
  inference(unit_resulting_resolution,[],[f19588,f926])).
fof(f20694,plain,(
  ~sP44('F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0') | $spl9),
  inference(unit_resulting_resolution,[],[f19580,f926])).
fof(f20689,plain,(
  ~sP44('F_0','F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl9),
  inference(unit_resulting_resolution,[],[f19572,f926])).
fof(f20675,plain,(
  sP44('F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'T_0') | $spl9),
  inference(unit_resulting_resolution,[],[f531,f1060,f1054,f19571,f930])).
fof(f20677,plain,(
  sP44('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'T_0') | $spl9),
  inference(unit_resulting_resolution,[],[f531,f1060,f19564,f19571,f930])).
fof(f20661,plain,(
  sP44('F_0','T_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f1059,f1054,f19570,f932])).
fof(f20637,plain,(
  sP44('T_0','F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f1058,f1057,f19563,f931])).
fof(f20010,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | s(bool,'T_0') = s(bool,X0)) ) | $spl9),
  inference(subsumption_resolution,[],[f19911,f531])).
fof(f19911,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s(bool,X0) = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | s(bool,'T_0') = s(bool,X0)) ) | $spl9),
  inference(superposition,[],[f1046,f1319])).
fof(f19503,plain,(
  ~sP22(sK200(sK55,sK52,sK51),sK201(sK55,sK52,sK51),sK202(sK55,sK52,sK51)) | $spl9),
  inference(unit_resulting_resolution,[],[f1046,f765])).
fof(f19504,plain,(
  s(bool,'T_0') != s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl9),
  inference(unit_resulting_resolution,[],[f1046,f547])).
fof(f19510,plain,(
  ~sP1('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0') | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f1046,f638])).
fof(f19512,plain,(
  ~sP1('F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f1046,f638])).
fof(f19513,plain,(
  ~sP1('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl9),
  inference(unit_resulting_resolution,[],[f1046,f1046,f638])).
fof(f19516,plain,(
  ( ! [X0] : (~sP40(X0,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0')) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f1046,f916])).
fof(f19523,plain,(
  ( ! [X0] : (~sP40(X0,'F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f1046,f916])).
fof(f19524,plain,(
  ( ! [X0] : (~sP40(X0,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1046,f1046,f916])).
fof(f19530,plain,(
  ( ! [X0] : (~sP40('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0',X0)) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f1046,f917])).
fof(f19534,plain,(
  ( ! [X0] : (~sP40('F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X0)) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f1046,f917])).
fof(f19535,plain,(
  ( ! [X0] : (~sP40('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X0)) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1046,f1046,f917])).
fof(f19541,plain,(
  ~sP44('T_0','T_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl9),
  inference(unit_resulting_resolution,[],[f531,f531,f1046,f929])).
fof(f19546,plain,(
  sP44('T_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0') | $spl9),
  inference(unit_resulting_resolution,[],[f1058,f1053,f1056,f1046,f931])).
fof(f19563,plain,(
  ( ! [X0,X1] : (sP43(X0,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X1)) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1046,f935])).
fof(f19564,plain,(
  ( ! [X0,X1] : (sP43('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X0,X1)) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1046,f936])).
fof(f19570,plain,(
  ( ! [X0,X1] : (sP42(X0,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X1)) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1046,f939])).
fof(f19571,plain,(
  ( ! [X0,X1] : (sP42('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X0,X1)) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1046,f940])).
fof(f19572,plain,(
  ~sP41('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0','F_0') | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f1048,f1046,f941])).
fof(f19580,plain,(
  ~sP41('F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0') | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f1048,f1046,f941])).
fof(f19581,plain,(
  ~sP41('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0') | $spl9),
  inference(unit_resulting_resolution,[],[f1046,f1048,f1046,f941])).
fof(f19588,plain,(
  ~sP41('F_0','F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f1048,f1046,f941])).
fof(f19589,plain,(
  ~sP41('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl9),
  inference(unit_resulting_resolution,[],[f1046,f1048,f1046,f941])).
fof(f19590,plain,(
  ~sP41('F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f1046,f1046,f941])).
fof(f19591,plain,(
  ~sP41('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl9),
  inference(unit_resulting_resolution,[],[f1046,f1046,f1046,f941])).
fof(f19596,plain,(
  sP44('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0','T_0') | $spl9),
  inference(unit_resulting_resolution,[],[f1102,f1046,f945])).
fof(f19598,plain,(
  sP44('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'T_0','F_0') | $spl9),
  inference(unit_resulting_resolution,[],[f1102,f1046,f945])).
fof(f19600,plain,(
  ( ! [X0] : (~sP44('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.bool.BOUNDED_1'(s(bool,X0)),'T_0')) ) | $spl9),
  inference(unit_resulting_resolution,[],[f538,f1046,f948])).
fof(f19603,plain,(
  ( ! [X0] : (~sP44('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'T_0','const.bool.BOUNDED_1'(s(bool,X0)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f538,f1046,f948])).
fof(f19606,plain,(
  ( ! [X0] : (~sP46('T_0',X0,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f531,f1046,f950])).
fof(f19611,plain,(
  ( ! [X0] : (~sP46('T_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X0)) ) | $spl9),
  inference(unit_resulting_resolution,[],[f531,f1046,f951])).
fof(f19621,plain,(
  ( ! [X0,X1] : (sP45(X0,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X1)) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1046,f958])).
fof(f19622,plain,(
  ( ! [X0,X1] : (sP45('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X0,X1)) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1046,f959])).
fof(f19623,plain,(
  ( ! [X0] : (sP46('F_0',X0,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f1046,f960])).
fof(f19628,plain,(
  ( ! [X0] : (sP46('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X0,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1046,f1046,f960])).
fof(f19629,plain,(
  ( ! [X0] : (sP46('F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X0)) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f1046,f961])).
fof(f19634,plain,(
  ( ! [X0] : (sP46('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X0)) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1046,f1046,f961])).
fof(f19636,plain,(
  ( ! [X0] : (~sP48('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X0,'T_0')) ) | $spl9),
  inference(unit_resulting_resolution,[],[f531,f1046,f966])).
fof(f19637,plain,(
  ( ! [X0] : (~sP48('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'T_0',X0)) ) | $spl9),
  inference(unit_resulting_resolution,[],[f531,f1046,f967])).
fof(f19678,plain,(
  ( ! [X0,X1] : (sP47('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X0,X1)) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1046,f976])).
fof(f19679,plain,(
  sP48('F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0') | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f1048,f1046,f977])).
fof(f19684,plain,(
  sP48('F_0','F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f1048,f1046,f977])).
fof(f19686,plain,(
  sP48('F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f1046,f1046,f977])).
fof(f19689,plain,(
  sP48('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0','F_0') | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f1048,f1046,f977])).
fof(f19690,plain,(
  sP48('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0') | $spl9),
  inference(unit_resulting_resolution,[],[f1046,f1048,f1046,f977])).
fof(f19691,plain,(
  sP48('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f1046,f1046,f977])).
fof(f19692,plain,(
  sP48('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl9),
  inference(unit_resulting_resolution,[],[f1046,f1046,f1046,f977])).
fof(f19701,plain,(
  ( ! [X0] : (~sP50('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X0,'F_0')) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f1046,f983])).
fof(f19703,plain,(
  ( ! [X0] : (~sP50('F_0',X0,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f1046,f983])).
fof(f19704,plain,(
  ( ! [X0] : (~sP50('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X0,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1046,f1046,f983])).
fof(f19712,plain,(
  ( ! [X0] : (~sP50('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'T_0',X0)) ) | $spl9),
  inference(unit_resulting_resolution,[],[f531,f1046,f984])).
fof(f19736,plain,(
  ( ! [X0,X1] : (sP49(X0,X1,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1046,f991])).
fof(f19737,plain,(
  ( ! [X0,X1] : (sP49('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X0,X1)) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1046,f993])).
fof(f19738,plain,(
  sP50('F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'T_0') | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f531,f1046,f994])).
fof(f19742,plain,(
  sP50('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0','T_0') | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f531,f1046,f994])).
fof(f19743,plain,(
  sP50('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'T_0') | $spl9),
  inference(unit_resulting_resolution,[],[f1046,f531,f1046,f994])).
fof(f19750,plain,(
  ( ! [X0] : (sP46('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X0,'F_0')) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1062,f1046,f1030])).
fof(f19752,plain,(
  ( ! [X0] : (sP46('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0',X0)) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1063,f1046,f1030])).
fof(f19754,plain,(
  ~sP0('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0') | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f1046,f1049])).
fof(f19759,plain,(
  ~sP0('F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f1046,f1049])).
fof(f19760,plain,(
  ~sP0('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl9),
  inference(unit_resulting_resolution,[],[f1046,f1046,f1049])).
fof(f19764,plain,(
  ( ! [X0] : (sP1('const.bool.BOUNDED_1'(s(bool,X0)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1046,f1129])).
fof(f19765,plain,(
  ( ! [X0] : (sP1('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.bool.BOUNDED_1'(s(bool,X0)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1046,f1136])).
fof(f19766,plain,(
  ( ! [X0,X1] : (sP50('const.bool.BOUNDED_1'(s(bool,X0)),X1,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1046,f1242])).
fof(f19779,plain,(
  ( ! [X0] : (~sP47('const.bool.BOUNDED_1'(s(bool,X0)),'F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f1046,f1894])).
fof(f19784,plain,(
  ( ! [X0] : (~sP47('const.bool.BOUNDED_1'(s(bool,X0)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0')) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f1046,f1894])).
fof(f19785,plain,(
  ( ! [X0] : (~sP47('const.bool.BOUNDED_1'(s(bool,X0)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1046,f1046,f1894])).
fof(f19789,plain,(
  ( ! [X0] : (~sP48('const.bool.BOUNDED_1'(s(bool,X0)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0')) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f1046,f1929])).
fof(f19794,plain,(
  ( ! [X0] : (~sP48('const.bool.BOUNDED_1'(s(bool,X0)),'F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1048,f1046,f1929])).
fof(f19795,plain,(
  ( ! [X0] : (~sP48('const.bool.BOUNDED_1'(s(bool,X0)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1046,f1046,f1929])).
fof(f19841,plain,(
  ( ! [X0,X1] : (~sP43('const.bool.BOUNDED_1'(s(bool,X0)),'const.bool.BOUNDED_1'(s(bool,X1)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1046,f4280])).
fof(f19843,plain,(
  ( ! [X0,X1] : (~sP42('const.bool.BOUNDED_1'(s(bool,X0)),'const.bool.BOUNDED_1'(s(bool,X1)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1046,f4433])).
fof(f19845,plain,(
  ( ! [X0,X1] : (~sP45('const.bool.BOUNDED_1'(s(bool,X0)),'const.bool.BOUNDED_1'(s(bool,X1)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1046,f4574])).
fof(f19847,plain,(
  ( ! [X0,X1] : (~sP46('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.bool.BOUNDED_1'(s(bool,X0)),'const.bool.BOUNDED_1'(s(bool,X1)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1046,f4733])).
fof(f19849,plain,(
  ( ! [X0,X1] : (~sP49('const.bool.BOUNDED_1'(s(bool,X0)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.bool.BOUNDED_1'(s(bool,X1)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1046,f4845])).
fof(f19851,plain,(
  ( ! [X0,X1] : (~sP50('const.bool.BOUNDED_1'(s(bool,X0)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.bool.BOUNDED_1'(s(bool,X1)))) ) | $spl9),
  inference(unit_resulting_resolution,[],[f1046,f5003])).
fof(f34145,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | $spl239),
  inference(cnf_transformation,[],[f34145_D])).
fof(f34145_D,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) <=> ~$spl239),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl239])])).
fof(f34481,plain,(
  ( ! [X227,X228] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X227) = s(fun(bool,bool),X228) | s(bool,'T_0') = s(bool,sK66(X227,X228,bool,bool))) ) | $spl230),
  inference(superposition,[],[f2876,f34139])).
fof(f52694,plain,(
  ( ! [X372,X374,X373,X371] : (s('type.pair.prod'(X372,bool),'const.pair.,_2'(s(X372,X373),s(bool,'T_0'))) != s('type.pair.prod'(X372,bool),'const.pair.,_2'(s(X372,X374),s(bool,f(s(bool,X371))))) | s(bool,'T_0') = s(bool,X371)) ) | $spl252),
  inference(cnf_transformation,[],[f52694_D])).
fof(f52694_D,plain,(
  ( ! [X372,X374,X373,X371] : (s('type.pair.prod'(X372,bool),'const.pair.,_2'(s(X372,X373),s(bool,'T_0'))) != s('type.pair.prod'(X372,bool),'const.pair.,_2'(s(X372,X374),s(bool,f(s(bool,X371))))) | s(bool,'T_0') = s(bool,X371)) ) <=> ~$spl252),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl252])])).
fof(f70370,plain,(
  ( ! [X372,X374,X370,X373,X375,X371] : (s('type.pair.prod'(X372,bool),'const.pair.,_2'(s(X372,X373),s(bool,'T_0'))) != s('type.pair.prod'(X372,bool),'const.pair.,_2'(s(X372,X374),s(bool,f(s(bool,X371))))) | s(bool,X370) = s(bool,'const.bool.BOUNDED_1'(s(bool,X375))) | s(bool,'T_0') = s(bool,X371) | s(bool,'T_0') = s(bool,X370)) ) | ($spl9 | $spl239)),
  inference(superposition,[],[f2621,f65033])).
fof(f65033,plain,(
  ( ! [X2,X3] : (s(bool,X3) = s(bool,f(s(bool,X2))) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X3)) ) | ($spl9 | $spl239)),
  inference(duplicate_literal_removal,[],[f64745])).
fof(f64745,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,X3) = s(bool,f(s(bool,X2))) | s(bool,'T_0') = s(bool,X3)) ) | ($spl9 | $spl239)),
  inference(superposition,[],[f63920,f1319])).
fof(f63920,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,f(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl9 | $spl239)),
  inference(superposition,[],[f63484,f539])).
fof(f63484,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'F_0'))) | ($spl9 | $spl239)),
  inference(forward_demodulation,[],[f61983,f61982])).
fof(f61983,plain,(
  s(bool,f(s(bool,'F_0'))) = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | ($spl9 | $spl239)),
  inference(unit_resulting_resolution,[],[f34145,f53215,f9570])).
fof(f52693,plain,(
  ( ! [X350,X349,X347,X348] : (s('type.pair.prod'(bool,X348),'const.pair.,_2'(s(bool,'T_0'),s(X348,X349))) != s('type.pair.prod'(bool,X348),'const.pair.,_2'(s(bool,f(s(bool,X347))),s(X348,X350))) | s(bool,'T_0') = s(bool,X347)) ) | $spl250),
  inference(cnf_transformation,[],[f52693_D])).
fof(f52693_D,plain,(
  ( ! [X350,X349,X347,X348] : (s('type.pair.prod'(bool,X348),'const.pair.,_2'(s(bool,'T_0'),s(X348,X349))) != s('type.pair.prod'(bool,X348),'const.pair.,_2'(s(bool,f(s(bool,X347))),s(X348,X350))) | s(bool,'T_0') = s(bool,X347)) ) <=> ~$spl250),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl250])])).
fof(f70366,plain,(
  ( ! [X350,X346,X349,X351,X347,X348] : (s('type.pair.prod'(bool,X348),'const.pair.,_2'(s(bool,'T_0'),s(X348,X349))) != s('type.pair.prod'(bool,X348),'const.pair.,_2'(s(bool,f(s(bool,X347))),s(X348,X350))) | s(bool,X346) = s(bool,'const.bool.BOUNDED_1'(s(bool,X351))) | s(bool,'T_0') = s(bool,X347) | s(bool,'T_0') = s(bool,X346)) ) | ($spl9 | $spl239)),
  inference(superposition,[],[f2572,f65033])).
fof(f52692,plain,(
  ( ! [X325,X324,X326] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X325))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,f(s(bool,X324))),s('type.list.list'(bool),X326))) | s(bool,'T_0') = s(bool,X324)) ) | $spl248),
  inference(cnf_transformation,[],[f52692_D])).
fof(f52692_D,plain,(
  ( ! [X325,X324,X326] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X325))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,f(s(bool,X324))),s('type.list.list'(bool),X326))) | s(bool,'T_0') = s(bool,X324)) ) <=> ~$spl248),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl248])])).
fof(f70362,plain,(
  ( ! [X325,X327,X323,X324,X326] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X325))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,f(s(bool,X324))),s('type.list.list'(bool),X326))) | s(bool,X323) = s(bool,'const.bool.BOUNDED_1'(s(bool,X327))) | s(bool,'T_0') = s(bool,X324) | s(bool,'T_0') = s(bool,X323)) ) | ($spl9 | $spl239)),
  inference(superposition,[],[f2533,f65033])).
fof(f62264,plain,(
  ( ! [X372,X374,X370,X373,X375,X371] : (s('type.pair.prod'(X372,bool),'const.pair.,_2'(s(X372,X373),s(bool,'T_0'))) != s('type.pair.prod'(X372,bool),'const.pair.,_2'(s(X372,X374),s(bool,f(s(bool,X371))))) | s(bool,X370) = s(bool,'const.bool.BOUNDED_1'(s(bool,X375))) | s(bool,'T_0') = s(bool,X371) | s(bool,'T_0') = s(bool,X370)) ) | ($spl4 | $spl239)),
  inference(superposition,[],[f2621,f55037])).
fof(f55037,plain,(
  ( ! [X2,X3] : (s(bool,X3) = s(bool,f(s(bool,X2))) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X3)) ) | ($spl4 | $spl239)),
  inference(duplicate_literal_removal,[],[f54772])).
fof(f54772,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,X3) = s(bool,f(s(bool,X2))) | s(bool,'T_0') = s(bool,X3)) ) | ($spl4 | $spl239)),
  inference(superposition,[],[f53664,f1319])).
fof(f53664,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,f(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl4 | $spl239)),
  inference(superposition,[],[f52778,f539])).
fof(f52778,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'F_0'))) | ($spl4 | $spl239)),
  inference(forward_demodulation,[],[f48269,f48558])).
fof(f48269,plain,(
  ( ! [X0] : (s(bool,f(s(bool,'F_0'))) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | ($spl4 | $spl239)),
  inference(unit_resulting_resolution,[],[f34145,f47121,f47151,f9587])).
fof(f62260,plain,(
  ( ! [X350,X346,X349,X351,X347,X348] : (s('type.pair.prod'(bool,X348),'const.pair.,_2'(s(bool,'T_0'),s(X348,X349))) != s('type.pair.prod'(bool,X348),'const.pair.,_2'(s(bool,f(s(bool,X347))),s(X348,X350))) | s(bool,X346) = s(bool,'const.bool.BOUNDED_1'(s(bool,X351))) | s(bool,'T_0') = s(bool,X347) | s(bool,'T_0') = s(bool,X346)) ) | ($spl4 | $spl239)),
  inference(superposition,[],[f2572,f55037])).
fof(f62256,plain,(
  ( ! [X325,X327,X323,X324,X326] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X325))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,f(s(bool,X324))),s('type.list.list'(bool),X326))) | s(bool,X323) = s(bool,'const.bool.BOUNDED_1'(s(bool,X327))) | s(bool,'T_0') = s(bool,X324) | s(bool,'T_0') = s(bool,X323)) ) | ($spl4 | $spl239)),
  inference(superposition,[],[f2533,f55037])).
fof(f51506,plain,(
  ( ! [X372,X374,X370,X373,X375,X371] : (s('type.pair.prod'(X372,bool),'const.pair.,_2'(s(X372,X373),s(bool,'T_0'))) != s('type.pair.prod'(X372,bool),'const.pair.,_2'(s(X372,X374),s(bool,f(s(bool,X371))))) | s(bool,X370) = s(bool,'const.bool.BOUNDED_1'(s(bool,X375))) | s(bool,'T_0') = s(bool,X371) | s(bool,'T_0') = s(bool,X370)) ) | ($spl8 | $spl239)),
  inference(superposition,[],[f2621,f36567])).
fof(f36567,plain,(
  ( ! [X2,X3] : (s(bool,X3) = s(bool,f(s(bool,X2))) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X3)) ) | ($spl8 | $spl239)),
  inference(duplicate_literal_removal,[],[f36275])).
fof(f36275,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,X3) = s(bool,f(s(bool,X2))) | s(bool,'T_0') = s(bool,X3)) ) | ($spl8 | $spl239)),
  inference(superposition,[],[f35307,f1319])).
fof(f35307,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,f(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl8 | $spl239)),
  inference(superposition,[],[f35096,f539])).
fof(f35096,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'F_0'))) | ($spl8 | $spl239)),
  inference(unit_resulting_resolution,[],[f1229,f34145,f32497])).
fof(f51502,plain,(
  ( ! [X350,X346,X349,X351,X347,X348] : (s('type.pair.prod'(bool,X348),'const.pair.,_2'(s(bool,'T_0'),s(X348,X349))) != s('type.pair.prod'(bool,X348),'const.pair.,_2'(s(bool,f(s(bool,X347))),s(X348,X350))) | s(bool,X346) = s(bool,'const.bool.BOUNDED_1'(s(bool,X351))) | s(bool,'T_0') = s(bool,X347) | s(bool,'T_0') = s(bool,X346)) ) | ($spl8 | $spl239)),
  inference(superposition,[],[f2572,f36567])).
fof(f51498,plain,(
  ( ! [X325,X327,X323,X324,X326] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X325))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,f(s(bool,X324))),s('type.list.list'(bool),X326))) | s(bool,X323) = s(bool,'const.bool.BOUNDED_1'(s(bool,X327))) | s(bool,'T_0') = s(bool,X324) | s(bool,'T_0') = s(bool,X323)) ) | ($spl8 | $spl239)),
  inference(superposition,[],[f2533,f36567])).
fof(f46189,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl8)),
  inference(subsumption_resolution,[],[f46188,f531])).
fof(f46188,plain,(
  ~p(s(bool,'T_0')) | ($spl2 | $spl4 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f46187,f1111])).
fof(f46187,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)))) | ($spl2 | $spl4 | $spl8)),
  inference(subsumption_resolution,[],[f46186,f531])).
fof(f46186,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)))) | ($spl2 | $spl4 | $spl8)),
  inference(forward_demodulation,[],[f46121,f31400])).
fof(f46121,plain,(
  ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)))) | ($spl2 | $spl4)),
  inference(trivial_inequality_removal,[],[f46030])).
fof(f46030,plain,(
  s('type.list.list'('type.conSem.v'),sK54) != s('type.list.list'('type.conSem.v'),sK54) | ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)))) | ($spl2 | $spl4)),
  inference(superposition,[],[f1041,f1043])).
fof(f45719,plain,(
  $false | ($spl0 | $spl227)),
  inference(subsumption_resolution,[],[f45718,f531])).
fof(f45718,plain,(
  ~p(s(bool,'T_0')) | ($spl0 | $spl227)),
  inference(backward_demodulation,[],[f45547,f34012])).
fof(f45547,plain,(
  s(bool,'T_0') = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK206('const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53)),sK54,sK51)))) | $spl0),
  inference(backward_demodulation,[],[f45154,f44312])).
fof(f44312,plain,(
  s(bool,'T_0') = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK204('const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53)),sK54,sK51)),s('type.list.list'('type.conSem.v'),sK206('const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53)),sK54,sK51)))) | $spl0),
  inference(unit_resulting_resolution,[],[f531,f20517,f612])).
fof(f20517,plain,(
  p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK204('const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53)),sK54,sK51)),s('type.list.list'('type.conSem.v'),sK206('const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53)),sK54,sK51))))) | $spl0),
  inference(unit_resulting_resolution,[],[f605,f20046,f775])).
fof(f20046,plain,(
  sP23(sK51,sK54,'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))) | $spl0),
  inference(unit_resulting_resolution,[],[f1039,f779])).
fof(f45154,plain,(
  s('type.list.list'('type.modSem.v'),sK53) = s('type.list.list'('type.modSem.v'),sK204('const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53)),sK54,sK51)) | $spl0),
  inference(unit_resulting_resolution,[],[f20511,f607])).
fof(f20511,plain,(
  s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK203('const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53)),sK54,sK51)),s('type.list.list'('type.modSem.v'),sK204('const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53)),sK54,sK51)))) | $spl0),
  inference(unit_resulting_resolution,[],[f605,f20046,f769])).
fof(f36228,plain,(
  ( ! [X4,X2,X3] : (s(fun(bool,bool),X2) = s(fun(bool,bool),X3) | s(bool,'T_0') = s(bool,X4) | s(bool,X4) = s(bool,sK66(X2,X3,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,sK66(X2,X3,bool,bool))))) ) | $spl242),
  inference(cnf_transformation,[],[f36228_D])).
fof(f36228_D,plain,(
  ( ! [X4,X2,X3] : (s(fun(bool,bool),X2) = s(fun(bool,bool),X3) | s(bool,'T_0') = s(bool,X4) | s(bool,X4) = s(bool,sK66(X2,X3,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,sK66(X2,X3,bool,bool))))) ) <=> ~$spl242),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl242])])).
fof(f36221,plain,(
  ( ! [X12,X13,X11] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X11) = s(fun(bool,bool),X12) | s(bool,'T_0') = s(bool,g(s(bool,sK66(X11,X12,bool,bool)))) | s(bool,X13) = s(bool,sK66(X11,X12,bool,bool)) | s(bool,'T_0') = s(bool,X13)) )),
  inference(superposition,[],[f2877,f1319])).
fof(f36218,plain,(
  ( ! [X4,X2,X3] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X2) = s(fun(bool,bool),X3) | s(bool,'T_0') = s(bool,g(s(bool,sK66(X2,X3,bool,bool)))) | s(bool,X4) = s(bool,sK66(X2,X3,bool,bool)) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f2877,f1319])).
fof(f34143,plain,(
  ( ! [X4] : (s(bool,X4) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X4)) ) | $spl236),
  inference(cnf_transformation,[],[f34143_D])).
fof(f34143_D,plain,(
  ( ! [X4] : (s(bool,X4) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X4)) ) <=> ~$spl236),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl236])])).
fof(f34137,plain,(
  ( ! [X12,X13,X11] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X11) = s(fun(bool,bool),X12) | s(bool,'T_0') = s(bool,sK66(X11,X12,bool,bool)) | s(bool,X13) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X13)) )),
  inference(superposition,[],[f2876,f1319])).
fof(f34139,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'F_0'))) | $spl230),
  inference(cnf_transformation,[],[f34139_D])).
fof(f34139_D,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'F_0'))) <=> ~$spl230),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl230])])).
fof(f34146,plain,(
  ( ! [X5] : (s(bool,X5) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X5)) ) | $spl240),
  inference(cnf_transformation,[],[f34146_D])).
fof(f34146_D,plain,(
  ( ! [X5] : (s(bool,X5) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X5)) ) <=> ~$spl240),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl240])])).
fof(f34136,plain,(
  ( ! [X10,X8,X9] : (s(bool,X8) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X9) = s(fun(bool,bool),X10) | s(bool,'T_0') = s(bool,sK66(X9,X10,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f2876,f1319])).
fof(f34135,plain,(
  ( ! [X6,X7,X5] : (s(bool,X5) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X6) = s(fun(bool,bool),X7) | s(bool,'T_0') = s(bool,sK66(X6,X7,bool,bool)) | s(bool,'T_0') = s(bool,X5) | s(bool,'T_0') = s(bool,g(s(bool,'F_0')))) )),
  inference(superposition,[],[f2876,f1319])).
fof(f34134,plain,(
  ( ! [X4,X2,X3] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X2) = s(fun(bool,bool),X3) | s(bool,'T_0') = s(bool,sK66(X2,X3,bool,bool)) | s(bool,X4) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f2876,f1319])).
fof(f34142,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | $spl235),
  inference(cnf_transformation,[],[f34142_D])).
fof(f34142_D,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) <=> ~$spl235),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl235])])).
fof(f34133,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'T_0') = s(bool,sK66(X0,X1,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,'F_0')))) )),
  inference(superposition,[],[f2876,f539])).
fof(f34012,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK206('const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53)),sK54,sK51))))) | $spl227),
  inference(cnf_transformation,[],[f34012_D])).
fof(f34012_D,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK206('const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53)),sK54,sK51))))) <=> ~$spl227),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl227])])).
fof(f34014,plain,(
  ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK205('const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53)),sK54,sK51))))) | $spl229),
  inference(cnf_transformation,[],[f34014_D])).
fof(f34014_D,plain,(
  ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK205('const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53)),sK54,sK51))))) <=> ~$spl229),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl229])])).
fof(f33978,plain,(
  ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK205('const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53)),sK54,sK51))))) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK206('const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53)),sK54,sK51))))) | ($spl0 | $spl2)),
  inference(trivial_inequality_removal,[],[f33911])).
fof(f33911,plain,(
  s('type.list.list'('type.conSem.v'),sK54) != s('type.list.list'('type.conSem.v'),sK54) | ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK205('const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53)),sK54,sK51))))) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK206('const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53)),sK54,sK51))))) | ($spl0 | $spl2)),
  inference(superposition,[],[f1041,f20513])).
fof(f20513,plain,(
  s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',sK205('const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53)),sK54,sK51)),s('type.list.list'('type.conSem.v'),sK206('const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53)),sK54,sK51)))) | $spl0),
  inference(unit_resulting_resolution,[],[f605,f20046,f771])).
fof(f33560,plain,(
  $false | $spl202),
  inference(trivial_inequality_removal,[],[f33545])).
fof(f33545,plain,(
  s(bool,'T_0') != s(bool,'T_0') | $spl202),
  inference(unit_resulting_resolution,[],[f19466,f3622])).
fof(f33559,plain,(
  $false | $spl202),
  inference(trivial_inequality_removal,[],[f33540])).
fof(f33540,plain,(
  s(bool,'T_0') != s(bool,'T_0') | $spl202),
  inference(unit_resulting_resolution,[],[f19466,f3622])).
fof(f33556,plain,(
  $false | $spl202),
  inference(equality_resolution,[],[f19466])).
fof(f33535,plain,(
  ( ! [X4,X8,X7] : (s(bool,X4) = s(bool,'const.bool.BOUNDED_1'(s(bool,X7))) | s(bool,'T_0') = s(bool,X8) | s(bool,X4) = s(bool,X8)) ) | $spl224),
  inference(cnf_transformation,[],[f33535_D])).
fof(f33535_D,plain,(
  ( ! [X4,X8,X7] : (s(bool,X4) = s(bool,'const.bool.BOUNDED_1'(s(bool,X7))) | s(bool,'T_0') = s(bool,X8) | s(bool,X4) = s(bool,X8)) ) <=> ~$spl224),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl224])])).
fof(f33524,plain,(
  ( ! [X23,X21,X19,X22,X20] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X20))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X21))) | s(bool,X19) = s(bool,'const.bool.BOUNDED_1'(s(bool,X22))) | s(bool,X19) = s(bool,X23) | s(bool,'T_0') = s(bool,X23)) )),
  inference(superposition,[],[f2533,f1319])).
fof(f33521,plain,(
  ( ! [X6,X4,X8,X7,X5] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X5))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X6))) | s(bool,X4) = s(bool,'const.bool.BOUNDED_1'(s(bool,X7))) | s(bool,X4) = s(bool,X8) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f2533,f1319])).
fof(f31385,plain,(
  ( ! [X19,X22] : (s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X19,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X22) | s(bool,X22) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X19),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl218),
  inference(cnf_transformation,[],[f31385_D])).
fof(f31385_D,plain,(
  ( ! [X19,X22] : (s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X19,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X22) | s(bool,X22) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X19),s('type.list.list'('type.conSem.v'),sK54)))) ) <=> ~$spl218),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl218])])).
fof(f31387,plain,(
  ( ! [X21,X20] : (~sP49('const.bool.BOUNDED_1'(s(bool,'T_0')),X20,X21) | sP50('const.bool.BOUNDED_1'(s(bool,'F_0')),X20,X21)) ) | $spl222),
  inference(cnf_transformation,[],[f31387_D])).
fof(f31387_D,plain,(
  ( ! [X21,X20] : (~sP49('const.bool.BOUNDED_1'(s(bool,'T_0')),X20,X21) | sP50('const.bool.BOUNDED_1'(s(bool,'F_0')),X20,X21)) ) <=> ~$spl222),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl222])])).
fof(f19336,plain,(
  ( ! [X10,X8,X7,X9] : (~sP49('const.bool.BOUNDED_1'(s(bool,'T_0')),X8,X9) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X7,'type.list.list'('type.conSem.v'))) | sP50('const.bool.BOUNDED_1'(s(bool,'F_0')),X8,X9) | s(bool,X10) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X7),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X10)) ) | $spl76),
  inference(superposition,[],[f17418,f1319])).
fof(f19339,plain,(
  ( ! [X21,X19,X22,X20] : (~sP49('const.bool.BOUNDED_1'(s(bool,'T_0')),X20,X21) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X19,'type.list.list'('type.conSem.v'))) | sP50('const.bool.BOUNDED_1'(s(bool,'F_0')),X20,X21) | s(bool,X22) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X19),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X22)) ) | $spl76),
  inference(superposition,[],[f17418,f1319])).
fof(f31386,plain,(
  ( ! [X21,X20] : (~sP47('const.bool.BOUNDED_1'(s(bool,'T_0')),X20,X21) | sP48('const.bool.BOUNDED_1'(s(bool,'F_0')),X20,X21)) ) | $spl220),
  inference(cnf_transformation,[],[f31386_D])).
fof(f31386_D,plain,(
  ( ! [X21,X20] : (~sP47('const.bool.BOUNDED_1'(s(bool,'T_0')),X20,X21) | sP48('const.bool.BOUNDED_1'(s(bool,'F_0')),X20,X21)) ) <=> ~$spl220),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl220])])).
fof(f19353,plain,(
  ( ! [X10,X8,X7,X9] : (~sP47('const.bool.BOUNDED_1'(s(bool,'T_0')),X8,X9) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X7,'type.list.list'('type.conSem.v'))) | sP48('const.bool.BOUNDED_1'(s(bool,'F_0')),X8,X9) | s(bool,X10) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X7),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X10)) ) | $spl78),
  inference(superposition,[],[f17419,f1319])).
fof(f19356,plain,(
  ( ! [X21,X19,X22,X20] : (~sP47('const.bool.BOUNDED_1'(s(bool,'T_0')),X20,X21) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X19,'type.list.list'('type.conSem.v'))) | sP48('const.bool.BOUNDED_1'(s(bool,'F_0')),X20,X21) | s(bool,X22) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X19),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X22)) ) | $spl78),
  inference(superposition,[],[f17419,f1319])).
fof(f31148,plain,(
  sP1('T_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | $spl216),
  inference(cnf_transformation,[],[f31148_D])).
fof(f31148_D,plain,(
  sP1('T_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) <=> ~$spl216),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl216])])).
fof(f31146,plain,(
  ( ! [X336] : (p(s(bool,X336)) | sP1('T_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | ($spl9 | $spl10)),
  inference(subsumption_resolution,[],[f23908,f547])).
fof(f23908,plain,(
  ( ! [X336] : (p(s(bool,X336)) | sP1('T_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | s(bool,'T_0') = s(bool,X336)) ) | ($spl9 | $spl10)),
  inference(superposition,[],[f9496,f20010])).
fof(f31145,plain,(
  sP1('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'T_0') | $spl214),
  inference(cnf_transformation,[],[f31145_D])).
fof(f31145_D,plain,(
  sP1('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'T_0') <=> ~$spl214),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl214])])).
fof(f31143,plain,(
  ( ! [X337] : (p(s(bool,X337)) | sP1('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'T_0')) ) | ($spl9 | $spl14)),
  inference(subsumption_resolution,[],[f23909,f547])).
fof(f23909,plain,(
  ( ! [X337] : (p(s(bool,X337)) | sP1('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'T_0') | s(bool,'T_0') = s(bool,X337)) ) | ($spl9 | $spl14)),
  inference(superposition,[],[f9500,f20010])).
fof(f31142,plain,(
  ( ! [X354,X353] : (sP1(X353,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | s(bool,'T_0') = s(bool,X354) | s(bool,X353) = s(bool,X354)) ) | $spl212),
  inference(cnf_transformation,[],[f31142_D])).
fof(f31142_D,plain,(
  ( ! [X354,X353] : (sP1(X353,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | s(bool,'T_0') = s(bool,X354) | s(bool,X353) = s(bool,X354)) ) <=> ~$spl212),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl212])])).
fof(f24132,plain,(
  ( ! [X352,X354,X353] : (p(s(bool,X352)) | sP1(X353,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | s(bool,X353) = s(bool,X354) | s(bool,'T_0') = s(bool,X354)) ) | $spl9),
  inference(subsumption_resolution,[],[f23917,f547])).
fof(f23917,plain,(
  ( ! [X352,X354,X353] : (p(s(bool,X352)) | sP1(X353,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | s(bool,X353) = s(bool,X354) | s(bool,'T_0') = s(bool,X354) | s(bool,'T_0') = s(bool,X352)) ) | $spl9),
  inference(superposition,[],[f9571,f20010])).
fof(f31141,plain,(
  ( ! [X356,X357] : (sP1('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X356) | s(bool,'T_0') = s(bool,X357) | s(bool,X356) = s(bool,X357)) ) | $spl210),
  inference(cnf_transformation,[],[f31141_D])).
fof(f31141_D,plain,(
  ( ! [X356,X357] : (sP1('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X356) | s(bool,'T_0') = s(bool,X357) | s(bool,X356) = s(bool,X357)) ) <=> ~$spl210),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl210])])).
fof(f24133,plain,(
  ( ! [X356,X357,X355] : (p(s(bool,X355)) | sP1('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X356) | s(bool,X356) = s(bool,X357) | s(bool,'T_0') = s(bool,X357)) ) | $spl9),
  inference(subsumption_resolution,[],[f23918,f547])).
fof(f23918,plain,(
  ( ! [X356,X357,X355] : (p(s(bool,X355)) | sP1('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X356) | s(bool,X356) = s(bool,X357) | s(bool,'T_0') = s(bool,X357) | s(bool,'T_0') = s(bool,X355)) ) | $spl9),
  inference(superposition,[],[f9572,f20010])).
fof(f31110,plain,(
  ( ! [X21] : (~p(s(bool,happ(s(fun(bool,bool),X21),s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))))) | s(bool,'F_0') = s(bool,sK65('F_0',X21,bool))) ) | $spl208),
  inference(cnf_transformation,[],[f31110_D])).
fof(f31110_D,plain,(
  ( ! [X21] : (~p(s(bool,happ(s(fun(bool,bool),X21),s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))))) | s(bool,'F_0') = s(bool,sK65('F_0',X21,bool))) ) <=> ~$spl208),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl208])])).
fof(f31095,plain,(
  ( ! [X21,X20] : (~p(s(bool,happ(s(fun(bool,bool),X21),s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))))) | s(bool,'F_0') = s(bool,sK65('F_0',X21,bool)) | s(bool,'T_0') = s(bool,X20)) ) | $spl9),
  inference(duplicate_literal_removal,[],[f31073])).
fof(f31073,plain,(
  ( ! [X21,X20] : (~p(s(bool,happ(s(fun(bool,bool),X21),s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))))) | s(bool,'F_0') = s(bool,sK65('F_0',X21,bool)) | s(bool,'T_0') = s(bool,X20) | s(bool,'T_0') = s(bool,X20)) ) | $spl9),
  inference(superposition,[],[f2331,f20010])).
fof(f31104,plain,(
  ( ! [X19,X18] : (~p(s(bool,happ(s(fun(bool,bool),X19),s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X18),s('type.list.list'('type.conSem.v'),sK54)))))) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X18,'type.list.list'('type.conSem.v'))) | s(bool,'F_0') = s(bool,sK65('F_0',X19,bool))) ) | $spl206),
  inference(cnf_transformation,[],[f31104_D])).
fof(f31104_D,plain,(
  ( ! [X19,X18] : (~p(s(bool,happ(s(fun(bool,bool),X19),s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X18),s('type.list.list'('type.conSem.v'),sK54)))))) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X18,'type.list.list'('type.conSem.v'))) | s(bool,'F_0') = s(bool,sK65('F_0',X19,bool))) ) <=> ~$spl206),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl206])])).
fof(f31096,plain,(
  ( ! [X19,X17,X18] : (~p(s(bool,happ(s(fun(bool,bool),X19),s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X18),s('type.list.list'('type.conSem.v'),sK54)))))) | s(bool,'F_0') = s(bool,sK65('F_0',X19,bool)) | s(bool,'T_0') = s(bool,X17) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X18,'type.list.list'('type.conSem.v')))) ) | $spl4),
  inference(duplicate_literal_removal,[],[f31072])).
fof(f31072,plain,(
  ( ! [X19,X17,X18] : (~p(s(bool,happ(s(fun(bool,bool),X19),s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X18),s('type.list.list'('type.conSem.v'),sK54)))))) | s(bool,'F_0') = s(bool,sK65('F_0',X19,bool)) | s(bool,'T_0') = s(bool,X17) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X18,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X17)) ) | $spl4),
  inference(superposition,[],[f2331,f9620])).
fof(f17405,plain,(
  ( ! [X1] : (s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X1),s('type.list.list'('type.conSem.v'),sK54))) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X1,'type.list.list'('type.conSem.v')))) ) | $spl66),
  inference(cnf_transformation,[],[f17405_D])).
fof(f17405_D,plain,(
  ( ! [X1] : (s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X1),s('type.list.list'('type.conSem.v'),sK54))) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X1,'type.list.list'('type.conSem.v')))) ) <=> ~$spl66),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl66])])).
fof(f17712,plain,(
  ( ! [X37,X38] : (s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X38),s('type.list.list'('type.conSem.v'),sK54))) | p(s(bool,X37)) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X38,'type.list.list'('type.conSem.v')))) ) | $spl4),
  inference(forward_demodulation,[],[f17711,f2947])).
fof(f17711,plain,(
  ( ! [X37,X38,X36] : (p(s(bool,X37)) | s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X38),s('type.list.list'('type.conSem.v'),sK54))) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X36),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X38,'type.list.list'('type.conSem.v')))) ) | $spl4),
  inference(subsumption_resolution,[],[f17698,f547])).
fof(f17698,plain,(
  ( ! [X37,X38,X36] : (p(s(bool,X37)) | s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X38),s('type.list.list'('type.conSem.v'),sK54))) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X36),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X38,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X37)) ) | $spl4),
  inference(superposition,[],[f17429,f5688])).
fof(f19471,plain,(
  ( ! [X28,X29,X27] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X28))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X27),s('type.list.list'('type.conSem.v'),sK54))),s('type.list.list'(bool),X29))) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X27,'type.list.list'('type.conSem.v')))) ) | $spl204),
  inference(cnf_transformation,[],[f19471_D])).
fof(f19471_D,plain,(
  ( ! [X28,X29,X27] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X28))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X27),s('type.list.list'('type.conSem.v'),sK54))),s('type.list.list'(bool),X29))) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X27,'type.list.list'('type.conSem.v')))) ) <=> ~$spl204),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl204])])).
fof(f19470,plain,(
  ( ! [X28,X26,X29,X27] : (s(bool,'T_0') = s(bool,X26) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X28))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X27),s('type.list.list'('type.conSem.v'),sK54))),s('type.list.list'(bool),X29))) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X27,'type.list.list'('type.conSem.v')))) ) | ($spl4 | $spl8)),
  inference(duplicate_literal_removal,[],[f19469])).
fof(f19469,plain,(
  ( ! [X28,X26,X29,X27] : (s(bool,'T_0') = s(bool,X26) | s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X28))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X27),s('type.list.list'('type.conSem.v'),sK54))),s('type.list.list'(bool),X29))) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X27,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X26)) ) | ($spl4 | $spl8)),
  inference(forward_demodulation,[],[f19450,f1110])).
fof(f19450,plain,(
  ( ! [X28,X26,X29,X27] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X28))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X27),s('type.list.list'('type.conSem.v'),sK54))),s('type.list.list'(bool),X29))) | s(bool,X26) = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X27,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X26)) ) | ($spl4 | $spl8)),
  inference(superposition,[],[f2532,f9620])).
fof(f19465,plain,(
  ( ! [X6,X3] : (s(bool,X3) = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | s(bool,'T_0') = s(bool,X6) | s(bool,X3) = s(bool,X6)) ) | $spl200),
  inference(cnf_transformation,[],[f19465_D])).
fof(f19465_D,plain,(
  ( ! [X6,X3] : (s(bool,X3) = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | s(bool,'T_0') = s(bool,X6) | s(bool,X3) = s(bool,X6)) ) <=> ~$spl200),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl200])])).
fof(f19447,plain,(
  ( ! [X17,X15,X18,X16] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X16))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X17))) | s(bool,X15) = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | s(bool,X15) = s(bool,X18) | s(bool,'T_0') = s(bool,X18)) ) | $spl8),
  inference(superposition,[],[f2532,f1319])).
fof(f19444,plain,(
  ( ! [X6,X4,X5,X3] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X4))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X5))) | s(bool,X3) = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | s(bool,X3) = s(bool,X6) | s(bool,'T_0') = s(bool,X6)) ) | $spl8),
  inference(superposition,[],[f2532,f1319])).
fof(f19246,plain,(
  ( ! [X21,X20] : (s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X20),s('type.list.list'('type.conSem.v'),sK54))) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X21),s('type.list.list'('type.conSem.v'),sK54))) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X20,'type.list.list'('type.conSem.v'))) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X21,'type.list.list'('type.conSem.v')))) ) | $spl94),
  inference(cnf_transformation,[],[f19246_D])).
fof(f19246_D,plain,(
  ( ! [X21,X20] : (s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X20),s('type.list.list'('type.conSem.v'),sK54))) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X21),s('type.list.list'('type.conSem.v'),sK54))) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X20,'type.list.list'('type.conSem.v'))) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X21,'type.list.list'('type.conSem.v')))) ) <=> ~$spl94),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl94])])).
fof(f19333,plain,(
  ( ! [X629,X627,X628] : (p(s(bool,X628)) | s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X627),s('type.list.list'('type.conSem.v'),sK54))) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X629),s('type.list.list'('type.conSem.v'),sK54))) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X629,'type.list.list'('type.conSem.v'))) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X627,'type.list.list'('type.conSem.v')))) ) | ($spl4 | $spl70)),
  inference(subsumption_resolution,[],[f19164,f547])).
fof(f19164,plain,(
  ( ! [X629,X627,X628] : (p(s(bool,X628)) | s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X627),s('type.list.list'('type.conSem.v'),sK54))) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X629),s('type.list.list'('type.conSem.v'),sK54))) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X629,'type.list.list'('type.conSem.v'))) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X627,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X628)) ) | ($spl4 | $spl70)),
  inference(superposition,[],[f17429,f17411])).
fof(f19332,plain,(
  ( ! [X598,X597,X595] : (sP1(happ(s(fun('type.list.list'('type.conSem.v'),bool),X595),s('type.list.list'('type.conSem.v'),sK54)),X597) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X595,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X598) | s(bool,X597) = s(bool,X598)) ) | $spl198),
  inference(cnf_transformation,[],[f19332_D])).
fof(f19332_D,plain,(
  ( ! [X598,X597,X595] : (sP1(happ(s(fun('type.list.list'('type.conSem.v'),bool),X595),s('type.list.list'('type.conSem.v'),sK54)),X597) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X595,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X598) | s(bool,X597) = s(bool,X598)) ) <=> ~$spl198),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl198])])).
fof(f19331,plain,(
  ( ! [X596,X598,X597,X595] : (p(s(bool,X596)) | sP1(happ(s(fun('type.list.list'('type.conSem.v'),bool),X595),s('type.list.list'('type.conSem.v'),sK54)),X597) | s(bool,X597) = s(bool,X598) | s(bool,'T_0') = s(bool,X598) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X595,'type.list.list'('type.conSem.v')))) ) | $spl70),
  inference(subsumption_resolution,[],[f19157,f547])).
fof(f19157,plain,(
  ( ! [X596,X598,X597,X595] : (p(s(bool,X596)) | sP1(happ(s(fun('type.list.list'('type.conSem.v'),bool),X595),s('type.list.list'('type.conSem.v'),sK54)),X597) | s(bool,X597) = s(bool,X598) | s(bool,'T_0') = s(bool,X598) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X595,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X596)) ) | $spl70),
  inference(superposition,[],[f9572,f17411])).
fof(f19330,plain,(
  ( ! [X594,X593,X591] : (sP1(X593,happ(s(fun('type.list.list'('type.conSem.v'),bool),X591),s('type.list.list'('type.conSem.v'),sK54))) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X591,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X594) | s(bool,X593) = s(bool,X594)) ) | $spl196),
  inference(cnf_transformation,[],[f19330_D])).
fof(f19330_D,plain,(
  ( ! [X594,X593,X591] : (sP1(X593,happ(s(fun('type.list.list'('type.conSem.v'),bool),X591),s('type.list.list'('type.conSem.v'),sK54))) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X591,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X594) | s(bool,X593) = s(bool,X594)) ) <=> ~$spl196),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl196])])).
fof(f19329,plain,(
  ( ! [X592,X594,X593,X591] : (p(s(bool,X592)) | sP1(X593,happ(s(fun('type.list.list'('type.conSem.v'),bool),X591),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,X593) = s(bool,X594) | s(bool,'T_0') = s(bool,X594) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X591,'type.list.list'('type.conSem.v')))) ) | $spl70),
  inference(subsumption_resolution,[],[f19156,f547])).
fof(f19156,plain,(
  ( ! [X592,X594,X593,X591] : (p(s(bool,X592)) | sP1(X593,happ(s(fun('type.list.list'('type.conSem.v'),bool),X591),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,X593) = s(bool,X594) | s(bool,'T_0') = s(bool,X594) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X591,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X592)) ) | $spl70),
  inference(superposition,[],[f9571,f17411])).
fof(f19328,plain,(
  ( ! [X568] : (sP1(happ(s(fun('type.list.list'('type.conSem.v'),bool),X568),s('type.list.list'('type.conSem.v'),sK54)),'T_0') | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X568,'type.list.list'('type.conSem.v')))) ) | $spl194),
  inference(cnf_transformation,[],[f19328_D])).
fof(f19328_D,plain,(
  ( ! [X568] : (sP1(happ(s(fun('type.list.list'('type.conSem.v'),bool),X568),s('type.list.list'('type.conSem.v'),sK54)),'T_0') | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X568,'type.list.list'('type.conSem.v')))) ) <=> ~$spl194),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl194])])).
fof(f19327,plain,(
  ( ! [X569,X568] : (p(s(bool,X569)) | sP1(happ(s(fun('type.list.list'('type.conSem.v'),bool),X568),s('type.list.list'('type.conSem.v'),sK54)),'T_0') | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X568,'type.list.list'('type.conSem.v')))) ) | ($spl14 | $spl70)),
  inference(subsumption_resolution,[],[f19148,f547])).
fof(f19148,plain,(
  ( ! [X569,X568] : (p(s(bool,X569)) | sP1(happ(s(fun('type.list.list'('type.conSem.v'),bool),X568),s('type.list.list'('type.conSem.v'),sK54)),'T_0') | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X568,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X569)) ) | ($spl14 | $spl70)),
  inference(superposition,[],[f9500,f17411])).
fof(f19326,plain,(
  ( ! [X566] : (sP1('T_0',happ(s(fun('type.list.list'('type.conSem.v'),bool),X566),s('type.list.list'('type.conSem.v'),sK54))) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X566,'type.list.list'('type.conSem.v')))) ) | $spl192),
  inference(cnf_transformation,[],[f19326_D])).
fof(f19326_D,plain,(
  ( ! [X566] : (sP1('T_0',happ(s(fun('type.list.list'('type.conSem.v'),bool),X566),s('type.list.list'('type.conSem.v'),sK54))) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X566,'type.list.list'('type.conSem.v')))) ) <=> ~$spl192),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl192])])).
fof(f19325,plain,(
  ( ! [X567,X566] : (p(s(bool,X567)) | sP1('T_0',happ(s(fun('type.list.list'('type.conSem.v'),bool),X566),s('type.list.list'('type.conSem.v'),sK54))) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X566,'type.list.list'('type.conSem.v')))) ) | ($spl10 | $spl70)),
  inference(subsumption_resolution,[],[f19147,f547])).
fof(f19147,plain,(
  ( ! [X567,X566] : (p(s(bool,X567)) | sP1('T_0',happ(s(fun('type.list.list'('type.conSem.v'),bool),X566),s('type.list.list'('type.conSem.v'),sK54))) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X566,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X567)) ) | ($spl10 | $spl70)),
  inference(superposition,[],[f9496,f17411])).
fof(f19320,plain,(
  ( ! [X736,X738] : (s(bool,'F_0') = s(bool,sK65('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X738),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X736,bool)) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X736),s(bool,'F_0')))) ) | $spl190),
  inference(cnf_transformation,[],[f19320_D])).
fof(f19320_D,plain,(
  ( ! [X736,X738] : (s(bool,'F_0') = s(bool,sK65('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X738),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X736,bool)) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X736),s(bool,'F_0')))) ) <=> ~$spl190),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl190])])).
fof(f19253,plain,(
  ( ! [X7] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X7),s('type.list.list'('type.conSem.v'),sK54)))) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X7,'type.list.list'('type.conSem.v')))) ) | $spl100),
  inference(cnf_transformation,[],[f19253_D])).
fof(f19253_D,plain,(
  ( ! [X7] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X7),s('type.list.list'('type.conSem.v'),sK54)))) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X7,'type.list.list'('type.conSem.v')))) ) <=> ~$spl100),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl100])])).
fof(f18918,plain,(
  ( ! [X736,X738,X737] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X737),s('type.list.list'('type.conSem.v'),sK54)))) | s(bool,'F_0') = s(bool,sK65('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X738),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X736,bool)) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X737,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X736),s(bool,'F_0')))) ) | ($spl4 | $spl70)),
  inference(superposition,[],[f4157,f17411])).
fof(f19319,plain,(
  ( ! [X734] : (s(bool,'T_0') = s(bool,sK65('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X734,bool)) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X734),s(bool,'T_0')))) ) | $spl188),
  inference(cnf_transformation,[],[f19319_D])).
fof(f19319_D,plain,(
  ( ! [X734] : (s(bool,'T_0') = s(bool,sK65('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X734,bool)) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X734),s(bool,'T_0')))) ) <=> ~$spl188),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl188])])).
fof(f18917,plain,(
  ( ! [X734,X735] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X735),s('type.list.list'('type.conSem.v'),sK54)))) | s(bool,'T_0') = s(bool,sK65('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X734,bool)) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X735,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X734),s(bool,'T_0')))) ) | ($spl8 | $spl70)),
  inference(superposition,[],[f2338,f17411])).
fof(f19318,plain,(
  ( ! [X732] : (s(bool,'T_0') = s(bool,sK65('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)),X732,bool)) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X732),s(bool,'T_0')))) ) | $spl186),
  inference(cnf_transformation,[],[f19318_D])).
fof(f19318_D,plain,(
  ( ! [X732] : (s(bool,'T_0') = s(bool,sK65('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)),X732,bool)) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X732),s(bool,'T_0')))) ) <=> ~$spl186),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl186])])).
fof(f18916,plain,(
  ( ! [X732,X733] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X733),s('type.list.list'('type.conSem.v'),sK54)))) | s(bool,'T_0') = s(bool,sK65('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)),X732,bool)) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X733,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X732),s(bool,'T_0')))) ) | ($spl6 | $spl70)),
  inference(superposition,[],[f2337,f17411])).
fof(f2337,plain,(
  ( ! [X5] : (~p(s(bool,happ(s(fun(bool,bool),X5),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,sK65('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)),X5,bool))) ) | $spl6),
  inference(forward_demodulation,[],[f2332,f1111])).
fof(f2332,plain,(
  ( ! [X5] : (~p(s(bool,happ(s(fun(bool,bool),X5),s(bool,'T_0')))) | s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56))) = s(bool,sK65('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)),X5,bool))) ) | $spl6),
  inference(superposition,[],[f603,f1111])).
fof(f19317,plain,(
  ( ! [X730] : (p(s(bool,happ(s(fun(bool,bool),X730),s(bool,sK65('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X730,bool))))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X730),s(bool,'T_0')))) ) | $spl184),
  inference(cnf_transformation,[],[f19317_D])).
fof(f19317_D,plain,(
  ( ! [X730] : (p(s(bool,happ(s(fun(bool,bool),X730),s(bool,sK65('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X730,bool))))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X730),s(bool,'T_0')))) ) <=> ~$spl184),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl184])])).
fof(f18915,plain,(
  ( ! [X730,X731] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X731),s('type.list.list'('type.conSem.v'),sK54)))) | p(s(bool,happ(s(fun(bool,bool),X730),s(bool,sK65('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X730,bool))))) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X731,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X730),s(bool,'T_0')))) ) | ($spl8 | $spl70)),
  inference(superposition,[],[f2435,f17411])).
fof(f19316,plain,(
  ( ! [X728] : (s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X728,'type.list.list'('type.conSem.v')))) ) | $spl182),
  inference(cnf_transformation,[],[f19316_D])).
fof(f19316_D,plain,(
  ( ! [X728] : (s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X728,'type.list.list'('type.conSem.v')))) ) <=> ~$spl182),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl182])])).
fof(f19315,plain,(
  ( ! [X728,X729] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X729),s('type.list.list'('type.conSem.v'),sK54)))) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X728,'type.list.list'('type.conSem.v'))) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X729,'type.list.list'('type.conSem.v')))) ) | ($spl1 | $spl4 | $spl70)),
  inference(subsumption_resolution,[],[f18914,f17424])).
fof(f17424,plain,(
  ( ! [X621] : (s(bool,'T_0') != s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X621),s('type.list.list'('type.conSem.v'),sK54))) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X621,'type.list.list'('type.conSem.v')))) ) | ($spl1 | $spl4)),
  inference(subsumption_resolution,[],[f17080,f1415])).
fof(f1415,plain,(
  s(bool,'T_0') != s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54))) | $spl1),
  inference(unit_resulting_resolution,[],[f1040,f547])).
fof(f17080,plain,(
  ( ! [X621] : (s(bool,'T_0') != s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X621),s('type.list.list'('type.conSem.v'),sK54))) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X621,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) ) | ($spl1 | $spl4)),
  inference(superposition,[],[f1415,f9620])).
fof(f18914,plain,(
  ( ! [X728,X729] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X729),s('type.list.list'('type.conSem.v'),sK54)))) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X728,'type.list.list'('type.conSem.v'))) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X729,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X728),s('type.list.list'('type.conSem.v'),sK54)))) ) | ($spl4 | $spl70)),
  inference(superposition,[],[f2336,f17411])).
fof(f19314,plain,(
  ( ! [X726] : (p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X726),s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X726,'type.list.list'('type.conSem.v')))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X726),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl180),
  inference(cnf_transformation,[],[f19314_D])).
fof(f19314_D,plain,(
  ( ! [X726] : (p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X726),s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X726,'type.list.list'('type.conSem.v')))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X726),s('type.list.list'('type.conSem.v'),sK54)))) ) <=> ~$spl180),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl180])])).
fof(f18913,plain,(
  ( ! [X726,X727] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X727),s('type.list.list'('type.conSem.v'),sK54)))) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X726),s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X726,'type.list.list'('type.conSem.v')))))) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X727,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X726),s('type.list.list'('type.conSem.v'),sK54)))) ) | ($spl4 | $spl70)),
  inference(superposition,[],[f2431,f17411])).
fof(f19312,plain,(
  ( ! [X718,X719] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X719),s('type.list.list'('type.conSem.v'),sK54)))) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X719,'type.list.list'('type.conSem.v'))) | p(s(bool,X718))) ) | $spl70),
  inference(global_subsumption,[],[f530,f529,f528,f527,f531,f538,f539,f548,f547,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f668,f689,f709,f708,f707,f706,f726,f721,f720,f719,f718,f736,f731,f730,f729,f728,f739,f738,f743,f742,f747,f746,f752,f751,f758,f757,f756,f777,f772,f771,f770,f769,f784,f783,f782,f781,f801,f796,f795,f794,f793,f811,f806,f805,f804,f803,f814,f813,f818,f817,f822,f821,f827,f826,f833,f832,f831,f850,f849,f848,f847,f867,f862,f861,f860,f859,f877,f872,f871,f870,f869,f880,f879,f884,f883,f888,f887,f893,f892,f899,f898,f897,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2359,f2526,f2533,f2565,f2572,f2608,f2621,f2845,f2935,f2940,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f4202,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5689,f7303,f7383,f7384,f7553,f7558,f7561,f7565,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9603,f8248,f8253,f8256,f8260,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f895,f890,f829,f824,f754,f749,f687,f683,f666,f663,f693,f685,f681,f906,f874,f873,f866,f865,f851,f808,f807,f800,f799,f785,f733,f732,f725,f724,f710,f699,f696,f659,f657,f677,f6241,f6256,f6286,f684,f664,f688,f667,f692,f680,f670,f6240,f6247,f6273,f858,f857,f856,f855,f854,f853,f852,f792,f791,f790,f789,f788,f787,f786,f717,f716,f715,f714,f713,f712,f711,f908,f909,f907,f900,f894,f889,f885,f881,f876,f875,f864,f863,f834,f828,f823,f819,f815,f810,f809,f798,f797,f759,f753,f748,f744,f740,f735,f734,f723,f722,f701,f694,f691,f686,f682,f679,f676,f669,f665,f662,f660,f656,f674,f673,f672,f671,f702,f661,f697,f658,f901,f886,f882,f878,f835,f820,f816,f812,f760,f745,f741,f737,f905,f904,f903,f902,f896,f891,f868,f830,f825,f802,f755,f750,f727,f705,f655,f8277,f8276,f8275,f8274,f8273,f8272,f8271,f8244,f8008,f7582,f7581,f7580,f7579,f7578,f7577,f7576,f7549,f9615,f9614,f9613,f9612,f9611,f9610,f9609,f9606,f9605,f602,f601,f599,f596,f594,f593,f591,f587,f586,f698,f695,f845,f774,f773,f9622,f768,f767,f766,f765,f764,f763,f762,f761,f703,f653,f700,f690,f678,f675,f776,f775,f2938,f2941,f844,f9602,f9621,f9604,f9600,f6932,f4519,f1019,f846,f843,f842,f841,f840,f839,f838,f837,f836,f780,f779,f778,f704,f654,f7575,f8270,f3884,f3443,f3442,f2877,f2876,f2754,f2753,f2734,f2718,f2706,f2696,f2684,f2672,f2618,f2617,f2607,f2569,f2568,f2564,f2530,f2529,f2525,f2475,f2474,f2443,f2442,f1048,f552,f551,f12824,f12904,f12907,f12983,f12986,f2436,f2339,f8246,f8245,f7551,f7550,f2432,f2330,f2433,f2331,f8010,f8009,f9608,f9607,f604,f603,f16743,f16742,f16741,f17411,f18050,f18055,f18061,f19237,f19229,f18641,f18642,f18653,f18655,f18658,f18659,f18660,f18662,f18667,f18670,f18674,f19251,f19219,f19254,f19256,f18697,f19257,f18698,f19258,f18699,f18700,f18702,f18703,f18704,f18705,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18713,f18714,f18715,f18716,f19275,f18717,f19276,f18724,f19277,f18725,f19278,f18726,f19279,f18727,f19280,f18736,f18737,f18762,f18763,f18764,f18765,f18772,f18773,f19214,f19213,f18878,f18895,f18898,f18899,f18900,f18901,f18902,f18903,f18904,f18905,f19303,f18906,f19305,f18907,f19307,f18908,f19309,f18909,f19311,f18910])).
fof(f18910,plain,(
  ( ! [X720,X716,X718,X717,X719] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X719),s('type.list.list'('type.conSem.v'),sK54)))) | p(s(bool,X718)) | p(s(bool,happ(s(fun(X716,bool),X717),s(X716,X720)))) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X719,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,happ(s(fun(X716,bool),X717),s(X716,sK64(X717,X718,X716))))) ) | $spl70),
  inference(superposition,[],[f601,f17411])).
fof(f18909,plain,(
  ( ! [X712,X714,X713,X715,X711] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X714),s('type.list.list'('type.conSem.v'),sK54)))) | p(s(bool,X713)) | p(s(bool,happ(s(fun(X711,bool),X712),s(X711,X715)))) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X714,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,happ(s(fun(X711,bool),X712),s(X711,sK63(X712,X713,X711))))) ) | $spl70),
  inference(superposition,[],[f599,f17411])).
fof(f18908,plain,(
  ( ! [X707,X708,X710,X706,X709] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X709),s('type.list.list'('type.conSem.v'),sK54)))) | ~p(s(bool,X708)) | p(s(bool,happ(s(fun(X706,bool),X707),s(X706,X710)))) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X709,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,happ(s(fun(X706,bool),X707),s(X706,sK62(X708,X707,X706))))) ) | $spl70),
  inference(superposition,[],[f596,f17411])).
fof(f18907,plain,(
  ( ! [X705,X704,X702,X701,X703] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X704),s('type.list.list'('type.conSem.v'),sK54)))) | ~p(s(bool,X703)) | p(s(bool,happ(s(fun(X701,bool),X702),s(X701,X705)))) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X704,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,happ(s(fun(X701,bool),X702),s(X701,sK61(X703,X702,X701))))) ) | $spl70),
  inference(superposition,[],[f594,f17411])).
fof(f18906,plain,(
  ( ! [X697,X699,X700,X696,X698] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X699),s('type.list.list'('type.conSem.v'),sK54)))) | p(s(bool,happ(s(fun(X696,bool),X697),s(X696,X700)))) | ~p(s(bool,X698)) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X699,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,happ(s(fun(X696,bool),X697),s(X696,sK60(X697,X698,X696))))) ) | $spl70),
  inference(superposition,[],[f593,f17411])).
fof(f18905,plain,(
  ( ! [X693,X695,X691,X692,X694] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X694),s('type.list.list'('type.conSem.v'),sK54)))) | p(s(bool,happ(s(fun(X691,bool),X692),s(X691,X695)))) | ~p(s(bool,X693)) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X694,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,happ(s(fun(X691,bool),X692),s(X691,sK59(X692,X693,X691))))) ) | $spl70),
  inference(superposition,[],[f591,f17411])).
fof(f18737,plain,(
  ( ! [X167,X169,X170,X168] : (sP48('const.bool.BOUNDED_1'(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X168),s('type.list.list'('type.conSem.v'),sK54)))),X169,X170) | ~sP47('const.bool.BOUNDED_1'(s(bool,X167)),X169,X170) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X168,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X167)) ) | $spl70),
  inference(superposition,[],[f1299,f17411])).
fof(f18736,plain,(
  ( ! [X165,X163,X166,X164] : (sP50('const.bool.BOUNDED_1'(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X164),s('type.list.list'('type.conSem.v'),sK54)))),X165,X166) | ~sP49('const.bool.BOUNDED_1'(s(bool,X163)),X165,X166) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X164,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X163)) ) | $spl70),
  inference(superposition,[],[f1274,f17411])).
fof(f18727,plain,(
  ( ! [X132,X130,X131,X129] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X130),s('type.list.list'('type.conSem.v'),sK54)))) | sP48('const.bool.BOUNDED_1'(s(bool,X131)),X129,X132) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X130,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X129)) ) | $spl70),
  inference(superposition,[],[f1222,f17411])).
fof(f18726,plain,(
  ( ! [X127,X125,X128,X126] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X126),s('type.list.list'('type.conSem.v'),sK54)))) | sP48('const.bool.BOUNDED_1'(s(bool,X127)),X128,X125) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X126,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X125)) ) | $spl70),
  inference(superposition,[],[f1210,f17411])).
fof(f18725,plain,(
  ( ! [X123,X121,X124,X122] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X122),s('type.list.list'('type.conSem.v'),sK54)))) | sP40(X121,X123,'const.bool.BOUNDED_1'(s(bool,X124))) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X122,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X121)) ) | $spl70),
  inference(superposition,[],[f1187,f17411])).
fof(f18724,plain,(
  ( ! [X118,X120,X119,X117] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X118),s('type.list.list'('type.conSem.v'),sK54)))) | sP40(X117,'const.bool.BOUNDED_1'(s(bool,X119)),X120) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X118,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X117)) ) | $spl70),
  inference(superposition,[],[f1182,f17411])).
fof(f18717,plain,(
  ( ! [X99,X97,X100,X98] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X98),s('type.list.list'('type.conSem.v'),sK54)))) | ~sP47(X97,X99,X100) | sP48(X97,X99,X100) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X98,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X97)) ) | $spl70),
  inference(superposition,[],[f1029,f17411])).
fof(f18716,plain,(
  ( ! [X94,X95,X93,X96] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X94),s('type.list.list'('type.conSem.v'),sK54)))) | ~sP49(X93,X95,X96) | sP50(X93,X95,X96) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X94,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X93)) ) | $spl70),
  inference(superposition,[],[f1028,f17411])).
fof(f18698,plain,(
  ( ! [X26,X24,X25] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X25),s('type.list.list'('type.conSem.v'),sK54)))) | sP0(X24,X26) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X25,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X24)) ) | $spl70),
  inference(superposition,[],[f625,f17411])).
fof(f18697,plain,(
  ( ! [X23,X21,X22] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X22),s('type.list.list'('type.conSem.v'),sK54)))) | sP0(X23,X21) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X22,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X21)) ) | $spl70),
  inference(superposition,[],[f624,f17411])).
fof(f18674,plain,(
  ( ! [X167,X165,X169,X166,X164,X168] : (s('type.list.list'('type.conSem.v'),sK56) != s('type.list.list'('type.conSem.v'),X165) | s(X166,X167) != s(X166,X168) | s('type.pair.prod'('type.list.list'('type.conSem.v'),X166),'const.pair.,_2'(s('type.list.list'('type.conSem.v'),X165),s(X166,X167))) = s('type.pair.prod'('type.list.list'('type.conSem.v'),X166),'const.pair.,_2'(s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X164,'type.list.list'('type.conSem.v'))),s(X166,X168))) | s(bool,X169) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X164),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X169)) ) | $spl70),
  inference(superposition,[],[f652,f17411])).
fof(f18670,plain,(
  ( ! [X144,X142,X140,X145,X143,X141] : (s('type.pair.prod'(X141,'type.list.list'('type.conSem.v')),'const.pair.,_2'(s(X141,X144),s('type.list.list'('type.conSem.v'),sK56))) != s('type.pair.prod'(X141,'type.list.list'('type.conSem.v')),'const.pair.,_2'(s(X141,X142),s('type.list.list'('type.conSem.v'),X143))) | s('type.list.list'('type.conSem.v'),X143) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X140,'type.list.list'('type.conSem.v'))) | s(bool,X145) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X140),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X145)) ) | $spl70),
  inference(superposition,[],[f651,f17411])).
fof(f18667,plain,(
  ( ! [X127,X125,X123,X126,X124,X122] : (s('type.pair.prod'('type.list.list'('type.conSem.v'),X123),'const.pair.,_2'(s('type.list.list'('type.conSem.v'),sK56),s(X123,X126))) != s('type.pair.prod'('type.list.list'('type.conSem.v'),X123),'const.pair.,_2'(s('type.list.list'('type.conSem.v'),X124),s(X123,X125))) | s('type.list.list'('type.conSem.v'),X124) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X122,'type.list.list'('type.conSem.v'))) | s(bool,X127) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X122),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X127)) ) | $spl70),
  inference(superposition,[],[f650,f17411])).
fof(f18662,plain,(
  ( ! [X99,X97,X100,X98,X96] : (s('type.list.list'('type.list.list'('type.conSem.v')),'const.list.CONS_2'(s('type.list.list'('type.conSem.v'),sK56),s('type.list.list'('type.list.list'('type.conSem.v')),X97))) != s('type.list.list'('type.list.list'('type.conSem.v')),'const.list.CONS_2'(s('type.list.list'('type.conSem.v'),X98),s('type.list.list'('type.list.list'('type.conSem.v')),X99))) | s('type.list.list'('type.conSem.v'),X98) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X96,'type.list.list'('type.conSem.v'))) | s(bool,X100) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X96),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X100)) ) | $spl70),
  inference(superposition,[],[f606,f17411])).
fof(f18660,plain,(
  ( ! [X92,X90,X91] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X91),s('type.list.list'('type.conSem.v'),sK56)))) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X91),s('type.list.list'('type.conSem.v'),sK65(sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X90,'type.list.list'('type.conSem.v')),X91,'type.list.list'('type.conSem.v')))))) | s(bool,X92) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X90),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X92)) ) | $spl70),
  inference(superposition,[],[f604,f17411])).
fof(f18659,plain,(
  ( ! [X88,X87,X89] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X88),s('type.list.list'('type.conSem.v'),sK56)))) | s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X87,'type.list.list'('type.conSem.v'))) = s('type.list.list'('type.conSem.v'),sK65(sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X87,'type.list.list'('type.conSem.v')),X88,'type.list.list'('type.conSem.v'))) | s(bool,X89) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X87),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X89)) ) | $spl70),
  inference(superposition,[],[f603,f17411])).
fof(f18658,plain,(
  ( ! [X85,X83,X86,X84] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X84),s('type.list.list'('type.conSem.v'),sK56)))) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X84),s('type.list.list'('type.conSem.v'),X85)))) | s('type.list.list'('type.conSem.v'),X85) != s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X83,'type.list.list'('type.conSem.v'))) | s(bool,X86) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X83),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X86)) ) | $spl70),
  inference(superposition,[],[f602,f17411])).
fof(f18655,plain,(
  ( ! [X70,X72,X71,X69,X73] : (s('type.list.list'('type.conSem.v'),sK56) != s('type.list.list'('type.conSem.v'),X70) | s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X72),s('type.list.list'('type.conSem.v'),X70))) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X71),s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X69,'type.list.list'('type.conSem.v'))))) | s('type.conSem.v',X71) != s('type.conSem.v',X72) | s(bool,X73) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X69),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X73)) ) | $spl70),
  inference(superposition,[],[f608,f17411])).
fof(f18653,plain,(
  ( ! [X61,X59,X62,X60,X63] : (s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X60),s('type.list.list'('type.conSem.v'),sK56))) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X61),s('type.list.list'('type.conSem.v'),X62))) | s('type.list.list'('type.conSem.v'),X62) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X59,'type.list.list'('type.conSem.v'))) | s(bool,X63) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X59),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X63)) ) | $spl70),
  inference(superposition,[],[f607,f17411])).
fof(f18642,plain,(
  ( ! [X12,X10,X13,X11,X9] : (s('type.conSem.v',X10) != s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),sK56))) | p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X11),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X12))),s('type.conSem.v',X10)))) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X11),s('type.list.list'('type.modSem.v'),X12),s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X9,'type.list.list'('type.conSem.v')))))) | s(bool,X13) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X9),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X13)) ) | $spl70),
  inference(superposition,[],[f846,f17411])).
fof(f18641,plain,(
  ( ! [X6,X8,X7,X5] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.list.list'('type.modSem.v'),X7),s('type.list.list'('type.conSem.v'),sK56)))) | sP23(X6,sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X5,'type.list.list'('type.conSem.v')),X7) | s(bool,X8) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X5),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X8)) ) | $spl70),
  inference(superposition,[],[f779,f17411])).
fof(f19311,plain,(
  ( ! [X714,X713] : (p(s(bool,X713)) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X714),s('type.list.list'('type.conSem.v'),sK54)))) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X714,'type.list.list'('type.conSem.v')))) ) | $spl70),
  inference(global_subsumption,[],[f530,f529,f528,f527,f531,f538,f539,f548,f547,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f668,f689,f709,f708,f707,f706,f726,f721,f720,f719,f718,f736,f731,f730,f729,f728,f739,f738,f743,f742,f747,f746,f752,f751,f758,f757,f756,f777,f772,f771,f770,f769,f784,f783,f782,f781,f801,f796,f795,f794,f793,f811,f806,f805,f804,f803,f814,f813,f818,f817,f822,f821,f827,f826,f833,f832,f831,f850,f849,f848,f847,f867,f862,f861,f860,f859,f877,f872,f871,f870,f869,f880,f879,f884,f883,f888,f887,f893,f892,f899,f898,f897,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2359,f2526,f2533,f2565,f2572,f2608,f2621,f2845,f2935,f2940,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f4202,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5689,f7303,f7383,f7384,f7553,f7558,f7561,f7565,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9603,f8248,f8253,f8256,f8260,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f895,f890,f829,f824,f754,f749,f687,f683,f666,f663,f693,f685,f681,f906,f874,f873,f866,f865,f851,f808,f807,f800,f799,f785,f733,f732,f725,f724,f710,f699,f696,f659,f657,f677,f6241,f6256,f6286,f684,f664,f688,f667,f692,f680,f670,f6240,f6247,f6273,f858,f857,f856,f855,f854,f853,f852,f792,f791,f790,f789,f788,f787,f786,f717,f716,f715,f714,f713,f712,f711,f908,f909,f907,f900,f894,f889,f885,f881,f876,f875,f864,f863,f834,f828,f823,f819,f815,f810,f809,f798,f797,f759,f753,f748,f744,f740,f735,f734,f723,f722,f701,f694,f691,f686,f682,f679,f676,f669,f665,f662,f660,f656,f674,f673,f672,f671,f702,f661,f697,f658,f901,f886,f882,f878,f835,f820,f816,f812,f760,f745,f741,f737,f905,f904,f903,f902,f896,f891,f868,f830,f825,f802,f755,f750,f727,f705,f655,f8277,f8276,f8275,f8274,f8273,f8272,f8271,f8244,f8008,f7582,f7581,f7580,f7579,f7578,f7577,f7576,f7549,f9615,f9614,f9613,f9612,f9611,f9610,f9609,f9606,f9605,f602,f601,f599,f596,f594,f593,f591,f587,f586,f698,f695,f845,f774,f773,f9622,f768,f767,f766,f765,f764,f763,f762,f761,f703,f653,f700,f690,f678,f675,f776,f775,f2938,f2941,f844,f9602,f9621,f9604,f9600,f6932,f4519,f1019,f846,f843,f842,f841,f840,f839,f838,f837,f836,f780,f779,f778,f704,f654,f7575,f8270,f3884,f3443,f3442,f2877,f2876,f2754,f2753,f2734,f2718,f2706,f2696,f2684,f2672,f2618,f2617,f2607,f2569,f2568,f2564,f2530,f2529,f2525,f2475,f2474,f2443,f2442,f1048,f552,f551,f12824,f12904,f12907,f12983,f12986,f2436,f2339,f8246,f8245,f7551,f7550,f2432,f2330,f2433,f2331,f8010,f8009,f9608,f9607,f604,f603,f16743,f16742,f16741,f17411,f18050,f18055,f18061,f19237,f19229,f18641,f18642,f18653,f18655,f18658,f18659,f18660,f18662,f18667,f18670,f18674,f19251,f19219,f19254,f19256,f18697,f19257,f18698,f19258,f18699,f18700,f18702,f18703,f18704,f18705,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18713,f18714,f18715,f18716,f19275,f18717,f19276,f18724,f19277,f18725,f19278,f18726,f19279,f18727,f19280,f18736,f18737,f18762,f18763,f18764,f18765,f18772,f18773,f19214,f19213,f18878,f18895,f18898,f18899,f18900,f18901,f18902,f18903,f18904,f18905,f19303,f18906,f19305,f18907,f19307,f18908,f19309,f18909])).
fof(f19310,plain,(
  ( ! [X707,X708,X710,X706] : (s(bool,'T_0') = s(bool,happ(s(fun(X706,bool),X707),s(X706,sK62(X708,X707,X706)))) | p(s(bool,happ(s(fun(X706,bool),X707),s(X706,X710))))) ) | $spl178),
  inference(cnf_transformation,[],[f19310_D])).
fof(f19310_D,plain,(
  ( ! [X707,X708,X710,X706] : (s(bool,'T_0') = s(bool,happ(s(fun(X706,bool),X707),s(X706,sK62(X708,X707,X706)))) | p(s(bool,happ(s(fun(X706,bool),X707),s(X706,X710))))) ) <=> ~$spl178),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl178])])).
fof(f19309,plain,(
  ( ! [X707,X708,X710,X706,X709] : (s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X709,'type.list.list'('type.conSem.v'))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X709),s('type.list.list'('type.conSem.v'),sK54)))) | s(bool,'T_0') = s(bool,happ(s(fun(X706,bool),X707),s(X706,sK62(X708,X707,X706)))) | p(s(bool,happ(s(fun(X706,bool),X707),s(X706,X710))))) ) | $spl70),
  inference(global_subsumption,[],[f530,f529,f528,f527,f531,f538,f539,f548,f547,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f668,f689,f709,f708,f707,f706,f726,f721,f720,f719,f718,f736,f731,f730,f729,f728,f739,f738,f743,f742,f747,f746,f752,f751,f758,f757,f756,f777,f772,f771,f770,f769,f784,f783,f782,f781,f801,f796,f795,f794,f793,f811,f806,f805,f804,f803,f814,f813,f818,f817,f822,f821,f827,f826,f833,f832,f831,f850,f849,f848,f847,f867,f862,f861,f860,f859,f877,f872,f871,f870,f869,f880,f879,f884,f883,f888,f887,f893,f892,f899,f898,f897,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2359,f2526,f2533,f2565,f2572,f2608,f2621,f2845,f2935,f2940,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f4202,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5689,f7303,f7383,f7384,f7553,f7558,f7561,f7565,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9603,f8248,f8253,f8256,f8260,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f895,f890,f829,f824,f754,f749,f687,f683,f666,f663,f693,f685,f681,f906,f874,f873,f866,f865,f851,f808,f807,f800,f799,f785,f733,f732,f725,f724,f710,f699,f696,f659,f657,f677,f6241,f6256,f6286,f684,f664,f688,f667,f692,f680,f670,f6240,f6247,f6273,f858,f857,f856,f855,f854,f853,f852,f792,f791,f790,f789,f788,f787,f786,f717,f716,f715,f714,f713,f712,f711,f908,f909,f907,f900,f894,f889,f885,f881,f876,f875,f864,f863,f834,f828,f823,f819,f815,f810,f809,f798,f797,f759,f753,f748,f744,f740,f735,f734,f723,f722,f701,f694,f691,f686,f682,f679,f676,f669,f665,f662,f660,f656,f674,f673,f672,f671,f702,f661,f697,f658,f901,f886,f882,f878,f835,f820,f816,f812,f760,f745,f741,f737,f905,f904,f903,f902,f896,f891,f868,f830,f825,f802,f755,f750,f727,f705,f655,f8277,f8276,f8275,f8274,f8273,f8272,f8271,f8244,f8008,f7582,f7581,f7580,f7579,f7578,f7577,f7576,f7549,f9615,f9614,f9613,f9612,f9611,f9610,f9609,f9606,f9605,f602,f601,f599,f596,f594,f593,f591,f587,f586,f698,f695,f845,f774,f773,f9622,f768,f767,f766,f765,f764,f763,f762,f761,f703,f653,f700,f690,f678,f675,f776,f775,f2938,f2941,f844,f9602,f9621,f9604,f9600,f6932,f4519,f1019,f846,f843,f842,f841,f840,f839,f838,f837,f836,f780,f779,f778,f704,f654,f7575,f8270,f3884,f3443,f3442,f2877,f2876,f2754,f2753,f2734,f2718,f2706,f2696,f2684,f2672,f2618,f2617,f2607,f2569,f2568,f2564,f2530,f2529,f2525,f2475,f2474,f2443,f2442,f1048,f552,f551,f12824,f12904,f12907,f12983,f12986,f2436,f2339,f8246,f8245,f7551,f7550,f2432,f2330,f2433,f2331,f8010,f8009,f9608,f9607,f604,f603,f16743,f16742,f16741,f17411,f18050,f18055,f18061,f19237,f19229,f18641,f18642,f18653,f18655,f18658,f18659,f18660,f18662,f18667,f18670,f18674,f19251,f19219,f19254,f19256,f18697,f19257,f18698,f19258,f18699,f18700,f18702,f18703,f18704,f18705,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18713,f18714,f18715,f18716,f19275,f18717,f19276,f18724,f19277,f18725,f19278,f18726,f19279,f18727,f19280,f18736,f18737,f18762,f18763,f18764,f18765,f18772,f18773,f19214,f19213,f18878,f18895,f18898,f18899,f18900,f18901,f18902,f18903,f18904,f18905,f19303,f18906,f19305,f18907,f19307,f18908])).
fof(f19308,plain,(
  ( ! [X703,X702,X701,X705] : (p(s(bool,happ(s(fun(X701,bool),X702),s(X701,X705)))) | s(bool,'T_0') = s(bool,happ(s(fun(X701,bool),X702),s(X701,sK61(X703,X702,X701))))) ) | $spl176),
  inference(cnf_transformation,[],[f19308_D])).
fof(f19308_D,plain,(
  ( ! [X703,X702,X701,X705] : (p(s(bool,happ(s(fun(X701,bool),X702),s(X701,X705)))) | s(bool,'T_0') = s(bool,happ(s(fun(X701,bool),X702),s(X701,sK61(X703,X702,X701))))) ) <=> ~$spl176),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl176])])).
fof(f19307,plain,(
  ( ! [X703,X704,X702,X701,X705] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X704),s('type.list.list'('type.conSem.v'),sK54)))) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X704,'type.list.list'('type.conSem.v'))) | p(s(bool,happ(s(fun(X701,bool),X702),s(X701,X705)))) | s(bool,'T_0') = s(bool,happ(s(fun(X701,bool),X702),s(X701,sK61(X703,X702,X701))))) ) | $spl70),
  inference(global_subsumption,[],[f530,f529,f528,f527,f531,f538,f539,f548,f547,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f668,f689,f709,f708,f707,f706,f726,f721,f720,f719,f718,f736,f731,f730,f729,f728,f739,f738,f743,f742,f747,f746,f752,f751,f758,f757,f756,f777,f772,f771,f770,f769,f784,f783,f782,f781,f801,f796,f795,f794,f793,f811,f806,f805,f804,f803,f814,f813,f818,f817,f822,f821,f827,f826,f833,f832,f831,f850,f849,f848,f847,f867,f862,f861,f860,f859,f877,f872,f871,f870,f869,f880,f879,f884,f883,f888,f887,f893,f892,f899,f898,f897,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2359,f2526,f2533,f2565,f2572,f2608,f2621,f2845,f2935,f2940,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f4202,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5689,f7303,f7383,f7384,f7553,f7558,f7561,f7565,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9603,f8248,f8253,f8256,f8260,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f895,f890,f829,f824,f754,f749,f687,f683,f666,f663,f693,f685,f681,f906,f874,f873,f866,f865,f851,f808,f807,f800,f799,f785,f733,f732,f725,f724,f710,f699,f696,f659,f657,f677,f6241,f6256,f6286,f684,f664,f688,f667,f692,f680,f670,f6240,f6247,f6273,f858,f857,f856,f855,f854,f853,f852,f792,f791,f790,f789,f788,f787,f786,f717,f716,f715,f714,f713,f712,f711,f908,f909,f907,f900,f894,f889,f885,f881,f876,f875,f864,f863,f834,f828,f823,f819,f815,f810,f809,f798,f797,f759,f753,f748,f744,f740,f735,f734,f723,f722,f701,f694,f691,f686,f682,f679,f676,f669,f665,f662,f660,f656,f674,f673,f672,f671,f702,f661,f697,f658,f901,f886,f882,f878,f835,f820,f816,f812,f760,f745,f741,f737,f905,f904,f903,f902,f896,f891,f868,f830,f825,f802,f755,f750,f727,f705,f655,f8277,f8276,f8275,f8274,f8273,f8272,f8271,f8244,f8008,f7582,f7581,f7580,f7579,f7578,f7577,f7576,f7549,f9615,f9614,f9613,f9612,f9611,f9610,f9609,f9606,f9605,f602,f601,f599,f596,f594,f593,f591,f587,f586,f698,f695,f845,f774,f773,f9622,f768,f767,f766,f765,f764,f763,f762,f761,f703,f653,f700,f690,f678,f675,f776,f775,f2938,f2941,f844,f9602,f9621,f9604,f9600,f6932,f4519,f1019,f846,f843,f842,f841,f840,f839,f838,f837,f836,f780,f779,f778,f704,f654,f7575,f8270,f3884,f3443,f3442,f2877,f2876,f2754,f2753,f2734,f2718,f2706,f2696,f2684,f2672,f2618,f2617,f2607,f2569,f2568,f2564,f2530,f2529,f2525,f2475,f2474,f2443,f2442,f1048,f552,f551,f12824,f12904,f12907,f12983,f12986,f2436,f2339,f8246,f8245,f7551,f7550,f2432,f2330,f2433,f2331,f8010,f8009,f9608,f9607,f604,f603,f16743,f16742,f16741,f17411,f18050,f18055,f18061,f19237,f19229,f18641,f18642,f18653,f18655,f18658,f18659,f18660,f18662,f18667,f18670,f18674,f19251,f19219,f19254,f19256,f18697,f19257,f18698,f19258,f18699,f18700,f18702,f18703,f18704,f18705,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18713,f18714,f18715,f18716,f19275,f18717,f19276,f18724,f19277,f18725,f19278,f18726,f19279,f18727,f19280,f18736,f18737,f18762,f18763,f18764,f18765,f18772,f18773,f19214,f19213,f18878,f18895,f18898,f18899,f18900,f18901,f18902,f18903,f18904,f18905,f19303,f18906,f19305,f18907])).
fof(f19306,plain,(
  ( ! [X697,X700,X696,X698] : (s(bool,'T_0') = s(bool,happ(s(fun(X696,bool),X697),s(X696,sK60(X697,X698,X696)))) | p(s(bool,happ(s(fun(X696,bool),X697),s(X696,X700))))) ) | $spl174),
  inference(cnf_transformation,[],[f19306_D])).
fof(f19306_D,plain,(
  ( ! [X697,X700,X696,X698] : (s(bool,'T_0') = s(bool,happ(s(fun(X696,bool),X697),s(X696,sK60(X697,X698,X696)))) | p(s(bool,happ(s(fun(X696,bool),X697),s(X696,X700))))) ) <=> ~$spl174),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl174])])).
fof(f19305,plain,(
  ( ! [X697,X699,X700,X696,X698] : (s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X699,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,happ(s(fun(X696,bool),X697),s(X696,sK60(X697,X698,X696)))) | p(s(bool,happ(s(fun(X696,bool),X697),s(X696,X700)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X699),s('type.list.list'('type.conSem.v'),sK54))))) ) | $spl70),
  inference(global_subsumption,[],[f530,f529,f528,f527,f531,f538,f539,f548,f547,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f668,f689,f709,f708,f707,f706,f726,f721,f720,f719,f718,f736,f731,f730,f729,f728,f739,f738,f743,f742,f747,f746,f752,f751,f758,f757,f756,f777,f772,f771,f770,f769,f784,f783,f782,f781,f801,f796,f795,f794,f793,f811,f806,f805,f804,f803,f814,f813,f818,f817,f822,f821,f827,f826,f833,f832,f831,f850,f849,f848,f847,f867,f862,f861,f860,f859,f877,f872,f871,f870,f869,f880,f879,f884,f883,f888,f887,f893,f892,f899,f898,f897,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2359,f2526,f2533,f2565,f2572,f2608,f2621,f2845,f2935,f2940,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f4202,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5689,f7303,f7383,f7384,f7553,f7558,f7561,f7565,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9603,f8248,f8253,f8256,f8260,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f895,f890,f829,f824,f754,f749,f687,f683,f666,f663,f693,f685,f681,f906,f874,f873,f866,f865,f851,f808,f807,f800,f799,f785,f733,f732,f725,f724,f710,f699,f696,f659,f657,f677,f6241,f6256,f6286,f684,f664,f688,f667,f692,f680,f670,f6240,f6247,f6273,f858,f857,f856,f855,f854,f853,f852,f792,f791,f790,f789,f788,f787,f786,f717,f716,f715,f714,f713,f712,f711,f908,f909,f907,f900,f894,f889,f885,f881,f876,f875,f864,f863,f834,f828,f823,f819,f815,f810,f809,f798,f797,f759,f753,f748,f744,f740,f735,f734,f723,f722,f701,f694,f691,f686,f682,f679,f676,f669,f665,f662,f660,f656,f674,f673,f672,f671,f702,f661,f697,f658,f901,f886,f882,f878,f835,f820,f816,f812,f760,f745,f741,f737,f905,f904,f903,f902,f896,f891,f868,f830,f825,f802,f755,f750,f727,f705,f655,f8277,f8276,f8275,f8274,f8273,f8272,f8271,f8244,f8008,f7582,f7581,f7580,f7579,f7578,f7577,f7576,f7549,f9615,f9614,f9613,f9612,f9611,f9610,f9609,f9606,f9605,f602,f601,f599,f596,f594,f593,f591,f587,f586,f698,f695,f845,f774,f773,f9622,f768,f767,f766,f765,f764,f763,f762,f761,f703,f653,f700,f690,f678,f675,f776,f775,f2938,f2941,f844,f9602,f9621,f9604,f9600,f6932,f4519,f1019,f846,f843,f842,f841,f840,f839,f838,f837,f836,f780,f779,f778,f704,f654,f7575,f8270,f3884,f3443,f3442,f2877,f2876,f2754,f2753,f2734,f2718,f2706,f2696,f2684,f2672,f2618,f2617,f2607,f2569,f2568,f2564,f2530,f2529,f2525,f2475,f2474,f2443,f2442,f1048,f552,f551,f12824,f12904,f12907,f12983,f12986,f2436,f2339,f8246,f8245,f7551,f7550,f2432,f2330,f2433,f2331,f8010,f8009,f9608,f9607,f604,f603,f16743,f16742,f16741,f17411,f18050,f18055,f18061,f19237,f19229,f18641,f18642,f18653,f18655,f18658,f18659,f18660,f18662,f18667,f18670,f18674,f19251,f19219,f19254,f19256,f18697,f19257,f18698,f19258,f18699,f18700,f18702,f18703,f18704,f18705,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18713,f18714,f18715,f18716,f19275,f18717,f19276,f18724,f19277,f18725,f19278,f18726,f19279,f18727,f19280,f18736,f18737,f18762,f18763,f18764,f18765,f18772,f18773,f19214,f19213,f18878,f18895,f18898,f18899,f18900,f18901,f18902,f18903,f18904,f18905,f19303,f18906])).
fof(f19304,plain,(
  ( ! [X693,X695,X691,X692] : (s(bool,'T_0') = s(bool,happ(s(fun(X691,bool),X692),s(X691,sK59(X692,X693,X691)))) | p(s(bool,happ(s(fun(X691,bool),X692),s(X691,X695))))) ) | $spl172),
  inference(cnf_transformation,[],[f19304_D])).
fof(f19304_D,plain,(
  ( ! [X693,X695,X691,X692] : (s(bool,'T_0') = s(bool,happ(s(fun(X691,bool),X692),s(X691,sK59(X692,X693,X691)))) | p(s(bool,happ(s(fun(X691,bool),X692),s(X691,X695))))) ) <=> ~$spl172),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl172])])).
fof(f19303,plain,(
  ( ! [X693,X695,X691,X692,X694] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X694),s('type.list.list'('type.conSem.v'),sK54)))) | s(bool,'T_0') = s(bool,happ(s(fun(X691,bool),X692),s(X691,sK59(X692,X693,X691)))) | p(s(bool,happ(s(fun(X691,bool),X692),s(X691,X695)))) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X694,'type.list.list'('type.conSem.v')))) ) | $spl70),
  inference(global_subsumption,[],[f530,f529,f528,f527,f531,f538,f539,f548,f547,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f668,f689,f709,f708,f707,f706,f726,f721,f720,f719,f718,f736,f731,f730,f729,f728,f739,f738,f743,f742,f747,f746,f752,f751,f758,f757,f756,f777,f772,f771,f770,f769,f784,f783,f782,f781,f801,f796,f795,f794,f793,f811,f806,f805,f804,f803,f814,f813,f818,f817,f822,f821,f827,f826,f833,f832,f831,f850,f849,f848,f847,f867,f862,f861,f860,f859,f877,f872,f871,f870,f869,f880,f879,f884,f883,f888,f887,f893,f892,f899,f898,f897,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2359,f2526,f2533,f2565,f2572,f2608,f2621,f2845,f2935,f2940,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f4202,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5689,f7303,f7383,f7384,f7553,f7558,f7561,f7565,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9603,f8248,f8253,f8256,f8260,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f895,f890,f829,f824,f754,f749,f687,f683,f666,f663,f693,f685,f681,f906,f874,f873,f866,f865,f851,f808,f807,f800,f799,f785,f733,f732,f725,f724,f710,f699,f696,f659,f657,f677,f6241,f6256,f6286,f684,f664,f688,f667,f692,f680,f670,f6240,f6247,f6273,f858,f857,f856,f855,f854,f853,f852,f792,f791,f790,f789,f788,f787,f786,f717,f716,f715,f714,f713,f712,f711,f908,f909,f907,f900,f894,f889,f885,f881,f876,f875,f864,f863,f834,f828,f823,f819,f815,f810,f809,f798,f797,f759,f753,f748,f744,f740,f735,f734,f723,f722,f701,f694,f691,f686,f682,f679,f676,f669,f665,f662,f660,f656,f674,f673,f672,f671,f702,f661,f697,f658,f901,f886,f882,f878,f835,f820,f816,f812,f760,f745,f741,f737,f905,f904,f903,f902,f896,f891,f868,f830,f825,f802,f755,f750,f727,f705,f655,f8277,f8276,f8275,f8274,f8273,f8272,f8271,f8244,f8008,f7582,f7581,f7580,f7579,f7578,f7577,f7576,f7549,f9615,f9614,f9613,f9612,f9611,f9610,f9609,f9606,f9605,f602,f601,f599,f596,f594,f593,f591,f587,f586,f698,f695,f845,f774,f773,f9622,f768,f767,f766,f765,f764,f763,f762,f761,f703,f653,f700,f690,f678,f675,f776,f775,f2938,f2941,f844,f9602,f9621,f9604,f9600,f6932,f4519,f1019,f846,f843,f842,f841,f840,f839,f838,f837,f836,f780,f779,f778,f704,f654,f7575,f8270,f3884,f3443,f3442,f2877,f2876,f2754,f2753,f2734,f2718,f2706,f2696,f2684,f2672,f2618,f2617,f2607,f2569,f2568,f2564,f2530,f2529,f2525,f2475,f2474,f2443,f2442,f1048,f552,f551,f12824,f12904,f12907,f12983,f12986,f2436,f2339,f8246,f8245,f7551,f7550,f2432,f2330,f2433,f2331,f8010,f8009,f9608,f9607,f604,f603,f16743,f16742,f16741,f17411,f18050,f18055,f18061,f19237,f19229,f18641,f18642,f18653,f18655,f18658,f18659,f18660,f18662,f18667,f18670,f18674,f19251,f19219,f19254,f19256,f18697,f19257,f18698,f19258,f18699,f18700,f18702,f18703,f18704,f18705,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18713,f18714,f18715,f18716,f19275,f18717,f19276,f18724,f19277,f18725,f19278,f18726,f19279,f18727,f19280,f18736,f18737,f18762,f18763,f18764,f18765,f18772,f18773,f19214,f19213,f18878,f18895,f18898,f18899,f18900,f18901,f18902,f18903,f18904,f18905])).
fof(f19302,plain,(
  ( ! [X687,X688,X690,X686] : (~p(s(bool,happ(s(fun(X686,bool),X688),s(X686,X690)))) | s(bool,'T_0') = s(bool,happ(s(fun(X686,bool),X687),s(X686,sK57(X688,X687,X686)))) | p(s(bool,happ(s(fun(X686,bool),X687),s(X686,sK58(X688,X687,X686)))))) ) | $spl170),
  inference(cnf_transformation,[],[f19302_D])).
fof(f19302_D,plain,(
  ( ! [X687,X688,X690,X686] : (~p(s(bool,happ(s(fun(X686,bool),X688),s(X686,X690)))) | s(bool,'T_0') = s(bool,happ(s(fun(X686,bool),X687),s(X686,sK57(X688,X687,X686)))) | p(s(bool,happ(s(fun(X686,bool),X687),s(X686,sK58(X688,X687,X686)))))) ) <=> ~$spl170),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl170])])).
fof(f18904,plain,(
  ( ! [X689,X687,X688,X690,X686] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X689),s('type.list.list'('type.conSem.v'),sK54)))) | ~p(s(bool,happ(s(fun(X686,bool),X688),s(X686,X690)))) | p(s(bool,happ(s(fun(X686,bool),X687),s(X686,sK58(X688,X687,X686))))) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X689,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,happ(s(fun(X686,bool),X687),s(X686,sK57(X688,X687,X686))))) ) | $spl70),
  inference(superposition,[],[f587,f17411])).
fof(f19301,plain,(
  ( ! [X685,X681,X683,X682] : (p(s(bool,happ(s(fun(X681,bool),X682),s(X681,X685)))) | s(bool,'T_0') = s(bool,happ(s(fun(X681,bool),X682),s(X681,X683))) | s(X681,X683) != s(X681,X685)) ) | $spl168),
  inference(cnf_transformation,[],[f19301_D])).
fof(f19301_D,plain,(
  ( ! [X685,X681,X683,X682] : (p(s(bool,happ(s(fun(X681,bool),X682),s(X681,X685)))) | s(bool,'T_0') = s(bool,happ(s(fun(X681,bool),X682),s(X681,X683))) | s(X681,X683) != s(X681,X685)) ) <=> ~$spl168),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl168])])).
fof(f18903,plain,(
  ( ! [X685,X681,X683,X684,X682] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X684),s('type.list.list'('type.conSem.v'),sK54)))) | p(s(bool,happ(s(fun(X681,bool),X682),s(X681,X685)))) | s(X681,X683) != s(X681,X685) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X684,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,happ(s(fun(X681,bool),X682),s(X681,X683)))) ) | $spl70),
  inference(superposition,[],[f602,f17411])).
fof(f19300,plain,(
  ( ! [X677,X679,X678] : (s(X677,X679) = s(X677,sK65(X679,X678,X677)) | s(bool,'T_0') = s(bool,happ(s(fun(X677,bool),X678),s(X677,X679)))) ) | $spl166),
  inference(cnf_transformation,[],[f19300_D])).
fof(f19300_D,plain,(
  ( ! [X677,X679,X678] : (s(X677,X679) = s(X677,sK65(X679,X678,X677)) | s(bool,'T_0') = s(bool,happ(s(fun(X677,bool),X678),s(X677,X679)))) ) <=> ~$spl166),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl166])])).
fof(f18902,plain,(
  ( ! [X677,X679,X680,X678] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X680),s('type.list.list'('type.conSem.v'),sK54)))) | s(X677,X679) = s(X677,sK65(X679,X678,X677)) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X680,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,happ(s(fun(X677,bool),X678),s(X677,X679)))) ) | $spl70),
  inference(superposition,[],[f603,f17411])).
fof(f19299,plain,(
  ( ! [X673,X675,X674] : (p(s(bool,happ(s(fun(X673,bool),X674),s(X673,sK65(X675,X674,X673))))) | s(bool,'T_0') = s(bool,happ(s(fun(X673,bool),X674),s(X673,X675)))) ) | $spl164),
  inference(cnf_transformation,[],[f19299_D])).
fof(f19299_D,plain,(
  ( ! [X673,X675,X674] : (p(s(bool,happ(s(fun(X673,bool),X674),s(X673,sK65(X675,X674,X673))))) | s(bool,'T_0') = s(bool,happ(s(fun(X673,bool),X674),s(X673,X675)))) ) <=> ~$spl164),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl164])])).
fof(f18901,plain,(
  ( ! [X673,X675,X676,X674] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X676),s('type.list.list'('type.conSem.v'),sK54)))) | p(s(bool,happ(s(fun(X673,bool),X674),s(X673,sK65(X675,X674,X673))))) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X676,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,happ(s(fun(X673,bool),X674),s(X673,X675)))) ) | $spl70),
  inference(superposition,[],[f604,f17411])).
fof(f19298,plain,(
  ( ! [X668,X670,X669,X672] : (p(s(bool,happ(s(fun(X668,bool),X672),s(X668,sK58(X669,X672,X668))))) | s(bool,'T_0') = s(bool,happ(s(fun(X668,bool),X669),s(X668,X670))) | p(s(bool,happ(s(fun(X668,bool),X669),s(X668,sK57(X669,X672,X668)))))) ) | $spl162),
  inference(cnf_transformation,[],[f19298_D])).
fof(f19298_D,plain,(
  ( ! [X668,X670,X669,X672] : (p(s(bool,happ(s(fun(X668,bool),X672),s(X668,sK58(X669,X672,X668))))) | s(bool,'T_0') = s(bool,happ(s(fun(X668,bool),X669),s(X668,X670))) | p(s(bool,happ(s(fun(X668,bool),X669),s(X668,sK57(X669,X672,X668)))))) ) <=> ~$spl162),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl162])])).
fof(f18900,plain,(
  ( ! [X668,X670,X669,X671,X672] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X671),s('type.list.list'('type.conSem.v'),sK54)))) | p(s(bool,happ(s(fun(X668,bool),X672),s(X668,sK58(X669,X672,X668))))) | p(s(bool,happ(s(fun(X668,bool),X669),s(X668,sK57(X669,X672,X668))))) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X671,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,happ(s(fun(X668,bool),X669),s(X668,X670)))) ) | $spl70),
  inference(superposition,[],[f586,f17411])).
fof(f19297,plain,(
  ( ! [X666,X664,X665] : (s('type.conSem.v',X666) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),sK253(X666,X665,X664)))) | s(bool,'T_0') = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X664),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X665))),s('type.conSem.v',X666)))) ) | $spl160),
  inference(cnf_transformation,[],[f19297_D])).
fof(f19297_D,plain,(
  ( ! [X666,X664,X665] : (s('type.conSem.v',X666) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),sK253(X666,X665,X664)))) | s(bool,'T_0') = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X664),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X665))),s('type.conSem.v',X666)))) ) <=> ~$spl160),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl160])])).
fof(f18899,plain,(
  ( ! [X666,X664,X667,X665] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X667),s('type.list.list'('type.conSem.v'),sK54)))) | s('type.conSem.v',X666) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),sK253(X666,X665,X664)))) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X667,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X664),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X665))),s('type.conSem.v',X666)))) ) | $spl70),
  inference(superposition,[],[f845,f17411])).
fof(f19296,plain,(
  ( ! [X660,X662,X661] : (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X660),s('type.list.list'('type.modSem.v'),X661),s('type.list.list'('type.conSem.v'),sK253(X662,X661,X660))))) | s(bool,'T_0') = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X660),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X661))),s('type.conSem.v',X662)))) ) | $spl158),
  inference(cnf_transformation,[],[f19296_D])).
fof(f19296_D,plain,(
  ( ! [X660,X662,X661] : (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X660),s('type.list.list'('type.modSem.v'),X661),s('type.list.list'('type.conSem.v'),sK253(X662,X661,X660))))) | s(bool,'T_0') = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X660),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X661))),s('type.conSem.v',X662)))) ) <=> ~$spl158),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl158])])).
fof(f18898,plain,(
  ( ! [X660,X662,X661,X663] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X663),s('type.list.list'('type.conSem.v'),sK54)))) | p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X660),s('type.list.list'('type.modSem.v'),X661),s('type.list.list'('type.conSem.v'),sK253(X662,X661,X660))))) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X663,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X660),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X661))),s('type.conSem.v',X662)))) ) | $spl70),
  inference(superposition,[],[f844,f17411])).
fof(f19295,plain,(
  ( ! [X656,X657] : (sP23(X656,'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X657) | s(bool,'T_0') = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X656),s('type.list.list'('type.modSem.v'),X657),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl156),
  inference(cnf_transformation,[],[f19295_D])).
fof(f19295_D,plain,(
  ( ! [X656,X657] : (sP23(X656,'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X657) | s(bool,'T_0') = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X656),s('type.list.list'('type.modSem.v'),X657),s('type.list.list'('type.conSem.v'),sK54)))) ) <=> ~$spl156),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl156])])).
fof(f18896,plain,(
  ( ! [X656,X658,X657] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X658),s('type.list.list'('type.conSem.v'),sK54)))) | sP23(X656,'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X657) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X658,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X656),s('type.list.list'('type.modSem.v'),X657),s('type.list.list'('type.conSem.v'),sK54)))) ) | ($spl4 | $spl70)),
  inference(superposition,[],[f2406,f17411])).
fof(f19294,plain,(
  ( ! [X652,X654,X653] : (sP23(X652,X654,X653) | s(bool,'T_0') = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X652),s('type.list.list'('type.modSem.v'),X653),s('type.list.list'('type.conSem.v'),X654)))) ) | $spl154),
  inference(cnf_transformation,[],[f19294_D])).
fof(f19294_D,plain,(
  ( ! [X652,X654,X653] : (sP23(X652,X654,X653) | s(bool,'T_0') = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X652),s('type.list.list'('type.modSem.v'),X653),s('type.list.list'('type.conSem.v'),X654)))) ) <=> ~$spl154),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl154])])).
fof(f18895,plain,(
  ( ! [X652,X654,X653,X655] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X655),s('type.list.list'('type.conSem.v'),sK54)))) | sP23(X652,X654,X653) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X655,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X652),s('type.list.list'('type.modSem.v'),X653),s('type.list.list'('type.conSem.v'),X654)))) ) | $spl70),
  inference(superposition,[],[f779,f17411])).
fof(f19206,plain,(
  ( ! [X606,X605,X607] : (s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X606),s('type.list.list'('type.conSem.v'),sK54))) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X607),s('type.list.list'('type.conSem.v'),sK54))) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X607,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X605) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X606,'type.list.list'('type.conSem.v')))) ) | ($spl4 | $spl70)),
  inference(duplicate_literal_removal,[],[f18883])).
fof(f18883,plain,(
  ( ! [X606,X605,X607] : (s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X606),s('type.list.list'('type.conSem.v'),sK54))) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X607),s('type.list.list'('type.conSem.v'),sK54))) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X607,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X605) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X606,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X605)) ) | ($spl4 | $spl70)),
  inference(superposition,[],[f9620,f17411])).
fof(f19292,plain,(
  ( ! [X584,X580,X582,X583] : (sP50(X582,X580,X583) | s(bool,'T_0') = s(bool,X580) | s(bool,'T_0') = s(bool,X584) | s(bool,X582) = s(bool,X584)) ) | $spl152),
  inference(cnf_transformation,[],[f19292_D])).
fof(f19292_D,plain,(
  ( ! [X584,X580,X582,X583] : (sP50(X582,X580,X583) | s(bool,'T_0') = s(bool,X580) | s(bool,'T_0') = s(bool,X584) | s(bool,X582) = s(bool,X584)) ) <=> ~$spl152),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl152])])).
fof(f18878,plain,(
  ( ! [X584,X580,X582,X581,X583] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X581),s('type.list.list'('type.conSem.v'),sK54)))) | sP50(X582,X580,X583) | s(bool,X582) = s(bool,X584) | s(bool,'T_0') = s(bool,X584) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X581,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X580)) ) | $spl70),
  inference(superposition,[],[f9585,f17411])).
fof(f19289,plain,(
  ( ! [X318,X320,X319] : (~sP47('const.bool.BOUNDED_1'(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X318),s('type.list.list'('type.conSem.v'),sK54)))),X319,X320) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X318,'type.list.list'('type.conSem.v'))) | sP48('const.bool.BOUNDED_1'(s(bool,'F_0')),X319,X320)) ) | $spl150),
  inference(cnf_transformation,[],[f19289_D])).
fof(f19289_D,plain,(
  ( ! [X318,X320,X319] : (~sP47('const.bool.BOUNDED_1'(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X318),s('type.list.list'('type.conSem.v'),sK54)))),X319,X320) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X318,'type.list.list'('type.conSem.v'))) | sP48('const.bool.BOUNDED_1'(s(bool,'F_0')),X319,X320)) ) <=> ~$spl150),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl150])])).
fof(f19213,plain,(
  ( ! [X318,X320,X317,X319] : (~sP47('const.bool.BOUNDED_1'(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X318),s('type.list.list'('type.conSem.v'),sK54)))),X319,X320) | sP48('const.bool.BOUNDED_1'(s(bool,'F_0')),X319,X320) | s(bool,'T_0') = s(bool,X317) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X318,'type.list.list'('type.conSem.v')))) ) | $spl70),
  inference(duplicate_literal_removal,[],[f18784])).
fof(f18784,plain,(
  ( ! [X318,X320,X317,X319] : (~sP47('const.bool.BOUNDED_1'(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X318),s('type.list.list'('type.conSem.v'),sK54)))),X319,X320) | sP48('const.bool.BOUNDED_1'(s(bool,'F_0')),X319,X320) | s(bool,'T_0') = s(bool,X317) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X318,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X317)) ) | $spl70),
  inference(superposition,[],[f2474,f17411])).
fof(f19288,plain,(
  ( ! [X315,X316,X314] : (~sP49('const.bool.BOUNDED_1'(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X314),s('type.list.list'('type.conSem.v'),sK54)))),X315,X316) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X314,'type.list.list'('type.conSem.v'))) | sP50('const.bool.BOUNDED_1'(s(bool,'F_0')),X315,X316)) ) | $spl148),
  inference(cnf_transformation,[],[f19288_D])).
fof(f19288_D,plain,(
  ( ! [X315,X316,X314] : (~sP49('const.bool.BOUNDED_1'(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X314),s('type.list.list'('type.conSem.v'),sK54)))),X315,X316) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X314,'type.list.list'('type.conSem.v'))) | sP50('const.bool.BOUNDED_1'(s(bool,'F_0')),X315,X316)) ) <=> ~$spl148),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl148])])).
fof(f19214,plain,(
  ( ! [X313,X315,X316,X314] : (~sP49('const.bool.BOUNDED_1'(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X314),s('type.list.list'('type.conSem.v'),sK54)))),X315,X316) | sP50('const.bool.BOUNDED_1'(s(bool,'F_0')),X315,X316) | s(bool,'T_0') = s(bool,X313) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X314,'type.list.list'('type.conSem.v')))) ) | $spl70),
  inference(duplicate_literal_removal,[],[f18783])).
fof(f18783,plain,(
  ( ! [X313,X315,X316,X314] : (~sP49('const.bool.BOUNDED_1'(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X314),s('type.list.list'('type.conSem.v'),sK54)))),X315,X316) | sP50('const.bool.BOUNDED_1'(s(bool,'F_0')),X315,X316) | s(bool,'T_0') = s(bool,X313) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X314,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X313)) ) | $spl70),
  inference(superposition,[],[f2442,f17411])).
fof(f19287,plain,(
  ( ! [X288,X290] : (p(s(bool,X290)) | s(bool,'T_0') = s(bool,X288) | ~sP46(X290,X288,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)))) ) | $spl146),
  inference(cnf_transformation,[],[f19287_D])).
fof(f19287_D,plain,(
  ( ! [X288,X290] : (p(s(bool,X290)) | s(bool,'T_0') = s(bool,X288) | ~sP46(X290,X288,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)))) ) <=> ~$spl146),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl146])])).
fof(f18774,plain,(
  ( ! [X288,X290,X289] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X289),s('type.list.list'('type.conSem.v'),sK54)))) | p(s(bool,X290)) | ~sP46(X290,X288,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56))) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X289,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X288)) ) | ($spl6 | $spl70)),
  inference(superposition,[],[f2135,f17411])).
fof(f2135,plain,(
  ( ! [X19,X20] : (~p(s(bool,X19)) | p(s(bool,X20)) | ~sP46(X20,X19,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)))) ) | $spl6),
  inference(subsumption_resolution,[],[f2071,f531])).
fof(f2071,plain,(
  ( ! [X19,X20] : (~p(s(bool,'T_0')) | ~p(s(bool,X19)) | p(s(bool,X20)) | ~sP46(X20,X19,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)))) ) | $spl6),
  inference(superposition,[],[f965,f1111])).
fof(f19286,plain,(
  ( ! [X287,X284,X286] : (p(s(bool,X286)) | s(bool,'T_0') = s(bool,X284) | ~sP50('const.bool.BOUNDED_1'(s(bool,X287)),X286,X284)) ) | $spl144),
  inference(cnf_transformation,[],[f19286_D])).
fof(f19286_D,plain,(
  ( ! [X287,X284,X286] : (p(s(bool,X286)) | s(bool,'T_0') = s(bool,X284) | ~sP50('const.bool.BOUNDED_1'(s(bool,X287)),X286,X284)) ) <=> ~$spl144),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl144])])).
fof(f18773,plain,(
  ( ! [X285,X287,X284,X286] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X285),s('type.list.list'('type.conSem.v'),sK54)))) | p(s(bool,X286)) | ~sP50('const.bool.BOUNDED_1'(s(bool,X287)),X286,X284) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X285,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X284)) ) | $spl70),
  inference(superposition,[],[f2024,f17411])).
fof(f19285,plain,(
  ( ! [X280,X282,X283] : (p(s(bool,X282)) | s(bool,'T_0') = s(bool,X280) | ~sP49(X280,X282,'const.bool.BOUNDED_1'(s(bool,X283)))) ) | $spl142),
  inference(cnf_transformation,[],[f19285_D])).
fof(f19285_D,plain,(
  ( ! [X280,X282,X283] : (p(s(bool,X282)) | s(bool,'T_0') = s(bool,X280) | ~sP49(X280,X282,'const.bool.BOUNDED_1'(s(bool,X283)))) ) <=> ~$spl142),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl142])])).
fof(f18772,plain,(
  ( ! [X280,X282,X281,X283] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X281),s('type.list.list'('type.conSem.v'),sK54)))) | p(s(bool,X282)) | ~sP49(X280,X282,'const.bool.BOUNDED_1'(s(bool,X283))) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X281,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X280)) ) | $spl70),
  inference(superposition,[],[f1990,f17411])).
fof(f19284,plain,(
  ( ! [X259,X256,X258] : (p(s(bool,X258)) | s(bool,'T_0') = s(bool,X256) | ~sP46(X258,X256,'const.bool.BOUNDED_1'(s(bool,X259)))) ) | $spl140),
  inference(cnf_transformation,[],[f19284_D])).
fof(f19284_D,plain,(
  ( ! [X259,X256,X258] : (p(s(bool,X258)) | s(bool,'T_0') = s(bool,X256) | ~sP46(X258,X256,'const.bool.BOUNDED_1'(s(bool,X259)))) ) <=> ~$spl140),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl140])])).
fof(f18765,plain,(
  ( ! [X257,X259,X256,X258] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X257),s('type.list.list'('type.conSem.v'),sK54)))) | p(s(bool,X258)) | ~sP46(X258,X256,'const.bool.BOUNDED_1'(s(bool,X259))) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X257,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X256)) ) | $spl70),
  inference(superposition,[],[f1750,f17411])).
fof(f19283,plain,(
  ( ! [X255,X254,X252] : (p(s(bool,X254)) | s(bool,'T_0') = s(bool,X252) | ~sP45(X252,'const.bool.BOUNDED_1'(s(bool,X255)),X254)) ) | $spl138),
  inference(cnf_transformation,[],[f19283_D])).
fof(f19283_D,plain,(
  ( ! [X255,X254,X252] : (p(s(bool,X254)) | s(bool,'T_0') = s(bool,X252) | ~sP45(X252,'const.bool.BOUNDED_1'(s(bool,X255)),X254)) ) <=> ~$spl138),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl138])])).
fof(f18764,plain,(
  ( ! [X255,X253,X254,X252] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X253),s('type.list.list'('type.conSem.v'),sK54)))) | p(s(bool,X254)) | ~sP45(X252,'const.bool.BOUNDED_1'(s(bool,X255)),X254) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X253,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X252)) ) | $spl70),
  inference(superposition,[],[f1724,f17411])).
fof(f19282,plain,(
  ( ! [X251,X250,X248] : (p(s(bool,X250)) | s(bool,'T_0') = s(bool,X248) | ~sP42(X248,'const.bool.BOUNDED_1'(s(bool,X251)),X250)) ) | $spl136),
  inference(cnf_transformation,[],[f19282_D])).
fof(f19282_D,plain,(
  ( ! [X251,X250,X248] : (p(s(bool,X250)) | s(bool,'T_0') = s(bool,X248) | ~sP42(X248,'const.bool.BOUNDED_1'(s(bool,X251)),X250)) ) <=> ~$spl136),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl136])])).
fof(f18763,plain,(
  ( ! [X251,X249,X250,X248] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X249),s('type.list.list'('type.conSem.v'),sK54)))) | p(s(bool,X250)) | ~sP42(X248,'const.bool.BOUNDED_1'(s(bool,X251)),X250) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X249,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X248)) ) | $spl70),
  inference(superposition,[],[f1677,f17411])).
fof(f19281,plain,(
  ( ! [X246,X244,X247] : (p(s(bool,X246)) | s(bool,'T_0') = s(bool,X244) | ~sP43(X244,'const.bool.BOUNDED_1'(s(bool,X247)),X246)) ) | $spl134),
  inference(cnf_transformation,[],[f19281_D])).
fof(f19281_D,plain,(
  ( ! [X246,X244,X247] : (p(s(bool,X246)) | s(bool,'T_0') = s(bool,X244) | ~sP43(X244,'const.bool.BOUNDED_1'(s(bool,X247)),X246)) ) <=> ~$spl134),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl134])])).
fof(f18762,plain,(
  ( ! [X246,X244,X247,X245] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X245),s('type.list.list'('type.conSem.v'),sK54)))) | p(s(bool,X246)) | ~sP43(X244,'const.bool.BOUNDED_1'(s(bool,X247)),X246) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X245,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X244)) ) | $spl70),
  inference(superposition,[],[f1659,f17411])).
fof(f19280,plain,(
  ( ! [X130,X129] : (s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X130,'type.list.list'('type.conSem.v'))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X130),s('type.list.list'('type.conSem.v'),sK54)))) | s(bool,'T_0') = s(bool,X129)) ) | $spl70),
  inference(global_subsumption,[],[f530,f529,f528,f527,f531,f538,f539,f548,f547,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f668,f689,f709,f708,f707,f706,f726,f721,f720,f719,f718,f736,f731,f730,f729,f728,f739,f738,f743,f742,f747,f746,f752,f751,f758,f757,f756,f777,f772,f771,f770,f769,f784,f783,f782,f781,f801,f796,f795,f794,f793,f811,f806,f805,f804,f803,f814,f813,f818,f817,f822,f821,f827,f826,f833,f832,f831,f850,f849,f848,f847,f867,f862,f861,f860,f859,f877,f872,f871,f870,f869,f880,f879,f884,f883,f888,f887,f893,f892,f899,f898,f897,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2359,f2526,f2533,f2565,f2572,f2608,f2621,f2845,f2935,f2940,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f4202,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5689,f7303,f7383,f7384,f7553,f7558,f7561,f7565,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9603,f8248,f8253,f8256,f8260,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f895,f890,f829,f824,f754,f749,f687,f683,f666,f663,f693,f685,f681,f906,f874,f873,f866,f865,f851,f808,f807,f800,f799,f785,f733,f732,f725,f724,f710,f699,f696,f659,f657,f677,f6241,f6256,f6286,f684,f664,f688,f667,f692,f680,f670,f6240,f6247,f6273,f858,f857,f856,f855,f854,f853,f852,f792,f791,f790,f789,f788,f787,f786,f717,f716,f715,f714,f713,f712,f711,f908,f909,f907,f900,f894,f889,f885,f881,f876,f875,f864,f863,f834,f828,f823,f819,f815,f810,f809,f798,f797,f759,f753,f748,f744,f740,f735,f734,f723,f722,f701,f694,f691,f686,f682,f679,f676,f669,f665,f662,f660,f656,f674,f673,f672,f671,f702,f661,f697,f658,f901,f886,f882,f878,f835,f820,f816,f812,f760,f745,f741,f737,f905,f904,f903,f902,f896,f891,f868,f830,f825,f802,f755,f750,f727,f705,f655,f8277,f8276,f8275,f8274,f8273,f8272,f8271,f8244,f8008,f7582,f7581,f7580,f7579,f7578,f7577,f7576,f7549,f9615,f9614,f9613,f9612,f9611,f9610,f9609,f9606,f9605,f602,f601,f599,f596,f594,f593,f591,f587,f586,f698,f695,f845,f774,f773,f9622,f768,f767,f766,f765,f764,f763,f762,f761,f703,f653,f700,f690,f678,f675,f776,f775,f2938,f2941,f844,f9602,f9621,f9604,f9600,f6932,f4519,f1019,f846,f843,f842,f841,f840,f839,f838,f837,f836,f780,f779,f778,f704,f654,f7575,f8270,f3884,f3443,f3442,f2877,f2876,f2754,f2753,f2734,f2718,f2706,f2696,f2684,f2672,f2618,f2617,f2607,f2569,f2568,f2564,f2530,f2529,f2525,f2475,f2474,f2443,f2442,f1048,f552,f551,f12824,f12904,f12907,f12983,f12986,f2436,f2339,f8246,f8245,f7551,f7550,f2432,f2330,f2433,f2331,f8010,f8009,f9608,f9607,f604,f603,f16743,f16742,f16741,f17411,f18050,f18055,f18061,f19237,f19229,f18641,f18642,f18653,f18655,f18658,f18659,f18660,f18662,f18667,f18670,f18674,f19251,f19219,f19254,f19256,f18697,f19257,f18698,f19258,f18699,f18700,f18702,f18703,f18704,f18705,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18713,f18714,f18715,f18716,f19275,f18717,f19276,f18724,f19277,f18725,f19278,f18726,f19279,f18727])).
fof(f19279,plain,(
  ( ! [X125,X126] : (s(bool,'T_0') = s(bool,X125) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X126,'type.list.list'('type.conSem.v'))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X126),s('type.list.list'('type.conSem.v'),sK54))))) ) | $spl70),
  inference(global_subsumption,[],[f530,f529,f528,f527,f531,f538,f539,f548,f547,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f668,f689,f709,f708,f707,f706,f726,f721,f720,f719,f718,f736,f731,f730,f729,f728,f739,f738,f743,f742,f747,f746,f752,f751,f758,f757,f756,f777,f772,f771,f770,f769,f784,f783,f782,f781,f801,f796,f795,f794,f793,f811,f806,f805,f804,f803,f814,f813,f818,f817,f822,f821,f827,f826,f833,f832,f831,f850,f849,f848,f847,f867,f862,f861,f860,f859,f877,f872,f871,f870,f869,f880,f879,f884,f883,f888,f887,f893,f892,f899,f898,f897,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2359,f2526,f2533,f2565,f2572,f2608,f2621,f2845,f2935,f2940,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f4202,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5689,f7303,f7383,f7384,f7553,f7558,f7561,f7565,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9603,f8248,f8253,f8256,f8260,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f895,f890,f829,f824,f754,f749,f687,f683,f666,f663,f693,f685,f681,f906,f874,f873,f866,f865,f851,f808,f807,f800,f799,f785,f733,f732,f725,f724,f710,f699,f696,f659,f657,f677,f6241,f6256,f6286,f684,f664,f688,f667,f692,f680,f670,f6240,f6247,f6273,f858,f857,f856,f855,f854,f853,f852,f792,f791,f790,f789,f788,f787,f786,f717,f716,f715,f714,f713,f712,f711,f908,f909,f907,f900,f894,f889,f885,f881,f876,f875,f864,f863,f834,f828,f823,f819,f815,f810,f809,f798,f797,f759,f753,f748,f744,f740,f735,f734,f723,f722,f701,f694,f691,f686,f682,f679,f676,f669,f665,f662,f660,f656,f674,f673,f672,f671,f702,f661,f697,f658,f901,f886,f882,f878,f835,f820,f816,f812,f760,f745,f741,f737,f905,f904,f903,f902,f896,f891,f868,f830,f825,f802,f755,f750,f727,f705,f655,f8277,f8276,f8275,f8274,f8273,f8272,f8271,f8244,f8008,f7582,f7581,f7580,f7579,f7578,f7577,f7576,f7549,f9615,f9614,f9613,f9612,f9611,f9610,f9609,f9606,f9605,f602,f601,f599,f596,f594,f593,f591,f587,f586,f698,f695,f845,f774,f773,f9622,f768,f767,f766,f765,f764,f763,f762,f761,f703,f653,f700,f690,f678,f675,f776,f775,f2938,f2941,f844,f9602,f9621,f9604,f9600,f6932,f4519,f1019,f846,f843,f842,f841,f840,f839,f838,f837,f836,f780,f779,f778,f704,f654,f7575,f8270,f3884,f3443,f3442,f2877,f2876,f2754,f2753,f2734,f2718,f2706,f2696,f2684,f2672,f2618,f2617,f2607,f2569,f2568,f2564,f2530,f2529,f2525,f2475,f2474,f2443,f2442,f1048,f552,f551,f12824,f12904,f12907,f12983,f12986,f2436,f2339,f8246,f8245,f7551,f7550,f2432,f2330,f2433,f2331,f8010,f8009,f9608,f9607,f604,f603,f16743,f16742,f16741,f17411,f18050,f18055,f18061,f19237,f19229,f18641,f18642,f18653,f18655,f18658,f18659,f18660,f18662,f18667,f18670,f18674,f19251,f19219,f19254,f19256,f18697,f19257,f18698,f19258,f18699,f18700,f18702,f18703,f18704,f18705,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18713,f18714,f18715,f18716,f19275,f18717,f19276,f18724,f19277,f18725,f19278,f18726])).
fof(f19278,plain,(
  ( ! [X121,X122] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X122),s('type.list.list'('type.conSem.v'),sK54)))) | s(bool,'T_0') = s(bool,X121) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X122,'type.list.list'('type.conSem.v')))) ) | $spl70),
  inference(global_subsumption,[],[f530,f529,f528,f527,f531,f538,f539,f548,f547,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f668,f689,f709,f708,f707,f706,f726,f721,f720,f719,f718,f736,f731,f730,f729,f728,f739,f738,f743,f742,f747,f746,f752,f751,f758,f757,f756,f777,f772,f771,f770,f769,f784,f783,f782,f781,f801,f796,f795,f794,f793,f811,f806,f805,f804,f803,f814,f813,f818,f817,f822,f821,f827,f826,f833,f832,f831,f850,f849,f848,f847,f867,f862,f861,f860,f859,f877,f872,f871,f870,f869,f880,f879,f884,f883,f888,f887,f893,f892,f899,f898,f897,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2359,f2526,f2533,f2565,f2572,f2608,f2621,f2845,f2935,f2940,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f4202,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5689,f7303,f7383,f7384,f7553,f7558,f7561,f7565,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9603,f8248,f8253,f8256,f8260,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f895,f890,f829,f824,f754,f749,f687,f683,f666,f663,f693,f685,f681,f906,f874,f873,f866,f865,f851,f808,f807,f800,f799,f785,f733,f732,f725,f724,f710,f699,f696,f659,f657,f677,f6241,f6256,f6286,f684,f664,f688,f667,f692,f680,f670,f6240,f6247,f6273,f858,f857,f856,f855,f854,f853,f852,f792,f791,f790,f789,f788,f787,f786,f717,f716,f715,f714,f713,f712,f711,f908,f909,f907,f900,f894,f889,f885,f881,f876,f875,f864,f863,f834,f828,f823,f819,f815,f810,f809,f798,f797,f759,f753,f748,f744,f740,f735,f734,f723,f722,f701,f694,f691,f686,f682,f679,f676,f669,f665,f662,f660,f656,f674,f673,f672,f671,f702,f661,f697,f658,f901,f886,f882,f878,f835,f820,f816,f812,f760,f745,f741,f737,f905,f904,f903,f902,f896,f891,f868,f830,f825,f802,f755,f750,f727,f705,f655,f8277,f8276,f8275,f8274,f8273,f8272,f8271,f8244,f8008,f7582,f7581,f7580,f7579,f7578,f7577,f7576,f7549,f9615,f9614,f9613,f9612,f9611,f9610,f9609,f9606,f9605,f602,f601,f599,f596,f594,f593,f591,f587,f586,f698,f695,f845,f774,f773,f9622,f768,f767,f766,f765,f764,f763,f762,f761,f703,f653,f700,f690,f678,f675,f776,f775,f2938,f2941,f844,f9602,f9621,f9604,f9600,f6932,f4519,f1019,f846,f843,f842,f841,f840,f839,f838,f837,f836,f780,f779,f778,f704,f654,f7575,f8270,f3884,f3443,f3442,f2877,f2876,f2754,f2753,f2734,f2718,f2706,f2696,f2684,f2672,f2618,f2617,f2607,f2569,f2568,f2564,f2530,f2529,f2525,f2475,f2474,f2443,f2442,f1048,f552,f551,f12824,f12904,f12907,f12983,f12986,f2436,f2339,f8246,f8245,f7551,f7550,f2432,f2330,f2433,f2331,f8010,f8009,f9608,f9607,f604,f603,f16743,f16742,f16741,f17411,f18050,f18055,f18061,f19237,f19229,f18641,f18642,f18653,f18655,f18658,f18659,f18660,f18662,f18667,f18670,f18674,f19251,f19219,f19254,f19256,f18697,f19257,f18698,f19258,f18699,f18700,f18702,f18703,f18704,f18705,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18713,f18714,f18715,f18716,f19275,f18717,f19276,f18724,f19277,f18725])).
fof(f19277,plain,(
  ( ! [X118,X117] : (s(bool,'T_0') = s(bool,X117) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X118),s('type.list.list'('type.conSem.v'),sK54)))) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X118,'type.list.list'('type.conSem.v')))) ) | $spl70),
  inference(global_subsumption,[],[f530,f529,f528,f527,f531,f538,f539,f548,f547,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f668,f689,f709,f708,f707,f706,f726,f721,f720,f719,f718,f736,f731,f730,f729,f728,f739,f738,f743,f742,f747,f746,f752,f751,f758,f757,f756,f777,f772,f771,f770,f769,f784,f783,f782,f781,f801,f796,f795,f794,f793,f811,f806,f805,f804,f803,f814,f813,f818,f817,f822,f821,f827,f826,f833,f832,f831,f850,f849,f848,f847,f867,f862,f861,f860,f859,f877,f872,f871,f870,f869,f880,f879,f884,f883,f888,f887,f893,f892,f899,f898,f897,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2359,f2526,f2533,f2565,f2572,f2608,f2621,f2845,f2935,f2940,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f4202,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5689,f7303,f7383,f7384,f7553,f7558,f7561,f7565,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9603,f8248,f8253,f8256,f8260,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f895,f890,f829,f824,f754,f749,f687,f683,f666,f663,f693,f685,f681,f906,f874,f873,f866,f865,f851,f808,f807,f800,f799,f785,f733,f732,f725,f724,f710,f699,f696,f659,f657,f677,f6241,f6256,f6286,f684,f664,f688,f667,f692,f680,f670,f6240,f6247,f6273,f858,f857,f856,f855,f854,f853,f852,f792,f791,f790,f789,f788,f787,f786,f717,f716,f715,f714,f713,f712,f711,f908,f909,f907,f900,f894,f889,f885,f881,f876,f875,f864,f863,f834,f828,f823,f819,f815,f810,f809,f798,f797,f759,f753,f748,f744,f740,f735,f734,f723,f722,f701,f694,f691,f686,f682,f679,f676,f669,f665,f662,f660,f656,f674,f673,f672,f671,f702,f661,f697,f658,f901,f886,f882,f878,f835,f820,f816,f812,f760,f745,f741,f737,f905,f904,f903,f902,f896,f891,f868,f830,f825,f802,f755,f750,f727,f705,f655,f8277,f8276,f8275,f8274,f8273,f8272,f8271,f8244,f8008,f7582,f7581,f7580,f7579,f7578,f7577,f7576,f7549,f9615,f9614,f9613,f9612,f9611,f9610,f9609,f9606,f9605,f602,f601,f599,f596,f594,f593,f591,f587,f586,f698,f695,f845,f774,f773,f9622,f768,f767,f766,f765,f764,f763,f762,f761,f703,f653,f700,f690,f678,f675,f776,f775,f2938,f2941,f844,f9602,f9621,f9604,f9600,f6932,f4519,f1019,f846,f843,f842,f841,f840,f839,f838,f837,f836,f780,f779,f778,f704,f654,f7575,f8270,f3884,f3443,f3442,f2877,f2876,f2754,f2753,f2734,f2718,f2706,f2696,f2684,f2672,f2618,f2617,f2607,f2569,f2568,f2564,f2530,f2529,f2525,f2475,f2474,f2443,f2442,f1048,f552,f551,f12824,f12904,f12907,f12983,f12986,f2436,f2339,f8246,f8245,f7551,f7550,f2432,f2330,f2433,f2331,f8010,f8009,f9608,f9607,f604,f603,f16743,f16742,f16741,f17411,f18050,f18055,f18061,f19237,f19229,f18641,f18642,f18653,f18655,f18658,f18659,f18660,f18662,f18667,f18670,f18674,f19251,f19219,f19254,f19256,f18697,f19257,f18698,f19258,f18699,f18700,f18702,f18703,f18704,f18705,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18713,f18714,f18715,f18716,f19275,f18717,f19276,f18724])).
fof(f19276,plain,(
  ( ! [X97,X98] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X98),s('type.list.list'('type.conSem.v'),sK54)))) | s(bool,'T_0') = s(bool,X97) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X98,'type.list.list'('type.conSem.v')))) ) | $spl70),
  inference(global_subsumption,[],[f530,f529,f528,f527,f531,f538,f539,f548,f547,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f668,f689,f709,f708,f707,f706,f726,f721,f720,f719,f718,f736,f731,f730,f729,f728,f739,f738,f743,f742,f747,f746,f752,f751,f758,f757,f756,f777,f772,f771,f770,f769,f784,f783,f782,f781,f801,f796,f795,f794,f793,f811,f806,f805,f804,f803,f814,f813,f818,f817,f822,f821,f827,f826,f833,f832,f831,f850,f849,f848,f847,f867,f862,f861,f860,f859,f877,f872,f871,f870,f869,f880,f879,f884,f883,f888,f887,f893,f892,f899,f898,f897,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2359,f2526,f2533,f2565,f2572,f2608,f2621,f2845,f2935,f2940,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f4202,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5689,f7303,f7383,f7384,f7553,f7558,f7561,f7565,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9603,f8248,f8253,f8256,f8260,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f895,f890,f829,f824,f754,f749,f687,f683,f666,f663,f693,f685,f681,f906,f874,f873,f866,f865,f851,f808,f807,f800,f799,f785,f733,f732,f725,f724,f710,f699,f696,f659,f657,f677,f6241,f6256,f6286,f684,f664,f688,f667,f692,f680,f670,f6240,f6247,f6273,f858,f857,f856,f855,f854,f853,f852,f792,f791,f790,f789,f788,f787,f786,f717,f716,f715,f714,f713,f712,f711,f908,f909,f907,f900,f894,f889,f885,f881,f876,f875,f864,f863,f834,f828,f823,f819,f815,f810,f809,f798,f797,f759,f753,f748,f744,f740,f735,f734,f723,f722,f701,f694,f691,f686,f682,f679,f676,f669,f665,f662,f660,f656,f674,f673,f672,f671,f702,f661,f697,f658,f901,f886,f882,f878,f835,f820,f816,f812,f760,f745,f741,f737,f905,f904,f903,f902,f896,f891,f868,f830,f825,f802,f755,f750,f727,f705,f655,f8277,f8276,f8275,f8274,f8273,f8272,f8271,f8244,f8008,f7582,f7581,f7580,f7579,f7578,f7577,f7576,f7549,f9615,f9614,f9613,f9612,f9611,f9610,f9609,f9606,f9605,f602,f601,f599,f596,f594,f593,f591,f587,f586,f698,f695,f845,f774,f773,f9622,f768,f767,f766,f765,f764,f763,f762,f761,f703,f653,f700,f690,f678,f675,f776,f775,f2938,f2941,f844,f9602,f9621,f9604,f9600,f6932,f4519,f1019,f846,f843,f842,f841,f840,f839,f838,f837,f836,f780,f779,f778,f704,f654,f7575,f8270,f3884,f3443,f3442,f2877,f2876,f2754,f2753,f2734,f2718,f2706,f2696,f2684,f2672,f2618,f2617,f2607,f2569,f2568,f2564,f2530,f2529,f2525,f2475,f2474,f2443,f2442,f1048,f552,f551,f12824,f12904,f12907,f12983,f12986,f2436,f2339,f8246,f8245,f7551,f7550,f2432,f2330,f2433,f2331,f8010,f8009,f9608,f9607,f604,f603,f16743,f16742,f16741,f17411,f18050,f18055,f18061,f19237,f19229,f18641,f18642,f18653,f18655,f18658,f18659,f18660,f18662,f18667,f18670,f18674,f19251,f19219,f19254,f19256,f18697,f19257,f18698,f19258,f18699,f18700,f18702,f18703,f18704,f18705,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18713,f18714,f18715,f18716,f19275,f18717])).
fof(f19275,plain,(
  ( ! [X94,X93] : (s(bool,'T_0') = s(bool,X93) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X94,'type.list.list'('type.conSem.v'))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X94),s('type.list.list'('type.conSem.v'),sK54))))) ) | $spl70),
  inference(global_subsumption,[],[f530,f529,f528,f527,f531,f538,f539,f548,f547,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f668,f689,f709,f708,f707,f706,f726,f721,f720,f719,f718,f736,f731,f730,f729,f728,f739,f738,f743,f742,f747,f746,f752,f751,f758,f757,f756,f777,f772,f771,f770,f769,f784,f783,f782,f781,f801,f796,f795,f794,f793,f811,f806,f805,f804,f803,f814,f813,f818,f817,f822,f821,f827,f826,f833,f832,f831,f850,f849,f848,f847,f867,f862,f861,f860,f859,f877,f872,f871,f870,f869,f880,f879,f884,f883,f888,f887,f893,f892,f899,f898,f897,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2359,f2526,f2533,f2565,f2572,f2608,f2621,f2845,f2935,f2940,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f4202,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5689,f7303,f7383,f7384,f7553,f7558,f7561,f7565,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9603,f8248,f8253,f8256,f8260,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f895,f890,f829,f824,f754,f749,f687,f683,f666,f663,f693,f685,f681,f906,f874,f873,f866,f865,f851,f808,f807,f800,f799,f785,f733,f732,f725,f724,f710,f699,f696,f659,f657,f677,f6241,f6256,f6286,f684,f664,f688,f667,f692,f680,f670,f6240,f6247,f6273,f858,f857,f856,f855,f854,f853,f852,f792,f791,f790,f789,f788,f787,f786,f717,f716,f715,f714,f713,f712,f711,f908,f909,f907,f900,f894,f889,f885,f881,f876,f875,f864,f863,f834,f828,f823,f819,f815,f810,f809,f798,f797,f759,f753,f748,f744,f740,f735,f734,f723,f722,f701,f694,f691,f686,f682,f679,f676,f669,f665,f662,f660,f656,f674,f673,f672,f671,f702,f661,f697,f658,f901,f886,f882,f878,f835,f820,f816,f812,f760,f745,f741,f737,f905,f904,f903,f902,f896,f891,f868,f830,f825,f802,f755,f750,f727,f705,f655,f8277,f8276,f8275,f8274,f8273,f8272,f8271,f8244,f8008,f7582,f7581,f7580,f7579,f7578,f7577,f7576,f7549,f9615,f9614,f9613,f9612,f9611,f9610,f9609,f9606,f9605,f602,f601,f599,f596,f594,f593,f591,f587,f586,f698,f695,f845,f774,f773,f9622,f768,f767,f766,f765,f764,f763,f762,f761,f703,f653,f700,f690,f678,f675,f776,f775,f2938,f2941,f844,f9602,f9621,f9604,f9600,f6932,f4519,f1019,f846,f843,f842,f841,f840,f839,f838,f837,f836,f780,f779,f778,f704,f654,f7575,f8270,f3884,f3443,f3442,f2877,f2876,f2754,f2753,f2734,f2718,f2706,f2696,f2684,f2672,f2618,f2617,f2607,f2569,f2568,f2564,f2530,f2529,f2525,f2475,f2474,f2443,f2442,f1048,f552,f551,f12824,f12904,f12907,f12983,f12986,f2436,f2339,f8246,f8245,f7551,f7550,f2432,f2330,f2433,f2331,f8010,f8009,f9608,f9607,f604,f603,f16743,f16742,f16741,f17411,f18050,f18055,f18061,f19237,f19229,f18641,f18642,f18653,f18655,f18658,f18659,f18660,f18662,f18667,f18670,f18674,f19251,f19219,f19254,f19256,f18697,f19257,f18698,f19258,f18699,f18700,f18702,f18703,f18704,f18705,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18713,f18714,f18715,f18716])).
fof(f19274,plain,(
  ( ! [X92,X91,X89] : (~p(s(bool,X91)) | s(bool,'T_0') = s(bool,X89) | ~sP50(X89,X92,X91) | p(s(bool,X92))) ) | $spl132),
  inference(cnf_transformation,[],[f19274_D])).
fof(f19274_D,plain,(
  ( ! [X92,X91,X89] : (~p(s(bool,X91)) | s(bool,'T_0') = s(bool,X89) | ~sP50(X89,X92,X91) | p(s(bool,X92))) ) <=> ~$spl132),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl132])])).
fof(f18715,plain,(
  ( ! [X92,X90,X91,X89] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X90),s('type.list.list'('type.conSem.v'),sK54)))) | ~p(s(bool,X91)) | p(s(bool,X92)) | ~sP50(X89,X92,X91) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X90,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X89)) ) | $spl70),
  inference(superposition,[],[f997,f17411])).
fof(f19273,plain,(
  ( ! [X88,X87,X85] : (~p(s(bool,X87)) | s(bool,'T_0') = s(bool,X85) | sP50(X85,X87,X88)) ) | $spl130),
  inference(cnf_transformation,[],[f19273_D])).
fof(f19273_D,plain,(
  ( ! [X88,X87,X85] : (~p(s(bool,X87)) | s(bool,'T_0') = s(bool,X85) | sP50(X85,X87,X88)) ) <=> ~$spl130),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl130])])).
fof(f18714,plain,(
  ( ! [X88,X87,X85,X86] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X86),s('type.list.list'('type.conSem.v'),sK54)))) | ~p(s(bool,X87)) | sP50(X85,X87,X88) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X86,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X85)) ) | $spl70),
  inference(superposition,[],[f996,f17411])).
fof(f19272,plain,(
  ( ! [X83,X81,X84] : (p(s(bool,X83)) | s(bool,'T_0') = s(bool,X81) | sP50(X81,X84,X83)) ) | $spl128),
  inference(cnf_transformation,[],[f19272_D])).
fof(f19272_D,plain,(
  ( ! [X83,X81,X84] : (p(s(bool,X83)) | s(bool,'T_0') = s(bool,X81) | sP50(X81,X84,X83)) ) <=> ~$spl128),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl128])])).
fof(f18713,plain,(
  ( ! [X83,X81,X84,X82] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X82),s('type.list.list'('type.conSem.v'),sK54)))) | p(s(bool,X83)) | sP50(X81,X84,X83) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X82,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X81)) ) | $spl70),
  inference(superposition,[],[f995,f17411])).
fof(f19271,plain,(
  ( ! [X80,X79,X77] : (p(s(bool,X79)) | s(bool,'T_0') = s(bool,X77) | ~sP49(X80,X79,X77) | ~p(s(bool,X80))) ) | $spl126),
  inference(cnf_transformation,[],[f19271_D])).
fof(f19271_D,plain,(
  ( ! [X80,X79,X77] : (p(s(bool,X79)) | s(bool,'T_0') = s(bool,X77) | ~sP49(X80,X79,X77) | ~p(s(bool,X80))) ) <=> ~$spl126),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl126])])).
fof(f18712,plain,(
  ( ! [X80,X78,X79,X77] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X78),s('type.list.list'('type.conSem.v'),sK54)))) | p(s(bool,X79)) | ~p(s(bool,X80)) | ~sP49(X80,X79,X77) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X78,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X77)) ) | $spl70),
  inference(superposition,[],[f990,f17411])).
fof(f19270,plain,(
  ( ! [X76,X75,X73] : (p(s(bool,X75)) | s(bool,'T_0') = s(bool,X73) | ~sP48(X73,X76,X75) | p(s(bool,X76))) ) | $spl124),
  inference(cnf_transformation,[],[f19270_D])).
fof(f19270_D,plain,(
  ( ! [X76,X75,X73] : (p(s(bool,X75)) | s(bool,'T_0') = s(bool,X73) | ~sP48(X73,X76,X75) | p(s(bool,X76))) ) <=> ~$spl124),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl124])])).
fof(f18711,plain,(
  ( ! [X76,X74,X75,X73] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X74),s('type.list.list'('type.conSem.v'),sK54)))) | p(s(bool,X75)) | p(s(bool,X76)) | ~sP48(X73,X76,X75) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X74,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X73)) ) | $spl70),
  inference(superposition,[],[f980,f17411])).
fof(f19269,plain,(
  ( ! [X72,X71,X69] : (~p(s(bool,X71)) | s(bool,'T_0') = s(bool,X69) | sP48(X69,X71,X72)) ) | $spl122),
  inference(cnf_transformation,[],[f19269_D])).
fof(f19269_D,plain,(
  ( ! [X72,X71,X69] : (~p(s(bool,X71)) | s(bool,'T_0') = s(bool,X69) | sP48(X69,X71,X72)) ) <=> ~$spl122),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl122])])).
fof(f18710,plain,(
  ( ! [X70,X72,X71,X69] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X70),s('type.list.list'('type.conSem.v'),sK54)))) | ~p(s(bool,X71)) | sP48(X69,X71,X72) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X70,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X69)) ) | $spl70),
  inference(superposition,[],[f979,f17411])).
fof(f19268,plain,(
  ( ! [X68,X67,X65] : (~p(s(bool,X67)) | s(bool,'T_0') = s(bool,X65) | sP48(X65,X68,X67)) ) | $spl120),
  inference(cnf_transformation,[],[f19268_D])).
fof(f19268_D,plain,(
  ( ! [X68,X67,X65] : (~p(s(bool,X67)) | s(bool,'T_0') = s(bool,X65) | sP48(X65,X68,X67)) ) <=> ~$spl120),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl120])])).
fof(f18709,plain,(
  ( ! [X68,X66,X67,X65] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X66),s('type.list.list'('type.conSem.v'),sK54)))) | ~p(s(bool,X67)) | sP48(X65,X68,X67) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X66,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X65)) ) | $spl70),
  inference(superposition,[],[f978,f17411])).
fof(f19267,plain,(
  ( ! [X61,X64,X63] : (p(s(bool,X63)) | s(bool,'T_0') = s(bool,X61) | ~sP47(X61,X63,X64) | p(s(bool,X64))) ) | $spl118),
  inference(cnf_transformation,[],[f19267_D])).
fof(f19267_D,plain,(
  ( ! [X61,X64,X63] : (p(s(bool,X63)) | s(bool,'T_0') = s(bool,X61) | ~sP47(X61,X63,X64) | p(s(bool,X64))) ) <=> ~$spl118),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl118])])).
fof(f18708,plain,(
  ( ! [X61,X64,X62,X63] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X62),s('type.list.list'('type.conSem.v'),sK54)))) | p(s(bool,X63)) | p(s(bool,X64)) | ~sP47(X61,X63,X64) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X62,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X61)) ) | $spl70),
  inference(superposition,[],[f973,f17411])).
fof(f19266,plain,(
  ( ! [X59,X57,X60] : (~p(s(bool,X59)) | s(bool,'T_0') = s(bool,X57) | ~sP46(X60,X59,X57) | p(s(bool,X60))) ) | $spl116),
  inference(cnf_transformation,[],[f19266_D])).
fof(f19266_D,plain,(
  ( ! [X59,X57,X60] : (~p(s(bool,X59)) | s(bool,'T_0') = s(bool,X57) | ~sP46(X60,X59,X57) | p(s(bool,X60))) ) <=> ~$spl116),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl116])])).
fof(f18707,plain,(
  ( ! [X59,X57,X60,X58] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X58),s('type.list.list'('type.conSem.v'),sK54)))) | ~p(s(bool,X59)) | p(s(bool,X60)) | ~sP46(X60,X59,X57) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X58,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X57)) ) | $spl70),
  inference(superposition,[],[f965,f17411])).
fof(f19265,plain,(
  ( ! [X56,X55,X53] : (~p(s(bool,X55)) | s(bool,'T_0') = s(bool,X53) | ~sP45(X55,X53,X56) | p(s(bool,X56))) ) | $spl114),
  inference(cnf_transformation,[],[f19265_D])).
fof(f19265_D,plain,(
  ( ! [X56,X55,X53] : (~p(s(bool,X55)) | s(bool,'T_0') = s(bool,X53) | ~sP45(X55,X53,X56) | p(s(bool,X56))) ) <=> ~$spl114),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl114])])).
fof(f18706,plain,(
  ( ! [X54,X56,X55,X53] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X54),s('type.list.list'('type.conSem.v'),sK54)))) | ~p(s(bool,X55)) | p(s(bool,X56)) | ~sP45(X55,X53,X56) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X54,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X53)) ) | $spl70),
  inference(superposition,[],[f956,f17411])).
fof(f19264,plain,(
  ( ! [X52,X51,X49] : (~p(s(bool,X51)) | s(bool,'T_0') = s(bool,X49) | ~sP42(X51,X49,X52) | p(s(bool,X52))) ) | $spl112),
  inference(cnf_transformation,[],[f19264_D])).
fof(f19264_D,plain,(
  ( ! [X52,X51,X49] : (~p(s(bool,X51)) | s(bool,'T_0') = s(bool,X49) | ~sP42(X51,X49,X52) | p(s(bool,X52))) ) <=> ~$spl112),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl112])])).
fof(f18705,plain,(
  ( ! [X52,X50,X51,X49] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X50),s('type.list.list'('type.conSem.v'),sK54)))) | ~p(s(bool,X51)) | p(s(bool,X52)) | ~sP42(X51,X49,X52) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X50,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X49)) ) | $spl70),
  inference(superposition,[],[f937,f17411])).
fof(f19263,plain,(
  ( ! [X47,X45,X48] : (~p(s(bool,X47)) | s(bool,'T_0') = s(bool,X45) | ~sP43(X47,X45,X48) | p(s(bool,X48))) ) | $spl110),
  inference(cnf_transformation,[],[f19263_D])).
fof(f19263_D,plain,(
  ( ! [X47,X45,X48] : (~p(s(bool,X47)) | s(bool,'T_0') = s(bool,X45) | ~sP43(X47,X45,X48) | p(s(bool,X48))) ) <=> ~$spl110),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl110])])).
fof(f18704,plain,(
  ( ! [X47,X45,X48,X46] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X46),s('type.list.list'('type.conSem.v'),sK54)))) | ~p(s(bool,X47)) | p(s(bool,X48)) | ~sP43(X47,X45,X48) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X46,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X45)) ) | $spl70),
  inference(superposition,[],[f933,f17411])).
fof(f19262,plain,(
  ( ! [X43,X41,X44] : (~p(s(bool,X43)) | s(bool,'T_0') = s(bool,X41) | sP40(X43,X44,X41)) ) | $spl108),
  inference(cnf_transformation,[],[f19262_D])).
fof(f19262_D,plain,(
  ( ! [X43,X41,X44] : (~p(s(bool,X43)) | s(bool,'T_0') = s(bool,X41) | sP40(X43,X44,X41)) ) <=> ~$spl108),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl108])])).
fof(f18703,plain,(
  ( ! [X43,X41,X44,X42] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X42),s('type.list.list'('type.conSem.v'),sK54)))) | ~p(s(bool,X43)) | sP40(X43,X44,X41) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X42,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X41)) ) | $spl70),
  inference(superposition,[],[f921,f17411])).
fof(f19261,plain,(
  ( ! [X39,X37,X40] : (~p(s(bool,X39)) | s(bool,'T_0') = s(bool,X37) | sP40(X39,X37,X40)) ) | $spl106),
  inference(cnf_transformation,[],[f19261_D])).
fof(f19261_D,plain,(
  ( ! [X39,X37,X40] : (~p(s(bool,X39)) | s(bool,'T_0') = s(bool,X37) | sP40(X39,X37,X40)) ) <=> ~$spl106),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl106])])).
fof(f18702,plain,(
  ( ! [X39,X37,X38,X40] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X38),s('type.list.list'('type.conSem.v'),sK54)))) | ~p(s(bool,X39)) | sP40(X39,X37,X40) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X38,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X37)) ) | $spl70),
  inference(superposition,[],[f920,f17411])).
fof(f19260,plain,(
  ( ! [X30,X32] : (p(s(bool,X32)) | s(bool,'T_0') = s(bool,X30) | sP1(X32,X30)) ) | $spl104),
  inference(cnf_transformation,[],[f19260_D])).
fof(f19260_D,plain,(
  ( ! [X30,X32] : (p(s(bool,X32)) | s(bool,'T_0') = s(bool,X30) | sP1(X32,X30)) ) <=> ~$spl104),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl104])])).
fof(f18700,plain,(
  ( ! [X30,X31,X32] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X31),s('type.list.list'('type.conSem.v'),sK54)))) | p(s(bool,X32)) | sP1(X32,X30) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X31,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X30)) ) | $spl70),
  inference(superposition,[],[f643,f17411])).
fof(f19259,plain,(
  ( ! [X29,X27] : (p(s(bool,X29)) | s(bool,'T_0') = s(bool,X27) | sP1(X27,X29)) ) | $spl102),
  inference(cnf_transformation,[],[f19259_D])).
fof(f19259_D,plain,(
  ( ! [X29,X27] : (p(s(bool,X29)) | s(bool,'T_0') = s(bool,X27) | sP1(X27,X29)) ) <=> ~$spl102),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl102])])).
fof(f18699,plain,(
  ( ! [X28,X29,X27] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X28),s('type.list.list'('type.conSem.v'),sK54)))) | p(s(bool,X29)) | sP1(X27,X29) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X28,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X27)) ) | $spl70),
  inference(superposition,[],[f640,f17411])).
fof(f19258,plain,(
  ( ! [X24,X25] : (s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X25,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X24) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X25),s('type.list.list'('type.conSem.v'),sK54))))) ) | $spl70),
  inference(global_subsumption,[],[f530,f529,f528,f527,f531,f538,f539,f548,f547,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f668,f689,f709,f708,f707,f706,f726,f721,f720,f719,f718,f736,f731,f730,f729,f728,f739,f738,f743,f742,f747,f746,f752,f751,f758,f757,f756,f777,f772,f771,f770,f769,f784,f783,f782,f781,f801,f796,f795,f794,f793,f811,f806,f805,f804,f803,f814,f813,f818,f817,f822,f821,f827,f826,f833,f832,f831,f850,f849,f848,f847,f867,f862,f861,f860,f859,f877,f872,f871,f870,f869,f880,f879,f884,f883,f888,f887,f893,f892,f899,f898,f897,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2359,f2526,f2533,f2565,f2572,f2608,f2621,f2845,f2935,f2940,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f4202,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5689,f7303,f7383,f7384,f7553,f7558,f7561,f7565,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9603,f8248,f8253,f8256,f8260,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f895,f890,f829,f824,f754,f749,f687,f683,f666,f663,f693,f685,f681,f906,f874,f873,f866,f865,f851,f808,f807,f800,f799,f785,f733,f732,f725,f724,f710,f699,f696,f659,f657,f677,f6241,f6256,f6286,f684,f664,f688,f667,f692,f680,f670,f6240,f6247,f6273,f858,f857,f856,f855,f854,f853,f852,f792,f791,f790,f789,f788,f787,f786,f717,f716,f715,f714,f713,f712,f711,f908,f909,f907,f900,f894,f889,f885,f881,f876,f875,f864,f863,f834,f828,f823,f819,f815,f810,f809,f798,f797,f759,f753,f748,f744,f740,f735,f734,f723,f722,f701,f694,f691,f686,f682,f679,f676,f669,f665,f662,f660,f656,f674,f673,f672,f671,f702,f661,f697,f658,f901,f886,f882,f878,f835,f820,f816,f812,f760,f745,f741,f737,f905,f904,f903,f902,f896,f891,f868,f830,f825,f802,f755,f750,f727,f705,f655,f8277,f8276,f8275,f8274,f8273,f8272,f8271,f8244,f8008,f7582,f7581,f7580,f7579,f7578,f7577,f7576,f7549,f9615,f9614,f9613,f9612,f9611,f9610,f9609,f9606,f9605,f602,f601,f599,f596,f594,f593,f591,f587,f586,f698,f695,f845,f774,f773,f9622,f768,f767,f766,f765,f764,f763,f762,f761,f703,f653,f700,f690,f678,f675,f776,f775,f2938,f2941,f844,f9602,f9621,f9604,f9600,f6932,f4519,f1019,f846,f843,f842,f841,f840,f839,f838,f837,f836,f780,f779,f778,f704,f654,f7575,f8270,f3884,f3443,f3442,f2877,f2876,f2754,f2753,f2734,f2718,f2706,f2696,f2684,f2672,f2618,f2617,f2607,f2569,f2568,f2564,f2530,f2529,f2525,f2475,f2474,f2443,f2442,f1048,f552,f551,f12824,f12904,f12907,f12983,f12986,f2436,f2339,f8246,f8245,f7551,f7550,f2432,f2330,f2433,f2331,f8010,f8009,f9608,f9607,f604,f603,f16743,f16742,f16741,f17411,f18050,f18055,f18061,f19237,f19229,f18641,f18642,f18653,f18655,f18658,f18659,f18660,f18662,f18667,f18670,f18674,f19251,f19219,f19254,f19256,f18697,f19257,f18698])).
fof(f19257,plain,(
  ( ! [X21,X22] : (s(bool,'T_0') = s(bool,X21) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X22),s('type.list.list'('type.conSem.v'),sK54)))) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X22,'type.list.list'('type.conSem.v')))) ) | $spl70),
  inference(global_subsumption,[],[f530,f529,f528,f527,f531,f538,f539,f548,f547,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f668,f689,f709,f708,f707,f706,f726,f721,f720,f719,f718,f736,f731,f730,f729,f728,f739,f738,f743,f742,f747,f746,f752,f751,f758,f757,f756,f777,f772,f771,f770,f769,f784,f783,f782,f781,f801,f796,f795,f794,f793,f811,f806,f805,f804,f803,f814,f813,f818,f817,f822,f821,f827,f826,f833,f832,f831,f850,f849,f848,f847,f867,f862,f861,f860,f859,f877,f872,f871,f870,f869,f880,f879,f884,f883,f888,f887,f893,f892,f899,f898,f897,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2359,f2526,f2533,f2565,f2572,f2608,f2621,f2845,f2935,f2940,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f4202,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5689,f7303,f7383,f7384,f7553,f7558,f7561,f7565,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9603,f8248,f8253,f8256,f8260,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f895,f890,f829,f824,f754,f749,f687,f683,f666,f663,f693,f685,f681,f906,f874,f873,f866,f865,f851,f808,f807,f800,f799,f785,f733,f732,f725,f724,f710,f699,f696,f659,f657,f677,f6241,f6256,f6286,f684,f664,f688,f667,f692,f680,f670,f6240,f6247,f6273,f858,f857,f856,f855,f854,f853,f852,f792,f791,f790,f789,f788,f787,f786,f717,f716,f715,f714,f713,f712,f711,f908,f909,f907,f900,f894,f889,f885,f881,f876,f875,f864,f863,f834,f828,f823,f819,f815,f810,f809,f798,f797,f759,f753,f748,f744,f740,f735,f734,f723,f722,f701,f694,f691,f686,f682,f679,f676,f669,f665,f662,f660,f656,f674,f673,f672,f671,f702,f661,f697,f658,f901,f886,f882,f878,f835,f820,f816,f812,f760,f745,f741,f737,f905,f904,f903,f902,f896,f891,f868,f830,f825,f802,f755,f750,f727,f705,f655,f8277,f8276,f8275,f8274,f8273,f8272,f8271,f8244,f8008,f7582,f7581,f7580,f7579,f7578,f7577,f7576,f7549,f9615,f9614,f9613,f9612,f9611,f9610,f9609,f9606,f9605,f602,f601,f599,f596,f594,f593,f591,f587,f586,f698,f695,f845,f774,f773,f9622,f768,f767,f766,f765,f764,f763,f762,f761,f703,f653,f700,f690,f678,f675,f776,f775,f2938,f2941,f844,f9602,f9621,f9604,f9600,f6932,f4519,f1019,f846,f843,f842,f841,f840,f839,f838,f837,f836,f780,f779,f778,f704,f654,f7575,f8270,f3884,f3443,f3442,f2877,f2876,f2754,f2753,f2734,f2718,f2706,f2696,f2684,f2672,f2618,f2617,f2607,f2569,f2568,f2564,f2530,f2529,f2525,f2475,f2474,f2443,f2442,f1048,f552,f551,f12824,f12904,f12907,f12983,f12986,f2436,f2339,f8246,f8245,f7551,f7550,f2432,f2330,f2433,f2331,f8010,f8009,f9608,f9607,f604,f603,f16743,f16742,f16741,f17411,f18050,f18055,f18061,f19237,f19229,f18641,f18642,f18653,f18655,f18658,f18659,f18660,f18662,f18667,f18670,f18674,f19251,f19219,f19254,f19256,f18697])).
fof(f19256,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X1),s('type.list.list'('type.conSem.v'),sK54)))) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X1,'type.list.list'('type.conSem.v')))) ) | $spl70),
  inference(condensation,[],[f19255])).
fof(f19255,plain,(
  ( ! [X19,X20,X18] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X19),s('type.list.list'('type.conSem.v'),sK54)))) | s(bool,X18) = s(bool,X20) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X19,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X18)) ) | $spl70),
  inference(subsumption_resolution,[],[f18696,f1535])).
fof(f18696,plain,(
  ( ! [X19,X20,X18] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X19),s('type.list.list'('type.conSem.v'),sK54)))) | ~p(s(bool,X20)) | s(bool,X18) = s(bool,X20) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X19,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X18)) ) | $spl70),
  inference(superposition,[],[f612,f17411])).
fof(f19254,plain,(
  ( ! [X8,X9] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X9),s('type.list.list'('type.conSem.v'),sK54)))) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X9,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X8)) ) | $spl70),
  inference(subsumption_resolution,[],[f18692,f539])).
fof(f18692,plain,(
  ( ! [X8,X9] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X9),s('type.list.list'('type.conSem.v'),sK54)))) | s(bool,'F_0') != s(bool,X8) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X9,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X8)) ) | $spl70),
  inference(superposition,[],[f551,f17411])).
fof(f19219,plain,(
  ( ! [X6,X7] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X7),s('type.list.list'('type.conSem.v'),sK54)))) | s(bool,'T_0') = s(bool,X6) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X7,'type.list.list'('type.conSem.v')))) ) | $spl70),
  inference(duplicate_literal_removal,[],[f18691])).
fof(f18691,plain,(
  ( ! [X6,X7] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X7),s('type.list.list'('type.conSem.v'),sK54)))) | s(bool,'T_0') = s(bool,X6) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X7,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X6)) ) | $spl70),
  inference(superposition,[],[f548,f17411])).
fof(f19252,plain,(
  ( ! [X5] : (s(bool,'T_0') != s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X5),s('type.list.list'('type.conSem.v'),sK54))) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X5,'type.list.list'('type.conSem.v')))) ) | $spl98),
  inference(cnf_transformation,[],[f19252_D])).
fof(f19252_D,plain,(
  ( ! [X5] : (s(bool,'T_0') != s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X5),s('type.list.list'('type.conSem.v'),sK54))) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X5,'type.list.list'('type.conSem.v')))) ) <=> ~$spl98),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl98])])).
fof(f19251,plain,(
  ( ! [X4,X5] : (s(bool,'T_0') != s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X5),s('type.list.list'('type.conSem.v'),sK54))) | p(s(bool,X4)) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X5,'type.list.list'('type.conSem.v')))) ) | $spl70),
  inference(subsumption_resolution,[],[f18690,f547])).
fof(f18690,plain,(
  ( ! [X4,X5] : (s(bool,'T_0') != s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X5),s('type.list.list'('type.conSem.v'),sK54))) | p(s(bool,X4)) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X5,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X4)) ) | $spl70),
  inference(superposition,[],[f547,f17411])).
fof(f19243,plain,(
  s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK56) | $spl92),
  inference(cnf_transformation,[],[f19243_D])).
fof(f19243_D,plain,(
  s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK56) <=> ~$spl92),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl92])])).
fof(f19241,plain,(
  ( ! [X2,X1] : (s(bool,X2) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X1),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X2)) ) | $spl90),
  inference(cnf_transformation,[],[f19241_D])).
fof(f19241_D,plain,(
  ( ! [X2,X1] : (s(bool,X2) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X1),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X2)) ) <=> ~$spl90),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl90])])).
fof(f19223,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X1),s('type.list.list'('type.conSem.v'),sK54))) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK56) | s(bool,'T_0') = s(bool,X0)) ) | ($spl4 | $spl70)),
  inference(duplicate_literal_removal,[],[f19222])).
fof(f19222,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X1),s('type.list.list'('type.conSem.v'),sK54))) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK56) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | ($spl4 | $spl70)),
  inference(condensation,[],[f18640])).
fof(f18640,plain,(
  ( ! [X4,X2,X3] : (s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK56) | s(bool,X3) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X2),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X3) | s(bool,X4) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X2),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X4)) ) | ($spl4 | $spl70)),
  inference(superposition,[],[f9620,f17411])).
fof(f19249,plain,(
  ( ! [X0,X1] : (s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK56) | s(bool,X1) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X0),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X1)) ) | ($spl1 | $spl4 | $spl70)),
  inference(subsumption_resolution,[],[f18639,f9567])).
fof(f18639,plain,(
  ( ! [X0,X1] : (s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK56) | s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X0),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,X1) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X0),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X1)) ) | ($spl1 | $spl4 | $spl70)),
  inference(superposition,[],[f17409,f17411])).
fof(f17409,plain,(
  ( ! [X29] : (s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X29,'type.list.list'('type.conSem.v'))) | s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X29),s('type.list.list'('type.conSem.v'),sK54)))) ) | ($spl1 | $spl4)),
  inference(subsumption_resolution,[],[f16825,f1415])).
fof(f16825,plain,(
  ( ! [X29] : (s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X29),s('type.list.list'('type.conSem.v'),sK54))) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X29,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) ) | ($spl1 | $spl4)),
  inference(superposition,[],[f9620,f1416])).
fof(f1416,plain,(
  s(bool,'F_0') = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54))) | $spl1),
  inference(unit_resulting_resolution,[],[f1040,f552])).
fof(f19247,plain,(
  ( ! [X24,X23] : (s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X23),s('type.list.list'('type.conSem.v'),sK54))) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X24),s('type.list.list'('type.conSem.v'),sK54))) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X23,'type.list.list'('type.conSem.v'))) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X24,'type.list.list'('type.conSem.v')))) ) | $spl96),
  inference(cnf_transformation,[],[f19247_D])).
fof(f19247_D,plain,(
  ( ! [X24,X23] : (s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X23),s('type.list.list'('type.conSem.v'),sK54))) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X24),s('type.list.list'('type.conSem.v'),sK54))) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X23,'type.list.list'('type.conSem.v'))) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X24,'type.list.list'('type.conSem.v')))) ) <=> ~$spl96),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl96])])).
fof(f19229,plain,(
  ( ! [X24,X23,X22] : (s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X23),s('type.list.list'('type.conSem.v'),sK54))) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X24),s('type.list.list'('type.conSem.v'),sK54))) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X24,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X22) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X23,'type.list.list'('type.conSem.v')))) ) | $spl70),
  inference(duplicate_literal_removal,[],[f18618])).
fof(f18618,plain,(
  ( ! [X24,X23,X22] : (s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X23),s('type.list.list'('type.conSem.v'),sK54))) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X24),s('type.list.list'('type.conSem.v'),sK54))) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X24,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X22) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X23,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X22)) ) | $spl70),
  inference(superposition,[],[f17411,f17411])).
fof(f19230,plain,(
  ( ! [X21,X19,X20] : (s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X20),s('type.list.list'('type.conSem.v'),sK54))) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X21),s('type.list.list'('type.conSem.v'),sK54))) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X21,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X19) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X20,'type.list.list'('type.conSem.v')))) ) | ($spl4 | $spl70)),
  inference(duplicate_literal_removal,[],[f18617])).
fof(f18617,plain,(
  ( ! [X21,X19,X20] : (s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X20),s('type.list.list'('type.conSem.v'),sK54))) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X21),s('type.list.list'('type.conSem.v'),sK54))) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X21,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X19) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X20,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X19)) ) | ($spl4 | $spl70)),
  inference(superposition,[],[f17411,f9620])).
fof(f17487,plain,(
  ( ! [X9] : (s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X9,'type.list.list'('type.conSem.v'))) | s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X9),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl88),
  inference(cnf_transformation,[],[f17487_D])).
fof(f17487_D,plain,(
  ( ! [X9] : (s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X9,'type.list.list'('type.conSem.v'))) | s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X9),s('type.list.list'('type.conSem.v'),sK54)))) ) <=> ~$spl88),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl88])])).
fof(f19245,plain,(
  ( ! [X18,X16] : (s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X18),s('type.list.list'('type.conSem.v'),sK54))) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X18,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X16)) ) | ($spl4 | $spl70)),
  inference(forward_demodulation,[],[f19231,f2947])).
fof(f19231,plain,(
  ( ! [X17,X18,X16] : (s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X18),s('type.list.list'('type.conSem.v'),sK54))) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X17),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X18,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X16)) ) | ($spl4 | $spl70)),
  inference(duplicate_literal_removal,[],[f18616])).
fof(f18616,plain,(
  ( ! [X17,X18,X16] : (s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X18),s('type.list.list'('type.conSem.v'),sK54))) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X17),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X18,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X16) | s(bool,'T_0') = s(bool,X16)) ) | ($spl4 | $spl70)),
  inference(superposition,[],[f17411,f5688])).
fof(f19244,plain,(
  ( ! [X14,X15] : (s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X15),s('type.list.list'('type.conSem.v'),sK54))) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X15,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X14)) ) | ($spl1 | $spl70)),
  inference(forward_demodulation,[],[f19232,f1416])).
fof(f19232,plain,(
  ( ! [X14,X15] : (s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X15),s('type.list.list'('type.conSem.v'),sK54))) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54))) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X15,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X14)) ) | ($spl1 | $spl70)),
  inference(duplicate_literal_removal,[],[f18615])).
fof(f18615,plain,(
  ( ! [X14,X15] : (s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X15),s('type.list.list'('type.conSem.v'),sK54))) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54))) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X15,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X14) | s(bool,'T_0') = s(bool,X14)) ) | ($spl1 | $spl70)),
  inference(superposition,[],[f17411,f5687])).
fof(f5687,plain,(
  ( ! [X5] : (s(bool,X5) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X5)) ) | $spl1),
  inference(subsumption_resolution,[],[f5682,f1048])).
fof(f5682,plain,(
  ( ! [X5] : (p(s(bool,'F_0')) | s(bool,X5) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X5)) ) | $spl1),
  inference(superposition,[],[f1535,f1416])).
fof(f19237,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X1),s('type.list.list'('type.conSem.v'),sK54))) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X1,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl70),
  inference(duplicate_literal_removal,[],[f18610])).
fof(f18610,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X1),s('type.list.list'('type.conSem.v'),sK54))) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X1,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl70),
  inference(superposition,[],[f17411,f539])).
fof(f19239,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X1),s('type.list.list'('type.conSem.v'),sK54))) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK56) | s(bool,'T_0') = s(bool,X0)) ) | ($spl4 | $spl70)),
  inference(duplicate_literal_removal,[],[f19238])).
fof(f19238,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X1),s('type.list.list'('type.conSem.v'),sK54))) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK56) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | ($spl4 | $spl70)),
  inference(condensation,[],[f18609])).
fof(f18609,plain,(
  ( ! [X4,X5,X3] : (s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK56) | s(bool,X4) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X3),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X4) | s(bool,X5) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X3),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X5)) ) | ($spl4 | $spl70)),
  inference(superposition,[],[f17411,f9620])).
fof(f19240,plain,(
  ( ! [X2,X1] : (s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK56) | s(bool,X2) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X1),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X2)) ) | ($spl1 | $spl4 | $spl70)),
  inference(subsumption_resolution,[],[f18608,f9567])).
fof(f18608,plain,(
  ( ! [X2,X1] : (s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK56) | s(bool,X2) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X1),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X2) | s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X1),s('type.list.list'('type.conSem.v'),sK54)))) ) | ($spl1 | $spl4 | $spl70)),
  inference(superposition,[],[f17411,f17409])).
fof(f17412,plain,(
  ( ! [X12] : (s('type.list.list'('type.conSem.v'),sK54) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X12),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl72),
  inference(cnf_transformation,[],[f17412_D])).
fof(f17412_D,plain,(
  ( ! [X12] : (s('type.list.list'('type.conSem.v'),sK54) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X12),s('type.list.list'('type.conSem.v'),sK54)))) ) <=> ~$spl72),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl72])])).
fof(f17447,plain,(
  ( ! [X10,X9] : (s('type.list.list'('type.conSem.v'),sK54) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X10),s('type.list.list'('type.conSem.v'),sK54))) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X9,'type.list.list'('type.conSem.v'))) | s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X9),s('type.list.list'('type.conSem.v'),sK54)))) ) | ($spl1 | $spl4)),
  inference(superposition,[],[f2854,f17409])).
fof(f17443,plain,(
  ( ! [X592,X590,X593] : (sP1(happ(s(fun('type.list.list'('type.conSem.v'),bool),X590),s('type.list.list'('type.conSem.v'),sK54)),X592) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X590,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X593) | s(bool,X592) = s(bool,X593)) ) | $spl86),
  inference(cnf_transformation,[],[f17443_D])).
fof(f17443_D,plain,(
  ( ! [X592,X590,X593] : (sP1(happ(s(fun('type.list.list'('type.conSem.v'),bool),X590),s('type.list.list'('type.conSem.v'),sK54)),X592) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X590,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X593) | s(bool,X592) = s(bool,X593)) ) <=> ~$spl86),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl86])])).
fof(f17442,plain,(
  ( ! [X592,X590,X593,X591] : (p(s(bool,X591)) | sP1(happ(s(fun('type.list.list'('type.conSem.v'),bool),X590),s('type.list.list'('type.conSem.v'),sK54)),X592) | s(bool,X592) = s(bool,X593) | s(bool,'T_0') = s(bool,X593) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X590,'type.list.list'('type.conSem.v')))) ) | $spl4),
  inference(subsumption_resolution,[],[f17338,f547])).
fof(f17338,plain,(
  ( ! [X592,X590,X593,X591] : (p(s(bool,X591)) | sP1(happ(s(fun('type.list.list'('type.conSem.v'),bool),X590),s('type.list.list'('type.conSem.v'),sK54)),X592) | s(bool,X592) = s(bool,X593) | s(bool,'T_0') = s(bool,X593) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X590,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X591)) ) | $spl4),
  inference(superposition,[],[f9572,f9620])).
fof(f17441,plain,(
  ( ! [X588,X586,X589] : (sP1(X588,happ(s(fun('type.list.list'('type.conSem.v'),bool),X586),s('type.list.list'('type.conSem.v'),sK54))) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X586,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X589) | s(bool,X588) = s(bool,X589)) ) | $spl84),
  inference(cnf_transformation,[],[f17441_D])).
fof(f17441_D,plain,(
  ( ! [X588,X586,X589] : (sP1(X588,happ(s(fun('type.list.list'('type.conSem.v'),bool),X586),s('type.list.list'('type.conSem.v'),sK54))) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X586,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X589) | s(bool,X588) = s(bool,X589)) ) <=> ~$spl84),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl84])])).
fof(f17440,plain,(
  ( ! [X588,X586,X589,X587] : (p(s(bool,X587)) | sP1(X588,happ(s(fun('type.list.list'('type.conSem.v'),bool),X586),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,X588) = s(bool,X589) | s(bool,'T_0') = s(bool,X589) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X586,'type.list.list'('type.conSem.v')))) ) | $spl4),
  inference(subsumption_resolution,[],[f17337,f547])).
fof(f17337,plain,(
  ( ! [X588,X586,X589,X587] : (p(s(bool,X587)) | sP1(X588,happ(s(fun('type.list.list'('type.conSem.v'),bool),X586),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,X588) = s(bool,X589) | s(bool,'T_0') = s(bool,X589) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X586,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X587)) ) | $spl4),
  inference(superposition,[],[f9571,f9620])).
fof(f17437,plain,(
  ( ! [X563] : (sP1(happ(s(fun('type.list.list'('type.conSem.v'),bool),X563),s('type.list.list'('type.conSem.v'),sK54)),'T_0') | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X563,'type.list.list'('type.conSem.v')))) ) | $spl82),
  inference(cnf_transformation,[],[f17437_D])).
fof(f17437_D,plain,(
  ( ! [X563] : (sP1(happ(s(fun('type.list.list'('type.conSem.v'),bool),X563),s('type.list.list'('type.conSem.v'),sK54)),'T_0') | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X563,'type.list.list'('type.conSem.v')))) ) <=> ~$spl82),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl82])])).
fof(f17436,plain,(
  ( ! [X563,X564] : (p(s(bool,X564)) | sP1(happ(s(fun('type.list.list'('type.conSem.v'),bool),X563),s('type.list.list'('type.conSem.v'),sK54)),'T_0') | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X563,'type.list.list'('type.conSem.v')))) ) | ($spl4 | $spl14)),
  inference(subsumption_resolution,[],[f17329,f547])).
fof(f17329,plain,(
  ( ! [X563,X564] : (p(s(bool,X564)) | sP1(happ(s(fun('type.list.list'('type.conSem.v'),bool),X563),s('type.list.list'('type.conSem.v'),sK54)),'T_0') | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X563,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X564)) ) | ($spl4 | $spl14)),
  inference(superposition,[],[f9500,f9620])).
fof(f17435,plain,(
  ( ! [X561] : (sP1('T_0',happ(s(fun('type.list.list'('type.conSem.v'),bool),X561),s('type.list.list'('type.conSem.v'),sK54))) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X561,'type.list.list'('type.conSem.v')))) ) | $spl80),
  inference(cnf_transformation,[],[f17435_D])).
fof(f17435_D,plain,(
  ( ! [X561] : (sP1('T_0',happ(s(fun('type.list.list'('type.conSem.v'),bool),X561),s('type.list.list'('type.conSem.v'),sK54))) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X561,'type.list.list'('type.conSem.v')))) ) <=> ~$spl80),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl80])])).
fof(f17434,plain,(
  ( ! [X561,X562] : (p(s(bool,X562)) | sP1('T_0',happ(s(fun('type.list.list'('type.conSem.v'),bool),X561),s('type.list.list'('type.conSem.v'),sK54))) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X561,'type.list.list'('type.conSem.v')))) ) | ($spl4 | $spl10)),
  inference(subsumption_resolution,[],[f17328,f547])).
fof(f17328,plain,(
  ( ! [X561,X562] : (p(s(bool,X562)) | sP1('T_0',happ(s(fun('type.list.list'('type.conSem.v'),bool),X561),s('type.list.list'('type.conSem.v'),sK54))) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X561,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X562)) ) | ($spl4 | $spl10)),
  inference(superposition,[],[f9496,f9620])).
fof(f17419,plain,(
  ( ! [X318,X320,X319] : (~sP47('const.bool.BOUNDED_1'(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X318),s('type.list.list'('type.conSem.v'),sK54)))),X319,X320) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X318,'type.list.list'('type.conSem.v'))) | sP48('const.bool.BOUNDED_1'(s(bool,'F_0')),X319,X320)) ) | $spl78),
  inference(cnf_transformation,[],[f17419_D])).
fof(f17419_D,plain,(
  ( ! [X318,X320,X319] : (~sP47('const.bool.BOUNDED_1'(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X318),s('type.list.list'('type.conSem.v'),sK54)))),X319,X320) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X318,'type.list.list'('type.conSem.v'))) | sP48('const.bool.BOUNDED_1'(s(bool,'F_0')),X319,X320)) ) <=> ~$spl78),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl78])])).
fof(f17383,plain,(
  ( ! [X318,X320,X317,X319] : (~sP47('const.bool.BOUNDED_1'(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X318),s('type.list.list'('type.conSem.v'),sK54)))),X319,X320) | sP48('const.bool.BOUNDED_1'(s(bool,'F_0')),X319,X320) | s(bool,'T_0') = s(bool,X317) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X318,'type.list.list'('type.conSem.v')))) ) | $spl4),
  inference(duplicate_literal_removal,[],[f16979])).
fof(f16979,plain,(
  ( ! [X318,X320,X317,X319] : (~sP47('const.bool.BOUNDED_1'(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X318),s('type.list.list'('type.conSem.v'),sK54)))),X319,X320) | sP48('const.bool.BOUNDED_1'(s(bool,'F_0')),X319,X320) | s(bool,'T_0') = s(bool,X317) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X318,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X317)) ) | $spl4),
  inference(superposition,[],[f2474,f9620])).
fof(f17418,plain,(
  ( ! [X315,X316,X314] : (~sP49('const.bool.BOUNDED_1'(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X314),s('type.list.list'('type.conSem.v'),sK54)))),X315,X316) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X314,'type.list.list'('type.conSem.v'))) | sP50('const.bool.BOUNDED_1'(s(bool,'F_0')),X315,X316)) ) | $spl76),
  inference(cnf_transformation,[],[f17418_D])).
fof(f17418_D,plain,(
  ( ! [X315,X316,X314] : (~sP49('const.bool.BOUNDED_1'(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X314),s('type.list.list'('type.conSem.v'),sK54)))),X315,X316) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X314,'type.list.list'('type.conSem.v'))) | sP50('const.bool.BOUNDED_1'(s(bool,'F_0')),X315,X316)) ) <=> ~$spl76),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl76])])).
fof(f17384,plain,(
  ( ! [X313,X315,X316,X314] : (~sP49('const.bool.BOUNDED_1'(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X314),s('type.list.list'('type.conSem.v'),sK54)))),X315,X316) | sP50('const.bool.BOUNDED_1'(s(bool,'F_0')),X315,X316) | s(bool,'T_0') = s(bool,X313) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X314,'type.list.list'('type.conSem.v')))) ) | $spl4),
  inference(duplicate_literal_removal,[],[f16978])).
fof(f16978,plain,(
  ( ! [X313,X315,X316,X314] : (~sP49('const.bool.BOUNDED_1'(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X314),s('type.list.list'('type.conSem.v'),sK54)))),X315,X316) | sP50('const.bool.BOUNDED_1'(s(bool,'F_0')),X315,X316) | s(bool,'T_0') = s(bool,X313) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X314,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X313)) ) | $spl4),
  inference(superposition,[],[f2442,f9620])).
fof(f17414,plain,(
  ( ! [X5] : (s(bool,'T_0') != s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X5),s('type.list.list'('type.conSem.v'),sK54))) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X5,'type.list.list'('type.conSem.v')))) ) | $spl74),
  inference(cnf_transformation,[],[f17414_D])).
fof(f17414_D,plain,(
  ( ! [X5] : (s(bool,'T_0') != s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X5),s('type.list.list'('type.conSem.v'),sK54))) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X5,'type.list.list'('type.conSem.v')))) ) <=> ~$spl74),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl74])])).
fof(f17413,plain,(
  ( ! [X4,X5] : (s(bool,'T_0') != s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X5),s('type.list.list'('type.conSem.v'),sK54))) | p(s(bool,X4)) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X5,'type.list.list'('type.conSem.v')))) ) | $spl4),
  inference(subsumption_resolution,[],[f16885,f547])).
fof(f16885,plain,(
  ( ! [X4,X5] : (s(bool,'T_0') != s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X5),s('type.list.list'('type.conSem.v'),sK54))) | p(s(bool,X4)) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X5,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X4)) ) | $spl4),
  inference(superposition,[],[f547,f9620])).
fof(f17411,plain,(
  ( ! [X13,X11] : (s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X11,'type.list.list'('type.conSem.v'))) | s(bool,X13) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X11),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X13)) ) | $spl70),
  inference(cnf_transformation,[],[f17411_D])).
fof(f17411_D,plain,(
  ( ! [X13,X11] : (s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X11,'type.list.list'('type.conSem.v'))) | s(bool,X13) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X11),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X13)) ) <=> ~$spl70),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl70])])).
fof(f16844,plain,(
  ( ! [X12,X13,X11] : (s('type.list.list'('type.conSem.v'),sK54) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X12),s('type.list.list'('type.conSem.v'),sK54))) | s('type.list.list'('type.conSem.v'),sK56) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X11,'type.list.list'('type.conSem.v'))) | s(bool,X13) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X11),s('type.list.list'('type.conSem.v'),sK54))) | s(bool,'T_0') = s(bool,X13)) ) | $spl4),
  inference(superposition,[],[f2854,f9620])).
fof(f17408,plain,(
  ( ! [X21,X20] : (s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X20),s('type.list.list'('type.conSem.v'),sK54))) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X21),s('type.list.list'('type.conSem.v'),sK54))) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X20,'type.list.list'('type.conSem.v'))) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X21,'type.list.list'('type.conSem.v')))) ) | $spl68),
  inference(cnf_transformation,[],[f17408_D])).
fof(f17408_D,plain,(
  ( ! [X21,X20] : (s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X20),s('type.list.list'('type.conSem.v'),sK54))) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X21),s('type.list.list'('type.conSem.v'),sK54))) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X20,'type.list.list'('type.conSem.v'))) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X21,'type.list.list'('type.conSem.v')))) ) <=> ~$spl68),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl68])])).
fof(f17397,plain,(
  ( ! [X21,X19,X20] : (s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X20),s('type.list.list'('type.conSem.v'),sK54))) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X21),s('type.list.list'('type.conSem.v'),sK54))) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X21,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X19) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X20,'type.list.list'('type.conSem.v')))) ) | $spl4),
  inference(duplicate_literal_removal,[],[f16823])).
fof(f16823,plain,(
  ( ! [X21,X19,X20] : (s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X20),s('type.list.list'('type.conSem.v'),sK54))) = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X21),s('type.list.list'('type.conSem.v'),sK54))) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X21,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X19) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X20,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X19)) ) | $spl4),
  inference(superposition,[],[f9620,f9620])).
fof(f17407,plain,(
  ( ! [X18,X16] : (s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X18),s('type.list.list'('type.conSem.v'),sK54))) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X18,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X16)) ) | $spl4),
  inference(forward_demodulation,[],[f17398,f2947])).
fof(f17398,plain,(
  ( ! [X17,X18,X16] : (s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X18),s('type.list.list'('type.conSem.v'),sK54))) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X17),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X18,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X16)) ) | $spl4),
  inference(duplicate_literal_removal,[],[f16822])).
fof(f16822,plain,(
  ( ! [X17,X18,X16] : (s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X18),s('type.list.list'('type.conSem.v'),sK54))) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X17),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X18,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X16) | s(bool,'T_0') = s(bool,X16)) ) | $spl4),
  inference(superposition,[],[f9620,f5688])).
fof(f17406,plain,(
  ( ! [X14,X15] : (s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X15),s('type.list.list'('type.conSem.v'),sK54))) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X15,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X14)) ) | ($spl1 | $spl4)),
  inference(forward_demodulation,[],[f17399,f1416])).
fof(f17399,plain,(
  ( ! [X14,X15] : (s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X15),s('type.list.list'('type.conSem.v'),sK54))) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54))) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X15,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X14)) ) | ($spl1 | $spl4)),
  inference(duplicate_literal_removal,[],[f16821])).
fof(f16821,plain,(
  ( ! [X14,X15] : (s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X15),s('type.list.list'('type.conSem.v'),sK54))) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54))) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X15,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X14) | s(bool,'T_0') = s(bool,X14)) ) | ($spl1 | $spl4)),
  inference(superposition,[],[f9620,f5687])).
fof(f17404,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X1),s('type.list.list'('type.conSem.v'),sK54))) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X1,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl4),
  inference(duplicate_literal_removal,[],[f16816])).
fof(f16816,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),X1),s('type.list.list'('type.conSem.v'),sK54))) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X1,'type.list.list'('type.conSem.v'))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl4),
  inference(superposition,[],[f9620,f539])).
fof(f16317,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f12995,f13016])).
fof(f13016,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1)) ) | $spl62),
  inference(unit_resulting_resolution,[],[f12909,f12909,f612])).
fof(f12995,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,X0)) ) | $spl62),
  inference(unit_resulting_resolution,[],[f12909,f551])).
fof(f16316,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f13003,f531])).
fof(f13003,plain,(
  ~p(s(bool,'T_0')) | $spl62),
  inference(unit_resulting_resolution,[],[f1102,f12909,f612])).
fof(f16315,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13005,f531])).
fof(f13005,plain,(
  ~p(s(bool,'T_0')) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f2943,f12909,f612])).
fof(f16314,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f13007,f531])).
fof(f13007,plain,(
  ~p(s(bool,'T_0')) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1415,f12909,f612])).
fof(f16313,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13011,f12909])).
fof(f13011,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f2943,f12909,f612])).
fof(f16312,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f13013,f12909])).
fof(f13013,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1415,f12909,f612])).
fof(f16311,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f13017,f531])).
fof(f13017,plain,(
  ~p(s(bool,'T_0')) | $spl62),
  inference(unit_resulting_resolution,[],[f1102,f12909,f612])).
fof(f16310,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13019,f531])).
fof(f13019,plain,(
  ~p(s(bool,'T_0')) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f2943,f12909,f612])).
fof(f16309,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f13021,f531])).
fof(f13021,plain,(
  ~p(s(bool,'T_0')) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1415,f12909,f612])).
fof(f16308,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13025,f12909])).
fof(f13025,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f2943,f12909,f612])).
fof(f16307,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f13027,f12909])).
fof(f13027,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1415,f12909,f612])).
fof(f16306,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f13034,f12909])).
fof(f13034,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1421,f12909,f639])).
fof(f1421,plain,(
  sP1('T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54))) | $spl1),
  inference(unit_resulting_resolution,[],[f531,f1040,f640])).
fof(f16305,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13035,f12909])).
fof(f13035,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f2953,f12909,f639])).
fof(f16304,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f13036,f531])).
fof(f13036,plain,(
  ~p(s(bool,'T_0')) | $spl62),
  inference(unit_resulting_resolution,[],[f1134,f12909,f639])).
fof(f16303,plain,(
  $false | ($spl6 | $spl62)),
  inference(subsumption_resolution,[],[f13037,f12909])).
fof(f13037,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)))) | ($spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f2170,f12909,f639])).
fof(f2170,plain,(
  sP1('F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56))) | $spl6),
  inference(unit_resulting_resolution,[],[f1048,f2130])).
fof(f2130,plain,(
  ( ! [X6] : (sP1(X6,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56))) | p(s(bool,X6))) ) | $spl6),
  inference(subsumption_resolution,[],[f2064,f531])).
fof(f2064,plain,(
  ( ! [X6] : (~p(s(bool,'T_0')) | p(s(bool,X6)) | sP1(X6,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)))) ) | $spl6),
  inference(superposition,[],[f643,f1111])).
fof(f16302,plain,(
  $false | ($spl8 | $spl62)),
  inference(subsumption_resolution,[],[f13038,f12909])).
fof(f13038,plain,(
  ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) | ($spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f1911,f12909,f639])).
fof(f16301,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f13039,f12909])).
fof(f13039,plain,(
  ( ! [X0] : (~p(s(bool,'const.bool.BOUNDED_1'(s(bool,X0))))) ) | $spl62),
  inference(unit_resulting_resolution,[],[f1162,f12909,f639])).
fof(f16300,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f13040,f531])).
fof(f13040,plain,(
  ~p(s(bool,'T_0')) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1422,f12909,f639])).
fof(f1422,plain,(
  sP1('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)),'T_0') | $spl1),
  inference(unit_resulting_resolution,[],[f531,f1040,f643])).
fof(f16299,plain,(
  $false | ($spl4 | $spl6 | $spl62)),
  inference(subsumption_resolution,[],[f13042,f12909])).
fof(f13042,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f3252,f12909,f639])).
fof(f3252,plain,(
  ( ! [X0] : (sP1('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | ($spl4 | $spl6)),
  inference(unit_resulting_resolution,[],[f2937,f2129])).
fof(f2129,plain,(
  ( ! [X5] : (sP1('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)),X5) | p(s(bool,X5))) ) | $spl6),
  inference(subsumption_resolution,[],[f2063,f531])).
fof(f2063,plain,(
  ( ! [X5] : (~p(s(bool,'T_0')) | p(s(bool,X5)) | sP1('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)),X5)) ) | $spl6),
  inference(superposition,[],[f640,f1111])).
fof(f16298,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f13043,f12909])).
fof(f13043,plain,(
  ( ! [X0] : (~p(s(bool,'const.bool.BOUNDED_1'(s(bool,X0))))) ) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1494,f12909,f639])).
fof(f1494,plain,(
  ( ! [X0] : (sP1('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)),'const.bool.BOUNDED_1'(s(bool,X0)))) ) | $spl1),
  inference(unit_resulting_resolution,[],[f1040,f1136])).
fof(f16297,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13044,f531])).
fof(f13044,plain,(
  ~p(s(bool,'T_0')) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f2954,f12909,f639])).
fof(f16296,plain,(
  $false | ($spl4 | $spl6 | $spl62)),
  inference(subsumption_resolution,[],[f13045,f12909])).
fof(f13045,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)))) | ($spl4 | $spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f3253,f12909,f639])).
fof(f3253,plain,(
  ( ! [X0] : (sP1('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)))) ) | ($spl4 | $spl6)),
  inference(unit_resulting_resolution,[],[f2937,f2130])).
fof(f16295,plain,(
  $false | ($spl4 | $spl8 | $spl62)),
  inference(subsumption_resolution,[],[f13046,f12909])).
fof(f13046,plain,(
  ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) | ($spl4 | $spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f3220,f12909,f639])).
fof(f3220,plain,(
  ( ! [X0] : (sP1('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | ($spl4 | $spl8)),
  inference(unit_resulting_resolution,[],[f2937,f1830])).
fof(f16294,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13047,f12909])).
fof(f13047,plain,(
  ( ! [X0] : (~p(s(bool,'const.bool.BOUNDED_1'(s(bool,X0))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3217,f12909,f639])).
fof(f16293,plain,(
  $false | ($spl4 | $spl8 | $spl62)),
  inference(subsumption_resolution,[],[f13049,f12909])).
fof(f13049,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f3219,f12909,f639])).
fof(f3219,plain,(
  ( ! [X0] : (sP1('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | ($spl4 | $spl8)),
  inference(unit_resulting_resolution,[],[f2937,f1829])).
fof(f16292,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13051,f12909])).
fof(f13051,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3216,f12909,f639])).
fof(f16291,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f13052,f12909])).
fof(f13052,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1493,f12909,f639])).
fof(f1493,plain,(
  ( ! [X0] : (sP1('const.bool.BOUNDED_1'(s(bool,X0)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl1),
  inference(unit_resulting_resolution,[],[f1040,f1129])).
fof(f16290,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f13057,f531])).
fof(f13057,plain,(
  ~p(s(bool,'T_0')) | $spl62),
  inference(unit_resulting_resolution,[],[f1127,f12909,f639])).
fof(f16289,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f13058,f531])).
fof(f13058,plain,(
  ~p(s(bool,'T_0')) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1421,f12909,f639])).
fof(f16288,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13059,f531])).
fof(f13059,plain,(
  ~p(s(bool,'T_0')) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f2953,f12909,f639])).
fof(f16287,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f13064,f12909])).
fof(f13064,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1422,f12909,f639])).
fof(f16286,plain,(
  $false | ($spl6 | $spl62)),
  inference(subsumption_resolution,[],[f13065,f12909])).
fof(f13065,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)))) | ($spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f2167,f12909,f639])).
fof(f2167,plain,(
  sP1('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)),'F_0') | $spl6),
  inference(unit_resulting_resolution,[],[f1048,f2129])).
fof(f16285,plain,(
  $false | ($spl4 | $spl6 | $spl62)),
  inference(subsumption_resolution,[],[f13066,f12909])).
fof(f13066,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)))) | ($spl4 | $spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f3252,f12909,f639])).
fof(f16284,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f13067,f12909])).
fof(f13067,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1494,f12909,f639])).
fof(f16283,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13068,f12909])).
fof(f13068,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f2954,f12909,f639])).
fof(f16282,plain,(
  $false | ($spl4 | $spl6 | $spl62)),
  inference(subsumption_resolution,[],[f13069,f12909])).
fof(f13069,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f3253,f12909,f639])).
fof(f16281,plain,(
  $false | ($spl4 | $spl8 | $spl62)),
  inference(subsumption_resolution,[],[f13070,f12909])).
fof(f13070,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f3220,f12909,f639])).
fof(f16280,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13071,f12909])).
fof(f13071,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3217,f12909,f639])).
fof(f16279,plain,(
  $false | ($spl8 | $spl62)),
  inference(subsumption_resolution,[],[f13072,f12909])).
fof(f13072,plain,(
  ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) | ($spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f1876,f12909,f639])).
fof(f16278,plain,(
  $false | ($spl4 | $spl8 | $spl62)),
  inference(subsumption_resolution,[],[f13073,f12909])).
fof(f13073,plain,(
  ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) | ($spl4 | $spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f3219,f12909,f639])).
fof(f16277,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f13074,f12909])).
fof(f13074,plain,(
  ( ! [X0] : (~p(s(bool,'const.bool.BOUNDED_1'(s(bool,X0))))) ) | $spl62),
  inference(unit_resulting_resolution,[],[f1139,f12909,f639])).
fof(f16276,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13075,f12909])).
fof(f13075,plain,(
  ( ! [X0] : (~p(s(bool,'const.bool.BOUNDED_1'(s(bool,X0))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3216,f12909,f639])).
fof(f16275,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f13076,f12909])).
fof(f13076,plain,(
  ( ! [X0] : (~p(s(bool,'const.bool.BOUNDED_1'(s(bool,X0))))) ) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1493,f12909,f639])).
fof(f16274,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f13100,f12909])).
fof(f13100,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1428,f12909,f919])).
fof(f1428,plain,(
  ( ! [X0] : (~sP40(X0,'F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl1),
  inference(unit_resulting_resolution,[],[f1048,f1040,f916])).
fof(f16273,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13101,f12909])).
fof(f13101,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f2964,f12909,f919])).
fof(f16272,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f13102,f12909])).
fof(f13102,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl62),
  inference(unit_resulting_resolution,[],[f1166,f12909,f919])).
fof(f16271,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f13103,f12909])).
fof(f13103,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1435,f12909,f919])).
fof(f1435,plain,(
  ( ! [X0] : (~sP40('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)),'F_0',X0)) ) | $spl1),
  inference(unit_resulting_resolution,[],[f1048,f1040,f917])).
fof(f16270,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13104,f12909])).
fof(f13104,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f2973,f12909,f919])).
fof(f16269,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f13106,f12909])).
fof(f13106,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1440,f12909,f919])).
fof(f1440,plain,(
  ( ! [X0] : (~sP40('F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)),X0)) ) | $spl1),
  inference(unit_resulting_resolution,[],[f1048,f1040,f917])).
fof(f16268,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13108,f12909])).
fof(f13108,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f2965,f12909,f919])).
fof(f16267,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13109,f12909])).
fof(f13109,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f2979,f12909,f919])).
fof(f16266,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13110,f12909])).
fof(f13110,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f2978,f12909,f919])).
fof(f16265,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f13121,f12909])).
fof(f13121,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1423,f12909,f919])).
fof(f1423,plain,(
  ( ! [X0] : (~sP40(X0,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)),'F_0')) ) | $spl1),
  inference(unit_resulting_resolution,[],[f1048,f1040,f916])).
fof(f16264,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f13122,f12909])).
fof(f13122,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1440,f12909,f919])).
fof(f16263,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13123,f12909])).
fof(f13123,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f2955,f12909,f919])).
fof(f16262,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13124,f12909])).
fof(f13124,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f2965,f12909,f919])).
fof(f16261,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13125,f12909])).
fof(f13125,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f2979,f12909,f919])).
fof(f16260,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13126,f12909])).
fof(f13126,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f2978,f12909,f919])).
fof(f16259,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f13136,f12909])).
fof(f13136,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1423,f12909,f920])).
fof(f16258,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f13137,f12909])).
fof(f13137,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1440,f12909,f920])).
fof(f16257,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13138,f12909])).
fof(f13138,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f2955,f12909,f920])).
fof(f16256,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13139,f12909])).
fof(f13139,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f2965,f12909,f920])).
fof(f16255,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13140,f12909])).
fof(f13140,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f2979,f12909,f920])).
fof(f16254,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13141,f12909])).
fof(f13141,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f2978,f12909,f920])).
fof(f16253,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f13145,f12909])).
fof(f13145,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl62),
  inference(unit_resulting_resolution,[],[f1159,f12909,f920])).
fof(f16252,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f13146,f12909])).
fof(f13146,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1428,f12909,f920])).
fof(f16251,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13147,f12909])).
fof(f13147,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f2964,f12909,f920])).
fof(f16250,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f13149,f12909])).
fof(f13149,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1435,f12909,f920])).
fof(f16249,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13150,f12909])).
fof(f13150,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f2973,f12909,f920])).
fof(f16248,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f13151,f12909])).
fof(f13151,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1423,f12909,f920])).
fof(f16247,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13153,f12909])).
fof(f13153,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f2955,f12909,f920])).
fof(f16246,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13154,f12909])).
fof(f13154,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f2965,f12909,f920])).
fof(f16245,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13155,f12909])).
fof(f13155,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f2979,f12909,f920])).
fof(f16244,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f13162,f12909])).
fof(f13162,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1428,f12909,f921])).
fof(f16243,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13163,f12909])).
fof(f13163,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f2964,f12909,f921])).
fof(f16242,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f13164,f12909])).
fof(f13164,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl62),
  inference(unit_resulting_resolution,[],[f1166,f12909,f921])).
fof(f16241,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f13165,f12909])).
fof(f13165,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1435,f12909,f921])).
fof(f16240,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13166,f12909])).
fof(f13166,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f2973,f12909,f921])).
fof(f16239,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f13168,f12909])).
fof(f13168,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1440,f12909,f921])).
fof(f16238,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13170,f12909])).
fof(f13170,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f2965,f12909,f921])).
fof(f16237,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13171,f12909])).
fof(f13171,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f2979,f12909,f921])).
fof(f16236,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13172,f12909])).
fof(f13172,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f2978,f12909,f921])).
fof(f16235,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f13177,f12909])).
fof(f13177,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl62),
  inference(unit_resulting_resolution,[],[f1159,f12909,f921])).
fof(f16234,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f13178,f12909])).
fof(f13178,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1428,f12909,f921])).
fof(f16233,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13179,f12909])).
fof(f13179,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f2964,f12909,f921])).
fof(f16232,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f13181,f12909])).
fof(f13181,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1435,f12909,f921])).
fof(f16231,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13182,f12909])).
fof(f13182,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f2973,f12909,f921])).
fof(f16230,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f13183,f12909])).
fof(f13183,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1423,f12909,f921])).
fof(f16229,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13185,f12909])).
fof(f13185,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f2955,f12909,f921])).
fof(f16228,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13186,f12909])).
fof(f13186,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f2965,f12909,f921])).
fof(f16227,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13187,f12909])).
fof(f13187,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f2979,f12909,f921])).
fof(f16226,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13194,f12909])).
fof(f13194,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f2994,f1048,f12909,f929])).
fof(f16225,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f13195,f12909])).
fof(f13195,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f5324,f1048,f12909,f929])).
fof(f5324,plain,(
  sP44('T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)),'F_0') | $spl1),
  inference(unit_resulting_resolution,[],[f531,f1416,f946])).
fof(f16224,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f13196,f531])).
fof(f13196,plain,(
  ~p(s(bool,'T_0')) | $spl62),
  inference(unit_resulting_resolution,[],[f1574,f1048,f12909,f929])).
fof(f16223,plain,(
  $false | ($spl6 | $spl62)),
  inference(subsumption_resolution,[],[f13197,f12909])).
fof(f13197,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)))) | ($spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f2308,f1048,f12909,f929])).
fof(f2308,plain,(
  sP44('F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)),'F_0') | $spl6),
  inference(unit_resulting_resolution,[],[f1095,f1092,f1056,f1048,f932])).
fof(f1092,plain,(
  ( ! [X0,X1] : (sP43(X0,X1,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f1045,f934])).
fof(f1095,plain,(
  ( ! [X0,X1] : (sP41(X0,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)),X1)) ) | $spl6),
  inference(unit_resulting_resolution,[],[f1045,f943])).
fof(f16222,plain,(
  $false | ($spl8 | $spl62)),
  inference(subsumption_resolution,[],[f13198,f12909])).
fof(f13198,plain,(
  ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) | ($spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f2307,f1048,f12909,f929])).
fof(f16221,plain,(
  $false | ($spl4 | $spl6 | $spl62)),
  inference(subsumption_resolution,[],[f13200,f12909])).
fof(f13200,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f2996,f1048,f12909,f929])).
fof(f2996,plain,(
  ( ! [X0] : (sP44('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0')) ) | ($spl4 | $spl6)),
  inference(unit_resulting_resolution,[],[f1094,f1053,f1056,f2937,f931])).
fof(f1094,plain,(
  ( ! [X0,X1] : (sP41(X0,X1,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f1045,f942])).
fof(f16220,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13201,f531])).
fof(f13201,plain,(
  ~p(s(bool,'T_0')) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3057,f1048,f12909,f929])).
fof(f16219,plain,(
  $false | ($spl4 | $spl6 | $spl62)),
  inference(subsumption_resolution,[],[f13202,f12909])).
fof(f13202,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)))) | ($spl4 | $spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f3005,f1048,f12909,f929])).
fof(f3005,plain,(
  ( ! [X0] : (sP44('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)),'F_0')) ) | ($spl4 | $spl6)),
  inference(unit_resulting_resolution,[],[f1095,f1092,f1056,f2937,f932])).
fof(f16218,plain,(
  $false | ($spl4 | $spl8 | $spl62)),
  inference(subsumption_resolution,[],[f13203,f12909])).
fof(f13203,plain,(
  ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) | ($spl4 | $spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f3004,f1048,f12909,f929])).
fof(f3004,plain,(
  ( ! [X0] : (sP44('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0')) ) | ($spl4 | $spl8)),
  inference(unit_resulting_resolution,[],[f1076,f1073,f1056,f2937,f932])).
fof(f16217,plain,(
  $false | ($spl4 | $spl8 | $spl62)),
  inference(subsumption_resolution,[],[f13205,f12909])).
fof(f13205,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f2995,f1048,f12909,f929])).
fof(f2995,plain,(
  ( ! [X0] : (sP44('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0')) ) | ($spl4 | $spl8)),
  inference(unit_resulting_resolution,[],[f1075,f1053,f1056,f2937,f931])).
fof(f16216,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f13324,f531])).
fof(f13324,plain,(
  ~p(s(bool,'T_0')) | $spl62),
  inference(unit_resulting_resolution,[],[f2268,f1048,f12909,f929])).
fof(f16215,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13325,f531])).
fof(f13325,plain,(
  ~p(s(bool,'T_0')) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f2994,f1048,f12909,f929])).
fof(f16214,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f13326,f531])).
fof(f13326,plain,(
  ~p(s(bool,'T_0')) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f5324,f1048,f12909,f929])).
fof(f16213,plain,(
  $false | ($spl6 | $spl62)),
  inference(subsumption_resolution,[],[f13330,f12909])).
fof(f13330,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)))) | ($spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f2270,f1048,f12909,f929])).
fof(f2270,plain,(
  sP44('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)),'F_0','F_0') | $spl6),
  inference(unit_resulting_resolution,[],[f1094,f1053,f1056,f1048,f931])).
fof(f16212,plain,(
  $false | ($spl4 | $spl6 | $spl62)),
  inference(subsumption_resolution,[],[f13331,f12909])).
fof(f13331,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)))) | ($spl4 | $spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f2996,f1048,f12909,f929])).
fof(f16211,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13332,f12909])).
fof(f13332,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3057,f1048,f12909,f929])).
fof(f16210,plain,(
  $false | ($spl4 | $spl6 | $spl62)),
  inference(subsumption_resolution,[],[f13333,f12909])).
fof(f13333,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f3005,f1048,f12909,f929])).
fof(f16209,plain,(
  $false | ($spl4 | $spl8 | $spl62)),
  inference(subsumption_resolution,[],[f13334,f12909])).
fof(f13334,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f3004,f1048,f12909,f929])).
fof(f16208,plain,(
  $false | ($spl8 | $spl62)),
  inference(subsumption_resolution,[],[f13335,f12909])).
fof(f13335,plain,(
  ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) | ($spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f2269,f1048,f12909,f929])).
fof(f16207,plain,(
  $false | ($spl4 | $spl8 | $spl62)),
  inference(subsumption_resolution,[],[f13336,f12909])).
fof(f13336,plain,(
  ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) | ($spl4 | $spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f2995,f1048,f12909,f929])).
fof(f16206,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f13341,f13803])).
fof(f13803,plain,(
  ( ! [X2,X0,X1] : (sP42(X0,X1,X2)) ) | $spl62),
  inference(unit_resulting_resolution,[],[f12909,f938])).
fof(f13341,plain,(
  ~sP42('T_0','F_0','T_0') | $spl62),
  inference(unit_resulting_resolution,[],[f1059,f1600,f1052,f12909,f930])).
fof(f16205,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13342,f13803])).
fof(f13342,plain,(
  ( ! [X0] : (~sP42('T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'T_0')) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f1059,f2987,f1052,f12909,f930])).
fof(f16204,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13343,f13803])).
fof(f13343,plain,(
  ( ! [X0] : (~sP42('T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'T_0')) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f1058,f2987,f1052,f12909,f930])).
fof(f16203,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f13344,f13803])).
fof(f13344,plain,(
  ~sP42('T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)),'T_0') | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1059,f5290,f1052,f12909,f930])).
fof(f5290,plain,(
  ~sP44('T_0','T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54))) | $spl1),
  inference(unit_resulting_resolution,[],[f531,f1415,f947])).
fof(f16202,plain,(
  $false | ($spl4 | $spl6 | $spl62)),
  inference(subsumption_resolution,[],[f13351,f13803])).
fof(f13351,plain,(
  ( ! [X0] : (~sP42('T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | ($spl4 | $spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f1096,f3063,f1052,f12909,f930])).
fof(f3063,plain,(
  ( ! [X0] : (~sP44('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)))) ) | ($spl4 | $spl6)),
  inference(unit_resulting_resolution,[],[f1111,f2937,f948])).
fof(f1096,plain,(
  ( ! [X0,X1] : (sP41('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)),X0,X1)) ) | $spl6),
  inference(unit_resulting_resolution,[],[f1045,f944])).
fof(f16201,plain,(
  $false | ($spl4 | $spl6 | $spl62)),
  inference(subsumption_resolution,[],[f13352,f13803])).
fof(f13352,plain,(
  ( ! [X0] : (~sP42('T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | ($spl4 | $spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f1059,f3063,f1052,f12909,f930])).
fof(f16200,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13355,f13803])).
fof(f13355,plain,(
  ( ! [X0,X1] : (~sP42('T_0','const.bool.BOUNDED_1'(s(bool,X0)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f1059,f3061,f1052,f12909,f930])).
fof(f16199,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f13364,f13803])).
fof(f13364,plain,(
  ~sP42('T_0','F_0','T_0') | $spl62),
  inference(unit_resulting_resolution,[],[f1059,f1600,f1053,f12909,f930])).
fof(f16198,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f13365,f13803])).
fof(f13365,plain,(
  ~sP42('T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)),'T_0') | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1059,f5290,f1445,f12909,f930])).
fof(f1445,plain,(
  ( ! [X0,X1] : (sP43(X0,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)),X1)) ) | $spl1),
  inference(unit_resulting_resolution,[],[f1040,f935])).
fof(f16197,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13366,f13803])).
fof(f13366,plain,(
  ( ! [X0] : (~sP42('T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'T_0')) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f1059,f2987,f3017,f12909,f930])).
fof(f16196,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13367,f13803])).
fof(f13367,plain,(
  ( ! [X0] : (~sP42('T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'T_0')) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f1058,f2987,f3017,f12909,f930])).
fof(f16195,plain,(
  $false | ($spl4 | $spl6 | $spl62)),
  inference(subsumption_resolution,[],[f13379,f13803])).
fof(f13379,plain,(
  ( ! [X0] : (~sP42('T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | ($spl4 | $spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f1096,f3063,f3018,f12909,f930])).
fof(f16194,plain,(
  $false | ($spl4 | $spl6 | $spl62)),
  inference(subsumption_resolution,[],[f13380,f13803])).
fof(f13380,plain,(
  ( ! [X0] : (~sP42('T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | ($spl4 | $spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f1059,f3063,f3018,f12909,f930])).
fof(f16193,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13383,f13803])).
fof(f13383,plain,(
  ( ! [X0,X1] : (~sP42('T_0','const.bool.BOUNDED_1'(s(bool,X0)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f1059,f3061,f3018,f12909,f930])).
fof(f16192,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f13393,f13751])).
fof(f13751,plain,(
  ( ! [X2,X0,X1] : (sP43(X0,X1,X2)) ) | $spl62),
  inference(unit_resulting_resolution,[],[f12909,f934])).
fof(f13393,plain,(
  ~sP43('T_0','F_0','T_0') | $spl62),
  inference(unit_resulting_resolution,[],[f1059,f1600,f1055,f12909,f930])).
fof(f16191,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13394,f13751])).
fof(f13394,plain,(
  ( ! [X0] : (~sP43('T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'T_0')) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f1059,f2987,f1055,f12909,f930])).
fof(f16190,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13395,f13751])).
fof(f13395,plain,(
  ( ! [X0] : (~sP43('T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'T_0')) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f1058,f2987,f1055,f12909,f930])).
fof(f16189,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f13396,f13751])).
fof(f13396,plain,(
  ~sP43('T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)),'T_0') | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1059,f5290,f1055,f12909,f930])).
fof(f16188,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f13409,f13809])).
fof(f13809,plain,(
  ( ! [X2,X0,X1] : (sP41(X0,X1,X2)) ) | $spl62),
  inference(unit_resulting_resolution,[],[f12909,f944])).
fof(f13409,plain,(
  ~sP41('F_0','T_0','T_0') | $spl62),
  inference(unit_resulting_resolution,[],[f1600,f1052,f1055,f12909,f930])).
fof(f16187,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13411,f13809])).
fof(f13411,plain,(
  ( ! [X0] : (~sP41('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'T_0','T_0')) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f2987,f1052,f1055,f12909,f930])).
fof(f16186,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f13413,f13809])).
fof(f13413,plain,(
  ~sP41('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)),'T_0','T_0') | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f5290,f1052,f1055,f12909,f930])).
fof(f16185,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f13429,f13809])).
fof(f13429,plain,(
  ~sP41('F_0','T_0','T_0') | $spl62),
  inference(unit_resulting_resolution,[],[f1600,f1053,f1055,f12909,f930])).
fof(f16184,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f13435,f13809])).
fof(f13435,plain,(
  ~sP41('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)),'T_0','T_0') | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f5290,f1445,f1055,f12909,f930])).
fof(f16183,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13441,f13809])).
fof(f13441,plain,(
  ( ! [X0] : (~sP41('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'T_0','T_0')) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f2987,f3017,f1055,f12909,f930])).
fof(f16182,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f13499,f13751])).
fof(f13499,plain,(
  ~sP43('T_0','F_0','T_0') | $spl62),
  inference(unit_resulting_resolution,[],[f1059,f1600,f1056,f12909,f930])).
fof(f16181,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f13503,f13916])).
fof(f13916,plain,(
  ( ! [X0] : (~sP44(X0,'T_0','F_0')) ) | $spl62),
  inference(unit_resulting_resolution,[],[f1102,f12909,f947])).
fof(f13503,plain,(
  ( ! [X0] : (sP44(X0,'T_0','F_0')) ) | $spl62),
  inference(unit_resulting_resolution,[],[f1059,f1053,f1056,f12909,f930])).
fof(f16180,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f13506,f13809])).
fof(f13506,plain,(
  ~sP41('F_0','T_0','T_0') | $spl62),
  inference(unit_resulting_resolution,[],[f1600,f1053,f1056,f12909,f930])).
fof(f16179,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f13513,f13916])).
fof(f13513,plain,(
  ( ! [X0] : (sP44(X0,'T_0','F_0')) ) | $spl62),
  inference(unit_resulting_resolution,[],[f1059,f1052,f1056,f12909,f930])).
fof(f16178,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f13514,f1600])).
fof(f13514,plain,(
  sP44('T_0','T_0','F_0') | $spl62),
  inference(unit_resulting_resolution,[],[f1058,f1052,f1056,f12909,f930])).
fof(f16177,plain,(
  $false | ($spl8 | $spl62)),
  inference(subsumption_resolution,[],[f13515,f13916])).
fof(f13515,plain,(
  sP44('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'T_0','F_0') | ($spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f1075,f1052,f1056,f12909,f930])).
fof(f16176,plain,(
  $false | ($spl6 | $spl62)),
  inference(subsumption_resolution,[],[f13516,f13916])).
fof(f13516,plain,(
  sP44('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)),'T_0','F_0') | ($spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f1094,f1052,f1056,f12909,f930])).
fof(f16175,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f13517,f13809])).
fof(f13517,plain,(
  ~sP41('F_0','T_0','T_0') | $spl62),
  inference(unit_resulting_resolution,[],[f1600,f1052,f1056,f12909,f930])).
fof(f16174,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f13533,f13916])).
fof(f13533,plain,(
  sP44('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)),'T_0','F_0') | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1059,f1446,f1056,f12909,f930])).
fof(f1446,plain,(
  ( ! [X0,X1] : (sP43('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)),X0,X1)) ) | $spl1),
  inference(unit_resulting_resolution,[],[f1040,f936])).
fof(f16173,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f13541,f13751])).
fof(f13541,plain,(
  ~sP43('T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)),'T_0') | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1059,f5290,f1447,f12909,f930])).
fof(f1447,plain,(
  ( ! [X0,X1] : (sP42(X0,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)),X1)) ) | $spl1),
  inference(unit_resulting_resolution,[],[f1040,f939])).
fof(f16172,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f13545,f13920])).
fof(f13920,plain,(
  ( ! [X0] : (~sP44(X0,'T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) ) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1415,f12909,f947])).
fof(f13545,plain,(
  ( ! [X0] : (sP44(X0,'T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) ) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1059,f1445,f1447,f12909,f930])).
fof(f16171,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f13548,f13809])).
fof(f13548,plain,(
  ~sP41('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)),'T_0','T_0') | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f5290,f1445,f1447,f12909,f930])).
fof(f16170,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f13551,f13920])).
fof(f13551,plain,(
  ( ! [X0] : (sP44(X0,'T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) ) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1059,f1052,f1447,f12909,f930])).
fof(f16169,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f13552,f5290])).
fof(f13552,plain,(
  sP44('T_0','T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54))) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1058,f1052,f1447,f12909,f930])).
fof(f16168,plain,(
  $false | ($spl1 | $spl8 | $spl62)),
  inference(subsumption_resolution,[],[f13553,f13920])).
fof(f13553,plain,(
  sP44('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54))) | ($spl1 | $spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f1075,f1052,f1447,f12909,f930])).
fof(f16167,plain,(
  $false | ($spl1 | $spl6 | $spl62)),
  inference(subsumption_resolution,[],[f13554,f13920])).
fof(f13554,plain,(
  sP44('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)),'T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54))) | ($spl1 | $spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f1094,f1052,f1447,f12909,f930])).
fof(f16166,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f13555,f13809])).
fof(f13555,plain,(
  ~sP41('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)),'T_0','T_0') | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f5290,f1052,f1447,f12909,f930])).
fof(f16165,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f13569,f13920])).
fof(f13569,plain,(
  sP44('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)),'T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54))) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1059,f1446,f1447,f12909,f930])).
fof(f16164,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13575,f13751])).
fof(f13575,plain,(
  ( ! [X0] : (~sP43('T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'T_0')) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f1059,f2987,f3024,f12909,f930])).
fof(f16163,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13576,f13751])).
fof(f13576,plain,(
  ( ! [X0] : (~sP43('T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'T_0')) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f1058,f2987,f3024,f12909,f930])).
fof(f16162,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13580,f13918])).
fof(f13918,plain,(
  ( ! [X0,X1] : (~sP44(X0,'T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f2943,f12909,f947])).
fof(f13580,plain,(
  ( ! [X0,X1] : (sP44(X0,'T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f1059,f3017,f3024,f12909,f930])).
fof(f16161,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13583,f13809])).
fof(f13583,plain,(
  ( ! [X0] : (~sP41('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'T_0','T_0')) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f2987,f3017,f3024,f12909,f930])).
fof(f16160,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13588,f13918])).
fof(f13588,plain,(
  ( ! [X0,X1] : (sP44(X0,'T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f1059,f1052,f3024,f12909,f930])).
fof(f16159,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13589,f2987])).
fof(f13589,plain,(
  ( ! [X0] : (sP44('T_0','T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f1058,f1052,f3024,f12909,f930])).
fof(f16158,plain,(
  $false | ($spl4 | $spl8 | $spl62)),
  inference(subsumption_resolution,[],[f13590,f13918])).
fof(f13590,plain,(
  ( ! [X0] : (sP44('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | ($spl4 | $spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f1075,f1052,f3024,f12909,f930])).
fof(f16157,plain,(
  $false | ($spl4 | $spl6 | $spl62)),
  inference(subsumption_resolution,[],[f13591,f13918])).
fof(f13591,plain,(
  ( ! [X0] : (sP44('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)),'T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | ($spl4 | $spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f1094,f1052,f3024,f12909,f930])).
fof(f16156,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13592,f13809])).
fof(f13592,plain,(
  ( ! [X0] : (~sP41('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'T_0','T_0')) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f2987,f1052,f3024,f12909,f930])).
fof(f16155,plain,(
  $false | ($spl1 | $spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13607,f13918])).
fof(f13607,plain,(
  ( ! [X0] : (sP44('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)),'T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | ($spl1 | $spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f1059,f1446,f3024,f12909,f930])).
fof(f16154,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13610,f13918])).
fof(f13610,plain,(
  ( ! [X0,X1] : (sP44('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f1059,f3018,f3024,f12909,f930])).
fof(f16153,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f13698,f12909])).
fof(f13698,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1445,f1048,f12909,f933])).
fof(f16152,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13699,f12909])).
fof(f13699,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3017,f1048,f12909,f933])).
fof(f16151,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f13700,f12909])).
fof(f13700,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl62),
  inference(unit_resulting_resolution,[],[f1054,f1048,f12909,f933])).
fof(f16150,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f13701,f12909])).
fof(f13701,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1446,f1048,f12909,f933])).
fof(f16149,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13702,f12909])).
fof(f13702,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3018,f1048,f12909,f933])).
fof(f16148,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f13722,f13751])).
fof(f13722,plain,(
  ( ! [X0,X1] : (~sP43(X0,X1,'F_0')) ) | $spl62),
  inference(unit_resulting_resolution,[],[f1048,f12909,f12909,f933])).
fof(f16147,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f13724,f12909])).
fof(f13724,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl62),
  inference(unit_resulting_resolution,[],[f1053,f1048,f12909,f933])).
fof(f16146,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f13725,f12909])).
fof(f13725,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1445,f1048,f12909,f933])).
fof(f16145,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13726,f12909])).
fof(f13726,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3017,f1048,f12909,f933])).
fof(f16144,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f13728,f12909])).
fof(f13728,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1446,f1048,f12909,f933])).
fof(f16143,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13729,f12909])).
fof(f13729,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3018,f1048,f12909,f933])).
fof(f16142,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f13737,f13751])).
fof(f13737,plain,(
  ( ! [X0] : (~sP43('T_0',X0,'F_0')) ) | $spl62),
  inference(unit_resulting_resolution,[],[f1048,f531,f12909,f933])).
fof(f16141,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f13749,f13751])).
fof(f13749,plain,(
  ( ! [X0,X1] : (~sP43(X0,X1,'F_0')) ) | $spl62),
  inference(unit_resulting_resolution,[],[f1048,f12909,f12909,f933])).
fof(f16140,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f13754,f12909])).
fof(f13754,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1447,f1048,f12909,f937])).
fof(f16139,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13755,f12909])).
fof(f13755,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3024,f1048,f12909,f937])).
fof(f16138,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f13756,f12909])).
fof(f13756,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl62),
  inference(unit_resulting_resolution,[],[f1057,f1048,f12909,f937])).
fof(f16137,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f13757,f12909])).
fof(f13757,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1448,f1048,f12909,f937])).
fof(f1448,plain,(
  ( ! [X0,X1] : (sP42('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)),X0,X1)) ) | $spl1),
  inference(unit_resulting_resolution,[],[f1040,f940])).
fof(f16136,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13758,f12909])).
fof(f13758,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3025,f1048,f12909,f937])).
fof(f16135,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f13776,f13803])).
fof(f13776,plain,(
  ( ! [X0,X1] : (~sP42(X0,X1,'F_0')) ) | $spl62),
  inference(unit_resulting_resolution,[],[f1048,f12909,f12909,f937])).
fof(f16134,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f13778,f12909])).
fof(f13778,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl62),
  inference(unit_resulting_resolution,[],[f1056,f1048,f12909,f937])).
fof(f16133,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f13779,f12909])).
fof(f13779,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1447,f1048,f12909,f937])).
fof(f16132,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13780,f12909])).
fof(f13780,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3024,f1048,f12909,f937])).
fof(f16131,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f13782,f12909])).
fof(f13782,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1448,f1048,f12909,f937])).
fof(f16130,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13783,f12909])).
fof(f13783,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3025,f1048,f12909,f937])).
fof(f16129,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f13790,f13803])).
fof(f13790,plain,(
  ( ! [X0] : (~sP42('T_0',X0,'F_0')) ) | $spl62),
  inference(unit_resulting_resolution,[],[f1048,f531,f12909,f937])).
fof(f16128,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f13801,f13803])).
fof(f13801,plain,(
  ( ! [X0,X1] : (~sP42(X0,X1,'F_0')) ) | $spl62),
  inference(unit_resulting_resolution,[],[f1048,f12909,f12909,f937])).
fof(f16122,plain,(
  $false | ($spl6 | $spl62)),
  inference(subsumption_resolution,[],[f13822,f1111])).
fof(f13822,plain,(
  s(bool,'T_0') != s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56))) | ($spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f2049,f12909,f946])).
fof(f2049,plain,(
  ~sP44('F_0','T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56))) | $spl6),
  inference(unit_resulting_resolution,[],[f1048,f1111,f948])).
fof(f16121,plain,(
  $false | ($spl8 | $spl62)),
  inference(subsumption_resolution,[],[f13823,f1110])).
fof(f13823,plain,(
  s(bool,'T_0') != s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | ($spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f1757,f12909,f946])).
fof(f16120,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f13824,f538])).
fof(f13824,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.bool.BOUNDED_1'(s(bool,X0)))) ) | $spl62),
  inference(unit_resulting_resolution,[],[f1609,f12909,f946])).
fof(f16119,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13826,f2947])).
fof(f13826,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3600,f12909,f946])).
fof(f16118,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f13827,f1416])).
fof(f13827,plain,(
  s(bool,'F_0') != s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54))) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f5353,f12909,f946])).
fof(f5353,plain,(
  ~sP44('F_0','F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54))) | $spl1),
  inference(unit_resulting_resolution,[],[f1048,f1416,f948])).
fof(f16117,plain,(
  $false | ($spl6 | $spl62)),
  inference(subsumption_resolution,[],[f13828,f1111])).
fof(f13828,plain,(
  s(bool,'T_0') != s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56))) | ($spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f2047,f12909,f946])).
fof(f2047,plain,(
  ~sP44('F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)),'T_0') | $spl6),
  inference(unit_resulting_resolution,[],[f1048,f1111,f948])).
fof(f16116,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13829,f2947])).
fof(f13829,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3605,f12909,f946])).
fof(f16115,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f13830,f1416])).
fof(f13830,plain,(
  s(bool,'F_0') != s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54))) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f5323,f12909,f946])).
fof(f5323,plain,(
  ~sP44('F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)),'F_0') | $spl1),
  inference(unit_resulting_resolution,[],[f1048,f1416,f948])).
fof(f16114,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f16113,f2947])).
fof(f16113,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | ($spl4 | $spl62)),
  inference(forward_demodulation,[],[f13831,f2947])).
fof(f13831,plain,(
  ( ! [X0,X1] : (s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))) != s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f7014,f12909,f946])).
fof(f16112,plain,(
  $false | ($spl6 | $spl62)),
  inference(subsumption_resolution,[],[f16111,f538])).
fof(f16111,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.bool.BOUNDED_1'(s(bool,X0)))) ) | ($spl6 | $spl62)),
  inference(forward_demodulation,[],[f13832,f1111])).
fof(f13832,plain,(
  ( ! [X0] : (s(bool,'const.bool.BOUNDED_1'(s(bool,X0))) != s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)))) ) | ($spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f4536,f12909,f946])).
fof(f4536,plain,(
  ( ! [X0] : (~sP44('F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)),'const.bool.BOUNDED_1'(s(bool,X0)))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f4521,f927])).
fof(f4521,plain,(
  ( ! [X0] : (~sP42('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)),'const.bool.BOUNDED_1'(s(bool,X0)),'F_0')) ) | $spl6),
  inference(unit_resulting_resolution,[],[f1048,f4431])).
fof(f4431,plain,(
  ( ! [X6,X7] : (~sP42('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)),'const.bool.BOUNDED_1'(s(bool,X7)),X6) | p(s(bool,X6))) ) | $spl6),
  inference(subsumption_resolution,[],[f4423,f531])).
fof(f4423,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | p(s(bool,X6)) | ~sP42('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)),'const.bool.BOUNDED_1'(s(bool,X7)),X6)) ) | $spl6),
  inference(superposition,[],[f1677,f1111])).
fof(f16110,plain,(
  $false | ($spl8 | $spl62)),
  inference(subsumption_resolution,[],[f13833,f1110])).
fof(f13833,plain,(
  s(bool,'T_0') != s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | ($spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f1755,f12909,f946])).
fof(f16109,plain,(
  $false | ($spl8 | $spl62)),
  inference(subsumption_resolution,[],[f16108,f538])).
fof(f16108,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.bool.BOUNDED_1'(s(bool,X0)))) ) | ($spl8 | $spl62)),
  inference(forward_demodulation,[],[f13834,f1110])).
fof(f13834,plain,(
  ( ! [X0] : (s(bool,'const.bool.BOUNDED_1'(s(bool,X0))) != s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | ($spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f4449,f12909,f946])).
fof(f16107,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f13835,f538])).
fof(f13835,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.bool.BOUNDED_1'(s(bool,X0)))) ) | $spl62),
  inference(unit_resulting_resolution,[],[f1607,f12909,f946])).
fof(f16106,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f16105,f538])).
fof(f16105,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.bool.BOUNDED_1'(s(bool,X0)))) ) | $spl62),
  inference(forward_demodulation,[],[f13836,f538])).
fof(f13836,plain,(
  ( ! [X0,X1] : (s(bool,'const.bool.BOUNDED_1'(s(bool,X0))) != s(bool,'const.bool.BOUNDED_1'(s(bool,X1)))) ) | $spl62),
  inference(unit_resulting_resolution,[],[f4489,f12909,f946])).
fof(f16104,plain,(
  $false | ($spl4 | $spl6 | $spl62)),
  inference(subsumption_resolution,[],[f13838,f1111])).
fof(f13838,plain,(
  s(bool,'T_0') != s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56))) | ($spl4 | $spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f3063,f12909,f946])).
fof(f16103,plain,(
  $false | ($spl4 | $spl8 | $spl62)),
  inference(subsumption_resolution,[],[f13839,f1110])).
fof(f13839,plain,(
  s(bool,'T_0') != s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | ($spl4 | $spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f3062,f12909,f946])).
fof(f3062,plain,(
  ( ! [X0] : (~sP44('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'T_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | ($spl4 | $spl8)),
  inference(unit_resulting_resolution,[],[f1110,f2937,f948])).
fof(f16102,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13840,f538])).
fof(f13840,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.bool.BOUNDED_1'(s(bool,X0)))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3061,f12909,f946])).
fof(f16101,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13842,f2947])).
fof(f13842,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f7020,f12909,f946])).
fof(f16100,plain,(
  $false | ($spl4 | $spl6 | $spl62)),
  inference(subsumption_resolution,[],[f13843,f1111])).
fof(f13843,plain,(
  s(bool,'T_0') != s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56))) | ($spl4 | $spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f3060,f12909,f946])).
fof(f3060,plain,(
  ( ! [X0] : (~sP44('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)),'T_0')) ) | ($spl4 | $spl6)),
  inference(unit_resulting_resolution,[],[f1111,f2937,f948])).
fof(f16099,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13844,f2947])).
fof(f13844,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f7026,f12909,f946])).
fof(f16098,plain,(
  $false | ($spl4 | $spl8 | $spl62)),
  inference(subsumption_resolution,[],[f13845,f1110])).
fof(f13845,plain,(
  s(bool,'T_0') != s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | ($spl4 | $spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f3059,f12909,f946])).
fof(f3059,plain,(
  ( ! [X0] : (~sP44('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'T_0')) ) | ($spl4 | $spl8)),
  inference(unit_resulting_resolution,[],[f1110,f2937,f948])).
fof(f16097,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13846,f538])).
fof(f13846,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.bool.BOUNDED_1'(s(bool,X0)))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3058,f12909,f946])).
fof(f16093,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f13882,f1102])).
fof(f13882,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl62),
  inference(unit_resulting_resolution,[],[f1574,f12909,f947])).
fof(f16092,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13883,f2943])).
fof(f13883,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3568,f12909,f947])).
fof(f16091,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f13884,f1415])).
fof(f13884,plain,(
  s(bool,'T_0') = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54))) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f2777,f12909,f947])).
fof(f2777,plain,(
  sP44('F_0','T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54))) | $spl1),
  inference(unit_resulting_resolution,[],[f1048,f1059,f1054,f1447,f932])).
fof(f16090,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f13885,f1102])).
fof(f13885,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl62),
  inference(unit_resulting_resolution,[],[f1573,f12909,f947])).
fof(f16089,plain,(
  $false | ($spl8 | $spl62)),
  inference(subsumption_resolution,[],[f16088,f1102])).
fof(f16088,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl8 | $spl62)),
  inference(forward_demodulation,[],[f13886,f1110])).
fof(f13886,plain,(
  s(bool,'F_0') = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | ($spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f2262,f12909,f947])).
fof(f16087,plain,(
  $false | ($spl6 | $spl62)),
  inference(subsumption_resolution,[],[f16086,f1102])).
fof(f16086,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl6 | $spl62)),
  inference(forward_demodulation,[],[f13887,f1111])).
fof(f13887,plain,(
  s(bool,'F_0') = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56))) | ($spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f2261,f12909,f947])).
fof(f2261,plain,(
  sP44('F_0','F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56))) | $spl6),
  inference(unit_resulting_resolution,[],[f1096,f1054,f1057,f1048,f931])).
fof(f16085,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13888,f2943])).
fof(f13888,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3589,f12909,f947])).
fof(f16084,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f13889,f1415])).
fof(f13889,plain,(
  s(bool,'T_0') = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54))) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f2788,f12909,f947])).
fof(f2788,plain,(
  sP44('F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)),'T_0') | $spl1),
  inference(unit_resulting_resolution,[],[f531,f1060,f1054,f1448,f930])).
fof(f16083,plain,(
  $false | ($spl6 | $spl62)),
  inference(subsumption_resolution,[],[f16082,f1102])).
fof(f16082,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl6 | $spl62)),
  inference(forward_demodulation,[],[f13890,f1111])).
fof(f13890,plain,(
  s(bool,'F_0') = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56))) | ($spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f2308,f12909,f947])).
fof(f16081,plain,(
  $false | ($spl4 | $spl6 | $spl62)),
  inference(subsumption_resolution,[],[f16080,f1102])).
fof(f16080,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl4 | $spl6 | $spl62)),
  inference(forward_demodulation,[],[f16079,f1111])).
fof(f16079,plain,(
  s(bool,'F_0') = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56))) | ($spl4 | $spl6 | $spl62)),
  inference(forward_demodulation,[],[f13891,f2947])).
fof(f13891,plain,(
  ( ! [X0] : (s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56))) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | ($spl4 | $spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f3569,f12909,f947])).
fof(f3569,plain,(
  ( ! [X0] : (sP44('F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | ($spl4 | $spl6)),
  inference(unit_resulting_resolution,[],[f1048,f1095,f1054,f3024,f932])).
fof(f16078,plain,(
  $false | ($spl4 | $spl6 | $spl62)),
  inference(subsumption_resolution,[],[f16077,f1102])).
fof(f16077,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl4 | $spl6 | $spl62)),
  inference(forward_demodulation,[],[f16076,f1111])).
fof(f16076,plain,(
  s(bool,'F_0') = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56))) | ($spl4 | $spl6 | $spl62)),
  inference(forward_demodulation,[],[f13892,f2947])).
fof(f13892,plain,(
  ( ! [X0] : (s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56))) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | ($spl4 | $spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f3587,f12909,f947])).
fof(f3587,plain,(
  ( ! [X0] : (sP44('F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)))) ) | ($spl4 | $spl6)),
  inference(unit_resulting_resolution,[],[f1048,f1096,f1054,f3025,f932])).
fof(f16075,plain,(
  $false | ($spl4 | $spl8 | $spl62)),
  inference(subsumption_resolution,[],[f16074,f1102])).
fof(f16074,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl4 | $spl8 | $spl62)),
  inference(forward_demodulation,[],[f16073,f1110])).
fof(f16073,plain,(
  s(bool,'F_0') = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | ($spl4 | $spl8 | $spl62)),
  inference(forward_demodulation,[],[f13893,f2947])).
fof(f13893,plain,(
  ( ! [X0] : (s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | ($spl4 | $spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f3588,f12909,f947])).
fof(f3588,plain,(
  ( ! [X0] : (sP44('F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | ($spl4 | $spl8)),
  inference(unit_resulting_resolution,[],[f1048,f1077,f1054,f3025,f932])).
fof(f16072,plain,(
  $false | ($spl8 | $spl62)),
  inference(subsumption_resolution,[],[f16071,f1102])).
fof(f16071,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl8 | $spl62)),
  inference(forward_demodulation,[],[f13894,f1110])).
fof(f13894,plain,(
  s(bool,'F_0') = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | ($spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f2307,f12909,f947])).
fof(f16070,plain,(
  $false | ($spl4 | $spl8 | $spl62)),
  inference(subsumption_resolution,[],[f16069,f1102])).
fof(f16069,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl4 | $spl8 | $spl62)),
  inference(forward_demodulation,[],[f16068,f1110])).
fof(f16068,plain,(
  s(bool,'F_0') = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | ($spl4 | $spl8 | $spl62)),
  inference(forward_demodulation,[],[f13895,f2947])).
fof(f13895,plain,(
  ( ! [X0] : (s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | ($spl4 | $spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f3570,f12909,f947])).
fof(f3570,plain,(
  ( ! [X0] : (sP44('F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | ($spl4 | $spl8)),
  inference(unit_resulting_resolution,[],[f1048,f1076,f1054,f3024,f932])).
fof(f16067,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f13902,f1102])).
fof(f13902,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f2766,f12909,f947])).
fof(f2766,plain,(
  sP44('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)),'F_0','T_0') | $spl1),
  inference(unit_resulting_resolution,[],[f531,f1060,f1057,f1446,f930])).
fof(f16066,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13903,f1102])).
fof(f13903,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3057,f12909,f947])).
fof(f16065,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13904,f1102])).
fof(f13904,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3056,f12909,f947])).
fof(f16064,plain,(
  $false | ($spl4 | $spl8 | $spl62)),
  inference(subsumption_resolution,[],[f16063,f1102])).
fof(f16063,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl4 | $spl8 | $spl62)),
  inference(forward_demodulation,[],[f13905,f1110])).
fof(f13905,plain,(
  s(bool,'F_0') = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | ($spl4 | $spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f3548,f12909,f947])).
fof(f3548,plain,(
  ( ! [X0] : (sP44('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | ($spl4 | $spl8)),
  inference(unit_resulting_resolution,[],[f1048,f1077,f1057,f3018,f931])).
fof(f16062,plain,(
  $false | ($spl4 | $spl6 | $spl62)),
  inference(subsumption_resolution,[],[f16061,f1102])).
fof(f16061,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl4 | $spl6 | $spl62)),
  inference(forward_demodulation,[],[f13906,f1111])).
fof(f13906,plain,(
  s(bool,'F_0') = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56))) | ($spl4 | $spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f3547,f12909,f947])).
fof(f3547,plain,(
  ( ! [X0] : (sP44('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)))) ) | ($spl4 | $spl6)),
  inference(unit_resulting_resolution,[],[f1048,f1096,f1057,f3018,f931])).
fof(f16060,plain,(
  $false | ($spl4 | $spl6 | $spl62)),
  inference(subsumption_resolution,[],[f16059,f1102])).
fof(f16059,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl4 | $spl6 | $spl62)),
  inference(forward_demodulation,[],[f13907,f1111])).
fof(f13907,plain,(
  s(bool,'F_0') = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56))) | ($spl4 | $spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f3005,f12909,f947])).
fof(f16058,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13908,f2943])).
fof(f13908,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3591,f12909,f947])).
fof(f16057,plain,(
  $false | ($spl4 | $spl8 | $spl62)),
  inference(subsumption_resolution,[],[f16056,f1102])).
fof(f16056,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl4 | $spl8 | $spl62)),
  inference(forward_demodulation,[],[f13909,f1110])).
fof(f13909,plain,(
  s(bool,'F_0') = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55))) | ($spl4 | $spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f3004,f12909,f947])).
fof(f16055,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f13943,f14310])).
fof(f14310,plain,(
  ( ! [X2,X0,X1] : (sP46(X0,X1,X2)) ) | $spl62),
  inference(unit_resulting_resolution,[],[f12909,f12909,f12909,f962])).
fof(f13943,plain,(
  ( ! [X0,X1] : (~sP46(X0,X1,'F_0')) ) | $spl62),
  inference(unit_resulting_resolution,[],[f1048,f12909,f950])).
fof(f16054,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f13960,f14310])).
fof(f13960,plain,(
  ( ! [X0,X1] : (~sP46(X0,'F_0',X1)) ) | $spl62),
  inference(unit_resulting_resolution,[],[f1048,f12909,f951])).
fof(f16053,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f13963,f12909])).
fof(f13963,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1453,f1449,f12909,f952])).
fof(f1449,plain,(
  ( ! [X0] : (~sP46('T_0',X0,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl1),
  inference(unit_resulting_resolution,[],[f531,f1040,f950])).
fof(f1453,plain,(
  ( ! [X0,X1] : (sP45(X0,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)),X1)) ) | $spl1),
  inference(unit_resulting_resolution,[],[f1040,f958])).
fof(f16052,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13964,f12909])).
fof(f13964,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3075,f3064,f12909,f952])).
fof(f16051,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13965,f12909])).
fof(f13965,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f1061,f3064,f12909,f952])).
fof(f16050,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13966,f12909])).
fof(f13966,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f1063,f3064,f12909,f952])).
fof(f16049,plain,(
  $false | ($spl1 | $spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13967,f12909])).
fof(f13967,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl1 | $spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f1454,f3064,f12909,f952])).
fof(f1454,plain,(
  ( ! [X0,X1] : (sP45('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)),X0,X1)) ) | $spl1),
  inference(unit_resulting_resolution,[],[f1040,f959])).
fof(f16048,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13968,f12909])).
fof(f13968,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3076,f3064,f12909,f952])).
fof(f16047,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f13969,f12909])).
fof(f13969,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl62),
  inference(unit_resulting_resolution,[],[f1063,f1191,f12909,f952])).
fof(f16046,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f13970,f12909])).
fof(f13970,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl62),
  inference(unit_resulting_resolution,[],[f1061,f1191,f12909,f952])).
fof(f16045,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f13972,f12909])).
fof(f13972,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1453,f1191,f12909,f952])).
fof(f16044,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13973,f12909])).
fof(f13973,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3075,f1191,f12909,f952])).
fof(f16043,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f13974,f12909])).
fof(f13974,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1454,f1451,f12909,f952])).
fof(f1451,plain,(
  ( ! [X0] : (~sP46('T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)),X0)) ) | $spl1),
  inference(unit_resulting_resolution,[],[f531,f1040,f951])).
fof(f16042,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f13975,f12909])).
fof(f13975,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1061,f1451,f12909,f952])).
fof(f16041,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f13977,f12909])).
fof(f13977,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1453,f1451,f12909,f952])).
fof(f16040,plain,(
  $false | ($spl1 | $spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13978,f12909])).
fof(f13978,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl1 | $spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3075,f1451,f12909,f952])).
fof(f16039,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13979,f12909])).
fof(f13979,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3076,f3067,f12909,f952])).
fof(f16038,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13980,f12909])).
fof(f13980,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f1061,f3067,f12909,f952])).
fof(f16037,plain,(
  $false | ($spl1 | $spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13982,f12909])).
fof(f13982,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) | ($spl1 | $spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f1453,f3067,f12909,f952])).
fof(f16036,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13983,f12909])).
fof(f13983,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3075,f3067,f12909,f952])).
fof(f16035,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f13990,f14150])).
fof(f14150,plain,(
  ( ! [X2,X0,X1] : (sP45(X0,X1,X2)) ) | $spl62),
  inference(unit_resulting_resolution,[],[f12909,f957])).
fof(f13990,plain,(
  ~sP45('F_0','T_0','T_0') | $spl62),
  inference(unit_resulting_resolution,[],[f1191,f531,f12909,f952])).
fof(f16034,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f13992,f14150])).
fof(f13992,plain,(
  ~sP45('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)),'T_0','T_0') | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1451,f531,f12909,f952])).
fof(f16033,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f13994,f14150])).
fof(f13994,plain,(
  ( ! [X0] : (~sP45('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'T_0','T_0')) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3067,f531,f12909,f952])).
fof(f16032,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f14007,f14150])).
fof(f14007,plain,(
  ( ! [X0] : (~sP45(X0,'F_0','T_0')) ) | $spl62),
  inference(unit_resulting_resolution,[],[f1190,f12909,f12909,f952])).
fof(f16031,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14009,f14150])).
fof(f14009,plain,(
  ( ! [X0] : (~sP45(X0,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)),'T_0')) ) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1449,f12909,f12909,f952])).
fof(f16030,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14011,f14150])).
fof(f14011,plain,(
  ( ! [X0,X1] : (~sP45(X0,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'T_0')) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3064,f12909,f12909,f952])).
fof(f16029,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f14013,f14150])).
fof(f14013,plain,(
  ( ! [X0] : (~sP45('F_0',X0,'T_0')) ) | $spl62),
  inference(unit_resulting_resolution,[],[f1191,f12909,f12909,f952])).
fof(f16028,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14015,f14150])).
fof(f14015,plain,(
  ( ! [X0] : (~sP45('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)),X0,'T_0')) ) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1451,f12909,f12909,f952])).
fof(f16027,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14017,f14150])).
fof(f14017,plain,(
  ( ! [X0,X1] : (~sP45('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X1,'T_0')) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3067,f12909,f12909,f952])).
fof(f16026,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f14029,f12909])).
fof(f14029,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl62),
  inference(unit_resulting_resolution,[],[f1062,f1190,f12909,f952])).
fof(f16025,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f14030,f12909])).
fof(f14030,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl62),
  inference(unit_resulting_resolution,[],[f1061,f1190,f12909,f952])).
fof(f16024,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14032,f12909])).
fof(f14032,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1454,f1190,f12909,f952])).
fof(f16023,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14033,f12909])).
fof(f14033,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3076,f1190,f12909,f952])).
fof(f16022,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14034,f12909])).
fof(f14034,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1453,f1449,f12909,f952])).
fof(f16021,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14035,f12909])).
fof(f14035,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1061,f1449,f12909,f952])).
fof(f16020,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14037,f12909])).
fof(f14037,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1454,f1449,f12909,f952])).
fof(f16019,plain,(
  $false | ($spl1 | $spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14038,f12909])).
fof(f14038,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl1 | $spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3076,f1449,f12909,f952])).
fof(f16018,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14039,f12909])).
fof(f14039,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3075,f3064,f12909,f952])).
fof(f16017,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14040,f12909])).
fof(f14040,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f1061,f3064,f12909,f952])).
fof(f16016,plain,(
  $false | ($spl1 | $spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14042,f12909])).
fof(f14042,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) | ($spl1 | $spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f1454,f3064,f12909,f952])).
fof(f16015,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14043,f12909])).
fof(f14043,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3076,f3064,f12909,f952])).
fof(f16014,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14045,f12909])).
fof(f14045,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1454,f1451,f12909,f952])).
fof(f16013,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14046,f12909])).
fof(f14046,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3076,f3067,f12909,f952])).
fof(f16012,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14047,f12909])).
fof(f14047,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f1061,f3067,f12909,f952])).
fof(f16011,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14048,f12909])).
fof(f14048,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f1062,f3067,f12909,f952])).
fof(f16010,plain,(
  $false | ($spl1 | $spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14049,f12909])).
fof(f14049,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl1 | $spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f1453,f3067,f12909,f952])).
fof(f16009,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14050,f12909])).
fof(f14050,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3075,f3067,f12909,f952])).
fof(f16008,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f14057,f14150])).
fof(f14057,plain,(
  ~sP45('T_0','F_0','T_0') | $spl62),
  inference(unit_resulting_resolution,[],[f1190,f531,f12909,f952])).
fof(f16007,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14059,f14150])).
fof(f14059,plain,(
  ~sP45('T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)),'T_0') | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1449,f531,f12909,f952])).
fof(f16006,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14061,f14150])).
fof(f14061,plain,(
  ( ! [X0] : (~sP45('T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'T_0')) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3064,f531,f12909,f952])).
fof(f16005,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f14078,f14150])).
fof(f14078,plain,(
  ( ! [X0] : (~sP45(X0,'F_0','T_0')) ) | $spl62),
  inference(unit_resulting_resolution,[],[f1190,f12909,f12909,f952])).
fof(f16004,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14080,f14150])).
fof(f14080,plain,(
  ( ! [X0] : (~sP45(X0,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)),'T_0')) ) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1449,f12909,f12909,f952])).
fof(f16003,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14082,f14150])).
fof(f14082,plain,(
  ( ! [X0,X1] : (~sP45(X0,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'T_0')) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3064,f12909,f12909,f952])).
fof(f16002,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f14084,f14150])).
fof(f14084,plain,(
  ( ! [X0] : (~sP45('F_0',X0,'T_0')) ) | $spl62),
  inference(unit_resulting_resolution,[],[f1191,f12909,f12909,f952])).
fof(f16001,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14086,f14150])).
fof(f14086,plain,(
  ( ! [X0] : (~sP45('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)),X0,'T_0')) ) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1451,f12909,f12909,f952])).
fof(f16000,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14088,f14150])).
fof(f14088,plain,(
  ( ! [X0,X1] : (~sP45('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X1,'T_0')) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3067,f12909,f12909,f952])).
fof(f15999,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14101,f12909])).
fof(f14101,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1453,f1048,f12909,f956])).
fof(f15998,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14102,f12909])).
fof(f14102,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3075,f1048,f12909,f956])).
fof(f15997,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f14103,f12909])).
fof(f14103,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl62),
  inference(unit_resulting_resolution,[],[f1063,f1048,f12909,f956])).
fof(f15996,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14104,f12909])).
fof(f14104,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1454,f1048,f12909,f956])).
fof(f15995,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14105,f12909])).
fof(f14105,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3076,f1048,f12909,f956])).
fof(f15994,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f14123,f14150])).
fof(f14123,plain,(
  ( ! [X0,X1] : (~sP45(X0,X1,'F_0')) ) | $spl62),
  inference(unit_resulting_resolution,[],[f1048,f12909,f12909,f956])).
fof(f15993,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f14125,f12909])).
fof(f14125,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl62),
  inference(unit_resulting_resolution,[],[f1062,f1048,f12909,f956])).
fof(f15992,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14126,f12909])).
fof(f14126,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1453,f1048,f12909,f956])).
fof(f15991,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14127,f12909])).
fof(f14127,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3075,f1048,f12909,f956])).
fof(f15990,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14129,f12909])).
fof(f14129,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1454,f1048,f12909,f956])).
fof(f15989,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14130,f12909])).
fof(f14130,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3076,f1048,f12909,f956])).
fof(f15988,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f14137,f14150])).
fof(f14137,plain,(
  ( ! [X0] : (~sP45('T_0',X0,'F_0')) ) | $spl62),
  inference(unit_resulting_resolution,[],[f1048,f531,f12909,f956])).
fof(f15987,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f14148,f14150])).
fof(f14148,plain,(
  ( ! [X0,X1] : (~sP45(X0,X1,'F_0')) ) | $spl62),
  inference(unit_resulting_resolution,[],[f1048,f12909,f12909,f956])).
fof(f15986,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14153,f12909])).
fof(f14153,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1449,f531,f12909,f962])).
fof(f15985,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14154,f12909])).
fof(f14154,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3064,f531,f12909,f962])).
fof(f15984,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f14155,f12909])).
fof(f14155,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl62),
  inference(unit_resulting_resolution,[],[f1191,f531,f12909,f962])).
fof(f15983,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14156,f12909])).
fof(f14156,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1451,f531,f12909,f962])).
fof(f15982,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14157,f12909])).
fof(f14157,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3067,f531,f12909,f962])).
fof(f15981,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14159,f12909])).
fof(f14159,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1449,f12909,f12909,f962])).
fof(f15980,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14160,f12909])).
fof(f14160,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3064,f12909,f12909,f962])).
fof(f15979,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f14161,f12909])).
fof(f14161,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl62),
  inference(unit_resulting_resolution,[],[f1191,f12909,f12909,f962])).
fof(f15978,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14162,f12909])).
fof(f14162,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1451,f12909,f12909,f962])).
fof(f15977,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14163,f12909])).
fof(f14163,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3067,f12909,f12909,f962])).
fof(f15976,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f14164,f531])).
fof(f14164,plain,(
  ~p(s(bool,'T_0')) | $spl62),
  inference(unit_resulting_resolution,[],[f1728,f12909,f12909,f962])).
fof(f15975,plain,(
  $false | ($spl6 | $spl62)),
  inference(subsumption_resolution,[],[f14165,f12909])).
fof(f14165,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)))) | ($spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f5157,f12909,f12909,f962])).
fof(f5157,plain,(
  ~sP46('F_0','T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56))) | $spl6),
  inference(unit_resulting_resolution,[],[f5143,f949])).
fof(f5143,plain,(
  ~sP45('T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)),'F_0') | $spl6),
  inference(unit_resulting_resolution,[],[f531,f1048,f2134])).
fof(f2134,plain,(
  ( ! [X17,X18] : (~sP45(X17,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)),X18) | p(s(bool,X18)) | ~p(s(bool,X17))) ) | $spl6),
  inference(subsumption_resolution,[],[f2070,f531])).
fof(f2070,plain,(
  ( ! [X17,X18] : (~p(s(bool,'T_0')) | ~p(s(bool,X17)) | p(s(bool,X18)) | ~sP45(X17,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)),X18)) ) | $spl6),
  inference(superposition,[],[f956,f1111])).
fof(f15974,plain,(
  $false | ($spl8 | $spl62)),
  inference(subsumption_resolution,[],[f14166,f12909])).
fof(f14166,plain,(
  ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) | ($spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f2514,f12909,f12909,f962])).
fof(f15973,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f14167,f12909])).
fof(f14167,plain,(
  ( ! [X0] : (~p(s(bool,'const.bool.BOUNDED_1'(s(bool,X0))))) ) | $spl62),
  inference(unit_resulting_resolution,[],[f4578,f12909,f12909,f962])).
fof(f15972,plain,(
  $false | ($spl6 | $spl62)),
  inference(subsumption_resolution,[],[f14168,f12909])).
fof(f14168,plain,(
  ( ! [X0] : (~p(s(bool,'const.bool.BOUNDED_1'(s(bool,X0))))) ) | ($spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f4699,f12909,f12909,f962])).
fof(f4699,plain,(
  ( ! [X0] : (~sP46('F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)),'const.bool.BOUNDED_1'(s(bool,X0)))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f4684,f949])).
fof(f4684,plain,(
  ( ! [X0] : (~sP45('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)),'const.bool.BOUNDED_1'(s(bool,X0)),'F_0')) ) | $spl6),
  inference(unit_resulting_resolution,[],[f1048,f4572])).
fof(f4572,plain,(
  ( ! [X6,X7] : (~sP45('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)),'const.bool.BOUNDED_1'(s(bool,X7)),X6) | p(s(bool,X6))) ) | $spl6),
  inference(subsumption_resolution,[],[f4564,f531])).
fof(f4564,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | p(s(bool,X6)) | ~sP45('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)),'const.bool.BOUNDED_1'(s(bool,X7)),X6)) ) | $spl6),
  inference(superposition,[],[f1724,f1111])).
fof(f15971,plain,(
  $false | ($spl8 | $spl62)),
  inference(subsumption_resolution,[],[f14169,f12909])).
fof(f14169,plain,(
  ( ! [X0] : (~p(s(bool,'const.bool.BOUNDED_1'(s(bool,X0))))) ) | ($spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f4611,f12909,f12909,f962])).
fof(f15970,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f14170,f12909])).
fof(f14170,plain,(
  ( ! [X0] : (~p(s(bool,'const.bool.BOUNDED_1'(s(bool,X0))))) ) | $spl62),
  inference(unit_resulting_resolution,[],[f4652,f12909,f12909,f962])).
fof(f15969,plain,(
  $false | ($spl6 | $spl62)),
  inference(subsumption_resolution,[],[f14171,f12909])).
fof(f14171,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)))) | ($spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f5178,f12909,f12909,f962])).
fof(f5178,plain,(
  ( ! [X0] : (~sP46('F_0','const.bool.BOUNDED_1'(s(bool,X0)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f1048,f5177])).
fof(f5177,plain,(
  ( ! [X8,X9] : (~sP46(X9,'const.bool.BOUNDED_1'(s(bool,X8)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56))) | p(s(bool,X9))) ) | $spl6),
  inference(subsumption_resolution,[],[f5172,f531])).
fof(f5172,plain,(
  ( ! [X8,X9] : (~p(s(bool,'T_0')) | p(s(bool,X9)) | ~sP46(X9,'const.bool.BOUNDED_1'(s(bool,X8)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)))) ) | $spl6),
  inference(superposition,[],[f2135,f538])).
fof(f15968,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14172,f531])).
fof(f14172,plain,(
  ~p(s(bool,'T_0')) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3089,f12909,f12909,f962])).
fof(f15967,plain,(
  $false | ($spl4 | $spl8 | $spl62)),
  inference(subsumption_resolution,[],[f14173,f12909])).
fof(f14173,plain,(
  ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) | ($spl4 | $spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f3230,f12909,f12909,f962])).
fof(f3230,plain,(
  ( ! [X0] : (~sP46('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'T_0','const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | ($spl4 | $spl8)),
  inference(unit_resulting_resolution,[],[f531,f2937,f1835])).
fof(f15966,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f14174,f531])).
fof(f14174,plain,(
  ~p(s(bool,'T_0')) | $spl62),
  inference(unit_resulting_resolution,[],[f1191,f531,f12909,f962])).
fof(f15965,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14175,f531])).
fof(f14175,plain,(
  ~p(s(bool,'T_0')) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1451,f531,f12909,f962])).
fof(f15964,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14176,f531])).
fof(f14176,plain,(
  ~p(s(bool,'T_0')) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3067,f531,f12909,f962])).
fof(f15963,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14178,f12909])).
fof(f14178,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3089,f531,f12909,f962])).
fof(f15962,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f14183,f531])).
fof(f14183,plain,(
  ~p(s(bool,'T_0')) | $spl62),
  inference(unit_resulting_resolution,[],[f1190,f12909,f12909,f962])).
fof(f15961,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14184,f531])).
fof(f14184,plain,(
  ~p(s(bool,'T_0')) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1449,f12909,f12909,f962])).
fof(f15960,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14185,f531])).
fof(f14185,plain,(
  ~p(s(bool,'T_0')) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3064,f12909,f12909,f962])).
fof(f15959,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f14186,f531])).
fof(f14186,plain,(
  ~p(s(bool,'T_0')) | $spl62),
  inference(unit_resulting_resolution,[],[f1191,f12909,f12909,f962])).
fof(f15958,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14187,f531])).
fof(f14187,plain,(
  ~p(s(bool,'T_0')) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1451,f12909,f12909,f962])).
fof(f15957,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14188,f531])).
fof(f14188,plain,(
  ~p(s(bool,'T_0')) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3067,f12909,f12909,f962])).
fof(f15956,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14197,f12909])).
fof(f14197,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3089,f12909,f12909,f962])).
fof(f15955,plain,(
  $false | ($spl4 | $spl8 | $spl62)),
  inference(subsumption_resolution,[],[f14198,f12909])).
fof(f14198,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f3230,f12909,f12909,f962])).
fof(f15954,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f14203,f12909])).
fof(f14203,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl62),
  inference(unit_resulting_resolution,[],[f1190,f531,f12909,f962])).
fof(f15953,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14204,f12909])).
fof(f14204,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1449,f531,f12909,f962])).
fof(f15952,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14205,f12909])).
fof(f14205,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3064,f531,f12909,f962])).
fof(f15951,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14207,f12909])).
fof(f14207,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1451,f531,f12909,f962])).
fof(f15950,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14208,f12909])).
fof(f14208,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3067,f531,f12909,f962])).
fof(f15949,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f14209,f12909])).
fof(f14209,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl62),
  inference(unit_resulting_resolution,[],[f1190,f12909,f12909,f962])).
fof(f15948,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14210,f12909])).
fof(f14210,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1449,f12909,f12909,f962])).
fof(f15947,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14211,f12909])).
fof(f14211,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3064,f12909,f12909,f962])).
fof(f15946,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14213,f12909])).
fof(f14213,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1451,f12909,f12909,f962])).
fof(f15945,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14214,f12909])).
fof(f14214,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3067,f12909,f12909,f962])).
fof(f15944,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f14215,f531])).
fof(f14215,plain,(
  ~p(s(bool,'T_0')) | $spl62),
  inference(unit_resulting_resolution,[],[f1728,f12909,f12909,f962])).
fof(f15943,plain,(
  $false | ($spl6 | $spl62)),
  inference(subsumption_resolution,[],[f14216,f531])).
fof(f14216,plain,(
  ~p(s(bool,'T_0')) | ($spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f5157,f12909,f12909,f962])).
fof(f15942,plain,(
  $false | ($spl8 | $spl62)),
  inference(subsumption_resolution,[],[f14217,f531])).
fof(f14217,plain,(
  ~p(s(bool,'T_0')) | ($spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f2514,f12909,f12909,f962])).
fof(f15941,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f14218,f531])).
fof(f14218,plain,(
  ~p(s(bool,'T_0')) | $spl62),
  inference(unit_resulting_resolution,[],[f4578,f12909,f12909,f962])).
fof(f15940,plain,(
  $false | ($spl6 | $spl62)),
  inference(subsumption_resolution,[],[f14219,f12909])).
fof(f14219,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)))) | ($spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f4699,f12909,f12909,f962])).
fof(f15939,plain,(
  $false | ($spl8 | $spl62)),
  inference(subsumption_resolution,[],[f14220,f12909])).
fof(f14220,plain,(
  ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) | ($spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f4611,f12909,f12909,f962])).
fof(f15938,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f14221,f12909])).
fof(f14221,plain,(
  ( ! [X0] : (~p(s(bool,'const.bool.BOUNDED_1'(s(bool,X0))))) ) | $spl62),
  inference(unit_resulting_resolution,[],[f4652,f12909,f12909,f962])).
fof(f15937,plain,(
  $false | ($spl6 | $spl62)),
  inference(subsumption_resolution,[],[f14222,f12909])).
fof(f14222,plain,(
  ( ! [X0] : (~p(s(bool,'const.bool.BOUNDED_1'(s(bool,X0))))) ) | ($spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f5178,f12909,f12909,f962])).
fof(f15936,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14223,f531])).
fof(f14223,plain,(
  ~p(s(bool,'T_0')) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3089,f12909,f12909,f962])).
fof(f15935,plain,(
  $false | ($spl4 | $spl8 | $spl62)),
  inference(subsumption_resolution,[],[f14224,f531])).
fof(f14224,plain,(
  ~p(s(bool,'T_0')) | ($spl4 | $spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f3230,f12909,f12909,f962])).
fof(f15934,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f14225,f531])).
fof(f14225,plain,(
  ~p(s(bool,'T_0')) | $spl62),
  inference(unit_resulting_resolution,[],[f1190,f531,f12909,f962])).
fof(f15933,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14226,f531])).
fof(f14226,plain,(
  ~p(s(bool,'T_0')) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1449,f531,f12909,f962])).
fof(f15932,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14227,f531])).
fof(f14227,plain,(
  ~p(s(bool,'T_0')) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3064,f531,f12909,f962])).
fof(f15931,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14232,f12909])).
fof(f14232,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3089,f531,f12909,f962])).
fof(f15930,plain,(
  $false | ($spl4 | $spl8 | $spl62)),
  inference(subsumption_resolution,[],[f14233,f12909])).
fof(f14233,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f3230,f531,f12909,f962])).
fof(f15929,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f14238,f531])).
fof(f14238,plain,(
  ~p(s(bool,'T_0')) | $spl62),
  inference(unit_resulting_resolution,[],[f1190,f12909,f12909,f962])).
fof(f15928,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14239,f531])).
fof(f14239,plain,(
  ~p(s(bool,'T_0')) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1449,f12909,f12909,f962])).
fof(f15927,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14240,f531])).
fof(f14240,plain,(
  ~p(s(bool,'T_0')) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3064,f12909,f12909,f962])).
fof(f15926,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f14241,f531])).
fof(f14241,plain,(
  ~p(s(bool,'T_0')) | $spl62),
  inference(unit_resulting_resolution,[],[f1191,f12909,f12909,f962])).
fof(f15925,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14242,f531])).
fof(f14242,plain,(
  ~p(s(bool,'T_0')) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1451,f12909,f12909,f962])).
fof(f15924,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14243,f531])).
fof(f14243,plain,(
  ~p(s(bool,'T_0')) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3067,f12909,f12909,f962])).
fof(f15923,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14252,f12909])).
fof(f14252,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3089,f12909,f12909,f962])).
fof(f15922,plain,(
  $false | ($spl4 | $spl8 | $spl62)),
  inference(subsumption_resolution,[],[f14253,f12909])).
fof(f14253,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f3230,f12909,f12909,f962])).
fof(f15921,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14259,f12909])).
fof(f14259,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1451,f531,f12909,f962])).
fof(f15920,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14260,f12909])).
fof(f14260,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3067,f531,f12909,f962])).
fof(f15919,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f14261,f531])).
fof(f14261,plain,(
  ~p(s(bool,'T_0')) | $spl62),
  inference(unit_resulting_resolution,[],[f1728,f531,f12909,f962])).
fof(f15918,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14262,f531])).
fof(f14262,plain,(
  ~p(s(bool,'T_0')) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3089,f531,f12909,f962])).
fof(f15917,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f14263,f12909])).
fof(f14263,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl62),
  inference(unit_resulting_resolution,[],[f1190,f12909,f12909,f962])).
fof(f15916,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14264,f12909])).
fof(f14264,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1449,f12909,f12909,f962])).
fof(f15915,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14265,f12909])).
fof(f14265,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3064,f12909,f12909,f962])).
fof(f15914,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14267,f12909])).
fof(f14267,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1451,f12909,f12909,f962])).
fof(f15913,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14268,f12909])).
fof(f14268,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3067,f12909,f12909,f962])).
fof(f15912,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f14269,f531])).
fof(f14269,plain,(
  ~p(s(bool,'T_0')) | $spl62),
  inference(unit_resulting_resolution,[],[f1728,f12909,f12909,f962])).
fof(f15911,plain,(
  $false | ($spl6 | $spl62)),
  inference(subsumption_resolution,[],[f14270,f531])).
fof(f14270,plain,(
  ~p(s(bool,'T_0')) | ($spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f5157,f12909,f12909,f962])).
fof(f15910,plain,(
  $false | ($spl8 | $spl62)),
  inference(subsumption_resolution,[],[f14271,f531])).
fof(f14271,plain,(
  ~p(s(bool,'T_0')) | ($spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f2514,f12909,f12909,f962])).
fof(f15909,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f14272,f531])).
fof(f14272,plain,(
  ~p(s(bool,'T_0')) | $spl62),
  inference(unit_resulting_resolution,[],[f4578,f12909,f12909,f962])).
fof(f15908,plain,(
  $false | ($spl6 | $spl62)),
  inference(subsumption_resolution,[],[f14273,f12909])).
fof(f14273,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)))) | ($spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f4699,f12909,f12909,f962])).
fof(f15907,plain,(
  $false | ($spl8 | $spl62)),
  inference(subsumption_resolution,[],[f14274,f12909])).
fof(f14274,plain,(
  ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) | ($spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f4611,f12909,f12909,f962])).
fof(f15906,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f14275,f12909])).
fof(f14275,plain,(
  ( ! [X0] : (~p(s(bool,'const.bool.BOUNDED_1'(s(bool,X0))))) ) | $spl62),
  inference(unit_resulting_resolution,[],[f4652,f12909,f12909,f962])).
fof(f15905,plain,(
  $false | ($spl6 | $spl62)),
  inference(subsumption_resolution,[],[f14276,f12909])).
fof(f14276,plain,(
  ( ! [X0] : (~p(s(bool,'const.bool.BOUNDED_1'(s(bool,X0))))) ) | ($spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f5178,f12909,f12909,f962])).
fof(f15904,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14277,f531])).
fof(f14277,plain,(
  ~p(s(bool,'T_0')) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3089,f12909,f12909,f962])).
fof(f15903,plain,(
  $false | ($spl4 | $spl8 | $spl62)),
  inference(subsumption_resolution,[],[f14278,f531])).
fof(f14278,plain,(
  ~p(s(bool,'T_0')) | ($spl4 | $spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f3230,f12909,f12909,f962])).
fof(f15902,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14280,f12909])).
fof(f14280,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1449,f531,f12909,f962])).
fof(f15901,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14281,f12909])).
fof(f14281,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3064,f531,f12909,f962])).
fof(f15900,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f14282,f531])).
fof(f14282,plain,(
  ~p(s(bool,'T_0')) | $spl62),
  inference(unit_resulting_resolution,[],[f1728,f531,f12909,f962])).
fof(f15899,plain,(
  $false | ($spl6 | $spl62)),
  inference(subsumption_resolution,[],[f14283,f12909])).
fof(f14283,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)))) | ($spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f5157,f531,f12909,f962])).
fof(f15898,plain,(
  $false | ($spl8 | $spl62)),
  inference(subsumption_resolution,[],[f14284,f12909])).
fof(f14284,plain,(
  ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) | ($spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f2514,f531,f12909,f962])).
fof(f15897,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f14285,f12909])).
fof(f14285,plain,(
  ( ! [X0] : (~p(s(bool,'const.bool.BOUNDED_1'(s(bool,X0))))) ) | $spl62),
  inference(unit_resulting_resolution,[],[f4578,f531,f12909,f962])).
fof(f15896,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14286,f531])).
fof(f14286,plain,(
  ~p(s(bool,'T_0')) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3089,f531,f12909,f962])).
fof(f15895,plain,(
  $false | ($spl4 | $spl8 | $spl62)),
  inference(subsumption_resolution,[],[f14287,f12909])).
fof(f14287,plain,(
  ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) | ($spl4 | $spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f3230,f531,f12909,f962])).
fof(f15894,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14293,f12909])).
fof(f14293,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1449,f12909,f12909,f962])).
fof(f15893,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14294,f12909])).
fof(f14294,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3064,f12909,f12909,f962])).
fof(f15892,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f14295,f12909])).
fof(f14295,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl62),
  inference(unit_resulting_resolution,[],[f1191,f12909,f12909,f962])).
fof(f15891,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14296,f12909])).
fof(f14296,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1451,f12909,f12909,f962])).
fof(f15890,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14297,f12909])).
fof(f14297,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3067,f12909,f12909,f962])).
fof(f15889,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f14298,f531])).
fof(f14298,plain,(
  ~p(s(bool,'T_0')) | $spl62),
  inference(unit_resulting_resolution,[],[f1728,f12909,f12909,f962])).
fof(f15888,plain,(
  $false | ($spl6 | $spl62)),
  inference(subsumption_resolution,[],[f14299,f12909])).
fof(f14299,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)))) | ($spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f5157,f12909,f12909,f962])).
fof(f15887,plain,(
  $false | ($spl8 | $spl62)),
  inference(subsumption_resolution,[],[f14300,f12909])).
fof(f14300,plain,(
  ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) | ($spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f2514,f12909,f12909,f962])).
fof(f15886,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f14301,f12909])).
fof(f14301,plain,(
  ( ! [X0] : (~p(s(bool,'const.bool.BOUNDED_1'(s(bool,X0))))) ) | $spl62),
  inference(unit_resulting_resolution,[],[f4578,f12909,f12909,f962])).
fof(f15885,plain,(
  $false | ($spl6 | $spl62)),
  inference(subsumption_resolution,[],[f14302,f12909])).
fof(f14302,plain,(
  ( ! [X0] : (~p(s(bool,'const.bool.BOUNDED_1'(s(bool,X0))))) ) | ($spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f4699,f12909,f12909,f962])).
fof(f15884,plain,(
  $false | ($spl8 | $spl62)),
  inference(subsumption_resolution,[],[f14303,f12909])).
fof(f14303,plain,(
  ( ! [X0] : (~p(s(bool,'const.bool.BOUNDED_1'(s(bool,X0))))) ) | ($spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f4611,f12909,f12909,f962])).
fof(f15883,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f14304,f12909])).
fof(f14304,plain,(
  ( ! [X0] : (~p(s(bool,'const.bool.BOUNDED_1'(s(bool,X0))))) ) | $spl62),
  inference(unit_resulting_resolution,[],[f4652,f12909,f12909,f962])).
fof(f15882,plain,(
  $false | ($spl6 | $spl62)),
  inference(subsumption_resolution,[],[f14305,f12909])).
fof(f14305,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)))) | ($spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f5178,f12909,f12909,f962])).
fof(f15881,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14306,f531])).
fof(f14306,plain,(
  ~p(s(bool,'T_0')) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3089,f12909,f12909,f962])).
fof(f15880,plain,(
  $false | ($spl4 | $spl8 | $spl62)),
  inference(subsumption_resolution,[],[f14307,f12909])).
fof(f14307,plain,(
  ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) | ($spl4 | $spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f3230,f12909,f12909,f962])).
fof(f15879,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14313,f12909])).
fof(f14313,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1455,f1048,f12909,f965])).
fof(f1455,plain,(
  ( ! [X0] : (sP46('F_0',X0,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl1),
  inference(unit_resulting_resolution,[],[f1048,f1040,f960])).
fof(f15878,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14314,f12909])).
fof(f14314,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3077,f1048,f12909,f965])).
fof(f15877,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f14315,f12909])).
fof(f14315,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl62),
  inference(unit_resulting_resolution,[],[f1200,f1048,f12909,f965])).
fof(f15876,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14316,f12909])).
fof(f14316,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1460,f1048,f12909,f965])).
fof(f1460,plain,(
  ( ! [X0] : (sP46('F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)),X0)) ) | $spl1),
  inference(unit_resulting_resolution,[],[f1048,f1040,f961])).
fof(f15875,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14317,f12909])).
fof(f14317,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3083,f1048,f12909,f965])).
fof(f15874,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f14346,f12909])).
fof(f14346,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl62),
  inference(unit_resulting_resolution,[],[f1194,f1048,f12909,f965])).
fof(f15873,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14347,f12909])).
fof(f14347,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1455,f1048,f12909,f965])).
fof(f15872,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14348,f12909])).
fof(f14348,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3077,f1048,f12909,f965])).
fof(f15871,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14350,f12909])).
fof(f14350,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1460,f1048,f12909,f965])).
fof(f15870,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14351,f12909])).
fof(f14351,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3083,f1048,f12909,f965])).
fof(f15869,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f14410,f15309])).
fof(f15309,plain,(
  ( ! [X0,X1] : (sP48('F_0',X0,X1)) ) | $spl62),
  inference(unit_resulting_resolution,[],[f1066,f12909,f1029])).
fof(f14410,plain,(
  ( ! [X0,X1] : (~sP48('F_0',X0,X1)) ) | $spl62),
  inference(unit_resulting_resolution,[],[f1048,f12909,f966])).
fof(f15868,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f14442,f15309])).
fof(f14442,plain,(
  ( ! [X0,X1] : (~sP48('F_0',X0,X1)) ) | $spl62),
  inference(unit_resulting_resolution,[],[f1048,f12909,f967])).
fof(f15867,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f14471,f14540])).
fof(f14540,plain,(
  ( ! [X2,X0,X1] : (sP47(X0,X1,X2)) ) | $spl62),
  inference(unit_resulting_resolution,[],[f12909,f975])).
fof(f14471,plain,(
  ~sP47('F_0','T_0','F_0') | $spl62),
  inference(unit_resulting_resolution,[],[f1205,f1048,f12909,f970])).
fof(f15866,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14473,f14540])).
fof(f14473,plain,(
  ~sP47('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)),'T_0','F_0') | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1466,f1048,f12909,f970])).
fof(f1466,plain,(
  ( ! [X0] : (~sP48('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)),'T_0',X0)) ) | $spl1),
  inference(unit_resulting_resolution,[],[f531,f1040,f967])).
fof(f15865,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14475,f14540])).
fof(f14475,plain,(
  ( ! [X0] : (~sP47('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'T_0','F_0')) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3091,f1048,f12909,f970])).
fof(f15864,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f14504,f14540])).
fof(f14504,plain,(
  ~sP47('F_0','F_0','T_0') | $spl62),
  inference(unit_resulting_resolution,[],[f1204,f1048,f12909,f971])).
fof(f15863,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14505,f14540])).
fof(f14505,plain,(
  ~sP47('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)),'F_0','T_0') | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1465,f1048,f12909,f971])).
fof(f1465,plain,(
  ( ! [X0] : (~sP48('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)),X0,'T_0')) ) | $spl1),
  inference(unit_resulting_resolution,[],[f531,f1040,f966])).
fof(f15862,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14506,f14540])).
fof(f14506,plain,(
  ( ! [X0] : (~sP47('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0','T_0')) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3090,f1048,f12909,f971])).
fof(f15861,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f14536,f14540])).
fof(f14536,plain,(
  ( ! [X0] : (~sP47(X0,'F_0','F_0')) ) | $spl62),
  inference(unit_resulting_resolution,[],[f1048,f1048,f12909,f973])).
fof(f15860,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f14542,f531])).
fof(f14542,plain,(
  ~p(s(bool,'T_0')) | $spl62),
  inference(unit_resulting_resolution,[],[f1898,f12909,f978])).
fof(f15859,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14543,f531])).
fof(f14543,plain,(
  ~p(s(bool,'T_0')) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3149,f12909,f978])).
fof(f15858,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14544,f531])).
fof(f14544,plain,(
  ~p(s(bool,'T_0')) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3154,f12909,f978])).
fof(f15857,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14545,f531])).
fof(f14545,plain,(
  ~p(s(bool,'T_0')) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3155,f12909,f978])).
fof(f15856,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14548,f12909])).
fof(f14548,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1465,f12909,f978])).
fof(f15855,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14549,f12909])).
fof(f14549,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1466,f12909,f978])).
fof(f15854,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14550,f12909])).
fof(f14550,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3090,f12909,f978])).
fof(f15853,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14551,f12909])).
fof(f14551,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3091,f12909,f978])).
fof(f15852,plain,(
  $false | ($spl6 | $spl62)),
  inference(subsumption_resolution,[],[f14552,f12909])).
fof(f14552,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)))) | ($spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f5222,f12909,f978])).
fof(f5222,plain,(
  ~sP48('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)),'F_0','F_0') | $spl6),
  inference(unit_resulting_resolution,[],[f5208,f968])).
fof(f5208,plain,(
  ~sP47('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)),'F_0','F_0') | $spl6),
  inference(unit_resulting_resolution,[],[f1048,f1048,f2136])).
fof(f2136,plain,(
  ( ! [X21,X22] : (~sP47('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)),X21,X22) | p(s(bool,X22)) | p(s(bool,X21))) ) | $spl6),
  inference(subsumption_resolution,[],[f2072,f531])).
fof(f2072,plain,(
  ( ! [X21,X22] : (~p(s(bool,'T_0')) | p(s(bool,X21)) | p(s(bool,X22)) | ~sP47('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)),X21,X22)) ) | $spl6),
  inference(superposition,[],[f973,f1111])).
fof(f15851,plain,(
  $false | ($spl8 | $spl62)),
  inference(subsumption_resolution,[],[f14553,f12909])).
fof(f14553,plain,(
  ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) | ($spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f2597,f12909,f978])).
fof(f15850,plain,(
  $false | ($spl4 | $spl8 | $spl62)),
  inference(subsumption_resolution,[],[f14554,f12909])).
fof(f14554,plain,(
  ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) | ($spl4 | $spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f3242,f12909,f978])).
fof(f3242,plain,(
  ( ! [X0] : (~sP48('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | ($spl4 | $spl8)),
  inference(unit_resulting_resolution,[],[f1048,f2937,f1928])).
fof(f15849,plain,(
  $false | ($spl4 | $spl8 | $spl62)),
  inference(subsumption_resolution,[],[f14555,f12909])).
fof(f14555,plain,(
  ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) | ($spl4 | $spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f3245,f12909,f978])).
fof(f3245,plain,(
  ( ! [X0] : (~sP48('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0')) ) | ($spl4 | $spl8)),
  inference(unit_resulting_resolution,[],[f1048,f2937,f1928])).
fof(f15848,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f14556,f12909])).
fof(f14556,plain,(
  ( ! [X0] : (~p(s(bool,'const.bool.BOUNDED_1'(s(bool,X0))))) ) | $spl62),
  inference(unit_resulting_resolution,[],[f4785,f12909,f978])).
fof(f15847,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14563,f12909])).
fof(f14563,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3154,f12909,f978])).
fof(f15846,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14564,f12909])).
fof(f14564,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3155,f12909,f978])).
fof(f15845,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f14565,f531])).
fof(f14565,plain,(
  ~p(s(bool,'T_0')) | $spl62),
  inference(unit_resulting_resolution,[],[f1204,f12909,f978])).
fof(f15844,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f14566,f12909])).
fof(f14566,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl62),
  inference(unit_resulting_resolution,[],[f1205,f12909,f978])).
fof(f15843,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14567,f531])).
fof(f14567,plain,(
  ~p(s(bool,'T_0')) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1465,f12909,f978])).
fof(f15842,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14568,f12909])).
fof(f14568,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1466,f12909,f978])).
fof(f15841,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14569,f531])).
fof(f14569,plain,(
  ~p(s(bool,'T_0')) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3090,f12909,f978])).
fof(f15840,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14570,f12909])).
fof(f14570,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3091,f12909,f978])).
fof(f15839,plain,(
  $false | ($spl4 | $spl8 | $spl62)),
  inference(subsumption_resolution,[],[f14573,f12909])).
fof(f14573,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f3242,f12909,f978])).
fof(f15838,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f14580,f531])).
fof(f14580,plain,(
  ~p(s(bool,'T_0')) | $spl62),
  inference(unit_resulting_resolution,[],[f1898,f12909,f979])).
fof(f15837,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14581,f531])).
fof(f14581,plain,(
  ~p(s(bool,'T_0')) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3149,f12909,f979])).
fof(f15836,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14582,f531])).
fof(f14582,plain,(
  ~p(s(bool,'T_0')) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3154,f12909,f979])).
fof(f15835,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14583,f531])).
fof(f14583,plain,(
  ~p(s(bool,'T_0')) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3155,f12909,f979])).
fof(f15834,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14586,f12909])).
fof(f14586,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1465,f12909,f979])).
fof(f15833,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14587,f12909])).
fof(f14587,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1466,f12909,f979])).
fof(f15832,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14588,f12909])).
fof(f14588,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3090,f12909,f979])).
fof(f15831,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14589,f12909])).
fof(f14589,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3091,f12909,f979])).
fof(f15830,plain,(
  $false | ($spl6 | $spl62)),
  inference(subsumption_resolution,[],[f14590,f12909])).
fof(f14590,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)))) | ($spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f5222,f12909,f979])).
fof(f15829,plain,(
  $false | ($spl8 | $spl62)),
  inference(subsumption_resolution,[],[f14591,f12909])).
fof(f14591,plain,(
  ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) | ($spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f2597,f12909,f979])).
fof(f15828,plain,(
  $false | ($spl4 | $spl8 | $spl62)),
  inference(subsumption_resolution,[],[f14592,f12909])).
fof(f14592,plain,(
  ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) | ($spl4 | $spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f3242,f12909,f979])).
fof(f15827,plain,(
  $false | ($spl4 | $spl8 | $spl62)),
  inference(subsumption_resolution,[],[f14593,f12909])).
fof(f14593,plain,(
  ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) | ($spl4 | $spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f3245,f12909,f979])).
fof(f15826,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f14594,f12909])).
fof(f14594,plain,(
  ( ! [X0] : (~p(s(bool,'const.bool.BOUNDED_1'(s(bool,X0))))) ) | $spl62),
  inference(unit_resulting_resolution,[],[f4785,f12909,f979])).
fof(f15825,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14600,f12909])).
fof(f14600,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3149,f12909,f979])).
fof(f15824,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14602,f12909])).
fof(f14602,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3155,f12909,f979])).
fof(f15823,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f14603,f12909])).
fof(f14603,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl62),
  inference(unit_resulting_resolution,[],[f1204,f12909,f979])).
fof(f15822,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f14604,f531])).
fof(f14604,plain,(
  ~p(s(bool,'T_0')) | $spl62),
  inference(unit_resulting_resolution,[],[f1205,f12909,f979])).
fof(f15821,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14605,f12909])).
fof(f14605,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1465,f12909,f979])).
fof(f15820,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14606,f531])).
fof(f14606,plain,(
  ~p(s(bool,'T_0')) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1466,f12909,f979])).
fof(f15819,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14607,f12909])).
fof(f14607,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3090,f12909,f979])).
fof(f15818,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14608,f531])).
fof(f14608,plain,(
  ~p(s(bool,'T_0')) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3091,f12909,f979])).
fof(f15817,plain,(
  $false | ($spl4 | $spl8 | $spl62)),
  inference(subsumption_resolution,[],[f14612,f12909])).
fof(f14612,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f3245,f12909,f979])).
fof(f15816,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f14677,f15276])).
fof(f15276,plain,(
  ( ! [X0,X1] : (sP50('F_0',X0,X1)) ) | $spl62),
  inference(unit_resulting_resolution,[],[f1069,f12909,f1028])).
fof(f14677,plain,(
  ( ! [X0,X1] : (~sP50('F_0',X0,X1)) ) | $spl62),
  inference(unit_resulting_resolution,[],[f1048,f12909,f984])).
fof(f15815,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14680,f12909])).
fof(f14680,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1069,f1470,f12909,f987])).
fof(f1470,plain,(
  ( ! [X0] : (~sP50('F_0',X0,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl1),
  inference(unit_resulting_resolution,[],[f1048,f1040,f983])).
fof(f15814,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14681,f12909])).
fof(f14681,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f1069,f3161,f12909,f987])).
fof(f15813,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14682,f12909])).
fof(f14682,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3187,f3161,f12909,f987])).
fof(f15812,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14683,f12909])).
fof(f14683,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f1068,f3161,f12909,f987])).
fof(f15811,plain,(
  $false | ($spl4 | $spl6 | $spl62)),
  inference(subsumption_resolution,[],[f14684,f12909])).
fof(f14684,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f1100,f3161,f12909,f987])).
fof(f1100,plain,(
  ( ! [X0,X1] : (sP49(X0,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)),X1)) ) | $spl6),
  inference(unit_resulting_resolution,[],[f1045,f992])).
fof(f15810,plain,(
  $false | ($spl4 | $spl8 | $spl62)),
  inference(subsumption_resolution,[],[f14685,f12909])).
fof(f14685,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f1081,f3161,f12909,f987])).
fof(f15809,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f14686,f12909])).
fof(f14686,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl62),
  inference(unit_resulting_resolution,[],[f1069,f1233,f12909,f987])).
fof(f15808,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f14687,f12909])).
fof(f14687,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl62),
  inference(unit_resulting_resolution,[],[f1068,f1233,f12909,f987])).
fof(f15807,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14689,f12909])).
fof(f14689,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1475,f1233,f12909,f987])).
fof(f1475,plain,(
  ( ! [X0,X1] : (sP49(X0,X1,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl1),
  inference(unit_resulting_resolution,[],[f1040,f991])).
fof(f15806,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14690,f12909])).
fof(f14690,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3187,f1233,f12909,f987])).
fof(f15805,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14692,f12909])).
fof(f14692,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1476,f1474,f12909,f987])).
fof(f1474,plain,(
  ( ! [X0] : (~sP50('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)),'T_0',X0)) ) | $spl1),
  inference(unit_resulting_resolution,[],[f531,f1040,f984])).
fof(f1476,plain,(
  ( ! [X0,X1] : (sP49('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)),X0,X1)) ) | $spl1),
  inference(unit_resulting_resolution,[],[f1040,f993])).
fof(f15804,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14693,f12909])).
fof(f14693,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1068,f1474,f12909,f987])).
fof(f15803,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14695,f12909])).
fof(f14695,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1475,f1474,f12909,f987])).
fof(f15802,plain,(
  $false | ($spl1 | $spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14696,f12909])).
fof(f14696,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl1 | $spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3187,f1474,f12909,f987])).
fof(f15801,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14698,f12909])).
fof(f14698,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3188,f3162,f12909,f987])).
fof(f15800,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14699,f12909])).
fof(f14699,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3187,f3162,f12909,f987])).
fof(f15799,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14700,f12909])).
fof(f14700,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f1068,f3162,f12909,f987])).
fof(f15798,plain,(
  $false | ($spl4 | $spl6 | $spl62)),
  inference(subsumption_resolution,[],[f14701,f12909])).
fof(f14701,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f1100,f3162,f12909,f987])).
fof(f15797,plain,(
  $false | ($spl4 | $spl8 | $spl62)),
  inference(subsumption_resolution,[],[f14702,f12909])).
fof(f14702,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f1081,f3162,f12909,f987])).
fof(f15796,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14703,f12909])).
fof(f14703,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3188,f3171,f12909,f987])).
fof(f15795,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14704,f12909])).
fof(f14704,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f1068,f3171,f12909,f987])).
fof(f15794,plain,(
  $false | ($spl1 | $spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14706,f12909])).
fof(f14706,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) | ($spl1 | $spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f1475,f3171,f12909,f987])).
fof(f15793,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14707,f12909])).
fof(f14707,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3187,f3171,f12909,f987])).
fof(f15792,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f14716,f15027])).
fof(f15027,plain,(
  ( ! [X2,X0,X1] : (sP49(X0,X1,X2)) ) | $spl62),
  inference(unit_resulting_resolution,[],[f12909,f992])).
fof(f14716,plain,(
  ~sP49('F_0','T_0','T_0') | $spl62),
  inference(unit_resulting_resolution,[],[f1233,f531,f12909,f987])).
fof(f15791,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14718,f15027])).
fof(f14718,plain,(
  ~sP49('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)),'T_0','T_0') | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1474,f531,f12909,f987])).
fof(f15790,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14720,f15027])).
fof(f14720,plain,(
  ( ! [X0] : (~sP49('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'T_0','T_0')) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3171,f531,f12909,f987])).
fof(f15789,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f14741,f15027])).
fof(f14741,plain,(
  ( ! [X0] : (~sP49('F_0',X0,'F_0')) ) | $spl62),
  inference(unit_resulting_resolution,[],[f1229,f12909,f12909,f987])).
fof(f15788,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14743,f15027])).
fof(f14743,plain,(
  ( ! [X0] : (~sP49('F_0',X0,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) ) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1470,f12909,f12909,f987])).
fof(f15787,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14745,f15027])).
fof(f14745,plain,(
  ( ! [X0,X1] : (~sP49('F_0',X0,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3161,f12909,f12909,f987])).
fof(f15786,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f14747,f15027])).
fof(f14747,plain,(
  ( ! [X0] : (~sP49('F_0','T_0',X0)) ) | $spl62),
  inference(unit_resulting_resolution,[],[f1233,f12909,f12909,f987])).
fof(f15785,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14749,f15027])).
fof(f14749,plain,(
  ( ! [X0] : (~sP49('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)),X0,'F_0')) ) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1468,f12909,f12909,f987])).
fof(f1468,plain,(
  ( ! [X0] : (~sP50('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)),X0,'F_0')) ) | $spl1),
  inference(unit_resulting_resolution,[],[f1048,f1040,f983])).
fof(f15784,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14751,f15027])).
fof(f14751,plain,(
  ( ! [X0] : (~sP49('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)),'T_0',X0)) ) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1474,f12909,f12909,f987])).
fof(f15783,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14753,f15027])).
fof(f14753,plain,(
  ( ! [X0,X1] : (~sP49('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X1,'F_0')) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3159,f12909,f12909,f987])).
fof(f15782,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14755,f15027])).
fof(f14755,plain,(
  ( ! [X2,X0,X1] : (~sP49('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X1,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3162,f12909,f12909,f987])).
fof(f15781,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14757,f15027])).
fof(f14757,plain,(
  ( ! [X0,X1] : (~sP49('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'T_0',X1)) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3171,f12909,f12909,f987])).
fof(f15780,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14770,f12909])).
fof(f14770,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1468,f1067,f12909,f987])).
fof(f15779,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14771,f12909])).
fof(f14771,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1474,f1067,f12909,f987])).
fof(f15778,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14772,f12909])).
fof(f14772,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3159,f1067,f12909,f987])).
fof(f15777,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14773,f12909])).
fof(f14773,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3171,f1067,f12909,f987])).
fof(f15776,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14776,f12909])).
fof(f14776,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1474,f1475,f12909,f987])).
fof(f15775,plain,(
  $false | ($spl1 | $spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14777,f12909])).
fof(f14777,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl1 | $spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3171,f1475,f12909,f987])).
fof(f15774,plain,(
  $false | ($spl1 | $spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14780,f12909])).
fof(f14780,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) | ($spl1 | $spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f1474,f3187,f12909,f987])).
fof(f15773,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14781,f12909])).
fof(f14781,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3162,f3187,f12909,f987])).
fof(f15772,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14782,f12909])).
fof(f14782,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3171,f3187,f12909,f987])).
fof(f15771,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14787,f12909])).
fof(f14787,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1474,f1068,f12909,f987])).
fof(f15770,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14788,f12909])).
fof(f14788,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1468,f1068,f12909,f987])).
fof(f15769,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14789,f12909])).
fof(f14789,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3171,f1068,f12909,f987])).
fof(f15768,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14790,f12909])).
fof(f14790,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3159,f1068,f12909,f987])).
fof(f15767,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14791,f12909])).
fof(f14791,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3162,f1068,f12909,f987])).
fof(f15766,plain,(
  $false | ($spl1 | $spl6 | $spl62)),
  inference(subsumption_resolution,[],[f14795,f12909])).
fof(f14795,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) | ($spl1 | $spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f1468,f1100,f12909,f987])).
fof(f15765,plain,(
  $false | ($spl4 | $spl6 | $spl62)),
  inference(subsumption_resolution,[],[f14796,f12909])).
fof(f14796,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f3159,f1100,f12909,f987])).
fof(f15764,plain,(
  $false | ($spl4 | $spl6 | $spl62)),
  inference(subsumption_resolution,[],[f14797,f12909])).
fof(f14797,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f3162,f1100,f12909,f987])).
fof(f15763,plain,(
  $false | ($spl1 | $spl8 | $spl62)),
  inference(subsumption_resolution,[],[f14801,f12909])).
fof(f14801,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) | ($spl1 | $spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f1468,f1081,f12909,f987])).
fof(f15762,plain,(
  $false | ($spl4 | $spl8 | $spl62)),
  inference(subsumption_resolution,[],[f14802,f12909])).
fof(f14802,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f3159,f1081,f12909,f987])).
fof(f15761,plain,(
  $false | ($spl4 | $spl8 | $spl62)),
  inference(subsumption_resolution,[],[f14803,f12909])).
fof(f14803,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f3162,f1081,f12909,f987])).
fof(f15760,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14805,f12909])).
fof(f14805,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3159,f3188,f12909,f987])).
fof(f15759,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14806,f12909])).
fof(f14806,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3162,f3188,f12909,f987])).
fof(f15758,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14807,f12909])).
fof(f14807,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3171,f3188,f12909,f987])).
fof(f15757,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14808,f12909])).
fof(f14808,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1468,f1476,f12909,f987])).
fof(f15756,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f14827,f15027])).
fof(f14827,plain,(
  ( ! [X0] : (~sP49('F_0',X0,'F_0')) ) | $spl62),
  inference(unit_resulting_resolution,[],[f1229,f12909,f12909,f987])).
fof(f15755,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14828,f15027])).
fof(f14828,plain,(
  ( ! [X0] : (~sP49('F_0',X0,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) ) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1470,f12909,f12909,f987])).
fof(f15754,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14829,f15027])).
fof(f14829,plain,(
  ( ! [X0,X1] : (~sP49('F_0',X0,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3161,f12909,f12909,f987])).
fof(f15753,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f14830,f15027])).
fof(f14830,plain,(
  ( ! [X0] : (~sP49('F_0','T_0',X0)) ) | $spl62),
  inference(unit_resulting_resolution,[],[f1233,f12909,f12909,f987])).
fof(f15752,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14831,f15027])).
fof(f14831,plain,(
  ( ! [X0] : (~sP49('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)),X0,'F_0')) ) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1468,f12909,f12909,f987])).
fof(f15751,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14832,f15027])).
fof(f14832,plain,(
  ( ! [X0] : (~sP49('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)),'T_0',X0)) ) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1474,f12909,f12909,f987])).
fof(f15750,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14833,f15027])).
fof(f14833,plain,(
  ( ! [X0,X1] : (~sP49('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X1,'F_0')) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3159,f12909,f12909,f987])).
fof(f15749,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14834,f15027])).
fof(f14834,plain,(
  ( ! [X2,X0,X1] : (~sP49('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X1,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3162,f12909,f12909,f987])).
fof(f15748,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14835,f15027])).
fof(f14835,plain,(
  ( ! [X0,X1] : (~sP49('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'T_0',X1)) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3171,f12909,f12909,f987])).
fof(f15747,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f14894,f15027])).
fof(f14894,plain,(
  ~sP49('F_0','F_0','F_0') | $spl62),
  inference(unit_resulting_resolution,[],[f1229,f1048,f12909,f988])).
fof(f15746,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14895,f15027])).
fof(f14895,plain,(
  ~sP49('F_0','F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54))) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1470,f1048,f12909,f988])).
fof(f15745,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14896,f15027])).
fof(f14896,plain,(
  ( ! [X0] : (~sP49('F_0','F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3161,f1048,f12909,f988])).
fof(f15744,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14897,f15027])).
fof(f14897,plain,(
  ~sP49('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)),'F_0','F_0') | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1468,f1048,f12909,f988])).
fof(f15743,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14898,f15027])).
fof(f14898,plain,(
  ( ! [X0] : (~sP49('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0','F_0')) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3159,f1048,f12909,f988])).
fof(f15742,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14899,f15027])).
fof(f14899,plain,(
  ( ! [X0,X1] : (~sP49('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3162,f1048,f12909,f988])).
fof(f15741,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f14951,f15027])).
fof(f14951,plain,(
  ~sP49('F_0','F_0','F_0') | $spl62),
  inference(unit_resulting_resolution,[],[f1229,f1048,f12909,f989])).
fof(f15740,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14952,f15027])).
fof(f14952,plain,(
  ~sP49('F_0','F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54))) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1470,f1048,f12909,f989])).
fof(f15739,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14953,f15027])).
fof(f14953,plain,(
  ( ! [X0] : (~sP49('F_0','F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3161,f1048,f12909,f989])).
fof(f15738,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14954,f15027])).
fof(f14954,plain,(
  ~sP49('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)),'F_0','F_0') | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1468,f1048,f12909,f989])).
fof(f15737,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14955,f15027])).
fof(f14955,plain,(
  ( ! [X0] : (~sP49('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0','F_0')) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3159,f1048,f12909,f989])).
fof(f15736,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14956,f15027])).
fof(f14956,plain,(
  ( ! [X0,X1] : (~sP49('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3162,f1048,f12909,f989])).
fof(f15735,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14993,f12909])).
fof(f14993,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1475,f1048,f12909,f990])).
fof(f15734,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14994,f12909])).
fof(f14994,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3187,f1048,f12909,f990])).
fof(f15733,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f14995,f12909])).
fof(f14995,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl62),
  inference(unit_resulting_resolution,[],[f1069,f1048,f12909,f990])).
fof(f15732,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f14996,f12909])).
fof(f14996,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3188,f1048,f12909,f990])).
fof(f15731,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f14997,f12909])).
fof(f14997,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1476,f1048,f12909,f990])).
fof(f15730,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f15000,f15027])).
fof(f15000,plain,(
  ( ! [X0,X1] : (~sP49(X0,'F_0',X1)) ) | $spl62),
  inference(unit_resulting_resolution,[],[f12909,f1048,f12909,f990])).
fof(f15729,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f15017,f12909])).
fof(f15017,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl62),
  inference(unit_resulting_resolution,[],[f1067,f1048,f12909,f990])).
fof(f15728,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f15018,f12909])).
fof(f15018,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1475,f1048,f12909,f990])).
fof(f15727,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f15019,f12909])).
fof(f15019,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3187,f1048,f12909,f990])).
fof(f15726,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f15021,f12909])).
fof(f15021,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3188,f1048,f12909,f990])).
fof(f15725,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f15022,f12909])).
fof(f15022,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1476,f1048,f12909,f990])).
fof(f15724,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f15023,f15027])).
fof(f15023,plain,(
  ( ! [X0] : (~sP49('T_0','F_0',X0)) ) | $spl62),
  inference(unit_resulting_resolution,[],[f531,f1048,f12909,f990])).
fof(f15723,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f15025,f15027])).
fof(f15025,plain,(
  ( ! [X0,X1] : (~sP49(X0,'F_0',X1)) ) | $spl62),
  inference(unit_resulting_resolution,[],[f12909,f1048,f12909,f990])).
fof(f15722,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f15079,f531])).
fof(f15079,plain,(
  ~p(s(bool,'T_0')) | $spl62),
  inference(unit_resulting_resolution,[],[f1994,f12909,f996])).
fof(f15721,plain,(
  $false | ($spl6 | $spl62)),
  inference(subsumption_resolution,[],[f15080,f531])).
fof(f15080,plain,(
  ~p(s(bool,'T_0')) | ($spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f5246,f12909,f996])).
fof(f5246,plain,(
  ~sP50('T_0','F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56))) | $spl6),
  inference(unit_resulting_resolution,[],[f5232,f985])).
fof(f5232,plain,(
  ~sP49('T_0','F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56))) | $spl6),
  inference(unit_resulting_resolution,[],[f1048,f531,f2140])).
fof(f2140,plain,(
  ( ! [X30,X29] : (~sP49(X30,X29,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56))) | ~p(s(bool,X30)) | p(s(bool,X29))) ) | $spl6),
  inference(subsumption_resolution,[],[f2076,f531])).
fof(f2076,plain,(
  ( ! [X30,X29] : (~p(s(bool,'T_0')) | p(s(bool,X29)) | ~p(s(bool,X30)) | ~sP49(X30,X29,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)))) ) | $spl6),
  inference(superposition,[],[f990,f1111])).
fof(f15720,plain,(
  $false | ($spl8 | $spl62)),
  inference(subsumption_resolution,[],[f15081,f531])).
fof(f15081,plain,(
  ~p(s(bool,'T_0')) | ($spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f2689,f12909,f996])).
fof(f15719,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f15082,f531])).
fof(f15082,plain,(
  ~p(s(bool,'T_0')) | $spl62),
  inference(unit_resulting_resolution,[],[f4849,f12909,f996])).
fof(f15718,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f15083,f531])).
fof(f15083,plain,(
  ~p(s(bool,'T_0')) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3198,f12909,f996])).
fof(f15717,plain,(
  $false | ($spl4 | $spl8 | $spl62)),
  inference(subsumption_resolution,[],[f15084,f531])).
fof(f15084,plain,(
  ~p(s(bool,'T_0')) | ($spl4 | $spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f6319,f12909,f996])).
fof(f6319,plain,(
  ( ! [X0] : (~sP50('T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | ($spl4 | $spl8)),
  inference(unit_resulting_resolution,[],[f3248,f985])).
fof(f3248,plain,(
  ( ! [X0] : (~sP49('T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) ) | ($spl4 | $spl8)),
  inference(unit_resulting_resolution,[],[f531,f2937,f1989])).
fof(f15716,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f15089,f12909])).
fof(f15089,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1468,f12909,f996])).
fof(f15715,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f15090,f12909])).
fof(f15090,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1474,f12909,f996])).
fof(f15714,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f15091,f12909])).
fof(f15091,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3159,f12909,f996])).
fof(f15713,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f15092,f12909])).
fof(f15092,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3162,f12909,f996])).
fof(f15712,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f15093,f12909])).
fof(f15093,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3171,f12909,f996])).
fof(f15711,plain,(
  $false | ($spl6 | $spl62)),
  inference(subsumption_resolution,[],[f15094,f12909])).
fof(f15094,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)))) | ($spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f4968,f12909,f996])).
fof(f4968,plain,(
  ( ! [X0] : (~sP50('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)),'F_0','const.bool.BOUNDED_1'(s(bool,X0)))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f4953,f985])).
fof(f4953,plain,(
  ( ! [X0] : (~sP49('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)),'F_0','const.bool.BOUNDED_1'(s(bool,X0)))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f1048,f4843])).
fof(f4843,plain,(
  ( ! [X6,X7] : (~sP49('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)),X6,'const.bool.BOUNDED_1'(s(bool,X7))) | p(s(bool,X6))) ) | $spl6),
  inference(subsumption_resolution,[],[f4835,f531])).
fof(f4835,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | p(s(bool,X6)) | ~sP49('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)),X6,'const.bool.BOUNDED_1'(s(bool,X7)))) ) | $spl6),
  inference(superposition,[],[f1990,f1111])).
fof(f15710,plain,(
  $false | ($spl6 | $spl62)),
  inference(subsumption_resolution,[],[f15095,f12909])).
fof(f15095,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)))) | ($spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f5254,f12909,f996])).
fof(f5254,plain,(
  ~sP50('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)),'F_0','T_0') | $spl6),
  inference(unit_resulting_resolution,[],[f531,f1048,f2143])).
fof(f2143,plain,(
  ( ! [X35,X36] : (~sP50('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)),X36,X35) | p(s(bool,X36)) | ~p(s(bool,X35))) ) | $spl6),
  inference(subsumption_resolution,[],[f2079,f531])).
fof(f2079,plain,(
  ( ! [X35,X36] : (~p(s(bool,'T_0')) | ~p(s(bool,X35)) | p(s(bool,X36)) | ~sP50('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)),X36,X35)) ) | $spl6),
  inference(superposition,[],[f997,f1111])).
fof(f15709,plain,(
  $false | ($spl8 | $spl62)),
  inference(subsumption_resolution,[],[f15096,f12909])).
fof(f15096,plain,(
  ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) | ($spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f2698,f12909,f996])).
fof(f15708,plain,(
  $false | ($spl8 | $spl62)),
  inference(subsumption_resolution,[],[f15097,f12909])).
fof(f15097,plain,(
  ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) | ($spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f4883,f12909,f996])).
fof(f15707,plain,(
  $false | ($spl4 | $spl8 | $spl62)),
  inference(subsumption_resolution,[],[f15098,f12909])).
fof(f15098,plain,(
  ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) | ($spl4 | $spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f3250,f12909,f996])).
fof(f3250,plain,(
  ( ! [X0] : (~sP50('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'T_0')) ) | ($spl4 | $spl8)),
  inference(unit_resulting_resolution,[],[f531,f2937,f2023])).
fof(f15706,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f15099,f12909])).
fof(f15099,plain,(
  ( ! [X0] : (~p(s(bool,'const.bool.BOUNDED_1'(s(bool,X0))))) ) | $spl62),
  inference(unit_resulting_resolution,[],[f4986,f12909,f996])).
fof(f15705,plain,(
  $false | ($spl6 | $spl62)),
  inference(subsumption_resolution,[],[f15100,f12909])).
fof(f15100,plain,(
  ( ! [X0] : (~p(s(bool,'const.bool.BOUNDED_1'(s(bool,X0))))) ) | ($spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f5079,f12909,f996])).
fof(f5079,plain,(
  ( ! [X0] : (~sP50('const.bool.BOUNDED_1'(s(bool,X0)),'F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f1048,f5001])).
fof(f5001,plain,(
  ( ! [X6,X7] : (~sP50('const.bool.BOUNDED_1'(s(bool,X7)),X6,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56))) | p(s(bool,X6))) ) | $spl6),
  inference(subsumption_resolution,[],[f4994,f531])).
fof(f4994,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | p(s(bool,X6)) | ~sP50('const.bool.BOUNDED_1'(s(bool,X7)),X6,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)))) ) | $spl6),
  inference(superposition,[],[f2024,f1111])).
fof(f15704,plain,(
  $false | ($spl8 | $spl62)),
  inference(subsumption_resolution,[],[f15101,f12909])).
fof(f15101,plain,(
  ( ! [X0] : (~p(s(bool,'const.bool.BOUNDED_1'(s(bool,X0))))) ) | ($spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f5027,f12909,f996])).
fof(f15703,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f15102,f12909])).
fof(f15102,plain,(
  ( ! [X0] : (~p(s(bool,'const.bool.BOUNDED_1'(s(bool,X0))))) ) | $spl62),
  inference(unit_resulting_resolution,[],[f4922,f12909,f996])).
fof(f15702,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f15111,f12909])).
fof(f15111,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3198,f12909,f996])).
fof(f15701,plain,(
  $false | ($spl4 | $spl8 | $spl62)),
  inference(subsumption_resolution,[],[f15112,f12909])).
fof(f15112,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f6319,f12909,f996])).
fof(f15700,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f15113,f12909])).
fof(f15113,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl62),
  inference(unit_resulting_resolution,[],[f1229,f12909,f996])).
fof(f15699,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f15114,f12909])).
fof(f15114,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1470,f12909,f996])).
fof(f15698,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f15115,f12909])).
fof(f15115,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3161,f12909,f996])).
fof(f15697,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f15116,f531])).
fof(f15116,plain,(
  ~p(s(bool,'T_0')) | $spl62),
  inference(unit_resulting_resolution,[],[f1233,f12909,f996])).
fof(f15696,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f15117,f12909])).
fof(f15117,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1468,f12909,f996])).
fof(f15695,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f15118,f531])).
fof(f15118,plain,(
  ~p(s(bool,'T_0')) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1474,f12909,f996])).
fof(f15694,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f15119,f12909])).
fof(f15119,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3159,f12909,f996])).
fof(f15693,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f15120,f12909])).
fof(f15120,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3162,f12909,f996])).
fof(f15692,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f15121,f531])).
fof(f15121,plain,(
  ~p(s(bool,'T_0')) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3171,f12909,f996])).
fof(f15691,plain,(
  $false | ($spl4 | $spl8 | $spl62)),
  inference(subsumption_resolution,[],[f15126,f12909])).
fof(f15126,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f3250,f12909,f996])).
fof(f15690,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f15135,f531])).
fof(f15135,plain,(
  ~p(s(bool,'T_0')) | $spl62),
  inference(unit_resulting_resolution,[],[f1240,f1048,f12909,f997])).
fof(f15689,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f15136,f531])).
fof(f15136,plain,(
  ~p(s(bool,'T_0')) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3195,f1048,f12909,f997])).
fof(f15688,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f15137,f531])).
fof(f15137,plain,(
  ~p(s(bool,'T_0')) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1477,f1048,f12909,f997])).
fof(f1477,plain,(
  ( ! [X0] : (sP50('T_0',X0,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl1),
  inference(unit_resulting_resolution,[],[f531,f1040,f995])).
fof(f15687,plain,(
  $false | ($spl6 | $spl62)),
  inference(subsumption_resolution,[],[f15139,f12909])).
fof(f15139,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)))) | ($spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f2399,f1048,f12909,f997])).
fof(f2399,plain,(
  ( ! [X0] : (sP50('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)),X0,'F_0')) ) | $spl6),
  inference(unit_resulting_resolution,[],[f1048,f2141])).
fof(f2141,plain,(
  ( ! [X31,X32] : (sP50('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)),X32,X31) | p(s(bool,X31))) ) | $spl6),
  inference(subsumption_resolution,[],[f2077,f531])).
fof(f2077,plain,(
  ( ! [X31,X32] : (~p(s(bool,'T_0')) | p(s(bool,X31)) | sP50('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)),X32,X31)) ) | $spl6),
  inference(superposition,[],[f995,f1111])).
fof(f15686,plain,(
  $false | ($spl4 | $spl6 | $spl62)),
  inference(subsumption_resolution,[],[f15140,f12909])).
fof(f15140,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)))) | ($spl4 | $spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f3254,f1048,f12909,f997])).
fof(f3254,plain,(
  ( ! [X0,X1] : (sP50('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)),X0,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | ($spl4 | $spl6)),
  inference(unit_resulting_resolution,[],[f2937,f2141])).
fof(f15685,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f15141,f12909])).
fof(f15141,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f4204,f1048,f12909,f997])).
fof(f4204,plain,(
  sP50('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)),'F_0','T_0') | $spl1),
  inference(unit_resulting_resolution,[],[f531,f1048,f1476,f989])).
fof(f15684,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f15142,f12909])).
fof(f15142,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3193,f1048,f12909,f997])).
fof(f15683,plain,(
  $false | ($spl8 | $spl62)),
  inference(subsumption_resolution,[],[f15143,f12909])).
fof(f15143,plain,(
  ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) | ($spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f2032,f1048,f12909,f997])).
fof(f15682,plain,(
  $false | ($spl4 | $spl8 | $spl62)),
  inference(subsumption_resolution,[],[f15144,f12909])).
fof(f15144,plain,(
  ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) | ($spl4 | $spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f3231,f1048,f12909,f997])).
fof(f3231,plain,(
  ( ! [X0,X1] : (sP50('const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)),X0,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | ($spl4 | $spl8)),
  inference(unit_resulting_resolution,[],[f2937,f1838])).
fof(f15681,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f15145,f12909])).
fof(f15145,plain,(
  ( ! [X0] : (~p(s(bool,'const.bool.BOUNDED_1'(s(bool,X0))))) ) | $spl62),
  inference(unit_resulting_resolution,[],[f1561,f1048,f12909,f997])).
fof(f15680,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f15146,f12909])).
fof(f15146,plain,(
  ( ! [X0] : (~p(s(bool,'const.bool.BOUNDED_1'(s(bool,X0))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3218,f1048,f12909,f997])).
fof(f15679,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f15147,f12909])).
fof(f15147,plain,(
  ( ! [X0] : (~p(s(bool,'const.bool.BOUNDED_1'(s(bool,X0))))) ) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f2931,f1048,f12909,f997])).
fof(f2931,plain,(
  ( ! [X0,X1] : (sP50('const.bool.BOUNDED_1'(s(bool,X0)),X1,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl1),
  inference(unit_resulting_resolution,[],[f1475,f1274])).
fof(f15678,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f15184,f12909])).
fof(f15184,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3195,f1048,f12909,f997])).
fof(f15677,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f15185,f12909])).
fof(f15185,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1477,f1048,f12909,f997])).
fof(f15676,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f15186,f531])).
fof(f15186,plain,(
  ~p(s(bool,'T_0')) | $spl62),
  inference(unit_resulting_resolution,[],[f1970,f1048,f12909,f997])).
fof(f15675,plain,(
  $false | ($spl4 | $spl6 | $spl62)),
  inference(subsumption_resolution,[],[f15188,f12909])).
fof(f15188,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f3254,f1048,f12909,f997])).
fof(f15674,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f15189,f531])).
fof(f15189,plain,(
  ~p(s(bool,'T_0')) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f4204,f1048,f12909,f997])).
fof(f15673,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f15190,f531])).
fof(f15190,plain,(
  ~p(s(bool,'T_0')) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3193,f1048,f12909,f997])).
fof(f15672,plain,(
  $false | ($spl4 | $spl8 | $spl62)),
  inference(subsumption_resolution,[],[f15192,f12909])).
fof(f15192,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f3231,f1048,f12909,f997])).
fof(f15671,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f15194,f12909])).
fof(f15194,plain,(
  ( ! [X0] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54))))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3218,f1048,f12909,f997])).
fof(f15670,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f15195,f12909])).
fof(f15195,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f2931,f1048,f12909,f997])).
fof(f15669,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f15246,f1067])).
fof(f15246,plain,(
  ( ! [X0] : (~sP49('F_0',X0,'F_0')) ) | $spl62),
  inference(unit_resulting_resolution,[],[f1229,f12909,f1028])).
fof(f15668,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f15247,f1475])).
fof(f15247,plain,(
  ( ! [X0] : (~sP49('F_0',X0,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) ) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1470,f12909,f1028])).
fof(f15667,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f15248,f3187])).
fof(f15248,plain,(
  ( ! [X0,X1] : (~sP49('F_0',X0,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3161,f12909,f1028])).
fof(f15666,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f15249,f1068])).
fof(f15249,plain,(
  ( ! [X0] : (~sP49('F_0','T_0',X0)) ) | $spl62),
  inference(unit_resulting_resolution,[],[f1233,f12909,f1028])).
fof(f15665,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f15250,f1067])).
fof(f15250,plain,(
  ( ! [X0] : (~sP49('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)),X0,'F_0')) ) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1468,f12909,f1028])).
fof(f15664,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f15251,f1068])).
fof(f15251,plain,(
  ( ! [X0] : (~sP49('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)),'T_0',X0)) ) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1474,f12909,f1028])).
fof(f15663,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f15252,f1067])).
fof(f15252,plain,(
  ( ! [X0,X1] : (~sP49('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X1,'F_0')) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3159,f12909,f1028])).
fof(f15662,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f15253,f3187])).
fof(f15253,plain,(
  ( ! [X2,X0,X1] : (~sP49('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X1,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3162,f12909,f1028])).
fof(f15661,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f15254,f1068])).
fof(f15254,plain,(
  ( ! [X0,X1] : (~sP49('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'T_0',X1)) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3171,f12909,f1028])).
fof(f15660,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f15286,f1064])).
fof(f15286,plain,(
  ( ! [X0] : (~sP47('F_0',X0,'T_0')) ) | $spl62),
  inference(unit_resulting_resolution,[],[f1204,f12909,f1029])).
fof(f15659,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f15287,f1065])).
fof(f15287,plain,(
  ( ! [X0] : (~sP47('F_0','T_0',X0)) ) | $spl62),
  inference(unit_resulting_resolution,[],[f1205,f12909,f1029])).
fof(f15658,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f15288,f1064])).
fof(f15288,plain,(
  ( ! [X0] : (~sP47('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)),X0,'T_0')) ) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1465,f12909,f1029])).
fof(f15657,plain,(
  $false | ($spl1 | $spl62)),
  inference(subsumption_resolution,[],[f15289,f1065])).
fof(f15289,plain,(
  ( ! [X0] : (~sP47('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)),'T_0',X0)) ) | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1466,f12909,f1029])).
fof(f15656,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f15290,f1064])).
fof(f15290,plain,(
  ( ! [X0,X1] : (~sP47('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),X1,'T_0')) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3090,f12909,f1029])).
fof(f15655,plain,(
  $false | ($spl4 | $spl62)),
  inference(subsumption_resolution,[],[f15291,f1065])).
fof(f15291,plain,(
  ( ! [X0,X1] : (~sP47('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)),'T_0',X1)) ) | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3091,f12909,f1029])).
fof(f15581,plain,(
  $false | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f2935,f12909,f2406])).
fof(f15579,plain,(
  $false | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f2936,f12909,f779])).
fof(f15577,plain,(
  $false | ($spl40 | $spl62)),
  inference(unit_resulting_resolution,[],[f1240,f1048,f12909,f9539])).
fof(f15569,plain,(
  $false | ($spl38 | $spl62)),
  inference(unit_resulting_resolution,[],[f1994,f12909,f9536])).
fof(f15567,plain,(
  $false | ($spl34 | $spl62)),
  inference(unit_resulting_resolution,[],[f1069,f1048,f12909,f9530])).
fof(f15559,plain,(
  $false | ($spl30 | $spl62)),
  inference(unit_resulting_resolution,[],[f1898,f12909,f9524])).
fof(f15557,plain,(
  $false | ($spl28 | $spl62)),
  inference(unit_resulting_resolution,[],[f1898,f12909,f9521])).
fof(f15555,plain,(
  $false | ($spl24 | $spl62)),
  inference(unit_resulting_resolution,[],[f1200,f1048,f12909,f9515])).
fof(f15544,plain,(
  $false | ($spl22 | $spl62)),
  inference(unit_resulting_resolution,[],[f1063,f1048,f12909,f9512])).
fof(f15536,plain,(
  $false | ($spl20 | $spl62)),
  inference(unit_resulting_resolution,[],[f1057,f1048,f12909,f9509])).
fof(f15528,plain,(
  $false | ($spl18 | $spl62)),
  inference(unit_resulting_resolution,[],[f1054,f1048,f12909,f9506])).
fof(f15519,plain,(
  $false | ($spl16 | $spl62)),
  inference(unit_resulting_resolution,[],[f1166,f12909,f9503])).
fof(f15516,plain,(
  $false | ($spl4 | $spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f1048,f3254,f12909,f2143])).
fof(f15514,plain,(
  $false | ($spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f1048,f2399,f12909,f2143])).
fof(f15511,plain,(
  $false | ($spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f4968,f12909,f2142])).
fof(f2142,plain,(
  ( ! [X33,X34] : (sP50('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)),X33,X34) | ~p(s(bool,X33))) ) | $spl6),
  inference(subsumption_resolution,[],[f2078,f531])).
fof(f2078,plain,(
  ( ! [X33,X34] : (~p(s(bool,'T_0')) | ~p(s(bool,X33)) | sP50('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)),X33,X34)) ) | $spl6),
  inference(superposition,[],[f996,f1111])).
fof(f15509,plain,(
  $false | ($spl1 | $spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f1048,f1476,f12909,f2140])).
fof(f15507,plain,(
  $false | ($spl4 | $spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f1048,f3188,f12909,f2140])).
fof(f15505,plain,(
  $false | ($spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f1048,f1069,f12909,f2140])).
fof(f15499,plain,(
  $false | ($spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f5222,f12909,f2138])).
fof(f2138,plain,(
  ( ! [X26,X25] : (sP48('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)),X25,X26) | ~p(s(bool,X25))) ) | $spl6),
  inference(subsumption_resolution,[],[f2074,f531])).
fof(f2074,plain,(
  ( ! [X26,X25] : (~p(s(bool,'T_0')) | ~p(s(bool,X25)) | sP48('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)),X25,X26)) ) | $spl6),
  inference(superposition,[],[f979,f1111])).
fof(f15497,plain,(
  $false | ($spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f5222,f12909,f2137])).
fof(f2137,plain,(
  ( ! [X24,X23] : (sP48('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)),X24,X23) | ~p(s(bool,X23))) ) | $spl6),
  inference(subsumption_resolution,[],[f2073,f531])).
fof(f2073,plain,(
  ( ! [X24,X23] : (~p(s(bool,'T_0')) | ~p(s(bool,X23)) | sP48('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)),X24,X23)) ) | $spl6),
  inference(superposition,[],[f978,f1111])).
fof(f15492,plain,(
  $false | ($spl4 | $spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f1048,f3083,f12909,f2135])).
fof(f15490,plain,(
  $false | ($spl1 | $spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f1048,f1460,f12909,f2135])).
fof(f15488,plain,(
  $false | ($spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f1048,f1200,f12909,f2135])).
fof(f15485,plain,(
  $false | ($spl4 | $spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f1048,f3076,f12909,f2134])).
fof(f15483,plain,(
  $false | ($spl1 | $spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f1048,f1454,f12909,f2134])).
fof(f15481,plain,(
  $false | ($spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f1048,f1063,f12909,f2134])).
fof(f15475,plain,(
  $false | ($spl4 | $spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f1048,f3025,f12909,f2133])).
fof(f2133,plain,(
  ( ! [X15,X16] : (~sP42(X15,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)),X16) | p(s(bool,X16)) | ~p(s(bool,X15))) ) | $spl6),
  inference(subsumption_resolution,[],[f2069,f531])).
fof(f2069,plain,(
  ( ! [X15,X16] : (~p(s(bool,'T_0')) | ~p(s(bool,X15)) | p(s(bool,X16)) | ~sP42(X15,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)),X16)) ) | $spl6),
  inference(superposition,[],[f937,f1111])).
fof(f15473,plain,(
  $false | ($spl1 | $spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f1048,f1448,f12909,f2133])).
fof(f15471,plain,(
  $false | ($spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f1048,f1057,f12909,f2133])).
fof(f15465,plain,(
  $false | ($spl4 | $spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f1048,f3018,f12909,f2132])).
fof(f2132,plain,(
  ( ! [X14,X13] : (~sP43(X13,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)),X14) | p(s(bool,X14)) | ~p(s(bool,X13))) ) | $spl6),
  inference(subsumption_resolution,[],[f2068,f531])).
fof(f2068,plain,(
  ( ! [X14,X13] : (~p(s(bool,'T_0')) | ~p(s(bool,X13)) | p(s(bool,X14)) | ~sP43(X13,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)),X14)) ) | $spl6),
  inference(superposition,[],[f933,f1111])).
fof(f15463,plain,(
  $false | ($spl1 | $spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f1048,f1446,f12909,f2132])).
fof(f15461,plain,(
  $false | ($spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f1048,f1054,f12909,f2132])).
fof(f15455,plain,(
  $false | ($spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f1166,f12909,f2131])).
fof(f2131,plain,(
  ( ! [X12,X11] : (sP40(X11,X12,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56))) | ~p(s(bool,X11))) ) | $spl6),
  inference(subsumption_resolution,[],[f2067,f531])).
fof(f2067,plain,(
  ( ! [X12,X11] : (~p(s(bool,'T_0')) | ~p(s(bool,X11)) | sP40(X11,X12,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)))) ) | $spl6),
  inference(superposition,[],[f921,f1111])).
fof(f15450,plain,(
  $false | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1048,f2931,f12909,f2024])).
fof(f15448,plain,(
  $false | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f1048,f3218,f12909,f2024])).
fof(f15446,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1048,f1561,f12909,f2024])).
fof(f15440,plain,(
  $false | ($spl4 | $spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f1048,f3231,f12909,f2023])).
fof(f15438,plain,(
  $false | ($spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f1048,f2032,f12909,f2023])).
fof(f15435,plain,(
  $false | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1048,f1476,f12909,f1990])).
fof(f15433,plain,(
  $false | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f1048,f3188,f12909,f1990])).
fof(f15431,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1048,f1069,f12909,f1990])).
fof(f15425,plain,(
  $false | ($spl1 | $spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f1048,f1476,f12909,f1989])).
fof(f15423,plain,(
  $false | ($spl4 | $spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f1048,f3188,f12909,f1989])).
fof(f15421,plain,(
  $false | ($spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f1048,f1069,f12909,f1989])).
fof(f15415,plain,(
  $false | ($spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f2698,f12909,f1839])).
fof(f15413,plain,(
  $false | ($spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f2597,f12909,f1837])).
fof(f15411,plain,(
  $false | ($spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f2597,f12909,f1836])).
fof(f15406,plain,(
  $false | ($spl4 | $spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f1048,f3083,f12909,f1835])).
fof(f15404,plain,(
  $false | ($spl1 | $spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f1048,f1460,f12909,f1835])).
fof(f15402,plain,(
  $false | ($spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f1048,f1200,f12909,f1835])).
fof(f15399,plain,(
  $false | ($spl4 | $spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f1048,f3076,f12909,f1834])).
fof(f15397,plain,(
  $false | ($spl1 | $spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f1048,f1454,f12909,f1834])).
fof(f15395,plain,(
  $false | ($spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f1048,f1063,f12909,f1834])).
fof(f15389,plain,(
  $false | ($spl4 | $spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f1048,f3025,f12909,f1833])).
fof(f15387,plain,(
  $false | ($spl1 | $spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f1048,f1448,f12909,f1833])).
fof(f15385,plain,(
  $false | ($spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f1048,f1057,f12909,f1833])).
fof(f15379,plain,(
  $false | ($spl4 | $spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f1048,f3018,f12909,f1832])).
fof(f15377,plain,(
  $false | ($spl1 | $spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f1048,f1446,f12909,f1832])).
fof(f15375,plain,(
  $false | ($spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f1048,f1054,f12909,f1832])).
fof(f15369,plain,(
  $false | ($spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f1166,f12909,f1831])).
fof(f15364,plain,(
  $false | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f1048,f3083,f12909,f1750])).
fof(f15362,plain,(
  $false | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1048,f1460,f12909,f1750])).
fof(f15360,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1048,f1200,f12909,f1750])).
fof(f15357,plain,(
  $false | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f1048,f3076,f12909,f1724])).
fof(f15355,plain,(
  $false | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1048,f1454,f12909,f1724])).
fof(f15353,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1048,f1063,f12909,f1724])).
fof(f15347,plain,(
  $false | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f1048,f3025,f12909,f1677])).
fof(f15345,plain,(
  $false | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1048,f1448,f12909,f1677])).
fof(f15343,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1048,f1057,f12909,f1677])).
fof(f15337,plain,(
  $false | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f1048,f3018,f12909,f1659])).
fof(f15335,plain,(
  $false | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1048,f1446,f12909,f1659])).
fof(f15333,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1048,f1054,f12909,f1659])).
fof(f15327,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f4986,f12909,f1254])).
fof(f15325,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f4785,f12909,f1222])).
fof(f15323,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f4785,f12909,f1210])).
fof(f15321,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1166,f12909,f1187])).
fof(f15318,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1159,f12909,f1031])).
fof(f15314,plain,(
  $false | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3090,f3134,f12909,f1029])).
fof(f15312,plain,(
  $false | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1465,f1467,f12909,f1029])).
fof(f1467,plain,(
  ( ! [X0,X1] : (sP47('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)),X0,X1)) ) | $spl1),
  inference(unit_resulting_resolution,[],[f1040,f976])).
fof(f15310,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1204,f1066,f12909,f1029])).
fof(f15308,plain,(
  $false | ($spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f1204,f1080,f12909,f1029])).
fof(f15306,plain,(
  $false | ($spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f1204,f1099,f12909,f1029])).
fof(f1099,plain,(
  ( ! [X0,X1] : (sP47(X0,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)),X1)) ) | $spl6),
  inference(unit_resulting_resolution,[],[f1045,f975])).
fof(f15304,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1205,f1065,f12909,f1029])).
fof(f15302,plain,(
  $false | ($spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f1205,f1098,f12909,f1029])).
fof(f1098,plain,(
  ( ! [X0,X1] : (sP47(X0,X1,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f1045,f974])).
fof(f15300,plain,(
  $false | ($spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f1205,f1079,f12909,f1029])).
fof(f15298,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1204,f1064,f12909,f1029])).
fof(f15281,plain,(
  $false | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1468,f1476,f12909,f1028])).
fof(f15279,plain,(
  $false | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3159,f3188,f12909,f1028])).
fof(f15277,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1229,f1069,f12909,f1028])).
fof(f15275,plain,(
  $false | ($spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f1229,f1081,f12909,f1028])).
fof(f15273,plain,(
  $false | ($spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f1229,f1100,f12909,f1028])).
fof(f15271,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1233,f1068,f12909,f1028])).
fof(f15269,plain,(
  $false | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3161,f3187,f12909,f1028])).
fof(f15267,plain,(
  $false | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1470,f1475,f12909,f1028])).
fof(f15265,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1229,f1067,f12909,f1028])).
fof(f15239,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1240,f1048,f12909,f12909,f997])).
fof(f15212,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1970,f1048,f531,f12909,f997])).
fof(f15182,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1240,f1048,f12909,f12909,f997])).
fof(f15155,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1240,f1048,f531,f12909,f997])).
fof(f15134,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1994,f12909,f12909,f996])).
fof(f15132,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1233,f531,f12909,f996])).
fof(f15106,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1994,f12909,f12909,f996])).
fof(f15104,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1994,f531,f12909,f996])).
fof(f15078,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1229,f1048,f12909,f995])).
fof(f15052,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1229,f1048,f1048,f12909,f994])).
fof(f15028,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1982,f12909,f992])).
fof(f15026,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1067,f12909,f1048,f12909,f990])).
fof(f15024,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1067,f531,f1048,f12909,f990])).
fof(f15001,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1067,f12909,f1048,f12909,f990])).
fof(f14999,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1069,f531,f1048,f12909,f990])).
fof(f14976,plain,(
  $false | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1468,f1476,f1048,f12909,f989])).
fof(f14974,plain,(
  $false | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3159,f3188,f1048,f12909,f989])).
fof(f14972,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1229,f1069,f1048,f12909,f989])).
fof(f14970,plain,(
  $false | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3161,f3187,f1048,f12909,f989])).
fof(f14968,plain,(
  $false | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1470,f1475,f1048,f12909,f989])).
fof(f14966,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1229,f1067,f1048,f12909,f989])).
fof(f14919,plain,(
  $false | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1468,f1476,f1048,f12909,f988])).
fof(f14917,plain,(
  $false | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3159,f3188,f1048,f12909,f988])).
fof(f14915,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1229,f1069,f1048,f12909,f988])).
fof(f14913,plain,(
  $false | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3161,f3187,f1048,f12909,f988])).
fof(f14911,plain,(
  $false | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1470,f1475,f1048,f12909,f988])).
fof(f14909,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1229,f1067,f1048,f12909,f988])).
fof(f14862,plain,(
  $false | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1468,f1476,f12909,f12909,f987])).
fof(f14860,plain,(
  $false | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3159,f3188,f12909,f12909,f987])).
fof(f14858,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1229,f1069,f12909,f12909,f987])).
fof(f14856,plain,(
  $false | ($spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f1229,f1081,f12909,f12909,f987])).
fof(f14854,plain,(
  $false | ($spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f1229,f1100,f12909,f12909,f987])).
fof(f14852,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1233,f1068,f12909,f12909,f987])).
fof(f14850,plain,(
  $false | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3161,f3187,f12909,f12909,f987])).
fof(f14848,plain,(
  $false | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1470,f1475,f12909,f12909,f987])).
fof(f14846,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1229,f1067,f12909,f12909,f987])).
fof(f14758,plain,(
  $false | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3188,f3171,f12909,f12909,f987])).
fof(f14756,plain,(
  $false | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3188,f3162,f12909,f12909,f987])).
fof(f14754,plain,(
  $false | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3188,f3159,f12909,f12909,f987])).
fof(f14752,plain,(
  $false | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1476,f1474,f12909,f12909,f987])).
fof(f14750,plain,(
  $false | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1476,f1468,f12909,f12909,f987])).
fof(f14748,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1069,f1233,f12909,f12909,f987])).
fof(f14746,plain,(
  $false | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f1069,f3161,f12909,f12909,f987])).
fof(f14744,plain,(
  $false | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1069,f1470,f12909,f12909,f987])).
fof(f14742,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1069,f1229,f12909,f12909,f987])).
fof(f14721,plain,(
  $false | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3188,f3171,f531,f12909,f987])).
fof(f14719,plain,(
  $false | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1476,f1474,f531,f12909,f987])).
fof(f14717,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1069,f1233,f531,f12909,f987])).
fof(f14678,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1970,f1048,f12909,f984])).
fof(f14651,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1872,f1048,f1048,f12909,f980])).
fof(f14617,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1898,f12909,f12909,f979])).
fof(f14615,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1205,f531,f12909,f979])).
fof(f14598,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1898,f12909,f12909,f979])).
fof(f14596,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1898,f531,f12909,f979])).
fof(f14579,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1898,f12909,f12909,f978])).
fof(f14577,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1204,f531,f12909,f978])).
fof(f14560,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1898,f12909,f12909,f978])).
fof(f14558,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1898,f531,f12909,f978])).
fof(f14541,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1884,f12909,f975])).
fof(f14539,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1884,f12909,f974])).
fof(f14537,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1066,f1048,f1048,f12909,f973])).
fof(f14520,plain,(
  $false | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3090,f3134,f1048,f12909,f971])).
fof(f14518,plain,(
  $false | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1465,f1467,f1048,f12909,f971])).
fof(f14516,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1204,f1066,f1048,f12909,f971])).
fof(f14512,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1204,f1064,f1048,f12909,f971])).
fof(f14476,plain,(
  $false | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3134,f3091,f1048,f12909,f970])).
fof(f14474,plain,(
  $false | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1467,f1466,f1048,f12909,f970])).
fof(f14472,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1066,f1205,f1048,f12909,f970])).
fof(f14443,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1872,f1048,f12909,f967])).
fof(f14411,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1872,f1048,f12909,f966])).
fof(f14379,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1194,f1048,f12909,f12909,f965])).
fof(f14362,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1194,f1048,f531,f12909,f965])).
fof(f14345,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1194,f1048,f12909,f12909,f965])).
fof(f14328,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1200,f1048,f531,f12909,f965])).
fof(f14311,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1190,f12909,f12909,f12909,f962])).
fof(f14309,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1191,f531,f12909,f12909,f962])).
fof(f14291,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1190,f12909,f531,f12909,f962])).
fof(f14289,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1728,f531,f531,f12909,f962])).
fof(f14257,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1190,f12909,f12909,f12909,f962])).
fof(f14255,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1190,f531,f12909,f12909,f962])).
fof(f14237,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1190,f12909,f531,f12909,f962])).
fof(f14235,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1190,f531,f531,f12909,f962])).
fof(f14202,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1190,f12909,f12909,f12909,f962])).
fof(f14200,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1190,f531,f12909,f12909,f962])).
fof(f14182,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1191,f12909,f531,f12909,f962])).
fof(f14180,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1191,f531,f531,f12909,f962])).
fof(f14151,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1718,f12909,f957])).
fof(f14149,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1062,f1048,f12909,f12909,f956])).
fof(f14138,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1062,f1048,f531,f12909,f956])).
fof(f14124,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1062,f1048,f12909,f12909,f956])).
fof(f14113,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1063,f1048,f531,f12909,f956])).
fof(f14089,plain,(
  $false | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3076,f3067,f12909,f12909,f952])).
fof(f14087,plain,(
  $false | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1454,f1451,f12909,f12909,f952])).
fof(f14085,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1063,f1191,f12909,f12909,f952])).
fof(f14083,plain,(
  $false | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3075,f3064,f12909,f12909,f952])).
fof(f14081,plain,(
  $false | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1453,f1449,f12909,f12909,f952])).
fof(f14079,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1062,f1190,f12909,f12909,f952])).
fof(f14062,plain,(
  $false | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3075,f3064,f531,f12909,f952])).
fof(f14060,plain,(
  $false | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1453,f1449,f531,f12909,f952])).
fof(f14058,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1062,f1190,f531,f12909,f952])).
fof(f14018,plain,(
  $false | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3076,f3067,f12909,f12909,f952])).
fof(f14016,plain,(
  $false | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1454,f1451,f12909,f12909,f952])).
fof(f14014,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1063,f1191,f12909,f12909,f952])).
fof(f14012,plain,(
  $false | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3075,f3064,f12909,f12909,f952])).
fof(f14010,plain,(
  $false | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1453,f1449,f12909,f12909,f952])).
fof(f14008,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1062,f1190,f12909,f12909,f952])).
fof(f13995,plain,(
  $false | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3076,f3067,f531,f12909,f952])).
fof(f13993,plain,(
  $false | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1454,f1451,f531,f12909,f952])).
fof(f13991,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1063,f1191,f531,f12909,f952])).
fof(f13961,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1200,f1048,f12909,f951])).
fof(f13944,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1194,f1048,f12909,f950])).
fof(f13927,plain,(
  $false | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f2788,f1415,f12909,f947])).
fof(f13925,plain,(
  $false | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3589,f2943,f12909,f947])).
fof(f13923,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1573,f1102,f12909,f947])).
fof(f13921,plain,(
  $false | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f2777,f1415,f12909,f947])).
fof(f13919,plain,(
  $false | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3568,f2943,f12909,f947])).
fof(f13917,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1574,f1102,f12909,f947])).
fof(f13869,plain,(
  $false | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f5353,f1416,f12909,f946])).
fof(f13867,plain,(
  $false | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3600,f2947,f12909,f946])).
fof(f13865,plain,(
  $false | ($spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f2049,f1111,f12909,f946])).
fof(f13863,plain,(
  $false | ($spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f1757,f1110,f12909,f946])).
fof(f13861,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1609,f538,f12909,f946])).
fof(f13859,plain,(
  $false | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f5323,f1416,f12909,f946])).
fof(f13857,plain,(
  $false | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3605,f2947,f12909,f946])).
fof(f13855,plain,(
  $false | ($spl6 | $spl62)),
  inference(unit_resulting_resolution,[],[f2047,f1111,f12909,f946])).
fof(f13853,plain,(
  $false | ($spl8 | $spl62)),
  inference(unit_resulting_resolution,[],[f1755,f1110,f12909,f946])).
fof(f13851,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1607,f538,f12909,f946])).
fof(f15635,plain,(
  $false | ($spl4 | $spl62)),
  inference(trivial_inequality_removal,[],[f13841])).
fof(f13841,plain,(
  s(bool,'F_0') != s(bool,'F_0') | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3613,f12909,f946])).
fof(f15634,plain,(
  $false | ($spl4 | $spl62)),
  inference(trivial_inequality_removal,[],[f13837])).
fof(f13837,plain,(
  s(bool,'T_0') != s(bool,'T_0') | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f3558,f12909,f946])).
fof(f15633,plain,(
  $false | $spl62),
  inference(trivial_inequality_removal,[],[f13825])).
fof(f13825,plain,(
  s(bool,'F_0') != s(bool,'F_0') | $spl62),
  inference(unit_resulting_resolution,[],[f1702,f12909,f946])).
fof(f15632,plain,(
  $false | $spl62),
  inference(trivial_inequality_removal,[],[f13821])).
fof(f13821,plain,(
  s(bool,'T_0') != s(bool,'T_0') | $spl62),
  inference(unit_resulting_resolution,[],[f1681,f12909,f946])).
fof(f13810,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1689,f12909,f944])).
fof(f13808,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1689,f12909,f943])).
fof(f13806,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1689,f12909,f942])).
fof(f13804,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1671,f12909,f938])).
fof(f13802,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1056,f1048,f12909,f12909,f937])).
fof(f13791,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1056,f1048,f531,f12909,f937])).
fof(f13777,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1056,f1048,f12909,f12909,f937])).
fof(f13766,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1057,f1048,f531,f12909,f937])).
fof(f13752,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1652,f12909,f934])).
fof(f13750,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1053,f1048,f12909,f12909,f933])).
fof(f13738,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1053,f1048,f531,f12909,f933])).
fof(f13723,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1053,f1048,f12909,f12909,f933])).
fof(f13711,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1054,f1048,f531,f12909,f933])).
fof(f13593,plain,(
  $false | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f1059,f2987,f1052,f3024,f12909,f930])).
fof(f13584,plain,(
  $false | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f1059,f2987,f3017,f3024,f12909,f930])).
fof(f13556,plain,(
  $false | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1059,f5290,f1052,f1447,f12909,f930])).
fof(f13549,plain,(
  $false | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1059,f5290,f1445,f1447,f12909,f930])).
fof(f13518,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1059,f1600,f1052,f1056,f12909,f930])).
fof(f13507,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1059,f1600,f1053,f1056,f12909,f930])).
fof(f13442,plain,(
  $false | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f1059,f2987,f3017,f1055,f12909,f930])).
fof(f13436,plain,(
  $false | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1059,f5290,f1445,f1055,f12909,f930])).
fof(f13430,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1059,f1600,f1053,f1055,f12909,f930])).
fof(f13414,plain,(
  $false | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f1059,f5290,f1052,f1055,f12909,f930])).
fof(f13412,plain,(
  $false | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f1059,f2987,f1052,f1055,f12909,f930])).
fof(f13410,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1059,f1600,f1052,f1055,f12909,f930])).
fof(f13340,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f2268,f12909,f1048,f12909,f929])).
fof(f13338,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f2268,f531,f1048,f12909,f929])).
fof(f13265,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f2268,f1048,f12909,f12909,f929])).
fof(f13217,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1574,f1048,f531,f12909,f929])).
fof(f13192,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1159,f12909,f12909,f921])).
fof(f13190,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1159,f531,f12909,f921])).
fof(f13176,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1159,f12909,f12909,f921])).
fof(f13174,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1166,f531,f12909,f921])).
fof(f13160,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1159,f12909,f12909,f920])).
fof(f13158,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1159,f531,f12909,f920])).
fof(f13144,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1159,f12909,f12909,f920])).
fof(f13129,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1159,f12909,f12909,f919])).
fof(f13114,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1159,f12909,f12909,f919])).
fof(f13112,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1166,f531,f12909,f919])).
fof(f13098,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1123,f1048,f12909,f643])).
fof(f13089,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1123,f1048,f12909,f640])).
fof(f13080,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1127,f12909,f12909,f639])).
fof(f13078,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1127,f531,f12909,f639])).
fof(f13056,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1127,f12909,f12909,f639])).
fof(f13054,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1134,f531,f12909,f639])).
fof(f13032,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1147,f12909,f625])).
fof(f13030,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1147,f12909,f624])).
fof(f13028,plain,(
  $false | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f12909,f1415,f12909,f612])).
fof(f13026,plain,(
  $false | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f12909,f2943,f12909,f612])).
fof(f13024,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f12909,f1102,f12909,f612])).
fof(f13022,plain,(
  $false | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f531,f1415,f12909,f612])).
fof(f13020,plain,(
  $false | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f531,f2943,f12909,f612])).
fof(f13018,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f531,f1102,f12909,f612])).
fof(f13014,plain,(
  $false | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f12909,f1415,f12909,f612])).
fof(f13012,plain,(
  $false | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f12909,f2943,f12909,f612])).
fof(f13010,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f12909,f1102,f12909,f612])).
fof(f13008,plain,(
  $false | ($spl1 | $spl62)),
  inference(unit_resulting_resolution,[],[f531,f1415,f12909,f612])).
fof(f13006,plain,(
  $false | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f531,f2943,f12909,f612])).
fof(f13004,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f531,f1102,f12909,f612])).
fof(f12996,plain,(
  $false | ($spl4 | $spl62)),
  inference(unit_resulting_resolution,[],[f2947,f12909,f551])).
fof(f12994,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1102,f12909,f548])).
fof(f12992,plain,(
  $false | $spl62),
  inference(unit_resulting_resolution,[],[f1048,f12909])).
fof(f12987,plain,(
  ( ! [X35,X36] : (sP1('F_0',X35) | s(bool,'T_0') = s(bool,X36) | s(bool,X35) = s(bool,X36)) ) | $spl64),
  inference(cnf_transformation,[],[f12987_D])).
fof(f12987_D,plain,(
  ( ! [X35,X36] : (sP1('F_0',X35) | s(bool,'T_0') = s(bool,X36) | s(bool,X35) = s(bool,X36)) ) <=> ~$spl64),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl64])])).
fof(f12986,plain,(
  ( ! [X35,X36,X34] : (p(s(bool,X34)) | sP1('F_0',X35) | s(bool,X35) = s(bool,X36) | s(bool,'T_0') = s(bool,X36)) )),
  inference(subsumption_resolution,[],[f12972,f547])).
fof(f12972,plain,(
  ( ! [X35,X36,X34] : (p(s(bool,X34)) | sP1('F_0',X35) | s(bool,X35) = s(bool,X36) | s(bool,'T_0') = s(bool,X36) | s(bool,'T_0') = s(bool,X34)) )),
  inference(superposition,[],[f9572,f539])).
fof(f12908,plain,(
  ( ! [X35,X36] : (sP1(X35,'F_0') | s(bool,'T_0') = s(bool,X36) | s(bool,X35) = s(bool,X36)) ) | $spl60),
  inference(cnf_transformation,[],[f12908_D])).
fof(f12908_D,plain,(
  ( ! [X35,X36] : (sP1(X35,'F_0') | s(bool,'T_0') = s(bool,X36) | s(bool,X35) = s(bool,X36)) ) <=> ~$spl60),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl60])])).
fof(f12907,plain,(
  ( ! [X35,X36,X34] : (p(s(bool,X34)) | sP1(X35,'F_0') | s(bool,X35) = s(bool,X36) | s(bool,'T_0') = s(bool,X36)) )),
  inference(subsumption_resolution,[],[f12893,f547])).
fof(f12893,plain,(
  ( ! [X35,X36,X34] : (p(s(bool,X34)) | sP1(X35,'F_0') | s(bool,X35) = s(bool,X36) | s(bool,'T_0') = s(bool,X36) | s(bool,'T_0') = s(bool,X34)) )),
  inference(superposition,[],[f9571,f539])).
fof(f10221,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f530,f529,f528,f527,f531,f1048,f538,f539,f548,f547,f552,f551,f587,f586,f593,f591,f596,f594,f601,f599,f604,f603,f602,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f655,f654,f653,f658,f657,f656,f661,f660,f659,f664,f663,f662,f667,f666,f665,f670,f669,f668,f674,f673,f672,f671,f677,f676,f675,f680,f679,f678,f684,f683,f682,f681,f688,f687,f686,f685,f692,f691,f690,f689,f697,f696,f695,f694,f693,f702,f701,f700,f699,f698,f705,f704,f703,f717,f716,f715,f714,f713,f712,f711,f710,f709,f708,f707,f706,f727,f726,f725,f724,f723,f722,f721,f720,f719,f718,f737,f736,f735,f734,f733,f732,f731,f730,f729,f728,f741,f740,f739,f738,f745,f744,f743,f742,f750,f749,f748,f747,f746,f755,f754,f753,f752,f751,f760,f759,f758,f757,f756,f768,f767,f766,f765,f764,f763,f762,f761,f778,f777,f776,f775,f774,f773,f772,f771,f770,f769,f780,f779,f792,f791,f790,f789,f788,f787,f786,f785,f784,f783,f782,f781,f802,f801,f800,f799,f798,f797,f796,f795,f794,f793,f812,f811,f810,f809,f808,f807,f806,f805,f804,f803,f816,f815,f814,f813,f820,f819,f818,f817,f825,f824,f823,f822,f821,f830,f829,f828,f827,f826,f835,f834,f833,f832,f831,f843,f842,f841,f840,f839,f838,f837,f836,f846,f845,f844,f858,f857,f856,f855,f854,f853,f852,f851,f850,f849,f848,f847,f868,f867,f866,f865,f864,f863,f862,f861,f860,f859,f878,f877,f876,f875,f874,f873,f872,f871,f870,f869,f882,f881,f880,f879,f886,f885,f884,f883,f891,f890,f889,f888,f887,f896,f895,f894,f893,f892,f901,f900,f899,f898,f897,f909,f908,f907,f906,f905,f904,f903,f902,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1019,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2330,f2331,f2339,f2359,f2432,f2433,f2436,f2442,f2443,f2474,f2475,f2526,f2525,f2529,f2530,f2533,f2565,f2564,f2568,f2569,f2572,f2608,f2607,f2617,f2618,f2621,f2672,f2684,f2696,f2706,f2718,f2734,f2753,f2754,f2845,f2876,f2877,f2935,f2938,f2940,f2941,f3442,f3443,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f3884,f4202,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4519,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5689,f6240,f6241,f6247,f6256,f6273,f6286,f6932,f7303,f7383,f7384,f7549,f7550,f7551,f7553,f7558,f7561,f7565,f7575,f7576,f7577,f7578,f7579,f7580,f7581,f7582,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8008,f8009,f8010,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9600,f9602,f9603,f9604,f9605,f9606,f9607,f9608,f9609,f9610,f9611,f9612,f9613,f9614,f9615,f9621,f9622,f8244,f8245,f8246,f8248,f8253,f8256,f8260,f8270,f8271,f8272,f8273,f8274,f8275,f8276,f8277,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f9497,f10010,f9686,f9689,f9692,f10034,f10036,f10056,f10074,f10082,f10094,f10098,f10102,f10106,f10110,f10114,f10118,f10122,f10126,f10130,f10132,f10134,f10136,f10140,f10142,f10144,f10146,f10150,f10152,f10154,f10156,f10158,f10160,f10162,f10164,f10192,f10200,f10202,f10204,f10206,f10208,f10210,f10212,f10214,f10216,f10218,f10220])).
fof(f10220,plain,(
  ( ! [X2,X0,X1] : (~sP39(X0,X1,X2)) ) | $spl12),
  inference(subsumption_resolution,[],[f9961,f531])).
fof(f9961,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | ~sP39(X0,X1,X2)) ) | $spl12),
  inference(backward_demodulation,[],[f9497,f851])).
fof(f10218,plain,(
  ( ! [X2,X0,X1] : (~sP31(X0,X1,X2)) ) | $spl12),
  inference(subsumption_resolution,[],[f9956,f531])).
fof(f9956,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | ~sP31(X0,X1,X2)) ) | $spl12),
  inference(backward_demodulation,[],[f9497,f785])).
fof(f10216,plain,(
  ( ! [X2,X0,X1] : (~sP22(X0,X1,X2)) ) | $spl12),
  inference(subsumption_resolution,[],[f9951,f531])).
fof(f9951,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | ~sP22(X0,X1,X2)) ) | $spl12),
  inference(backward_demodulation,[],[f9497,f710])).
fof(f10214,plain,(
  ( ! [X0,X1] : (~sP14(X0,X1)) ) | $spl12),
  inference(subsumption_resolution,[],[f9946,f531])).
fof(f9946,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | ~sP14(X0,X1)) ) | $spl12),
  inference(backward_demodulation,[],[f9497,f677])).
fof(f10212,plain,(
  ( ! [X0,X1] : (~sP12(X0,X1)) ) | $spl12),
  inference(subsumption_resolution,[],[f9942,f531])).
fof(f9942,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | ~sP12(X0,X1)) ) | $spl12),
  inference(backward_demodulation,[],[f9497,f684])).
fof(f10210,plain,(
  ( ! [X0,X1] : (~sP4(X0,X1)) ) | $spl12),
  inference(subsumption_resolution,[],[f9941,f531])).
fof(f9941,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | ~sP4(X0,X1)) ) | $spl12),
  inference(backward_demodulation,[],[f9497,f664])).
fof(f10208,plain,(
  ( ! [X0,X1] : (~sP11(X0,X1)) ) | $spl12),
  inference(subsumption_resolution,[],[f9940,f531])).
fof(f9940,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | ~sP11(X0,X1)) ) | $spl12),
  inference(backward_demodulation,[],[f9497,f688])).
fof(f10206,plain,(
  ( ! [X0,X1] : (~sP3(X0,X1)) ) | $spl12),
  inference(subsumption_resolution,[],[f9939,f531])).
fof(f9939,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | ~sP3(X0,X1)) ) | $spl12),
  inference(backward_demodulation,[],[f9497,f667])).
fof(f10204,plain,(
  ( ! [X0,X1] : (~sP10(X0,X1)) ) | $spl12),
  inference(subsumption_resolution,[],[f9938,f531])).
fof(f9938,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | ~sP10(X0,X1)) ) | $spl12),
  inference(backward_demodulation,[],[f9497,f692])).
fof(f10202,plain,(
  ( ! [X0,X1] : (~sP13(X0,X1)) ) | $spl12),
  inference(subsumption_resolution,[],[f9937,f531])).
fof(f9937,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | ~sP13(X0,X1)) ) | $spl12),
  inference(backward_demodulation,[],[f9497,f680])).
fof(f10200,plain,(
  ( ! [X0,X1] : (~sP2(X0,X1)) ) | $spl12),
  inference(subsumption_resolution,[],[f9936,f531])).
fof(f9936,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | ~sP2(X0,X1)) ) | $spl12),
  inference(backward_demodulation,[],[f9497,f670])).
fof(f10192,plain,(
  ( ! [X2,X0,X1] : (sP7(X2,X1,X0) | sP6(X2,X0) | sP5(X1,X0) | sP4(X0,X2) | sP3(X0,X2) | sP2(X0,X1)) ) | $spl12),
  inference(subsumption_resolution,[],[f10191,f531])).
fof(f10191,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | sP7(X2,X1,X0) | sP6(X2,X0) | sP5(X1,X0) | sP4(X0,X2) | sP3(X0,X2) | sP2(X0,X1)) ) | $spl12),
  inference(forward_demodulation,[],[f10190,f9497])).
fof(f10190,plain,(
  ( ! [X2,X0,X1] : (sP7(X2,X1,X0) | sP6(X2,X0) | sP5(X1,X0) | sP4(X0,X2) | sP3(X0,X2) | sP2(X0,X1) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK100(X2,X1,X0)))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK101(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK101(X2,X1,X0)))))))) ) | $spl12),
  inference(subsumption_resolution,[],[f10189,f531])).
fof(f10189,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | sP7(X2,X1,X0) | sP6(X2,X0) | sP5(X1,X0) | sP4(X0,X2) | sP3(X0,X2) | sP2(X0,X1) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK100(X2,X1,X0)))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK101(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK101(X2,X1,X0)))))))) ) | $spl12),
  inference(forward_demodulation,[],[f10188,f9497])).
fof(f10188,plain,(
  ( ! [X2,X0,X1] : (sP7(X2,X1,X0) | sP6(X2,X0) | sP5(X1,X0) | sP4(X0,X2) | sP3(X0,X2) | sP2(X0,X1) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK102(X2,X1,X0)))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),sK103(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),sK104(X2,X1,X0))))))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK100(X2,X1,X0)))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK101(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK101(X2,X1,X0)))))))) ) | $spl12),
  inference(subsumption_resolution,[],[f10187,f531])).
fof(f10187,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | sP7(X2,X1,X0) | sP6(X2,X0) | sP5(X1,X0) | sP4(X0,X2) | sP3(X0,X2) | sP2(X0,X1) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK102(X2,X1,X0)))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),sK103(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),sK104(X2,X1,X0))))))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK100(X2,X1,X0)))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK101(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK101(X2,X1,X0)))))))) ) | $spl12),
  inference(forward_demodulation,[],[f10186,f9497])).
fof(f10186,plain,(
  ( ! [X2,X0,X1] : (sP7(X2,X1,X0) | sP6(X2,X0) | sP5(X1,X0) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK105(X2,X1,X0)))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK106(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK106(X2,X1,X0))))))) | sP4(X0,X2) | sP3(X0,X2) | sP2(X0,X1) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK102(X2,X1,X0)))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),sK103(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),sK104(X2,X1,X0))))))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK100(X2,X1,X0)))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK101(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK101(X2,X1,X0)))))))) ) | $spl12),
  inference(subsumption_resolution,[],[f10185,f531])).
fof(f10185,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | sP7(X2,X1,X0) | sP6(X2,X0) | sP5(X1,X0) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK105(X2,X1,X0)))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK106(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK106(X2,X1,X0))))))) | sP4(X0,X2) | sP3(X0,X2) | sP2(X0,X1) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK102(X2,X1,X0)))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),sK103(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),sK104(X2,X1,X0))))))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK100(X2,X1,X0)))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK101(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK101(X2,X1,X0)))))))) ) | $spl12),
  inference(forward_demodulation,[],[f10184,f9497])).
fof(f10184,plain,(
  ( ! [X2,X0,X1] : (sP7(X2,X1,X0) | sP6(X2,X0) | sP5(X1,X0) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK107(X2,X1,X0)))),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),sK108(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),sK109(X2,X1,X0))))))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK105(X2,X1,X0)))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK106(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK106(X2,X1,X0))))))) | sP4(X0,X2) | sP3(X0,X2) | sP2(X0,X1) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK102(X2,X1,X0)))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),sK103(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),sK104(X2,X1,X0))))))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK100(X2,X1,X0)))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK101(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK101(X2,X1,X0)))))))) ) | $spl12),
  inference(subsumption_resolution,[],[f10183,f531])).
fof(f10183,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | sP7(X2,X1,X0) | sP6(X2,X0) | sP5(X1,X0) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK107(X2,X1,X0)))),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),sK108(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),sK109(X2,X1,X0))))))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK105(X2,X1,X0)))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK106(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK106(X2,X1,X0))))))) | sP4(X0,X2) | sP3(X0,X2) | sP2(X0,X1) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK102(X2,X1,X0)))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),sK103(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),sK104(X2,X1,X0))))))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK100(X2,X1,X0)))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK101(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK101(X2,X1,X0)))))))) ) | $spl12),
  inference(forward_demodulation,[],[f10182,f9497])).
fof(f10182,plain,(
  ( ! [X2,X0,X1] : (sP7(X2,X1,X0) | sP6(X2,X0) | sP5(X1,X0) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK110(X2,X1,X0)))),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK107(X2,X1,X0)))),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),sK108(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),sK109(X2,X1,X0))))))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK105(X2,X1,X0)))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK106(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK106(X2,X1,X0))))))) | sP4(X0,X2) | sP3(X0,X2) | sP2(X0,X1) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK102(X2,X1,X0)))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),sK103(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),sK104(X2,X1,X0))))))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK100(X2,X1,X0)))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK101(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK101(X2,X1,X0)))))))) ) | $spl12),
  inference(subsumption_resolution,[],[f9865,f531])).
fof(f9865,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | sP7(X2,X1,X0) | sP6(X2,X0) | sP5(X1,X0) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK110(X2,X1,X0)))),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK107(X2,X1,X0)))),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),sK108(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),sK109(X2,X1,X0))))))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK105(X2,X1,X0)))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK106(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK106(X2,X1,X0))))))) | sP4(X0,X2) | sP3(X0,X2) | sP2(X0,X1) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK102(X2,X1,X0)))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),sK103(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),sK104(X2,X1,X0))))))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK100(X2,X1,X0)))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK101(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK101(X2,X1,X0)))))))) ) | $spl12),
  inference(backward_demodulation,[],[f9497,f674])).
fof(f10164,plain,(
  ( ! [X0,X1] : (~sP8(X0,X1)) ) | $spl12),
  inference(subsumption_resolution,[],[f9861,f531])).
fof(f9861,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | ~sP8(X0,X1)) ) | $spl12),
  inference(backward_demodulation,[],[f9497,f702])).
fof(f10162,plain,(
  ( ! [X0,X1] : (~sP5(X0,X1)) ) | $spl12),
  inference(subsumption_resolution,[],[f9860,f531])).
fof(f9860,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | ~sP5(X0,X1)) ) | $spl12),
  inference(backward_demodulation,[],[f9497,f661])).
fof(f10160,plain,(
  ( ! [X0,X1] : (~sP9(X0,X1)) ) | $spl12),
  inference(subsumption_resolution,[],[f9859,f531])).
fof(f9859,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | ~sP9(X0,X1)) ) | $spl12),
  inference(backward_demodulation,[],[f9497,f697])).
fof(f10158,plain,(
  ( ! [X0,X1] : (~sP6(X0,X1)) ) | $spl12),
  inference(subsumption_resolution,[],[f9858,f531])).
fof(f9858,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | ~sP6(X0,X1)) ) | $spl12),
  inference(backward_demodulation,[],[f9497,f658])).
fof(f10156,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (sP32(X0,X1,X2,X3) | s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X6),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X7))))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.semanticPrimitives.tid_or_exn',X5))))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X6),s('type.semanticPrimitives.tid_or_exn',X5))))),s('type.list.list'('type.conSem.v'),X8))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.semanticPrimitives.tid_or_exn',X5))))),s('type.list.list'('type.modSem.v'),X7)))) ) | $spl12),
  inference(subsumption_resolution,[],[f9857,f531])).
fof(f9857,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (~p(s(bool,'T_0')) | sP32(X0,X1,X2,X3) | s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X6),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X7))))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.semanticPrimitives.tid_or_exn',X5))))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X6),s('type.semanticPrimitives.tid_or_exn',X5))))),s('type.list.list'('type.conSem.v'),X8))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.semanticPrimitives.tid_or_exn',X5))))),s('type.list.list'('type.modSem.v'),X7)))) ) | $spl12),
  inference(backward_demodulation,[],[f9497,f901])).
fof(f10154,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP35(X0,X1,X2,X3) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X5))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X4)))) ) | $spl12),
  inference(subsumption_resolution,[],[f9856,f531])).
fof(f9856,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | sP35(X0,X1,X2,X3) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X5))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X4)))) ) | $spl12),
  inference(backward_demodulation,[],[f9497,f886])).
fof(f10152,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP36(X0,X1,X2,X3) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X5))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X4)))) ) | $spl12),
  inference(subsumption_resolution,[],[f9855,f531])).
fof(f9855,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | sP36(X0,X1,X2,X3) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X5))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X4)))) ) | $spl12),
  inference(backward_demodulation,[],[f9497,f882])).
fof(f10150,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (sP37(X0,X1,X2,X3,X4) | s('type.list.list'('type.conSem.v'),X3) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X7),s('type.list.list'('type.conSem.v'),X8))) | s('type.list.list'('type.modSem.v'),X4) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X5),s('type.list.list'('type.modSem.v'),X6)))) ) | $spl12),
  inference(subsumption_resolution,[],[f10149,f531])).
fof(f10149,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (~p(s(bool,'T_0')) | sP37(X0,X1,X2,X3,X4) | s('type.list.list'('type.conSem.v'),X3) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X7),s('type.list.list'('type.conSem.v'),X8))) | s('type.list.list'('type.modSem.v'),X4) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X5),s('type.list.list'('type.modSem.v'),X6)))) ) | $spl12),
  inference(forward_demodulation,[],[f10148,f9497])).
fof(f10148,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (sP37(X0,X1,X2,X3,X4) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X5))),s('type.conSem.v',X7)))) | s('type.list.list'('type.conSem.v'),X3) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X7),s('type.list.list'('type.conSem.v'),X8))) | s('type.list.list'('type.modSem.v'),X4) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X5),s('type.list.list'('type.modSem.v'),X6)))) ) | $spl12),
  inference(subsumption_resolution,[],[f9854,f531])).
fof(f9854,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (~p(s(bool,'T_0')) | sP37(X0,X1,X2,X3,X4) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X5))),s('type.conSem.v',X7)))) | s('type.list.list'('type.conSem.v'),X3) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X7),s('type.list.list'('type.conSem.v'),X8))) | s('type.list.list'('type.modSem.v'),X4) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X5),s('type.list.list'('type.modSem.v'),X6)))) ) | $spl12),
  inference(backward_demodulation,[],[f9497,f878])).
fof(f10146,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (sP24(X0,X1,X2,X3) | s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X6),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X7))))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.semanticPrimitives.tid_or_exn',X5))))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X6),s('type.semanticPrimitives.tid_or_exn',X5))))),s('type.list.list'('type.conSem.v'),X8))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.semanticPrimitives.tid_or_exn',X5))))),s('type.list.list'('type.modSem.v'),X7)))) ) | $spl12),
  inference(subsumption_resolution,[],[f9853,f531])).
fof(f9853,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (~p(s(bool,'T_0')) | sP24(X0,X1,X2,X3) | s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X6),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X7))))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.semanticPrimitives.tid_or_exn',X5))))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X6),s('type.semanticPrimitives.tid_or_exn',X5))))),s('type.list.list'('type.conSem.v'),X8))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.semanticPrimitives.tid_or_exn',X5))))),s('type.list.list'('type.modSem.v'),X7)))) ) | $spl12),
  inference(backward_demodulation,[],[f9497,f835])).
fof(f10144,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP27(X0,X1,X2,X3) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X5))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X4)))) ) | $spl12),
  inference(subsumption_resolution,[],[f9852,f531])).
fof(f9852,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | sP27(X0,X1,X2,X3) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X5))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X4)))) ) | $spl12),
  inference(backward_demodulation,[],[f9497,f820])).
fof(f10142,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP28(X0,X1,X2,X3) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X5))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X4)))) ) | $spl12),
  inference(subsumption_resolution,[],[f9851,f531])).
fof(f9851,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | sP28(X0,X1,X2,X3) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X5))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X4)))) ) | $spl12),
  inference(backward_demodulation,[],[f9497,f816])).
fof(f10140,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (sP29(X0,X1,X2,X3,X4) | s('type.list.list'('type.conSem.v'),X3) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X7),s('type.list.list'('type.conSem.v'),X8))) | s('type.list.list'('type.modSem.v'),X4) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X5),s('type.list.list'('type.modSem.v'),X6)))) ) | $spl12),
  inference(subsumption_resolution,[],[f10139,f531])).
fof(f10139,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (~p(s(bool,'T_0')) | sP29(X0,X1,X2,X3,X4) | s('type.list.list'('type.conSem.v'),X3) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X7),s('type.list.list'('type.conSem.v'),X8))) | s('type.list.list'('type.modSem.v'),X4) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X5),s('type.list.list'('type.modSem.v'),X6)))) ) | $spl12),
  inference(forward_demodulation,[],[f10138,f9497])).
fof(f10138,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (sP29(X0,X1,X2,X3,X4) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X5))),s('type.conSem.v',X7)))) | s('type.list.list'('type.conSem.v'),X3) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X7),s('type.list.list'('type.conSem.v'),X8))) | s('type.list.list'('type.modSem.v'),X4) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X5),s('type.list.list'('type.modSem.v'),X6)))) ) | $spl12),
  inference(subsumption_resolution,[],[f9850,f531])).
fof(f9850,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (~p(s(bool,'T_0')) | sP29(X0,X1,X2,X3,X4) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X5))),s('type.conSem.v',X7)))) | s('type.list.list'('type.conSem.v'),X3) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X7),s('type.list.list'('type.conSem.v'),X8))) | s('type.list.list'('type.modSem.v'),X4) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X5),s('type.list.list'('type.modSem.v'),X6)))) ) | $spl12),
  inference(backward_demodulation,[],[f9497,f812])).
fof(f10136,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (sP15(X0,X1,X2,X3) | s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X6),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X7))))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.semanticPrimitives.tid_or_exn',X5))))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X6),s('type.semanticPrimitives.tid_or_exn',X5))))),s('type.list.list'('type.conSem.v'),X8))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.semanticPrimitives.tid_or_exn',X5))))),s('type.list.list'('type.modSem.v'),X7)))) ) | $spl12),
  inference(subsumption_resolution,[],[f9849,f531])).
fof(f9849,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (~p(s(bool,'T_0')) | sP15(X0,X1,X2,X3) | s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X6),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X7))))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.semanticPrimitives.tid_or_exn',X5))))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X6),s('type.semanticPrimitives.tid_or_exn',X5))))),s('type.list.list'('type.conSem.v'),X8))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.semanticPrimitives.tid_or_exn',X5))))),s('type.list.list'('type.modSem.v'),X7)))) ) | $spl12),
  inference(backward_demodulation,[],[f9497,f760])).
fof(f10134,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP18(X0,X1,X2,X3) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X5))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X4)))) ) | $spl12),
  inference(subsumption_resolution,[],[f9848,f531])).
fof(f9848,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | sP18(X0,X1,X2,X3) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X5))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X4)))) ) | $spl12),
  inference(backward_demodulation,[],[f9497,f745])).
fof(f10132,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP19(X0,X1,X2,X3) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X5))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X4)))) ) | $spl12),
  inference(subsumption_resolution,[],[f9847,f531])).
fof(f9847,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | sP19(X0,X1,X2,X3) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X5))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X4)))) ) | $spl12),
  inference(backward_demodulation,[],[f9497,f741])).
fof(f10130,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (sP20(X0,X1,X2,X3,X4) | s('type.list.list'('type.conSem.v'),X3) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X7),s('type.list.list'('type.conSem.v'),X8))) | s('type.list.list'('type.modSem.v'),X4) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X5),s('type.list.list'('type.modSem.v'),X6)))) ) | $spl12),
  inference(subsumption_resolution,[],[f10129,f531])).
fof(f10129,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (~p(s(bool,'T_0')) | sP20(X0,X1,X2,X3,X4) | s('type.list.list'('type.conSem.v'),X3) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X7),s('type.list.list'('type.conSem.v'),X8))) | s('type.list.list'('type.modSem.v'),X4) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X5),s('type.list.list'('type.modSem.v'),X6)))) ) | $spl12),
  inference(forward_demodulation,[],[f10128,f9497])).
fof(f10128,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (sP20(X0,X1,X2,X3,X4) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X5))),s('type.conSem.v',X7)))) | s('type.list.list'('type.conSem.v'),X3) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X7),s('type.list.list'('type.conSem.v'),X8))) | s('type.list.list'('type.modSem.v'),X4) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X5),s('type.list.list'('type.modSem.v'),X6)))) ) | $spl12),
  inference(subsumption_resolution,[],[f9846,f531])).
fof(f9846,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (~p(s(bool,'T_0')) | sP20(X0,X1,X2,X3,X4) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X5))),s('type.conSem.v',X7)))) | s('type.list.list'('type.conSem.v'),X3) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X7),s('type.list.list'('type.conSem.v'),X8))) | s('type.list.list'('type.modSem.v'),X4) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X5),s('type.list.list'('type.modSem.v'),X6)))) ) | $spl12),
  inference(backward_demodulation,[],[f9497,f737])).
fof(f10126,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1] : (sP33(X0,X1,X2,X3) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7),s('type.list.list'('type.string.char'),X5),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.modLang.exp',X6))))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.string.char'),X5),s('type.modLang.exp',X6)))) ) | $spl12),
  inference(subsumption_resolution,[],[f10125,f531])).
fof(f10125,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1] : (~p(s(bool,'T_0')) | sP33(X0,X1,X2,X3) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7),s('type.list.list'('type.string.char'),X5),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.modLang.exp',X6))))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.string.char'),X5),s('type.modLang.exp',X6)))) ) | $spl12),
  inference(forward_demodulation,[],[f10124,f9497])).
fof(f10124,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (sP33(X0,X1,X2,X3) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7),s('type.list.list'('type.string.char'),X5),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.modLang.exp',X6))))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.string.char'),X5),s('type.modLang.exp',X6)))) ) | $spl12),
  inference(subsumption_resolution,[],[f9841,f531])).
fof(f9841,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (~p(s(bool,'T_0')) | sP33(X0,X1,X2,X3) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7),s('type.list.list'('type.string.char'),X5),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.modLang.exp',X6))))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.string.char'),X5),s('type.modLang.exp',X6)))) ) | $spl12),
  inference(backward_demodulation,[],[f9497,f896])).
fof(f10122,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1] : (sP34(X0,X1,X2,X3) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5))),s('type.list.list'('type.string.char'),X6))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5),s('type.list.list'('type.string.char'),X6)))) ) | $spl12),
  inference(subsumption_resolution,[],[f10121,f531])).
fof(f10121,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1] : (~p(s(bool,'T_0')) | sP34(X0,X1,X2,X3) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5))),s('type.list.list'('type.string.char'),X6))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5),s('type.list.list'('type.string.char'),X6)))) ) | $spl12),
  inference(forward_demodulation,[],[f10120,f9497])).
fof(f10120,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (sP34(X0,X1,X2,X3) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5))),s('type.list.list'('type.string.char'),X6))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5),s('type.list.list'('type.string.char'),X6)))) ) | $spl12),
  inference(subsumption_resolution,[],[f9840,f531])).
fof(f9840,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (~p(s(bool,'T_0')) | sP34(X0,X1,X2,X3) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5))),s('type.list.list'('type.string.char'),X6))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5),s('type.list.list'('type.string.char'),X6)))) ) | $spl12),
  inference(backward_demodulation,[],[f9497,f891])).
fof(f10118,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (sP38(X0,X1,X2,X3,X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.conSem.v',X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.modSem.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7)))) ) | $spl12),
  inference(subsumption_resolution,[],[f10117,f531])).
fof(f10117,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (~p(s(bool,'T_0')) | sP38(X0,X1,X2,X3,X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.conSem.v',X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.modSem.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7)))) ) | $spl12),
  inference(forward_demodulation,[],[f10116,f9497])).
fof(f10116,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (sP38(X0,X1,X2,X3,X4) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X6))),s('type.conSem.v',X9)))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.conSem.v',X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.modSem.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7)))) ) | $spl12),
  inference(subsumption_resolution,[],[f9839,f531])).
fof(f9839,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (~p(s(bool,'T_0')) | sP38(X0,X1,X2,X3,X4) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X6))),s('type.conSem.v',X9)))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.conSem.v',X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.modSem.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7)))) ) | $spl12),
  inference(backward_demodulation,[],[f9497,f868])).
fof(f10114,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1] : (sP25(X0,X1,X2,X3) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7),s('type.list.list'('type.string.char'),X5),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.modLang.exp',X6))))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.string.char'),X5),s('type.modLang.exp',X6)))) ) | $spl12),
  inference(subsumption_resolution,[],[f10113,f531])).
fof(f10113,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1] : (~p(s(bool,'T_0')) | sP25(X0,X1,X2,X3) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7),s('type.list.list'('type.string.char'),X5),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.modLang.exp',X6))))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.string.char'),X5),s('type.modLang.exp',X6)))) ) | $spl12),
  inference(forward_demodulation,[],[f10112,f9497])).
fof(f10112,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (sP25(X0,X1,X2,X3) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7),s('type.list.list'('type.string.char'),X5),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.modLang.exp',X6))))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.string.char'),X5),s('type.modLang.exp',X6)))) ) | $spl12),
  inference(subsumption_resolution,[],[f9838,f531])).
fof(f9838,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (~p(s(bool,'T_0')) | sP25(X0,X1,X2,X3) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7),s('type.list.list'('type.string.char'),X5),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.modLang.exp',X6))))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.string.char'),X5),s('type.modLang.exp',X6)))) ) | $spl12),
  inference(backward_demodulation,[],[f9497,f830])).
fof(f10110,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1] : (sP26(X0,X1,X2,X3) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5))),s('type.list.list'('type.string.char'),X6))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5),s('type.list.list'('type.string.char'),X6)))) ) | $spl12),
  inference(subsumption_resolution,[],[f10109,f531])).
fof(f10109,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1] : (~p(s(bool,'T_0')) | sP26(X0,X1,X2,X3) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5))),s('type.list.list'('type.string.char'),X6))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5),s('type.list.list'('type.string.char'),X6)))) ) | $spl12),
  inference(forward_demodulation,[],[f10108,f9497])).
fof(f10108,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (sP26(X0,X1,X2,X3) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5))),s('type.list.list'('type.string.char'),X6))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5),s('type.list.list'('type.string.char'),X6)))) ) | $spl12),
  inference(subsumption_resolution,[],[f9837,f531])).
fof(f9837,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (~p(s(bool,'T_0')) | sP26(X0,X1,X2,X3) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5))),s('type.list.list'('type.string.char'),X6))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5),s('type.list.list'('type.string.char'),X6)))) ) | $spl12),
  inference(backward_demodulation,[],[f9497,f825])).
fof(f10106,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (sP30(X0,X1,X2,X3,X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.conSem.v',X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.modSem.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7)))) ) | $spl12),
  inference(subsumption_resolution,[],[f10105,f531])).
fof(f10105,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (~p(s(bool,'T_0')) | sP30(X0,X1,X2,X3,X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.conSem.v',X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.modSem.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7)))) ) | $spl12),
  inference(forward_demodulation,[],[f10104,f9497])).
fof(f10104,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (sP30(X0,X1,X2,X3,X4) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X6))),s('type.conSem.v',X9)))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.conSem.v',X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.modSem.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7)))) ) | $spl12),
  inference(subsumption_resolution,[],[f9836,f531])).
fof(f9836,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (~p(s(bool,'T_0')) | sP30(X0,X1,X2,X3,X4) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X6))),s('type.conSem.v',X9)))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.conSem.v',X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.modSem.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7)))) ) | $spl12),
  inference(backward_demodulation,[],[f9497,f802])).
fof(f10102,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1] : (sP16(X0,X1,X2,X3) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7),s('type.list.list'('type.string.char'),X5),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.modLang.exp',X6))))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.string.char'),X5),s('type.modLang.exp',X6)))) ) | $spl12),
  inference(subsumption_resolution,[],[f10101,f531])).
fof(f10101,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1] : (~p(s(bool,'T_0')) | sP16(X0,X1,X2,X3) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7),s('type.list.list'('type.string.char'),X5),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.modLang.exp',X6))))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.string.char'),X5),s('type.modLang.exp',X6)))) ) | $spl12),
  inference(forward_demodulation,[],[f10100,f9497])).
fof(f10100,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (sP16(X0,X1,X2,X3) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7),s('type.list.list'('type.string.char'),X5),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.modLang.exp',X6))))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.string.char'),X5),s('type.modLang.exp',X6)))) ) | $spl12),
  inference(subsumption_resolution,[],[f9835,f531])).
fof(f9835,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (~p(s(bool,'T_0')) | sP16(X0,X1,X2,X3) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7),s('type.list.list'('type.string.char'),X5),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.modLang.exp',X6))))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.string.char'),X5),s('type.modLang.exp',X6)))) ) | $spl12),
  inference(backward_demodulation,[],[f9497,f755])).
fof(f10098,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1] : (sP17(X0,X1,X2,X3) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5))),s('type.list.list'('type.string.char'),X6))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5),s('type.list.list'('type.string.char'),X6)))) ) | $spl12),
  inference(subsumption_resolution,[],[f10097,f531])).
fof(f10097,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1] : (~p(s(bool,'T_0')) | sP17(X0,X1,X2,X3) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5))),s('type.list.list'('type.string.char'),X6))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5),s('type.list.list'('type.string.char'),X6)))) ) | $spl12),
  inference(forward_demodulation,[],[f10096,f9497])).
fof(f10096,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (sP17(X0,X1,X2,X3) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5))),s('type.list.list'('type.string.char'),X6))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5),s('type.list.list'('type.string.char'),X6)))) ) | $spl12),
  inference(subsumption_resolution,[],[f9834,f531])).
fof(f9834,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (~p(s(bool,'T_0')) | sP17(X0,X1,X2,X3) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5))),s('type.list.list'('type.string.char'),X6))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5),s('type.list.list'('type.string.char'),X6)))) ) | $spl12),
  inference(backward_demodulation,[],[f9497,f750])).
fof(f10094,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (sP21(X0,X1,X2,X3,X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.conSem.v',X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.modSem.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7)))) ) | $spl12),
  inference(subsumption_resolution,[],[f10093,f531])).
fof(f10093,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (~p(s(bool,'T_0')) | sP21(X0,X1,X2,X3,X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.conSem.v',X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.modSem.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7)))) ) | $spl12),
  inference(forward_demodulation,[],[f10092,f9497])).
fof(f10092,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (sP21(X0,X1,X2,X3,X4) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X6))),s('type.conSem.v',X9)))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.conSem.v',X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.modSem.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7)))) ) | $spl12),
  inference(subsumption_resolution,[],[f9833,f531])).
fof(f9833,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (~p(s(bool,'T_0')) | sP21(X0,X1,X2,X3,X4) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X6))),s('type.conSem.v',X9)))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.conSem.v',X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.modSem.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7)))) ) | $spl12),
  inference(backward_demodulation,[],[f9497,f727])).
fof(f10082,plain,(
  ( ! [X2,X0,X1] : (s(X0,X2) = s(X0,sK65(X2,X1,X0))) ) | $spl12),
  inference(subsumption_resolution,[],[f9783,f531])).
fof(f9783,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s(X0,X2) = s(X0,sK65(X2,X1,X0))) ) | $spl12),
  inference(backward_demodulation,[],[f9497,f603])).
fof(f10074,plain,(
  ( ! [X2,X0,X1] : (s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),sK253(X2,X1,X0))))) ) | $spl12),
  inference(subsumption_resolution,[],[f9771,f531])).
fof(f9771,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),sK253(X2,X1,X0))))) ) | $spl12),
  inference(backward_demodulation,[],[f9497,f845])).
fof(f10056,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.list.list'('type.conSem.v'),X5) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X4),s('type.list.list'('type.conSem.v'),X2))) | sP23(X0,X5,'const.list.CONS_2'(s('type.modSem.v',X3),s('type.list.list'('type.modSem.v'),X1)))) ) | $spl12),
  inference(subsumption_resolution,[],[f10055,f531])).
fof(f10055,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | s('type.list.list'('type.conSem.v'),X5) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X4),s('type.list.list'('type.conSem.v'),X2))) | sP23(X0,X5,'const.list.CONS_2'(s('type.modSem.v',X3),s('type.list.list'('type.modSem.v'),X1)))) ) | $spl12),
  inference(forward_demodulation,[],[f10054,f9497])).
fof(f10054,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X3),s('type.conSem.v',X4)))) | s('type.list.list'('type.conSem.v'),X5) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X4),s('type.list.list'('type.conSem.v'),X2))) | sP23(X0,X5,'const.list.CONS_2'(s('type.modSem.v',X3),s('type.list.list'('type.modSem.v'),X1)))) ) | $spl12),
  inference(subsumption_resolution,[],[f9740,f531])).
fof(f9740,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X3),s('type.conSem.v',X4)))) | s('type.list.list'('type.conSem.v'),X5) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X4),s('type.list.list'('type.conSem.v'),X2))) | sP23(X0,X5,'const.list.CONS_2'(s('type.modSem.v',X3),s('type.list.list'('type.modSem.v'),X1)))) ) | $spl12),
  inference(backward_demodulation,[],[f9497,f6932])).
fof(f10036,plain,(
  ( ! [X2,X0,X1] : (sP23(X0,X2,X1)) ) | $spl12),
  inference(subsumption_resolution,[],[f9727,f531])).
fof(f9727,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | sP23(X0,X2,X1)) ) | $spl12),
  inference(backward_demodulation,[],[f9497,f779])).
fof(f10034,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.list.list'('type.modSem.v'),X2) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X3),s('type.list.list'('type.modSem.v'),X4))) | s('type.list.list'('type.conSem.v'),X1) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X5),s('type.list.list'('type.conSem.v'),X6))) | sP23(X0,X1,X2)) ) | $spl12),
  inference(subsumption_resolution,[],[f10033,f531])).
fof(f10033,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | s('type.list.list'('type.modSem.v'),X2) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X3),s('type.list.list'('type.modSem.v'),X4))) | s('type.list.list'('type.conSem.v'),X1) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X5),s('type.list.list'('type.conSem.v'),X6))) | sP23(X0,X1,X2)) ) | $spl12),
  inference(forward_demodulation,[],[f10032,f9497])).
fof(f10032,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.list.list'('type.modSem.v'),X2) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X3),s('type.list.list'('type.modSem.v'),X4))) | ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X3),s('type.conSem.v',X5)))) | s('type.list.list'('type.conSem.v'),X1) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X5),s('type.list.list'('type.conSem.v'),X6))) | sP23(X0,X1,X2)) ) | $spl12),
  inference(subsumption_resolution,[],[f9726,f531])).
fof(f9726,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | s('type.list.list'('type.modSem.v'),X2) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X3),s('type.list.list'('type.modSem.v'),X4))) | ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X3),s('type.conSem.v',X5)))) | s('type.list.list'('type.conSem.v'),X1) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X5),s('type.list.list'('type.conSem.v'),X6))) | sP23(X0,X1,X2)) ) | $spl12),
  inference(backward_demodulation,[],[f9497,f778])).
fof(f9692,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'(X0,bool),'const.pair.,_2'(s(X0,X1),s(bool,'T_0'))) != s('type.pair.prod'(X0,bool),'const.pair.,_2'(s(X0,X2),s(bool,'T_0')))) ) | $spl12),
  inference(backward_demodulation,[],[f9497,f2607])).
fof(f9689,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'(bool,X0),'const.pair.,_2'(s(bool,'T_0'),s(X0,X1))) != s('type.pair.prod'(bool,X0),'const.pair.,_2'(s(bool,'T_0'),s(X0,X2)))) ) | $spl12),
  inference(backward_demodulation,[],[f9497,f2564])).
fof(f9686,plain,(
  ( ! [X0,X1] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X0))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X1)))) ) | $spl12),
  inference(backward_demodulation,[],[f9497,f2525])).
fof(f10010,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl12),
  inference(subsumption_resolution,[],[f9675,f9497])).
fof(f9675,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | ~p(s(bool,X0))) ) | $spl12),
  inference(backward_demodulation,[],[f9497,f551])).
fof(f10219,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f530,f529,f528,f527,f531,f1048,f538,f539,f548,f547,f552,f551,f587,f586,f593,f591,f596,f594,f601,f599,f604,f603,f602,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f655,f654,f653,f658,f657,f656,f661,f660,f659,f664,f663,f662,f667,f666,f665,f670,f669,f668,f674,f673,f672,f671,f677,f676,f675,f680,f679,f678,f684,f683,f682,f681,f688,f687,f686,f685,f692,f691,f690,f689,f697,f696,f695,f694,f693,f702,f701,f700,f699,f698,f705,f704,f703,f717,f716,f715,f714,f713,f712,f711,f710,f709,f708,f707,f706,f727,f726,f725,f724,f723,f722,f721,f720,f719,f718,f737,f736,f735,f734,f733,f732,f731,f730,f729,f728,f741,f740,f739,f738,f745,f744,f743,f742,f750,f749,f748,f747,f746,f755,f754,f753,f752,f751,f760,f759,f758,f757,f756,f768,f767,f766,f765,f764,f763,f762,f761,f778,f777,f776,f775,f774,f773,f772,f771,f770,f769,f780,f779,f792,f791,f790,f789,f788,f787,f786,f785,f784,f783,f782,f781,f802,f801,f800,f799,f798,f797,f796,f795,f794,f793,f812,f811,f810,f809,f808,f807,f806,f805,f804,f803,f816,f815,f814,f813,f820,f819,f818,f817,f825,f824,f823,f822,f821,f830,f829,f828,f827,f826,f835,f834,f833,f832,f831,f843,f842,f841,f840,f839,f838,f837,f836,f846,f845,f844,f858,f857,f856,f855,f854,f853,f852,f851,f850,f849,f848,f847,f868,f867,f866,f865,f864,f863,f862,f861,f860,f859,f878,f877,f876,f875,f874,f873,f872,f871,f870,f869,f882,f881,f880,f879,f886,f885,f884,f883,f891,f890,f889,f888,f887,f896,f895,f894,f893,f892,f901,f900,f899,f898,f897,f909,f908,f907,f906,f905,f904,f903,f902,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1019,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2330,f2331,f2339,f2359,f2432,f2433,f2436,f2442,f2443,f2474,f2475,f2526,f2525,f2529,f2530,f2533,f2565,f2564,f2568,f2569,f2572,f2608,f2607,f2617,f2618,f2621,f2672,f2684,f2696,f2706,f2718,f2734,f2753,f2754,f2845,f2876,f2877,f2935,f2938,f2940,f2941,f3442,f3443,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f3884,f4202,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4519,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5689,f6240,f6241,f6247,f6256,f6273,f6286,f6932,f7303,f7383,f7384,f7549,f7550,f7551,f7553,f7558,f7561,f7565,f7575,f7576,f7577,f7578,f7579,f7580,f7581,f7582,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8008,f8009,f8010,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9600,f9602,f9603,f9604,f9605,f9606,f9607,f9608,f9609,f9610,f9611,f9612,f9613,f9614,f9615,f9621,f9622,f8244,f8245,f8246,f8248,f8253,f8256,f8260,f8270,f8271,f8272,f8273,f8274,f8275,f8276,f8277,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f9497,f10010,f9686,f9689,f9692,f10034,f10036,f10056,f10074,f10082,f10094,f10098,f10102,f10106,f10110,f10114,f10118,f10122,f10126,f10130,f10132,f10134,f10136,f10140,f10142,f10144,f10146,f10150,f10152,f10154,f10156,f10158,f10160,f10162,f10164,f10192,f10200,f10202,f10204,f10206,f10208,f10210,f10212,f10214,f10216,f10218])).
fof(f10217,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f530,f529,f528,f527,f531,f1048,f538,f539,f548,f547,f552,f551,f587,f586,f593,f591,f596,f594,f601,f599,f604,f603,f602,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f655,f654,f653,f658,f657,f656,f661,f660,f659,f664,f663,f662,f667,f666,f665,f670,f669,f668,f674,f673,f672,f671,f677,f676,f675,f680,f679,f678,f684,f683,f682,f681,f688,f687,f686,f685,f692,f691,f690,f689,f697,f696,f695,f694,f693,f702,f701,f700,f699,f698,f705,f704,f703,f717,f716,f715,f714,f713,f712,f711,f710,f709,f708,f707,f706,f727,f726,f725,f724,f723,f722,f721,f720,f719,f718,f737,f736,f735,f734,f733,f732,f731,f730,f729,f728,f741,f740,f739,f738,f745,f744,f743,f742,f750,f749,f748,f747,f746,f755,f754,f753,f752,f751,f760,f759,f758,f757,f756,f768,f767,f766,f765,f764,f763,f762,f761,f778,f777,f776,f775,f774,f773,f772,f771,f770,f769,f780,f779,f792,f791,f790,f789,f788,f787,f786,f785,f784,f783,f782,f781,f802,f801,f800,f799,f798,f797,f796,f795,f794,f793,f812,f811,f810,f809,f808,f807,f806,f805,f804,f803,f816,f815,f814,f813,f820,f819,f818,f817,f825,f824,f823,f822,f821,f830,f829,f828,f827,f826,f835,f834,f833,f832,f831,f843,f842,f841,f840,f839,f838,f837,f836,f846,f845,f844,f858,f857,f856,f855,f854,f853,f852,f851,f850,f849,f848,f847,f868,f867,f866,f865,f864,f863,f862,f861,f860,f859,f878,f877,f876,f875,f874,f873,f872,f871,f870,f869,f882,f881,f880,f879,f886,f885,f884,f883,f891,f890,f889,f888,f887,f896,f895,f894,f893,f892,f901,f900,f899,f898,f897,f909,f908,f907,f906,f905,f904,f903,f902,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1019,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2330,f2331,f2339,f2359,f2432,f2433,f2436,f2442,f2443,f2474,f2475,f2526,f2525,f2529,f2530,f2533,f2565,f2564,f2568,f2569,f2572,f2608,f2607,f2617,f2618,f2621,f2672,f2684,f2696,f2706,f2718,f2734,f2753,f2754,f2845,f2876,f2877,f2935,f2938,f2940,f2941,f3442,f3443,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f3884,f4202,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4519,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5689,f6240,f6241,f6247,f6256,f6273,f6286,f6932,f7303,f7383,f7384,f7549,f7550,f7551,f7553,f7558,f7561,f7565,f7575,f7576,f7577,f7578,f7579,f7580,f7581,f7582,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8008,f8009,f8010,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9600,f9602,f9603,f9604,f9605,f9606,f9607,f9608,f9609,f9610,f9611,f9612,f9613,f9614,f9615,f9621,f9622,f8244,f8245,f8246,f8248,f8253,f8256,f8260,f8270,f8271,f8272,f8273,f8274,f8275,f8276,f8277,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f9497,f10010,f9686,f9689,f9692,f10034,f10036,f10056,f10074,f10082,f10094,f10098,f10102,f10106,f10110,f10114,f10118,f10122,f10126,f10130,f10132,f10134,f10136,f10140,f10142,f10144,f10146,f10150,f10152,f10154,f10156,f10158,f10160,f10162,f10164,f10192,f10200,f10202,f10204,f10206,f10208,f10210,f10212,f10214,f10216])).
fof(f10215,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f530,f529,f528,f527,f531,f1048,f538,f539,f548,f547,f552,f551,f587,f586,f593,f591,f596,f594,f601,f599,f604,f603,f602,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f655,f654,f653,f658,f657,f656,f661,f660,f659,f664,f663,f662,f667,f666,f665,f670,f669,f668,f674,f673,f672,f671,f677,f676,f675,f680,f679,f678,f684,f683,f682,f681,f688,f687,f686,f685,f692,f691,f690,f689,f697,f696,f695,f694,f693,f702,f701,f700,f699,f698,f705,f704,f703,f717,f716,f715,f714,f713,f712,f711,f710,f709,f708,f707,f706,f727,f726,f725,f724,f723,f722,f721,f720,f719,f718,f737,f736,f735,f734,f733,f732,f731,f730,f729,f728,f741,f740,f739,f738,f745,f744,f743,f742,f750,f749,f748,f747,f746,f755,f754,f753,f752,f751,f760,f759,f758,f757,f756,f768,f767,f766,f765,f764,f763,f762,f761,f778,f777,f776,f775,f774,f773,f772,f771,f770,f769,f780,f779,f792,f791,f790,f789,f788,f787,f786,f785,f784,f783,f782,f781,f802,f801,f800,f799,f798,f797,f796,f795,f794,f793,f812,f811,f810,f809,f808,f807,f806,f805,f804,f803,f816,f815,f814,f813,f820,f819,f818,f817,f825,f824,f823,f822,f821,f830,f829,f828,f827,f826,f835,f834,f833,f832,f831,f843,f842,f841,f840,f839,f838,f837,f836,f846,f845,f844,f858,f857,f856,f855,f854,f853,f852,f851,f850,f849,f848,f847,f868,f867,f866,f865,f864,f863,f862,f861,f860,f859,f878,f877,f876,f875,f874,f873,f872,f871,f870,f869,f882,f881,f880,f879,f886,f885,f884,f883,f891,f890,f889,f888,f887,f896,f895,f894,f893,f892,f901,f900,f899,f898,f897,f909,f908,f907,f906,f905,f904,f903,f902,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1019,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2330,f2331,f2339,f2359,f2432,f2433,f2436,f2442,f2443,f2474,f2475,f2526,f2525,f2529,f2530,f2533,f2565,f2564,f2568,f2569,f2572,f2608,f2607,f2617,f2618,f2621,f2672,f2684,f2696,f2706,f2718,f2734,f2753,f2754,f2845,f2876,f2877,f2935,f2938,f2940,f2941,f3442,f3443,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f3884,f4202,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4519,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5689,f6240,f6241,f6247,f6256,f6273,f6286,f6932,f7303,f7383,f7384,f7549,f7550,f7551,f7553,f7558,f7561,f7565,f7575,f7576,f7577,f7578,f7579,f7580,f7581,f7582,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8008,f8009,f8010,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9600,f9602,f9603,f9604,f9605,f9606,f9607,f9608,f9609,f9610,f9611,f9612,f9613,f9614,f9615,f9621,f9622,f8244,f8245,f8246,f8248,f8253,f8256,f8260,f8270,f8271,f8272,f8273,f8274,f8275,f8276,f8277,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f9497,f10010,f9686,f9689,f9692,f10034,f10036,f10056,f10074,f10082,f10094,f10098,f10102,f10106,f10110,f10114,f10118,f10122,f10126,f10130,f10132,f10134,f10136,f10140,f10142,f10144,f10146,f10150,f10152,f10154,f10156,f10158,f10160,f10162,f10164,f10192,f10200,f10202,f10204,f10206,f10208,f10210,f10212,f10214])).
fof(f10213,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f530,f529,f528,f527,f531,f1048,f538,f539,f548,f547,f552,f551,f587,f586,f593,f591,f596,f594,f601,f599,f604,f603,f602,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f655,f654,f653,f658,f657,f656,f661,f660,f659,f664,f663,f662,f667,f666,f665,f670,f669,f668,f674,f673,f672,f671,f677,f676,f675,f680,f679,f678,f684,f683,f682,f681,f688,f687,f686,f685,f692,f691,f690,f689,f697,f696,f695,f694,f693,f702,f701,f700,f699,f698,f705,f704,f703,f717,f716,f715,f714,f713,f712,f711,f710,f709,f708,f707,f706,f727,f726,f725,f724,f723,f722,f721,f720,f719,f718,f737,f736,f735,f734,f733,f732,f731,f730,f729,f728,f741,f740,f739,f738,f745,f744,f743,f742,f750,f749,f748,f747,f746,f755,f754,f753,f752,f751,f760,f759,f758,f757,f756,f768,f767,f766,f765,f764,f763,f762,f761,f778,f777,f776,f775,f774,f773,f772,f771,f770,f769,f780,f779,f792,f791,f790,f789,f788,f787,f786,f785,f784,f783,f782,f781,f802,f801,f800,f799,f798,f797,f796,f795,f794,f793,f812,f811,f810,f809,f808,f807,f806,f805,f804,f803,f816,f815,f814,f813,f820,f819,f818,f817,f825,f824,f823,f822,f821,f830,f829,f828,f827,f826,f835,f834,f833,f832,f831,f843,f842,f841,f840,f839,f838,f837,f836,f846,f845,f844,f858,f857,f856,f855,f854,f853,f852,f851,f850,f849,f848,f847,f868,f867,f866,f865,f864,f863,f862,f861,f860,f859,f878,f877,f876,f875,f874,f873,f872,f871,f870,f869,f882,f881,f880,f879,f886,f885,f884,f883,f891,f890,f889,f888,f887,f896,f895,f894,f893,f892,f901,f900,f899,f898,f897,f909,f908,f907,f906,f905,f904,f903,f902,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1019,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2330,f2331,f2339,f2359,f2432,f2433,f2436,f2442,f2443,f2474,f2475,f2526,f2525,f2529,f2530,f2533,f2565,f2564,f2568,f2569,f2572,f2608,f2607,f2617,f2618,f2621,f2672,f2684,f2696,f2706,f2718,f2734,f2753,f2754,f2845,f2876,f2877,f2935,f2938,f2940,f2941,f3442,f3443,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f3884,f4202,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4519,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5689,f6240,f6241,f6247,f6256,f6273,f6286,f6932,f7303,f7383,f7384,f7549,f7550,f7551,f7553,f7558,f7561,f7565,f7575,f7576,f7577,f7578,f7579,f7580,f7581,f7582,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8008,f8009,f8010,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9600,f9602,f9603,f9604,f9605,f9606,f9607,f9608,f9609,f9610,f9611,f9612,f9613,f9614,f9615,f9621,f9622,f8244,f8245,f8246,f8248,f8253,f8256,f8260,f8270,f8271,f8272,f8273,f8274,f8275,f8276,f8277,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f9497,f10010,f9686,f9689,f9692,f10034,f10036,f10056,f10074,f10082,f10094,f10098,f10102,f10106,f10110,f10114,f10118,f10122,f10126,f10130,f10132,f10134,f10136,f10140,f10142,f10144,f10146,f10150,f10152,f10154,f10156,f10158,f10160,f10162,f10164,f10192,f10200,f10202,f10204,f10206,f10208,f10210,f10212])).
fof(f10211,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f530,f529,f528,f527,f531,f1048,f538,f539,f548,f547,f552,f551,f587,f586,f593,f591,f596,f594,f601,f599,f604,f603,f602,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f655,f654,f653,f658,f657,f656,f661,f660,f659,f664,f663,f662,f667,f666,f665,f670,f669,f668,f674,f673,f672,f671,f677,f676,f675,f680,f679,f678,f684,f683,f682,f681,f688,f687,f686,f685,f692,f691,f690,f689,f697,f696,f695,f694,f693,f702,f701,f700,f699,f698,f705,f704,f703,f717,f716,f715,f714,f713,f712,f711,f710,f709,f708,f707,f706,f727,f726,f725,f724,f723,f722,f721,f720,f719,f718,f737,f736,f735,f734,f733,f732,f731,f730,f729,f728,f741,f740,f739,f738,f745,f744,f743,f742,f750,f749,f748,f747,f746,f755,f754,f753,f752,f751,f760,f759,f758,f757,f756,f768,f767,f766,f765,f764,f763,f762,f761,f778,f777,f776,f775,f774,f773,f772,f771,f770,f769,f780,f779,f792,f791,f790,f789,f788,f787,f786,f785,f784,f783,f782,f781,f802,f801,f800,f799,f798,f797,f796,f795,f794,f793,f812,f811,f810,f809,f808,f807,f806,f805,f804,f803,f816,f815,f814,f813,f820,f819,f818,f817,f825,f824,f823,f822,f821,f830,f829,f828,f827,f826,f835,f834,f833,f832,f831,f843,f842,f841,f840,f839,f838,f837,f836,f846,f845,f844,f858,f857,f856,f855,f854,f853,f852,f851,f850,f849,f848,f847,f868,f867,f866,f865,f864,f863,f862,f861,f860,f859,f878,f877,f876,f875,f874,f873,f872,f871,f870,f869,f882,f881,f880,f879,f886,f885,f884,f883,f891,f890,f889,f888,f887,f896,f895,f894,f893,f892,f901,f900,f899,f898,f897,f909,f908,f907,f906,f905,f904,f903,f902,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1019,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2330,f2331,f2339,f2359,f2432,f2433,f2436,f2442,f2443,f2474,f2475,f2526,f2525,f2529,f2530,f2533,f2565,f2564,f2568,f2569,f2572,f2608,f2607,f2617,f2618,f2621,f2672,f2684,f2696,f2706,f2718,f2734,f2753,f2754,f2845,f2876,f2877,f2935,f2938,f2940,f2941,f3442,f3443,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f3884,f4202,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4519,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5689,f6240,f6241,f6247,f6256,f6273,f6286,f6932,f7303,f7383,f7384,f7549,f7550,f7551,f7553,f7558,f7561,f7565,f7575,f7576,f7577,f7578,f7579,f7580,f7581,f7582,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8008,f8009,f8010,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9600,f9602,f9603,f9604,f9605,f9606,f9607,f9608,f9609,f9610,f9611,f9612,f9613,f9614,f9615,f9621,f9622,f8244,f8245,f8246,f8248,f8253,f8256,f8260,f8270,f8271,f8272,f8273,f8274,f8275,f8276,f8277,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f9497,f10010,f9686,f9689,f9692,f10034,f10036,f10056,f10074,f10082,f10094,f10098,f10102,f10106,f10110,f10114,f10118,f10122,f10126,f10130,f10132,f10134,f10136,f10140,f10142,f10144,f10146,f10150,f10152,f10154,f10156,f10158,f10160,f10162,f10164,f10192,f10200,f10202,f10204,f10206,f10208,f10210])).
fof(f10209,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f530,f529,f528,f527,f531,f1048,f538,f539,f548,f547,f552,f551,f587,f586,f593,f591,f596,f594,f601,f599,f604,f603,f602,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f655,f654,f653,f658,f657,f656,f661,f660,f659,f664,f663,f662,f667,f666,f665,f670,f669,f668,f674,f673,f672,f671,f677,f676,f675,f680,f679,f678,f684,f683,f682,f681,f688,f687,f686,f685,f692,f691,f690,f689,f697,f696,f695,f694,f693,f702,f701,f700,f699,f698,f705,f704,f703,f717,f716,f715,f714,f713,f712,f711,f710,f709,f708,f707,f706,f727,f726,f725,f724,f723,f722,f721,f720,f719,f718,f737,f736,f735,f734,f733,f732,f731,f730,f729,f728,f741,f740,f739,f738,f745,f744,f743,f742,f750,f749,f748,f747,f746,f755,f754,f753,f752,f751,f760,f759,f758,f757,f756,f768,f767,f766,f765,f764,f763,f762,f761,f778,f777,f776,f775,f774,f773,f772,f771,f770,f769,f780,f779,f792,f791,f790,f789,f788,f787,f786,f785,f784,f783,f782,f781,f802,f801,f800,f799,f798,f797,f796,f795,f794,f793,f812,f811,f810,f809,f808,f807,f806,f805,f804,f803,f816,f815,f814,f813,f820,f819,f818,f817,f825,f824,f823,f822,f821,f830,f829,f828,f827,f826,f835,f834,f833,f832,f831,f843,f842,f841,f840,f839,f838,f837,f836,f846,f845,f844,f858,f857,f856,f855,f854,f853,f852,f851,f850,f849,f848,f847,f868,f867,f866,f865,f864,f863,f862,f861,f860,f859,f878,f877,f876,f875,f874,f873,f872,f871,f870,f869,f882,f881,f880,f879,f886,f885,f884,f883,f891,f890,f889,f888,f887,f896,f895,f894,f893,f892,f901,f900,f899,f898,f897,f909,f908,f907,f906,f905,f904,f903,f902,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1019,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2330,f2331,f2339,f2359,f2432,f2433,f2436,f2442,f2443,f2474,f2475,f2526,f2525,f2529,f2530,f2533,f2565,f2564,f2568,f2569,f2572,f2608,f2607,f2617,f2618,f2621,f2672,f2684,f2696,f2706,f2718,f2734,f2753,f2754,f2845,f2876,f2877,f2935,f2938,f2940,f2941,f3442,f3443,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f3884,f4202,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4519,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5689,f6240,f6241,f6247,f6256,f6273,f6286,f6932,f7303,f7383,f7384,f7549,f7550,f7551,f7553,f7558,f7561,f7565,f7575,f7576,f7577,f7578,f7579,f7580,f7581,f7582,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8008,f8009,f8010,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9600,f9602,f9603,f9604,f9605,f9606,f9607,f9608,f9609,f9610,f9611,f9612,f9613,f9614,f9615,f9621,f9622,f8244,f8245,f8246,f8248,f8253,f8256,f8260,f8270,f8271,f8272,f8273,f8274,f8275,f8276,f8277,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f9497,f10010,f9686,f9689,f9692,f10034,f10036,f10056,f10074,f10082,f10094,f10098,f10102,f10106,f10110,f10114,f10118,f10122,f10126,f10130,f10132,f10134,f10136,f10140,f10142,f10144,f10146,f10150,f10152,f10154,f10156,f10158,f10160,f10162,f10164,f10192,f10200,f10202,f10204,f10206,f10208])).
fof(f10207,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f530,f529,f528,f527,f531,f1048,f538,f539,f548,f547,f552,f551,f587,f586,f593,f591,f596,f594,f601,f599,f604,f603,f602,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f655,f654,f653,f658,f657,f656,f661,f660,f659,f664,f663,f662,f667,f666,f665,f670,f669,f668,f674,f673,f672,f671,f677,f676,f675,f680,f679,f678,f684,f683,f682,f681,f688,f687,f686,f685,f692,f691,f690,f689,f697,f696,f695,f694,f693,f702,f701,f700,f699,f698,f705,f704,f703,f717,f716,f715,f714,f713,f712,f711,f710,f709,f708,f707,f706,f727,f726,f725,f724,f723,f722,f721,f720,f719,f718,f737,f736,f735,f734,f733,f732,f731,f730,f729,f728,f741,f740,f739,f738,f745,f744,f743,f742,f750,f749,f748,f747,f746,f755,f754,f753,f752,f751,f760,f759,f758,f757,f756,f768,f767,f766,f765,f764,f763,f762,f761,f778,f777,f776,f775,f774,f773,f772,f771,f770,f769,f780,f779,f792,f791,f790,f789,f788,f787,f786,f785,f784,f783,f782,f781,f802,f801,f800,f799,f798,f797,f796,f795,f794,f793,f812,f811,f810,f809,f808,f807,f806,f805,f804,f803,f816,f815,f814,f813,f820,f819,f818,f817,f825,f824,f823,f822,f821,f830,f829,f828,f827,f826,f835,f834,f833,f832,f831,f843,f842,f841,f840,f839,f838,f837,f836,f846,f845,f844,f858,f857,f856,f855,f854,f853,f852,f851,f850,f849,f848,f847,f868,f867,f866,f865,f864,f863,f862,f861,f860,f859,f878,f877,f876,f875,f874,f873,f872,f871,f870,f869,f882,f881,f880,f879,f886,f885,f884,f883,f891,f890,f889,f888,f887,f896,f895,f894,f893,f892,f901,f900,f899,f898,f897,f909,f908,f907,f906,f905,f904,f903,f902,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1019,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2330,f2331,f2339,f2359,f2432,f2433,f2436,f2442,f2443,f2474,f2475,f2526,f2525,f2529,f2530,f2533,f2565,f2564,f2568,f2569,f2572,f2608,f2607,f2617,f2618,f2621,f2672,f2684,f2696,f2706,f2718,f2734,f2753,f2754,f2845,f2876,f2877,f2935,f2938,f2940,f2941,f3442,f3443,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f3884,f4202,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4519,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5689,f6240,f6241,f6247,f6256,f6273,f6286,f6932,f7303,f7383,f7384,f7549,f7550,f7551,f7553,f7558,f7561,f7565,f7575,f7576,f7577,f7578,f7579,f7580,f7581,f7582,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8008,f8009,f8010,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9600,f9602,f9603,f9604,f9605,f9606,f9607,f9608,f9609,f9610,f9611,f9612,f9613,f9614,f9615,f9621,f9622,f8244,f8245,f8246,f8248,f8253,f8256,f8260,f8270,f8271,f8272,f8273,f8274,f8275,f8276,f8277,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f9497,f10010,f9686,f9689,f9692,f10034,f10036,f10056,f10074,f10082,f10094,f10098,f10102,f10106,f10110,f10114,f10118,f10122,f10126,f10130,f10132,f10134,f10136,f10140,f10142,f10144,f10146,f10150,f10152,f10154,f10156,f10158,f10160,f10162,f10164,f10192,f10200,f10202,f10204,f10206])).
fof(f10205,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f530,f529,f528,f527,f531,f1048,f538,f539,f548,f547,f552,f551,f587,f586,f593,f591,f596,f594,f601,f599,f604,f603,f602,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f655,f654,f653,f658,f657,f656,f661,f660,f659,f664,f663,f662,f667,f666,f665,f670,f669,f668,f674,f673,f672,f671,f677,f676,f675,f680,f679,f678,f684,f683,f682,f681,f688,f687,f686,f685,f692,f691,f690,f689,f697,f696,f695,f694,f693,f702,f701,f700,f699,f698,f705,f704,f703,f717,f716,f715,f714,f713,f712,f711,f710,f709,f708,f707,f706,f727,f726,f725,f724,f723,f722,f721,f720,f719,f718,f737,f736,f735,f734,f733,f732,f731,f730,f729,f728,f741,f740,f739,f738,f745,f744,f743,f742,f750,f749,f748,f747,f746,f755,f754,f753,f752,f751,f760,f759,f758,f757,f756,f768,f767,f766,f765,f764,f763,f762,f761,f778,f777,f776,f775,f774,f773,f772,f771,f770,f769,f780,f779,f792,f791,f790,f789,f788,f787,f786,f785,f784,f783,f782,f781,f802,f801,f800,f799,f798,f797,f796,f795,f794,f793,f812,f811,f810,f809,f808,f807,f806,f805,f804,f803,f816,f815,f814,f813,f820,f819,f818,f817,f825,f824,f823,f822,f821,f830,f829,f828,f827,f826,f835,f834,f833,f832,f831,f843,f842,f841,f840,f839,f838,f837,f836,f846,f845,f844,f858,f857,f856,f855,f854,f853,f852,f851,f850,f849,f848,f847,f868,f867,f866,f865,f864,f863,f862,f861,f860,f859,f878,f877,f876,f875,f874,f873,f872,f871,f870,f869,f882,f881,f880,f879,f886,f885,f884,f883,f891,f890,f889,f888,f887,f896,f895,f894,f893,f892,f901,f900,f899,f898,f897,f909,f908,f907,f906,f905,f904,f903,f902,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1019,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2330,f2331,f2339,f2359,f2432,f2433,f2436,f2442,f2443,f2474,f2475,f2526,f2525,f2529,f2530,f2533,f2565,f2564,f2568,f2569,f2572,f2608,f2607,f2617,f2618,f2621,f2672,f2684,f2696,f2706,f2718,f2734,f2753,f2754,f2845,f2876,f2877,f2935,f2938,f2940,f2941,f3442,f3443,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f3884,f4202,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4519,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5689,f6240,f6241,f6247,f6256,f6273,f6286,f6932,f7303,f7383,f7384,f7549,f7550,f7551,f7553,f7558,f7561,f7565,f7575,f7576,f7577,f7578,f7579,f7580,f7581,f7582,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8008,f8009,f8010,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9600,f9602,f9603,f9604,f9605,f9606,f9607,f9608,f9609,f9610,f9611,f9612,f9613,f9614,f9615,f9621,f9622,f8244,f8245,f8246,f8248,f8253,f8256,f8260,f8270,f8271,f8272,f8273,f8274,f8275,f8276,f8277,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f9497,f10010,f9686,f9689,f9692,f10034,f10036,f10056,f10074,f10082,f10094,f10098,f10102,f10106,f10110,f10114,f10118,f10122,f10126,f10130,f10132,f10134,f10136,f10140,f10142,f10144,f10146,f10150,f10152,f10154,f10156,f10158,f10160,f10162,f10164,f10192,f10200,f10202,f10204])).
fof(f10203,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f530,f529,f528,f527,f531,f1048,f538,f539,f548,f547,f552,f551,f587,f586,f593,f591,f596,f594,f601,f599,f604,f603,f602,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f655,f654,f653,f658,f657,f656,f661,f660,f659,f664,f663,f662,f667,f666,f665,f670,f669,f668,f674,f673,f672,f671,f677,f676,f675,f680,f679,f678,f684,f683,f682,f681,f688,f687,f686,f685,f692,f691,f690,f689,f697,f696,f695,f694,f693,f702,f701,f700,f699,f698,f705,f704,f703,f717,f716,f715,f714,f713,f712,f711,f710,f709,f708,f707,f706,f727,f726,f725,f724,f723,f722,f721,f720,f719,f718,f737,f736,f735,f734,f733,f732,f731,f730,f729,f728,f741,f740,f739,f738,f745,f744,f743,f742,f750,f749,f748,f747,f746,f755,f754,f753,f752,f751,f760,f759,f758,f757,f756,f768,f767,f766,f765,f764,f763,f762,f761,f778,f777,f776,f775,f774,f773,f772,f771,f770,f769,f780,f779,f792,f791,f790,f789,f788,f787,f786,f785,f784,f783,f782,f781,f802,f801,f800,f799,f798,f797,f796,f795,f794,f793,f812,f811,f810,f809,f808,f807,f806,f805,f804,f803,f816,f815,f814,f813,f820,f819,f818,f817,f825,f824,f823,f822,f821,f830,f829,f828,f827,f826,f835,f834,f833,f832,f831,f843,f842,f841,f840,f839,f838,f837,f836,f846,f845,f844,f858,f857,f856,f855,f854,f853,f852,f851,f850,f849,f848,f847,f868,f867,f866,f865,f864,f863,f862,f861,f860,f859,f878,f877,f876,f875,f874,f873,f872,f871,f870,f869,f882,f881,f880,f879,f886,f885,f884,f883,f891,f890,f889,f888,f887,f896,f895,f894,f893,f892,f901,f900,f899,f898,f897,f909,f908,f907,f906,f905,f904,f903,f902,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1019,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2330,f2331,f2339,f2359,f2432,f2433,f2436,f2442,f2443,f2474,f2475,f2526,f2525,f2529,f2530,f2533,f2565,f2564,f2568,f2569,f2572,f2608,f2607,f2617,f2618,f2621,f2672,f2684,f2696,f2706,f2718,f2734,f2753,f2754,f2845,f2876,f2877,f2935,f2938,f2940,f2941,f3442,f3443,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f3884,f4202,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4519,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5689,f6240,f6241,f6247,f6256,f6273,f6286,f6932,f7303,f7383,f7384,f7549,f7550,f7551,f7553,f7558,f7561,f7565,f7575,f7576,f7577,f7578,f7579,f7580,f7581,f7582,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8008,f8009,f8010,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9600,f9602,f9603,f9604,f9605,f9606,f9607,f9608,f9609,f9610,f9611,f9612,f9613,f9614,f9615,f9621,f9622,f8244,f8245,f8246,f8248,f8253,f8256,f8260,f8270,f8271,f8272,f8273,f8274,f8275,f8276,f8277,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f9497,f10010,f9686,f9689,f9692,f10034,f10036,f10056,f10074,f10082,f10094,f10098,f10102,f10106,f10110,f10114,f10118,f10122,f10126,f10130,f10132,f10134,f10136,f10140,f10142,f10144,f10146,f10150,f10152,f10154,f10156,f10158,f10160,f10162,f10164,f10192,f10200,f10202])).
fof(f10201,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f530,f529,f528,f527,f531,f1048,f538,f539,f548,f547,f552,f551,f587,f586,f593,f591,f596,f594,f601,f599,f604,f603,f602,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f655,f654,f653,f658,f657,f656,f661,f660,f659,f664,f663,f662,f667,f666,f665,f670,f669,f668,f674,f673,f672,f671,f677,f676,f675,f680,f679,f678,f684,f683,f682,f681,f688,f687,f686,f685,f692,f691,f690,f689,f697,f696,f695,f694,f693,f702,f701,f700,f699,f698,f705,f704,f703,f717,f716,f715,f714,f713,f712,f711,f710,f709,f708,f707,f706,f727,f726,f725,f724,f723,f722,f721,f720,f719,f718,f737,f736,f735,f734,f733,f732,f731,f730,f729,f728,f741,f740,f739,f738,f745,f744,f743,f742,f750,f749,f748,f747,f746,f755,f754,f753,f752,f751,f760,f759,f758,f757,f756,f768,f767,f766,f765,f764,f763,f762,f761,f778,f777,f776,f775,f774,f773,f772,f771,f770,f769,f780,f779,f792,f791,f790,f789,f788,f787,f786,f785,f784,f783,f782,f781,f802,f801,f800,f799,f798,f797,f796,f795,f794,f793,f812,f811,f810,f809,f808,f807,f806,f805,f804,f803,f816,f815,f814,f813,f820,f819,f818,f817,f825,f824,f823,f822,f821,f830,f829,f828,f827,f826,f835,f834,f833,f832,f831,f843,f842,f841,f840,f839,f838,f837,f836,f846,f845,f844,f858,f857,f856,f855,f854,f853,f852,f851,f850,f849,f848,f847,f868,f867,f866,f865,f864,f863,f862,f861,f860,f859,f878,f877,f876,f875,f874,f873,f872,f871,f870,f869,f882,f881,f880,f879,f886,f885,f884,f883,f891,f890,f889,f888,f887,f896,f895,f894,f893,f892,f901,f900,f899,f898,f897,f909,f908,f907,f906,f905,f904,f903,f902,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1019,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2330,f2331,f2339,f2359,f2432,f2433,f2436,f2442,f2443,f2474,f2475,f2526,f2525,f2529,f2530,f2533,f2565,f2564,f2568,f2569,f2572,f2608,f2607,f2617,f2618,f2621,f2672,f2684,f2696,f2706,f2718,f2734,f2753,f2754,f2845,f2876,f2877,f2935,f2938,f2940,f2941,f3442,f3443,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f3884,f4202,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4519,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5689,f6240,f6241,f6247,f6256,f6273,f6286,f6932,f7303,f7383,f7384,f7549,f7550,f7551,f7553,f7558,f7561,f7565,f7575,f7576,f7577,f7578,f7579,f7580,f7581,f7582,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8008,f8009,f8010,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9600,f9602,f9603,f9604,f9605,f9606,f9607,f9608,f9609,f9610,f9611,f9612,f9613,f9614,f9615,f9621,f9622,f8244,f8245,f8246,f8248,f8253,f8256,f8260,f8270,f8271,f8272,f8273,f8274,f8275,f8276,f8277,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f9497,f10010,f9686,f9689,f9692,f10034,f10036,f10056,f10074,f10082,f10094,f10098,f10102,f10106,f10110,f10114,f10118,f10122,f10126,f10130,f10132,f10134,f10136,f10140,f10142,f10144,f10146,f10150,f10152,f10154,f10156,f10158,f10160,f10162,f10164,f10192,f10200])).
fof(f10199,plain,(
  $false | ($spl4 | $spl12)),
  inference(global_subsumption,[],[f10198,f530,f529,f528,f527,f531,f1048,f538,f539,f548,f547,f552,f551,f587,f586,f593,f591,f596,f594,f601,f599,f604,f603,f602,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f655,f654,f653,f658,f657,f656,f661,f660,f659,f664,f663,f662,f667,f666,f665,f670,f669,f668,f674,f673,f672,f671,f677,f676,f675,f680,f679,f678,f684,f683,f682,f681,f688,f687,f686,f685,f692,f691,f690,f689,f697,f696,f695,f694,f693,f702,f701,f700,f699,f698,f705,f704,f703,f717,f716,f715,f714,f713,f712,f711,f710,f709,f708,f707,f706,f727,f726,f725,f724,f723,f722,f721,f720,f719,f718,f737,f736,f735,f734,f733,f732,f731,f730,f729,f728,f741,f740,f739,f738,f745,f744,f743,f742,f750,f749,f748,f747,f746,f755,f754,f753,f752,f751,f760,f759,f758,f757,f756,f768,f767,f766,f765,f764,f763,f762,f761,f778,f777,f776,f775,f774,f773,f772,f771,f770,f769,f780,f779,f792,f791,f790,f789,f788,f787,f786,f785,f784,f783,f782,f781,f802,f801,f800,f799,f798,f797,f796,f795,f794,f793,f812,f811,f810,f809,f808,f807,f806,f805,f804,f803,f816,f815,f814,f813,f820,f819,f818,f817,f825,f824,f823,f822,f821,f830,f829,f828,f827,f826,f835,f834,f833,f832,f831,f843,f842,f841,f840,f839,f838,f837,f836,f846,f845,f844,f858,f857,f856,f855,f854,f853,f852,f851,f850,f849,f848,f847,f868,f867,f866,f865,f864,f863,f862,f861,f860,f859,f878,f877,f876,f875,f874,f873,f872,f871,f870,f869,f882,f881,f880,f879,f886,f885,f884,f883,f891,f890,f889,f888,f887,f896,f895,f894,f893,f892,f901,f900,f899,f898,f897,f909,f908,f907,f906,f905,f904,f903,f902,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1019,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2330,f2331,f2339,f2359,f2432,f2433,f2436,f2442,f2443,f2474,f2475,f2526,f2525,f2529,f2530,f2533,f2565,f2564,f2568,f2569,f2572,f2608,f2607,f2617,f2618,f2621,f2672,f2684,f2696,f2706,f2718,f2734,f2753,f2754,f2845,f2876,f2877,f2935,f2938,f2940,f2941,f3442,f3443,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f3884,f4202,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4519,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5689,f6240,f6241,f6247,f6256,f6273,f6286,f6932,f7303,f7383,f7384,f7549,f7550,f7551,f7553,f7558,f7561,f7565,f7575,f7576,f7577,f7578,f7579,f7580,f7581,f7582,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8008,f8009,f8010,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9600,f9602,f9603,f9604,f9605,f9606,f9607,f9608,f9609,f9610,f9611,f9612,f9613,f9614,f9615,f9621,f9622,f8244,f8245,f8246,f8248,f8253,f8256,f8260,f8270,f8271,f8272,f8273,f8274,f8275,f8276,f8277,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f9497,f10010,f9686,f9689,f9692,f10034,f10036,f10056,f10074,f10082,f10094,f10098,f10102,f10106,f10110,f10114,f10118,f10122,f10126,f10130,f10132,f10134,f10136,f10140,f10142,f10144,f10146,f10150,f10152,f10154,f10156,f10158,f10160,f10162,f10164,f10192])).
fof(f10198,plain,(
  ( ! [X0] : (s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X0,'type.list.list'('type.conSem.v')))) ) | ($spl4 | $spl12)),
  inference(subsumption_resolution,[],[f9911,f531])).
fof(f9911,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),sK65('const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X0,'type.list.list'('type.conSem.v')))) ) | ($spl4 | $spl12)),
  inference(backward_demodulation,[],[f9497,f2336])).
fof(f10193,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f530,f529,f528,f527,f531,f1048,f538,f539,f548,f547,f552,f551,f587,f586,f593,f591,f596,f594,f601,f599,f604,f603,f602,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f655,f654,f653,f658,f657,f656,f661,f660,f659,f664,f663,f662,f667,f666,f665,f670,f669,f668,f674,f673,f672,f671,f677,f676,f675,f680,f679,f678,f684,f683,f682,f681,f688,f687,f686,f685,f692,f691,f690,f689,f697,f696,f695,f694,f693,f702,f701,f700,f699,f698,f705,f704,f703,f717,f716,f715,f714,f713,f712,f711,f710,f709,f708,f707,f706,f727,f726,f725,f724,f723,f722,f721,f720,f719,f718,f737,f736,f735,f734,f733,f732,f731,f730,f729,f728,f741,f740,f739,f738,f745,f744,f743,f742,f750,f749,f748,f747,f746,f755,f754,f753,f752,f751,f760,f759,f758,f757,f756,f768,f767,f766,f765,f764,f763,f762,f761,f778,f777,f776,f775,f774,f773,f772,f771,f770,f769,f780,f779,f792,f791,f790,f789,f788,f787,f786,f785,f784,f783,f782,f781,f802,f801,f800,f799,f798,f797,f796,f795,f794,f793,f812,f811,f810,f809,f808,f807,f806,f805,f804,f803,f816,f815,f814,f813,f820,f819,f818,f817,f825,f824,f823,f822,f821,f830,f829,f828,f827,f826,f835,f834,f833,f832,f831,f843,f842,f841,f840,f839,f838,f837,f836,f846,f845,f844,f858,f857,f856,f855,f854,f853,f852,f851,f850,f849,f848,f847,f868,f867,f866,f865,f864,f863,f862,f861,f860,f859,f878,f877,f876,f875,f874,f873,f872,f871,f870,f869,f882,f881,f880,f879,f886,f885,f884,f883,f891,f890,f889,f888,f887,f896,f895,f894,f893,f892,f901,f900,f899,f898,f897,f909,f908,f907,f906,f905,f904,f903,f902,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1019,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2330,f2331,f2339,f2359,f2432,f2433,f2436,f2442,f2443,f2474,f2475,f2526,f2525,f2529,f2530,f2533,f2565,f2564,f2568,f2569,f2572,f2608,f2607,f2617,f2618,f2621,f2672,f2684,f2696,f2706,f2718,f2734,f2753,f2754,f2845,f2876,f2877,f2935,f2938,f2940,f2941,f3442,f3443,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f3884,f4202,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4519,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5689,f6240,f6241,f6247,f6256,f6273,f6286,f6932,f7303,f7383,f7384,f7549,f7550,f7551,f7553,f7558,f7561,f7565,f7575,f7576,f7577,f7578,f7579,f7580,f7581,f7582,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8008,f8009,f8010,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9600,f9602,f9603,f9604,f9605,f9606,f9607,f9608,f9609,f9610,f9611,f9612,f9613,f9614,f9615,f9621,f9622,f8244,f8245,f8246,f8248,f8253,f8256,f8260,f8270,f8271,f8272,f8273,f8274,f8275,f8276,f8277,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f9497,f10010,f9686,f9689,f9692,f10034,f10036,f10056,f10074,f10082,f10094,f10098,f10102,f10106,f10110,f10114,f10118,f10122,f10126,f10130,f10132,f10134,f10136,f10140,f10142,f10144,f10146,f10150,f10152,f10154,f10156,f10158,f10160,f10162,f10164,f10192])).
fof(f10165,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f530,f529,f528,f527,f531,f1048,f538,f539,f548,f547,f552,f551,f587,f586,f593,f591,f596,f594,f601,f599,f604,f603,f602,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f655,f654,f653,f658,f657,f656,f661,f660,f659,f664,f663,f662,f667,f666,f665,f670,f669,f668,f674,f673,f672,f671,f677,f676,f675,f680,f679,f678,f684,f683,f682,f681,f688,f687,f686,f685,f692,f691,f690,f689,f697,f696,f695,f694,f693,f702,f701,f700,f699,f698,f705,f704,f703,f717,f716,f715,f714,f713,f712,f711,f710,f709,f708,f707,f706,f727,f726,f725,f724,f723,f722,f721,f720,f719,f718,f737,f736,f735,f734,f733,f732,f731,f730,f729,f728,f741,f740,f739,f738,f745,f744,f743,f742,f750,f749,f748,f747,f746,f755,f754,f753,f752,f751,f760,f759,f758,f757,f756,f768,f767,f766,f765,f764,f763,f762,f761,f778,f777,f776,f775,f774,f773,f772,f771,f770,f769,f780,f779,f792,f791,f790,f789,f788,f787,f786,f785,f784,f783,f782,f781,f802,f801,f800,f799,f798,f797,f796,f795,f794,f793,f812,f811,f810,f809,f808,f807,f806,f805,f804,f803,f816,f815,f814,f813,f820,f819,f818,f817,f825,f824,f823,f822,f821,f830,f829,f828,f827,f826,f835,f834,f833,f832,f831,f843,f842,f841,f840,f839,f838,f837,f836,f846,f845,f844,f858,f857,f856,f855,f854,f853,f852,f851,f850,f849,f848,f847,f868,f867,f866,f865,f864,f863,f862,f861,f860,f859,f878,f877,f876,f875,f874,f873,f872,f871,f870,f869,f882,f881,f880,f879,f886,f885,f884,f883,f891,f890,f889,f888,f887,f896,f895,f894,f893,f892,f901,f900,f899,f898,f897,f909,f908,f907,f906,f905,f904,f903,f902,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1019,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2330,f2331,f2339,f2359,f2432,f2433,f2436,f2442,f2443,f2474,f2475,f2526,f2525,f2529,f2530,f2533,f2565,f2564,f2568,f2569,f2572,f2608,f2607,f2617,f2618,f2621,f2672,f2684,f2696,f2706,f2718,f2734,f2753,f2754,f2845,f2876,f2877,f2935,f2938,f2940,f2941,f3442,f3443,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f3884,f4202,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4519,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5689,f6240,f6241,f6247,f6256,f6273,f6286,f6932,f7303,f7383,f7384,f7549,f7550,f7551,f7553,f7558,f7561,f7565,f7575,f7576,f7577,f7578,f7579,f7580,f7581,f7582,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8008,f8009,f8010,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9600,f9602,f9603,f9604,f9605,f9606,f9607,f9608,f9609,f9610,f9611,f9612,f9613,f9614,f9615,f9621,f9622,f8244,f8245,f8246,f8248,f8253,f8256,f8260,f8270,f8271,f8272,f8273,f8274,f8275,f8276,f8277,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f9497,f10010,f9686,f9689,f9692,f10034,f10036,f10056,f10074,f10082,f10094,f10098,f10102,f10106,f10110,f10114,f10118,f10122,f10126,f10130,f10132,f10134,f10136,f10140,f10142,f10144,f10146,f10150,f10152,f10154,f10156,f10158,f10160,f10162,f10164])).
fof(f10163,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f530,f529,f528,f527,f531,f1048,f538,f539,f548,f547,f552,f551,f587,f586,f593,f591,f596,f594,f601,f599,f604,f603,f602,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f655,f654,f653,f658,f657,f656,f661,f660,f659,f664,f663,f662,f667,f666,f665,f670,f669,f668,f674,f673,f672,f671,f677,f676,f675,f680,f679,f678,f684,f683,f682,f681,f688,f687,f686,f685,f692,f691,f690,f689,f697,f696,f695,f694,f693,f702,f701,f700,f699,f698,f705,f704,f703,f717,f716,f715,f714,f713,f712,f711,f710,f709,f708,f707,f706,f727,f726,f725,f724,f723,f722,f721,f720,f719,f718,f737,f736,f735,f734,f733,f732,f731,f730,f729,f728,f741,f740,f739,f738,f745,f744,f743,f742,f750,f749,f748,f747,f746,f755,f754,f753,f752,f751,f760,f759,f758,f757,f756,f768,f767,f766,f765,f764,f763,f762,f761,f778,f777,f776,f775,f774,f773,f772,f771,f770,f769,f780,f779,f792,f791,f790,f789,f788,f787,f786,f785,f784,f783,f782,f781,f802,f801,f800,f799,f798,f797,f796,f795,f794,f793,f812,f811,f810,f809,f808,f807,f806,f805,f804,f803,f816,f815,f814,f813,f820,f819,f818,f817,f825,f824,f823,f822,f821,f830,f829,f828,f827,f826,f835,f834,f833,f832,f831,f843,f842,f841,f840,f839,f838,f837,f836,f846,f845,f844,f858,f857,f856,f855,f854,f853,f852,f851,f850,f849,f848,f847,f868,f867,f866,f865,f864,f863,f862,f861,f860,f859,f878,f877,f876,f875,f874,f873,f872,f871,f870,f869,f882,f881,f880,f879,f886,f885,f884,f883,f891,f890,f889,f888,f887,f896,f895,f894,f893,f892,f901,f900,f899,f898,f897,f909,f908,f907,f906,f905,f904,f903,f902,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1019,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2330,f2331,f2339,f2359,f2432,f2433,f2436,f2442,f2443,f2474,f2475,f2526,f2525,f2529,f2530,f2533,f2565,f2564,f2568,f2569,f2572,f2608,f2607,f2617,f2618,f2621,f2672,f2684,f2696,f2706,f2718,f2734,f2753,f2754,f2845,f2876,f2877,f2935,f2938,f2940,f2941,f3442,f3443,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f3884,f4202,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4519,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5689,f6240,f6241,f6247,f6256,f6273,f6286,f6932,f7303,f7383,f7384,f7549,f7550,f7551,f7553,f7558,f7561,f7565,f7575,f7576,f7577,f7578,f7579,f7580,f7581,f7582,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8008,f8009,f8010,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9600,f9602,f9603,f9604,f9605,f9606,f9607,f9608,f9609,f9610,f9611,f9612,f9613,f9614,f9615,f9621,f9622,f8244,f8245,f8246,f8248,f8253,f8256,f8260,f8270,f8271,f8272,f8273,f8274,f8275,f8276,f8277,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f9497,f10010,f9686,f9689,f9692,f10034,f10036,f10056,f10074,f10082,f10094,f10098,f10102,f10106,f10110,f10114,f10118,f10122,f10126,f10130,f10132,f10134,f10136,f10140,f10142,f10144,f10146,f10150,f10152,f10154,f10156,f10158,f10160,f10162])).
fof(f10161,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f530,f529,f528,f527,f531,f1048,f538,f539,f548,f547,f552,f551,f587,f586,f593,f591,f596,f594,f601,f599,f604,f603,f602,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f655,f654,f653,f658,f657,f656,f661,f660,f659,f664,f663,f662,f667,f666,f665,f670,f669,f668,f674,f673,f672,f671,f677,f676,f675,f680,f679,f678,f684,f683,f682,f681,f688,f687,f686,f685,f692,f691,f690,f689,f697,f696,f695,f694,f693,f702,f701,f700,f699,f698,f705,f704,f703,f717,f716,f715,f714,f713,f712,f711,f710,f709,f708,f707,f706,f727,f726,f725,f724,f723,f722,f721,f720,f719,f718,f737,f736,f735,f734,f733,f732,f731,f730,f729,f728,f741,f740,f739,f738,f745,f744,f743,f742,f750,f749,f748,f747,f746,f755,f754,f753,f752,f751,f760,f759,f758,f757,f756,f768,f767,f766,f765,f764,f763,f762,f761,f778,f777,f776,f775,f774,f773,f772,f771,f770,f769,f780,f779,f792,f791,f790,f789,f788,f787,f786,f785,f784,f783,f782,f781,f802,f801,f800,f799,f798,f797,f796,f795,f794,f793,f812,f811,f810,f809,f808,f807,f806,f805,f804,f803,f816,f815,f814,f813,f820,f819,f818,f817,f825,f824,f823,f822,f821,f830,f829,f828,f827,f826,f835,f834,f833,f832,f831,f843,f842,f841,f840,f839,f838,f837,f836,f846,f845,f844,f858,f857,f856,f855,f854,f853,f852,f851,f850,f849,f848,f847,f868,f867,f866,f865,f864,f863,f862,f861,f860,f859,f878,f877,f876,f875,f874,f873,f872,f871,f870,f869,f882,f881,f880,f879,f886,f885,f884,f883,f891,f890,f889,f888,f887,f896,f895,f894,f893,f892,f901,f900,f899,f898,f897,f909,f908,f907,f906,f905,f904,f903,f902,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1019,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2330,f2331,f2339,f2359,f2432,f2433,f2436,f2442,f2443,f2474,f2475,f2526,f2525,f2529,f2530,f2533,f2565,f2564,f2568,f2569,f2572,f2608,f2607,f2617,f2618,f2621,f2672,f2684,f2696,f2706,f2718,f2734,f2753,f2754,f2845,f2876,f2877,f2935,f2938,f2940,f2941,f3442,f3443,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f3884,f4202,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4519,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5689,f6240,f6241,f6247,f6256,f6273,f6286,f6932,f7303,f7383,f7384,f7549,f7550,f7551,f7553,f7558,f7561,f7565,f7575,f7576,f7577,f7578,f7579,f7580,f7581,f7582,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8008,f8009,f8010,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9600,f9602,f9603,f9604,f9605,f9606,f9607,f9608,f9609,f9610,f9611,f9612,f9613,f9614,f9615,f9621,f9622,f8244,f8245,f8246,f8248,f8253,f8256,f8260,f8270,f8271,f8272,f8273,f8274,f8275,f8276,f8277,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f9497,f10010,f9686,f9689,f9692,f10034,f10036,f10056,f10074,f10082,f10094,f10098,f10102,f10106,f10110,f10114,f10118,f10122,f10126,f10130,f10132,f10134,f10136,f10140,f10142,f10144,f10146,f10150,f10152,f10154,f10156,f10158,f10160])).
fof(f10159,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f530,f529,f528,f527,f531,f1048,f538,f539,f548,f547,f552,f551,f587,f586,f593,f591,f596,f594,f601,f599,f604,f603,f602,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f655,f654,f653,f658,f657,f656,f661,f660,f659,f664,f663,f662,f667,f666,f665,f670,f669,f668,f674,f673,f672,f671,f677,f676,f675,f680,f679,f678,f684,f683,f682,f681,f688,f687,f686,f685,f692,f691,f690,f689,f697,f696,f695,f694,f693,f702,f701,f700,f699,f698,f705,f704,f703,f717,f716,f715,f714,f713,f712,f711,f710,f709,f708,f707,f706,f727,f726,f725,f724,f723,f722,f721,f720,f719,f718,f737,f736,f735,f734,f733,f732,f731,f730,f729,f728,f741,f740,f739,f738,f745,f744,f743,f742,f750,f749,f748,f747,f746,f755,f754,f753,f752,f751,f760,f759,f758,f757,f756,f768,f767,f766,f765,f764,f763,f762,f761,f778,f777,f776,f775,f774,f773,f772,f771,f770,f769,f780,f779,f792,f791,f790,f789,f788,f787,f786,f785,f784,f783,f782,f781,f802,f801,f800,f799,f798,f797,f796,f795,f794,f793,f812,f811,f810,f809,f808,f807,f806,f805,f804,f803,f816,f815,f814,f813,f820,f819,f818,f817,f825,f824,f823,f822,f821,f830,f829,f828,f827,f826,f835,f834,f833,f832,f831,f843,f842,f841,f840,f839,f838,f837,f836,f846,f845,f844,f858,f857,f856,f855,f854,f853,f852,f851,f850,f849,f848,f847,f868,f867,f866,f865,f864,f863,f862,f861,f860,f859,f878,f877,f876,f875,f874,f873,f872,f871,f870,f869,f882,f881,f880,f879,f886,f885,f884,f883,f891,f890,f889,f888,f887,f896,f895,f894,f893,f892,f901,f900,f899,f898,f897,f909,f908,f907,f906,f905,f904,f903,f902,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1019,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2330,f2331,f2339,f2359,f2432,f2433,f2436,f2442,f2443,f2474,f2475,f2526,f2525,f2529,f2530,f2533,f2565,f2564,f2568,f2569,f2572,f2608,f2607,f2617,f2618,f2621,f2672,f2684,f2696,f2706,f2718,f2734,f2753,f2754,f2845,f2876,f2877,f2935,f2938,f2940,f2941,f3442,f3443,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f3884,f4202,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4519,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5689,f6240,f6241,f6247,f6256,f6273,f6286,f6932,f7303,f7383,f7384,f7549,f7550,f7551,f7553,f7558,f7561,f7565,f7575,f7576,f7577,f7578,f7579,f7580,f7581,f7582,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8008,f8009,f8010,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9600,f9602,f9603,f9604,f9605,f9606,f9607,f9608,f9609,f9610,f9611,f9612,f9613,f9614,f9615,f9621,f9622,f8244,f8245,f8246,f8248,f8253,f8256,f8260,f8270,f8271,f8272,f8273,f8274,f8275,f8276,f8277,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f9497,f10010,f9686,f9689,f9692,f10034,f10036,f10056,f10074,f10082,f10094,f10098,f10102,f10106,f10110,f10114,f10118,f10122,f10126,f10130,f10132,f10134,f10136,f10140,f10142,f10144,f10146,f10150,f10152,f10154,f10156,f10158])).
fof(f10157,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f530,f529,f528,f527,f531,f1048,f538,f539,f548,f547,f552,f551,f587,f586,f593,f591,f596,f594,f601,f599,f604,f603,f602,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f655,f654,f653,f658,f657,f656,f661,f660,f659,f664,f663,f662,f667,f666,f665,f670,f669,f668,f674,f673,f672,f671,f677,f676,f675,f680,f679,f678,f684,f683,f682,f681,f688,f687,f686,f685,f692,f691,f690,f689,f697,f696,f695,f694,f693,f702,f701,f700,f699,f698,f705,f704,f703,f717,f716,f715,f714,f713,f712,f711,f710,f709,f708,f707,f706,f727,f726,f725,f724,f723,f722,f721,f720,f719,f718,f737,f736,f735,f734,f733,f732,f731,f730,f729,f728,f741,f740,f739,f738,f745,f744,f743,f742,f750,f749,f748,f747,f746,f755,f754,f753,f752,f751,f760,f759,f758,f757,f756,f768,f767,f766,f765,f764,f763,f762,f761,f778,f777,f776,f775,f774,f773,f772,f771,f770,f769,f780,f779,f792,f791,f790,f789,f788,f787,f786,f785,f784,f783,f782,f781,f802,f801,f800,f799,f798,f797,f796,f795,f794,f793,f812,f811,f810,f809,f808,f807,f806,f805,f804,f803,f816,f815,f814,f813,f820,f819,f818,f817,f825,f824,f823,f822,f821,f830,f829,f828,f827,f826,f835,f834,f833,f832,f831,f843,f842,f841,f840,f839,f838,f837,f836,f846,f845,f844,f858,f857,f856,f855,f854,f853,f852,f851,f850,f849,f848,f847,f868,f867,f866,f865,f864,f863,f862,f861,f860,f859,f878,f877,f876,f875,f874,f873,f872,f871,f870,f869,f882,f881,f880,f879,f886,f885,f884,f883,f891,f890,f889,f888,f887,f896,f895,f894,f893,f892,f901,f900,f899,f898,f897,f909,f908,f907,f906,f905,f904,f903,f902,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1019,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2330,f2331,f2339,f2359,f2432,f2433,f2436,f2442,f2443,f2474,f2475,f2526,f2525,f2529,f2530,f2533,f2565,f2564,f2568,f2569,f2572,f2608,f2607,f2617,f2618,f2621,f2672,f2684,f2696,f2706,f2718,f2734,f2753,f2754,f2845,f2876,f2877,f2935,f2938,f2940,f2941,f3442,f3443,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f3884,f4202,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4519,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5689,f6240,f6241,f6247,f6256,f6273,f6286,f6932,f7303,f7383,f7384,f7549,f7550,f7551,f7553,f7558,f7561,f7565,f7575,f7576,f7577,f7578,f7579,f7580,f7581,f7582,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8008,f8009,f8010,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9600,f9602,f9603,f9604,f9605,f9606,f9607,f9608,f9609,f9610,f9611,f9612,f9613,f9614,f9615,f9621,f9622,f8244,f8245,f8246,f8248,f8253,f8256,f8260,f8270,f8271,f8272,f8273,f8274,f8275,f8276,f8277,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f9497,f10010,f9686,f9689,f9692,f10034,f10036,f10056,f10074,f10082,f10094,f10098,f10102,f10106,f10110,f10114,f10118,f10122,f10126,f10130,f10132,f10134,f10136,f10140,f10142,f10144,f10146,f10150,f10152,f10154,f10156])).
fof(f10155,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f530,f529,f528,f527,f531,f1048,f538,f539,f548,f547,f552,f551,f587,f586,f593,f591,f596,f594,f601,f599,f604,f603,f602,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f655,f654,f653,f658,f657,f656,f661,f660,f659,f664,f663,f662,f667,f666,f665,f670,f669,f668,f674,f673,f672,f671,f677,f676,f675,f680,f679,f678,f684,f683,f682,f681,f688,f687,f686,f685,f692,f691,f690,f689,f697,f696,f695,f694,f693,f702,f701,f700,f699,f698,f705,f704,f703,f717,f716,f715,f714,f713,f712,f711,f710,f709,f708,f707,f706,f727,f726,f725,f724,f723,f722,f721,f720,f719,f718,f737,f736,f735,f734,f733,f732,f731,f730,f729,f728,f741,f740,f739,f738,f745,f744,f743,f742,f750,f749,f748,f747,f746,f755,f754,f753,f752,f751,f760,f759,f758,f757,f756,f768,f767,f766,f765,f764,f763,f762,f761,f778,f777,f776,f775,f774,f773,f772,f771,f770,f769,f780,f779,f792,f791,f790,f789,f788,f787,f786,f785,f784,f783,f782,f781,f802,f801,f800,f799,f798,f797,f796,f795,f794,f793,f812,f811,f810,f809,f808,f807,f806,f805,f804,f803,f816,f815,f814,f813,f820,f819,f818,f817,f825,f824,f823,f822,f821,f830,f829,f828,f827,f826,f835,f834,f833,f832,f831,f843,f842,f841,f840,f839,f838,f837,f836,f846,f845,f844,f858,f857,f856,f855,f854,f853,f852,f851,f850,f849,f848,f847,f868,f867,f866,f865,f864,f863,f862,f861,f860,f859,f878,f877,f876,f875,f874,f873,f872,f871,f870,f869,f882,f881,f880,f879,f886,f885,f884,f883,f891,f890,f889,f888,f887,f896,f895,f894,f893,f892,f901,f900,f899,f898,f897,f909,f908,f907,f906,f905,f904,f903,f902,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1019,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2330,f2331,f2339,f2359,f2432,f2433,f2436,f2442,f2443,f2474,f2475,f2526,f2525,f2529,f2530,f2533,f2565,f2564,f2568,f2569,f2572,f2608,f2607,f2617,f2618,f2621,f2672,f2684,f2696,f2706,f2718,f2734,f2753,f2754,f2845,f2876,f2877,f2935,f2938,f2940,f2941,f3442,f3443,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f3884,f4202,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4519,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5689,f6240,f6241,f6247,f6256,f6273,f6286,f6932,f7303,f7383,f7384,f7549,f7550,f7551,f7553,f7558,f7561,f7565,f7575,f7576,f7577,f7578,f7579,f7580,f7581,f7582,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8008,f8009,f8010,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9600,f9602,f9603,f9604,f9605,f9606,f9607,f9608,f9609,f9610,f9611,f9612,f9613,f9614,f9615,f9621,f9622,f8244,f8245,f8246,f8248,f8253,f8256,f8260,f8270,f8271,f8272,f8273,f8274,f8275,f8276,f8277,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f9497,f10010,f9686,f9689,f9692,f10034,f10036,f10056,f10074,f10082,f10094,f10098,f10102,f10106,f10110,f10114,f10118,f10122,f10126,f10130,f10132,f10134,f10136,f10140,f10142,f10144,f10146,f10150,f10152,f10154])).
fof(f10153,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f530,f529,f528,f527,f531,f1048,f538,f539,f548,f547,f552,f551,f587,f586,f593,f591,f596,f594,f601,f599,f604,f603,f602,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f655,f654,f653,f658,f657,f656,f661,f660,f659,f664,f663,f662,f667,f666,f665,f670,f669,f668,f674,f673,f672,f671,f677,f676,f675,f680,f679,f678,f684,f683,f682,f681,f688,f687,f686,f685,f692,f691,f690,f689,f697,f696,f695,f694,f693,f702,f701,f700,f699,f698,f705,f704,f703,f717,f716,f715,f714,f713,f712,f711,f710,f709,f708,f707,f706,f727,f726,f725,f724,f723,f722,f721,f720,f719,f718,f737,f736,f735,f734,f733,f732,f731,f730,f729,f728,f741,f740,f739,f738,f745,f744,f743,f742,f750,f749,f748,f747,f746,f755,f754,f753,f752,f751,f760,f759,f758,f757,f756,f768,f767,f766,f765,f764,f763,f762,f761,f778,f777,f776,f775,f774,f773,f772,f771,f770,f769,f780,f779,f792,f791,f790,f789,f788,f787,f786,f785,f784,f783,f782,f781,f802,f801,f800,f799,f798,f797,f796,f795,f794,f793,f812,f811,f810,f809,f808,f807,f806,f805,f804,f803,f816,f815,f814,f813,f820,f819,f818,f817,f825,f824,f823,f822,f821,f830,f829,f828,f827,f826,f835,f834,f833,f832,f831,f843,f842,f841,f840,f839,f838,f837,f836,f846,f845,f844,f858,f857,f856,f855,f854,f853,f852,f851,f850,f849,f848,f847,f868,f867,f866,f865,f864,f863,f862,f861,f860,f859,f878,f877,f876,f875,f874,f873,f872,f871,f870,f869,f882,f881,f880,f879,f886,f885,f884,f883,f891,f890,f889,f888,f887,f896,f895,f894,f893,f892,f901,f900,f899,f898,f897,f909,f908,f907,f906,f905,f904,f903,f902,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1019,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2330,f2331,f2339,f2359,f2432,f2433,f2436,f2442,f2443,f2474,f2475,f2526,f2525,f2529,f2530,f2533,f2565,f2564,f2568,f2569,f2572,f2608,f2607,f2617,f2618,f2621,f2672,f2684,f2696,f2706,f2718,f2734,f2753,f2754,f2845,f2876,f2877,f2935,f2938,f2940,f2941,f3442,f3443,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f3884,f4202,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4519,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5689,f6240,f6241,f6247,f6256,f6273,f6286,f6932,f7303,f7383,f7384,f7549,f7550,f7551,f7553,f7558,f7561,f7565,f7575,f7576,f7577,f7578,f7579,f7580,f7581,f7582,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8008,f8009,f8010,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9600,f9602,f9603,f9604,f9605,f9606,f9607,f9608,f9609,f9610,f9611,f9612,f9613,f9614,f9615,f9621,f9622,f8244,f8245,f8246,f8248,f8253,f8256,f8260,f8270,f8271,f8272,f8273,f8274,f8275,f8276,f8277,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f9497,f10010,f9686,f9689,f9692,f10034,f10036,f10056,f10074,f10082,f10094,f10098,f10102,f10106,f10110,f10114,f10118,f10122,f10126,f10130,f10132,f10134,f10136,f10140,f10142,f10144,f10146,f10150,f10152])).
fof(f10151,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f530,f529,f528,f527,f531,f1048,f538,f539,f548,f547,f552,f551,f587,f586,f593,f591,f596,f594,f601,f599,f604,f603,f602,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f655,f654,f653,f658,f657,f656,f661,f660,f659,f664,f663,f662,f667,f666,f665,f670,f669,f668,f674,f673,f672,f671,f677,f676,f675,f680,f679,f678,f684,f683,f682,f681,f688,f687,f686,f685,f692,f691,f690,f689,f697,f696,f695,f694,f693,f702,f701,f700,f699,f698,f705,f704,f703,f717,f716,f715,f714,f713,f712,f711,f710,f709,f708,f707,f706,f727,f726,f725,f724,f723,f722,f721,f720,f719,f718,f737,f736,f735,f734,f733,f732,f731,f730,f729,f728,f741,f740,f739,f738,f745,f744,f743,f742,f750,f749,f748,f747,f746,f755,f754,f753,f752,f751,f760,f759,f758,f757,f756,f768,f767,f766,f765,f764,f763,f762,f761,f778,f777,f776,f775,f774,f773,f772,f771,f770,f769,f780,f779,f792,f791,f790,f789,f788,f787,f786,f785,f784,f783,f782,f781,f802,f801,f800,f799,f798,f797,f796,f795,f794,f793,f812,f811,f810,f809,f808,f807,f806,f805,f804,f803,f816,f815,f814,f813,f820,f819,f818,f817,f825,f824,f823,f822,f821,f830,f829,f828,f827,f826,f835,f834,f833,f832,f831,f843,f842,f841,f840,f839,f838,f837,f836,f846,f845,f844,f858,f857,f856,f855,f854,f853,f852,f851,f850,f849,f848,f847,f868,f867,f866,f865,f864,f863,f862,f861,f860,f859,f878,f877,f876,f875,f874,f873,f872,f871,f870,f869,f882,f881,f880,f879,f886,f885,f884,f883,f891,f890,f889,f888,f887,f896,f895,f894,f893,f892,f901,f900,f899,f898,f897,f909,f908,f907,f906,f905,f904,f903,f902,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1019,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2330,f2331,f2339,f2359,f2432,f2433,f2436,f2442,f2443,f2474,f2475,f2526,f2525,f2529,f2530,f2533,f2565,f2564,f2568,f2569,f2572,f2608,f2607,f2617,f2618,f2621,f2672,f2684,f2696,f2706,f2718,f2734,f2753,f2754,f2845,f2876,f2877,f2935,f2938,f2940,f2941,f3442,f3443,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f3884,f4202,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4519,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5689,f6240,f6241,f6247,f6256,f6273,f6286,f6932,f7303,f7383,f7384,f7549,f7550,f7551,f7553,f7558,f7561,f7565,f7575,f7576,f7577,f7578,f7579,f7580,f7581,f7582,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8008,f8009,f8010,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9600,f9602,f9603,f9604,f9605,f9606,f9607,f9608,f9609,f9610,f9611,f9612,f9613,f9614,f9615,f9621,f9622,f8244,f8245,f8246,f8248,f8253,f8256,f8260,f8270,f8271,f8272,f8273,f8274,f8275,f8276,f8277,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f9497,f10010,f9686,f9689,f9692,f10034,f10036,f10056,f10074,f10082,f10094,f10098,f10102,f10106,f10110,f10114,f10118,f10122,f10126,f10130,f10132,f10134,f10136,f10140,f10142,f10144,f10146,f10150])).
fof(f10147,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f530,f529,f528,f527,f531,f1048,f538,f539,f548,f547,f552,f551,f587,f586,f593,f591,f596,f594,f601,f599,f604,f603,f602,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f655,f654,f653,f658,f657,f656,f661,f660,f659,f664,f663,f662,f667,f666,f665,f670,f669,f668,f674,f673,f672,f671,f677,f676,f675,f680,f679,f678,f684,f683,f682,f681,f688,f687,f686,f685,f692,f691,f690,f689,f697,f696,f695,f694,f693,f702,f701,f700,f699,f698,f705,f704,f703,f717,f716,f715,f714,f713,f712,f711,f710,f709,f708,f707,f706,f727,f726,f725,f724,f723,f722,f721,f720,f719,f718,f737,f736,f735,f734,f733,f732,f731,f730,f729,f728,f741,f740,f739,f738,f745,f744,f743,f742,f750,f749,f748,f747,f746,f755,f754,f753,f752,f751,f760,f759,f758,f757,f756,f768,f767,f766,f765,f764,f763,f762,f761,f778,f777,f776,f775,f774,f773,f772,f771,f770,f769,f780,f779,f792,f791,f790,f789,f788,f787,f786,f785,f784,f783,f782,f781,f802,f801,f800,f799,f798,f797,f796,f795,f794,f793,f812,f811,f810,f809,f808,f807,f806,f805,f804,f803,f816,f815,f814,f813,f820,f819,f818,f817,f825,f824,f823,f822,f821,f830,f829,f828,f827,f826,f835,f834,f833,f832,f831,f843,f842,f841,f840,f839,f838,f837,f836,f846,f845,f844,f858,f857,f856,f855,f854,f853,f852,f851,f850,f849,f848,f847,f868,f867,f866,f865,f864,f863,f862,f861,f860,f859,f878,f877,f876,f875,f874,f873,f872,f871,f870,f869,f882,f881,f880,f879,f886,f885,f884,f883,f891,f890,f889,f888,f887,f896,f895,f894,f893,f892,f901,f900,f899,f898,f897,f909,f908,f907,f906,f905,f904,f903,f902,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1019,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2330,f2331,f2339,f2359,f2432,f2433,f2436,f2442,f2443,f2474,f2475,f2526,f2525,f2529,f2530,f2533,f2565,f2564,f2568,f2569,f2572,f2608,f2607,f2617,f2618,f2621,f2672,f2684,f2696,f2706,f2718,f2734,f2753,f2754,f2845,f2876,f2877,f2935,f2938,f2940,f2941,f3442,f3443,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f3884,f4202,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4519,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5689,f6240,f6241,f6247,f6256,f6273,f6286,f6932,f7303,f7383,f7384,f7549,f7550,f7551,f7553,f7558,f7561,f7565,f7575,f7576,f7577,f7578,f7579,f7580,f7581,f7582,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8008,f8009,f8010,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9600,f9602,f9603,f9604,f9605,f9606,f9607,f9608,f9609,f9610,f9611,f9612,f9613,f9614,f9615,f9621,f9622,f8244,f8245,f8246,f8248,f8253,f8256,f8260,f8270,f8271,f8272,f8273,f8274,f8275,f8276,f8277,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f9497,f10010,f9686,f9689,f9692,f10034,f10036,f10056,f10074,f10082,f10094,f10098,f10102,f10106,f10110,f10114,f10118,f10122,f10126,f10130,f10132,f10134,f10136,f10140,f10142,f10144,f10146])).
fof(f10145,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f530,f529,f528,f527,f531,f1048,f538,f539,f548,f547,f552,f551,f587,f586,f593,f591,f596,f594,f601,f599,f604,f603,f602,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f655,f654,f653,f658,f657,f656,f661,f660,f659,f664,f663,f662,f667,f666,f665,f670,f669,f668,f674,f673,f672,f671,f677,f676,f675,f680,f679,f678,f684,f683,f682,f681,f688,f687,f686,f685,f692,f691,f690,f689,f697,f696,f695,f694,f693,f702,f701,f700,f699,f698,f705,f704,f703,f717,f716,f715,f714,f713,f712,f711,f710,f709,f708,f707,f706,f727,f726,f725,f724,f723,f722,f721,f720,f719,f718,f737,f736,f735,f734,f733,f732,f731,f730,f729,f728,f741,f740,f739,f738,f745,f744,f743,f742,f750,f749,f748,f747,f746,f755,f754,f753,f752,f751,f760,f759,f758,f757,f756,f768,f767,f766,f765,f764,f763,f762,f761,f778,f777,f776,f775,f774,f773,f772,f771,f770,f769,f780,f779,f792,f791,f790,f789,f788,f787,f786,f785,f784,f783,f782,f781,f802,f801,f800,f799,f798,f797,f796,f795,f794,f793,f812,f811,f810,f809,f808,f807,f806,f805,f804,f803,f816,f815,f814,f813,f820,f819,f818,f817,f825,f824,f823,f822,f821,f830,f829,f828,f827,f826,f835,f834,f833,f832,f831,f843,f842,f841,f840,f839,f838,f837,f836,f846,f845,f844,f858,f857,f856,f855,f854,f853,f852,f851,f850,f849,f848,f847,f868,f867,f866,f865,f864,f863,f862,f861,f860,f859,f878,f877,f876,f875,f874,f873,f872,f871,f870,f869,f882,f881,f880,f879,f886,f885,f884,f883,f891,f890,f889,f888,f887,f896,f895,f894,f893,f892,f901,f900,f899,f898,f897,f909,f908,f907,f906,f905,f904,f903,f902,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1019,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2330,f2331,f2339,f2359,f2432,f2433,f2436,f2442,f2443,f2474,f2475,f2526,f2525,f2529,f2530,f2533,f2565,f2564,f2568,f2569,f2572,f2608,f2607,f2617,f2618,f2621,f2672,f2684,f2696,f2706,f2718,f2734,f2753,f2754,f2845,f2876,f2877,f2935,f2938,f2940,f2941,f3442,f3443,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f3884,f4202,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4519,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5689,f6240,f6241,f6247,f6256,f6273,f6286,f6932,f7303,f7383,f7384,f7549,f7550,f7551,f7553,f7558,f7561,f7565,f7575,f7576,f7577,f7578,f7579,f7580,f7581,f7582,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8008,f8009,f8010,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9600,f9602,f9603,f9604,f9605,f9606,f9607,f9608,f9609,f9610,f9611,f9612,f9613,f9614,f9615,f9621,f9622,f8244,f8245,f8246,f8248,f8253,f8256,f8260,f8270,f8271,f8272,f8273,f8274,f8275,f8276,f8277,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f9497,f10010,f9686,f9689,f9692,f10034,f10036,f10056,f10074,f10082,f10094,f10098,f10102,f10106,f10110,f10114,f10118,f10122,f10126,f10130,f10132,f10134,f10136,f10140,f10142,f10144])).
fof(f10143,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f530,f529,f528,f527,f531,f1048,f538,f539,f548,f547,f552,f551,f587,f586,f593,f591,f596,f594,f601,f599,f604,f603,f602,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f655,f654,f653,f658,f657,f656,f661,f660,f659,f664,f663,f662,f667,f666,f665,f670,f669,f668,f674,f673,f672,f671,f677,f676,f675,f680,f679,f678,f684,f683,f682,f681,f688,f687,f686,f685,f692,f691,f690,f689,f697,f696,f695,f694,f693,f702,f701,f700,f699,f698,f705,f704,f703,f717,f716,f715,f714,f713,f712,f711,f710,f709,f708,f707,f706,f727,f726,f725,f724,f723,f722,f721,f720,f719,f718,f737,f736,f735,f734,f733,f732,f731,f730,f729,f728,f741,f740,f739,f738,f745,f744,f743,f742,f750,f749,f748,f747,f746,f755,f754,f753,f752,f751,f760,f759,f758,f757,f756,f768,f767,f766,f765,f764,f763,f762,f761,f778,f777,f776,f775,f774,f773,f772,f771,f770,f769,f780,f779,f792,f791,f790,f789,f788,f787,f786,f785,f784,f783,f782,f781,f802,f801,f800,f799,f798,f797,f796,f795,f794,f793,f812,f811,f810,f809,f808,f807,f806,f805,f804,f803,f816,f815,f814,f813,f820,f819,f818,f817,f825,f824,f823,f822,f821,f830,f829,f828,f827,f826,f835,f834,f833,f832,f831,f843,f842,f841,f840,f839,f838,f837,f836,f846,f845,f844,f858,f857,f856,f855,f854,f853,f852,f851,f850,f849,f848,f847,f868,f867,f866,f865,f864,f863,f862,f861,f860,f859,f878,f877,f876,f875,f874,f873,f872,f871,f870,f869,f882,f881,f880,f879,f886,f885,f884,f883,f891,f890,f889,f888,f887,f896,f895,f894,f893,f892,f901,f900,f899,f898,f897,f909,f908,f907,f906,f905,f904,f903,f902,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1019,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2330,f2331,f2339,f2359,f2432,f2433,f2436,f2442,f2443,f2474,f2475,f2526,f2525,f2529,f2530,f2533,f2565,f2564,f2568,f2569,f2572,f2608,f2607,f2617,f2618,f2621,f2672,f2684,f2696,f2706,f2718,f2734,f2753,f2754,f2845,f2876,f2877,f2935,f2938,f2940,f2941,f3442,f3443,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f3884,f4202,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4519,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5689,f6240,f6241,f6247,f6256,f6273,f6286,f6932,f7303,f7383,f7384,f7549,f7550,f7551,f7553,f7558,f7561,f7565,f7575,f7576,f7577,f7578,f7579,f7580,f7581,f7582,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8008,f8009,f8010,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9600,f9602,f9603,f9604,f9605,f9606,f9607,f9608,f9609,f9610,f9611,f9612,f9613,f9614,f9615,f9621,f9622,f8244,f8245,f8246,f8248,f8253,f8256,f8260,f8270,f8271,f8272,f8273,f8274,f8275,f8276,f8277,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f9497,f10010,f9686,f9689,f9692,f10034,f10036,f10056,f10074,f10082,f10094,f10098,f10102,f10106,f10110,f10114,f10118,f10122,f10126,f10130,f10132,f10134,f10136,f10140,f10142])).
fof(f10141,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f530,f529,f528,f527,f531,f1048,f538,f539,f548,f547,f552,f551,f587,f586,f593,f591,f596,f594,f601,f599,f604,f603,f602,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f655,f654,f653,f658,f657,f656,f661,f660,f659,f664,f663,f662,f667,f666,f665,f670,f669,f668,f674,f673,f672,f671,f677,f676,f675,f680,f679,f678,f684,f683,f682,f681,f688,f687,f686,f685,f692,f691,f690,f689,f697,f696,f695,f694,f693,f702,f701,f700,f699,f698,f705,f704,f703,f717,f716,f715,f714,f713,f712,f711,f710,f709,f708,f707,f706,f727,f726,f725,f724,f723,f722,f721,f720,f719,f718,f737,f736,f735,f734,f733,f732,f731,f730,f729,f728,f741,f740,f739,f738,f745,f744,f743,f742,f750,f749,f748,f747,f746,f755,f754,f753,f752,f751,f760,f759,f758,f757,f756,f768,f767,f766,f765,f764,f763,f762,f761,f778,f777,f776,f775,f774,f773,f772,f771,f770,f769,f780,f779,f792,f791,f790,f789,f788,f787,f786,f785,f784,f783,f782,f781,f802,f801,f800,f799,f798,f797,f796,f795,f794,f793,f812,f811,f810,f809,f808,f807,f806,f805,f804,f803,f816,f815,f814,f813,f820,f819,f818,f817,f825,f824,f823,f822,f821,f830,f829,f828,f827,f826,f835,f834,f833,f832,f831,f843,f842,f841,f840,f839,f838,f837,f836,f846,f845,f844,f858,f857,f856,f855,f854,f853,f852,f851,f850,f849,f848,f847,f868,f867,f866,f865,f864,f863,f862,f861,f860,f859,f878,f877,f876,f875,f874,f873,f872,f871,f870,f869,f882,f881,f880,f879,f886,f885,f884,f883,f891,f890,f889,f888,f887,f896,f895,f894,f893,f892,f901,f900,f899,f898,f897,f909,f908,f907,f906,f905,f904,f903,f902,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1019,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2330,f2331,f2339,f2359,f2432,f2433,f2436,f2442,f2443,f2474,f2475,f2526,f2525,f2529,f2530,f2533,f2565,f2564,f2568,f2569,f2572,f2608,f2607,f2617,f2618,f2621,f2672,f2684,f2696,f2706,f2718,f2734,f2753,f2754,f2845,f2876,f2877,f2935,f2938,f2940,f2941,f3442,f3443,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f3884,f4202,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4519,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5689,f6240,f6241,f6247,f6256,f6273,f6286,f6932,f7303,f7383,f7384,f7549,f7550,f7551,f7553,f7558,f7561,f7565,f7575,f7576,f7577,f7578,f7579,f7580,f7581,f7582,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8008,f8009,f8010,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9600,f9602,f9603,f9604,f9605,f9606,f9607,f9608,f9609,f9610,f9611,f9612,f9613,f9614,f9615,f9621,f9622,f8244,f8245,f8246,f8248,f8253,f8256,f8260,f8270,f8271,f8272,f8273,f8274,f8275,f8276,f8277,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f9497,f10010,f9686,f9689,f9692,f10034,f10036,f10056,f10074,f10082,f10094,f10098,f10102,f10106,f10110,f10114,f10118,f10122,f10126,f10130,f10132,f10134,f10136,f10140])).
fof(f10137,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f530,f529,f528,f527,f531,f1048,f538,f539,f548,f547,f552,f551,f587,f586,f593,f591,f596,f594,f601,f599,f604,f603,f602,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f655,f654,f653,f658,f657,f656,f661,f660,f659,f664,f663,f662,f667,f666,f665,f670,f669,f668,f674,f673,f672,f671,f677,f676,f675,f680,f679,f678,f684,f683,f682,f681,f688,f687,f686,f685,f692,f691,f690,f689,f697,f696,f695,f694,f693,f702,f701,f700,f699,f698,f705,f704,f703,f717,f716,f715,f714,f713,f712,f711,f710,f709,f708,f707,f706,f727,f726,f725,f724,f723,f722,f721,f720,f719,f718,f737,f736,f735,f734,f733,f732,f731,f730,f729,f728,f741,f740,f739,f738,f745,f744,f743,f742,f750,f749,f748,f747,f746,f755,f754,f753,f752,f751,f760,f759,f758,f757,f756,f768,f767,f766,f765,f764,f763,f762,f761,f778,f777,f776,f775,f774,f773,f772,f771,f770,f769,f780,f779,f792,f791,f790,f789,f788,f787,f786,f785,f784,f783,f782,f781,f802,f801,f800,f799,f798,f797,f796,f795,f794,f793,f812,f811,f810,f809,f808,f807,f806,f805,f804,f803,f816,f815,f814,f813,f820,f819,f818,f817,f825,f824,f823,f822,f821,f830,f829,f828,f827,f826,f835,f834,f833,f832,f831,f843,f842,f841,f840,f839,f838,f837,f836,f846,f845,f844,f858,f857,f856,f855,f854,f853,f852,f851,f850,f849,f848,f847,f868,f867,f866,f865,f864,f863,f862,f861,f860,f859,f878,f877,f876,f875,f874,f873,f872,f871,f870,f869,f882,f881,f880,f879,f886,f885,f884,f883,f891,f890,f889,f888,f887,f896,f895,f894,f893,f892,f901,f900,f899,f898,f897,f909,f908,f907,f906,f905,f904,f903,f902,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1019,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2330,f2331,f2339,f2359,f2432,f2433,f2436,f2442,f2443,f2474,f2475,f2526,f2525,f2529,f2530,f2533,f2565,f2564,f2568,f2569,f2572,f2608,f2607,f2617,f2618,f2621,f2672,f2684,f2696,f2706,f2718,f2734,f2753,f2754,f2845,f2876,f2877,f2935,f2938,f2940,f2941,f3442,f3443,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f3884,f4202,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4519,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5689,f6240,f6241,f6247,f6256,f6273,f6286,f6932,f7303,f7383,f7384,f7549,f7550,f7551,f7553,f7558,f7561,f7565,f7575,f7576,f7577,f7578,f7579,f7580,f7581,f7582,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8008,f8009,f8010,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9600,f9602,f9603,f9604,f9605,f9606,f9607,f9608,f9609,f9610,f9611,f9612,f9613,f9614,f9615,f9621,f9622,f8244,f8245,f8246,f8248,f8253,f8256,f8260,f8270,f8271,f8272,f8273,f8274,f8275,f8276,f8277,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f9497,f10010,f9686,f9689,f9692,f10034,f10036,f10056,f10074,f10082,f10094,f10098,f10102,f10106,f10110,f10114,f10118,f10122,f10126,f10130,f10132,f10134,f10136])).
fof(f10135,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f530,f529,f528,f527,f531,f1048,f538,f539,f548,f547,f552,f551,f587,f586,f593,f591,f596,f594,f601,f599,f604,f603,f602,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f655,f654,f653,f658,f657,f656,f661,f660,f659,f664,f663,f662,f667,f666,f665,f670,f669,f668,f674,f673,f672,f671,f677,f676,f675,f680,f679,f678,f684,f683,f682,f681,f688,f687,f686,f685,f692,f691,f690,f689,f697,f696,f695,f694,f693,f702,f701,f700,f699,f698,f705,f704,f703,f717,f716,f715,f714,f713,f712,f711,f710,f709,f708,f707,f706,f727,f726,f725,f724,f723,f722,f721,f720,f719,f718,f737,f736,f735,f734,f733,f732,f731,f730,f729,f728,f741,f740,f739,f738,f745,f744,f743,f742,f750,f749,f748,f747,f746,f755,f754,f753,f752,f751,f760,f759,f758,f757,f756,f768,f767,f766,f765,f764,f763,f762,f761,f778,f777,f776,f775,f774,f773,f772,f771,f770,f769,f780,f779,f792,f791,f790,f789,f788,f787,f786,f785,f784,f783,f782,f781,f802,f801,f800,f799,f798,f797,f796,f795,f794,f793,f812,f811,f810,f809,f808,f807,f806,f805,f804,f803,f816,f815,f814,f813,f820,f819,f818,f817,f825,f824,f823,f822,f821,f830,f829,f828,f827,f826,f835,f834,f833,f832,f831,f843,f842,f841,f840,f839,f838,f837,f836,f846,f845,f844,f858,f857,f856,f855,f854,f853,f852,f851,f850,f849,f848,f847,f868,f867,f866,f865,f864,f863,f862,f861,f860,f859,f878,f877,f876,f875,f874,f873,f872,f871,f870,f869,f882,f881,f880,f879,f886,f885,f884,f883,f891,f890,f889,f888,f887,f896,f895,f894,f893,f892,f901,f900,f899,f898,f897,f909,f908,f907,f906,f905,f904,f903,f902,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1019,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2330,f2331,f2339,f2359,f2432,f2433,f2436,f2442,f2443,f2474,f2475,f2526,f2525,f2529,f2530,f2533,f2565,f2564,f2568,f2569,f2572,f2608,f2607,f2617,f2618,f2621,f2672,f2684,f2696,f2706,f2718,f2734,f2753,f2754,f2845,f2876,f2877,f2935,f2938,f2940,f2941,f3442,f3443,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f3884,f4202,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4519,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5689,f6240,f6241,f6247,f6256,f6273,f6286,f6932,f7303,f7383,f7384,f7549,f7550,f7551,f7553,f7558,f7561,f7565,f7575,f7576,f7577,f7578,f7579,f7580,f7581,f7582,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8008,f8009,f8010,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9600,f9602,f9603,f9604,f9605,f9606,f9607,f9608,f9609,f9610,f9611,f9612,f9613,f9614,f9615,f9621,f9622,f8244,f8245,f8246,f8248,f8253,f8256,f8260,f8270,f8271,f8272,f8273,f8274,f8275,f8276,f8277,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f9497,f10010,f9686,f9689,f9692,f10034,f10036,f10056,f10074,f10082,f10094,f10098,f10102,f10106,f10110,f10114,f10118,f10122,f10126,f10130,f10132,f10134])).
fof(f10133,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f530,f529,f528,f527,f531,f1048,f538,f539,f548,f547,f552,f551,f587,f586,f593,f591,f596,f594,f601,f599,f604,f603,f602,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f655,f654,f653,f658,f657,f656,f661,f660,f659,f664,f663,f662,f667,f666,f665,f670,f669,f668,f674,f673,f672,f671,f677,f676,f675,f680,f679,f678,f684,f683,f682,f681,f688,f687,f686,f685,f692,f691,f690,f689,f697,f696,f695,f694,f693,f702,f701,f700,f699,f698,f705,f704,f703,f717,f716,f715,f714,f713,f712,f711,f710,f709,f708,f707,f706,f727,f726,f725,f724,f723,f722,f721,f720,f719,f718,f737,f736,f735,f734,f733,f732,f731,f730,f729,f728,f741,f740,f739,f738,f745,f744,f743,f742,f750,f749,f748,f747,f746,f755,f754,f753,f752,f751,f760,f759,f758,f757,f756,f768,f767,f766,f765,f764,f763,f762,f761,f778,f777,f776,f775,f774,f773,f772,f771,f770,f769,f780,f779,f792,f791,f790,f789,f788,f787,f786,f785,f784,f783,f782,f781,f802,f801,f800,f799,f798,f797,f796,f795,f794,f793,f812,f811,f810,f809,f808,f807,f806,f805,f804,f803,f816,f815,f814,f813,f820,f819,f818,f817,f825,f824,f823,f822,f821,f830,f829,f828,f827,f826,f835,f834,f833,f832,f831,f843,f842,f841,f840,f839,f838,f837,f836,f846,f845,f844,f858,f857,f856,f855,f854,f853,f852,f851,f850,f849,f848,f847,f868,f867,f866,f865,f864,f863,f862,f861,f860,f859,f878,f877,f876,f875,f874,f873,f872,f871,f870,f869,f882,f881,f880,f879,f886,f885,f884,f883,f891,f890,f889,f888,f887,f896,f895,f894,f893,f892,f901,f900,f899,f898,f897,f909,f908,f907,f906,f905,f904,f903,f902,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1019,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2330,f2331,f2339,f2359,f2432,f2433,f2436,f2442,f2443,f2474,f2475,f2526,f2525,f2529,f2530,f2533,f2565,f2564,f2568,f2569,f2572,f2608,f2607,f2617,f2618,f2621,f2672,f2684,f2696,f2706,f2718,f2734,f2753,f2754,f2845,f2876,f2877,f2935,f2938,f2940,f2941,f3442,f3443,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f3884,f4202,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4519,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5689,f6240,f6241,f6247,f6256,f6273,f6286,f6932,f7303,f7383,f7384,f7549,f7550,f7551,f7553,f7558,f7561,f7565,f7575,f7576,f7577,f7578,f7579,f7580,f7581,f7582,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8008,f8009,f8010,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9600,f9602,f9603,f9604,f9605,f9606,f9607,f9608,f9609,f9610,f9611,f9612,f9613,f9614,f9615,f9621,f9622,f8244,f8245,f8246,f8248,f8253,f8256,f8260,f8270,f8271,f8272,f8273,f8274,f8275,f8276,f8277,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f9497,f10010,f9686,f9689,f9692,f10034,f10036,f10056,f10074,f10082,f10094,f10098,f10102,f10106,f10110,f10114,f10118,f10122,f10126,f10130,f10132])).
fof(f10131,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f530,f529,f528,f527,f531,f1048,f538,f539,f548,f547,f552,f551,f587,f586,f593,f591,f596,f594,f601,f599,f604,f603,f602,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f655,f654,f653,f658,f657,f656,f661,f660,f659,f664,f663,f662,f667,f666,f665,f670,f669,f668,f674,f673,f672,f671,f677,f676,f675,f680,f679,f678,f684,f683,f682,f681,f688,f687,f686,f685,f692,f691,f690,f689,f697,f696,f695,f694,f693,f702,f701,f700,f699,f698,f705,f704,f703,f717,f716,f715,f714,f713,f712,f711,f710,f709,f708,f707,f706,f727,f726,f725,f724,f723,f722,f721,f720,f719,f718,f737,f736,f735,f734,f733,f732,f731,f730,f729,f728,f741,f740,f739,f738,f745,f744,f743,f742,f750,f749,f748,f747,f746,f755,f754,f753,f752,f751,f760,f759,f758,f757,f756,f768,f767,f766,f765,f764,f763,f762,f761,f778,f777,f776,f775,f774,f773,f772,f771,f770,f769,f780,f779,f792,f791,f790,f789,f788,f787,f786,f785,f784,f783,f782,f781,f802,f801,f800,f799,f798,f797,f796,f795,f794,f793,f812,f811,f810,f809,f808,f807,f806,f805,f804,f803,f816,f815,f814,f813,f820,f819,f818,f817,f825,f824,f823,f822,f821,f830,f829,f828,f827,f826,f835,f834,f833,f832,f831,f843,f842,f841,f840,f839,f838,f837,f836,f846,f845,f844,f858,f857,f856,f855,f854,f853,f852,f851,f850,f849,f848,f847,f868,f867,f866,f865,f864,f863,f862,f861,f860,f859,f878,f877,f876,f875,f874,f873,f872,f871,f870,f869,f882,f881,f880,f879,f886,f885,f884,f883,f891,f890,f889,f888,f887,f896,f895,f894,f893,f892,f901,f900,f899,f898,f897,f909,f908,f907,f906,f905,f904,f903,f902,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1019,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2330,f2331,f2339,f2359,f2432,f2433,f2436,f2442,f2443,f2474,f2475,f2526,f2525,f2529,f2530,f2533,f2565,f2564,f2568,f2569,f2572,f2608,f2607,f2617,f2618,f2621,f2672,f2684,f2696,f2706,f2718,f2734,f2753,f2754,f2845,f2876,f2877,f2935,f2938,f2940,f2941,f3442,f3443,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f3884,f4202,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4519,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5689,f6240,f6241,f6247,f6256,f6273,f6286,f6932,f7303,f7383,f7384,f7549,f7550,f7551,f7553,f7558,f7561,f7565,f7575,f7576,f7577,f7578,f7579,f7580,f7581,f7582,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8008,f8009,f8010,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9600,f9602,f9603,f9604,f9605,f9606,f9607,f9608,f9609,f9610,f9611,f9612,f9613,f9614,f9615,f9621,f9622,f8244,f8245,f8246,f8248,f8253,f8256,f8260,f8270,f8271,f8272,f8273,f8274,f8275,f8276,f8277,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f9497,f10010,f9686,f9689,f9692,f10034,f10036,f10056,f10074,f10082,f10094,f10098,f10102,f10106,f10110,f10114,f10118,f10122,f10126,f10130])).
fof(f10127,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f530,f529,f528,f527,f531,f1048,f538,f539,f548,f547,f552,f551,f587,f586,f593,f591,f596,f594,f601,f599,f604,f603,f602,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f655,f654,f653,f658,f657,f656,f661,f660,f659,f664,f663,f662,f667,f666,f665,f670,f669,f668,f674,f673,f672,f671,f677,f676,f675,f680,f679,f678,f684,f683,f682,f681,f688,f687,f686,f685,f692,f691,f690,f689,f697,f696,f695,f694,f693,f702,f701,f700,f699,f698,f705,f704,f703,f717,f716,f715,f714,f713,f712,f711,f710,f709,f708,f707,f706,f727,f726,f725,f724,f723,f722,f721,f720,f719,f718,f737,f736,f735,f734,f733,f732,f731,f730,f729,f728,f741,f740,f739,f738,f745,f744,f743,f742,f750,f749,f748,f747,f746,f755,f754,f753,f752,f751,f760,f759,f758,f757,f756,f768,f767,f766,f765,f764,f763,f762,f761,f778,f777,f776,f775,f774,f773,f772,f771,f770,f769,f780,f779,f792,f791,f790,f789,f788,f787,f786,f785,f784,f783,f782,f781,f802,f801,f800,f799,f798,f797,f796,f795,f794,f793,f812,f811,f810,f809,f808,f807,f806,f805,f804,f803,f816,f815,f814,f813,f820,f819,f818,f817,f825,f824,f823,f822,f821,f830,f829,f828,f827,f826,f835,f834,f833,f832,f831,f843,f842,f841,f840,f839,f838,f837,f836,f846,f845,f844,f858,f857,f856,f855,f854,f853,f852,f851,f850,f849,f848,f847,f868,f867,f866,f865,f864,f863,f862,f861,f860,f859,f878,f877,f876,f875,f874,f873,f872,f871,f870,f869,f882,f881,f880,f879,f886,f885,f884,f883,f891,f890,f889,f888,f887,f896,f895,f894,f893,f892,f901,f900,f899,f898,f897,f909,f908,f907,f906,f905,f904,f903,f902,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1019,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2330,f2331,f2339,f2359,f2432,f2433,f2436,f2442,f2443,f2474,f2475,f2526,f2525,f2529,f2530,f2533,f2565,f2564,f2568,f2569,f2572,f2608,f2607,f2617,f2618,f2621,f2672,f2684,f2696,f2706,f2718,f2734,f2753,f2754,f2845,f2876,f2877,f2935,f2938,f2940,f2941,f3442,f3443,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f3884,f4202,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4519,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5689,f6240,f6241,f6247,f6256,f6273,f6286,f6932,f7303,f7383,f7384,f7549,f7550,f7551,f7553,f7558,f7561,f7565,f7575,f7576,f7577,f7578,f7579,f7580,f7581,f7582,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8008,f8009,f8010,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9600,f9602,f9603,f9604,f9605,f9606,f9607,f9608,f9609,f9610,f9611,f9612,f9613,f9614,f9615,f9621,f9622,f8244,f8245,f8246,f8248,f8253,f8256,f8260,f8270,f8271,f8272,f8273,f8274,f8275,f8276,f8277,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f9497,f10010,f9686,f9689,f9692,f10034,f10036,f10056,f10074,f10082,f10094,f10098,f10102,f10106,f10110,f10114,f10118,f10122,f10126])).
fof(f10123,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f530,f529,f528,f527,f531,f1048,f538,f539,f548,f547,f552,f551,f587,f586,f593,f591,f596,f594,f601,f599,f604,f603,f602,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f655,f654,f653,f658,f657,f656,f661,f660,f659,f664,f663,f662,f667,f666,f665,f670,f669,f668,f674,f673,f672,f671,f677,f676,f675,f680,f679,f678,f684,f683,f682,f681,f688,f687,f686,f685,f692,f691,f690,f689,f697,f696,f695,f694,f693,f702,f701,f700,f699,f698,f705,f704,f703,f717,f716,f715,f714,f713,f712,f711,f710,f709,f708,f707,f706,f727,f726,f725,f724,f723,f722,f721,f720,f719,f718,f737,f736,f735,f734,f733,f732,f731,f730,f729,f728,f741,f740,f739,f738,f745,f744,f743,f742,f750,f749,f748,f747,f746,f755,f754,f753,f752,f751,f760,f759,f758,f757,f756,f768,f767,f766,f765,f764,f763,f762,f761,f778,f777,f776,f775,f774,f773,f772,f771,f770,f769,f780,f779,f792,f791,f790,f789,f788,f787,f786,f785,f784,f783,f782,f781,f802,f801,f800,f799,f798,f797,f796,f795,f794,f793,f812,f811,f810,f809,f808,f807,f806,f805,f804,f803,f816,f815,f814,f813,f820,f819,f818,f817,f825,f824,f823,f822,f821,f830,f829,f828,f827,f826,f835,f834,f833,f832,f831,f843,f842,f841,f840,f839,f838,f837,f836,f846,f845,f844,f858,f857,f856,f855,f854,f853,f852,f851,f850,f849,f848,f847,f868,f867,f866,f865,f864,f863,f862,f861,f860,f859,f878,f877,f876,f875,f874,f873,f872,f871,f870,f869,f882,f881,f880,f879,f886,f885,f884,f883,f891,f890,f889,f888,f887,f896,f895,f894,f893,f892,f901,f900,f899,f898,f897,f909,f908,f907,f906,f905,f904,f903,f902,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1019,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2330,f2331,f2339,f2359,f2432,f2433,f2436,f2442,f2443,f2474,f2475,f2526,f2525,f2529,f2530,f2533,f2565,f2564,f2568,f2569,f2572,f2608,f2607,f2617,f2618,f2621,f2672,f2684,f2696,f2706,f2718,f2734,f2753,f2754,f2845,f2876,f2877,f2935,f2938,f2940,f2941,f3442,f3443,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f3884,f4202,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4519,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5689,f6240,f6241,f6247,f6256,f6273,f6286,f6932,f7303,f7383,f7384,f7549,f7550,f7551,f7553,f7558,f7561,f7565,f7575,f7576,f7577,f7578,f7579,f7580,f7581,f7582,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8008,f8009,f8010,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9600,f9602,f9603,f9604,f9605,f9606,f9607,f9608,f9609,f9610,f9611,f9612,f9613,f9614,f9615,f9621,f9622,f8244,f8245,f8246,f8248,f8253,f8256,f8260,f8270,f8271,f8272,f8273,f8274,f8275,f8276,f8277,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f9497,f10010,f9686,f9689,f9692,f10034,f10036,f10056,f10074,f10082,f10094,f10098,f10102,f10106,f10110,f10114,f10118,f10122])).
fof(f10119,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f530,f529,f528,f527,f531,f1048,f538,f539,f548,f547,f552,f551,f587,f586,f593,f591,f596,f594,f601,f599,f604,f603,f602,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f655,f654,f653,f658,f657,f656,f661,f660,f659,f664,f663,f662,f667,f666,f665,f670,f669,f668,f674,f673,f672,f671,f677,f676,f675,f680,f679,f678,f684,f683,f682,f681,f688,f687,f686,f685,f692,f691,f690,f689,f697,f696,f695,f694,f693,f702,f701,f700,f699,f698,f705,f704,f703,f717,f716,f715,f714,f713,f712,f711,f710,f709,f708,f707,f706,f727,f726,f725,f724,f723,f722,f721,f720,f719,f718,f737,f736,f735,f734,f733,f732,f731,f730,f729,f728,f741,f740,f739,f738,f745,f744,f743,f742,f750,f749,f748,f747,f746,f755,f754,f753,f752,f751,f760,f759,f758,f757,f756,f768,f767,f766,f765,f764,f763,f762,f761,f778,f777,f776,f775,f774,f773,f772,f771,f770,f769,f780,f779,f792,f791,f790,f789,f788,f787,f786,f785,f784,f783,f782,f781,f802,f801,f800,f799,f798,f797,f796,f795,f794,f793,f812,f811,f810,f809,f808,f807,f806,f805,f804,f803,f816,f815,f814,f813,f820,f819,f818,f817,f825,f824,f823,f822,f821,f830,f829,f828,f827,f826,f835,f834,f833,f832,f831,f843,f842,f841,f840,f839,f838,f837,f836,f846,f845,f844,f858,f857,f856,f855,f854,f853,f852,f851,f850,f849,f848,f847,f868,f867,f866,f865,f864,f863,f862,f861,f860,f859,f878,f877,f876,f875,f874,f873,f872,f871,f870,f869,f882,f881,f880,f879,f886,f885,f884,f883,f891,f890,f889,f888,f887,f896,f895,f894,f893,f892,f901,f900,f899,f898,f897,f909,f908,f907,f906,f905,f904,f903,f902,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1019,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2330,f2331,f2339,f2359,f2432,f2433,f2436,f2442,f2443,f2474,f2475,f2526,f2525,f2529,f2530,f2533,f2565,f2564,f2568,f2569,f2572,f2608,f2607,f2617,f2618,f2621,f2672,f2684,f2696,f2706,f2718,f2734,f2753,f2754,f2845,f2876,f2877,f2935,f2938,f2940,f2941,f3442,f3443,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f3884,f4202,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4519,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5689,f6240,f6241,f6247,f6256,f6273,f6286,f6932,f7303,f7383,f7384,f7549,f7550,f7551,f7553,f7558,f7561,f7565,f7575,f7576,f7577,f7578,f7579,f7580,f7581,f7582,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8008,f8009,f8010,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9600,f9602,f9603,f9604,f9605,f9606,f9607,f9608,f9609,f9610,f9611,f9612,f9613,f9614,f9615,f9621,f9622,f8244,f8245,f8246,f8248,f8253,f8256,f8260,f8270,f8271,f8272,f8273,f8274,f8275,f8276,f8277,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f9497,f10010,f9686,f9689,f9692,f10034,f10036,f10056,f10074,f10082,f10094,f10098,f10102,f10106,f10110,f10114,f10118])).
fof(f10115,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f530,f529,f528,f527,f531,f1048,f538,f539,f548,f547,f552,f551,f587,f586,f593,f591,f596,f594,f601,f599,f604,f603,f602,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f655,f654,f653,f658,f657,f656,f661,f660,f659,f664,f663,f662,f667,f666,f665,f670,f669,f668,f674,f673,f672,f671,f677,f676,f675,f680,f679,f678,f684,f683,f682,f681,f688,f687,f686,f685,f692,f691,f690,f689,f697,f696,f695,f694,f693,f702,f701,f700,f699,f698,f705,f704,f703,f717,f716,f715,f714,f713,f712,f711,f710,f709,f708,f707,f706,f727,f726,f725,f724,f723,f722,f721,f720,f719,f718,f737,f736,f735,f734,f733,f732,f731,f730,f729,f728,f741,f740,f739,f738,f745,f744,f743,f742,f750,f749,f748,f747,f746,f755,f754,f753,f752,f751,f760,f759,f758,f757,f756,f768,f767,f766,f765,f764,f763,f762,f761,f778,f777,f776,f775,f774,f773,f772,f771,f770,f769,f780,f779,f792,f791,f790,f789,f788,f787,f786,f785,f784,f783,f782,f781,f802,f801,f800,f799,f798,f797,f796,f795,f794,f793,f812,f811,f810,f809,f808,f807,f806,f805,f804,f803,f816,f815,f814,f813,f820,f819,f818,f817,f825,f824,f823,f822,f821,f830,f829,f828,f827,f826,f835,f834,f833,f832,f831,f843,f842,f841,f840,f839,f838,f837,f836,f846,f845,f844,f858,f857,f856,f855,f854,f853,f852,f851,f850,f849,f848,f847,f868,f867,f866,f865,f864,f863,f862,f861,f860,f859,f878,f877,f876,f875,f874,f873,f872,f871,f870,f869,f882,f881,f880,f879,f886,f885,f884,f883,f891,f890,f889,f888,f887,f896,f895,f894,f893,f892,f901,f900,f899,f898,f897,f909,f908,f907,f906,f905,f904,f903,f902,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1019,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2330,f2331,f2339,f2359,f2432,f2433,f2436,f2442,f2443,f2474,f2475,f2526,f2525,f2529,f2530,f2533,f2565,f2564,f2568,f2569,f2572,f2608,f2607,f2617,f2618,f2621,f2672,f2684,f2696,f2706,f2718,f2734,f2753,f2754,f2845,f2876,f2877,f2935,f2938,f2940,f2941,f3442,f3443,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f3884,f4202,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4519,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5689,f6240,f6241,f6247,f6256,f6273,f6286,f6932,f7303,f7383,f7384,f7549,f7550,f7551,f7553,f7558,f7561,f7565,f7575,f7576,f7577,f7578,f7579,f7580,f7581,f7582,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8008,f8009,f8010,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9600,f9602,f9603,f9604,f9605,f9606,f9607,f9608,f9609,f9610,f9611,f9612,f9613,f9614,f9615,f9621,f9622,f8244,f8245,f8246,f8248,f8253,f8256,f8260,f8270,f8271,f8272,f8273,f8274,f8275,f8276,f8277,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f9497,f10010,f9686,f9689,f9692,f10034,f10036,f10056,f10074,f10082,f10094,f10098,f10102,f10106,f10110,f10114])).
fof(f10111,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f530,f529,f528,f527,f531,f1048,f538,f539,f548,f547,f552,f551,f587,f586,f593,f591,f596,f594,f601,f599,f604,f603,f602,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f655,f654,f653,f658,f657,f656,f661,f660,f659,f664,f663,f662,f667,f666,f665,f670,f669,f668,f674,f673,f672,f671,f677,f676,f675,f680,f679,f678,f684,f683,f682,f681,f688,f687,f686,f685,f692,f691,f690,f689,f697,f696,f695,f694,f693,f702,f701,f700,f699,f698,f705,f704,f703,f717,f716,f715,f714,f713,f712,f711,f710,f709,f708,f707,f706,f727,f726,f725,f724,f723,f722,f721,f720,f719,f718,f737,f736,f735,f734,f733,f732,f731,f730,f729,f728,f741,f740,f739,f738,f745,f744,f743,f742,f750,f749,f748,f747,f746,f755,f754,f753,f752,f751,f760,f759,f758,f757,f756,f768,f767,f766,f765,f764,f763,f762,f761,f778,f777,f776,f775,f774,f773,f772,f771,f770,f769,f780,f779,f792,f791,f790,f789,f788,f787,f786,f785,f784,f783,f782,f781,f802,f801,f800,f799,f798,f797,f796,f795,f794,f793,f812,f811,f810,f809,f808,f807,f806,f805,f804,f803,f816,f815,f814,f813,f820,f819,f818,f817,f825,f824,f823,f822,f821,f830,f829,f828,f827,f826,f835,f834,f833,f832,f831,f843,f842,f841,f840,f839,f838,f837,f836,f846,f845,f844,f858,f857,f856,f855,f854,f853,f852,f851,f850,f849,f848,f847,f868,f867,f866,f865,f864,f863,f862,f861,f860,f859,f878,f877,f876,f875,f874,f873,f872,f871,f870,f869,f882,f881,f880,f879,f886,f885,f884,f883,f891,f890,f889,f888,f887,f896,f895,f894,f893,f892,f901,f900,f899,f898,f897,f909,f908,f907,f906,f905,f904,f903,f902,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1019,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2330,f2331,f2339,f2359,f2432,f2433,f2436,f2442,f2443,f2474,f2475,f2526,f2525,f2529,f2530,f2533,f2565,f2564,f2568,f2569,f2572,f2608,f2607,f2617,f2618,f2621,f2672,f2684,f2696,f2706,f2718,f2734,f2753,f2754,f2845,f2876,f2877,f2935,f2938,f2940,f2941,f3442,f3443,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f3884,f4202,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4519,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5689,f6240,f6241,f6247,f6256,f6273,f6286,f6932,f7303,f7383,f7384,f7549,f7550,f7551,f7553,f7558,f7561,f7565,f7575,f7576,f7577,f7578,f7579,f7580,f7581,f7582,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8008,f8009,f8010,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9600,f9602,f9603,f9604,f9605,f9606,f9607,f9608,f9609,f9610,f9611,f9612,f9613,f9614,f9615,f9621,f9622,f8244,f8245,f8246,f8248,f8253,f8256,f8260,f8270,f8271,f8272,f8273,f8274,f8275,f8276,f8277,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f9497,f10010,f9686,f9689,f9692,f10034,f10036,f10056,f10074,f10082,f10094,f10098,f10102,f10106,f10110])).
fof(f10107,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f530,f529,f528,f527,f531,f1048,f538,f539,f548,f547,f552,f551,f587,f586,f593,f591,f596,f594,f601,f599,f604,f603,f602,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f655,f654,f653,f658,f657,f656,f661,f660,f659,f664,f663,f662,f667,f666,f665,f670,f669,f668,f674,f673,f672,f671,f677,f676,f675,f680,f679,f678,f684,f683,f682,f681,f688,f687,f686,f685,f692,f691,f690,f689,f697,f696,f695,f694,f693,f702,f701,f700,f699,f698,f705,f704,f703,f717,f716,f715,f714,f713,f712,f711,f710,f709,f708,f707,f706,f727,f726,f725,f724,f723,f722,f721,f720,f719,f718,f737,f736,f735,f734,f733,f732,f731,f730,f729,f728,f741,f740,f739,f738,f745,f744,f743,f742,f750,f749,f748,f747,f746,f755,f754,f753,f752,f751,f760,f759,f758,f757,f756,f768,f767,f766,f765,f764,f763,f762,f761,f778,f777,f776,f775,f774,f773,f772,f771,f770,f769,f780,f779,f792,f791,f790,f789,f788,f787,f786,f785,f784,f783,f782,f781,f802,f801,f800,f799,f798,f797,f796,f795,f794,f793,f812,f811,f810,f809,f808,f807,f806,f805,f804,f803,f816,f815,f814,f813,f820,f819,f818,f817,f825,f824,f823,f822,f821,f830,f829,f828,f827,f826,f835,f834,f833,f832,f831,f843,f842,f841,f840,f839,f838,f837,f836,f846,f845,f844,f858,f857,f856,f855,f854,f853,f852,f851,f850,f849,f848,f847,f868,f867,f866,f865,f864,f863,f862,f861,f860,f859,f878,f877,f876,f875,f874,f873,f872,f871,f870,f869,f882,f881,f880,f879,f886,f885,f884,f883,f891,f890,f889,f888,f887,f896,f895,f894,f893,f892,f901,f900,f899,f898,f897,f909,f908,f907,f906,f905,f904,f903,f902,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1019,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2330,f2331,f2339,f2359,f2432,f2433,f2436,f2442,f2443,f2474,f2475,f2526,f2525,f2529,f2530,f2533,f2565,f2564,f2568,f2569,f2572,f2608,f2607,f2617,f2618,f2621,f2672,f2684,f2696,f2706,f2718,f2734,f2753,f2754,f2845,f2876,f2877,f2935,f2938,f2940,f2941,f3442,f3443,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f3884,f4202,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4519,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5689,f6240,f6241,f6247,f6256,f6273,f6286,f6932,f7303,f7383,f7384,f7549,f7550,f7551,f7553,f7558,f7561,f7565,f7575,f7576,f7577,f7578,f7579,f7580,f7581,f7582,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8008,f8009,f8010,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9600,f9602,f9603,f9604,f9605,f9606,f9607,f9608,f9609,f9610,f9611,f9612,f9613,f9614,f9615,f9621,f9622,f8244,f8245,f8246,f8248,f8253,f8256,f8260,f8270,f8271,f8272,f8273,f8274,f8275,f8276,f8277,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f9497,f10010,f9686,f9689,f9692,f10034,f10036,f10056,f10074,f10082,f10094,f10098,f10102,f10106])).
fof(f10103,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f530,f529,f528,f527,f531,f1048,f538,f539,f548,f547,f552,f551,f587,f586,f593,f591,f596,f594,f601,f599,f604,f603,f602,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f655,f654,f653,f658,f657,f656,f661,f660,f659,f664,f663,f662,f667,f666,f665,f670,f669,f668,f674,f673,f672,f671,f677,f676,f675,f680,f679,f678,f684,f683,f682,f681,f688,f687,f686,f685,f692,f691,f690,f689,f697,f696,f695,f694,f693,f702,f701,f700,f699,f698,f705,f704,f703,f717,f716,f715,f714,f713,f712,f711,f710,f709,f708,f707,f706,f727,f726,f725,f724,f723,f722,f721,f720,f719,f718,f737,f736,f735,f734,f733,f732,f731,f730,f729,f728,f741,f740,f739,f738,f745,f744,f743,f742,f750,f749,f748,f747,f746,f755,f754,f753,f752,f751,f760,f759,f758,f757,f756,f768,f767,f766,f765,f764,f763,f762,f761,f778,f777,f776,f775,f774,f773,f772,f771,f770,f769,f780,f779,f792,f791,f790,f789,f788,f787,f786,f785,f784,f783,f782,f781,f802,f801,f800,f799,f798,f797,f796,f795,f794,f793,f812,f811,f810,f809,f808,f807,f806,f805,f804,f803,f816,f815,f814,f813,f820,f819,f818,f817,f825,f824,f823,f822,f821,f830,f829,f828,f827,f826,f835,f834,f833,f832,f831,f843,f842,f841,f840,f839,f838,f837,f836,f846,f845,f844,f858,f857,f856,f855,f854,f853,f852,f851,f850,f849,f848,f847,f868,f867,f866,f865,f864,f863,f862,f861,f860,f859,f878,f877,f876,f875,f874,f873,f872,f871,f870,f869,f882,f881,f880,f879,f886,f885,f884,f883,f891,f890,f889,f888,f887,f896,f895,f894,f893,f892,f901,f900,f899,f898,f897,f909,f908,f907,f906,f905,f904,f903,f902,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1019,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2330,f2331,f2339,f2359,f2432,f2433,f2436,f2442,f2443,f2474,f2475,f2526,f2525,f2529,f2530,f2533,f2565,f2564,f2568,f2569,f2572,f2608,f2607,f2617,f2618,f2621,f2672,f2684,f2696,f2706,f2718,f2734,f2753,f2754,f2845,f2876,f2877,f2935,f2938,f2940,f2941,f3442,f3443,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f3884,f4202,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4519,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5689,f6240,f6241,f6247,f6256,f6273,f6286,f6932,f7303,f7383,f7384,f7549,f7550,f7551,f7553,f7558,f7561,f7565,f7575,f7576,f7577,f7578,f7579,f7580,f7581,f7582,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8008,f8009,f8010,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9600,f9602,f9603,f9604,f9605,f9606,f9607,f9608,f9609,f9610,f9611,f9612,f9613,f9614,f9615,f9621,f9622,f8244,f8245,f8246,f8248,f8253,f8256,f8260,f8270,f8271,f8272,f8273,f8274,f8275,f8276,f8277,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f9497,f10010,f9686,f9689,f9692,f10034,f10036,f10056,f10074,f10082,f10094,f10098,f10102])).
fof(f10099,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f530,f529,f528,f527,f531,f1048,f538,f539,f548,f547,f552,f551,f587,f586,f593,f591,f596,f594,f601,f599,f604,f603,f602,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f655,f654,f653,f658,f657,f656,f661,f660,f659,f664,f663,f662,f667,f666,f665,f670,f669,f668,f674,f673,f672,f671,f677,f676,f675,f680,f679,f678,f684,f683,f682,f681,f688,f687,f686,f685,f692,f691,f690,f689,f697,f696,f695,f694,f693,f702,f701,f700,f699,f698,f705,f704,f703,f717,f716,f715,f714,f713,f712,f711,f710,f709,f708,f707,f706,f727,f726,f725,f724,f723,f722,f721,f720,f719,f718,f737,f736,f735,f734,f733,f732,f731,f730,f729,f728,f741,f740,f739,f738,f745,f744,f743,f742,f750,f749,f748,f747,f746,f755,f754,f753,f752,f751,f760,f759,f758,f757,f756,f768,f767,f766,f765,f764,f763,f762,f761,f778,f777,f776,f775,f774,f773,f772,f771,f770,f769,f780,f779,f792,f791,f790,f789,f788,f787,f786,f785,f784,f783,f782,f781,f802,f801,f800,f799,f798,f797,f796,f795,f794,f793,f812,f811,f810,f809,f808,f807,f806,f805,f804,f803,f816,f815,f814,f813,f820,f819,f818,f817,f825,f824,f823,f822,f821,f830,f829,f828,f827,f826,f835,f834,f833,f832,f831,f843,f842,f841,f840,f839,f838,f837,f836,f846,f845,f844,f858,f857,f856,f855,f854,f853,f852,f851,f850,f849,f848,f847,f868,f867,f866,f865,f864,f863,f862,f861,f860,f859,f878,f877,f876,f875,f874,f873,f872,f871,f870,f869,f882,f881,f880,f879,f886,f885,f884,f883,f891,f890,f889,f888,f887,f896,f895,f894,f893,f892,f901,f900,f899,f898,f897,f909,f908,f907,f906,f905,f904,f903,f902,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1019,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2330,f2331,f2339,f2359,f2432,f2433,f2436,f2442,f2443,f2474,f2475,f2526,f2525,f2529,f2530,f2533,f2565,f2564,f2568,f2569,f2572,f2608,f2607,f2617,f2618,f2621,f2672,f2684,f2696,f2706,f2718,f2734,f2753,f2754,f2845,f2876,f2877,f2935,f2938,f2940,f2941,f3442,f3443,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f3884,f4202,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4519,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5689,f6240,f6241,f6247,f6256,f6273,f6286,f6932,f7303,f7383,f7384,f7549,f7550,f7551,f7553,f7558,f7561,f7565,f7575,f7576,f7577,f7578,f7579,f7580,f7581,f7582,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8008,f8009,f8010,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9600,f9602,f9603,f9604,f9605,f9606,f9607,f9608,f9609,f9610,f9611,f9612,f9613,f9614,f9615,f9621,f9622,f8244,f8245,f8246,f8248,f8253,f8256,f8260,f8270,f8271,f8272,f8273,f8274,f8275,f8276,f8277,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f9497,f10010,f9686,f9689,f9692,f10034,f10036,f10056,f10074,f10082,f10094,f10098])).
fof(f10095,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f530,f529,f528,f527,f531,f1048,f538,f539,f548,f547,f552,f551,f587,f586,f593,f591,f596,f594,f601,f599,f604,f603,f602,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f655,f654,f653,f658,f657,f656,f661,f660,f659,f664,f663,f662,f667,f666,f665,f670,f669,f668,f674,f673,f672,f671,f677,f676,f675,f680,f679,f678,f684,f683,f682,f681,f688,f687,f686,f685,f692,f691,f690,f689,f697,f696,f695,f694,f693,f702,f701,f700,f699,f698,f705,f704,f703,f717,f716,f715,f714,f713,f712,f711,f710,f709,f708,f707,f706,f727,f726,f725,f724,f723,f722,f721,f720,f719,f718,f737,f736,f735,f734,f733,f732,f731,f730,f729,f728,f741,f740,f739,f738,f745,f744,f743,f742,f750,f749,f748,f747,f746,f755,f754,f753,f752,f751,f760,f759,f758,f757,f756,f768,f767,f766,f765,f764,f763,f762,f761,f778,f777,f776,f775,f774,f773,f772,f771,f770,f769,f780,f779,f792,f791,f790,f789,f788,f787,f786,f785,f784,f783,f782,f781,f802,f801,f800,f799,f798,f797,f796,f795,f794,f793,f812,f811,f810,f809,f808,f807,f806,f805,f804,f803,f816,f815,f814,f813,f820,f819,f818,f817,f825,f824,f823,f822,f821,f830,f829,f828,f827,f826,f835,f834,f833,f832,f831,f843,f842,f841,f840,f839,f838,f837,f836,f846,f845,f844,f858,f857,f856,f855,f854,f853,f852,f851,f850,f849,f848,f847,f868,f867,f866,f865,f864,f863,f862,f861,f860,f859,f878,f877,f876,f875,f874,f873,f872,f871,f870,f869,f882,f881,f880,f879,f886,f885,f884,f883,f891,f890,f889,f888,f887,f896,f895,f894,f893,f892,f901,f900,f899,f898,f897,f909,f908,f907,f906,f905,f904,f903,f902,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1019,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2330,f2331,f2339,f2359,f2432,f2433,f2436,f2442,f2443,f2474,f2475,f2526,f2525,f2529,f2530,f2533,f2565,f2564,f2568,f2569,f2572,f2608,f2607,f2617,f2618,f2621,f2672,f2684,f2696,f2706,f2718,f2734,f2753,f2754,f2845,f2876,f2877,f2935,f2938,f2940,f2941,f3442,f3443,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f3884,f4202,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4519,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5689,f6240,f6241,f6247,f6256,f6273,f6286,f6932,f7303,f7383,f7384,f7549,f7550,f7551,f7553,f7558,f7561,f7565,f7575,f7576,f7577,f7578,f7579,f7580,f7581,f7582,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8008,f8009,f8010,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9600,f9602,f9603,f9604,f9605,f9606,f9607,f9608,f9609,f9610,f9611,f9612,f9613,f9614,f9615,f9621,f9622,f8244,f8245,f8246,f8248,f8253,f8256,f8260,f8270,f8271,f8272,f8273,f8274,f8275,f8276,f8277,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f9497,f10010,f9686,f9689,f9692,f10034,f10036,f10056,f10074,f10082,f10094])).
fof(f10083,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f530,f529,f528,f527,f531,f1048,f538,f539,f548,f547,f552,f551,f587,f586,f593,f591,f596,f594,f601,f599,f604,f603,f602,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f655,f654,f653,f658,f657,f656,f661,f660,f659,f664,f663,f662,f667,f666,f665,f670,f669,f668,f674,f673,f672,f671,f677,f676,f675,f680,f679,f678,f684,f683,f682,f681,f688,f687,f686,f685,f692,f691,f690,f689,f697,f696,f695,f694,f693,f702,f701,f700,f699,f698,f705,f704,f703,f717,f716,f715,f714,f713,f712,f711,f710,f709,f708,f707,f706,f727,f726,f725,f724,f723,f722,f721,f720,f719,f718,f737,f736,f735,f734,f733,f732,f731,f730,f729,f728,f741,f740,f739,f738,f745,f744,f743,f742,f750,f749,f748,f747,f746,f755,f754,f753,f752,f751,f760,f759,f758,f757,f756,f768,f767,f766,f765,f764,f763,f762,f761,f778,f777,f776,f775,f774,f773,f772,f771,f770,f769,f780,f779,f792,f791,f790,f789,f788,f787,f786,f785,f784,f783,f782,f781,f802,f801,f800,f799,f798,f797,f796,f795,f794,f793,f812,f811,f810,f809,f808,f807,f806,f805,f804,f803,f816,f815,f814,f813,f820,f819,f818,f817,f825,f824,f823,f822,f821,f830,f829,f828,f827,f826,f835,f834,f833,f832,f831,f843,f842,f841,f840,f839,f838,f837,f836,f846,f845,f844,f858,f857,f856,f855,f854,f853,f852,f851,f850,f849,f848,f847,f868,f867,f866,f865,f864,f863,f862,f861,f860,f859,f878,f877,f876,f875,f874,f873,f872,f871,f870,f869,f882,f881,f880,f879,f886,f885,f884,f883,f891,f890,f889,f888,f887,f896,f895,f894,f893,f892,f901,f900,f899,f898,f897,f909,f908,f907,f906,f905,f904,f903,f902,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1019,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2330,f2331,f2339,f2359,f2432,f2433,f2436,f2442,f2443,f2474,f2475,f2526,f2525,f2529,f2530,f2533,f2565,f2564,f2568,f2569,f2572,f2608,f2607,f2617,f2618,f2621,f2672,f2684,f2696,f2706,f2718,f2734,f2753,f2754,f2845,f2876,f2877,f2935,f2938,f2940,f2941,f3442,f3443,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f3884,f4202,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4519,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5689,f6240,f6241,f6247,f6256,f6273,f6286,f6932,f7303,f7383,f7384,f7549,f7550,f7551,f7553,f7558,f7561,f7565,f7575,f7576,f7577,f7578,f7579,f7580,f7581,f7582,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8008,f8009,f8010,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9600,f9602,f9603,f9604,f9605,f9606,f9607,f9608,f9609,f9610,f9611,f9612,f9613,f9614,f9615,f9621,f9622,f8244,f8245,f8246,f8248,f8253,f8256,f8260,f8270,f8271,f8272,f8273,f8274,f8275,f8276,f8277,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f9497,f10010,f9686,f9689,f9692,f10034,f10036,f10056,f10074,f10082])).
fof(f10075,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f530,f529,f528,f527,f531,f1048,f538,f539,f548,f547,f552,f551,f587,f586,f593,f591,f596,f594,f601,f599,f604,f603,f602,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f655,f654,f653,f658,f657,f656,f661,f660,f659,f664,f663,f662,f667,f666,f665,f670,f669,f668,f674,f673,f672,f671,f677,f676,f675,f680,f679,f678,f684,f683,f682,f681,f688,f687,f686,f685,f692,f691,f690,f689,f697,f696,f695,f694,f693,f702,f701,f700,f699,f698,f705,f704,f703,f717,f716,f715,f714,f713,f712,f711,f710,f709,f708,f707,f706,f727,f726,f725,f724,f723,f722,f721,f720,f719,f718,f737,f736,f735,f734,f733,f732,f731,f730,f729,f728,f741,f740,f739,f738,f745,f744,f743,f742,f750,f749,f748,f747,f746,f755,f754,f753,f752,f751,f760,f759,f758,f757,f756,f768,f767,f766,f765,f764,f763,f762,f761,f778,f777,f776,f775,f774,f773,f772,f771,f770,f769,f780,f779,f792,f791,f790,f789,f788,f787,f786,f785,f784,f783,f782,f781,f802,f801,f800,f799,f798,f797,f796,f795,f794,f793,f812,f811,f810,f809,f808,f807,f806,f805,f804,f803,f816,f815,f814,f813,f820,f819,f818,f817,f825,f824,f823,f822,f821,f830,f829,f828,f827,f826,f835,f834,f833,f832,f831,f843,f842,f841,f840,f839,f838,f837,f836,f846,f845,f844,f858,f857,f856,f855,f854,f853,f852,f851,f850,f849,f848,f847,f868,f867,f866,f865,f864,f863,f862,f861,f860,f859,f878,f877,f876,f875,f874,f873,f872,f871,f870,f869,f882,f881,f880,f879,f886,f885,f884,f883,f891,f890,f889,f888,f887,f896,f895,f894,f893,f892,f901,f900,f899,f898,f897,f909,f908,f907,f906,f905,f904,f903,f902,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1019,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2330,f2331,f2339,f2359,f2432,f2433,f2436,f2442,f2443,f2474,f2475,f2526,f2525,f2529,f2530,f2533,f2565,f2564,f2568,f2569,f2572,f2608,f2607,f2617,f2618,f2621,f2672,f2684,f2696,f2706,f2718,f2734,f2753,f2754,f2845,f2876,f2877,f2935,f2938,f2940,f2941,f3442,f3443,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f3884,f4202,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4519,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5689,f6240,f6241,f6247,f6256,f6273,f6286,f6932,f7303,f7383,f7384,f7549,f7550,f7551,f7553,f7558,f7561,f7565,f7575,f7576,f7577,f7578,f7579,f7580,f7581,f7582,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8008,f8009,f8010,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9600,f9602,f9603,f9604,f9605,f9606,f9607,f9608,f9609,f9610,f9611,f9612,f9613,f9614,f9615,f9621,f9622,f8244,f8245,f8246,f8248,f8253,f8256,f8260,f8270,f8271,f8272,f8273,f8274,f8275,f8276,f8277,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f9497,f10010,f9686,f9689,f9692,f10034,f10036,f10056,f10074])).
fof(f10061,plain,(
  $false | $spl12),
  inference(subsumption_resolution,[],[f9750,f531])).
fof(f9750,plain,(
  ~p(s(bool,'T_0')) | $spl12),
  inference(backward_demodulation,[],[f9497,f2938])).
fof(f10060,plain,(
  $false | $spl12),
  inference(subsumption_resolution,[],[f9749,f531])).
fof(f9749,plain,(
  ~p(s(bool,'T_0')) | $spl12),
  inference(backward_demodulation,[],[f9497,f2941])).
fof(f10059,plain,(
  $false | ($spl4 | $spl12)),
  inference(global_subsumption,[],[f10058,f530,f529,f528,f527,f531,f1048,f538,f539,f548,f547,f552,f551,f587,f586,f593,f591,f596,f594,f601,f599,f604,f603,f602,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f655,f654,f653,f658,f657,f656,f661,f660,f659,f664,f663,f662,f667,f666,f665,f670,f669,f668,f674,f673,f672,f671,f677,f676,f675,f680,f679,f678,f684,f683,f682,f681,f688,f687,f686,f685,f692,f691,f690,f689,f697,f696,f695,f694,f693,f702,f701,f700,f699,f698,f705,f704,f703,f717,f716,f715,f714,f713,f712,f711,f710,f709,f708,f707,f706,f727,f726,f725,f724,f723,f722,f721,f720,f719,f718,f737,f736,f735,f734,f733,f732,f731,f730,f729,f728,f741,f740,f739,f738,f745,f744,f743,f742,f750,f749,f748,f747,f746,f755,f754,f753,f752,f751,f760,f759,f758,f757,f756,f768,f767,f766,f765,f764,f763,f762,f761,f778,f777,f776,f775,f774,f773,f772,f771,f770,f769,f780,f779,f792,f791,f790,f789,f788,f787,f786,f785,f784,f783,f782,f781,f802,f801,f800,f799,f798,f797,f796,f795,f794,f793,f812,f811,f810,f809,f808,f807,f806,f805,f804,f803,f816,f815,f814,f813,f820,f819,f818,f817,f825,f824,f823,f822,f821,f830,f829,f828,f827,f826,f835,f834,f833,f832,f831,f843,f842,f841,f840,f839,f838,f837,f836,f846,f845,f844,f858,f857,f856,f855,f854,f853,f852,f851,f850,f849,f848,f847,f868,f867,f866,f865,f864,f863,f862,f861,f860,f859,f878,f877,f876,f875,f874,f873,f872,f871,f870,f869,f882,f881,f880,f879,f886,f885,f884,f883,f891,f890,f889,f888,f887,f896,f895,f894,f893,f892,f901,f900,f899,f898,f897,f909,f908,f907,f906,f905,f904,f903,f902,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1019,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2330,f2331,f2339,f2359,f2432,f2433,f2436,f2442,f2443,f2474,f2475,f2526,f2525,f2529,f2530,f2533,f2565,f2564,f2568,f2569,f2572,f2608,f2607,f2617,f2618,f2621,f2672,f2684,f2696,f2706,f2718,f2734,f2753,f2754,f2845,f2876,f2877,f2935,f2938,f2940,f2941,f3442,f3443,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f3884,f4202,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4519,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5689,f6240,f6241,f6247,f6256,f6273,f6286,f6932,f7303,f7383,f7384,f7549,f7550,f7551,f7553,f7558,f7561,f7565,f7575,f7576,f7577,f7578,f7579,f7580,f7581,f7582,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8008,f8009,f8010,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9600,f9602,f9603,f9604,f9605,f9606,f9607,f9608,f9609,f9610,f9611,f9612,f9613,f9614,f9615,f9621,f9622,f8244,f8245,f8246,f8248,f8253,f8256,f8260,f8270,f8271,f8272,f8273,f8274,f8275,f8276,f8277,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f9497,f10010,f9686,f9689,f9692,f10034,f10036,f10056])).
fof(f10058,plain,(
  ( ! [X0,X1] : (sP23(X0,'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X1)) ) | ($spl4 | $spl12)),
  inference(subsumption_resolution,[],[f9748,f531])).
fof(f9748,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | sP23(X0,'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56)),X1)) ) | ($spl4 | $spl12)),
  inference(backward_demodulation,[],[f9497,f2406])).
fof(f10057,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f530,f529,f528,f527,f531,f1048,f538,f539,f548,f547,f552,f551,f587,f586,f593,f591,f596,f594,f601,f599,f604,f603,f602,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f655,f654,f653,f658,f657,f656,f661,f660,f659,f664,f663,f662,f667,f666,f665,f670,f669,f668,f674,f673,f672,f671,f677,f676,f675,f680,f679,f678,f684,f683,f682,f681,f688,f687,f686,f685,f692,f691,f690,f689,f697,f696,f695,f694,f693,f702,f701,f700,f699,f698,f705,f704,f703,f717,f716,f715,f714,f713,f712,f711,f710,f709,f708,f707,f706,f727,f726,f725,f724,f723,f722,f721,f720,f719,f718,f737,f736,f735,f734,f733,f732,f731,f730,f729,f728,f741,f740,f739,f738,f745,f744,f743,f742,f750,f749,f748,f747,f746,f755,f754,f753,f752,f751,f760,f759,f758,f757,f756,f768,f767,f766,f765,f764,f763,f762,f761,f778,f777,f776,f775,f774,f773,f772,f771,f770,f769,f780,f779,f792,f791,f790,f789,f788,f787,f786,f785,f784,f783,f782,f781,f802,f801,f800,f799,f798,f797,f796,f795,f794,f793,f812,f811,f810,f809,f808,f807,f806,f805,f804,f803,f816,f815,f814,f813,f820,f819,f818,f817,f825,f824,f823,f822,f821,f830,f829,f828,f827,f826,f835,f834,f833,f832,f831,f843,f842,f841,f840,f839,f838,f837,f836,f846,f845,f844,f858,f857,f856,f855,f854,f853,f852,f851,f850,f849,f848,f847,f868,f867,f866,f865,f864,f863,f862,f861,f860,f859,f878,f877,f876,f875,f874,f873,f872,f871,f870,f869,f882,f881,f880,f879,f886,f885,f884,f883,f891,f890,f889,f888,f887,f896,f895,f894,f893,f892,f901,f900,f899,f898,f897,f909,f908,f907,f906,f905,f904,f903,f902,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1019,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2330,f2331,f2339,f2359,f2432,f2433,f2436,f2442,f2443,f2474,f2475,f2526,f2525,f2529,f2530,f2533,f2565,f2564,f2568,f2569,f2572,f2608,f2607,f2617,f2618,f2621,f2672,f2684,f2696,f2706,f2718,f2734,f2753,f2754,f2845,f2876,f2877,f2935,f2938,f2940,f2941,f3442,f3443,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f3884,f4202,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4519,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5689,f6240,f6241,f6247,f6256,f6273,f6286,f6932,f7303,f7383,f7384,f7549,f7550,f7551,f7553,f7558,f7561,f7565,f7575,f7576,f7577,f7578,f7579,f7580,f7581,f7582,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8008,f8009,f8010,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9600,f9602,f9603,f9604,f9605,f9606,f9607,f9608,f9609,f9610,f9611,f9612,f9613,f9614,f9615,f9621,f9622,f8244,f8245,f8246,f8248,f8253,f8256,f8260,f8270,f8271,f8272,f8273,f8274,f8275,f8276,f8277,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f9497,f10010,f9686,f9689,f9692,f10034,f10036,f10056])).
fof(f10037,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f530,f529,f528,f527,f531,f1048,f538,f539,f548,f547,f552,f551,f587,f586,f593,f591,f596,f594,f601,f599,f604,f603,f602,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f655,f654,f653,f658,f657,f656,f661,f660,f659,f664,f663,f662,f667,f666,f665,f670,f669,f668,f674,f673,f672,f671,f677,f676,f675,f680,f679,f678,f684,f683,f682,f681,f688,f687,f686,f685,f692,f691,f690,f689,f697,f696,f695,f694,f693,f702,f701,f700,f699,f698,f705,f704,f703,f717,f716,f715,f714,f713,f712,f711,f710,f709,f708,f707,f706,f727,f726,f725,f724,f723,f722,f721,f720,f719,f718,f737,f736,f735,f734,f733,f732,f731,f730,f729,f728,f741,f740,f739,f738,f745,f744,f743,f742,f750,f749,f748,f747,f746,f755,f754,f753,f752,f751,f760,f759,f758,f757,f756,f768,f767,f766,f765,f764,f763,f762,f761,f778,f777,f776,f775,f774,f773,f772,f771,f770,f769,f780,f779,f792,f791,f790,f789,f788,f787,f786,f785,f784,f783,f782,f781,f802,f801,f800,f799,f798,f797,f796,f795,f794,f793,f812,f811,f810,f809,f808,f807,f806,f805,f804,f803,f816,f815,f814,f813,f820,f819,f818,f817,f825,f824,f823,f822,f821,f830,f829,f828,f827,f826,f835,f834,f833,f832,f831,f843,f842,f841,f840,f839,f838,f837,f836,f846,f845,f844,f858,f857,f856,f855,f854,f853,f852,f851,f850,f849,f848,f847,f868,f867,f866,f865,f864,f863,f862,f861,f860,f859,f878,f877,f876,f875,f874,f873,f872,f871,f870,f869,f882,f881,f880,f879,f886,f885,f884,f883,f891,f890,f889,f888,f887,f896,f895,f894,f893,f892,f901,f900,f899,f898,f897,f909,f908,f907,f906,f905,f904,f903,f902,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1019,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2330,f2331,f2339,f2359,f2432,f2433,f2436,f2442,f2443,f2474,f2475,f2526,f2525,f2529,f2530,f2533,f2565,f2564,f2568,f2569,f2572,f2608,f2607,f2617,f2618,f2621,f2672,f2684,f2696,f2706,f2718,f2734,f2753,f2754,f2845,f2876,f2877,f2935,f2938,f2940,f2941,f3442,f3443,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f3884,f4202,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4519,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5689,f6240,f6241,f6247,f6256,f6273,f6286,f6932,f7303,f7383,f7384,f7549,f7550,f7551,f7553,f7558,f7561,f7565,f7575,f7576,f7577,f7578,f7579,f7580,f7581,f7582,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8008,f8009,f8010,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9600,f9602,f9603,f9604,f9605,f9606,f9607,f9608,f9609,f9610,f9611,f9612,f9613,f9614,f9615,f9621,f9622,f8244,f8245,f8246,f8248,f8253,f8256,f8260,f8270,f8271,f8272,f8273,f8274,f8275,f8276,f8277,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f9497,f10010,f9686,f9689,f9692,f10034,f10036])).
fof(f10035,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f530,f529,f528,f527,f531,f1048,f538,f539,f548,f547,f552,f551,f587,f586,f593,f591,f596,f594,f601,f599,f604,f603,f602,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f655,f654,f653,f658,f657,f656,f661,f660,f659,f664,f663,f662,f667,f666,f665,f670,f669,f668,f674,f673,f672,f671,f677,f676,f675,f680,f679,f678,f684,f683,f682,f681,f688,f687,f686,f685,f692,f691,f690,f689,f697,f696,f695,f694,f693,f702,f701,f700,f699,f698,f705,f704,f703,f717,f716,f715,f714,f713,f712,f711,f710,f709,f708,f707,f706,f727,f726,f725,f724,f723,f722,f721,f720,f719,f718,f737,f736,f735,f734,f733,f732,f731,f730,f729,f728,f741,f740,f739,f738,f745,f744,f743,f742,f750,f749,f748,f747,f746,f755,f754,f753,f752,f751,f760,f759,f758,f757,f756,f768,f767,f766,f765,f764,f763,f762,f761,f778,f777,f776,f775,f774,f773,f772,f771,f770,f769,f780,f779,f792,f791,f790,f789,f788,f787,f786,f785,f784,f783,f782,f781,f802,f801,f800,f799,f798,f797,f796,f795,f794,f793,f812,f811,f810,f809,f808,f807,f806,f805,f804,f803,f816,f815,f814,f813,f820,f819,f818,f817,f825,f824,f823,f822,f821,f830,f829,f828,f827,f826,f835,f834,f833,f832,f831,f843,f842,f841,f840,f839,f838,f837,f836,f846,f845,f844,f858,f857,f856,f855,f854,f853,f852,f851,f850,f849,f848,f847,f868,f867,f866,f865,f864,f863,f862,f861,f860,f859,f878,f877,f876,f875,f874,f873,f872,f871,f870,f869,f882,f881,f880,f879,f886,f885,f884,f883,f891,f890,f889,f888,f887,f896,f895,f894,f893,f892,f901,f900,f899,f898,f897,f909,f908,f907,f906,f905,f904,f903,f902,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1019,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2330,f2331,f2339,f2359,f2432,f2433,f2436,f2442,f2443,f2474,f2475,f2526,f2525,f2529,f2530,f2533,f2565,f2564,f2568,f2569,f2572,f2608,f2607,f2617,f2618,f2621,f2672,f2684,f2696,f2706,f2718,f2734,f2753,f2754,f2845,f2876,f2877,f2935,f2938,f2940,f2941,f3442,f3443,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f3884,f4202,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4519,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5689,f6240,f6241,f6247,f6256,f6273,f6286,f6932,f7303,f7383,f7384,f7549,f7550,f7551,f7553,f7558,f7561,f7565,f7575,f7576,f7577,f7578,f7579,f7580,f7581,f7582,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8008,f8009,f8010,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9600,f9602,f9603,f9604,f9605,f9606,f9607,f9608,f9609,f9610,f9611,f9612,f9613,f9614,f9615,f9621,f9622,f8244,f8245,f8246,f8248,f8253,f8256,f8260,f8270,f8271,f8272,f8273,f8274,f8275,f8276,f8277,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f9497,f10010,f9686,f9689,f9692,f10034])).
fof(f10027,plain,(
  $false | ($spl1 | $spl12)),
  inference(global_subsumption,[],[f9717,f530,f529,f528,f527,f531,f1048,f538,f539,f548,f547,f552,f551,f587,f586,f593,f591,f596,f594,f601,f599,f604,f603,f602,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f655,f654,f653,f658,f657,f656,f661,f660,f659,f664,f663,f662,f667,f666,f665,f670,f669,f668,f674,f673,f672,f671,f677,f676,f675,f680,f679,f678,f684,f683,f682,f681,f688,f687,f686,f685,f692,f691,f690,f689,f697,f696,f695,f694,f693,f702,f701,f700,f699,f698,f705,f704,f703,f717,f716,f715,f714,f713,f712,f711,f710,f709,f708,f707,f706,f727,f726,f725,f724,f723,f722,f721,f720,f719,f718,f737,f736,f735,f734,f733,f732,f731,f730,f729,f728,f741,f740,f739,f738,f745,f744,f743,f742,f750,f749,f748,f747,f746,f755,f754,f753,f752,f751,f760,f759,f758,f757,f756,f768,f767,f766,f765,f764,f763,f762,f761,f778,f777,f776,f775,f774,f773,f772,f771,f770,f769,f780,f779,f792,f791,f790,f789,f788,f787,f786,f785,f784,f783,f782,f781,f802,f801,f800,f799,f798,f797,f796,f795,f794,f793,f812,f811,f810,f809,f808,f807,f806,f805,f804,f803,f816,f815,f814,f813,f820,f819,f818,f817,f825,f824,f823,f822,f821,f830,f829,f828,f827,f826,f835,f834,f833,f832,f831,f843,f842,f841,f840,f839,f838,f837,f836,f846,f845,f844,f858,f857,f856,f855,f854,f853,f852,f851,f850,f849,f848,f847,f868,f867,f866,f865,f864,f863,f862,f861,f860,f859,f878,f877,f876,f875,f874,f873,f872,f871,f870,f869,f882,f881,f880,f879,f886,f885,f884,f883,f891,f890,f889,f888,f887,f896,f895,f894,f893,f892,f901,f900,f899,f898,f897,f909,f908,f907,f906,f905,f904,f903,f902,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1019,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2330,f2331,f2339,f2359,f2432,f2433,f2436,f2442,f2443,f2474,f2475,f2526,f2525,f2529,f2530,f2533,f2565,f2564,f2568,f2569,f2572,f2608,f2607,f2617,f2618,f2621,f2672,f2684,f2696,f2706,f2718,f2734,f2753,f2754,f2845,f2876,f2877,f2935,f2938,f2940,f2941,f3442,f3443,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f3884,f4202,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4519,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5689,f6240,f6241,f6247,f6256,f6273,f6286,f6932,f7303,f7383,f7384,f7549,f7550,f7551,f7553,f7558,f7561,f7565,f7575,f7576,f7577,f7578,f7579,f7580,f7581,f7582,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8008,f8009,f8010,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9600,f9602,f9603,f9604,f9605,f9606,f9607,f9608,f9609,f9610,f9611,f9612,f9613,f9614,f9615,f9621,f9622,f8244,f8245,f8246,f8248,f8253,f8256,f8260,f8270,f8271,f8272,f8273,f8274,f8275,f8276,f8277,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f9497,f10010,f9686,f9689,f9692])).
fof(f9717,plain,(
  ( ! [X216,X215,X213,X214] : (s('type.pair.prod'(X213,bool),'const.pair.,_2'(s(X213,X216),s(bool,'T_0'))) != s('type.pair.prod'(X213,bool),'const.pair.,_2'(s(X213,X214),s(bool,X215))) | s(bool,X215) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) ) | ($spl1 | $spl12)),
  inference(backward_demodulation,[],[f9497,f5567])).
fof(f5567,plain,(
  ( ! [X216,X215,X213,X214] : (s('type.pair.prod'(X213,bool),'const.pair.,_2'(s(X213,X216),s(bool,'F_0'))) != s('type.pair.prod'(X213,bool),'const.pair.,_2'(s(X213,X214),s(bool,X215))) | s(bool,X215) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl1),
  inference(superposition,[],[f651,f1416])).
fof(f10026,plain,(
  $false | ($spl1 | $spl12)),
  inference(global_subsumption,[],[f9716,f530,f529,f528,f527,f531,f1048,f538,f539,f548,f547,f552,f551,f587,f586,f593,f591,f596,f594,f601,f599,f604,f603,f602,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f655,f654,f653,f658,f657,f656,f661,f660,f659,f664,f663,f662,f667,f666,f665,f670,f669,f668,f674,f673,f672,f671,f677,f676,f675,f680,f679,f678,f684,f683,f682,f681,f688,f687,f686,f685,f692,f691,f690,f689,f697,f696,f695,f694,f693,f702,f701,f700,f699,f698,f705,f704,f703,f717,f716,f715,f714,f713,f712,f711,f710,f709,f708,f707,f706,f727,f726,f725,f724,f723,f722,f721,f720,f719,f718,f737,f736,f735,f734,f733,f732,f731,f730,f729,f728,f741,f740,f739,f738,f745,f744,f743,f742,f750,f749,f748,f747,f746,f755,f754,f753,f752,f751,f760,f759,f758,f757,f756,f768,f767,f766,f765,f764,f763,f762,f761,f778,f777,f776,f775,f774,f773,f772,f771,f770,f769,f780,f779,f792,f791,f790,f789,f788,f787,f786,f785,f784,f783,f782,f781,f802,f801,f800,f799,f798,f797,f796,f795,f794,f793,f812,f811,f810,f809,f808,f807,f806,f805,f804,f803,f816,f815,f814,f813,f820,f819,f818,f817,f825,f824,f823,f822,f821,f830,f829,f828,f827,f826,f835,f834,f833,f832,f831,f843,f842,f841,f840,f839,f838,f837,f836,f846,f845,f844,f858,f857,f856,f855,f854,f853,f852,f851,f850,f849,f848,f847,f868,f867,f866,f865,f864,f863,f862,f861,f860,f859,f878,f877,f876,f875,f874,f873,f872,f871,f870,f869,f882,f881,f880,f879,f886,f885,f884,f883,f891,f890,f889,f888,f887,f896,f895,f894,f893,f892,f901,f900,f899,f898,f897,f909,f908,f907,f906,f905,f904,f903,f902,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1019,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2330,f2331,f2339,f2359,f2432,f2433,f2436,f2442,f2443,f2474,f2475,f2526,f2525,f2529,f2530,f2533,f2565,f2564,f2568,f2569,f2572,f2608,f2607,f2617,f2618,f2621,f2672,f2684,f2696,f2706,f2718,f2734,f2753,f2754,f2845,f2876,f2877,f2935,f2938,f2940,f2941,f3442,f3443,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f3884,f4202,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4519,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5689,f6240,f6241,f6247,f6256,f6273,f6286,f6932,f7303,f7383,f7384,f7549,f7550,f7551,f7553,f7558,f7561,f7565,f7575,f7576,f7577,f7578,f7579,f7580,f7581,f7582,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8008,f8009,f8010,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9600,f9602,f9603,f9604,f9605,f9606,f9607,f9608,f9609,f9610,f9611,f9612,f9613,f9614,f9615,f9621,f9622,f8244,f8245,f8246,f8248,f8253,f8256,f8260,f8270,f8271,f8272,f8273,f8274,f8275,f8276,f8277,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f9497,f10010,f9686,f9689,f9692])).
fof(f9716,plain,(
  ( ! [X204,X202,X203,X201] : (s('type.pair.prod'(bool,X201),'const.pair.,_2'(s(bool,'T_0'),s(X201,X204))) != s('type.pair.prod'(bool,X201),'const.pair.,_2'(s(bool,X202),s(X201,X203))) | s(bool,X202) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) ) | ($spl1 | $spl12)),
  inference(backward_demodulation,[],[f9497,f5564])).
fof(f5564,plain,(
  ( ! [X204,X202,X203,X201] : (s('type.pair.prod'(bool,X201),'const.pair.,_2'(s(bool,'F_0'),s(X201,X204))) != s('type.pair.prod'(bool,X201),'const.pair.,_2'(s(bool,X202),s(X201,X203))) | s(bool,X202) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl1),
  inference(superposition,[],[f650,f1416])).
fof(f10025,plain,(
  $false | ($spl1 | $spl12)),
  inference(global_subsumption,[],[f9715,f530,f529,f528,f527,f531,f1048,f538,f539,f548,f547,f552,f551,f587,f586,f593,f591,f596,f594,f601,f599,f604,f603,f602,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f655,f654,f653,f658,f657,f656,f661,f660,f659,f664,f663,f662,f667,f666,f665,f670,f669,f668,f674,f673,f672,f671,f677,f676,f675,f680,f679,f678,f684,f683,f682,f681,f688,f687,f686,f685,f692,f691,f690,f689,f697,f696,f695,f694,f693,f702,f701,f700,f699,f698,f705,f704,f703,f717,f716,f715,f714,f713,f712,f711,f710,f709,f708,f707,f706,f727,f726,f725,f724,f723,f722,f721,f720,f719,f718,f737,f736,f735,f734,f733,f732,f731,f730,f729,f728,f741,f740,f739,f738,f745,f744,f743,f742,f750,f749,f748,f747,f746,f755,f754,f753,f752,f751,f760,f759,f758,f757,f756,f768,f767,f766,f765,f764,f763,f762,f761,f778,f777,f776,f775,f774,f773,f772,f771,f770,f769,f780,f779,f792,f791,f790,f789,f788,f787,f786,f785,f784,f783,f782,f781,f802,f801,f800,f799,f798,f797,f796,f795,f794,f793,f812,f811,f810,f809,f808,f807,f806,f805,f804,f803,f816,f815,f814,f813,f820,f819,f818,f817,f825,f824,f823,f822,f821,f830,f829,f828,f827,f826,f835,f834,f833,f832,f831,f843,f842,f841,f840,f839,f838,f837,f836,f846,f845,f844,f858,f857,f856,f855,f854,f853,f852,f851,f850,f849,f848,f847,f868,f867,f866,f865,f864,f863,f862,f861,f860,f859,f878,f877,f876,f875,f874,f873,f872,f871,f870,f869,f882,f881,f880,f879,f886,f885,f884,f883,f891,f890,f889,f888,f887,f896,f895,f894,f893,f892,f901,f900,f899,f898,f897,f909,f908,f907,f906,f905,f904,f903,f902,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1019,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2330,f2331,f2339,f2359,f2432,f2433,f2436,f2442,f2443,f2474,f2475,f2526,f2525,f2529,f2530,f2533,f2565,f2564,f2568,f2569,f2572,f2608,f2607,f2617,f2618,f2621,f2672,f2684,f2696,f2706,f2718,f2734,f2753,f2754,f2845,f2876,f2877,f2935,f2938,f2940,f2941,f3442,f3443,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f3884,f4202,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4519,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5689,f6240,f6241,f6247,f6256,f6273,f6286,f6932,f7303,f7383,f7384,f7549,f7550,f7551,f7553,f7558,f7561,f7565,f7575,f7576,f7577,f7578,f7579,f7580,f7581,f7582,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8008,f8009,f8010,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9600,f9602,f9603,f9604,f9605,f9606,f9607,f9608,f9609,f9610,f9611,f9612,f9613,f9614,f9615,f9621,f9622,f8244,f8245,f8246,f8248,f8253,f8256,f8260,f8270,f8271,f8272,f8273,f8274,f8275,f8276,f8277,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f9497,f10010,f9686,f9689,f9692])).
fof(f9715,plain,(
  ( ! [X187,X185,X186] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X185))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X186),s('type.list.list'(bool),X187))) | s(bool,X186) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) ) | ($spl1 | $spl12)),
  inference(backward_demodulation,[],[f9497,f5559])).
fof(f5559,plain,(
  ( ! [X187,X185,X186] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X185))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X186),s('type.list.list'(bool),X187))) | s(bool,X186) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) ) | $spl1),
  inference(superposition,[],[f606,f1416])).
fof(f10021,plain,(
  $false | ($spl4 | $spl12)),
  inference(global_subsumption,[],[f9712,f530,f529,f528,f527,f531,f1048,f538,f539,f548,f547,f552,f551,f587,f586,f593,f591,f596,f594,f601,f599,f604,f603,f602,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f655,f654,f653,f658,f657,f656,f661,f660,f659,f664,f663,f662,f667,f666,f665,f670,f669,f668,f674,f673,f672,f671,f677,f676,f675,f680,f679,f678,f684,f683,f682,f681,f688,f687,f686,f685,f692,f691,f690,f689,f697,f696,f695,f694,f693,f702,f701,f700,f699,f698,f705,f704,f703,f717,f716,f715,f714,f713,f712,f711,f710,f709,f708,f707,f706,f727,f726,f725,f724,f723,f722,f721,f720,f719,f718,f737,f736,f735,f734,f733,f732,f731,f730,f729,f728,f741,f740,f739,f738,f745,f744,f743,f742,f750,f749,f748,f747,f746,f755,f754,f753,f752,f751,f760,f759,f758,f757,f756,f768,f767,f766,f765,f764,f763,f762,f761,f778,f777,f776,f775,f774,f773,f772,f771,f770,f769,f780,f779,f792,f791,f790,f789,f788,f787,f786,f785,f784,f783,f782,f781,f802,f801,f800,f799,f798,f797,f796,f795,f794,f793,f812,f811,f810,f809,f808,f807,f806,f805,f804,f803,f816,f815,f814,f813,f820,f819,f818,f817,f825,f824,f823,f822,f821,f830,f829,f828,f827,f826,f835,f834,f833,f832,f831,f843,f842,f841,f840,f839,f838,f837,f836,f846,f845,f844,f858,f857,f856,f855,f854,f853,f852,f851,f850,f849,f848,f847,f868,f867,f866,f865,f864,f863,f862,f861,f860,f859,f878,f877,f876,f875,f874,f873,f872,f871,f870,f869,f882,f881,f880,f879,f886,f885,f884,f883,f891,f890,f889,f888,f887,f896,f895,f894,f893,f892,f901,f900,f899,f898,f897,f909,f908,f907,f906,f905,f904,f903,f902,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1019,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2330,f2331,f2339,f2359,f2432,f2433,f2436,f2442,f2443,f2474,f2475,f2526,f2525,f2529,f2530,f2533,f2565,f2564,f2568,f2569,f2572,f2608,f2607,f2617,f2618,f2621,f2672,f2684,f2696,f2706,f2718,f2734,f2753,f2754,f2845,f2876,f2877,f2935,f2938,f2940,f2941,f3442,f3443,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f3884,f4202,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4519,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5689,f6240,f6241,f6247,f6256,f6273,f6286,f6932,f7303,f7383,f7384,f7549,f7550,f7551,f7553,f7558,f7561,f7565,f7575,f7576,f7577,f7578,f7579,f7580,f7581,f7582,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8008,f8009,f8010,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9600,f9602,f9603,f9604,f9605,f9606,f9607,f9608,f9609,f9610,f9611,f9612,f9613,f9614,f9615,f9621,f9622,f8244,f8245,f8246,f8248,f8253,f8256,f8260,f8270,f8271,f8272,f8273,f8274,f8275,f8276,f8277,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f9497,f10010,f9686,f9689,f9692])).
fof(f9712,plain,(
  ( ! [X237,X235,X238,X236,X234] : (s('type.pair.prod'(X235,bool),'const.pair.,_2'(s(X235,X238),s(bool,'T_0'))) != s('type.pair.prod'(X235,bool),'const.pair.,_2'(s(X235,X236),s(bool,X237))) | s(bool,X237) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X234),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | ($spl4 | $spl12)),
  inference(backward_demodulation,[],[f9497,f4099])).
fof(f10020,plain,(
  $false | ($spl4 | $spl12)),
  inference(global_subsumption,[],[f9711,f530,f529,f528,f527,f531,f1048,f538,f539,f548,f547,f552,f551,f587,f586,f593,f591,f596,f594,f601,f599,f604,f603,f602,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f655,f654,f653,f658,f657,f656,f661,f660,f659,f664,f663,f662,f667,f666,f665,f670,f669,f668,f674,f673,f672,f671,f677,f676,f675,f680,f679,f678,f684,f683,f682,f681,f688,f687,f686,f685,f692,f691,f690,f689,f697,f696,f695,f694,f693,f702,f701,f700,f699,f698,f705,f704,f703,f717,f716,f715,f714,f713,f712,f711,f710,f709,f708,f707,f706,f727,f726,f725,f724,f723,f722,f721,f720,f719,f718,f737,f736,f735,f734,f733,f732,f731,f730,f729,f728,f741,f740,f739,f738,f745,f744,f743,f742,f750,f749,f748,f747,f746,f755,f754,f753,f752,f751,f760,f759,f758,f757,f756,f768,f767,f766,f765,f764,f763,f762,f761,f778,f777,f776,f775,f774,f773,f772,f771,f770,f769,f780,f779,f792,f791,f790,f789,f788,f787,f786,f785,f784,f783,f782,f781,f802,f801,f800,f799,f798,f797,f796,f795,f794,f793,f812,f811,f810,f809,f808,f807,f806,f805,f804,f803,f816,f815,f814,f813,f820,f819,f818,f817,f825,f824,f823,f822,f821,f830,f829,f828,f827,f826,f835,f834,f833,f832,f831,f843,f842,f841,f840,f839,f838,f837,f836,f846,f845,f844,f858,f857,f856,f855,f854,f853,f852,f851,f850,f849,f848,f847,f868,f867,f866,f865,f864,f863,f862,f861,f860,f859,f878,f877,f876,f875,f874,f873,f872,f871,f870,f869,f882,f881,f880,f879,f886,f885,f884,f883,f891,f890,f889,f888,f887,f896,f895,f894,f893,f892,f901,f900,f899,f898,f897,f909,f908,f907,f906,f905,f904,f903,f902,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1019,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2330,f2331,f2339,f2359,f2432,f2433,f2436,f2442,f2443,f2474,f2475,f2526,f2525,f2529,f2530,f2533,f2565,f2564,f2568,f2569,f2572,f2608,f2607,f2617,f2618,f2621,f2672,f2684,f2696,f2706,f2718,f2734,f2753,f2754,f2845,f2876,f2877,f2935,f2938,f2940,f2941,f3442,f3443,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f3884,f4202,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4519,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5689,f6240,f6241,f6247,f6256,f6273,f6286,f6932,f7303,f7383,f7384,f7549,f7550,f7551,f7553,f7558,f7561,f7565,f7575,f7576,f7577,f7578,f7579,f7580,f7581,f7582,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8008,f8009,f8010,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9600,f9602,f9603,f9604,f9605,f9606,f9607,f9608,f9609,f9610,f9611,f9612,f9613,f9614,f9615,f9621,f9622,f8244,f8245,f8246,f8248,f8253,f8256,f8260,f8270,f8271,f8272,f8273,f8274,f8275,f8276,f8277,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f9497,f10010,f9686,f9689,f9692])).
fof(f9711,plain,(
  ( ! [X222,X220,X219,X223,X221] : (s('type.pair.prod'(bool,X220),'const.pair.,_2'(s(bool,'T_0'),s(X220,X223))) != s('type.pair.prod'(bool,X220),'const.pair.,_2'(s(bool,X221),s(X220,X222))) | s(bool,X221) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X219),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | ($spl4 | $spl12)),
  inference(backward_demodulation,[],[f9497,f4096])).
fof(f10019,plain,(
  $false | ($spl4 | $spl12)),
  inference(global_subsumption,[],[f9710,f530,f529,f528,f527,f531,f1048,f538,f539,f548,f547,f552,f551,f587,f586,f593,f591,f596,f594,f601,f599,f604,f603,f602,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f655,f654,f653,f658,f657,f656,f661,f660,f659,f664,f663,f662,f667,f666,f665,f670,f669,f668,f674,f673,f672,f671,f677,f676,f675,f680,f679,f678,f684,f683,f682,f681,f688,f687,f686,f685,f692,f691,f690,f689,f697,f696,f695,f694,f693,f702,f701,f700,f699,f698,f705,f704,f703,f717,f716,f715,f714,f713,f712,f711,f710,f709,f708,f707,f706,f727,f726,f725,f724,f723,f722,f721,f720,f719,f718,f737,f736,f735,f734,f733,f732,f731,f730,f729,f728,f741,f740,f739,f738,f745,f744,f743,f742,f750,f749,f748,f747,f746,f755,f754,f753,f752,f751,f760,f759,f758,f757,f756,f768,f767,f766,f765,f764,f763,f762,f761,f778,f777,f776,f775,f774,f773,f772,f771,f770,f769,f780,f779,f792,f791,f790,f789,f788,f787,f786,f785,f784,f783,f782,f781,f802,f801,f800,f799,f798,f797,f796,f795,f794,f793,f812,f811,f810,f809,f808,f807,f806,f805,f804,f803,f816,f815,f814,f813,f820,f819,f818,f817,f825,f824,f823,f822,f821,f830,f829,f828,f827,f826,f835,f834,f833,f832,f831,f843,f842,f841,f840,f839,f838,f837,f836,f846,f845,f844,f858,f857,f856,f855,f854,f853,f852,f851,f850,f849,f848,f847,f868,f867,f866,f865,f864,f863,f862,f861,f860,f859,f878,f877,f876,f875,f874,f873,f872,f871,f870,f869,f882,f881,f880,f879,f886,f885,f884,f883,f891,f890,f889,f888,f887,f896,f895,f894,f893,f892,f901,f900,f899,f898,f897,f909,f908,f907,f906,f905,f904,f903,f902,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1019,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2330,f2331,f2339,f2359,f2432,f2433,f2436,f2442,f2443,f2474,f2475,f2526,f2525,f2529,f2530,f2533,f2565,f2564,f2568,f2569,f2572,f2608,f2607,f2617,f2618,f2621,f2672,f2684,f2696,f2706,f2718,f2734,f2753,f2754,f2845,f2876,f2877,f2935,f2938,f2940,f2941,f3442,f3443,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f3884,f4202,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4519,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5689,f6240,f6241,f6247,f6256,f6273,f6286,f6932,f7303,f7383,f7384,f7549,f7550,f7551,f7553,f7558,f7561,f7565,f7575,f7576,f7577,f7578,f7579,f7580,f7581,f7582,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8008,f8009,f8010,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9600,f9602,f9603,f9604,f9605,f9606,f9607,f9608,f9609,f9610,f9611,f9612,f9613,f9614,f9615,f9621,f9622,f8244,f8245,f8246,f8248,f8253,f8256,f8260,f8270,f8271,f8272,f8273,f8274,f8275,f8276,f8277,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f9497,f10010,f9686,f9689,f9692])).
fof(f9710,plain,(
  ( ! [X198,X200,X199,X201] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X199))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X200),s('type.list.list'(bool),X201))) | s(bool,X200) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X198),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),sK54)))) ) | ($spl4 | $spl12)),
  inference(backward_demodulation,[],[f9497,f4091])).
fof(f10015,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f530,f529,f528,f527,f531,f1048,f538,f539,f548,f547,f552,f551,f587,f586,f593,f591,f596,f594,f601,f599,f604,f603,f602,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f655,f654,f653,f658,f657,f656,f661,f660,f659,f664,f663,f662,f667,f666,f665,f670,f669,f668,f674,f673,f672,f671,f677,f676,f675,f680,f679,f678,f684,f683,f682,f681,f688,f687,f686,f685,f692,f691,f690,f689,f697,f696,f695,f694,f693,f702,f701,f700,f699,f698,f705,f704,f703,f717,f716,f715,f714,f713,f712,f711,f710,f709,f708,f707,f706,f727,f726,f725,f724,f723,f722,f721,f720,f719,f718,f737,f736,f735,f734,f733,f732,f731,f730,f729,f728,f741,f740,f739,f738,f745,f744,f743,f742,f750,f749,f748,f747,f746,f755,f754,f753,f752,f751,f760,f759,f758,f757,f756,f768,f767,f766,f765,f764,f763,f762,f761,f778,f777,f776,f775,f774,f773,f772,f771,f770,f769,f780,f779,f792,f791,f790,f789,f788,f787,f786,f785,f784,f783,f782,f781,f802,f801,f800,f799,f798,f797,f796,f795,f794,f793,f812,f811,f810,f809,f808,f807,f806,f805,f804,f803,f816,f815,f814,f813,f820,f819,f818,f817,f825,f824,f823,f822,f821,f830,f829,f828,f827,f826,f835,f834,f833,f832,f831,f843,f842,f841,f840,f839,f838,f837,f836,f846,f845,f844,f858,f857,f856,f855,f854,f853,f852,f851,f850,f849,f848,f847,f868,f867,f866,f865,f864,f863,f862,f861,f860,f859,f878,f877,f876,f875,f874,f873,f872,f871,f870,f869,f882,f881,f880,f879,f886,f885,f884,f883,f891,f890,f889,f888,f887,f896,f895,f894,f893,f892,f901,f900,f899,f898,f897,f909,f908,f907,f906,f905,f904,f903,f902,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1019,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2330,f2331,f2339,f2359,f2432,f2433,f2436,f2442,f2443,f2474,f2475,f2526,f2525,f2529,f2530,f2533,f2565,f2564,f2568,f2569,f2572,f2608,f2607,f2617,f2618,f2621,f2672,f2684,f2696,f2706,f2718,f2734,f2753,f2754,f2845,f2876,f2877,f2935,f2938,f2940,f2941,f3442,f3443,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f3884,f4202,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4519,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5689,f6240,f6241,f6247,f6256,f6273,f6286,f6932,f7303,f7383,f7384,f7549,f7550,f7551,f7553,f7558,f7561,f7565,f7575,f7576,f7577,f7578,f7579,f7580,f7581,f7582,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8008,f8009,f8010,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9600,f9602,f9603,f9604,f9605,f9606,f9607,f9608,f9609,f9610,f9611,f9612,f9613,f9614,f9615,f9621,f9622,f8244,f8245,f8246,f8248,f8253,f8256,f8260,f8270,f8271,f8272,f8273,f8274,f8275,f8276,f8277,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f9497,f10010,f9686,f9689,f9692])).
fof(f10014,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f530,f529,f528,f527,f531,f1048,f538,f539,f548,f547,f552,f551,f587,f586,f593,f591,f596,f594,f601,f599,f604,f603,f602,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f655,f654,f653,f658,f657,f656,f661,f660,f659,f664,f663,f662,f667,f666,f665,f670,f669,f668,f674,f673,f672,f671,f677,f676,f675,f680,f679,f678,f684,f683,f682,f681,f688,f687,f686,f685,f692,f691,f690,f689,f697,f696,f695,f694,f693,f702,f701,f700,f699,f698,f705,f704,f703,f717,f716,f715,f714,f713,f712,f711,f710,f709,f708,f707,f706,f727,f726,f725,f724,f723,f722,f721,f720,f719,f718,f737,f736,f735,f734,f733,f732,f731,f730,f729,f728,f741,f740,f739,f738,f745,f744,f743,f742,f750,f749,f748,f747,f746,f755,f754,f753,f752,f751,f760,f759,f758,f757,f756,f768,f767,f766,f765,f764,f763,f762,f761,f778,f777,f776,f775,f774,f773,f772,f771,f770,f769,f780,f779,f792,f791,f790,f789,f788,f787,f786,f785,f784,f783,f782,f781,f802,f801,f800,f799,f798,f797,f796,f795,f794,f793,f812,f811,f810,f809,f808,f807,f806,f805,f804,f803,f816,f815,f814,f813,f820,f819,f818,f817,f825,f824,f823,f822,f821,f830,f829,f828,f827,f826,f835,f834,f833,f832,f831,f843,f842,f841,f840,f839,f838,f837,f836,f846,f845,f844,f858,f857,f856,f855,f854,f853,f852,f851,f850,f849,f848,f847,f868,f867,f866,f865,f864,f863,f862,f861,f860,f859,f878,f877,f876,f875,f874,f873,f872,f871,f870,f869,f882,f881,f880,f879,f886,f885,f884,f883,f891,f890,f889,f888,f887,f896,f895,f894,f893,f892,f901,f900,f899,f898,f897,f909,f908,f907,f906,f905,f904,f903,f902,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1019,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2330,f2331,f2339,f2359,f2432,f2433,f2436,f2442,f2443,f2474,f2475,f2526,f2525,f2529,f2530,f2533,f2565,f2564,f2568,f2569,f2572,f2608,f2607,f2617,f2618,f2621,f2672,f2684,f2696,f2706,f2718,f2734,f2753,f2754,f2845,f2876,f2877,f2935,f2938,f2940,f2941,f3442,f3443,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f3884,f4202,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4519,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5689,f6240,f6241,f6247,f6256,f6273,f6286,f6932,f7303,f7383,f7384,f7549,f7550,f7551,f7553,f7558,f7561,f7565,f7575,f7576,f7577,f7578,f7579,f7580,f7581,f7582,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8008,f8009,f8010,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9600,f9602,f9603,f9604,f9605,f9606,f9607,f9608,f9609,f9610,f9611,f9612,f9613,f9614,f9615,f9621,f9622,f8244,f8245,f8246,f8248,f8253,f8256,f8260,f8270,f8271,f8272,f8273,f8274,f8275,f8276,f8277,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f9497,f10010,f9686,f9689])).
fof(f10013,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f530,f529,f528,f527,f531,f1048,f538,f539,f548,f547,f552,f551,f587,f586,f593,f591,f596,f594,f601,f599,f604,f603,f602,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f655,f654,f653,f658,f657,f656,f661,f660,f659,f664,f663,f662,f667,f666,f665,f670,f669,f668,f674,f673,f672,f671,f677,f676,f675,f680,f679,f678,f684,f683,f682,f681,f688,f687,f686,f685,f692,f691,f690,f689,f697,f696,f695,f694,f693,f702,f701,f700,f699,f698,f705,f704,f703,f717,f716,f715,f714,f713,f712,f711,f710,f709,f708,f707,f706,f727,f726,f725,f724,f723,f722,f721,f720,f719,f718,f737,f736,f735,f734,f733,f732,f731,f730,f729,f728,f741,f740,f739,f738,f745,f744,f743,f742,f750,f749,f748,f747,f746,f755,f754,f753,f752,f751,f760,f759,f758,f757,f756,f768,f767,f766,f765,f764,f763,f762,f761,f778,f777,f776,f775,f774,f773,f772,f771,f770,f769,f780,f779,f792,f791,f790,f789,f788,f787,f786,f785,f784,f783,f782,f781,f802,f801,f800,f799,f798,f797,f796,f795,f794,f793,f812,f811,f810,f809,f808,f807,f806,f805,f804,f803,f816,f815,f814,f813,f820,f819,f818,f817,f825,f824,f823,f822,f821,f830,f829,f828,f827,f826,f835,f834,f833,f832,f831,f843,f842,f841,f840,f839,f838,f837,f836,f846,f845,f844,f858,f857,f856,f855,f854,f853,f852,f851,f850,f849,f848,f847,f868,f867,f866,f865,f864,f863,f862,f861,f860,f859,f878,f877,f876,f875,f874,f873,f872,f871,f870,f869,f882,f881,f880,f879,f886,f885,f884,f883,f891,f890,f889,f888,f887,f896,f895,f894,f893,f892,f901,f900,f899,f898,f897,f909,f908,f907,f906,f905,f904,f903,f902,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1019,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2330,f2331,f2339,f2359,f2432,f2433,f2436,f2442,f2443,f2474,f2475,f2526,f2525,f2529,f2530,f2533,f2565,f2564,f2568,f2569,f2572,f2608,f2607,f2617,f2618,f2621,f2672,f2684,f2696,f2706,f2718,f2734,f2753,f2754,f2845,f2876,f2877,f2935,f2938,f2940,f2941,f3442,f3443,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f3884,f4202,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4519,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5689,f6240,f6241,f6247,f6256,f6273,f6286,f6932,f7303,f7383,f7384,f7549,f7550,f7551,f7553,f7558,f7561,f7565,f7575,f7576,f7577,f7578,f7579,f7580,f7581,f7582,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8008,f8009,f8010,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9600,f9602,f9603,f9604,f9605,f9606,f9607,f9608,f9609,f9610,f9611,f9612,f9613,f9614,f9615,f9621,f9622,f8244,f8245,f8246,f8248,f8253,f8256,f8260,f8270,f8271,f8272,f8273,f8274,f8275,f8276,f8277,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f9497,f10010,f9686])).
fof(f10012,plain,(
  $false | $spl12),
  inference(subsumption_resolution,[],[f9677,f531])).
fof(f9677,plain,(
  ~p(s(bool,'T_0')) | $spl12),
  inference(backward_demodulation,[],[f9497,f1048])).
fof(f10011,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f530,f529,f528,f527,f531,f1048,f538,f539,f548,f547,f552,f551,f587,f586,f593,f591,f596,f594,f601,f599,f604,f603,f602,f605,f608,f607,f606,f612,f609,f618,f617,f620,f619,f622,f621,f625,f624,f1049,f643,f640,f639,f638,f649,f652,f651,f650,f655,f654,f653,f658,f657,f656,f661,f660,f659,f664,f663,f662,f667,f666,f665,f670,f669,f668,f674,f673,f672,f671,f677,f676,f675,f680,f679,f678,f684,f683,f682,f681,f688,f687,f686,f685,f692,f691,f690,f689,f697,f696,f695,f694,f693,f702,f701,f700,f699,f698,f705,f704,f703,f717,f716,f715,f714,f713,f712,f711,f710,f709,f708,f707,f706,f727,f726,f725,f724,f723,f722,f721,f720,f719,f718,f737,f736,f735,f734,f733,f732,f731,f730,f729,f728,f741,f740,f739,f738,f745,f744,f743,f742,f750,f749,f748,f747,f746,f755,f754,f753,f752,f751,f760,f759,f758,f757,f756,f768,f767,f766,f765,f764,f763,f762,f761,f778,f777,f776,f775,f774,f773,f772,f771,f770,f769,f780,f779,f792,f791,f790,f789,f788,f787,f786,f785,f784,f783,f782,f781,f802,f801,f800,f799,f798,f797,f796,f795,f794,f793,f812,f811,f810,f809,f808,f807,f806,f805,f804,f803,f816,f815,f814,f813,f820,f819,f818,f817,f825,f824,f823,f822,f821,f830,f829,f828,f827,f826,f835,f834,f833,f832,f831,f843,f842,f841,f840,f839,f838,f837,f836,f846,f845,f844,f858,f857,f856,f855,f854,f853,f852,f851,f850,f849,f848,f847,f868,f867,f866,f865,f864,f863,f862,f861,f860,f859,f878,f877,f876,f875,f874,f873,f872,f871,f870,f869,f882,f881,f880,f879,f886,f885,f884,f883,f891,f890,f889,f888,f887,f896,f895,f894,f893,f892,f901,f900,f899,f898,f897,f909,f908,f907,f906,f905,f904,f903,f902,f921,f920,f919,f1031,f917,f916,f932,f931,f930,f929,f928,f927,f926,f936,f935,f934,f933,f940,f939,f938,f937,f944,f943,f942,f941,f948,f947,f946,f945,f1030,f952,f951,f950,f949,f959,f958,f957,f956,f965,f962,f961,f960,f972,f971,f970,f1029,f968,f967,f966,f976,f975,f974,f973,f980,f979,f978,f977,f989,f988,f987,f1028,f985,f984,f983,f993,f992,f991,f990,f997,f996,f995,f994,f1018,f1017,f1016,f1019,f1023,f1022,f1021,f1020,f1027,f1026,f1025,f1024,f1050,f1051,f1052,f1053,f1054,f1055,f1056,f1057,f1058,f1059,f1060,f1061,f1062,f1063,f1064,f1065,f1066,f1067,f1068,f1069,f1070,f1086,f1087,f1102,f1123,f1124,f1127,f1129,f1134,f1136,f1139,f1147,f1159,f1162,f1166,f1182,f1185,f1187,f1190,f1191,f1194,f1200,f1204,f1205,f1208,f1210,f1220,f1222,f1226,f1228,f1229,f1233,f1240,f1242,f1246,f1249,f1252,f1254,f1274,f1299,f1308,f1310,f1319,f1401,f1512,f1516,f1535,f1537,f1561,f1574,f1573,f1582,f1581,f1583,f1600,f1598,f1609,f1607,f1634,f1652,f1659,f1671,f1677,f1681,f1689,f1702,f1706,f1718,f1724,f1728,f1750,f1872,f1884,f1894,f1898,f1929,f1970,f1982,f1990,f1994,f2024,f2225,f2221,f2268,f2295,f2330,f2331,f2339,f2359,f2432,f2433,f2436,f2442,f2443,f2474,f2475,f2526,f2525,f2529,f2530,f2533,f2565,f2564,f2568,f2569,f2572,f2608,f2607,f2617,f2618,f2621,f2672,f2684,f2696,f2706,f2718,f2734,f2753,f2754,f2845,f2876,f2877,f2935,f2938,f2940,f2941,f3442,f3443,f3453,f3608,f3622,f3679,f3684,f3759,f3776,f3835,f3840,f3884,f4202,f4261,f4280,f4284,f4334,f4355,f4433,f4468,f4489,f4519,f4555,f4574,f4578,f4631,f4652,f4733,f4761,f4785,f4826,f4845,f4849,f4901,f4922,f4986,f5003,f5007,f5248,f5257,f5321,f5631,f5670,f5689,f6240,f6241,f6247,f6256,f6273,f6286,f6932,f7303,f7383,f7384,f7549,f7550,f7551,f7553,f7558,f7561,f7565,f7575,f7576,f7577,f7578,f7579,f7580,f7581,f7582,f7583,f7834,f7837,f9495,f9499,f9502,f9505,f9508,f9511,f9514,f9517,f9520,f9523,f9526,f9529,f9532,f9535,f9538,f9541,f9544,f7884,f7885,f9547,f9550,f9553,f9556,f9559,f9562,f8008,f8009,f8010,f8024,f9567,f9568,f9569,f9570,f9571,f9572,f9573,f9574,f9575,f9576,f9577,f9578,f9579,f9580,f9581,f9582,f9583,f9584,f9585,f9586,f9587,f9588,f9589,f9590,f9591,f9592,f8081,f8082,f9593,f9594,f9595,f9596,f9597,f9598,f9600,f9602,f9603,f9604,f9605,f9606,f9607,f9608,f9609,f9610,f9611,f9612,f9613,f9614,f9615,f9621,f9622,f8244,f8245,f8246,f8248,f8253,f8256,f8260,f8270,f8271,f8272,f8273,f8274,f8275,f8276,f8277,f8278,f9628,f9630,f9632,f9634,f9636,f9638,f9640,f9642,f9644,f9646,f9648,f9650,f9652,f9654,f9656,f9658,f9660,f9662,f9664,f9666,f9668,f9670,f9672,f9497,f10010])).
fof(f9566,plain,(
  ( ! [X1] : (~sP46(X1,'T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56))) | p(s(bool,X1))) ) | $spl58),
  inference(cnf_transformation,[],[f9566_D])).
fof(f9566_D,plain,(
  ( ! [X1] : (~sP46(X1,'T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56))) | p(s(bool,X1))) ) <=> ~$spl58),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl58])])).
fof(f9674,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | ~sP46(X1,'T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)))) ) | $spl6),
  inference(condensation,[],[f9673])).
fof(f9673,plain,(
  ( ! [X290,X289,X291] : (p(s(bool,X290)) | ~sP46(X290,'T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56))) | s(bool,X289) = s(bool,X291) | s(bool,'T_0') = s(bool,X291)) ) | $spl6),
  inference(subsumption_resolution,[],[f8364,f1535])).
fof(f8364,plain,(
  ( ! [X290,X289,X291] : (~p(s(bool,X289)) | p(s(bool,X290)) | ~sP46(X290,'T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56))) | s(bool,X289) = s(bool,X291) | s(bool,'T_0') = s(bool,X291)) ) | $spl6),
  inference(superposition,[],[f2135,f1319])).
fof(f9563,plain,(
  ( ! [X2,X1] : (~sP50('const.bool.BOUNDED_1'(s(bool,X2)),X1,'T_0') | p(s(bool,X1))) ) | $spl56),
  inference(cnf_transformation,[],[f9563_D])).
fof(f9563_D,plain,(
  ( ! [X2,X1] : (~sP50('const.bool.BOUNDED_1'(s(bool,X2)),X1,'T_0') | p(s(bool,X1))) ) <=> ~$spl56),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl56])])).
fof(f9672,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | ~sP50('const.bool.BOUNDED_1'(s(bool,X2)),X1,'T_0')) )),
  inference(condensation,[],[f9671])).
fof(f9671,plain,(
  ( ! [X288,X285,X287,X286] : (p(s(bool,X286)) | ~sP50('const.bool.BOUNDED_1'(s(bool,X287)),X286,'T_0') | s(bool,X285) = s(bool,X288) | s(bool,'T_0') = s(bool,X288)) )),
  inference(subsumption_resolution,[],[f8363,f1535])).
fof(f8363,plain,(
  ( ! [X288,X285,X287,X286] : (~p(s(bool,X285)) | p(s(bool,X286)) | ~sP50('const.bool.BOUNDED_1'(s(bool,X287)),X286,'T_0') | s(bool,X285) = s(bool,X288) | s(bool,'T_0') = s(bool,X288)) )),
  inference(superposition,[],[f2024,f1319])).
fof(f9560,plain,(
  ( ! [X2,X1] : (~sP49('T_0',X1,'const.bool.BOUNDED_1'(s(bool,X2))) | p(s(bool,X1))) ) | $spl54),
  inference(cnf_transformation,[],[f9560_D])).
fof(f9560_D,plain,(
  ( ! [X2,X1] : (~sP49('T_0',X1,'const.bool.BOUNDED_1'(s(bool,X2))) | p(s(bool,X1))) ) <=> ~$spl54),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl54])])).
fof(f9670,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | ~sP49('T_0',X1,'const.bool.BOUNDED_1'(s(bool,X2)))) )),
  inference(condensation,[],[f9669])).
fof(f9669,plain,(
  ( ! [X282,X281,X283,X284] : (p(s(bool,X282)) | ~sP49('T_0',X282,'const.bool.BOUNDED_1'(s(bool,X283))) | s(bool,X281) = s(bool,X284) | s(bool,'T_0') = s(bool,X284)) )),
  inference(subsumption_resolution,[],[f8362,f1535])).
fof(f8362,plain,(
  ( ! [X282,X281,X283,X284] : (~p(s(bool,X281)) | p(s(bool,X282)) | ~sP49('T_0',X282,'const.bool.BOUNDED_1'(s(bool,X283))) | s(bool,X281) = s(bool,X284) | s(bool,'T_0') = s(bool,X284)) )),
  inference(superposition,[],[f1990,f1319])).
fof(f9557,plain,(
  ( ! [X2,X1] : (~sP46(X1,'T_0','const.bool.BOUNDED_1'(s(bool,X2))) | p(s(bool,X1))) ) | $spl52),
  inference(cnf_transformation,[],[f9557_D])).
fof(f9557_D,plain,(
  ( ! [X2,X1] : (~sP46(X1,'T_0','const.bool.BOUNDED_1'(s(bool,X2))) | p(s(bool,X1))) ) <=> ~$spl52),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl52])])).
fof(f9668,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | ~sP46(X1,'T_0','const.bool.BOUNDED_1'(s(bool,X2)))) )),
  inference(condensation,[],[f9667])).
fof(f9667,plain,(
  ( ! [X257,X259,X260,X258] : (p(s(bool,X258)) | ~sP46(X258,'T_0','const.bool.BOUNDED_1'(s(bool,X259))) | s(bool,X257) = s(bool,X260) | s(bool,'T_0') = s(bool,X260)) )),
  inference(subsumption_resolution,[],[f8355,f1535])).
fof(f8355,plain,(
  ( ! [X257,X259,X260,X258] : (~p(s(bool,X257)) | p(s(bool,X258)) | ~sP46(X258,'T_0','const.bool.BOUNDED_1'(s(bool,X259))) | s(bool,X257) = s(bool,X260) | s(bool,'T_0') = s(bool,X260)) )),
  inference(superposition,[],[f1750,f1319])).
fof(f9554,plain,(
  ( ! [X2,X1] : (~sP45('T_0','const.bool.BOUNDED_1'(s(bool,X2)),X1) | p(s(bool,X1))) ) | $spl50),
  inference(cnf_transformation,[],[f9554_D])).
fof(f9554_D,plain,(
  ( ! [X2,X1] : (~sP45('T_0','const.bool.BOUNDED_1'(s(bool,X2)),X1) | p(s(bool,X1))) ) <=> ~$spl50),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl50])])).
fof(f9666,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | ~sP45('T_0','const.bool.BOUNDED_1'(s(bool,X2)),X1)) )),
  inference(condensation,[],[f9665])).
fof(f9665,plain,(
  ( ! [X255,X253,X254,X256] : (p(s(bool,X254)) | ~sP45('T_0','const.bool.BOUNDED_1'(s(bool,X255)),X254) | s(bool,X253) = s(bool,X256) | s(bool,'T_0') = s(bool,X256)) )),
  inference(subsumption_resolution,[],[f8354,f1535])).
fof(f8354,plain,(
  ( ! [X255,X253,X254,X256] : (~p(s(bool,X253)) | p(s(bool,X254)) | ~sP45('T_0','const.bool.BOUNDED_1'(s(bool,X255)),X254) | s(bool,X253) = s(bool,X256) | s(bool,'T_0') = s(bool,X256)) )),
  inference(superposition,[],[f1724,f1319])).
fof(f9551,plain,(
  ( ! [X2,X1] : (~sP42('T_0','const.bool.BOUNDED_1'(s(bool,X2)),X1) | p(s(bool,X1))) ) | $spl48),
  inference(cnf_transformation,[],[f9551_D])).
fof(f9551_D,plain,(
  ( ! [X2,X1] : (~sP42('T_0','const.bool.BOUNDED_1'(s(bool,X2)),X1) | p(s(bool,X1))) ) <=> ~$spl48),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl48])])).
fof(f9664,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | ~sP42('T_0','const.bool.BOUNDED_1'(s(bool,X2)),X1)) )),
  inference(condensation,[],[f9663])).
fof(f9663,plain,(
  ( ! [X251,X249,X252,X250] : (p(s(bool,X250)) | ~sP42('T_0','const.bool.BOUNDED_1'(s(bool,X251)),X250) | s(bool,X249) = s(bool,X252) | s(bool,'T_0') = s(bool,X252)) )),
  inference(subsumption_resolution,[],[f8353,f1535])).
fof(f8353,plain,(
  ( ! [X251,X249,X252,X250] : (~p(s(bool,X249)) | p(s(bool,X250)) | ~sP42('T_0','const.bool.BOUNDED_1'(s(bool,X251)),X250) | s(bool,X249) = s(bool,X252) | s(bool,'T_0') = s(bool,X252)) )),
  inference(superposition,[],[f1677,f1319])).
fof(f9548,plain,(
  ( ! [X2,X1] : (~sP43('T_0','const.bool.BOUNDED_1'(s(bool,X2)),X1) | p(s(bool,X1))) ) | $spl46),
  inference(cnf_transformation,[],[f9548_D])).
fof(f9548_D,plain,(
  ( ! [X2,X1] : (~sP43('T_0','const.bool.BOUNDED_1'(s(bool,X2)),X1) | p(s(bool,X1))) ) <=> ~$spl46),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl46])])).
fof(f9662,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | ~sP43('T_0','const.bool.BOUNDED_1'(s(bool,X2)),X1)) )),
  inference(condensation,[],[f9661])).
fof(f9661,plain,(
  ( ! [X246,X248,X247,X245] : (p(s(bool,X246)) | ~sP43('T_0','const.bool.BOUNDED_1'(s(bool,X247)),X246) | s(bool,X245) = s(bool,X248) | s(bool,'T_0') = s(bool,X248)) )),
  inference(subsumption_resolution,[],[f8352,f1535])).
fof(f8352,plain,(
  ( ! [X246,X248,X247,X245] : (~p(s(bool,X245)) | p(s(bool,X246)) | ~sP43('T_0','const.bool.BOUNDED_1'(s(bool,X247)),X246) | s(bool,X245) = s(bool,X248) | s(bool,'T_0') = s(bool,X248)) )),
  inference(superposition,[],[f1659,f1319])).
fof(f9545,plain,(
  ( ! [X2,X1] : (sP48('T_0',X1,X2) | ~sP47('T_0',X1,X2)) ) | $spl44),
  inference(cnf_transformation,[],[f9545_D])).
fof(f9545_D,plain,(
  ( ! [X2,X1] : (sP48('T_0',X1,X2) | ~sP47('T_0',X1,X2)) ) <=> ~$spl44),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl44])])).
fof(f9660,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~sP47('T_0',X1,X2) | sP48('T_0',X1,X2)) )),
  inference(condensation,[],[f9659])).
fof(f9659,plain,(
  ( ! [X111,X112,X110,X113] : (~sP47('T_0',X111,X112) | sP48('T_0',X111,X112) | s(bool,X110) = s(bool,X113) | s(bool,'T_0') = s(bool,X113)) )),
  inference(subsumption_resolution,[],[f8311,f1535])).
fof(f8311,plain,(
  ( ! [X111,X112,X110,X113] : (~p(s(bool,X110)) | ~sP47('T_0',X111,X112) | sP48('T_0',X111,X112) | s(bool,X110) = s(bool,X113) | s(bool,'T_0') = s(bool,X113)) )),
  inference(superposition,[],[f1029,f1319])).
fof(f9542,plain,(
  ( ! [X2,X1] : (sP50('T_0',X1,X2) | ~sP49('T_0',X1,X2)) ) | $spl42),
  inference(cnf_transformation,[],[f9542_D])).
fof(f9542_D,plain,(
  ( ! [X2,X1] : (sP50('T_0',X1,X2) | ~sP49('T_0',X1,X2)) ) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f9658,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~sP49('T_0',X1,X2) | sP50('T_0',X1,X2)) )),
  inference(condensation,[],[f9657])).
fof(f9657,plain,(
  ( ! [X109,X107,X108,X106] : (~sP49('T_0',X107,X108) | sP50('T_0',X107,X108) | s(bool,X106) = s(bool,X109) | s(bool,'T_0') = s(bool,X109)) )),
  inference(subsumption_resolution,[],[f8310,f1535])).
fof(f8310,plain,(
  ( ! [X109,X107,X108,X106] : (~p(s(bool,X106)) | ~sP49('T_0',X107,X108) | sP50('T_0',X107,X108) | s(bool,X106) = s(bool,X109) | s(bool,'T_0') = s(bool,X109)) )),
  inference(superposition,[],[f1028,f1319])).
fof(f9539,plain,(
  ( ! [X2,X1] : (~sP50('T_0',X2,X1) | p(s(bool,X2)) | ~p(s(bool,X1))) ) | $spl40),
  inference(cnf_transformation,[],[f9539_D])).
fof(f9539_D,plain,(
  ( ! [X2,X1] : (~sP50('T_0',X2,X1) | p(s(bool,X2)) | ~p(s(bool,X1))) ) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f9656,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP50('T_0',X2,X1)) )),
  inference(condensation,[],[f9655])).
fof(f9655,plain,(
  ( ! [X103,X105,X102,X104] : (~p(s(bool,X103)) | p(s(bool,X104)) | ~sP50('T_0',X104,X103) | s(bool,X102) = s(bool,X105) | s(bool,'T_0') = s(bool,X105)) )),
  inference(subsumption_resolution,[],[f8309,f1535])).
fof(f8309,plain,(
  ( ! [X103,X105,X102,X104] : (~p(s(bool,X102)) | ~p(s(bool,X103)) | p(s(bool,X104)) | ~sP50('T_0',X104,X103) | s(bool,X102) = s(bool,X105) | s(bool,'T_0') = s(bool,X105)) )),
  inference(superposition,[],[f997,f1319])).
fof(f9536,plain,(
  ( ! [X2,X1] : (sP50('T_0',X1,X2) | ~p(s(bool,X1))) ) | $spl38),
  inference(cnf_transformation,[],[f9536_D])).
fof(f9536_D,plain,(
  ( ! [X2,X1] : (sP50('T_0',X1,X2) | ~p(s(bool,X1))) ) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f9654,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | sP50('T_0',X1,X2)) )),
  inference(condensation,[],[f9653])).
fof(f9653,plain,(
  ( ! [X101,X99,X100,X98] : (~p(s(bool,X99)) | sP50('T_0',X99,X100) | s(bool,X98) = s(bool,X101) | s(bool,'T_0') = s(bool,X101)) )),
  inference(subsumption_resolution,[],[f8308,f1535])).
fof(f8308,plain,(
  ( ! [X101,X99,X100,X98] : (~p(s(bool,X98)) | ~p(s(bool,X99)) | sP50('T_0',X99,X100) | s(bool,X98) = s(bool,X101) | s(bool,'T_0') = s(bool,X101)) )),
  inference(superposition,[],[f996,f1319])).
fof(f9533,plain,(
  ( ! [X2,X1] : (sP50('T_0',X2,X1) | p(s(bool,X1))) ) | $spl36),
  inference(cnf_transformation,[],[f9533_D])).
fof(f9533_D,plain,(
  ( ! [X2,X1] : (sP50('T_0',X2,X1) | p(s(bool,X1))) ) <=> ~$spl36),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl36])])).
fof(f9652,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | sP50('T_0',X2,X1)) )),
  inference(condensation,[],[f9651])).
fof(f9651,plain,(
  ( ! [X94,X97,X95,X96] : (p(s(bool,X95)) | sP50('T_0',X96,X95) | s(bool,X94) = s(bool,X97) | s(bool,'T_0') = s(bool,X97)) )),
  inference(subsumption_resolution,[],[f8307,f1535])).
fof(f8307,plain,(
  ( ! [X94,X97,X95,X96] : (~p(s(bool,X94)) | p(s(bool,X95)) | sP50('T_0',X96,X95) | s(bool,X94) = s(bool,X97) | s(bool,'T_0') = s(bool,X97)) )),
  inference(superposition,[],[f995,f1319])).
fof(f9530,plain,(
  ( ! [X2,X1] : (~sP49(X2,X1,'T_0') | ~p(s(bool,X2)) | p(s(bool,X1))) ) | $spl34),
  inference(cnf_transformation,[],[f9530_D])).
fof(f9530_D,plain,(
  ( ! [X2,X1] : (~sP49(X2,X1,'T_0') | ~p(s(bool,X2)) | p(s(bool,X1))) ) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f9650,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | ~p(s(bool,X2)) | ~sP49(X2,X1,'T_0')) )),
  inference(condensation,[],[f9649])).
fof(f9649,plain,(
  ( ! [X92,X90,X93,X91] : (p(s(bool,X91)) | ~p(s(bool,X92)) | ~sP49(X92,X91,'T_0') | s(bool,X90) = s(bool,X93) | s(bool,'T_0') = s(bool,X93)) )),
  inference(subsumption_resolution,[],[f8306,f1535])).
fof(f8306,plain,(
  ( ! [X92,X90,X93,X91] : (~p(s(bool,X90)) | p(s(bool,X91)) | ~p(s(bool,X92)) | ~sP49(X92,X91,'T_0') | s(bool,X90) = s(bool,X93) | s(bool,'T_0') = s(bool,X93)) )),
  inference(superposition,[],[f990,f1319])).
fof(f9527,plain,(
  ( ! [X2,X1] : (~sP48('T_0',X2,X1) | p(s(bool,X2)) | p(s(bool,X1))) ) | $spl32),
  inference(cnf_transformation,[],[f9527_D])).
fof(f9527_D,plain,(
  ( ! [X2,X1] : (~sP48('T_0',X2,X1) | p(s(bool,X2)) | p(s(bool,X1))) ) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f9648,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | p(s(bool,X2)) | ~sP48('T_0',X2,X1)) )),
  inference(condensation,[],[f9647])).
fof(f9647,plain,(
  ( ! [X88,X87,X89,X86] : (p(s(bool,X87)) | p(s(bool,X88)) | ~sP48('T_0',X88,X87) | s(bool,X86) = s(bool,X89) | s(bool,'T_0') = s(bool,X89)) )),
  inference(subsumption_resolution,[],[f8305,f1535])).
fof(f8305,plain,(
  ( ! [X88,X87,X89,X86] : (~p(s(bool,X86)) | p(s(bool,X87)) | p(s(bool,X88)) | ~sP48('T_0',X88,X87) | s(bool,X86) = s(bool,X89) | s(bool,'T_0') = s(bool,X89)) )),
  inference(superposition,[],[f980,f1319])).
fof(f9524,plain,(
  ( ! [X2,X1] : (sP48('T_0',X1,X2) | ~p(s(bool,X1))) ) | $spl30),
  inference(cnf_transformation,[],[f9524_D])).
fof(f9524_D,plain,(
  ( ! [X2,X1] : (sP48('T_0',X1,X2) | ~p(s(bool,X1))) ) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f9646,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | sP48('T_0',X1,X2)) )),
  inference(condensation,[],[f9645])).
fof(f9645,plain,(
  ( ! [X85,X83,X84,X82] : (~p(s(bool,X83)) | sP48('T_0',X83,X84) | s(bool,X82) = s(bool,X85) | s(bool,'T_0') = s(bool,X85)) )),
  inference(subsumption_resolution,[],[f8304,f1535])).
fof(f8304,plain,(
  ( ! [X85,X83,X84,X82] : (~p(s(bool,X82)) | ~p(s(bool,X83)) | sP48('T_0',X83,X84) | s(bool,X82) = s(bool,X85) | s(bool,'T_0') = s(bool,X85)) )),
  inference(superposition,[],[f979,f1319])).
fof(f9521,plain,(
  ( ! [X2,X1] : (sP48('T_0',X2,X1) | ~p(s(bool,X1))) ) | $spl28),
  inference(cnf_transformation,[],[f9521_D])).
fof(f9521_D,plain,(
  ( ! [X2,X1] : (sP48('T_0',X2,X1) | ~p(s(bool,X1))) ) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f9644,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | sP48('T_0',X2,X1)) )),
  inference(condensation,[],[f9643])).
fof(f9643,plain,(
  ( ! [X80,X78,X81,X79] : (~p(s(bool,X79)) | sP48('T_0',X80,X79) | s(bool,X78) = s(bool,X81) | s(bool,'T_0') = s(bool,X81)) )),
  inference(subsumption_resolution,[],[f8303,f1535])).
fof(f8303,plain,(
  ( ! [X80,X78,X81,X79] : (~p(s(bool,X78)) | ~p(s(bool,X79)) | sP48('T_0',X80,X79) | s(bool,X78) = s(bool,X81) | s(bool,'T_0') = s(bool,X81)) )),
  inference(superposition,[],[f978,f1319])).
fof(f9518,plain,(
  ( ! [X2,X1] : (~sP47('T_0',X1,X2) | p(s(bool,X1)) | p(s(bool,X2))) ) | $spl26),
  inference(cnf_transformation,[],[f9518_D])).
fof(f9518_D,plain,(
  ( ! [X2,X1] : (~sP47('T_0',X1,X2) | p(s(bool,X1)) | p(s(bool,X2))) ) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f9642,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | p(s(bool,X2)) | ~sP47('T_0',X1,X2)) )),
  inference(condensation,[],[f9641])).
fof(f9641,plain,(
  ( ! [X76,X74,X77,X75] : (p(s(bool,X75)) | p(s(bool,X76)) | ~sP47('T_0',X75,X76) | s(bool,X74) = s(bool,X77) | s(bool,'T_0') = s(bool,X77)) )),
  inference(subsumption_resolution,[],[f8302,f1535])).
fof(f8302,plain,(
  ( ! [X76,X74,X77,X75] : (~p(s(bool,X74)) | p(s(bool,X75)) | p(s(bool,X76)) | ~sP47('T_0',X75,X76) | s(bool,X74) = s(bool,X77) | s(bool,'T_0') = s(bool,X77)) )),
  inference(superposition,[],[f973,f1319])).
fof(f9515,plain,(
  ( ! [X2,X1] : (~sP46(X2,X1,'T_0') | p(s(bool,X2)) | ~p(s(bool,X1))) ) | $spl24),
  inference(cnf_transformation,[],[f9515_D])).
fof(f9515_D,plain,(
  ( ! [X2,X1] : (~sP46(X2,X1,'T_0') | p(s(bool,X2)) | ~p(s(bool,X1))) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f9640,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP46(X2,X1,'T_0')) )),
  inference(condensation,[],[f9639])).
fof(f9639,plain,(
  ( ! [X70,X72,X71,X73] : (~p(s(bool,X71)) | p(s(bool,X72)) | ~sP46(X72,X71,'T_0') | s(bool,X70) = s(bool,X73) | s(bool,'T_0') = s(bool,X73)) )),
  inference(subsumption_resolution,[],[f8301,f1535])).
fof(f8301,plain,(
  ( ! [X70,X72,X71,X73] : (~p(s(bool,X70)) | ~p(s(bool,X71)) | p(s(bool,X72)) | ~sP46(X72,X71,'T_0') | s(bool,X70) = s(bool,X73) | s(bool,'T_0') = s(bool,X73)) )),
  inference(superposition,[],[f965,f1319])).
fof(f9512,plain,(
  ( ! [X2,X1] : (~sP45(X1,'T_0',X2) | ~p(s(bool,X1)) | p(s(bool,X2))) ) | $spl22),
  inference(cnf_transformation,[],[f9512_D])).
fof(f9512_D,plain,(
  ( ! [X2,X1] : (~sP45(X1,'T_0',X2) | ~p(s(bool,X1)) | p(s(bool,X2))) ) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f9638,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP45(X1,'T_0',X2)) )),
  inference(condensation,[],[f9637])).
fof(f9637,plain,(
  ( ! [X68,X66,X69,X67] : (~p(s(bool,X67)) | p(s(bool,X68)) | ~sP45(X67,'T_0',X68) | s(bool,X66) = s(bool,X69) | s(bool,'T_0') = s(bool,X69)) )),
  inference(subsumption_resolution,[],[f8300,f1535])).
fof(f8300,plain,(
  ( ! [X68,X66,X69,X67] : (~p(s(bool,X66)) | ~p(s(bool,X67)) | p(s(bool,X68)) | ~sP45(X67,'T_0',X68) | s(bool,X66) = s(bool,X69) | s(bool,'T_0') = s(bool,X69)) )),
  inference(superposition,[],[f956,f1319])).
fof(f9509,plain,(
  ( ! [X2,X1] : (~sP42(X1,'T_0',X2) | ~p(s(bool,X1)) | p(s(bool,X2))) ) | $spl20),
  inference(cnf_transformation,[],[f9509_D])).
fof(f9509_D,plain,(
  ( ! [X2,X1] : (~sP42(X1,'T_0',X2) | ~p(s(bool,X1)) | p(s(bool,X2))) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f9636,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP42(X1,'T_0',X2)) )),
  inference(condensation,[],[f9635])).
fof(f9635,plain,(
  ( ! [X64,X62,X65,X63] : (~p(s(bool,X63)) | p(s(bool,X64)) | ~sP42(X63,'T_0',X64) | s(bool,X62) = s(bool,X65) | s(bool,'T_0') = s(bool,X65)) )),
  inference(subsumption_resolution,[],[f8299,f1535])).
fof(f8299,plain,(
  ( ! [X64,X62,X65,X63] : (~p(s(bool,X62)) | ~p(s(bool,X63)) | p(s(bool,X64)) | ~sP42(X63,'T_0',X64) | s(bool,X62) = s(bool,X65) | s(bool,'T_0') = s(bool,X65)) )),
  inference(superposition,[],[f937,f1319])).
fof(f9506,plain,(
  ( ! [X2,X1] : (~sP43(X1,'T_0',X2) | ~p(s(bool,X1)) | p(s(bool,X2))) ) | $spl18),
  inference(cnf_transformation,[],[f9506_D])).
fof(f9506_D,plain,(
  ( ! [X2,X1] : (~sP43(X1,'T_0',X2) | ~p(s(bool,X1)) | p(s(bool,X2))) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f9634,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP43(X1,'T_0',X2)) )),
  inference(condensation,[],[f9633])).
fof(f9633,plain,(
  ( ! [X61,X59,X60,X58] : (~p(s(bool,X59)) | p(s(bool,X60)) | ~sP43(X59,'T_0',X60) | s(bool,X58) = s(bool,X61) | s(bool,'T_0') = s(bool,X61)) )),
  inference(subsumption_resolution,[],[f8298,f1535])).
fof(f8298,plain,(
  ( ! [X61,X59,X60,X58] : (~p(s(bool,X58)) | ~p(s(bool,X59)) | p(s(bool,X60)) | ~sP43(X59,'T_0',X60) | s(bool,X58) = s(bool,X61) | s(bool,'T_0') = s(bool,X61)) )),
  inference(superposition,[],[f933,f1319])).
fof(f9503,plain,(
  ( ! [X2,X1] : (sP40(X1,X2,'T_0') | ~p(s(bool,X1))) ) | $spl16),
  inference(cnf_transformation,[],[f9503_D])).
fof(f9503_D,plain,(
  ( ! [X2,X1] : (sP40(X1,X2,'T_0') | ~p(s(bool,X1))) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f9632,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | sP40(X1,X2,'T_0')) )),
  inference(condensation,[],[f9631])).
fof(f9631,plain,(
  ( ! [X57,X54,X56,X55] : (~p(s(bool,X55)) | sP40(X55,X56,'T_0') | s(bool,X54) = s(bool,X57) | s(bool,'T_0') = s(bool,X57)) )),
  inference(subsumption_resolution,[],[f8297,f1535])).
fof(f8297,plain,(
  ( ! [X57,X54,X56,X55] : (~p(s(bool,X54)) | ~p(s(bool,X55)) | sP40(X55,X56,'T_0') | s(bool,X54) = s(bool,X57) | s(bool,'T_0') = s(bool,X57)) )),
  inference(superposition,[],[f921,f1319])).
fof(f9500,plain,(
  ( ! [X1] : (p(s(bool,X1)) | sP1(X1,'T_0')) ) | $spl14),
  inference(cnf_transformation,[],[f9500_D])).
fof(f9500_D,plain,(
  ( ! [X1] : (p(s(bool,X1)) | sP1(X1,'T_0')) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f9630,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | sP1(X1,'T_0')) )),
  inference(condensation,[],[f9629])).
fof(f9629,plain,(
  ( ! [X45,X43,X44] : (p(s(bool,X44)) | sP1(X44,'T_0') | s(bool,X43) = s(bool,X45) | s(bool,'T_0') = s(bool,X45)) )),
  inference(subsumption_resolution,[],[f8294,f1535])).
fof(f8294,plain,(
  ( ! [X45,X43,X44] : (~p(s(bool,X43)) | p(s(bool,X44)) | sP1(X44,'T_0') | s(bool,X43) = s(bool,X45) | s(bool,'T_0') = s(bool,X45)) )),
  inference(superposition,[],[f643,f1319])).
fof(f9496,plain,(
  ( ! [X1] : (p(s(bool,X1)) | sP1('T_0',X1)) ) | $spl10),
  inference(cnf_transformation,[],[f9496_D])).
fof(f9496_D,plain,(
  ( ! [X1] : (p(s(bool,X1)) | sP1('T_0',X1)) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f9628,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | sP1('T_0',X1)) )),
  inference(condensation,[],[f9627])).
fof(f9627,plain,(
  ( ! [X41,X42,X40] : (p(s(bool,X41)) | sP1('T_0',X41) | s(bool,X40) = s(bool,X42) | s(bool,'T_0') = s(bool,X42)) )),
  inference(subsumption_resolution,[],[f8293,f1535])).
fof(f8293,plain,(
  ( ! [X41,X42,X40] : (~p(s(bool,X40)) | p(s(bool,X41)) | sP1('T_0',X41) | s(bool,X40) = s(bool,X42) | s(bool,'T_0') = s(bool,X42)) )),
  inference(superposition,[],[f640,f1319])).
fof(f9565,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | ~sP46(X1,'T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)))) ) | $spl6),
  inference(condensation,[],[f9564])).
fof(f9564,plain,(
  ( ! [X290,X289,X291] : (p(s(bool,X290)) | ~sP46(X290,'T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56))) | s(bool,X289) = s(bool,X291) | s(bool,'T_0') = s(bool,X291)) ) | $spl6),
  inference(subsumption_resolution,[],[f7918,f1535])).
fof(f7918,plain,(
  ( ! [X290,X289,X291] : (~p(s(bool,X289)) | p(s(bool,X290)) | ~sP46(X290,'T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56))) | s(bool,X289) = s(bool,X291) | s(bool,'T_0') = s(bool,X291)) ) | $spl6),
  inference(superposition,[],[f2135,f1319])).
fof(f9562,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | ~sP50('const.bool.BOUNDED_1'(s(bool,X2)),X1,'T_0')) )),
  inference(condensation,[],[f9561])).
fof(f9561,plain,(
  ( ! [X288,X285,X287,X286] : (p(s(bool,X286)) | ~sP50('const.bool.BOUNDED_1'(s(bool,X287)),X286,'T_0') | s(bool,X285) = s(bool,X288) | s(bool,'T_0') = s(bool,X288)) )),
  inference(subsumption_resolution,[],[f7917,f1535])).
fof(f7917,plain,(
  ( ! [X288,X285,X287,X286] : (~p(s(bool,X285)) | p(s(bool,X286)) | ~sP50('const.bool.BOUNDED_1'(s(bool,X287)),X286,'T_0') | s(bool,X285) = s(bool,X288) | s(bool,'T_0') = s(bool,X288)) )),
  inference(superposition,[],[f2024,f1319])).
fof(f9559,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | ~sP49('T_0',X1,'const.bool.BOUNDED_1'(s(bool,X2)))) )),
  inference(condensation,[],[f9558])).
fof(f9558,plain,(
  ( ! [X282,X281,X283,X284] : (p(s(bool,X282)) | ~sP49('T_0',X282,'const.bool.BOUNDED_1'(s(bool,X283))) | s(bool,X281) = s(bool,X284) | s(bool,'T_0') = s(bool,X284)) )),
  inference(subsumption_resolution,[],[f7916,f1535])).
fof(f7916,plain,(
  ( ! [X282,X281,X283,X284] : (~p(s(bool,X281)) | p(s(bool,X282)) | ~sP49('T_0',X282,'const.bool.BOUNDED_1'(s(bool,X283))) | s(bool,X281) = s(bool,X284) | s(bool,'T_0') = s(bool,X284)) )),
  inference(superposition,[],[f1990,f1319])).
fof(f9556,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | ~sP46(X1,'T_0','const.bool.BOUNDED_1'(s(bool,X2)))) )),
  inference(condensation,[],[f9555])).
fof(f9555,plain,(
  ( ! [X257,X259,X260,X258] : (p(s(bool,X258)) | ~sP46(X258,'T_0','const.bool.BOUNDED_1'(s(bool,X259))) | s(bool,X257) = s(bool,X260) | s(bool,'T_0') = s(bool,X260)) )),
  inference(subsumption_resolution,[],[f7909,f1535])).
fof(f7909,plain,(
  ( ! [X257,X259,X260,X258] : (~p(s(bool,X257)) | p(s(bool,X258)) | ~sP46(X258,'T_0','const.bool.BOUNDED_1'(s(bool,X259))) | s(bool,X257) = s(bool,X260) | s(bool,'T_0') = s(bool,X260)) )),
  inference(superposition,[],[f1750,f1319])).
fof(f9553,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | ~sP45('T_0','const.bool.BOUNDED_1'(s(bool,X2)),X1)) )),
  inference(condensation,[],[f9552])).
fof(f9552,plain,(
  ( ! [X255,X253,X254,X256] : (p(s(bool,X254)) | ~sP45('T_0','const.bool.BOUNDED_1'(s(bool,X255)),X254) | s(bool,X253) = s(bool,X256) | s(bool,'T_0') = s(bool,X256)) )),
  inference(subsumption_resolution,[],[f7908,f1535])).
fof(f7908,plain,(
  ( ! [X255,X253,X254,X256] : (~p(s(bool,X253)) | p(s(bool,X254)) | ~sP45('T_0','const.bool.BOUNDED_1'(s(bool,X255)),X254) | s(bool,X253) = s(bool,X256) | s(bool,'T_0') = s(bool,X256)) )),
  inference(superposition,[],[f1724,f1319])).
fof(f9550,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | ~sP42('T_0','const.bool.BOUNDED_1'(s(bool,X2)),X1)) )),
  inference(condensation,[],[f9549])).
fof(f9549,plain,(
  ( ! [X251,X249,X252,X250] : (p(s(bool,X250)) | ~sP42('T_0','const.bool.BOUNDED_1'(s(bool,X251)),X250) | s(bool,X249) = s(bool,X252) | s(bool,'T_0') = s(bool,X252)) )),
  inference(subsumption_resolution,[],[f7907,f1535])).
fof(f7907,plain,(
  ( ! [X251,X249,X252,X250] : (~p(s(bool,X249)) | p(s(bool,X250)) | ~sP42('T_0','const.bool.BOUNDED_1'(s(bool,X251)),X250) | s(bool,X249) = s(bool,X252) | s(bool,'T_0') = s(bool,X252)) )),
  inference(superposition,[],[f1677,f1319])).
fof(f9547,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | ~sP43('T_0','const.bool.BOUNDED_1'(s(bool,X2)),X1)) )),
  inference(condensation,[],[f9546])).
fof(f9546,plain,(
  ( ! [X246,X248,X247,X245] : (p(s(bool,X246)) | ~sP43('T_0','const.bool.BOUNDED_1'(s(bool,X247)),X246) | s(bool,X245) = s(bool,X248) | s(bool,'T_0') = s(bool,X248)) )),
  inference(subsumption_resolution,[],[f7906,f1535])).
fof(f7906,plain,(
  ( ! [X246,X248,X247,X245] : (~p(s(bool,X245)) | p(s(bool,X246)) | ~sP43('T_0','const.bool.BOUNDED_1'(s(bool,X247)),X246) | s(bool,X245) = s(bool,X248) | s(bool,'T_0') = s(bool,X248)) )),
  inference(superposition,[],[f1659,f1319])).
fof(f9544,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~sP47('T_0',X1,X2) | sP48('T_0',X1,X2)) )),
  inference(condensation,[],[f9543])).
fof(f9543,plain,(
  ( ! [X111,X112,X110,X113] : (~sP47('T_0',X111,X112) | sP48('T_0',X111,X112) | s(bool,X110) = s(bool,X113) | s(bool,'T_0') = s(bool,X113)) )),
  inference(subsumption_resolution,[],[f7865,f1535])).
fof(f7865,plain,(
  ( ! [X111,X112,X110,X113] : (~p(s(bool,X110)) | ~sP47('T_0',X111,X112) | sP48('T_0',X111,X112) | s(bool,X110) = s(bool,X113) | s(bool,'T_0') = s(bool,X113)) )),
  inference(superposition,[],[f1029,f1319])).
fof(f9541,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~sP49('T_0',X1,X2) | sP50('T_0',X1,X2)) )),
  inference(condensation,[],[f9540])).
fof(f9540,plain,(
  ( ! [X109,X107,X108,X106] : (~sP49('T_0',X107,X108) | sP50('T_0',X107,X108) | s(bool,X106) = s(bool,X109) | s(bool,'T_0') = s(bool,X109)) )),
  inference(subsumption_resolution,[],[f7864,f1535])).
fof(f7864,plain,(
  ( ! [X109,X107,X108,X106] : (~p(s(bool,X106)) | ~sP49('T_0',X107,X108) | sP50('T_0',X107,X108) | s(bool,X106) = s(bool,X109) | s(bool,'T_0') = s(bool,X109)) )),
  inference(superposition,[],[f1028,f1319])).
fof(f9538,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP50('T_0',X2,X1)) )),
  inference(condensation,[],[f9537])).
fof(f9537,plain,(
  ( ! [X103,X105,X102,X104] : (~p(s(bool,X103)) | p(s(bool,X104)) | ~sP50('T_0',X104,X103) | s(bool,X102) = s(bool,X105) | s(bool,'T_0') = s(bool,X105)) )),
  inference(subsumption_resolution,[],[f7863,f1535])).
fof(f7863,plain,(
  ( ! [X103,X105,X102,X104] : (~p(s(bool,X102)) | ~p(s(bool,X103)) | p(s(bool,X104)) | ~sP50('T_0',X104,X103) | s(bool,X102) = s(bool,X105) | s(bool,'T_0') = s(bool,X105)) )),
  inference(superposition,[],[f997,f1319])).
fof(f9535,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | sP50('T_0',X1,X2)) )),
  inference(condensation,[],[f9534])).
fof(f9534,plain,(
  ( ! [X101,X99,X100,X98] : (~p(s(bool,X99)) | sP50('T_0',X99,X100) | s(bool,X98) = s(bool,X101) | s(bool,'T_0') = s(bool,X101)) )),
  inference(subsumption_resolution,[],[f7862,f1535])).
fof(f7862,plain,(
  ( ! [X101,X99,X100,X98] : (~p(s(bool,X98)) | ~p(s(bool,X99)) | sP50('T_0',X99,X100) | s(bool,X98) = s(bool,X101) | s(bool,'T_0') = s(bool,X101)) )),
  inference(superposition,[],[f996,f1319])).
fof(f9532,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | sP50('T_0',X2,X1)) )),
  inference(condensation,[],[f9531])).
fof(f9531,plain,(
  ( ! [X94,X97,X95,X96] : (p(s(bool,X95)) | sP50('T_0',X96,X95) | s(bool,X94) = s(bool,X97) | s(bool,'T_0') = s(bool,X97)) )),
  inference(subsumption_resolution,[],[f7861,f1535])).
fof(f7861,plain,(
  ( ! [X94,X97,X95,X96] : (~p(s(bool,X94)) | p(s(bool,X95)) | sP50('T_0',X96,X95) | s(bool,X94) = s(bool,X97) | s(bool,'T_0') = s(bool,X97)) )),
  inference(superposition,[],[f995,f1319])).
fof(f9529,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | ~p(s(bool,X2)) | ~sP49(X2,X1,'T_0')) )),
  inference(condensation,[],[f9528])).
fof(f9528,plain,(
  ( ! [X92,X90,X93,X91] : (p(s(bool,X91)) | ~p(s(bool,X92)) | ~sP49(X92,X91,'T_0') | s(bool,X90) = s(bool,X93) | s(bool,'T_0') = s(bool,X93)) )),
  inference(subsumption_resolution,[],[f7860,f1535])).
fof(f7860,plain,(
  ( ! [X92,X90,X93,X91] : (~p(s(bool,X90)) | p(s(bool,X91)) | ~p(s(bool,X92)) | ~sP49(X92,X91,'T_0') | s(bool,X90) = s(bool,X93) | s(bool,'T_0') = s(bool,X93)) )),
  inference(superposition,[],[f990,f1319])).
fof(f9526,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | p(s(bool,X2)) | ~sP48('T_0',X2,X1)) )),
  inference(condensation,[],[f9525])).
fof(f9525,plain,(
  ( ! [X88,X87,X89,X86] : (p(s(bool,X87)) | p(s(bool,X88)) | ~sP48('T_0',X88,X87) | s(bool,X86) = s(bool,X89) | s(bool,'T_0') = s(bool,X89)) )),
  inference(subsumption_resolution,[],[f7859,f1535])).
fof(f7859,plain,(
  ( ! [X88,X87,X89,X86] : (~p(s(bool,X86)) | p(s(bool,X87)) | p(s(bool,X88)) | ~sP48('T_0',X88,X87) | s(bool,X86) = s(bool,X89) | s(bool,'T_0') = s(bool,X89)) )),
  inference(superposition,[],[f980,f1319])).
fof(f9523,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | sP48('T_0',X1,X2)) )),
  inference(condensation,[],[f9522])).
fof(f9522,plain,(
  ( ! [X85,X83,X84,X82] : (~p(s(bool,X83)) | sP48('T_0',X83,X84) | s(bool,X82) = s(bool,X85) | s(bool,'T_0') = s(bool,X85)) )),
  inference(subsumption_resolution,[],[f7858,f1535])).
fof(f7858,plain,(
  ( ! [X85,X83,X84,X82] : (~p(s(bool,X82)) | ~p(s(bool,X83)) | sP48('T_0',X83,X84) | s(bool,X82) = s(bool,X85) | s(bool,'T_0') = s(bool,X85)) )),
  inference(superposition,[],[f979,f1319])).
fof(f9520,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | sP48('T_0',X2,X1)) )),
  inference(condensation,[],[f9519])).
fof(f9519,plain,(
  ( ! [X80,X78,X81,X79] : (~p(s(bool,X79)) | sP48('T_0',X80,X79) | s(bool,X78) = s(bool,X81) | s(bool,'T_0') = s(bool,X81)) )),
  inference(subsumption_resolution,[],[f7857,f1535])).
fof(f7857,plain,(
  ( ! [X80,X78,X81,X79] : (~p(s(bool,X78)) | ~p(s(bool,X79)) | sP48('T_0',X80,X79) | s(bool,X78) = s(bool,X81) | s(bool,'T_0') = s(bool,X81)) )),
  inference(superposition,[],[f978,f1319])).
fof(f9517,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | p(s(bool,X2)) | ~sP47('T_0',X1,X2)) )),
  inference(condensation,[],[f9516])).
fof(f9516,plain,(
  ( ! [X76,X74,X77,X75] : (p(s(bool,X75)) | p(s(bool,X76)) | ~sP47('T_0',X75,X76) | s(bool,X74) = s(bool,X77) | s(bool,'T_0') = s(bool,X77)) )),
  inference(subsumption_resolution,[],[f7856,f1535])).
fof(f7856,plain,(
  ( ! [X76,X74,X77,X75] : (~p(s(bool,X74)) | p(s(bool,X75)) | p(s(bool,X76)) | ~sP47('T_0',X75,X76) | s(bool,X74) = s(bool,X77) | s(bool,'T_0') = s(bool,X77)) )),
  inference(superposition,[],[f973,f1319])).
fof(f9514,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP46(X2,X1,'T_0')) )),
  inference(condensation,[],[f9513])).
fof(f9513,plain,(
  ( ! [X70,X72,X71,X73] : (~p(s(bool,X71)) | p(s(bool,X72)) | ~sP46(X72,X71,'T_0') | s(bool,X70) = s(bool,X73) | s(bool,'T_0') = s(bool,X73)) )),
  inference(subsumption_resolution,[],[f7855,f1535])).
fof(f7855,plain,(
  ( ! [X70,X72,X71,X73] : (~p(s(bool,X70)) | ~p(s(bool,X71)) | p(s(bool,X72)) | ~sP46(X72,X71,'T_0') | s(bool,X70) = s(bool,X73) | s(bool,'T_0') = s(bool,X73)) )),
  inference(superposition,[],[f965,f1319])).
fof(f9511,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP45(X1,'T_0',X2)) )),
  inference(condensation,[],[f9510])).
fof(f9510,plain,(
  ( ! [X68,X66,X69,X67] : (~p(s(bool,X67)) | p(s(bool,X68)) | ~sP45(X67,'T_0',X68) | s(bool,X66) = s(bool,X69) | s(bool,'T_0') = s(bool,X69)) )),
  inference(subsumption_resolution,[],[f7854,f1535])).
fof(f7854,plain,(
  ( ! [X68,X66,X69,X67] : (~p(s(bool,X66)) | ~p(s(bool,X67)) | p(s(bool,X68)) | ~sP45(X67,'T_0',X68) | s(bool,X66) = s(bool,X69) | s(bool,'T_0') = s(bool,X69)) )),
  inference(superposition,[],[f956,f1319])).
fof(f9508,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP42(X1,'T_0',X2)) )),
  inference(condensation,[],[f9507])).
fof(f9507,plain,(
  ( ! [X64,X62,X65,X63] : (~p(s(bool,X63)) | p(s(bool,X64)) | ~sP42(X63,'T_0',X64) | s(bool,X62) = s(bool,X65) | s(bool,'T_0') = s(bool,X65)) )),
  inference(subsumption_resolution,[],[f7853,f1535])).
fof(f7853,plain,(
  ( ! [X64,X62,X65,X63] : (~p(s(bool,X62)) | ~p(s(bool,X63)) | p(s(bool,X64)) | ~sP42(X63,'T_0',X64) | s(bool,X62) = s(bool,X65) | s(bool,'T_0') = s(bool,X65)) )),
  inference(superposition,[],[f937,f1319])).
fof(f9505,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP43(X1,'T_0',X2)) )),
  inference(condensation,[],[f9504])).
fof(f9504,plain,(
  ( ! [X61,X59,X60,X58] : (~p(s(bool,X59)) | p(s(bool,X60)) | ~sP43(X59,'T_0',X60) | s(bool,X58) = s(bool,X61) | s(bool,'T_0') = s(bool,X61)) )),
  inference(subsumption_resolution,[],[f7852,f1535])).
fof(f7852,plain,(
  ( ! [X61,X59,X60,X58] : (~p(s(bool,X58)) | ~p(s(bool,X59)) | p(s(bool,X60)) | ~sP43(X59,'T_0',X60) | s(bool,X58) = s(bool,X61) | s(bool,'T_0') = s(bool,X61)) )),
  inference(superposition,[],[f933,f1319])).
fof(f9502,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | sP40(X1,X2,'T_0')) )),
  inference(condensation,[],[f9501])).
fof(f9501,plain,(
  ( ! [X57,X54,X56,X55] : (~p(s(bool,X55)) | sP40(X55,X56,'T_0') | s(bool,X54) = s(bool,X57) | s(bool,'T_0') = s(bool,X57)) )),
  inference(subsumption_resolution,[],[f7851,f1535])).
fof(f7851,plain,(
  ( ! [X57,X54,X56,X55] : (~p(s(bool,X54)) | ~p(s(bool,X55)) | sP40(X55,X56,'T_0') | s(bool,X54) = s(bool,X57) | s(bool,'T_0') = s(bool,X57)) )),
  inference(superposition,[],[f921,f1319])).
fof(f9499,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | sP1(X1,'T_0')) )),
  inference(condensation,[],[f9498])).
fof(f9498,plain,(
  ( ! [X45,X43,X44] : (p(s(bool,X44)) | sP1(X44,'T_0') | s(bool,X43) = s(bool,X45) | s(bool,'T_0') = s(bool,X45)) )),
  inference(subsumption_resolution,[],[f7848,f1535])).
fof(f7848,plain,(
  ( ! [X45,X43,X44] : (~p(s(bool,X43)) | p(s(bool,X44)) | sP1(X44,'T_0') | s(bool,X43) = s(bool,X45) | s(bool,'T_0') = s(bool,X45)) )),
  inference(superposition,[],[f643,f1319])).
fof(f9495,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | sP1('T_0',X1)) )),
  inference(condensation,[],[f9494])).
fof(f9494,plain,(
  ( ! [X41,X42,X40] : (p(s(bool,X41)) | sP1('T_0',X41) | s(bool,X40) = s(bool,X42) | s(bool,'T_0') = s(bool,X42)) )),
  inference(subsumption_resolution,[],[f7847,f1535])).
fof(f7847,plain,(
  ( ! [X41,X42,X40] : (~p(s(bool,X40)) | p(s(bool,X41)) | sP1('T_0',X41) | s(bool,X40) = s(bool,X42) | s(bool,'T_0') = s(bool,X42)) )),
  inference(superposition,[],[f640,f1319])).
fof(f1039,plain,(
  p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) | $spl0),
  inference(cnf_transformation,[],[f1039_D])).
fof(f1039_D,plain,(
  p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f1047,plain,(
  p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) | $spl8),
  inference(cnf_transformation,[],[f1047_D])).
fof(f1047_D,plain,(
  p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f527,plain,(
  p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) | p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54))))),
  inference(cnf_transformation,[],[f279])).
fof(f279,plain,(
  (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) | (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',sK55)))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)))) & s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56))))) & (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) | ! [X4,X5] : (~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',X4)))) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),X5)))) | s('type.list.list'('type.conSem.v'),sK54) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X4),s('type.list.list'('type.conSem.v'),X5)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK51,sK52,sK53,sK54,sK55,sK56])],[f278])).
fof(f278,plain,(
  ? [X0,X1,X2,X3] : ((p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X1),s('type.list.list'('type.modSem.v'),X2))),s('type.list.list'('type.conSem.v'),X3)))) | ? [X6,X7] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X6)))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X2),s('type.list.list'('type.conSem.v'),X7)))) & s('type.list.list'('type.conSem.v'),X3) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X6),s('type.list.list'('type.conSem.v'),X7))))) & (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X1),s('type.list.list'('type.modSem.v'),X2))),s('type.list.list'('type.conSem.v'),X3)))) | ! [X4,X5] : (~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X4)))) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X2),s('type.list.list'('type.conSem.v'),X5)))) | s('type.list.list'('type.conSem.v'),X3) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X4),s('type.list.list'('type.conSem.v'),X5))))))),
  inference(rectify,[],[f277])).
fof(f277,plain,(
  ? [X0,X1,X2,X3] : ((p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X1),s('type.list.list'('type.modSem.v'),X2))),s('type.list.list'('type.conSem.v'),X3)))) | ? [X4,X5] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X4)))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X2),s('type.list.list'('type.conSem.v'),X5)))) & s('type.list.list'('type.conSem.v'),X3) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X4),s('type.list.list'('type.conSem.v'),X5))))) & (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X1),s('type.list.list'('type.modSem.v'),X2))),s('type.list.list'('type.conSem.v'),X3)))) | ! [X4,X5] : (~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X4)))) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X2),s('type.list.list'('type.conSem.v'),X5)))) | s('type.list.list'('type.conSem.v'),X3) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X4),s('type.list.list'('type.conSem.v'),X5))))))),
  inference(nnf_transformation,[],[f167])).
fof(f167,plain,(
  ? [X0,X1,X2,X3] : (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X1),s('type.list.list'('type.modSem.v'),X2))),s('type.list.list'('type.conSem.v'),X3)))) <~> ? [X4,X5] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X4)))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X2),s('type.list.list'('type.conSem.v'),X5)))) & s('type.list.list'('type.conSem.v'),X3) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X4),s('type.list.list'('type.conSem.v'),X5)))))),
  inference(ennf_transformation,[],[f71])).
fof(f71,plain,(
  ~! [X0,X1,X2,X3] : (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X1),s('type.list.list'('type.modSem.v'),X2))),s('type.list.list'('type.conSem.v'),X3)))) <=> ? [X4,X5] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X4)))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X2),s('type.list.list'('type.conSem.v'),X5)))) & s('type.list.list'('type.conSem.v'),X3) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X4),s('type.list.list'('type.conSem.v'),X5)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8,X9] : (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X7),s('type.list.list'('type.modSem.v'),X8))),s('type.list.list'('type.conSem.v'),X9)))) <=> ? [X10,X11] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.modSem.v',X7),s('type.conSem.v',X10)))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.list.list'('type.modSem.v'),X8),s('type.list.list'('type.conSem.v'),X11)))) & s('type.list.list'('type.conSem.v'),X9) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X10),s('type.list.list'('type.conSem.v'),X11)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8,X9] : (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X7),s('type.list.list'('type.modSem.v'),X8))),s('type.list.list'('type.conSem.v'),X9)))) <=> ? [X10,X11] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.modSem.v',X7),s('type.conSem.v',X10)))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.list.list'('type.modSem.v'),X8),s('type.list.list'('type.conSem.v'),X11)))) & s('type.list.list'('type.conSem.v'),X9) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X10),s('type.list.list'('type.conSem.v'),X11)))))),
  file('thm.mod_to_conProof.v_rel_eqns|split|5','thm.mod_to_conProof.v_rel_eqns|split|5')).
fof(f1045,plain,(
  p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)))) | $spl6),
  inference(cnf_transformation,[],[f1045_D])).
fof(f1045_D,plain,(
  p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f528,plain,(
  p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),sK56)))) | p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54))))),
  inference(cnf_transformation,[],[f279])).
fof(f1043,plain,(
  s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56))) | $spl4),
  inference(cnf_transformation,[],[f1043_D])).
fof(f1043_D,plain,(
  s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f529,plain,(
  s('type.list.list'('type.conSem.v'),sK54) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',sK55),s('type.list.list'('type.conSem.v'),sK56))) | p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54))))),
  inference(cnf_transformation,[],[f279])).
fof(f1040,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) | $spl1),
  inference(cnf_transformation,[],[f1040_D])).
fof(f1040_D,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54)))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f1041,plain,(
  ( ! [X4,X5] : (s('type.list.list'('type.conSem.v'),sK54) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X4),s('type.list.list'('type.conSem.v'),X5))) | ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',X4)))) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),X5))))) ) | $spl2),
  inference(cnf_transformation,[],[f1041_D])).
fof(f1041_D,plain,(
  ( ! [X4,X5] : (s('type.list.list'('type.conSem.v'),sK54) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X4),s('type.list.list'('type.conSem.v'),X5))) | ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',X4)))) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),X5))))) ) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f530,plain,(
  ( ! [X4,X5] : (s('type.list.list'('type.conSem.v'),sK54) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X4),s('type.list.list'('type.conSem.v'),X5))) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),sK53),s('type.list.list'('type.conSem.v'),X5)))) | ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.modSem.v',sK52),s('type.conSem.v',X4)))) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK51),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK52),s('type.list.list'('type.modSem.v'),sK53))),s('type.list.list'('type.conSem.v'),sK54))))) )),
  inference(cnf_transformation,[],[f279])).
% SZS output end Proof for thm.mod_to_conProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 3194
% Passive clauses: 9507
% Generated clauses: 123582
% Final active clauses: 1353
% Final passive clauses: 1223
% Input formulas: 69
% Initial clauses: 501
% 
% Duplicate literals: 1763
% Trivial inequalities: 148
% Fw subsumption resolutions: 3359
% Fw demodulations: 18638
% Bw demodulations: 1090
% Condensations: 5844
% Global subsumptions: 98
% 
% Simple tautologies: 218
% Equational tautologies: 2028
% Forward subsumptions: 76455
% Fw demodulations to eq. taut.: 4271
% Bw demodulations to eq. taut.: 25
% 
% Unit resulting resolution: 40485
% Factoring: 10
% Forward superposition: 16462
% Backward superposition: 32844
% Self superposition: 179
% Equality factoring: 94
% Equality resolution: 113
% 
% Split clauses: 267
% Split components: 539
% SAT solver clauses: 11140
% SAT solver unit clauses: 507
% SAT solver binary clauses: 4024
% 
% Sat splits: 267
% Sat splitting refutations: 999
% 
% Memory used [KB]: 52323
% Time elapsed: 4.323 s
% ------------------------------
% ------------------------------
% Success in time 5.7 s
