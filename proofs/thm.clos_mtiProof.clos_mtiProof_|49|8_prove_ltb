Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.clos_mtiProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.clos_mtiProof
% SZS output start Proof for thm.clos_mtiProof
fof(f2439,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f1306,f1308,f398,f64,f95,f66,f112,f1106,f1109,f92,f94,f61,f109,f1461,f2142,f104,f2438,f62,f107,f2137,f91,f100,f60,f53,f103,f90,f98,f96,f102,f1131,f345,f1133,f63,f105,f97])).
fof(f97,plain,(
  ~sP0 | $spl5),
  inference(cnf_transformation,[],[f97_D])).
fof(f97_D,plain,(
  ~sP0 <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f105,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK8),s('type.num.num','const.closLang.max_app_0')))) | $spl13),
  inference(cnf_transformation,[],[f105_D])).
fof(f105_D,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK8),s('type.num.num','const.closLang.max_app_0')))) <=> ~$spl13),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl13])])).
fof(f63,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK8),s('type.num.num','const.closLang.max_app_0')))) | ~sP0),
  inference(cnf_transformation,[],[f38])).
fof(f38,plain,(
  (sP0 | ! [X4,X5,X6,X7] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num','const.closLang.max_app_0')))) | s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',X6),s('type.closLang.exp',X4))) != s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X7),s('type.closLang.exp',X5))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num','const.closLang.max_app_0')))))) & (~sP0 | (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK7),s('type.num.num','const.closLang.max_app_0')))) & s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',sK7),s('type.closLang.exp',sK5))) = s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK8),s('type.closLang.exp',sK6))) & ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK8),s('type.num.num','const.closLang.max_app_0'))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK5,sK6,sK7,sK8])],[f37])).
fof(f37,plain,(
  (sP0 | ! [X4,X5,X6,X7] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num','const.closLang.max_app_0')))) | s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',X6),s('type.closLang.exp',X4))) != s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X7),s('type.closLang.exp',X5))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num','const.closLang.max_app_0')))))) & (~sP0 | ? [X0,X1,X2,X3] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.closLang.max_app_0')))) & s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',X2),s('type.closLang.exp',X0))) = s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X3),s('type.closLang.exp',X1))) & ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X3),s('type.num.num','const.closLang.max_app_0'))))))),
  inference(rectify,[],[f36])).
fof(f36,plain,(
  (sP0 | ! [X7,X8,X9,X10] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num','const.closLang.max_app_0')))) | s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',X9),s('type.closLang.exp',X7))) != s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X10),s('type.closLang.exp',X8))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X10),s('type.num.num','const.closLang.max_app_0')))))) & (~sP0 | ? [X7,X8,X9,X10] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num','const.closLang.max_app_0')))) & s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',X9),s('type.closLang.exp',X7))) = s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X10),s('type.closLang.exp',X8))) & ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X10),s('type.num.num','const.closLang.max_app_0'))))))),
  inference(nnf_transformation,[],[f31])).
fof(f31,plain,(
  sP0 <~> ! [X7,X8,X9,X10] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num','const.closLang.max_app_0')))) | s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',X9),s('type.closLang.exp',X7))) != s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X10),s('type.closLang.exp',X8))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X10),s('type.num.num','const.closLang.max_app_0')))))),
  inference(definition_folding,[],[f28,f30])).
fof(f30,plain,(
  sP0 <=> (! [X3,X4,X5,X6] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X5),s('type.num.num','const.closLang.max_app_0')))) | s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',X5),s('type.closLang.exp',X3))) != s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X6),s('type.closLang.exp',X4))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num','const.closLang.max_app_0'))))) & p(s(bool,'T_0')) & p(s(bool,'T_0')) & p(s(bool,'T_0')))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP0])])).
fof(f28,plain,(
  (! [X3,X4,X5,X6] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X5),s('type.num.num','const.closLang.max_app_0')))) | s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',X5),s('type.closLang.exp',X3))) != s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X6),s('type.closLang.exp',X4))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num','const.closLang.max_app_0'))))) & p(s(bool,'T_0')) & p(s(bool,'T_0')) & p(s(bool,'T_0'))) <~> ! [X7,X8,X9,X10] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num','const.closLang.max_app_0')))) | s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',X9),s('type.closLang.exp',X7))) != s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X10),s('type.closLang.exp',X8))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X10),s('type.num.num','const.closLang.max_app_0')))))),
  inference(flattening,[],[f27])).
fof(f27,plain,(
  (! [X3,X4,X5,X6] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X5),s('type.num.num','const.closLang.max_app_0')))) | s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',X5),s('type.closLang.exp',X3))) != s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X6),s('type.closLang.exp',X4)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num','const.closLang.max_app_0'))))) & p(s(bool,'T_0')) & p(s(bool,'T_0')) & p(s(bool,'T_0'))) <~> ! [X7,X8,X9,X10] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num','const.closLang.max_app_0')))) | s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',X9),s('type.closLang.exp',X7))) != s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X10),s('type.closLang.exp',X8)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X10),s('type.num.num','const.closLang.max_app_0')))))),
  inference(ennf_transformation,[],[f15])).
fof(f15,plain,(
  ~((! [X3,X4,X5,X6] : ((p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X5),s('type.num.num','const.closLang.max_app_0')))) & s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',X5),s('type.closLang.exp',X3))) = s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X6),s('type.closLang.exp',X4)))) => p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num','const.closLang.max_app_0'))))) & p(s(bool,'T_0')) & p(s(bool,'T_0')) & p(s(bool,'T_0'))) <=> ! [X7,X8,X9,X10] : ((p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num','const.closLang.max_app_0')))) & s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',X9),s('type.closLang.exp',X7))) = s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X10),s('type.closLang.exp',X8)))) => p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X10),s('type.num.num','const.closLang.max_app_0'))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~((! [X6,X7,X8,X9] : ((p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X8),s('type.num.num','const.closLang.max_app_0')))) & s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',X8),s('type.closLang.exp',X6))) = s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X9),s('type.closLang.exp',X7)))) => p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num','const.closLang.max_app_0'))))) & ! [X10] : p(s(bool,'T_0')) & ! [X11] : p(s(bool,'T_0')) & ! [X10] : p(s(bool,'T_0'))) <=> ! [X6,X7,X8,X9] : ((p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X8),s('type.num.num','const.closLang.max_app_0')))) & s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',X8),s('type.closLang.exp',X6))) = s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X9),s('type.closLang.exp',X7)))) => p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num','const.closLang.max_app_0'))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  (! [X6,X7,X8,X9] : ((p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X8),s('type.num.num','const.closLang.max_app_0')))) & s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',X8),s('type.closLang.exp',X6))) = s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X9),s('type.closLang.exp',X7)))) => p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num','const.closLang.max_app_0'))))) & ! [X10] : p(s(bool,'T_0')) & ! [X11] : p(s(bool,'T_0')) & ! [X10] : p(s(bool,'T_0'))) <=> ! [X6,X7,X8,X9] : ((p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X8),s('type.num.num','const.closLang.max_app_0')))) & s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',X8),s('type.closLang.exp',X6))) = s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X9),s('type.closLang.exp',X7)))) => p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num','const.closLang.max_app_0')))))),
  file('thm.clos_mtiProof.clos_mtiProof_|49|8_prove_ltb','thm.clos_mtiProof.clos_mtiProof_|49|8_prove_ltb')).
fof(f1133,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num','const.closLang.max_app_0'))) | $spl62),
  inference(cnf_transformation,[],[f1133_D])).
fof(f1133_D,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num','const.closLang.max_app_0'))) <=> ~$spl62),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl62])])).
fof(f345,plain,(
  ( ! [X9] : (s(bool,'T_0') = s(bool,X9)) ) | $spl28),
  inference(cnf_transformation,[],[f345_D])).
fof(f345_D,plain,(
  ( ! [X9] : (s(bool,'T_0') = s(bool,X9)) ) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f1131,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num','const.closLang.max_app_0')))) ) | ($spl8 | $spl21)),
  inference(subsumption_resolution,[],[f1119,f117])).
fof(f117,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) | $spl21),
  inference(superposition,[],[f112,f67])).
fof(f67,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.clos_mtiProof.clos_mtiProof_|49|8_prove_ltb',aHL_BOOL_CASES)).
fof(f1119,plain,(
  ( ! [X1] : (p(s(bool,X1)) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num','const.closLang.max_app_0')))) ) | $spl8),
  inference(superposition,[],[f102,f115])).
fof(f115,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f67,f67])).
fof(f102,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num','const.closLang.max_app_0')))) | $spl8),
  inference(cnf_transformation,[],[f102_D])).
fof(f102_D,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num','const.closLang.max_app_0')))) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f96,plain,(
  ~p(s(bool,'T_0')) | $spl3),
  inference(cnf_transformation,[],[f96_D])).
fof(f96_D,plain,(
  ~p(s(bool,'T_0')) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f98,plain,(
  sP0 | $spl4),
  inference(cnf_transformation,[],[f98_D])).
fof(f98_D,plain,(
  sP0 <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f90,plain,(
  sP0 | ~p(s(bool,'T_0')) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num','const.closLang.max_app_0'))))),
  inference(duplicate_literal_removal,[],[f57])).
fof(f57,plain,(
  sP0 | ~p(s(bool,'T_0')) | ~p(s(bool,'T_0')) | ~p(s(bool,'T_0')) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num','const.closLang.max_app_0'))))),
  inference(cnf_transformation,[],[f35])).
fof(f35,plain,(
  (~sP0 | (! [X4,X5,X6,X7] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num','const.closLang.max_app_0')))) | s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',X6),s('type.closLang.exp',X4))) != s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X7),s('type.closLang.exp',X5))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num','const.closLang.max_app_0'))))) & p(s(bool,'T_0')) & p(s(bool,'T_0')) & p(s(bool,'T_0')))) & ((p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num','const.closLang.max_app_0')))) & s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',sK3),s('type.closLang.exp',sK1))) = s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK4),s('type.closLang.exp',sK2))) & ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK4),s('type.num.num','const.closLang.max_app_0'))))) | ~p(s(bool,'T_0')) | ~p(s(bool,'T_0')) | ~p(s(bool,'T_0')) | sP0)),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK1,sK2,sK3,sK4])],[f34])).
fof(f34,plain,(
  (~sP0 | (! [X4,X5,X6,X7] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num','const.closLang.max_app_0')))) | s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',X6),s('type.closLang.exp',X4))) != s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X7),s('type.closLang.exp',X5))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num','const.closLang.max_app_0'))))) & p(s(bool,'T_0')) & p(s(bool,'T_0')) & p(s(bool,'T_0')))) & (? [X0,X1,X2,X3] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.closLang.max_app_0')))) & s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',X2),s('type.closLang.exp',X0))) = s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X3),s('type.closLang.exp',X1))) & ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X3),s('type.num.num','const.closLang.max_app_0'))))) | ~p(s(bool,'T_0')) | ~p(s(bool,'T_0')) | ~p(s(bool,'T_0')) | sP0)),
  inference(rectify,[],[f33])).
fof(f33,plain,(
  (~sP0 | (! [X3,X4,X5,X6] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X5),s('type.num.num','const.closLang.max_app_0')))) | s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',X5),s('type.closLang.exp',X3))) != s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X6),s('type.closLang.exp',X4))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num','const.closLang.max_app_0'))))) & p(s(bool,'T_0')) & p(s(bool,'T_0')) & p(s(bool,'T_0')))) & (? [X3,X4,X5,X6] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X5),s('type.num.num','const.closLang.max_app_0')))) & s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',X5),s('type.closLang.exp',X3))) = s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X6),s('type.closLang.exp',X4))) & ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num','const.closLang.max_app_0'))))) | ~p(s(bool,'T_0')) | ~p(s(bool,'T_0')) | ~p(s(bool,'T_0')) | sP0)),
  inference(flattening,[],[f32])).
fof(f32,plain,(
  (~sP0 | (! [X3,X4,X5,X6] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X5),s('type.num.num','const.closLang.max_app_0')))) | s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',X5),s('type.closLang.exp',X3))) != s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X6),s('type.closLang.exp',X4))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num','const.closLang.max_app_0'))))) & p(s(bool,'T_0')) & p(s(bool,'T_0')) & p(s(bool,'T_0')))) & ((? [X3,X4,X5,X6] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X5),s('type.num.num','const.closLang.max_app_0')))) & s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',X5),s('type.closLang.exp',X3))) = s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X6),s('type.closLang.exp',X4))) & ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num','const.closLang.max_app_0'))))) | ~p(s(bool,'T_0')) | ~p(s(bool,'T_0')) | ~p(s(bool,'T_0'))) | sP0)),
  inference(nnf_transformation,[],[f30])).
fof(f103,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',X6),s('type.closLang.exp',X4))) != s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X7),s('type.closLang.exp',X5))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num','const.closLang.max_app_0')))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num','const.closLang.max_app_0'))))) ) | $spl10),
  inference(cnf_transformation,[],[f103_D])).
fof(f103_D,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',X6),s('type.closLang.exp',X4))) != s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X7),s('type.closLang.exp',X5))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num','const.closLang.max_app_0')))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num','const.closLang.max_app_0'))))) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f53,plain,(
  ( ! [X6,X4,X7,X5] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num','const.closLang.max_app_0')))) | s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',X6),s('type.closLang.exp',X4))) != s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X7),s('type.closLang.exp',X5))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num','const.closLang.max_app_0')))) | ~sP0) )),
  inference(cnf_transformation,[],[f35])).
fof(f60,plain,(
  ( ! [X6,X4,X7,X5] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num','const.closLang.max_app_0')))) | s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',X6),s('type.closLang.exp',X4))) != s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X7),s('type.closLang.exp',X5))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num','const.closLang.max_app_0')))) | sP0) )),
  inference(cnf_transformation,[],[f38])).
fof(f100,plain,(
  s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',sK3),s('type.closLang.exp',sK1))) = s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK4),s('type.closLang.exp',sK2))) | $spl6),
  inference(cnf_transformation,[],[f100_D])).
fof(f100_D,plain,(
  s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',sK3),s('type.closLang.exp',sK1))) = s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK4),s('type.closLang.exp',sK2))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f91,plain,(
  sP0 | ~p(s(bool,'T_0')) | s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',sK3),s('type.closLang.exp',sK1))) = s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK4),s('type.closLang.exp',sK2)))),
  inference(duplicate_literal_removal,[],[f58])).
fof(f58,plain,(
  sP0 | ~p(s(bool,'T_0')) | ~p(s(bool,'T_0')) | ~p(s(bool,'T_0')) | s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',sK3),s('type.closLang.exp',sK1))) = s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK4),s('type.closLang.exp',sK2)))),
  inference(cnf_transformation,[],[f35])).
fof(f2137,plain,(
  $false | ($spl2 | $spl6 | $spl10 | $spl21 | $spl62 | $spl72)),
  inference(subsumption_resolution,[],[f2136,f95])).
fof(f2136,plain,(
  ~p(s(bool,'T_0')) | ($spl6 | $spl10 | $spl21 | $spl62 | $spl72)),
  inference(forward_demodulation,[],[f2135,f1133])).
fof(f2135,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num','const.closLang.max_app_0')))) | ($spl6 | $spl10 | $spl21 | $spl72)),
  inference(equality_resolution,[],[f1465])).
fof(f1465,plain,(
  ( ! [X2,X3] : (s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',sK3),s('type.closLang.exp',sK1))) != s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',X2),s('type.closLang.exp',X3))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.closLang.max_app_0'))))) ) | ($spl6 | $spl10 | $spl21 | $spl72)),
  inference(subsumption_resolution,[],[f1464,f112])).
fof(f1464,plain,(
  ( ! [X2,X3] : (p(s(bool,'F_0')) | s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',sK3),s('type.closLang.exp',sK1))) != s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',X2),s('type.closLang.exp',X3))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.closLang.max_app_0'))))) ) | ($spl6 | $spl10 | $spl72)),
  inference(forward_demodulation,[],[f1462,f1308])).
fof(f1462,plain,(
  ( ! [X2,X3] : (s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',sK3),s('type.closLang.exp',sK1))) != s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',X2),s('type.closLang.exp',X3))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.closLang.max_app_0')))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK4),s('type.num.num','const.closLang.max_app_0'))))) ) | ($spl6 | $spl10)),
  inference(superposition,[],[f103,f100])).
fof(f107,plain,(
  s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',sK7),s('type.closLang.exp',sK5))) = s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK8),s('type.closLang.exp',sK6))) | $spl14),
  inference(cnf_transformation,[],[f107_D])).
fof(f107_D,plain,(
  s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',sK7),s('type.closLang.exp',sK5))) = s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK8),s('type.closLang.exp',sK6))) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f62,plain,(
  s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',sK7),s('type.closLang.exp',sK5))) = s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',sK8),s('type.closLang.exp',sK6))) | ~sP0),
  inference(cnf_transformation,[],[f38])).
fof(f2438,plain,(
  $false | ($spl2 | $spl16 | $spl21 | $spl98)),
  inference(subsumption_resolution,[],[f2437,f95])).
fof(f2437,plain,(
  ~p(s(bool,'T_0')) | ($spl16 | $spl21 | $spl98)),
  inference(forward_demodulation,[],[f2436,f123])).
fof(f123,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK7),s('type.num.num','const.closLang.max_app_0'))) | ($spl16 | $spl21)),
  inference(subsumption_resolution,[],[f120,f112])).
fof(f120,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK7),s('type.num.num','const.closLang.max_app_0'))) | $spl16),
  inference(superposition,[],[f109,f67])).
fof(f2436,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK7),s('type.num.num','const.closLang.max_app_0')))) | $spl98),
  inference(equality_resolution,[],[f2142])).
fof(f104,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK8),s('type.num.num','const.closLang.max_app_0')))) | $spl12),
  inference(cnf_transformation,[],[f104_D])).
fof(f104_D,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK8),s('type.num.num','const.closLang.max_app_0')))) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f2142,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',sK7),s('type.closLang.exp',sK5))) != s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',X0),s('type.closLang.exp',X1))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.closLang.max_app_0'))))) ) | $spl98),
  inference(cnf_transformation,[],[f2142_D])).
fof(f2142_D,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',sK7),s('type.closLang.exp',sK5))) != s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',X0),s('type.closLang.exp',X1))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.closLang.max_app_0'))))) ) <=> ~$spl98),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl98])])).
fof(f1461,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',sK7),s('type.closLang.exp',sK5))) != s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_mti.collect_args_2'(s('type.num.num',X0),s('type.closLang.exp',X1))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.closLang.max_app_0')))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK8),s('type.num.num','const.closLang.max_app_0'))))) ) | ($spl10 | $spl14)),
  inference(superposition,[],[f103,f107])).
fof(f109,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK7),s('type.num.num','const.closLang.max_app_0')))) | $spl16),
  inference(cnf_transformation,[],[f109_D])).
fof(f109_D,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK7),s('type.num.num','const.closLang.max_app_0')))) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f61,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK7),s('type.num.num','const.closLang.max_app_0')))) | ~sP0),
  inference(cnf_transformation,[],[f38])).
fof(f94,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK4),s('type.num.num','const.closLang.max_app_0')))) | $spl1),
  inference(cnf_transformation,[],[f94_D])).
fof(f94_D,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK4),s('type.num.num','const.closLang.max_app_0')))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f92,plain,(
  sP0 | ~p(s(bool,'T_0')) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK4),s('type.num.num','const.closLang.max_app_0'))))),
  inference(duplicate_literal_removal,[],[f59])).
fof(f59,plain,(
  sP0 | ~p(s(bool,'T_0')) | ~p(s(bool,'T_0')) | ~p(s(bool,'T_0')) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK4),s('type.num.num','const.closLang.max_app_0'))))),
  inference(cnf_transformation,[],[f35])).
fof(f1109,plain,(
  ( ! [X6] : (s(bool,X6) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK4),s('type.num.num','const.closLang.max_app_0'))) | s(bool,'T_0') = s(bool,X6)) ) | $spl56),
  inference(cnf_transformation,[],[f1109_D])).
fof(f1109_D,plain,(
  ( ! [X6] : (s(bool,X6) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK4),s('type.num.num','const.closLang.max_app_0'))) | s(bool,'T_0') = s(bool,X6)) ) <=> ~$spl56),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl56])])).
fof(f1106,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK4),s('type.num.num','const.closLang.max_app_0'))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl1 | $spl2)),
  inference(subsumption_resolution,[],[f1094,f95])).
fof(f1094,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s(bool,X0) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK4),s('type.num.num','const.closLang.max_app_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl1),
  inference(superposition,[],[f94,f115])).
fof(f112,plain,(
  ~p(s(bool,'F_0')) | $spl21),
  inference(cnf_transformation,[],[f112_D])).
fof(f112_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl21),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl21])])).
fof(f66,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f16])).
fof(f16,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.clos_mtiProof.clos_mtiProof_|49|8_prove_ltb',aHL_FALSITY)).
fof(f95,plain,(
  p(s(bool,'T_0')) | $spl2),
  inference(cnf_transformation,[],[f95_D])).
fof(f95_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f64,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.clos_mtiProof.clos_mtiProof_|49|8_prove_ltb',aHL_TRUTH)).
fof(f398,plain,(
  $false | ($spl2 | $spl21 | $spl28)),
  inference(subsumption_resolution,[],[f351,f95])).
fof(f351,plain,(
  ~p(s(bool,'T_0')) | ($spl21 | $spl28)),
  inference(backward_demodulation,[],[f345,f112])).
fof(f1308,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK4),s('type.num.num','const.closLang.max_app_0'))) | $spl72),
  inference(cnf_transformation,[],[f1308_D])).
fof(f1308_D,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK4),s('type.num.num','const.closLang.max_app_0'))) <=> ~$spl72),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl72])])).
fof(f1306,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK4),s('type.num.num','const.closLang.max_app_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl56),
  inference(duplicate_literal_removal,[],[f1218])).
fof(f1218,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK4),s('type.num.num','const.closLang.max_app_0'))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl56),
  inference(superposition,[],[f1109,f67])).
% SZS output end Proof for thm.clos_mtiProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 52
% Passive clauses: 191
% Generated clauses: 2309
% Final active clauses: 28
% Final passive clauses: 113
% Input formulas: 13
% Initial clauses: 35
% 
% Duplicate literals: 288
% Trivial inequalities: 50
% Fw subsumption resolutions: 183
% Fw demodulations: 65
% Bw demodulations: 11
% 
% Simple tautologies: 87
% Equational tautologies: 44
% Forward subsumptions: 1107
% 
% Binary resolution: 20
% Forward superposition: 722
% Backward superposition: 598
% Self superposition: 142
% Equality factoring: 132
% Equality resolution: 4
% 
% Split clauses: 178
% Split components: 359
% SAT solver clauses: 318
% SAT solver unit clauses: 17
% SAT solver binary clauses: 75
% SAT solver learnt clauses: 7
% SAT solver learnt literals: 10
% 
% Sat splits: 178
% Sat splitting refutations: 9
% 
% TWLsolver clauses: 311
% TWLsolver calls for satisfiability: 41
% 
% Memory used [KB]: 1407
% Time elapsed: 0.064 s
% ------------------------------
% ------------------------------
% Success in time 0.07 s
