Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.bvl_to_bviProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.bvl_to_bviProof
% SZS output start Proof for thm.bvl_to_bviProof
fof(f5799,plain,(
  $false),
  inference(subsumption_resolution,[],[f55,f5727])).
fof(f5727,plain,(
  ( ! [X0,X1] : (s('type.bvlSem.v','const.bvlSem.Boolv_1'(s(bool,X0))) = s('type.bvlSem.v','const.bvl_to_bviProof.adjust_bv_2'(s(fun('type.num.num','type.num.num'),X1),s('type.bvlSem.v','const.bvlSem.Boolv_1'(s(bool,X0)))))) )),
  inference(superposition,[],[f3290,f62])).
fof(f62,plain,(
  ( ! [X0] : (s('type.bvlSem.v','const.bvlSem.Boolv_1'(s(bool,X0))) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num','const.clos_to_bvl.bool_to_tag_1'(s(bool,X0))),s('type.list.list'('type.bvlSem.v'),'const.list.NIL_0')))) )),
  inference(cnf_transformation,[],[f28])).
fof(f28,plain,(
  ! [X0] : s('type.bvlSem.v','const.bvlSem.Boolv_1'(s(bool,X0))) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num','const.clos_to_bvl.bool_to_tag_1'(s(bool,X0))),s('type.list.list'('type.bvlSem.v'),'const.list.NIL_0')))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X7] : s('type.bvlSem.v','const.bvlSem.Boolv_1'(s(bool,X7))) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num','const.clos_to_bvl.bool_to_tag_1'(s(bool,X7))),s('type.list.list'('type.bvlSem.v'),'const.list.NIL_0')))),
  file('thm.bvl_to_bviProof.adjust_bv_Boolv','thm.bvlSem.Boolv_def')).
fof(f3290,plain,(
  ( ! [X0,X1] : (s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X1),s('type.list.list'('type.bvlSem.v'),'const.list.NIL_0'))) = s('type.bvlSem.v','const.bvl_to_bviProof.adjust_bv_2'(s(fun('type.num.num','type.num.num'),X0),s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X1),s('type.list.list'('type.bvlSem.v'),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f2669,f74])).
fof(f74,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X1),'const.list.NIL_0') = s('type.list.list'(X1),'const.list.MAP_2'(s(fun(X0,X1),X2),s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(cnf_transformation,[],[f42])).
fof(f42,plain,(
  ! [X0,X1,X2] : s('type.list.list'(X1),'const.list.NIL_0') = s('type.list.list'(X1),'const.list.MAP_2'(s(fun(X0,X1),X2),s('type.list.list'(X0),'const.list.NIL_0')))),
  inference(flattening,[],[f41])).
fof(f41,plain,(
  ! [X0,X1] : ! [X2] : s('type.list.list'(X1),'const.list.NIL_0') = s('type.list.list'(X1),'const.list.MAP_2'(s(fun(X0,X1),X2),s('type.list.list'(X0),'const.list.NIL_0')))),
  inference(rectify,[],[f22])).
fof(f22,axiom,(
  ! [X10,X9] : ! [X19] : s('type.list.list'(X9),'const.list.NIL_0') = s('type.list.list'(X9),'const.list.MAP_2'(s(fun(X10,X9),X19),s('type.list.list'(X10),'const.list.NIL_0')))),
  file('thm.bvl_to_bviProof.adjust_bv_Boolv','thm.list.MAP|split|0')).
fof(f2669,plain,(
  ( ! [X2,X0,X1] : (s('type.bvlSem.v','const.bvl_to_bviProof.adjust_bv_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X1),s('type.list.list'('type.bvlSem.v'),X0))))) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X1),s('type.list.list'('type.bvlSem.v'),'const.list.MAP_2'(s(fun('type.bvlSem.v','type.bvlSem.v'),'const.bvl_to_bviProof.adjust_bv_1'(s(fun('type.num.num','type.num.num'),X2))),s('type.list.list'('type.bvlSem.v'),X0)))))) )),
  inference(forward_demodulation,[],[f78,f70])).
fof(f70,plain,(
  ( ! [X0,X1] : (s('type.bvlSem.v','const.bvl_to_bviProof.adjust_bv_2'(s(fun('type.num.num','type.num.num'),X0),s('type.bvlSem.v',X1))) = s('type.bvlSem.v',happ(s(fun('type.bvlSem.v','type.bvlSem.v'),'const.bvl_to_bviProof.adjust_bv_1'(s(fun('type.num.num','type.num.num'),X0))),s('type.bvlSem.v',X1)))) )),
  inference(cnf_transformation,[],[f37])).
fof(f37,plain,(
  ! [X0,X1] : s('type.bvlSem.v','const.bvl_to_bviProof.adjust_bv_2'(s(fun('type.num.num','type.num.num'),X0),s('type.bvlSem.v',X1))) = s('type.bvlSem.v',happ(s(fun('type.bvlSem.v','type.bvlSem.v'),'const.bvl_to_bviProof.adjust_bv_1'(s(fun('type.num.num','type.num.num'),X0))),s('type.bvlSem.v',X1)))),
  inference(rectify,[],[f24])).
fof(f24,axiom,(
  ! [X21,X22] : s('type.bvlSem.v','const.bvl_to_bviProof.adjust_bv_2'(s(fun('type.num.num','type.num.num'),X21),s('type.bvlSem.v',X22))) = s('type.bvlSem.v',happ(s(fun('type.bvlSem.v','type.bvlSem.v'),'const.bvl_to_bviProof.adjust_bv_1'(s(fun('type.num.num','type.num.num'),X21))),s('type.bvlSem.v',X22)))),
  file('thm.bvl_to_bviProof.adjust_bv_Boolv','ARITY_1_2_const.bvl_to_bviProof.adjust_bv')).
fof(f78,plain,(
  ( ! [X2,X0,X1] : (s('type.bvlSem.v',happ(s(fun('type.bvlSem.v','type.bvlSem.v'),'const.bvl_to_bviProof.adjust_bv_1'(s(fun('type.num.num','type.num.num'),X2))),s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X1),s('type.list.list'('type.bvlSem.v'),X0))))) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X1),s('type.list.list'('type.bvlSem.v'),'const.list.MAP_2'(s(fun('type.bvlSem.v','type.bvlSem.v'),'const.bvl_to_bviProof.adjust_bv_1'(s(fun('type.num.num','type.num.num'),X2))),s('type.list.list'('type.bvlSem.v'),X0)))))) )),
  inference(cnf_transformation,[],[f49])).
fof(f49,plain,(
  ! [X0,X1,X2] : s('type.bvlSem.v',happ(s(fun('type.bvlSem.v','type.bvlSem.v'),'const.bvl_to_bviProof.adjust_bv_1'(s(fun('type.num.num','type.num.num'),X2))),s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X1),s('type.list.list'('type.bvlSem.v'),X0))))) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X1),s('type.list.list'('type.bvlSem.v'),'const.list.MAP_2'(s(fun('type.bvlSem.v','type.bvlSem.v'),'const.bvl_to_bviProof.adjust_bv_1'(s(fun('type.num.num','type.num.num'),X2))),s('type.list.list'('type.bvlSem.v'),X0)))))),
  inference(rectify,[],[f18])).
fof(f18,axiom,(
  ! [X17,X18,X7] : s('type.bvlSem.v',happ(s(fun('type.bvlSem.v','type.bvlSem.v'),'const.bvl_to_bviProof.adjust_bv_1'(s(fun('type.num.num','type.num.num'),X7))),s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X18),s('type.list.list'('type.bvlSem.v'),X17))))) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X18),s('type.list.list'('type.bvlSem.v'),'const.list.MAP_2'(s(fun('type.bvlSem.v','type.bvlSem.v'),'const.bvl_to_bviProof.adjust_bv_1'(s(fun('type.num.num','type.num.num'),X7))),s('type.list.list'('type.bvlSem.v'),X17)))))),
  file('thm.bvl_to_bviProof.adjust_bv_Boolv','thm.bvl_to_bviProof.adjust_bv_def|split|4')).
fof(f55,plain,(
  s('type.bvlSem.v','const.bvlSem.Boolv_1'(s(bool,sK1))) != s('type.bvlSem.v','const.bvl_to_bviProof.adjust_bv_2'(s(fun('type.num.num','type.num.num'),sK0),s('type.bvlSem.v','const.bvlSem.Boolv_1'(s(bool,sK1)))))),
  inference(cnf_transformation,[],[f52])).
fof(f52,plain,(
  s('type.bvlSem.v','const.bvlSem.Boolv_1'(s(bool,sK1))) != s('type.bvlSem.v','const.bvl_to_bviProof.adjust_bv_2'(s(fun('type.num.num','type.num.num'),sK0),s('type.bvlSem.v','const.bvlSem.Boolv_1'(s(bool,sK1)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1])],[f50])).
fof(f50,plain,(
  ? [X0,X1] : s('type.bvlSem.v','const.bvlSem.Boolv_1'(s(bool,X1))) != s('type.bvlSem.v','const.bvl_to_bviProof.adjust_bv_2'(s(fun('type.num.num','type.num.num'),X0),s('type.bvlSem.v','const.bvlSem.Boolv_1'(s(bool,X1)))))),
  inference(ennf_transformation,[],[f25])).
fof(f25,plain,(
  ~! [X0,X1] : s('type.bvlSem.v','const.bvlSem.Boolv_1'(s(bool,X1))) = s('type.bvlSem.v','const.bvl_to_bviProof.adjust_bv_2'(s(fun('type.num.num','type.num.num'),X0),s('type.bvlSem.v','const.bvlSem.Boolv_1'(s(bool,X1)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : s('type.bvlSem.v','const.bvlSem.Boolv_1'(s(bool,X7))) = s('type.bvlSem.v','const.bvl_to_bviProof.adjust_bv_2'(s(fun('type.num.num','type.num.num'),X6),s('type.bvlSem.v','const.bvlSem.Boolv_1'(s(bool,X7)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : s('type.bvlSem.v','const.bvlSem.Boolv_1'(s(bool,X7))) = s('type.bvlSem.v','const.bvl_to_bviProof.adjust_bv_2'(s(fun('type.num.num','type.num.num'),X6),s('type.bvlSem.v','const.bvlSem.Boolv_1'(s(bool,X7)))))),
  file('thm.bvl_to_bviProof.adjust_bv_Boolv','thm.bvl_to_bviProof.adjust_bv_Boolv')).
% SZS output end Proof for thm.bvl_to_bviProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 72
% Passive clauses: 629
% Generated clauses: 5590
% Final active clauses: 67
% Final passive clauses: 515
% Input formulas: 23
% Initial clauses: 24
% 
% Duplicate literals: 331
% Trivial inequalities: 59
% Fw subsumption resolutions: 376
% Fw demodulations: 390
% Bw demodulations: 1
% 
% Simple tautologies: 80
% Equational tautologies: 22
% Forward subsumptions: 3608
% Fw demodulations to eq. taut.: 9
% 
% Binary resolution: 12
% Forward superposition: 2352
% Backward superposition: 1858
% Self superposition: 117
% Equality factoring: 41
% Equality resolution: 1
% 
% Split clauses: 66
% Split components: 132
% SAT solver clauses: 118
% SAT solver unit clauses: 9
% SAT solver binary clauses: 46
% 
% Sat splits: 66
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 118
% TWLsolver calls for satisfiability: 40
% 
% Memory used [KB]: 3837
% Time elapsed: 0.175 s
% ------------------------------
% ------------------------------
% Success in time 0.166 s
