Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.exh_to_patProof
% (12491)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 118
% Passive clauses: 2014
% Generated clauses: 21010
% Final active clauses: 114
% Final passive clauses: 1819
% Input formulas: 14
% Initial clauses: 15
% 
% Duplicate literals: 1491
% Trivial inequalities: 110
% Fw subsumption resolutions: 2331
% Fw demodulations: 3718
% Bw demodulations: 2
% 
% Simple tautologies: 238
% Equational tautologies: 22
% Forward subsumptions: 9902
% Fw demodulations to eq. taut.: 1
% 
% Binary resolution: 11
% Forward superposition: 8487
% Backward superposition: 4552
% Self superposition: 158
% Equality factoring: 50
% Equality resolution: 11
% 
% Split clauses: 665
% Split components: 1341
% SAT solver clauses: 1260
% SAT solver unit clauses: 12
% SAT solver binary clauses: 128
% 
% Sat splits: 665
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 1257
% TWLsolver calls for satisfiability: 114
% 
% Memory used [KB]: 12792
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 144 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.exh_to_patProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.exh_to_patProof
% SZS output start Proof for thm.exh_to_patProof
fof(f2431,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f2430,f37,f54,f1647,f1648,f1349,f1357,f42,f61,f47,f64,f1643,f1644,f40,f58,f49,f66,f50,f67])).
fof(f67,plain,(
  ( ! [X0,X1] : (s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bindn_2'(s('type.num.num',X0),s(fun('type.num.num',fun('type.num.num',bool)),X1))) = s(fun('type.num.num',fun('type.num.num',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.num.num',fun('type.num.num',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.num.num',fun('type.num.num',bool)))),'const.exh_to_patProof.bindn_0'),s('type.num.num',X0))),s(fun('type.num.num',fun('type.num.num',bool)),X1)))) ) | $spl20),
  inference(cnf_transformation,[],[f67_D])).
fof(f67_D,plain,(
  ( ! [X0,X1] : (s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bindn_2'(s('type.num.num',X0),s(fun('type.num.num',fun('type.num.num',bool)),X1))) = s(fun('type.num.num',fun('type.num.num',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.num.num',fun('type.num.num',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.num.num',fun('type.num.num',bool)))),'const.exh_to_patProof.bindn_0'),s('type.num.num',X0))),s(fun('type.num.num',fun('type.num.num',bool)),X1)))) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f50,plain,(
  ( ! [X0,X1] : (s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bindn_2'(s('type.num.num',X0),s(fun('type.num.num',fun('type.num.num',bool)),X1))) = s(fun('type.num.num',fun('type.num.num',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.num.num',fun('type.num.num',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.num.num',fun('type.num.num',bool)))),'const.exh_to_patProof.bindn_0'),s('type.num.num',X0))),s(fun('type.num.num',fun('type.num.num',bool)),X1)))) )),
  inference(cnf_transformation,[],[f29])).
fof(f29,plain,(
  ! [X0,X1] : s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bindn_2'(s('type.num.num',X0),s(fun('type.num.num',fun('type.num.num',bool)),X1))) = s(fun('type.num.num',fun('type.num.num',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.num.num',fun('type.num.num',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.num.num',fun('type.num.num',bool)))),'const.exh_to_patProof.bindn_0'),s('type.num.num',X0))),s(fun('type.num.num',fun('type.num.num',bool)),X1)))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X11,X12] : s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bindn_2'(s('type.num.num',X11),s(fun('type.num.num',fun('type.num.num',bool)),X12))) = s(fun('type.num.num',fun('type.num.num',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.num.num',fun('type.num.num',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.num.num',fun('type.num.num',bool)))),'const.exh_to_patProof.bindn_0'),s('type.num.num',X11))),s(fun('type.num.num',fun('type.num.num',bool)),X12)))),
  file('thm.exh_to_patProof.bind_bindn|split|1','ARITY_0_2_const.exh_to_patProof.bindn')).
fof(f66,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,'const.arithmetic.FUNPOW_3'(s(fun(X0,X0),X1),s('type.num.num',X2),s(X0,X3))) = s(X0,happ(s(fun(X0,X0),happ(s(fun('type.num.num',fun(X0,X0)),'const.arithmetic.FUNPOW_1'(s(fun(X0,X0),X1))),s('type.num.num',X2))),s(X0,X3)))) ) | $spl18),
  inference(cnf_transformation,[],[f66_D])).
fof(f66_D,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,'const.arithmetic.FUNPOW_3'(s(fun(X0,X0),X1),s('type.num.num',X2),s(X0,X3))) = s(X0,happ(s(fun(X0,X0),happ(s(fun('type.num.num',fun(X0,X0)),'const.arithmetic.FUNPOW_1'(s(fun(X0,X0),X1))),s('type.num.num',X2))),s(X0,X3)))) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f49,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,'const.arithmetic.FUNPOW_3'(s(fun(X0,X0),X1),s('type.num.num',X2),s(X0,X3))) = s(X0,happ(s(fun(X0,X0),happ(s(fun('type.num.num',fun(X0,X0)),'const.arithmetic.FUNPOW_1'(s(fun(X0,X0),X1))),s('type.num.num',X2))),s(X0,X3)))) )),
  inference(cnf_transformation,[],[f28])).
fof(f28,plain,(
  ! [X0,X1,X2,X3] : s(X0,'const.arithmetic.FUNPOW_3'(s(fun(X0,X0),X1),s('type.num.num',X2),s(X0,X3))) = s(X0,happ(s(fun(X0,X0),happ(s(fun('type.num.num',fun(X0,X0)),'const.arithmetic.FUNPOW_1'(s(fun(X0,X0),X1))),s('type.num.num',X2))),s(X0,X3)))),
  inference(flattening,[],[f27])).
fof(f27,plain,(
  ! [X0] : ! [X1,X2,X3] : s(X0,'const.arithmetic.FUNPOW_3'(s(fun(X0,X0),X1),s('type.num.num',X2),s(X0,X3))) = s(X0,happ(s(fun(X0,X0),happ(s(fun('type.num.num',fun(X0,X0)),'const.arithmetic.FUNPOW_1'(s(fun(X0,X0),X1))),s('type.num.num',X2))),s(X0,X3)))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X8] : ! [X11,X12,X13] : s(X8,'const.arithmetic.FUNPOW_3'(s(fun(X8,X8),X11),s('type.num.num',X12),s(X8,X13))) = s(X8,happ(s(fun(X8,X8),happ(s(fun('type.num.num',fun(X8,X8)),'const.arithmetic.FUNPOW_1'(s(fun(X8,X8),X11))),s('type.num.num',X12))),s(X8,X13)))),
  file('thm.exh_to_patProof.bind_bindn|split|1','ARITY_1_3_const.arithmetic.FUNPOW')).
fof(f58,plain,(
  s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.num.num',fun('type.num.num',bool)))),'const.exh_to_patProof.bindn_0') = s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.num.num',fun('type.num.num',bool)))),'const.arithmetic.FUNPOW_1'(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.num.num',fun('type.num.num',bool))),'const.exh_to_patProof.bind_0'))) | $spl4),
  inference(cnf_transformation,[],[f58_D])).
fof(f58_D,plain,(
  s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.num.num',fun('type.num.num',bool)))),'const.exh_to_patProof.bindn_0') = s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.num.num',fun('type.num.num',bool)))),'const.arithmetic.FUNPOW_1'(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.num.num',fun('type.num.num',bool))),'const.exh_to_patProof.bind_0'))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f40,plain,(
  s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.num.num',fun('type.num.num',bool)))),'const.exh_to_patProof.bindn_0') = s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.num.num',fun('type.num.num',bool)))),'const.arithmetic.FUNPOW_1'(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.num.num',fun('type.num.num',bool))),'const.exh_to_patProof.bind_0')))),
  inference(cnf_transformation,[],[f12])).
fof(f12,axiom,(
  s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.num.num',fun('type.num.num',bool)))),'const.exh_to_patProof.bindn_0') = s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.num.num',fun('type.num.num',bool)))),'const.arithmetic.FUNPOW_1'(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.num.num',fun('type.num.num',bool))),'const.exh_to_patProof.bind_0')))),
  file('thm.exh_to_patProof.bind_bindn|split|1','thm.exh_to_patProof.bindn_def')).
fof(f1644,plain,(
  ( ! [X0,X1] : (s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bindn_2'(s('type.num.num',X0),s(fun('type.num.num',fun('type.num.num',bool)),X1))) = s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.FUNPOW_3'(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.num.num',fun('type.num.num',bool))),'const.exh_to_patProof.bind_0'),s('type.num.num',X0),s(fun('type.num.num',fun('type.num.num',bool)),X1)))) ) | $spl252),
  inference(cnf_transformation,[],[f1644_D])).
fof(f1644_D,plain,(
  ( ! [X0,X1] : (s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bindn_2'(s('type.num.num',X0),s(fun('type.num.num',fun('type.num.num',bool)),X1))) = s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.FUNPOW_3'(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.num.num',fun('type.num.num',bool))),'const.exh_to_patProof.bind_0'),s('type.num.num',X0),s(fun('type.num.num',fun('type.num.num',bool)),X1)))) ) <=> ~$spl252),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl252])])).
fof(f1643,plain,(
  ( ! [X0,X1] : (s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bindn_2'(s('type.num.num',X0),s(fun('type.num.num',fun('type.num.num',bool)),X1))) = s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.FUNPOW_3'(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.num.num',fun('type.num.num',bool))),'const.exh_to_patProof.bind_0'),s('type.num.num',X0),s(fun('type.num.num',fun('type.num.num',bool)),X1)))) ) | ($spl4 | $spl18 | $spl20)),
  inference(forward_demodulation,[],[f1637,f67])).
fof(f1637,plain,(
  ( ! [X0,X1] : (s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.FUNPOW_3'(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.num.num',fun('type.num.num',bool))),'const.exh_to_patProof.bind_0'),s('type.num.num',X0),s(fun('type.num.num',fun('type.num.num',bool)),X1))) = s(fun('type.num.num',fun('type.num.num',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.num.num',fun('type.num.num',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.num.num',fun('type.num.num',bool)))),'const.exh_to_patProof.bindn_0'),s('type.num.num',X0))),s(fun('type.num.num',fun('type.num.num',bool)),X1)))) ) | ($spl4 | $spl18)),
  inference(superposition,[],[f66,f58])).
fof(f64,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,'const.arithmetic.FUNPOW_3'(s(fun(X0,X0),X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s(X0,X3))) = s(X0,'const.arithmetic.FUNPOW_3'(s(fun(X0,X0),X1),s('type.num.num',X2),s(X0,happ(s(fun(X0,X0),X1),s(X0,X3)))))) ) | $spl14),
  inference(cnf_transformation,[],[f64_D])).
fof(f64_D,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,'const.arithmetic.FUNPOW_3'(s(fun(X0,X0),X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s(X0,X3))) = s(X0,'const.arithmetic.FUNPOW_3'(s(fun(X0,X0),X1),s('type.num.num',X2),s(X0,happ(s(fun(X0,X0),X1),s(X0,X3)))))) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f47,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,'const.arithmetic.FUNPOW_3'(s(fun(X0,X0),X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s(X0,X3))) = s(X0,'const.arithmetic.FUNPOW_3'(s(fun(X0,X0),X1),s('type.num.num',X2),s(X0,happ(s(fun(X0,X0),X1),s(X0,X3)))))) )),
  inference(cnf_transformation,[],[f24])).
fof(f24,plain,(
  ! [X0,X1,X2,X3] : s(X0,'const.arithmetic.FUNPOW_3'(s(fun(X0,X0),X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s(X0,X3))) = s(X0,'const.arithmetic.FUNPOW_3'(s(fun(X0,X0),X1),s('type.num.num',X2),s(X0,happ(s(fun(X0,X0),X1),s(X0,X3)))))),
  inference(flattening,[],[f23])).
fof(f23,plain,(
  ! [X0] : ! [X1,X2,X3] : s(X0,'const.arithmetic.FUNPOW_3'(s(fun(X0,X0),X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s(X0,X3))) = s(X0,'const.arithmetic.FUNPOW_3'(s(fun(X0,X0),X1),s('type.num.num',X2),s(X0,happ(s(fun(X0,X0),X1),s(X0,X3)))))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X8] : ! [X9,X6,X10] : s(X8,'const.arithmetic.FUNPOW_3'(s(fun(X8,X8),X9),s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))),s(X8,X10))) = s(X8,'const.arithmetic.FUNPOW_3'(s(fun(X8,X8),X9),s('type.num.num',X6),s(X8,happ(s(fun(X8,X8),X9),s(X8,X10)))))),
  file('thm.exh_to_patProof.bind_bindn|split|1','thm.arithmetic.FUNPOW|split|1')).
fof(f61,plain,(
  ( ! [X0] : (s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),X0))) = s(fun('type.num.num',fun('type.num.num',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.num.num',fun('type.num.num',bool))),'const.exh_to_patProof.bind_0'),s(fun('type.num.num',fun('type.num.num',bool)),X0)))) ) | $spl8),
  inference(cnf_transformation,[],[f61_D])).
fof(f61_D,plain,(
  ( ! [X0] : (s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),X0))) = s(fun('type.num.num',fun('type.num.num',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.num.num',fun('type.num.num',bool))),'const.exh_to_patProof.bind_0'),s(fun('type.num.num',fun('type.num.num',bool)),X0)))) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f42,plain,(
  ( ! [X0] : (s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),X0))) = s(fun('type.num.num',fun('type.num.num',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.num.num',fun('type.num.num',bool))),'const.exh_to_patProof.bind_0'),s(fun('type.num.num',fun('type.num.num',bool)),X0)))) )),
  inference(cnf_transformation,[],[f18])).
fof(f18,plain,(
  ! [X0] : s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),X0))) = s(fun('type.num.num',fun('type.num.num',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.num.num',fun('type.num.num',bool))),'const.exh_to_patProof.bind_0'),s(fun('type.num.num',fun('type.num.num',bool)),X0)))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X11] : s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),X11))) = s(fun('type.num.num',fun('type.num.num',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.num.num',fun('type.num.num',bool))),'const.exh_to_patProof.bind_0'),s(fun('type.num.num',fun('type.num.num',bool)),X11)))),
  file('thm.exh_to_patProof.bind_bindn|split|1','ARITY_0_1_const.exh_to_patProof.bind')).
fof(f1357,plain,(
  ( ! [X0,X1] : (s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.FUNPOW_3'(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.num.num',fun('type.num.num',bool))),'const.exh_to_patProof.bind_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s(fun('type.num.num',fun('type.num.num',bool)),X0))) = s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.FUNPOW_3'(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.num.num',fun('type.num.num',bool))),'const.exh_to_patProof.bind_0'),s('type.num.num',X1),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),X0)))))) ) | $spl232),
  inference(cnf_transformation,[],[f1357_D])).
fof(f1357_D,plain,(
  ( ! [X0,X1] : (s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.FUNPOW_3'(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.num.num',fun('type.num.num',bool))),'const.exh_to_patProof.bind_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s(fun('type.num.num',fun('type.num.num',bool)),X0))) = s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.FUNPOW_3'(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.num.num',fun('type.num.num',bool))),'const.exh_to_patProof.bind_0'),s('type.num.num',X1),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),X0)))))) ) <=> ~$spl232),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl232])])).
fof(f1349,plain,(
  ( ! [X0,X1] : (s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.FUNPOW_3'(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.num.num',fun('type.num.num',bool))),'const.exh_to_patProof.bind_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s(fun('type.num.num',fun('type.num.num',bool)),X0))) = s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.FUNPOW_3'(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.num.num',fun('type.num.num',bool))),'const.exh_to_patProof.bind_0'),s('type.num.num',X1),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),X0)))))) ) | ($spl8 | $spl14)),
  inference(superposition,[],[f64,f61])).
fof(f1648,plain,(
  ( ! [X0,X1] : (s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bindn_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s(fun('type.num.num',fun('type.num.num',bool)),X0))) = s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bindn_2'(s('type.num.num',X1),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),X0)))))) ) | $spl254),
  inference(cnf_transformation,[],[f1648_D])).
fof(f1648_D,plain,(
  ( ! [X0,X1] : (s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bindn_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s(fun('type.num.num',fun('type.num.num',bool)),X0))) = s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bindn_2'(s('type.num.num',X1),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),X0)))))) ) <=> ~$spl254),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl254])])).
fof(f1647,plain,(
  ( ! [X0,X1] : (s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bindn_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s(fun('type.num.num',fun('type.num.num',bool)),X0))) = s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bindn_2'(s('type.num.num',X1),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),X0)))))) ) | ($spl232 | $spl252)),
  inference(forward_demodulation,[],[f1645,f1644])).
fof(f1645,plain,(
  ( ! [X0,X1] : (s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bindn_2'(s('type.num.num',X1),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),X0))))) = s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.FUNPOW_3'(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.num.num',fun('type.num.num',bool))),'const.exh_to_patProof.bind_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s(fun('type.num.num',fun('type.num.num',bool)),X0)))) ) | ($spl232 | $spl252)),
  inference(backward_demodulation,[],[f1644,f1357])).
fof(f54,plain,(
  s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bindn_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))),s(fun('type.num.num',fun('type.num.num',bool)),sK1))) != s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bindn_2'(s('type.num.num',sK0),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),sK1))))) | $spl1),
  inference(cnf_transformation,[],[f54_D])).
fof(f54_D,plain,(
  s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bindn_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))),s(fun('type.num.num',fun('type.num.num',bool)),sK1))) != s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bindn_2'(s('type.num.num',sK0),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),sK1))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f37,plain,(
  s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bindn_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))),s(fun('type.num.num',fun('type.num.num',bool)),sK1))) != s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bindn_2'(s('type.num.num',sK0),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),sK1)))))),
  inference(cnf_transformation,[],[f34])).
fof(f34,plain,(
  s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bindn_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))),s(fun('type.num.num',fun('type.num.num',bool)),sK1))) != s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bindn_2'(s('type.num.num',sK0),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),sK1)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1])],[f32])).
fof(f32,plain,(
  ? [X0,X1] : s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bindn_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s(fun('type.num.num',fun('type.num.num',bool)),X1))) != s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bindn_2'(s('type.num.num',X0),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),X1)))))),
  inference(ennf_transformation,[],[f16])).
fof(f16,plain,(
  ~! [X0,X1] : s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bindn_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s(fun('type.num.num',fun('type.num.num',bool)),X1))) = s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bindn_2'(s('type.num.num',X0),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),X1)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bindn_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))),s(fun('type.num.num',fun('type.num.num',bool)),X7))) = s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bindn_2'(s('type.num.num',X6),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),X7)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bindn_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))),s(fun('type.num.num',fun('type.num.num',bool)),X7))) = s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bindn_2'(s('type.num.num',X6),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),X7)))))),
  file('thm.exh_to_patProof.bind_bindn|split|1','thm.exh_to_patProof.bind_bindn|split|1')).
fof(f2430,plain,(
  $false | ($spl1 | $spl254)),
  inference(trivial_inequality_removal,[],[f2422])).
fof(f2422,plain,(
  s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bindn_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))),s(fun('type.num.num',fun('type.num.num',bool)),sK1))) != s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bindn_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK0))),s(fun('type.num.num',fun('type.num.num',bool)),sK1))) | ($spl1 | $spl254)),
  inference(superposition,[],[f54,f1648])).
% SZS output end Proof for thm.exh_to_patProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 38
% Passive clauses: 188
% Generated clauses: 2330
% Final active clauses: 34
% Final passive clauses: 129
% Input formulas: 14
% Initial clauses: 15
% 
% Duplicate literals: 211
% Trivial inequalities: 41
% Fw subsumption resolutions: 87
% Fw demodulations: 109
% Bw demodulations: 21
% Condensations: 300
% 
% Simple tautologies: 62
% Equational tautologies: 20
% Forward subsumptions: 988
% 
% Binary resolution: 4
% Forward superposition: 738
% Backward superposition: 489
% Self superposition: 75
% Equality factoring: 46
% Equality resolution: 4
% 
% Split clauses: 38
% Split components: 84
% SAT solver clauses: 340
% SAT solver unit clauses: 26
% SAT solver binary clauses: 24
% SAT solver learnt clauses: 1
% 
% Sat splits: 38
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 339
% TWLsolver calls for satisfiability: 55
% 
% Memory used [KB]: 3326
% Time elapsed: 0.156 s
% ------------------------------
% ------------------------------
% Success in time 0.775 s
