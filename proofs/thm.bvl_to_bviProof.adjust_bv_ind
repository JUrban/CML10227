Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.bvl_to_bviProof
% (78315)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 158
% Passive clauses: 2266
% Generated clauses: 25986
% Final active clauses: 143
% Final passive clauses: 1961
% Input formulas: 21
% Initial clauses: 41
% 
% Duplicate literals: 1331
% Trivial inequalities: 35
% Fw subsumption resolutions: 2541
% Fw demodulations: 5334
% Bw demodulations: 12
% 
% Simple tautologies: 166
% Equational tautologies: 25
% Forward subsumptions: 13081
% 
% Binary resolution: 265
% Forward superposition: 9742
% Backward superposition: 6736
% Self superposition: 159
% Equality factoring: 40
% Equality resolution: 2
% 
% Split clauses: 608
% Split components: 1224
% SAT solver clauses: 1133
% SAT solver unit clauses: 3
% SAT solver binary clauses: 96
% 
% Sat splits: 608
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 1133
% TWLsolver calls for satisfiability: 140
% 
% Memory used [KB]: 16630
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.bvl_to_bviProof
% (78364)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 128
% Passive clauses: 1298
% Generated clauses: 15031
% Final active clauses: 99
% Final passive clauses: 1013
% Input formulas: 21
% Initial clauses: 41
% 
% Duplicate literals: 528
% Trivial inequalities: 38
% Fw subsumption resolutions: 722
% Fw demodulations: 1904
% Bw demodulations: 181
% Condensations: 913
% Global subsumptions: 5
% 
% Simple tautologies: 128
% Equational tautologies: 27
% Forward subsumptions: 7319
% Bw demodulations to eq. taut.: 2
% 
% Binary resolution: 288
% Forward superposition: 5306
% Backward superposition: 3557
% Self superposition: 127
% Equality factoring: 50
% 
% Split clauses: 142
% Split components: 292
% SAT solver clauses: 2125
% SAT solver unit clauses: 63
% SAT solver binary clauses: 33
% SAT solver learnt clauses: 10
% 
% Sat splits: 142
% Sat splitting refutations: 8
% 
% TWLsolver clauses: 2105
% TWLsolver calls for satisfiability: 346
% 
% Memory used [KB]: 25074
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.bvl_to_bviProof
% (78408)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 417
% Passive clauses: 12038
% Generated clauses: 91286
% Final active clauses: 29
% Final passive clauses: 42
% Input formulas: 21
% Initial clauses: 41
% Discarded non-redundant clauses: 858
% 
% Duplicate literals: 2650
% Trivial inequalities: 337
% Fw subsumption resolutions: 2981
% Fw demodulations: 10010
% Bw demodulations: 9632
% Condensations: 4395
% Global subsumptions: 1992
% 
% Simple tautologies: 558
% Equational tautologies: 406
% Forward subsumptions: 52797
% Fw demodulations to eq. taut.: 8
% Bw demodulations to eq. taut.: 293
% 
% Unit resulting resolution: 2311
% Forward superposition: 19884
% Backward superposition: 14510
% Self superposition: 466
% Equality factoring: 212
% Equality resolution: 24
% 
% Split clauses: 299
% Split components: 609
% SAT solver clauses: 16690
% SAT solver unit clauses: 139
% SAT solver binary clauses: 3923
% 
% Sat splits: 299
% Sat splitting refutations: 2059
% 
% Memory used [KB]: 81747
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 32 next slice time: 32
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.bvl_to_bviProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.bvl_to_bviProof
% SZS output start Proof for thm.bvl_to_bviProof
fof(f705,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f89,f90,f91,f106,f104,f100,f158,f108,f162,f110,f166,f112,f102,f368,f391,f485,f487,f585,f587,f590,f610,f612,f616,f630,f628,f676,f109,f678,f692])).
fof(f692,plain,(
  $false | ($spl12 | $spl15)),
  inference(subsumption_resolution,[],[f691,f84])).
fof(f84,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f33])).
fof(f33,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.bvl_to_bviProof.adjust_bv_ind',aHL_FALSITY)).
fof(f691,plain,(
  p(s(bool,'F_0')) | ($spl12 | $spl15)),
  inference(forward_demodulation,[],[f683,f636])).
fof(f636,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v',sK1(sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),sK8(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),sK2)))) | $spl15),
  inference(resolution,[],[f411,f112])).
fof(f411,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),X0))),s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X2),s('type.list.list'('type.bvlSem.v'),X1)))))) | s(bool,'F_0') = s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),X0))),s('type.bvlSem.v',sK1(X1,X2,X0))))) )),
  inference(subsumption_resolution,[],[f401,f85])).
fof(f85,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f13])).
fof(f13,axiom,(
  p(s(bool,'T_0'))),
  file('thm.bvl_to_bviProof.adjust_bv_ind','thm.bool.TRUTH')).
fof(f401,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),X0))),s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X2),s('type.list.list'('type.bvlSem.v'),X1)))))) | s(bool,'F_0') = s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),X0))),s('type.bvlSem.v',sK1(X1,X2,X0))))) )),
  inference(superposition,[],[f64,f88])).
fof(f88,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.bvl_to_bviProof.adjust_bv_ind',aHL_BOOL_CASES)).
fof(f64,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),X3))),s('type.bvlSem.v',sK1(X5,X4,X3))))) | p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),X3))),s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X4),s('type.list.list'('type.bvlSem.v'),X5))))))) )),
  inference(cnf_transformation,[],[f46])).
fof(f46,plain,(
  ! [X13,X14] : p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),X13))),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',X14)))))) & ! [X11,X12] : p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),X11))),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X12)))))) & ! [X9,X10] : p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),X9))),s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',X10)))))) & ! [X7,X8] : p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),X7))),s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X8)))))) & ! [X3,X4,X5] : ((p(s(bool,'const.bool.IN_2'(s('type.bvlSem.v',sK1(X5,X4,X3)),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),X5)))))) & ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),X3))),s('type.bvlSem.v',sK1(X5,X4,X3)))))) | p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),X3))),s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X4),s('type.list.list'('type.bvlSem.v'),X5))))))) & ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v',sK3))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3])],[f45])).
fof(f45,plain,(
  ? [X0] : (! [X13,X14] : p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),X0),s(fun('type.num.num','type.num.num'),X13))),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',X14)))))) & ! [X11,X12] : p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),X0),s(fun('type.num.num','type.num.num'),X11))),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X12)))))) & ! [X9,X10] : p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),X0),s(fun('type.num.num','type.num.num'),X9))),s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',X10)))))) & ! [X7,X8] : p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),X0),s(fun('type.num.num','type.num.num'),X7))),s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X8)))))) & ! [X3,X4,X5] : (? [X6] : (p(s(bool,'const.bool.IN_2'(s('type.bvlSem.v',X6),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),X5)))))) & ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),X0),s(fun('type.num.num','type.num.num'),X3))),s('type.bvlSem.v',X6))))) | p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),X0),s(fun('type.num.num','type.num.num'),X3))),s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X4),s('type.list.list'('type.bvlSem.v'),X5))))))) & ? [X1,X2] : ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),X0),s(fun('type.num.num','type.num.num'),X1))),s('type.bvlSem.v',X2)))))),
  inference(rectify,[],[f37])).
fof(f37,plain,(
  ? [X0] : (! [X11,X12] : p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),X0),s(fun('type.num.num','type.num.num'),X11))),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',X12)))))) & ! [X9,X10] : p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),X0),s(fun('type.num.num','type.num.num'),X9))),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X10)))))) & ! [X7,X8] : p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),X0),s(fun('type.num.num','type.num.num'),X7))),s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',X8)))))) & ! [X5,X6] : p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),X0),s(fun('type.num.num','type.num.num'),X5))),s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X6)))))) & ! [X1,X2,X3] : (? [X4] : (p(s(bool,'const.bool.IN_2'(s('type.bvlSem.v',X4),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),X3)))))) & ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),X0),s(fun('type.num.num','type.num.num'),X1))),s('type.bvlSem.v',X4))))) | p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),X0),s(fun('type.num.num','type.num.num'),X1))),s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X2),s('type.list.list'('type.bvlSem.v'),X3))))))) & ? [X13,X14] : ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),X0),s(fun('type.num.num','type.num.num'),X13))),s('type.bvlSem.v',X14)))))),
  inference(flattening,[],[f36])).
fof(f36,plain,(
  ? [X0] : ((! [X11,X12] : p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),X0),s(fun('type.num.num','type.num.num'),X11))),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',X12)))))) & ! [X9,X10] : p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),X0),s(fun('type.num.num','type.num.num'),X9))),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X10)))))) & ! [X7,X8] : p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),X0),s(fun('type.num.num','type.num.num'),X7))),s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',X8)))))) & ! [X5,X6] : p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),X0),s(fun('type.num.num','type.num.num'),X5))),s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X6)))))) & ! [X1,X2,X3] : (? [X4] : (p(s(bool,'const.bool.IN_2'(s('type.bvlSem.v',X4),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),X3)))))) & ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),X0),s(fun('type.num.num','type.num.num'),X1))),s('type.bvlSem.v',X4))))) | p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),X0),s(fun('type.num.num','type.num.num'),X1))),s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X2),s('type.list.list'('type.bvlSem.v'),X3)))))))) & ? [X13,X14] : ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),X0),s(fun('type.num.num','type.num.num'),X13))),s('type.bvlSem.v',X14)))))),
  inference(ennf_transformation,[],[f23])).
fof(f23,plain,(
  ~! [X0] : ((! [X11,X12] : p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),X0),s(fun('type.num.num','type.num.num'),X11))),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',X12)))))) & ! [X9,X10] : p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),X0),s(fun('type.num.num','type.num.num'),X9))),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X10)))))) & ! [X7,X8] : p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),X0),s(fun('type.num.num','type.num.num'),X7))),s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',X8)))))) & ! [X5,X6] : p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),X0),s(fun('type.num.num','type.num.num'),X5))),s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X6)))))) & ! [X1,X2,X3] : (! [X4] : (p(s(bool,'const.bool.IN_2'(s('type.bvlSem.v',X4),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),X3)))))) => p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),X0),s(fun('type.num.num','type.num.num'),X1))),s('type.bvlSem.v',X4))))) => p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),X0),s(fun('type.num.num','type.num.num'),X1))),s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X2),s('type.list.list'('type.bvlSem.v'),X3)))))))) => ! [X13,X14] : p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),X0),s(fun('type.num.num','type.num.num'),X13))),s('type.bvlSem.v',X14)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ((! [X7,X8] : p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),X6),s(fun('type.num.num','type.num.num'),X7))),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',X8)))))) & ! [X7,X9] : p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),X6),s(fun('type.num.num','type.num.num'),X7))),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X9)))))) & ! [X7,X10] : p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),X6),s(fun('type.num.num','type.num.num'),X7))),s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',X10)))))) & ! [X7,X11] : p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),X6),s(fun('type.num.num','type.num.num'),X7))),s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X11)))))) & ! [X7,X12,X13] : (! [X14] : (p(s(bool,'const.bool.IN_2'(s('type.bvlSem.v',X14),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),X13)))))) => p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),X6),s(fun('type.num.num','type.num.num'),X7))),s('type.bvlSem.v',X14))))) => p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),X6),s(fun('type.num.num','type.num.num'),X7))),s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X12),s('type.list.list'('type.bvlSem.v'),X13)))))))) => ! [X15,X16] : p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),X6),s(fun('type.num.num','type.num.num'),X15))),s('type.bvlSem.v',X16)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ((! [X7,X8] : p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),X6),s(fun('type.num.num','type.num.num'),X7))),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',X8)))))) & ! [X7,X9] : p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),X6),s(fun('type.num.num','type.num.num'),X7))),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X9)))))) & ! [X7,X10] : p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),X6),s(fun('type.num.num','type.num.num'),X7))),s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',X10)))))) & ! [X7,X11] : p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),X6),s(fun('type.num.num','type.num.num'),X7))),s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X11)))))) & ! [X7,X12,X13] : (! [X14] : (p(s(bool,'const.bool.IN_2'(s('type.bvlSem.v',X14),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),X13)))))) => p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),X6),s(fun('type.num.num','type.num.num'),X7))),s('type.bvlSem.v',X14))))) => p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),X6),s(fun('type.num.num','type.num.num'),X7))),s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X12),s('type.list.list'('type.bvlSem.v'),X13)))))))) => ! [X15,X16] : p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),X6),s(fun('type.num.num','type.num.num'),X15))),s('type.bvlSem.v',X16)))))),
  file('thm.bvl_to_bviProof.adjust_bv_ind','thm.bvl_to_bviProof.adjust_bv_ind')).
fof(f683,plain,(
  p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v',sK1(sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),sK8(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),sK2))))) | ($spl12 | $spl15)),
  inference(resolution,[],[f467,f110])).
fof(f467,plain,(
  p(s(bool,'const.bool.IN_2'(s('type.bvlSem.v',sK1(sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),sK8(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),sK2)),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | $spl15),
  inference(resolution,[],[f112,f63])).
fof(f63,plain,(
  ( ! [X4,X5,X3] : (p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),X3))),s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X4),s('type.list.list'('type.bvlSem.v'),X5)))))) | p(s(bool,'const.bool.IN_2'(s('type.bvlSem.v',sK1(X5,X4,X3)),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),X5))))))) )),
  inference(cnf_transformation,[],[f46])).
fof(f678,plain,(
  ~p(s(bool,'const.bool.IN_2'(s('type.bvlSem.v',sK1(sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),sK8(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),sK2)),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | $spl25),
  inference(cnf_transformation,[],[f678_D])).
fof(f678_D,plain,(
  ~p(s(bool,'const.bool.IN_2'(s('type.bvlSem.v',sK1(sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),sK8(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),sK2)),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) <=> ~$spl25),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl25])])).
fof(f109,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v',X0))))) ) | $spl10),
  inference(cnf_transformation,[],[f109_D])).
fof(f109_D,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v',X0))))) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f676,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v',X0)))) | ~p(s(bool,'const.bool.IN_2'(s('type.bvlSem.v',sK1(sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),sK8(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),sK2)),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))))))) ) | $spl15),
  inference(subsumption_resolution,[],[f675,f75])).
fof(f75,plain,(
  ( ! [X0] : (p(s(bool,'T_0')) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f54])).
fof(f54,plain,(
  ! [X0] : (((p(s(bool,X0)) & ~p(s(bool,X0))) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | ~p(s(bool,X0)) | p(s(bool,X0))))),
  inference(flattening,[],[f53])).
fof(f53,plain,(
  ! [X0] : (((p(s(bool,X0)) & ~p(s(bool,X0))) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | (~p(s(bool,X0)) | p(s(bool,X0)))))),
  inference(nnf_transformation,[],[f41])).
fof(f41,plain,(
  ! [X0] : ((~p(s(bool,X0)) | p(s(bool,X0))) <=> p(s(bool,'T_0')))),
  inference(ennf_transformation,[],[f29])).
fof(f29,plain,(
  ! [X0] : ((p(s(bool,X0)) => p(s(bool,X0))) <=> p(s(bool,'T_0')))),
  inference(rectify,[],[f20])).
fof(f20,axiom,(
  ! [X20] : ((p(s(bool,X20)) => p(s(bool,X20))) <=> p(s(bool,'T_0')))),
  file('thm.bvl_to_bviProof.adjust_bv_ind','thm.bool.IMP_CLAUSES|split|3')).
fof(f675,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v',X0)))) | ~p(s(bool,'const.bool.IN_2'(s('type.bvlSem.v',sK1(sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),sK8(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),sK2)),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))))))) ) | $spl15),
  inference(forward_demodulation,[],[f674,f120])).
fof(f120,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),X2))),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',X3)))))) )),
  inference(subsumption_resolution,[],[f119,f84])).
fof(f119,plain,(
  ( ! [X2,X3] : (p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),X2))),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',X3)))))) )),
  inference(superposition,[],[f59,f88])).
fof(f59,plain,(
  ( ! [X14,X13] : (p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),X13))),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',X14))))))) )),
  inference(cnf_transformation,[],[f46])).
fof(f674,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v',X0)))) | ~p(s(bool,'const.bool.IN_2'(s('type.bvlSem.v',sK1(sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),sK8(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),sK2)),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',sK4(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))))))) ) | $spl15),
  inference(subsumption_resolution,[],[f673,f75])).
fof(f673,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v',X0)))) | ~p(s(bool,'const.bool.IN_2'(s('type.bvlSem.v',sK1(sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),sK8(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),sK2)),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',sK4(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))))))) ) | $spl15),
  inference(forward_demodulation,[],[f672,f270])).
fof(f270,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),X2))),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X3)))))) )),
  inference(subsumption_resolution,[],[f259,f84])).
fof(f259,plain,(
  ( ! [X2,X3] : (p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),X2))),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X3)))))) )),
  inference(superposition,[],[f60,f88])).
fof(f60,plain,(
  ( ! [X12,X11] : (p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),X11))),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X12))))))) )),
  inference(cnf_transformation,[],[f46])).
fof(f672,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v',X0)))) | ~p(s(bool,'const.bool.IN_2'(s('type.bvlSem.v',sK1(sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),sK8(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),sK2)),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK5(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',sK4(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))))))) ) | $spl15),
  inference(subsumption_resolution,[],[f671,f75])).
fof(f671,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v',X0)))) | ~p(s(bool,'const.bool.IN_2'(s('type.bvlSem.v',sK1(sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),sK8(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),sK2)),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK5(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',sK4(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))))))) ) | $spl15),
  inference(forward_demodulation,[],[f670,f140])).
fof(f140,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),X2))),s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X3)))))) )),
  inference(subsumption_resolution,[],[f135,f84])).
fof(f135,plain,(
  ( ! [X2,X3] : (p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),X2))),s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X3)))))) )),
  inference(superposition,[],[f62,f88])).
fof(f62,plain,(
  ( ! [X8,X7] : (p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),X7))),s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X8))))))) )),
  inference(cnf_transformation,[],[f46])).
fof(f670,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v',X0)))) | ~p(s(bool,'const.bool.IN_2'(s('type.bvlSem.v',sK1(sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),sK8(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),sK2)),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',sK6(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK5(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',sK4(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))))))) ) | $spl15),
  inference(subsumption_resolution,[],[f669,f75])).
fof(f669,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v',X0)))) | ~p(s(bool,'const.bool.IN_2'(s('type.bvlSem.v',sK1(sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),sK8(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),sK2)),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',sK6(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK5(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',sK4(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))))))) ) | $spl15),
  inference(forward_demodulation,[],[f668,f129])).
fof(f129,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),X2))),s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',X3)))))) )),
  inference(subsumption_resolution,[],[f126,f84])).
fof(f126,plain,(
  ( ! [X2,X3] : (p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),X2))),s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',X3)))))) )),
  inference(superposition,[],[f61,f88])).
fof(f61,plain,(
  ( ! [X10,X9] : (p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),X9))),s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',X10))))))) )),
  inference(cnf_transformation,[],[f46])).
fof(f668,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v',X0)))) | ~p(s(bool,'const.bool.IN_2'(s('type.bvlSem.v',sK1(sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),sK8(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),sK2)),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',sK7(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',sK6(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK5(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',sK4(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))))))) ) | $spl15),
  inference(subsumption_resolution,[],[f655,f83])).
fof(f83,plain,(
  ( ! [X0] : (p(s(bool,X0)) | ~p(s(bool,'F_0'))) )),
  inference(cnf_transformation,[],[f44])).
fof(f44,plain,(
  ! [X0] : (~p(s(bool,'F_0')) | p(s(bool,X0)))),
  inference(ennf_transformation,[],[f32])).
fof(f32,plain,(
  ! [X0] : (p(s(bool,'F_0')) => p(s(bool,X0)))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X20] : (p(s(bool,'F_0')) => p(s(bool,X20)))),
  file('thm.bvl_to_bviProof.adjust_bv_ind','thm.bool.FALSITY')).
fof(f655,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v',X0)))) | ~p(s(bool,'const.bool.IN_2'(s('type.bvlSem.v',sK1(sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),sK8(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),sK2)),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',sK7(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',sK6(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK5(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',sK4(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))))))) ) | $spl15),
  inference(superposition,[],[f66,f636])).
fof(f66,plain,(
  ( ! [X4,X0,X1] : (p(s(bool,happ(s(fun('type.bvlSem.v',bool),X0),s('type.bvlSem.v',X1)))) | p(s(bool,happ(s(fun('type.bvlSem.v',bool),X0),s('type.bvlSem.v',X4)))) | ~p(s(bool,'const.bool.IN_2'(s('type.bvlSem.v',X4),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),sK9(X0))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),X0),s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',sK7(X0))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),X0),s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',sK6(X0))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),X0),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK5(X0))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),X0),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',sK4(X0)))))))) )),
  inference(cnf_transformation,[],[f48])).
fof(f48,plain,(
  ! [X0] : (~p(s(bool,happ(s(fun('type.bvlSem.v',bool),X0),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',sK4(X0))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),X0),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK5(X0))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),X0),s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',sK6(X0))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),X0),s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',sK7(X0))))))) | (! [X4] : (~p(s(bool,'const.bool.IN_2'(s('type.bvlSem.v',X4),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),sK9(X0))))))) | p(s(bool,happ(s(fun('type.bvlSem.v',bool),X0),s('type.bvlSem.v',X4))))) & ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),X0),s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',sK8(X0)),s('type.list.list'('type.bvlSem.v'),sK9(X0)))))))) | ! [X1] : p(s(bool,happ(s(fun('type.bvlSem.v',bool),X0),s('type.bvlSem.v',X1)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK4,sK5,sK6,sK7,sK8,sK9])],[f47])).
fof(f47,plain,(
  ! [X0] : (? [X8] : ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),X0),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',X8)))))) | ? [X7] : ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),X0),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X7)))))) | ? [X6] : ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),X0),s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X6)))))) | ? [X5] : ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),X0),s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',X5)))))) | ? [X2,X3] : (! [X4] : (~p(s(bool,'const.bool.IN_2'(s('type.bvlSem.v',X4),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),X3)))))) | p(s(bool,happ(s(fun('type.bvlSem.v',bool),X0),s('type.bvlSem.v',X4))))) & ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),X0),s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X2),s('type.list.list'('type.bvlSem.v'),X3))))))) | ! [X1] : p(s(bool,happ(s(fun('type.bvlSem.v',bool),X0),s('type.bvlSem.v',X1)))))),
  inference(rectify,[],[f39])).
fof(f39,plain,(
  ! [X0] : (? [X7] : ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),X0),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',X7)))))) | ? [X6] : ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),X0),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X6)))))) | ? [X5] : ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),X0),s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X5)))))) | ? [X4] : ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),X0),s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',X4)))))) | ? [X1,X2] : (! [X3] : (~p(s(bool,'const.bool.IN_2'(s('type.bvlSem.v',X3),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),X2)))))) | p(s(bool,happ(s(fun('type.bvlSem.v',bool),X0),s('type.bvlSem.v',X3))))) & ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),X0),s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X1),s('type.list.list'('type.bvlSem.v'),X2))))))) | ! [X8] : p(s(bool,happ(s(fun('type.bvlSem.v',bool),X0),s('type.bvlSem.v',X8)))))),
  inference(flattening,[],[f38])).
fof(f38,plain,(
  ! [X0] : ((? [X7] : ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),X0),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',X7)))))) | ? [X6] : ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),X0),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X6)))))) | ? [X5] : ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),X0),s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X5)))))) | ? [X4] : ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),X0),s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',X4)))))) | ? [X1,X2] : (! [X3] : (~p(s(bool,'const.bool.IN_2'(s('type.bvlSem.v',X3),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),X2)))))) | p(s(bool,happ(s(fun('type.bvlSem.v',bool),X0),s('type.bvlSem.v',X3))))) & ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),X0),s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X1),s('type.list.list'('type.bvlSem.v'),X2)))))))) | ! [X8] : p(s(bool,happ(s(fun('type.bvlSem.v',bool),X0),s('type.bvlSem.v',X8)))))),
  inference(ennf_transformation,[],[f24])).
fof(f24,plain,(
  ! [X0] : ((! [X7] : p(s(bool,happ(s(fun('type.bvlSem.v',bool),X0),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',X7)))))) & ! [X6] : p(s(bool,happ(s(fun('type.bvlSem.v',bool),X0),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X6)))))) & ! [X5] : p(s(bool,happ(s(fun('type.bvlSem.v',bool),X0),s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X5)))))) & ! [X4] : p(s(bool,happ(s(fun('type.bvlSem.v',bool),X0),s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',X4)))))) & ! [X1,X2] : (! [X3] : (p(s(bool,'const.bool.IN_2'(s('type.bvlSem.v',X3),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),X2)))))) => p(s(bool,happ(s(fun('type.bvlSem.v',bool),X0),s('type.bvlSem.v',X3))))) => p(s(bool,happ(s(fun('type.bvlSem.v',bool),X0),s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X1),s('type.list.list'('type.bvlSem.v'),X2)))))))) => ! [X8] : p(s(bool,happ(s(fun('type.bvlSem.v',bool),X0),s('type.bvlSem.v',X8)))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6] : ((! [X17] : p(s(bool,happ(s(fun('type.bvlSem.v',bool),X6),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',X17)))))) & ! [X16] : p(s(bool,happ(s(fun('type.bvlSem.v',bool),X6),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X16)))))) & ! [X18] : p(s(bool,happ(s(fun('type.bvlSem.v',bool),X6),s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X18)))))) & ! [X19] : p(s(bool,happ(s(fun('type.bvlSem.v',bool),X6),s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',X19)))))) & ! [X12,X13] : (! [X14] : (p(s(bool,'const.bool.IN_2'(s('type.bvlSem.v',X14),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),X13)))))) => p(s(bool,happ(s(fun('type.bvlSem.v',bool),X6),s('type.bvlSem.v',X14))))) => p(s(bool,happ(s(fun('type.bvlSem.v',bool),X6),s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X12),s('type.list.list'('type.bvlSem.v'),X13)))))))) => ! [X15] : p(s(bool,happ(s(fun('type.bvlSem.v',bool),X6),s('type.bvlSem.v',X15)))))),
  file('thm.bvl_to_bviProof.adjust_bv_ind','thm.bvp_to_wordProps.get_refs_ind')).
fof(f628,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v',sK1(sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),X0,X1)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),X1))),s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X0),s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) ) | $spl20),
  inference(cnf_transformation,[],[f628_D])).
fof(f628_D,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v',sK1(sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),X0,X1)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),X1))),s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X0),s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f630,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl22),
  inference(cnf_transformation,[],[f630_D])).
fof(f630_D,plain,(
  s(bool,'T_0') = s(bool,'F_0') <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f616,plain,(
  ( ! [X4,X3] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),X4))),s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X3),s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v',sK1(sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),X3,X4))))) ) | $spl12),
  inference(superposition,[],[f440,f588])).
fof(f588,plain,(
  ( ! [X7] : (s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.bvlSem.v',X7),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v',X7)))) ) | $spl12),
  inference(subsumption_resolution,[],[f577,f84])).
fof(f577,plain,(
  ( ! [X7] : (p(s(bool,'F_0')) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.bvlSem.v',X7),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v',X7)))) ) | $spl12),
  inference(superposition,[],[f465,f88])).
fof(f465,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v',X0)))) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.bvlSem.v',X0),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) ) | $spl12),
  inference(subsumption_resolution,[],[f463,f85])).
fof(f463,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v',X0)))) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.bvlSem.v',X0),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) ) | $spl12),
  inference(superposition,[],[f110,f88])).
fof(f440,plain,(
  ( ! [X4,X5,X3] : (s(bool,'T_0') = s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),X5))),s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X4),s('type.list.list'('type.bvlSem.v'),X3))))) | s(bool,'T_0') = s(bool,'const.bool.IN_2'(s('type.bvlSem.v',sK1(X3,X4,X5)),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),X3)))))) )),
  inference(subsumption_resolution,[],[f439,f84])).
fof(f439,plain,(
  ( ! [X4,X5,X3] : (p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),X5))),s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X4),s('type.list.list'('type.bvlSem.v'),X3))))) | s(bool,'T_0') = s(bool,'const.bool.IN_2'(s('type.bvlSem.v',sK1(X3,X4,X5)),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),X3)))))) )),
  inference(superposition,[],[f388,f88])).
fof(f388,plain,(
  ( ! [X4,X5,X3] : (p(s(bool,'const.bool.IN_2'(s('type.bvlSem.v',sK1(X5,X4,X3)),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),X5)))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),X3))),s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X4),s('type.list.list'('type.bvlSem.v'),X5)))))) )),
  inference(subsumption_resolution,[],[f377,f83])).
fof(f377,plain,(
  ( ! [X4,X5,X3] : (p(s(bool,'F_0')) | p(s(bool,'const.bool.IN_2'(s('type.bvlSem.v',sK1(X5,X4,X3)),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),X5)))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),X3))),s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X4),s('type.list.list'('type.bvlSem.v'),X5)))))) )),
  inference(superposition,[],[f63,f88])).
fof(f612,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v',sK1(sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),X0,X1)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),X1))),s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X0),s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) ) | $spl12),
  inference(superposition,[],[f588,f440])).
fof(f610,plain,(
  $false | $spl10),
  inference(subsumption_resolution,[],[f602,f84])).
fof(f602,plain,(
  p(s(bool,'F_0')) | $spl10),
  inference(superposition,[],[f109,f113])).
fof(f113,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v',sK3)))),
  inference(subsumption_resolution,[],[f97,f85])).
fof(f97,plain,(
  ~p(s(bool,'T_0')) | s(bool,'F_0') = s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v',sK3)))),
  inference(superposition,[],[f65,f88])).
fof(f65,plain,(
  ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v',sK3))))),
  inference(cnf_transformation,[],[f46])).
fof(f590,plain,(
  $false | ($spl10 | $spl15)),
  inference(resolution,[],[f109,f112])).
fof(f587,plain,(
  s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',sK8(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))),s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))))) | $spl18),
  inference(cnf_transformation,[],[f587_D])).
fof(f587_D,plain,(
  s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',sK8(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))),s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))))) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f585,plain,(
  ( ! [X14] : (s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',sK8(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))),s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))))) | p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v',X14))))) ) | $spl12),
  inference(subsumption_resolution,[],[f584,f85])).
fof(f584,plain,(
  ( ! [X14] : (~p(s(bool,'T_0')) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',sK8(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))),s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))))) | p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v',X14))))) ) | $spl12),
  inference(forward_demodulation,[],[f583,f120])).
fof(f583,plain,(
  ( ! [X14] : (s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',sK8(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))),s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))))) | p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v',X14)))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',sK4(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))))))) ) | $spl12),
  inference(subsumption_resolution,[],[f582,f75])).
fof(f582,plain,(
  ( ! [X14] : (~p(s(bool,'T_0')) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',sK8(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))),s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))))) | p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v',X14)))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',sK4(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))))))) ) | $spl12),
  inference(forward_demodulation,[],[f581,f270])).
fof(f581,plain,(
  ( ! [X14] : (s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',sK8(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))),s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))))) | p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v',X14)))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK5(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',sK4(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))))))) ) | $spl12),
  inference(subsumption_resolution,[],[f580,f75])).
fof(f580,plain,(
  ( ! [X14] : (~p(s(bool,'T_0')) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',sK8(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))),s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))))) | p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v',X14)))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK5(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',sK4(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))))))) ) | $spl12),
  inference(forward_demodulation,[],[f579,f140])).
fof(f579,plain,(
  ( ! [X14] : (s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',sK8(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))),s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))))) | p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v',X14)))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',sK6(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK5(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',sK4(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))))))) ) | $spl12),
  inference(subsumption_resolution,[],[f578,f75])).
fof(f578,plain,(
  ( ! [X14] : (~p(s(bool,'T_0')) | s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',sK8(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))),s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))))) | p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v',X14)))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',sK6(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK5(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',sK4(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))))))) ) | $spl12),
  inference(forward_demodulation,[],[f567,f129])).
fof(f567,plain,(
  ( ! [X14] : (s(bool,'F_0') = s(bool,'const.bool.IN_2'(s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',sK8(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))),s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))))) | p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v',X14)))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',sK7(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',sK6(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK5(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',sK4(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))))))) ) | $spl12),
  inference(resolution,[],[f465,f67])).
fof(f67,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.bvlSem.v',bool),X0),s('type.bvlSem.v',X1)))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),X0),s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',sK8(X0)),s('type.list.list'('type.bvlSem.v'),sK9(X0))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),X0),s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',sK7(X0))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),X0),s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',sK6(X0))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),X0),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK5(X0))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),X0),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',sK4(X0)))))))) )),
  inference(cnf_transformation,[],[f48])).
fof(f487,plain,(
  ~p(s(bool,'const.bool.IN_2'(s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',sK8(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))),s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | $spl17),
  inference(cnf_transformation,[],[f487_D])).
fof(f487_D,plain,(
  ~p(s(bool,'const.bool.IN_2'(s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',sK8(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))),s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) <=> ~$spl17),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl17])])).
fof(f485,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v',X0)))) | ~p(s(bool,'const.bool.IN_2'(s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',sK8(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))),s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))))))) ) | $spl15),
  inference(subsumption_resolution,[],[f484,f75])).
fof(f484,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v',X0)))) | ~p(s(bool,'const.bool.IN_2'(s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',sK8(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))),s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))))))) ) | $spl15),
  inference(forward_demodulation,[],[f483,f120])).
fof(f483,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v',X0)))) | ~p(s(bool,'const.bool.IN_2'(s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',sK8(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))),s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',sK4(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))))))) ) | $spl15),
  inference(subsumption_resolution,[],[f482,f75])).
fof(f482,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v',X0)))) | ~p(s(bool,'const.bool.IN_2'(s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',sK8(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))),s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',sK4(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))))))) ) | $spl15),
  inference(forward_demodulation,[],[f481,f270])).
fof(f481,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v',X0)))) | ~p(s(bool,'const.bool.IN_2'(s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',sK8(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))),s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK5(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',sK4(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))))))) ) | $spl15),
  inference(subsumption_resolution,[],[f480,f75])).
fof(f480,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v',X0)))) | ~p(s(bool,'const.bool.IN_2'(s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',sK8(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))),s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK5(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',sK4(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))))))) ) | $spl15),
  inference(forward_demodulation,[],[f479,f140])).
fof(f479,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v',X0)))) | ~p(s(bool,'const.bool.IN_2'(s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',sK8(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))),s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',sK6(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK5(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',sK4(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))))))) ) | $spl15),
  inference(subsumption_resolution,[],[f478,f75])).
fof(f478,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v',X0)))) | ~p(s(bool,'const.bool.IN_2'(s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',sK8(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))),s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',sK6(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK5(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',sK4(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))))))) ) | $spl15),
  inference(forward_demodulation,[],[f468,f129])).
fof(f468,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v',X0)))) | ~p(s(bool,'const.bool.IN_2'(s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',sK8(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))),s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',sK7(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',sK6(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK5(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',sK4(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))))))) ) | $spl15),
  inference(resolution,[],[f112,f66])).
fof(f391,plain,(
  $false | $spl3),
  inference(subsumption_resolution,[],[f390,f86])).
fof(f86,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.bvl_to_bviProof.adjust_bv_ind',aHL_TRUTH)).
fof(f390,plain,(
  ~p(s(bool,'T_0')) | $spl3),
  inference(forward_demodulation,[],[f102,f270])).
fof(f368,plain,(
  $false | $spl1),
  inference(subsumption_resolution,[],[f367,f86])).
fof(f367,plain,(
  ~p(s(bool,'T_0')) | $spl1),
  inference(forward_demodulation,[],[f100,f120])).
fof(f102,plain,(
  ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK5(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | $spl3),
  inference(cnf_transformation,[],[f102_D])).
fof(f102_D,plain,(
  ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK5(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f112,plain,(
  ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',sK8(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))),s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | $spl15),
  inference(cnf_transformation,[],[f112_D])).
fof(f112_D,plain,(
  ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',sK8(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))),s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) <=> ~$spl15),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl15])])).
fof(f166,plain,(
  ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',sK8(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))),s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK5(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))))))),
  inference(subsumption_resolution,[],[f165,f59])).
fof(f165,plain,(
  ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',sK8(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))),s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK5(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',sK4(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))))))),
  inference(subsumption_resolution,[],[f164,f62])).
fof(f164,plain,(
  ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',sK8(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))),s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',sK6(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK5(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',sK4(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))))))),
  inference(subsumption_resolution,[],[f163,f61])).
fof(f163,plain,(
  ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',sK8(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))),s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',sK7(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',sK6(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK5(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',sK4(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))))))),
  inference(subsumption_resolution,[],[f145,f84])).
fof(f145,plain,(
  p(s(bool,'F_0')) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',sK8(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))),s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',sK7(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',sK6(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK5(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',sK4(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))))))),
  inference(superposition,[],[f67,f113])).
fof(f110,plain,(
  ( ! [X1] : (~p(s(bool,'const.bool.IN_2'(s('type.bvlSem.v',X1),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v',X1))))) ) | $spl12),
  inference(cnf_transformation,[],[f110_D])).
fof(f110_D,plain,(
  ( ! [X1] : (~p(s(bool,'const.bool.IN_2'(s('type.bvlSem.v',X1),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v',X1))))) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f162,plain,(
  ( ! [X1] : (p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v',X1)))) | ~p(s(bool,'const.bool.IN_2'(s('type.bvlSem.v',X1),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK5(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))))))) )),
  inference(subsumption_resolution,[],[f161,f59])).
fof(f161,plain,(
  ( ! [X1] : (p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v',X1)))) | ~p(s(bool,'const.bool.IN_2'(s('type.bvlSem.v',X1),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK5(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',sK4(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))))))) )),
  inference(subsumption_resolution,[],[f160,f62])).
fof(f160,plain,(
  ( ! [X1] : (p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v',X1)))) | ~p(s(bool,'const.bool.IN_2'(s('type.bvlSem.v',X1),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',sK6(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK5(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',sK4(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))))))) )),
  inference(subsumption_resolution,[],[f159,f61])).
fof(f159,plain,(
  ( ! [X1] : (p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v',X1)))) | ~p(s(bool,'const.bool.IN_2'(s('type.bvlSem.v',X1),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',sK7(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',sK6(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK5(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',sK4(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))))))) )),
  inference(subsumption_resolution,[],[f144,f83])).
fof(f144,plain,(
  ( ! [X1] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v',X1)))) | ~p(s(bool,'const.bool.IN_2'(s('type.bvlSem.v',X1),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',sK7(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',sK6(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK5(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',sK4(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))))))) )),
  inference(superposition,[],[f66,f113])).
fof(f108,plain,(
  ~p(s(bool,'const.bool.IN_2'(s('type.bvlSem.v',sK3),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | $spl9),
  inference(cnf_transformation,[],[f108_D])).
fof(f108_D,plain,(
  ~p(s(bool,'const.bool.IN_2'(s('type.bvlSem.v',sK3),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) <=> ~$spl9),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl9])])).
fof(f158,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v',X0)))) | ~p(s(bool,'const.bool.IN_2'(s('type.bvlSem.v',sK3),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK5(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))))))) )),
  inference(subsumption_resolution,[],[f157,f59])).
fof(f157,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v',X0)))) | ~p(s(bool,'const.bool.IN_2'(s('type.bvlSem.v',sK3),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK5(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',sK4(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))))))) )),
  inference(subsumption_resolution,[],[f156,f62])).
fof(f156,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v',X0)))) | ~p(s(bool,'const.bool.IN_2'(s('type.bvlSem.v',sK3),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',sK6(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK5(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',sK4(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))))))) )),
  inference(subsumption_resolution,[],[f155,f61])).
fof(f155,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v',X0)))) | ~p(s(bool,'const.bool.IN_2'(s('type.bvlSem.v',sK3),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',sK7(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',sK6(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK5(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',sK4(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))))))) )),
  inference(subsumption_resolution,[],[f143,f83])).
fof(f143,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v',X0)))) | ~p(s(bool,'const.bool.IN_2'(s('type.bvlSem.v',sK3),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',sK7(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',sK6(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK5(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',sK4(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))))))) )),
  inference(superposition,[],[f66,f113])).
fof(f100,plain,(
  ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',sK4(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | $spl1),
  inference(cnf_transformation,[],[f100_D])).
fof(f100_D,plain,(
  ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',sK4(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f104,plain,(
  ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',sK6(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | $spl5),
  inference(cnf_transformation,[],[f104_D])).
fof(f104_D,plain,(
  ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',sK6(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f106,plain,(
  ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',sK7(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | $spl7),
  inference(cnf_transformation,[],[f106_D])).
fof(f106_D,plain,(
  ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',sK7(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) <=> ~$spl7),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl7])])).
fof(f91,plain,(
  ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',sK8(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))),s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',sK7(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',sK6(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK5(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',sK4(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))))))),
  inference(resolution,[],[f65,f67])).
fof(f90,plain,(
  ( ! [X1] : (p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v',X1)))) | ~p(s(bool,'const.bool.IN_2'(s('type.bvlSem.v',X1),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',sK7(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',sK6(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK5(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',sK4(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))))))) )),
  inference(resolution,[],[f65,f66])).
fof(f89,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v',X0)))) | ~p(s(bool,'const.bool.IN_2'(s('type.bvlSem.v',sK3),s(fun('type.bvlSem.v',bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),sK9(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',sK7(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',sK6(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK5(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))))))))) | ~p(s(bool,happ(s(fun('type.bvlSem.v',bool),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2))),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',sK4(happ(s(fun(fun('type.num.num','type.num.num'),fun('type.bvlSem.v',bool)),sK0),s(fun('type.num.num','type.num.num'),sK2)))))))))) )),
  inference(resolution,[],[f65,f66])).
% SZS output end Proof for thm.bvl_to_bviProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 40
% Passive clauses: 68
% Generated clauses: 612
% Final active clauses: 33
% Final passive clauses: 40
% Input formulas: 21
% Initial clauses: 30
% 
% Selected by SInE selection: 14
% SInE iterations: 1
% 
% Duplicate literals: 20
% Fw subsumption resolutions: 213
% Fw demodulations: 58
% Bw demodulations: 6
% 
% Simple tautologies: 33
% Equational tautologies: 1
% Forward subsumptions: 210
% 
% Binary resolution: 100
% Forward superposition: 61
% Backward superposition: 135
% 
% Split clauses: 11
% Split components: 33
% SAT solver clauses: 17
% SAT solver unit clauses: 3
% SAT solver binary clauses: 4
% 
% Sat splits: 11
% Sat splitting refutations: 5
% 
% Memory used [KB]: 1663
% Time elapsed: 0.019 s
% ------------------------------
% ------------------------------
% Success in time 11.761 s
