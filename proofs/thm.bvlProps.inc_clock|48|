Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.bvlProps
% (9144)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 142
% Passive clauses: 1042
% Generated clauses: 13892
% Final active clauses: 124
% Final passive clauses: 658
% Input formulas: 48
% Initial clauses: 70
% 
% Duplicate literals: 379
% Trivial inequalities: 220
% Fw subsumption resolutions: 1419
% Fw demodulations: 1276
% Bw demodulations: 9
% 
% Simple tautologies: 240
% Equational tautologies: 30
% Forward subsumptions: 9001
% 
% Binary resolution: 21
% Forward superposition: 5648
% Backward superposition: 4487
% Self superposition: 209
% Equality factoring: 52
% Equality resolution: 50
% 
% Split clauses: 108
% Split components: 218
% SAT solver clauses: 317
% SAT solver unit clauses: 24
% SAT solver binary clauses: 95
% 
% Sat splits: 108
% Sat splitting refutations: 6
% 
% TWLsolver clauses: 315
% TWLsolver calls for satisfiability: 54
% 
% Memory used [KB]: 11257
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 144 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.bvlProps
% (9159)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit

% Active clauses: 117
% Passive clauses: 346
% Generated clauses: 10658
% Final active clauses: 112
% Final passive clauses: 221
% Input formulas: 48
% Initial clauses: 70
% 
% Duplicate literals: 402
% Trivial inequalities: 141
% Fw subsumption resolutions: 696
% Fw demodulations: 874
% Bw demodulations: 5
% Condensations: 1236
% Global subsumptions: 4
% 
% Simple tautologies: 167
% Equational tautologies: 29
% Forward subsumptions: 6248
% 
% Binary resolution: 15
% Forward superposition: 3720
% Backward superposition: 2997
% Self superposition: 141
% Equality factoring: 46
% Equality resolution: 45
% 
% Split clauses: 23
% Split components: 46
% SAT solver clauses: 591
% SAT solver unit clauses: 102
% SAT solver binary clauses: 42
% SAT solver learnt clauses: 8
% 
% Sat splits: 23
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 575
% TWLsolver calls for satisfiability: 278
% 
% Memory used [KB]: 9722
% Time elapsed: 0.725 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.bvlProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.bvlProps
% SZS output start Proof for thm.bvlProps
fof(f10173,plain,(
  $false),
  inference(unit_resulting_resolution,[],[f154,f8925,f8604,f8605,f8606,f8607,f213])).
fof(f213,plain,(
  ( ! [X2,X0,X1] : (s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),X1))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),X2))) | s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),X1))) != s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),X2))) | s('type.bvlSem.state'(X0),X1) = s('type.bvlSem.state'(X0),X2) | s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X1))) != s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X2))) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X2))) | s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X1))) != s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X2)))) )),
  inference(cnf_transformation,[],[f151])).
fof(f151,plain,(
  ! [X0,X1,X2] : ((s('type.bvlSem.state'(X0),X1) != s('type.bvlSem.state'(X0),X2) | (s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X2))) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X2))) & s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X1))) = s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X2))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),X2))))) & (s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X1))) != s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X2))) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X2))) | s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X1))) != s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X2))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),X1))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),X2))) | s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),X1))) != s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),X2))) | s('type.bvlSem.state'(X0),X1) = s('type.bvlSem.state'(X0),X2)))),
  inference(flattening,[],[f150])).
fof(f150,plain,(
  ! [X0,X1,X2] : ((s('type.bvlSem.state'(X0),X1) != s('type.bvlSem.state'(X0),X2) | (s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X2))) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X2))) & s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X1))) = s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X2))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),X2))))) & ((s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X1))) != s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X2))) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X2))) | s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X1))) != s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X2))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),X1))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),X2))) | s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),X1))) != s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),X2)))) | s('type.bvlSem.state'(X0),X1) = s('type.bvlSem.state'(X0),X2)))),
  inference(nnf_transformation,[],[f111])).
fof(f111,plain,(
  ! [X0,X1,X2] : (s('type.bvlSem.state'(X0),X1) = s('type.bvlSem.state'(X0),X2) <=> (s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X2))) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X2))) & s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X1))) = s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X2))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),X2)))))),
  inference(flattening,[],[f110])).
fof(f110,plain,(
  ! [X0] : ! [X1,X2] : (s('type.bvlSem.state'(X0),X1) = s('type.bvlSem.state'(X0),X2) <=> (s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X2))) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X2))) & s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X1))) = s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X2))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),X2)))))),
  inference(rectify,[],[f47])).
fof(f47,axiom,(
  ! [X7] : ! [X17,X18] : (s('type.bvlSem.state'(X7),X17) = s('type.bvlSem.state'(X7),X18) <=> (s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X7),X17))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X7),X18))) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X7),X17))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X7),X18))) & s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X7),X17))) = s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X7),X18))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X7),X17))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X7),X18))) & s('type.ffi.ffi_state'(X7),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X7),X17))) = s('type.ffi.ffi_state'(X7),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X7),X18)))))),
  file('thm.bvlProps.inc_clock|48|','thm.bvlSem.state_component_equality')).
fof(f8607,plain,(
  ( ! [X2,X0,X1] : (s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),X2))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),'const.bvlProps.inc_clock_2'(s('type.num.num',X1),s('type.bvlSem.state'(X0),X2)))))) )),
  inference(forward_demodulation,[],[f8518,f191])).
fof(f191,plain,(
  ( ! [X2,X0,X1] : (s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvlSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f77])).
fof(f77,plain,(
  ! [X0,X1,X2] : s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvlSem.state'(X0),X1)))))),
  inference(flattening,[],[f76])).
fof(f76,plain,(
  ! [X0] : ! [X1,X2] : s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvlSem.state'(X0),X1)))))),
  inference(rectify,[],[f36])).
fof(f36,axiom,(
  ! [X7] : ! [X9,X15] : s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X7),X9))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X7),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X15),s('type.bvlSem.state'(X7),X9)))))),
  file('thm.bvlProps.inc_clock|48|','thm.bvlSem.bvlSem_6|48|_prove_ltb')).
fof(f8518,plain,(
  ( ! [X2,X0,X1] : (s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),'const.bvlProps.inc_clock_2'(s('type.num.num',X1),s('type.bvlSem.state'(X0),X2))))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X2))),s('type.num.num',X1))))),s('type.bvlSem.state'(X0),X2)))))) )),
  inference(unit_resulting_resolution,[],[f204,f211])).
fof(f211,plain,(
  ( ! [X2,X0,X1] : (s('type.bvlSem.state'(X0),X1) != s('type.bvlSem.state'(X0),X2) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(X0),X2)))) )),
  inference(cnf_transformation,[],[f151])).
fof(f204,plain,(
  ( ! [X2,X0,X1] : (s('type.bvlSem.state'(X0),'const.bvlProps.inc_clock_2'(s('type.num.num',X1),s('type.bvlSem.state'(X0),X2))) = s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X2))),s('type.num.num',X1))))),s('type.bvlSem.state'(X0),X2)))) )),
  inference(cnf_transformation,[],[f103])).
fof(f103,plain,(
  ! [X0,X1,X2] : s('type.bvlSem.state'(X0),'const.bvlProps.inc_clock_2'(s('type.num.num',X1),s('type.bvlSem.state'(X0),X2))) = s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X2))),s('type.num.num',X1))))),s('type.bvlSem.state'(X0),X2)))),
  inference(flattening,[],[f102])).
fof(f102,plain,(
  ! [X0] : ! [X1,X2] : s('type.bvlSem.state'(X0),'const.bvlProps.inc_clock_2'(s('type.num.num',X1),s('type.bvlSem.state'(X0),X2))) = s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X2))),s('type.num.num',X1))))),s('type.bvlSem.state'(X0),X2)))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X6] : ! [X14,X9] : s('type.bvlSem.state'(X6),'const.bvlProps.inc_clock_2'(s('type.num.num',X14),s('type.bvlSem.state'(X6),X9))) = s('type.bvlSem.state'(X6),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X6),X9))),s('type.num.num',X14))))),s('type.bvlSem.state'(X6),X9)))),
  file('thm.bvlProps.inc_clock|48|','thm.bvlProps.inc_clock_def')).
fof(f8606,plain,(
  ( ! [X2,X0,X1] : (s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X2))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),'const.bvlProps.inc_clock_2'(s('type.num.num',X1),s('type.bvlSem.state'(X0),X2)))))) )),
  inference(forward_demodulation,[],[f8519,f193])).
fof(f193,plain,(
  ( ! [X2,X0,X1] : (s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvlSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f81])).
fof(f81,plain,(
  ! [X0,X1,X2] : s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvlSem.state'(X0),X1)))))),
  inference(flattening,[],[f80])).
fof(f80,plain,(
  ! [X0] : ! [X1,X2] : s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvlSem.state'(X0),X1)))))),
  inference(rectify,[],[f27])).
fof(f27,axiom,(
  ! [X7] : ! [X9,X15] : s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X7),X9))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X7),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X15),s('type.bvlSem.state'(X7),X9)))))),
  file('thm.bvlProps.inc_clock|48|','thm.bvlSem.bvlSem_5|49|_prove_ltb')).
fof(f8519,plain,(
  ( ! [X2,X0,X1] : (s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),'const.bvlProps.inc_clock_2'(s('type.num.num',X1),s('type.bvlSem.state'(X0),X2))))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X2))),s('type.num.num',X1))))),s('type.bvlSem.state'(X0),X2)))))) )),
  inference(unit_resulting_resolution,[],[f204,f209])).
fof(f209,plain,(
  ( ! [X2,X0,X1] : (s('type.bvlSem.state'(X0),X1) != s('type.bvlSem.state'(X0),X2) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X2)))) )),
  inference(cnf_transformation,[],[f151])).
fof(f8605,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X2))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),'const.bvlProps.inc_clock_2'(s('type.num.num',X1),s('type.bvlSem.state'(X0),X2)))))) )),
  inference(forward_demodulation,[],[f8520,f189])).
fof(f189,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvlSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f73])).
fof(f73,plain,(
  ! [X0,X1,X2] : s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvlSem.state'(X0),X1)))))),
  inference(flattening,[],[f72])).
fof(f72,plain,(
  ! [X0] : ! [X1,X2] : s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvlSem.state'(X0),X1)))))),
  inference(rectify,[],[f23])).
fof(f23,axiom,(
  ! [X7] : ! [X9,X15] : s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X7),X9))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X7),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X15),s('type.bvlSem.state'(X7),X9)))))),
  file('thm.bvlProps.inc_clock|48|','thm.bvlSem.bvlSem_47_prove_ltb')).
fof(f8520,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),'const.bvlProps.inc_clock_2'(s('type.num.num',X1),s('type.bvlSem.state'(X0),X2))))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X2))),s('type.num.num',X1))))),s('type.bvlSem.state'(X0),X2)))))) )),
  inference(unit_resulting_resolution,[],[f204,f208])).
fof(f208,plain,(
  ( ! [X2,X0,X1] : (s('type.bvlSem.state'(X0),X1) != s('type.bvlSem.state'(X0),X2) | s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(X0),X2)))) )),
  inference(cnf_transformation,[],[f151])).
fof(f8604,plain,(
  ( ! [X2,X0,X1] : (s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),X2))) = s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),'const.bvlProps.inc_clock_2'(s('type.num.num',X1),s('type.bvlSem.state'(X0),X2)))))) )),
  inference(forward_demodulation,[],[f8521,f187])).
fof(f187,plain,(
  ( ! [X2,X0,X1] : (s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvlSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f69])).
fof(f69,plain,(
  ! [X0,X1,X2] : s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvlSem.state'(X0),X1)))))),
  inference(flattening,[],[f68])).
fof(f68,plain,(
  ! [X0] : ! [X1,X2] : s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvlSem.state'(X0),X1)))))),
  inference(rectify,[],[f40])).
fof(f40,axiom,(
  ! [X7] : ! [X9,X15] : s('type.ffi.ffi_state'(X7),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X7),X9))) = s('type.ffi.ffi_state'(X7),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X7),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X15),s('type.bvlSem.state'(X7),X9)))))),
  file('thm.bvlProps.inc_clock|48|','thm.bvlSem.bvlSem_64_prove_ltb')).
fof(f8521,plain,(
  ( ! [X2,X0,X1] : (s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),'const.bvlProps.inc_clock_2'(s('type.num.num',X1),s('type.bvlSem.state'(X0),X2))))) = s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X2))),s('type.num.num',X1))))),s('type.bvlSem.state'(X0),X2)))))) )),
  inference(unit_resulting_resolution,[],[f204,f212])).
fof(f212,plain,(
  ( ! [X2,X0,X1] : (s('type.bvlSem.state'(X0),X1) != s('type.bvlSem.state'(X0),X2) | s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(X0),X2)))) )),
  inference(cnf_transformation,[],[f151])).
fof(f8925,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X1))) = s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),'const.bvlProps.inc_clock_2'(s('type.num.num','const.num.|48|_0'),s('type.bvlSem.state'(X0),X1)))))) )),
  inference(unit_resulting_resolution,[],[f8612,f772])).
fof(f772,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.|48|_0'))) | s('type.num.num',X0) = s('type.num.num',X1)) )),
  inference(superposition,[],[f222,f158])).
fof(f158,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f53])).
fof(f53,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X10] : s('type.num.num',X10) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.|48|_0')))),
  file('thm.bvlProps.inc_clock|48|','thm.arithmetic.ADD_|48|')).
fof(f222,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))) | s('type.num.num',X0) = s('type.num.num',X1)) )),
  inference(cnf_transformation,[],[f153])).
fof(f153,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))) | s('type.num.num',X0) = s('type.num.num',X1)) & (s('type.num.num',X0) != s('type.num.num',X1) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2)))))),
  inference(nnf_transformation,[],[f128])).
fof(f128,plain,(
  ! [X0,X1,X2] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))) <=> s('type.num.num',X0) = s('type.num.num',X1))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X10,X8,X11] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X11))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',X11))) <=> s('type.num.num',X8) = s('type.num.num',X10))),
  file('thm.bvlProps.inc_clock|48|','thm.arithmetic.EQ_MONO_ADD_EQ')).
fof(f8612,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X1))),s('type.num.num',X2))) = s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),'const.bvlProps.inc_clock_2'(s('type.num.num',X2),s('type.bvlSem.state'(X0),X1)))))) )),
  inference(forward_demodulation,[],[f8540,f226])).
fof(f226,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,X2) = s(X0,happ(s(fun(X1,X0),'const.combin.K_1'(s(X0,X2))),s(X1,X3)))) )),
  inference(forward_demodulation,[],[f215,f214])).
fof(f214,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,X2) = s(X1,'const.combin.K_2'(s(X1,X2),s(X0,X3)))) )),
  inference(cnf_transformation,[],[f113])).
fof(f113,plain,(
  ! [X0,X1,X2,X3] : s(X1,X2) = s(X1,'const.combin.K_2'(s(X1,X2),s(X0,X3)))),
  inference(flattening,[],[f112])).
fof(f112,plain,(
  ! [X0,X1] : ! [X2,X3] : s(X1,X2) = s(X1,'const.combin.K_2'(s(X1,X2),s(X0,X3)))),
  inference(rectify,[],[f48])).
fof(f48,axiom,(
  ! [X19,X6] : ! [X13,X20] : s(X6,X13) = s(X6,'const.combin.K_2'(s(X6,X13),s(X19,X20)))),
  file('thm.bvlProps.inc_clock|48|','thm.combin.K_THM')).
fof(f215,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,'const.combin.K_2'(s(X0,X2),s(X1,X3))) = s(X0,happ(s(fun(X1,X0),'const.combin.K_1'(s(X0,X2))),s(X1,X3)))) )),
  inference(cnf_transformation,[],[f115])).
fof(f115,plain,(
  ! [X0,X1,X2,X3] : s(X0,'const.combin.K_2'(s(X0,X2),s(X1,X3))) = s(X0,happ(s(fun(X1,X0),'const.combin.K_1'(s(X0,X2))),s(X1,X3)))),
  inference(flattening,[],[f114])).
fof(f114,plain,(
  ! [X0,X1] : ! [X2,X3] : s(X0,'const.combin.K_2'(s(X0,X2),s(X1,X3))) = s(X0,happ(s(fun(X1,X0),'const.combin.K_1'(s(X0,X2))),s(X1,X3)))),
  inference(rectify,[],[f49])).
fof(f49,axiom,(
  ! [X6,X19] : ! [X21,X22] : s(X6,'const.combin.K_2'(s(X6,X21),s(X19,X22))) = s(X6,happ(s(fun(X19,X6),'const.combin.K_1'(s(X6,X21))),s(X19,X22)))),
  file('thm.bvlProps.inc_clock|48|','ARITY_1_2_const.combin.K')).
fof(f8540,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),'const.bvlProps.inc_clock_2'(s('type.num.num',X2),s('type.bvlSem.state'(X0),X1))))) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X1))),s('type.num.num',X2))))),s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X1)))))) )),
  inference(superposition,[],[f196,f204])).
fof(f196,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X2),s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X1))))) = s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvlSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f87])).
fof(f87,plain,(
  ! [X0,X1,X2] : s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X2),s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X1))))) = s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvlSem.state'(X0),X1)))))),
  inference(flattening,[],[f86])).
fof(f86,plain,(
  ! [X0] : ! [X1,X2] : s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X2),s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),X1))))) = s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X0),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvlSem.state'(X0),X1)))))),
  inference(rectify,[],[f44])).
fof(f44,axiom,(
  ! [X7] : ! [X9,X15] : s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X15),s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X7),X9))))) = s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(X7),'const.bvlSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X15),s('type.bvlSem.state'(X7),X9)))))),
  file('thm.bvlProps.inc_clock|48|','thm.bvlSem.bvlSem_68_prove_ltb')).
fof(f154,plain,(
  s('type.bvlSem.state'(sK0),sK1) != s('type.bvlSem.state'(sK0),'const.bvlProps.inc_clock_2'(s('type.num.num','const.num.|48|_0'),s('type.bvlSem.state'(sK0),sK1)))),
  inference(cnf_transformation,[],[f132])).
fof(f132,plain,(
  s('type.bvlSem.state'(sK0),sK1) != s('type.bvlSem.state'(sK0),'const.bvlProps.inc_clock_2'(s('type.num.num','const.num.|48|_0'),s('type.bvlSem.state'(sK0),sK1)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1])],[f131])).
fof(f131,plain,(
  ? [X0,X1] : s('type.bvlSem.state'(X0),X1) != s('type.bvlSem.state'(X0),'const.bvlProps.inc_clock_2'(s('type.num.num','const.num.|48|_0'),s('type.bvlSem.state'(X0),X1)))),
  inference(rectify,[],[f129])).
fof(f129,plain,(
  ? [X1,X3] : s('type.bvlSem.state'(X1),X3) != s('type.bvlSem.state'(X1),'const.bvlProps.inc_clock_2'(s('type.num.num','const.num.|48|_0'),s('type.bvlSem.state'(X1),X3)))),
  inference(ennf_transformation,[],[f51])).
fof(f51,plain,(
  ~! [X1,X3] : s('type.bvlSem.state'(X1),X3) = s('type.bvlSem.state'(X1),'const.bvlProps.inc_clock_2'(s('type.num.num','const.num.|48|_0'),s('type.bvlSem.state'(X1),X3)))),
  inference(flattening,[],[f50])).
fof(f50,plain,(
  ~! [X1] : ! [X3] : s('type.bvlSem.state'(X1),X3) = s('type.bvlSem.state'(X1),'const.bvlProps.inc_clock_2'(s('type.num.num','const.num.|48|_0'),s('type.bvlSem.state'(X1),X3)))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9] : s('type.bvlSem.state'(X7),X9) = s('type.bvlSem.state'(X7),'const.bvlProps.inc_clock_2'(s('type.num.num','const.num.|48|_0'),s('type.bvlSem.state'(X7),X9)))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9] : s('type.bvlSem.state'(X7),X9) = s('type.bvlSem.state'(X7),'const.bvlProps.inc_clock_2'(s('type.num.num','const.num.|48|_0'),s('type.bvlSem.state'(X7),X9)))),
  file('thm.bvlProps.inc_clock|48|','thm.bvlProps.inc_clock|48|')).
% SZS output end Proof for thm.bvlProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 113
% Passive clauses: 374
% Generated clauses: 9981
% Final active clauses: 99
% Final passive clauses: 218
% Input formulas: 48
% Initial clauses: 70
% 
% Duplicate literals: 424
% Trivial inequalities: 97
% Fw subsumption resolutions: 563
% Fw demodulations: 959
% Bw demodulations: 47
% Condensations: 1236
% Global subsumptions: 4
% 
% Simple tautologies: 158
% Equational tautologies: 82
% Forward subsumptions: 5992
% Fw demodulations to eq. taut.: 44
% 
% Unit resulting resolution: 447
% Forward superposition: 3238
% Backward superposition: 2600
% Self superposition: 165
% Equality factoring: 51
% Equality resolution: 36
% 
% Split clauses: 16
% Split components: 32
% SAT solver clauses: 420
% SAT solver unit clauses: 95
% SAT solver binary clauses: 158
% 
% Sat splits: 16
% Sat splitting refutations: 8
% 
% Memory used [KB]: 6908
% Time elapsed: 0.453 s
% ------------------------------
% ------------------------------
% Success in time 1.786 s
