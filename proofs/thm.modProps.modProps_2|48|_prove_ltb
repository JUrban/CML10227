Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.modProps
% (22174)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 946
% Passive clauses: 6836
% Generated clauses: 33643
% Final active clauses: 893
% Final passive clauses: 5500
% Input formulas: 260
% Initial clauses: 484
% 
% Duplicate literals: 219
% Trivial inequalities: 56
% Fw subsumption resolutions: 1900
% Fw demodulations: 2391
% Bw demodulations: 16
% 
% Simple tautologies: 218
% Equational tautologies: 31
% Forward subsumptions: 21834
% Fw demodulations to eq. taut.: 16
% 
% Binary resolution: 5321
% Factoring: 1082
% Forward superposition: 9243
% Backward superposition: 12701
% Self superposition: 88
% Equality factoring: 2
% Equality resolution: 17
% 
% Split clauses: 232
% Split components: 466
% SAT solver clauses: 392
% SAT solver unit clauses: 13
% SAT solver binary clauses: 74
% 
% Sat splits: 232
% Sat splitting refutations: 12
% 
% TWLsolver clauses: 392
% TWLsolver calls for satisfiability: 334
% 
% Memory used [KB]: 18166
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.modProps
% (22197)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 516
% Passive clauses: 2836
% Generated clauses: 22448
% Final active clauses: 493
% Final passive clauses: 2010
% Input formulas: 260
% Initial clauses: 484
% 
% Duplicate literals: 95
% Trivial inequalities: 45
% Fw subsumption resolutions: 765
% Fw demodulations: 2488
% Bw demodulations: 317
% Condensations: 124
% Global subsumptions: 24
% 
% Simple tautologies: 223
% Equational tautologies: 17
% Forward subsumptions: 12030
% Fw demodulations to eq. taut.: 17
% Bw demodulations to eq. taut.: 1
% 
% Binary resolution: 1967
% Factoring: 307
% Forward superposition: 6549
% Backward superposition: 6200
% Self superposition: 94
% Equality factoring: 2
% Equality resolution: 16
% 
% Split clauses: 5
% Split components: 10
% SAT solver clauses: 4194
% SAT solver unit clauses: 655
% SAT solver binary clauses: 176
% SAT solver learnt clauses: 49
% SAT solver learnt literals: 13
% 
% Sat splits: 5
% Sat splitting refutations: 25
% 
% TWLsolver clauses: 4097
% TWLsolver calls for satisfiability: 7310
% 
% Memory used [KB]: 24946
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.modProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.modProps
% SZS output start Proof for thm.modProps
fof(f335347,plain,(
  $false),
  inference(unit_resulting_resolution,[],[f1203,f1403])).
fof(f1403,plain,(
  ( ! [X6,X5] : (s('type.pair.prod'('type.modSem.state'(sK18),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.pair.,_2'(s('type.modSem.state'(sK18),X5),s('type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v'),X6))) != s('type.pair.prod'('type.modSem.state'(sK18),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.modSem.evaluate_3'(s('type.modSem.environment','const.modSem.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.modSem.environment',sK21))),s('type.modSem.state'(sK18),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK20),s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(sK18),sK19))))))),s('type.modSem.state'(sK18),sK19))),s('type.list.list'('type.modLang.exp'),'const.list.CONS_2'(s('type.modLang.exp',sK22),s('type.list.list'('type.modLang.exp'),'const.list.NIL_0')))))) )),
  inference(backward_demodulation,[],[f1113,f888])).
fof(f888,plain,(
  ( ! [X6,X5] : (s('type.pair.prod'('type.modSem.state'(sK18),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.pair.,_2'(s('type.modSem.state'(sK18),X5),s('type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v'),X6))) != s('type.pair.prod'('type.modSem.state'(sK18),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.modSem.evaluate_3'(s('type.modSem.environment','const.modSem.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.modSem.environment',sK21))),s('type.modSem.state'(sK18),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(sK18),sK19))),s('type.num.num',sK20))))),s('type.modSem.state'(sK18),sK19))),s('type.list.list'('type.modLang.exp'),'const.list.CONS_2'(s('type.modLang.exp',sK22),s('type.list.list'('type.modLang.exp'),'const.list.NIL_0')))))) )),
  inference(cnf_transformation,[],[f728])).
fof(f728,plain,(
  ! [X5,X6] : s('type.pair.prod'('type.modSem.state'(sK18),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.pair.,_2'(s('type.modSem.state'(sK18),X5),s('type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v'),X6))) != s('type.pair.prod'('type.modSem.state'(sK18),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.modSem.evaluate_3'(s('type.modSem.environment','const.modSem.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.modSem.environment',sK21))),s('type.modSem.state'(sK18),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(sK18),sK19))),s('type.num.num',sK20))))),s('type.modSem.state'(sK18),sK19))),s('type.list.list'('type.modLang.exp'),'const.list.CONS_2'(s('type.modLang.exp',sK22),s('type.list.list'('type.modLang.exp'),'const.list.NIL_0')))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK18,sK19,sK20,sK21,sK22])],[f665])).
fof(f665,plain,(
  ? [X0,X1,X2,X3,X4] : ! [X5,X6] : s('type.pair.prod'('type.modSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.pair.,_2'(s('type.modSem.state'(X0),X5),s('type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v'),X6))) != s('type.pair.prod'('type.modSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.modSem.evaluate_3'(s('type.modSem.environment','const.modSem.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.modSem.environment',X3))),s('type.modSem.state'(X0),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X1))),s('type.num.num',X2))))),s('type.modSem.state'(X0),X1))),s('type.list.list'('type.modLang.exp'),'const.list.CONS_2'(s('type.modLang.exp',X4),s('type.list.list'('type.modLang.exp'),'const.list.NIL_0')))))),
  inference(ennf_transformation,[],[f263])).
fof(f263,plain,(
  ~! [X0,X1,X2,X3,X4] : ? [X5,X6] : s('type.pair.prod'('type.modSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.pair.,_2'(s('type.modSem.state'(X0),X5),s('type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v'),X6))) = s('type.pair.prod'('type.modSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.modSem.evaluate_3'(s('type.modSem.environment','const.modSem.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.modSem.environment',X3))),s('type.modSem.state'(X0),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X1))),s('type.num.num',X2))))),s('type.modSem.state'(X0),X1))),s('type.list.list'('type.modLang.exp'),'const.list.CONS_2'(s('type.modLang.exp',X4),s('type.list.list'('type.modLang.exp'),'const.list.NIL_0')))))),
  inference(flattening,[],[f262])).
fof(f262,plain,(
  ~! [X0] : ! [X1,X2,X3,X4] : ? [X5,X6] : s('type.pair.prod'('type.modSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.pair.,_2'(s('type.modSem.state'(X0),X5),s('type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v'),X6))) = s('type.pair.prod'('type.modSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.modSem.evaluate_3'(s('type.modSem.environment','const.modSem.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.modSem.environment',X3))),s('type.modSem.state'(X0),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X1))),s('type.num.num',X2))))),s('type.modSem.state'(X0),X1))),s('type.list.list'('type.modLang.exp'),'const.list.CONS_2'(s('type.modLang.exp',X4),s('type.list.list'('type.modLang.exp'),'const.list.NIL_0')))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9,X10] : ? [X11,X12] : s('type.pair.prod'('type.modSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.pair.,_2'(s('type.modSem.state'(X6),X11),s('type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v'),X12))) = s('type.pair.prod'('type.modSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.modSem.evaluate_3'(s('type.modSem.environment','const.modSem.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.modSem.environment',X9))),s('type.modSem.state'(X6),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X6),X7))),s('type.num.num',X8))))),s('type.modSem.state'(X6),X7))),s('type.list.list'('type.modLang.exp'),'const.list.CONS_2'(s('type.modLang.exp',X10),s('type.list.list'('type.modLang.exp'),'const.list.NIL_0')))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9,X10] : ? [X11,X12] : s('type.pair.prod'('type.modSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.pair.,_2'(s('type.modSem.state'(X6),X11),s('type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v'),X12))) = s('type.pair.prod'('type.modSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.modSem.evaluate_3'(s('type.modSem.environment','const.modSem.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.modSem.environment',X9))),s('type.modSem.state'(X6),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X6),X7))),s('type.num.num',X8))))),s('type.modSem.state'(X6),X7))),s('type.list.list'('type.modLang.exp'),'const.list.CONS_2'(s('type.modLang.exp',X10),s('type.list.list'('type.modLang.exp'),'const.list.NIL_0')))))),
  file('thm.modProps.modProps_2|48|_prove_ltb','thm.modProps.modProps_2|48|_prove_ltb')).
fof(f1113,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f451])).
fof(f451,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))),
  inference(rectify,[],[f155])).
fof(f155,axiom,(
  ! [X80,X13] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X80))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X80),s('type.num.num',X13)))),
  file('thm.modProps.modProps_2|48|_prove_ltb','thm.arithmetic.ADD_SYM')).
fof(f1203,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK95(X2,X1,X0)),s(X1,sK96(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f842])).
fof(f842,plain,(
  ! [X0,X1,X2] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK95(X2,X1,X0)),s(X1,sK96(X2,X1,X0))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK95,sK96])],[f509])).
fof(f509,plain,(
  ! [X0,X1,X2] : ? [X3,X4] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X4)))),
  inference(flattening,[],[f508])).
fof(f508,plain,(
  ! [X0,X1] : ! [X2] : ? [X3,X4] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X4)))),
  inference(rectify,[],[f260])).
fof(f260,axiom,(
  ! [X6,X43] : ! [X81] : ? [X89,X36] : s('type.pair.prod'(X6,X43),X81) = s('type.pair.prod'(X6,X43),'const.pair.,_2'(s(X6,X89),s(X43,X36)))),
  file('thm.modProps.modProps_2|48|_prove_ltb','thm.pair.ABS_PAIR_THM')).
% SZS output end Proof for thm.modProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 929
% Passive clauses: 7024
% Generated clauses: 334622
% Final active clauses: 784
% Final passive clauses: 2255
% Input formulas: 260
% Initial clauses: 484
% Discarded non-redundant clauses: 53343
% 
% Duplicate literals: 7
% Trivial inequalities: 42
% Fw subsumption resolutions: 1247
% Fw demodulations: 120052
% Bw demodulations: 2106
% Condensations: 20
% Global subsumptions: 1
% 
% Simple tautologies: 105
% Equational tautologies: 59
% Forward subsumptions: 83636
% Fw demodulations to eq. taut.: 76119
% Bw demodulations to eq. taut.: 39
% 
% Unit resulting resolution: 161026
% Factoring: 3
% Forward superposition: 20538
% Backward superposition: 26767
% Self superposition: 185
% Equality factoring: 2
% Equality resolution: 24
% 
% Split clauses: 3
% Split components: 6
% SAT solver clauses: 8077
% SAT solver unit clauses: 4035
% SAT solver binary clauses: 3140
% 
% Sat splits: 3
% Sat splitting refutations: 1044
% 
% Memory used [KB]: 147119
% Time elapsed: 9.646 s
% ------------------------------
% ------------------------------
% Success in time 11 s
