Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.source_to_modProof
% (74324)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 139
% Passive clauses: 2996
% Generated clauses: 18178
% Final active clauses: 138
% Final passive clauses: 2730
% Input formulas: 68
% Initial clauses: 81
% 
% Duplicate literals: 483
% Trivial inequalities: 670
% Fw subsumption resolutions: 1261
% Fw demodulations: 2745
% 
% Simple tautologies: 340
% Equational tautologies: 25
% Forward subsumptions: 9328
% 
% Binary resolution: 17
% Forward superposition: 7458
% Backward superposition: 5231
% Self superposition: 193
% Equality factoring: 56
% Equality resolution: 35
% 
% Split clauses: 163
% Split components: 326
% SAT solver clauses: 457
% SAT solver unit clauses: 17
% SAT solver binary clauses: 135
% 
% Sat splits: 163
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 457
% TWLsolver calls for satisfiability: 74
% 
% Memory used [KB]: 18933
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.source_to_modProof
% (74345)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 95
% Passive clauses: 1145
% Generated clauses: 9974
% Final active clauses: 89
% Final passive clauses: 997
% Input formulas: 68
% Initial clauses: 81
% 
% Duplicate literals: 302
% Trivial inequalities: 195
% Fw subsumption resolutions: 375
% Fw demodulations: 889
% Bw demodulations: 56
% Condensations: 685
% Global subsumptions: 1
% 
% Simple tautologies: 215
% Equational tautologies: 22
% Forward subsumptions: 4428
% Bw demodulations to eq. taut.: 2
% 
% Binary resolution: 20
% Forward superposition: 3391
% Backward superposition: 2783
% Self superposition: 149
% Equality factoring: 44
% Equality resolution: 26
% 
% Split clauses: 29
% Split components: 58
% SAT solver clauses: 1795
% SAT solver unit clauses: 134
% SAT solver binary clauses: 56
% SAT solver learnt clauses: 2
% 
% Sat splits: 29
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 1791
% TWLsolver calls for satisfiability: 250
% 
% Memory used [KB]: 26481
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.source_to_modProof
% (74381)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 492
% Passive clauses: 6422
% Generated clauses: 310330
% Final active clauses: 270
% Final passive clauses: 1060
% Input formulas: 68
% Initial clauses: 81
% Discarded non-redundant clauses: 117619
% 
% Duplicate literals: 2008
% Trivial inequalities: 2474
% Fw subsumption resolutions: 4392
% Fw demodulations: 101149
% Bw demodulations: 1995
% Condensations: 4490
% Global subsumptions: 96
% 
% Simple tautologies: 769
% Equational tautologies: 872
% Forward subsumptions: 91349
% Fw demodulations to eq. taut.: 25935
% Bw demodulations to eq. taut.: 83
% 
% Unit resulting resolution: 122586
% Forward superposition: 38779
% Backward superposition: 30051
% Self superposition: 353
% Equality factoring: 118
% Equality resolution: 61
% 
% Split clauses: 64
% Split components: 139
% SAT solver clauses: 7037
% SAT solver unit clauses: 2417
% SAT solver binary clauses: 2589
% 
% Sat splits: 64
% Sat splitting refutations: 389
% 
% Memory used [KB]: 163750
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 32 next slice time: 32
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.source_to_modProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.source_to_modProof
% SZS output start Proof for thm.source_to_modProof
fof(f303,plain,(
  $false),
  inference(equality_resolution,[],[f246])).
fof(f246,plain,(
  ( ! [X11] : (s('type.pair.prod'('type.num.num','type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.modLang.prompt')))),X11) != s('type.pair.prod'('type.num.num','type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.modLang.prompt')))),'const.source_to_mod.compile_prog_4'(s('type.num.num',sK1),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),sK2),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),sK3),s('type.list.list'('type.ast.top'),sK0)))) )),
  inference(superposition,[],[f218,f107])).
fof(f107,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK5(X2,X1,X0)),s(X1,sK6(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f94])).
fof(f94,plain,(
  ! [X0,X1,X2] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK5(X2,X1,X0)),s(X1,sK6(X2,X1,X0))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK5,sK6])],[f79])).
fof(f79,plain,(
  ! [X0,X1,X2] : ? [X3,X4] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X4)))),
  inference(flattening,[],[f78])).
fof(f78,plain,(
  ! [X0,X1] : ! [X2] : ? [X3,X4] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X4)))),
  inference(rectify,[],[f68])).
fof(f68,axiom,(
  ! [X15,X14] : ! [X51] : ? [X66,X50] : s('type.pair.prod'(X15,X14),X51) = s('type.pair.prod'(X15,X14),'const.pair.,_2'(s(X15,X66),s(X14,X50)))),
  file('thm.source_to_modProof.source_to_modProof_|49|63_prove_ltb','thm.pair.ABS_PAIR_THM')).
fof(f218,plain,(
  ( ! [X10,X11] : (s('type.pair.prod'('type.num.num','type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.modLang.prompt')))),'const.pair.,_2'(s('type.num.num',X11),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.modLang.prompt'))),X10))) != s('type.pair.prod'('type.num.num','type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.modLang.prompt')))),'const.source_to_mod.compile_prog_4'(s('type.num.num',sK1),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),sK2),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),sK3),s('type.list.list'('type.ast.top'),sK0)))) )),
  inference(superposition,[],[f137,f107])).
fof(f137,plain,(
  ( ! [X14,X12,X13] : (s('type.pair.prod'('type.num.num','type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.modLang.prompt')))),'const.source_to_mod.compile_prog_4'(s('type.num.num',sK1),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),sK2),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),sK3),s('type.list.list'('type.ast.top'),sK0))) != s('type.pair.prod'('type.num.num','type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.modLang.prompt')))),'const.pair.,_2'(s('type.num.num',X13),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.modLang.prompt'))),'const.pair.,_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X14),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.modLang.prompt')),X12)))))) )),
  inference(superposition,[],[f99,f107])).
fof(f99,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.pair.prod'('type.num.num','type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.modLang.prompt')))),'const.source_to_mod.compile_prog_4'(s('type.num.num',sK1),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),sK2),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),sK3),s('type.list.list'('type.ast.top'),sK0))) != s('type.pair.prod'('type.num.num','type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.modLang.prompt')))),'const.pair.,_2'(s('type.num.num',X4),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.modLang.prompt'))),'const.pair.,_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X5),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.modLang.prompt')),'const.pair.,_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X6),s('type.list.list'('type.modLang.prompt'),X7)))))))) )),
  inference(cnf_transformation,[],[f89])).
fof(f89,plain,(
  ! [X4,X5,X6,X7] : s('type.pair.prod'('type.num.num','type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.modLang.prompt')))),'const.source_to_mod.compile_prog_4'(s('type.num.num',sK1),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),sK2),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),sK3),s('type.list.list'('type.ast.top'),sK0))) != s('type.pair.prod'('type.num.num','type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.modLang.prompt')))),'const.pair.,_2'(s('type.num.num',X4),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.modLang.prompt'))),'const.pair.,_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X5),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.modLang.prompt')),'const.pair.,_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X6),s('type.list.list'('type.modLang.prompt'),X7)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3])],[f88])).
fof(f88,plain,(
  ? [X0,X1,X2,X3] : ! [X4,X5,X6,X7] : s('type.pair.prod'('type.num.num','type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.modLang.prompt')))),'const.source_to_mod.compile_prog_4'(s('type.num.num',X1),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X2),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X3),s('type.list.list'('type.ast.top'),X0))) != s('type.pair.prod'('type.num.num','type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.modLang.prompt')))),'const.pair.,_2'(s('type.num.num',X4),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.modLang.prompt'))),'const.pair.,_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X5),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.modLang.prompt')),'const.pair.,_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X6),s('type.list.list'('type.modLang.prompt'),X7)))))))),
  inference(ennf_transformation,[],[f70])).
fof(f70,plain,(
  ~! [X0,X1,X2,X3] : ? [X4,X5,X6,X7] : s('type.pair.prod'('type.num.num','type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.modLang.prompt')))),'const.source_to_mod.compile_prog_4'(s('type.num.num',X1),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X2),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X3),s('type.list.list'('type.ast.top'),X0))) = s('type.pair.prod'('type.num.num','type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.modLang.prompt')))),'const.pair.,_2'(s('type.num.num',X4),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.modLang.prompt'))),'const.pair.,_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X5),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.modLang.prompt')),'const.pair.,_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X6),s('type.list.list'('type.modLang.prompt'),X7)))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8,X9] : ? [X10,X11,X12,X13] : s('type.pair.prod'('type.num.num','type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.modLang.prompt')))),'const.source_to_mod.compile_prog_4'(s('type.num.num',X7),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X8),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X9),s('type.list.list'('type.ast.top'),X6))) = s('type.pair.prod'('type.num.num','type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.modLang.prompt')))),'const.pair.,_2'(s('type.num.num',X10),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.modLang.prompt'))),'const.pair.,_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X11),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.modLang.prompt')),'const.pair.,_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X12),s('type.list.list'('type.modLang.prompt'),X13)))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8,X9] : ? [X10,X11,X12,X13] : s('type.pair.prod'('type.num.num','type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.modLang.prompt')))),'const.source_to_mod.compile_prog_4'(s('type.num.num',X7),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X8),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X9),s('type.list.list'('type.ast.top'),X6))) = s('type.pair.prod'('type.num.num','type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.modLang.prompt')))),'const.pair.,_2'(s('type.num.num',X10),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.modLang.prompt'))),'const.pair.,_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X11),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.modLang.prompt')),'const.pair.,_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X12),s('type.list.list'('type.modLang.prompt'),X13)))))))),
  file('thm.source_to_modProof.source_to_modProof_|49|63_prove_ltb','thm.source_to_modProof.source_to_modProof_|49|63_prove_ltb')).
% SZS output end Proof for thm.source_to_modProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 18
% Passive clauses: 83
% Generated clauses: 158
% Final active clauses: 18
% Final passive clauses: 78
% Input formulas: 68
% Initial clauses: 16
% 
% Selected by SInE selection: 12
% SInE iterations: 1
% 
% Simple tautologies: 2
% Forward subsumptions: 74
% 
% Forward superposition: 188
% Equality resolution: 1
% 
% SAT solver clauses: 1
% 
% Memory used [KB]: 1663
% Time elapsed: 0.013 s
% ------------------------------
% ------------------------------
% Success in time 11.754 s
