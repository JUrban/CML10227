Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.source_to_modProof
% (21326)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 88
% Passive clauses: 1874
% Generated clauses: 10488
% Final active clauses: 82
% Final passive clauses: 1636
% Input formulas: 21
% Initial clauses: 330
% 
% Duplicate literals: 651
% Trivial inequalities: 108
% Fw subsumption resolutions: 1526
% Fw demodulations: 25
% Bw demodulations: 2
% 
% Simple tautologies: 252
% Equational tautologies: 131
% Forward subsumptions: 3427
% 
% Binary resolution: 121
% Factoring: 2
% Forward superposition: 2923
% Backward superposition: 3859
% Self superposition: 462
% Equality factoring: 408
% Equality resolution: 10
% 
% Split clauses: 409
% Split components: 823
% SAT solver clauses: 1506
% SAT solver unit clauses: 7
% SAT solver binary clauses: 245
% 
% Sat splits: 409
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 1502
% TWLsolver calls for satisfiability: 147
% 
% Memory used [KB]: 5117
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.source_to_modProof
% (21388)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 87
% Passive clauses: 478
% Generated clauses: 6395
% Final active clauses: 75
% Final passive clauses: 200
% Input formulas: 21
% Initial clauses: 330
% 
% Duplicate literals: 1056
% Trivial inequalities: 44
% Fw subsumption resolutions: 387
% Fw demodulations: 107
% Bw demodulations: 193
% Condensations: 1508
% Global subsumptions: 4
% 
% Simple tautologies: 140
% Equational tautologies: 68
% Forward subsumptions: 1514
% 
% Binary resolution: 41
% Factoring: 1
% Forward superposition: 713
% Backward superposition: 1060
% Self superposition: 220
% Equality factoring: 200
% Equality resolution: 7
% 
% Split clauses: 29
% Split components: 58
% SAT solver clauses: 910
% SAT solver unit clauses: 317
% SAT solver binary clauses: 136
% SAT solver learnt clauses: 8
% 
% Sat splits: 29
% Sat splitting refutations: 14
% 
% TWLsolver clauses: 894
% TWLsolver calls for satisfiability: 6400
% 
% Memory used [KB]: 6524
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.source_to_modProof
% (21443)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 478
% Passive clauses: 5610
% Generated clauses: 170419
% Final active clauses: 195
% Final passive clauses: 693
% Input formulas: 21
% Initial clauses: 330
% 
% Duplicate literals: 6366
% Trivial inequalities: 1534
% Fw subsumption resolutions: 19711
% Fw demodulations: 20725
% Bw demodulations: 3509
% Condensations: 15430
% Global subsumptions: 2088
% 
% Simple tautologies: 1828
% Equational tautologies: 589
% Forward subsumptions: 93889
% Fw demodulations to eq. taut.: 8
% Bw demodulations to eq. taut.: 25
% 
% Unit resulting resolution: 2165
% Factoring: 1
% Forward superposition: 38958
% Backward superposition: 27604
% Self superposition: 800
% Equality factoring: 374
% Equality resolution: 106
% 
% Split clauses: 432
% Split components: 878
% SAT solver clauses: 10863
% SAT solver unit clauses: 37
% SAT solver binary clauses: 1022
% 
% Sat splits: 432
% Sat splitting refutations: 2299
% 
% Memory used [KB]: 83666
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 32 next slice time: 32
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.source_to_modProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.source_to_modProof
% SZS output start Proof for thm.source_to_modProof
fof(f47470,plain,(
  $false),
  inference(trivial_inequality_removal,[],[f47465])).
fof(f47465,plain,(
  s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.NIL_0')),
  inference(resolution,[],[f28660,f572])).
fof(f572,plain,(
  ~sP11(sK36,'const.list.NIL_0','const.list.NIL_0')),
  inference(resolution,[],[f243,f386])).
fof(f386,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.source_to_modProof.env_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2)))) | ~sP11(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f164])).
fof(f164,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.source_to_modProof.env_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2)))) | sP11(X0,X1,X2)) & (~sP11(X0,X1,X2) | p(s(bool,'const.source_to_modProof.env_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2))))))),
  inference(nnf_transformation,[],[f84])).
fof(f84,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.source_to_modProof.env_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2)))) <=> sP11(X0,X1,X2))),
  inference(definition_folding,[],[f67,f83,f82,f81,f80,f79,f78,f77,f76,f75,f74,f73,f72])).
fof(f72,plain,(
  ! [X40,X48,X46,X47,X53,X49] : (sP0(X40,X48,X46,X47,X53,X49) <=> ! [X54] : (~p(s(bool,'const.bool.IN_2'(s('type.list.list'('type.string.char'),X54),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X49)))))))) | ? [X55,X56,X57] : (s('type.option.option'('type.num.num'),'const.option.SOME_1'(s('type.num.num',X55))) = s('type.option.option'('type.num.num'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.FEMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X53))),s('type.list.list'('type.string.char'),X54))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X55),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X40)))))) & s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X56),s('type.ast.exp',X57))))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.semanticPrimitives.find_recfun_2'(s('type.list.list'('type.string.char'),X54),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X49))) & s('type.option.option'('type.modSem.v'),'const.list.EL_2'(s('type.num.num',X55),s('type.list.list'('type.option.option'('type.modSem.v')),X40))) = s('type.option.option'('type.modSem.v'),'const.option.SOME_1'(s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.string.char'),X56),s('type.modLang.exp','const.source_to_mod.compile_exp_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X46),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.fdomsub_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X47),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X53))),s('type.list.list'('type.string.char'),X56))),s('type.ast.exp',X57))))))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP0])])).
fof(f73,plain,(
  ! [X40,X7,X42,X41] : (sP1(X40,X7,X42,X41) <=> ? [X46,X47,X48,X49,X50,X51,X52,X53] : (s('type.semanticPrimitives.v',X41) = s('type.semanticPrimitives.v','const.semanticPrimitives.Recclosure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X49),s('type.list.list'('type.string.char'),X50))) & s('type.modSem.v',X42) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.string.char'),X51),s('type.modLang.exp','const.source_to_mod.compile_exp_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X46),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.fdomsub_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X47),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X53))),s('type.list.list'('type.string.char'),X51))),s('type.ast.exp',X52))))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48))))))),s(fun('type.list.list'('type.string.char'),bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X47)))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))))),X7),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X46))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X47))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48))))),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48)))))) & s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X49))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'const.list.REVERSE_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X53))))) & s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X51),s('type.ast.exp',X52))))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.semanticPrimitives.find_recfun_2'(s('type.list.list'('type.string.char'),X50),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X49))) & sP0(X40,X48,X46,X47,X53,X49)))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP1])])).
fof(f74,plain,(
  ! [X7,X40,X5,X42,X41] : (sP2(X7,X40,X5,X42,X41) <=> ? [X65,X66,X67,X68,X69,X70,X71] : (s('type.semanticPrimitives.v',X41) = s('type.semanticPrimitives.v','const.semanticPrimitives.Closure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X67))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X70))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X67))),s('type.list.list'('type.string.char'),X68),s('type.ast.exp',X69))) & s('type.modSem.v',X42) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X67))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X71))),s('type.list.list'('type.string.char'),X68),s('type.modLang.exp','const.source_to_mod.compile_exp_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X65),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.fdomsub_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.DRESTRICT_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X66),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.COMPL_1'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X71))))))))),s('type.list.list'('type.string.char'),X68))),s('type.ast.exp',X69))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X67))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X71)))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.DIFF_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X70))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X67))))))))),s(fun('type.list.list'('type.string.char'),bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X66)))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))))),X7),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X65))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X66))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X67))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X71))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X70))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP2])])).
fof(f75,plain,(
  ! [X7,X40,X5,X42,X41] : (sP3(X7,X40,X5,X42,X41) <=> ? [X58,X59,X60,X61,X62,X63,X64] : (s('type.semanticPrimitives.v',X41) = s('type.semanticPrimitives.v','const.semanticPrimitives.Recclosure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X60))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X63))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X60))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X61),s('type.list.list'('type.string.char'),X62))) & s('type.modSem.v',X42) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X60))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X64))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),'const.source_to_mod.compile_funs_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X58),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.DRESTRICT_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X59),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.COMPL_1'(s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.UNION_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X64))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X61))))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X61))),s('type.list.list'('type.string.char'),X62))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X60))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X64)))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.DIFF_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X63))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X60))))))))),s(fun('type.list.list'('type.string.char'),bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X59)))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))))),X7),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X58))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X59))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X60))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X64))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X63))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP3])])).
fof(f76,plain,(
  ! [X4,X40,X42,X41] : (sP4(X4,X40,X42,X41) <=> ? [X72,X73,X74] : (s('type.semanticPrimitives.v',X41) = s('type.semanticPrimitives.v','const.semanticPrimitives.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X72),s('type.list.list'('type.semanticPrimitives.v'),X73))) & s('type.modSem.v',X42) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X72),s('type.list.list'('type.modSem.v'),X74))) & p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X4),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.list.list'('type.semanticPrimitives.v'),X73))),s('type.list.list'('type.modSem.v'),X74))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP4])])).
fof(f77,plain,(
  ! [X4,X40,X42,X41] : (sP5(X4,X40,X42,X41) <=> ? [X43,X44] : (s('type.semanticPrimitives.v',X41) = s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X44))) & s('type.modSem.v',X42) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X43))) & p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X4),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.list.list'('type.semanticPrimitives.v'),X44))),s('type.list.list'('type.modSem.v'),X43))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP5])])).
fof(f78,plain,(
  ! [X4,X33,X3,X35,X34] : (sP6(X4,X33,X3,X35,X34) <=> ((s('type.list.list'('type.semanticPrimitives.v'),'const.list.NIL_0') = s('type.list.list'('type.semanticPrimitives.v'),X34) & s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X35)) | ? [X36,X37,X38,X39] : (s('type.list.list'('type.semanticPrimitives.v'),X34) = s('type.list.list'('type.semanticPrimitives.v'),'const.list.CONS_2'(s('type.semanticPrimitives.v',X36),s('type.list.list'('type.semanticPrimitives.v'),X37))) & s('type.list.list'('type.modSem.v'),X35) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X38),s('type.list.list'('type.modSem.v'),X39))) & p(s(bool,happ(s(fun('type.modSem.v',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.modSem.v',bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.v',fun('type.modSem.v',bool))),X3),s('type.list.list'('type.option.option'('type.modSem.v')),X33))),s('type.semanticPrimitives.v',X36))),s('type.modSem.v',X38)))) & p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X4),s('type.list.list'('type.option.option'('type.modSem.v')),X33))),s('type.list.list'('type.semanticPrimitives.v'),X37))),s('type.list.list'('type.modSem.v'),X39)))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP6])])).
fof(f79,plain,(
  ! [X3,X25,X5,X27,X26] : (sP7(X3,X25,X5,X27,X26) <=> ((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X26) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27)) | ? [X28,X29,X30,X31,X32] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X26) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X28),s('type.semanticPrimitives.v',X29))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X30))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X28),s('type.modSem.v',X32))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X31))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X25))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X30))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X31)))) & p(s(bool,happ(s(fun('type.modSem.v',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.modSem.v',bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.v',fun('type.modSem.v',bool))),X3),s('type.list.list'('type.option.option'('type.modSem.v')),X25))),s('type.semanticPrimitives.v',X29))),s('type.modSem.v',X32)))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP7])])).
fof(f80,plain,(
  ! [X3,X4,X7,X5] : (sP8(X3,X4,X7,X5) <=> ? [X40,X41,X42] : ((? [X75] : (s('type.semanticPrimitives.v',X41) = s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit',X75))) & s('type.modSem.v',X42) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X75)))) | sP4(X4,X40,X42,X41) | sP2(X7,X40,X5,X42,X41) | sP3(X7,X40,X5,X42,X41) | sP1(X40,X7,X42,X41) | ? [X45] : (s('type.semanticPrimitives.v',X41) = s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X45))) & s('type.modSem.v',X42) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X45)))) | sP5(X4,X40,X42,X41)) & ~p(s(bool,happ(s(fun('type.modSem.v',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.modSem.v',bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.v',fun('type.modSem.v',bool))),X3),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.semanticPrimitives.v',X41))),s('type.modSem.v',X42))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP8])])).
fof(f81,plain,(
  ! [X6,X3] : (sP9(X6,X3) <=> ? [X17,X18,X19,X20] : (! [X21,X22] : (p(s(bool,'const.bool.IN_2'(s('type.list.list'('type.string.char'),X21),s(fun('type.list.list'('type.string.char'),bool),X19)))) | s('type.option.option'('type.semanticPrimitives.v'),'const.option.SOME_1'(s('type.semanticPrimitives.v',X22))) != s('type.option.option'('type.semanticPrimitives.v'),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X20),s('type.list.list'('type.string.char'),X21))) | ? [X23,X24] : (s('type.option.option'('type.num.num'),'const.option.SOME_1'(s('type.num.num',X23))) = s('type.option.option'('type.num.num'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X18),s('type.list.list'('type.string.char'),X21))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X23),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X17)))))) & s('type.option.option'('type.modSem.v'),'const.option.SOME_1'(s('type.modSem.v',X24))) = s('type.option.option'('type.modSem.v'),'const.list.EL_2'(s('type.num.num',X23),s('type.list.list'('type.option.option'('type.modSem.v')),X17))) & p(s(bool,happ(s(fun('type.modSem.v',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.modSem.v',bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.v',fun('type.modSem.v',bool))),X3),s('type.list.list'('type.option.option'('type.modSem.v')),X17))),s('type.semanticPrimitives.v',X22))),s('type.modSem.v',X24)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X17))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X18))),s(fun('type.list.list'('type.string.char'),bool),X19))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X20))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP9])])).
fof(f82,plain,(
  ! [X7,X6] : (sP10(X7,X6) <=> ? [X8,X9,X10,X11,X12,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X8))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X10))),s(fun('type.list.list'('type.string.char'),bool),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X13)))) & ! [X14,X15] : (s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.option.SOME_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X15))) != s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X11),s('type.list.list'('type.string.char'),X14))) | ? [X16] : (s('type.option.option'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.option.SOME_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X16))) = s('type.option.option'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X9),s('type.list.list'('type.string.char'),X14))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X8))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X16))),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X15)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))))),X7),s('type.list.list'('type.option.option'('type.modSem.v')),X8))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X9))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X11))),s(fun('type.list.list'('type.string.char'),bool),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X13))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP10])])).
fof(f83,plain,(
  ! [X0,X1,X2] : (sP11(X0,X1,X2) <=> ! [X3,X4,X5,X6,X7] : (sP8(X3,X4,X7,X5) | ? [X33,X34,X35] : (sP6(X4,X33,X3,X35,X34) & ~p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X4),s('type.list.list'('type.option.option'('type.modSem.v')),X33))),s('type.list.list'('type.semanticPrimitives.v'),X34))),s('type.list.list'('type.modSem.v'),X35))))) | ? [X25,X26,X27] : (sP7(X3,X25,X5,X27,X26) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X25))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X26))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))))) | sP9(X6,X3) | sP10(X7,X6) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP11])])).
fof(f67,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.source_to_modProof.env_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2)))) <=> ! [X3,X4,X5,X6,X7] : (? [X40,X41,X42] : ((? [X75] : (s('type.semanticPrimitives.v',X41) = s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit',X75))) & s('type.modSem.v',X42) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X75)))) | ? [X72,X73,X74] : (s('type.semanticPrimitives.v',X41) = s('type.semanticPrimitives.v','const.semanticPrimitives.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X72),s('type.list.list'('type.semanticPrimitives.v'),X73))) & s('type.modSem.v',X42) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X72),s('type.list.list'('type.modSem.v'),X74))) & p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X4),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.list.list'('type.semanticPrimitives.v'),X73))),s('type.list.list'('type.modSem.v'),X74))))) | ? [X65,X66,X67,X68,X69,X70,X71] : (s('type.semanticPrimitives.v',X41) = s('type.semanticPrimitives.v','const.semanticPrimitives.Closure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X67))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X70))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X67))),s('type.list.list'('type.string.char'),X68),s('type.ast.exp',X69))) & s('type.modSem.v',X42) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X67))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X71))),s('type.list.list'('type.string.char'),X68),s('type.modLang.exp','const.source_to_mod.compile_exp_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X65),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.fdomsub_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.DRESTRICT_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X66),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.COMPL_1'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X71))))))))),s('type.list.list'('type.string.char'),X68))),s('type.ast.exp',X69))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X67))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X71)))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.DIFF_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X70))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X67))))))))),s(fun('type.list.list'('type.string.char'),bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X66)))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))))),X7),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X65))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X66))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X67))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X71))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X70))))) | ? [X58,X59,X60,X61,X62,X63,X64] : (s('type.semanticPrimitives.v',X41) = s('type.semanticPrimitives.v','const.semanticPrimitives.Recclosure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X60))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X63))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X60))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X61),s('type.list.list'('type.string.char'),X62))) & s('type.modSem.v',X42) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X60))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X64))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),'const.source_to_mod.compile_funs_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X58),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.DRESTRICT_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X59),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.COMPL_1'(s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.UNION_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X64))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X61))))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X61))),s('type.list.list'('type.string.char'),X62))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X60))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X64)))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.DIFF_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X63))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X60))))))))),s(fun('type.list.list'('type.string.char'),bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X59)))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))))),X7),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X58))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X59))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X60))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X64))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X63))))) | ? [X46,X47,X48,X49,X50,X51,X52,X53] : (s('type.semanticPrimitives.v',X41) = s('type.semanticPrimitives.v','const.semanticPrimitives.Recclosure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X49),s('type.list.list'('type.string.char'),X50))) & s('type.modSem.v',X42) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.string.char'),X51),s('type.modLang.exp','const.source_to_mod.compile_exp_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X46),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.fdomsub_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X47),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X53))),s('type.list.list'('type.string.char'),X51))),s('type.ast.exp',X52))))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48))))))),s(fun('type.list.list'('type.string.char'),bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X47)))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))))),X7),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X46))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X47))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48))))),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48)))))) & s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X49))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'const.list.REVERSE_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X53))))) & s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X51),s('type.ast.exp',X52))))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.semanticPrimitives.find_recfun_2'(s('type.list.list'('type.string.char'),X50),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X49))) & ! [X54] : (~p(s(bool,'const.bool.IN_2'(s('type.list.list'('type.string.char'),X54),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X49)))))))) | ? [X55,X56,X57] : (s('type.option.option'('type.num.num'),'const.option.SOME_1'(s('type.num.num',X55))) = s('type.option.option'('type.num.num'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.FEMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X53))),s('type.list.list'('type.string.char'),X54))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X55),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X40)))))) & s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X56),s('type.ast.exp',X57))))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.semanticPrimitives.find_recfun_2'(s('type.list.list'('type.string.char'),X54),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X49))) & s('type.option.option'('type.modSem.v'),'const.list.EL_2'(s('type.num.num',X55),s('type.list.list'('type.option.option'('type.modSem.v')),X40))) = s('type.option.option'('type.modSem.v'),'const.option.SOME_1'(s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.string.char'),X56),s('type.modLang.exp','const.source_to_mod.compile_exp_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X46),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.fdomsub_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X47),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X53))),s('type.list.list'('type.string.char'),X56))),s('type.ast.exp',X57)))))))))) | ? [X45] : (s('type.semanticPrimitives.v',X41) = s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X45))) & s('type.modSem.v',X42) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X45)))) | ? [X43,X44] : (s('type.semanticPrimitives.v',X41) = s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X44))) & s('type.modSem.v',X42) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X43))) & p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X4),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.list.list'('type.semanticPrimitives.v'),X44))),s('type.list.list'('type.modSem.v'),X43)))))) & ~p(s(bool,happ(s(fun('type.modSem.v',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.modSem.v',bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.v',fun('type.modSem.v',bool))),X3),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.semanticPrimitives.v',X41))),s('type.modSem.v',X42))))) | ? [X33,X34,X35] : (((s('type.list.list'('type.semanticPrimitives.v'),'const.list.NIL_0') = s('type.list.list'('type.semanticPrimitives.v'),X34) & s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X35)) | ? [X36,X37,X38,X39] : (s('type.list.list'('type.semanticPrimitives.v'),X34) = s('type.list.list'('type.semanticPrimitives.v'),'const.list.CONS_2'(s('type.semanticPrimitives.v',X36),s('type.list.list'('type.semanticPrimitives.v'),X37))) & s('type.list.list'('type.modSem.v'),X35) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X38),s('type.list.list'('type.modSem.v'),X39))) & p(s(bool,happ(s(fun('type.modSem.v',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.modSem.v',bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.v',fun('type.modSem.v',bool))),X3),s('type.list.list'('type.option.option'('type.modSem.v')),X33))),s('type.semanticPrimitives.v',X36))),s('type.modSem.v',X38)))) & p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X4),s('type.list.list'('type.option.option'('type.modSem.v')),X33))),s('type.list.list'('type.semanticPrimitives.v'),X37))),s('type.list.list'('type.modSem.v'),X39)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X4),s('type.list.list'('type.option.option'('type.modSem.v')),X33))),s('type.list.list'('type.semanticPrimitives.v'),X34))),s('type.list.list'('type.modSem.v'),X35))))) | ? [X25,X26,X27] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X26) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27)) | ? [X28,X29,X30,X31,X32] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X26) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X28),s('type.semanticPrimitives.v',X29))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X30))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X28),s('type.modSem.v',X32))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X31))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X25))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X30))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X31)))) & p(s(bool,happ(s(fun('type.modSem.v',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.modSem.v',bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.v',fun('type.modSem.v',bool))),X3),s('type.list.list'('type.option.option'('type.modSem.v')),X25))),s('type.semanticPrimitives.v',X29))),s('type.modSem.v',X32)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X25))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X26))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))))) | ? [X17,X18,X19,X20] : (! [X21,X22] : (p(s(bool,'const.bool.IN_2'(s('type.list.list'('type.string.char'),X21),s(fun('type.list.list'('type.string.char'),bool),X19)))) | s('type.option.option'('type.semanticPrimitives.v'),'const.option.SOME_1'(s('type.semanticPrimitives.v',X22))) != s('type.option.option'('type.semanticPrimitives.v'),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X20),s('type.list.list'('type.string.char'),X21))) | ? [X23,X24] : (s('type.option.option'('type.num.num'),'const.option.SOME_1'(s('type.num.num',X23))) = s('type.option.option'('type.num.num'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X18),s('type.list.list'('type.string.char'),X21))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X23),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X17)))))) & s('type.option.option'('type.modSem.v'),'const.option.SOME_1'(s('type.modSem.v',X24))) = s('type.option.option'('type.modSem.v'),'const.list.EL_2'(s('type.num.num',X23),s('type.list.list'('type.option.option'('type.modSem.v')),X17))) & p(s(bool,happ(s(fun('type.modSem.v',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.modSem.v',bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.v',fun('type.modSem.v',bool))),X3),s('type.list.list'('type.option.option'('type.modSem.v')),X17))),s('type.semanticPrimitives.v',X22))),s('type.modSem.v',X24)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X17))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X18))),s(fun('type.list.list'('type.string.char'),bool),X19))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X20))))) | ? [X8,X9,X10,X11,X12,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X8))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X10))),s(fun('type.list.list'('type.string.char'),bool),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X13)))) & ! [X14,X15] : (s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.option.SOME_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X15))) != s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X11),s('type.list.list'('type.string.char'),X14))) | ? [X16] : (s('type.option.option'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.option.SOME_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X16))) = s('type.option.option'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X9),s('type.list.list'('type.string.char'),X14))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X8))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X16))),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X15)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))))),X7),s('type.list.list'('type.option.option'('type.modSem.v')),X8))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X9))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X11))),s(fun('type.list.list'('type.string.char'),bool),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X13))))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2))))))),
  inference(flattening,[],[f66])).
fof(f66,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.source_to_modProof.env_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2)))) <=> ! [X3,X4,X5,X6,X7] : ((? [X40,X41,X42] : ((? [X75] : (s('type.semanticPrimitives.v',X41) = s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit',X75))) & s('type.modSem.v',X42) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X75)))) | ? [X72,X73,X74] : (s('type.semanticPrimitives.v',X41) = s('type.semanticPrimitives.v','const.semanticPrimitives.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X72),s('type.list.list'('type.semanticPrimitives.v'),X73))) & s('type.modSem.v',X42) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X72),s('type.list.list'('type.modSem.v'),X74))) & p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X4),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.list.list'('type.semanticPrimitives.v'),X73))),s('type.list.list'('type.modSem.v'),X74))))) | ? [X65,X66,X67,X68,X69,X70,X71] : (s('type.semanticPrimitives.v',X41) = s('type.semanticPrimitives.v','const.semanticPrimitives.Closure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X67))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X70))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X67))),s('type.list.list'('type.string.char'),X68),s('type.ast.exp',X69))) & s('type.modSem.v',X42) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X67))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X71))),s('type.list.list'('type.string.char'),X68),s('type.modLang.exp','const.source_to_mod.compile_exp_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X65),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.fdomsub_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.DRESTRICT_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X66),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.COMPL_1'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X71))))))))),s('type.list.list'('type.string.char'),X68))),s('type.ast.exp',X69))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X67))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X71)))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.DIFF_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X70))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X67))))))))),s(fun('type.list.list'('type.string.char'),bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X66)))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))))),X7),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X65))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X66))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X67))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X71))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X70))))) | ? [X58,X59,X60,X61,X62,X63,X64] : (s('type.semanticPrimitives.v',X41) = s('type.semanticPrimitives.v','const.semanticPrimitives.Recclosure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X60))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X63))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X60))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X61),s('type.list.list'('type.string.char'),X62))) & s('type.modSem.v',X42) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X60))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X64))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),'const.source_to_mod.compile_funs_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X58),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.DRESTRICT_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X59),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.COMPL_1'(s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.UNION_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X64))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X61))))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X61))),s('type.list.list'('type.string.char'),X62))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X60))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X64)))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.DIFF_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X63))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X60))))))))),s(fun('type.list.list'('type.string.char'),bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X59)))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))))),X7),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X58))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X59))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X60))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X64))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X63))))) | ? [X46,X47,X48,X49,X50,X51,X52,X53] : (s('type.semanticPrimitives.v',X41) = s('type.semanticPrimitives.v','const.semanticPrimitives.Recclosure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X49),s('type.list.list'('type.string.char'),X50))) & s('type.modSem.v',X42) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.string.char'),X51),s('type.modLang.exp','const.source_to_mod.compile_exp_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X46),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.fdomsub_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X47),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X53))),s('type.list.list'('type.string.char'),X51))),s('type.ast.exp',X52))))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48))))))),s(fun('type.list.list'('type.string.char'),bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X47)))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))))),X7),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X46))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X47))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48))))),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48)))))) & s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X49))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'const.list.REVERSE_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X53))))) & s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X51),s('type.ast.exp',X52))))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.semanticPrimitives.find_recfun_2'(s('type.list.list'('type.string.char'),X50),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X49))) & ! [X54] : (~p(s(bool,'const.bool.IN_2'(s('type.list.list'('type.string.char'),X54),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X49)))))))) | ? [X55,X56,X57] : (s('type.option.option'('type.num.num'),'const.option.SOME_1'(s('type.num.num',X55))) = s('type.option.option'('type.num.num'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.FEMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X53))),s('type.list.list'('type.string.char'),X54))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X55),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X40)))))) & s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X56),s('type.ast.exp',X57))))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.semanticPrimitives.find_recfun_2'(s('type.list.list'('type.string.char'),X54),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X49))) & s('type.option.option'('type.modSem.v'),'const.list.EL_2'(s('type.num.num',X55),s('type.list.list'('type.option.option'('type.modSem.v')),X40))) = s('type.option.option'('type.modSem.v'),'const.option.SOME_1'(s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.string.char'),X56),s('type.modLang.exp','const.source_to_mod.compile_exp_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X46),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.fdomsub_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X47),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X53))),s('type.list.list'('type.string.char'),X56))),s('type.ast.exp',X57)))))))))) | ? [X45] : (s('type.semanticPrimitives.v',X41) = s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X45))) & s('type.modSem.v',X42) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X45)))) | ? [X43,X44] : (s('type.semanticPrimitives.v',X41) = s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X44))) & s('type.modSem.v',X42) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X43))) & p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X4),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.list.list'('type.semanticPrimitives.v'),X44))),s('type.list.list'('type.modSem.v'),X43)))))) & ~p(s(bool,happ(s(fun('type.modSem.v',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.modSem.v',bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.v',fun('type.modSem.v',bool))),X3),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.semanticPrimitives.v',X41))),s('type.modSem.v',X42))))) | ? [X33,X34,X35] : (((s('type.list.list'('type.semanticPrimitives.v'),'const.list.NIL_0') = s('type.list.list'('type.semanticPrimitives.v'),X34) & s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X35)) | ? [X36,X37,X38,X39] : (s('type.list.list'('type.semanticPrimitives.v'),X34) = s('type.list.list'('type.semanticPrimitives.v'),'const.list.CONS_2'(s('type.semanticPrimitives.v',X36),s('type.list.list'('type.semanticPrimitives.v'),X37))) & s('type.list.list'('type.modSem.v'),X35) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X38),s('type.list.list'('type.modSem.v'),X39))) & p(s(bool,happ(s(fun('type.modSem.v',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.modSem.v',bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.v',fun('type.modSem.v',bool))),X3),s('type.list.list'('type.option.option'('type.modSem.v')),X33))),s('type.semanticPrimitives.v',X36))),s('type.modSem.v',X38)))) & p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X4),s('type.list.list'('type.option.option'('type.modSem.v')),X33))),s('type.list.list'('type.semanticPrimitives.v'),X37))),s('type.list.list'('type.modSem.v'),X39)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X4),s('type.list.list'('type.option.option'('type.modSem.v')),X33))),s('type.list.list'('type.semanticPrimitives.v'),X34))),s('type.list.list'('type.modSem.v'),X35))))) | ? [X25,X26,X27] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X26) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27)) | ? [X28,X29,X30,X31,X32] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X26) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X28),s('type.semanticPrimitives.v',X29))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X30))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X28),s('type.modSem.v',X32))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X31))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X25))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X30))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X31)))) & p(s(bool,happ(s(fun('type.modSem.v',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.modSem.v',bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.v',fun('type.modSem.v',bool))),X3),s('type.list.list'('type.option.option'('type.modSem.v')),X25))),s('type.semanticPrimitives.v',X29))),s('type.modSem.v',X32)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X25))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X26))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))))) | ? [X17,X18,X19,X20] : (! [X21,X22] : ((p(s(bool,'const.bool.IN_2'(s('type.list.list'('type.string.char'),X21),s(fun('type.list.list'('type.string.char'),bool),X19)))) | s('type.option.option'('type.semanticPrimitives.v'),'const.option.SOME_1'(s('type.semanticPrimitives.v',X22))) != s('type.option.option'('type.semanticPrimitives.v'),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X20),s('type.list.list'('type.string.char'),X21)))) | ? [X23,X24] : (s('type.option.option'('type.num.num'),'const.option.SOME_1'(s('type.num.num',X23))) = s('type.option.option'('type.num.num'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X18),s('type.list.list'('type.string.char'),X21))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X23),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X17)))))) & s('type.option.option'('type.modSem.v'),'const.option.SOME_1'(s('type.modSem.v',X24))) = s('type.option.option'('type.modSem.v'),'const.list.EL_2'(s('type.num.num',X23),s('type.list.list'('type.option.option'('type.modSem.v')),X17))) & p(s(bool,happ(s(fun('type.modSem.v',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.modSem.v',bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.v',fun('type.modSem.v',bool))),X3),s('type.list.list'('type.option.option'('type.modSem.v')),X17))),s('type.semanticPrimitives.v',X22))),s('type.modSem.v',X24)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X17))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X18))),s(fun('type.list.list'('type.string.char'),bool),X19))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X20))))) | ? [X8,X9,X10,X11,X12,X13] : ((p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X8))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X10))),s(fun('type.list.list'('type.string.char'),bool),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X13)))) & ! [X14,X15] : (s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.option.SOME_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X15))) != s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X11),s('type.list.list'('type.string.char'),X14))) | ? [X16] : (s('type.option.option'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.option.SOME_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X16))) = s('type.option.option'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X9),s('type.list.list'('type.string.char'),X14))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X8))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X16))),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X15))))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))))),X7),s('type.list.list'('type.option.option'('type.modSem.v')),X8))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X9))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X11))),s(fun('type.list.list'('type.string.char'),bool),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X13)))))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2))))))),
  inference(ennf_transformation,[],[f41])).
fof(f41,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.source_to_modProof.env_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2)))) <=> ! [X3,X4,X5,X6,X7] : ((! [X40,X41,X42] : ((? [X75] : (s('type.semanticPrimitives.v',X41) = s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit',X75))) & s('type.modSem.v',X42) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X75)))) | ? [X72,X73,X74] : (s('type.semanticPrimitives.v',X41) = s('type.semanticPrimitives.v','const.semanticPrimitives.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X72),s('type.list.list'('type.semanticPrimitives.v'),X73))) & s('type.modSem.v',X42) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X72),s('type.list.list'('type.modSem.v'),X74))) & p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X4),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.list.list'('type.semanticPrimitives.v'),X73))),s('type.list.list'('type.modSem.v'),X74))))) | ? [X65,X66,X67,X68,X69,X70,X71] : (s('type.semanticPrimitives.v',X41) = s('type.semanticPrimitives.v','const.semanticPrimitives.Closure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X67))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X70))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X67))),s('type.list.list'('type.string.char'),X68),s('type.ast.exp',X69))) & s('type.modSem.v',X42) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X67))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X71))),s('type.list.list'('type.string.char'),X68),s('type.modLang.exp','const.source_to_mod.compile_exp_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X65),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.fdomsub_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.DRESTRICT_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X66),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.COMPL_1'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X71))))))))),s('type.list.list'('type.string.char'),X68))),s('type.ast.exp',X69))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X67))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X71)))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.DIFF_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X70))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X67))))))))),s(fun('type.list.list'('type.string.char'),bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X66)))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))))),X7),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X65))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X66))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X67))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X71))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X70))))) | ? [X58,X59,X60,X61,X62,X63,X64] : (s('type.semanticPrimitives.v',X41) = s('type.semanticPrimitives.v','const.semanticPrimitives.Recclosure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X60))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X63))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X60))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X61),s('type.list.list'('type.string.char'),X62))) & s('type.modSem.v',X42) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X60))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X64))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),'const.source_to_mod.compile_funs_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X58),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.DRESTRICT_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X59),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.COMPL_1'(s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.UNION_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X64))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X61))))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X61))),s('type.list.list'('type.string.char'),X62))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X60))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X64)))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.DIFF_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X63))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X60))))))))),s(fun('type.list.list'('type.string.char'),bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X59)))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))))),X7),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X58))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X59))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X60))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X64))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X63))))) | ? [X46,X47,X48,X49,X50,X51,X52,X53] : (s('type.semanticPrimitives.v',X41) = s('type.semanticPrimitives.v','const.semanticPrimitives.Recclosure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X49),s('type.list.list'('type.string.char'),X50))) & s('type.modSem.v',X42) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.string.char'),X51),s('type.modLang.exp','const.source_to_mod.compile_exp_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X46),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.fdomsub_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X47),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X53))),s('type.list.list'('type.string.char'),X51))),s('type.ast.exp',X52))))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48))))))),s(fun('type.list.list'('type.string.char'),bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X47)))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))))),X7),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X46))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X47))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48))))),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48)))))) & s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X49))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'const.list.REVERSE_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X53))))) & s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X51),s('type.ast.exp',X52))))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.semanticPrimitives.find_recfun_2'(s('type.list.list'('type.string.char'),X50),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X49))) & ! [X54] : (p(s(bool,'const.bool.IN_2'(s('type.list.list'('type.string.char'),X54),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X49)))))))) => ? [X55,X56,X57] : (s('type.option.option'('type.num.num'),'const.option.SOME_1'(s('type.num.num',X55))) = s('type.option.option'('type.num.num'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.FEMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X53))),s('type.list.list'('type.string.char'),X54))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X55),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X40)))))) & s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X56),s('type.ast.exp',X57))))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.semanticPrimitives.find_recfun_2'(s('type.list.list'('type.string.char'),X54),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X49))) & s('type.option.option'('type.modSem.v'),'const.list.EL_2'(s('type.num.num',X55),s('type.list.list'('type.option.option'('type.modSem.v')),X40))) = s('type.option.option'('type.modSem.v'),'const.option.SOME_1'(s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.string.char'),X56),s('type.modLang.exp','const.source_to_mod.compile_exp_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X46),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.fdomsub_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X47),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X53))),s('type.list.list'('type.string.char'),X56))),s('type.ast.exp',X57)))))))))) | ? [X45] : (s('type.semanticPrimitives.v',X41) = s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X45))) & s('type.modSem.v',X42) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X45)))) | ? [X43,X44] : (s('type.semanticPrimitives.v',X41) = s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X44))) & s('type.modSem.v',X42) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X43))) & p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X4),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.list.list'('type.semanticPrimitives.v'),X44))),s('type.list.list'('type.modSem.v'),X43)))))) => p(s(bool,happ(s(fun('type.modSem.v',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.modSem.v',bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.v',fun('type.modSem.v',bool))),X3),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.semanticPrimitives.v',X41))),s('type.modSem.v',X42))))) & ! [X33,X34,X35] : (((s('type.list.list'('type.semanticPrimitives.v'),'const.list.NIL_0') = s('type.list.list'('type.semanticPrimitives.v'),X34) & s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X35)) | ? [X36,X37,X38,X39] : (s('type.list.list'('type.semanticPrimitives.v'),X34) = s('type.list.list'('type.semanticPrimitives.v'),'const.list.CONS_2'(s('type.semanticPrimitives.v',X36),s('type.list.list'('type.semanticPrimitives.v'),X37))) & s('type.list.list'('type.modSem.v'),X35) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X38),s('type.list.list'('type.modSem.v'),X39))) & p(s(bool,happ(s(fun('type.modSem.v',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.modSem.v',bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.v',fun('type.modSem.v',bool))),X3),s('type.list.list'('type.option.option'('type.modSem.v')),X33))),s('type.semanticPrimitives.v',X36))),s('type.modSem.v',X38)))) & p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X4),s('type.list.list'('type.option.option'('type.modSem.v')),X33))),s('type.list.list'('type.semanticPrimitives.v'),X37))),s('type.list.list'('type.modSem.v'),X39)))))) => p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X4),s('type.list.list'('type.option.option'('type.modSem.v')),X33))),s('type.list.list'('type.semanticPrimitives.v'),X34))),s('type.list.list'('type.modSem.v'),X35))))) & ! [X25,X26,X27] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X26) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27)) | ? [X28,X29,X30,X31,X32] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X26) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X28),s('type.semanticPrimitives.v',X29))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X30))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X28),s('type.modSem.v',X32))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X31))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X25))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X30))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X31)))) & p(s(bool,happ(s(fun('type.modSem.v',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.modSem.v',bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.v',fun('type.modSem.v',bool))),X3),s('type.list.list'('type.option.option'('type.modSem.v')),X25))),s('type.semanticPrimitives.v',X29))),s('type.modSem.v',X32)))))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X25))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X26))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))))) & ! [X17,X18,X19,X20] : (! [X21,X22] : ((~p(s(bool,'const.bool.IN_2'(s('type.list.list'('type.string.char'),X21),s(fun('type.list.list'('type.string.char'),bool),X19)))) & s('type.option.option'('type.semanticPrimitives.v'),'const.option.SOME_1'(s('type.semanticPrimitives.v',X22))) = s('type.option.option'('type.semanticPrimitives.v'),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X20),s('type.list.list'('type.string.char'),X21)))) => ? [X23,X24] : (s('type.option.option'('type.num.num'),'const.option.SOME_1'(s('type.num.num',X23))) = s('type.option.option'('type.num.num'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X18),s('type.list.list'('type.string.char'),X21))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X23),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X17)))))) & s('type.option.option'('type.modSem.v'),'const.option.SOME_1'(s('type.modSem.v',X24))) = s('type.option.option'('type.modSem.v'),'const.list.EL_2'(s('type.num.num',X23),s('type.list.list'('type.option.option'('type.modSem.v')),X17))) & p(s(bool,happ(s(fun('type.modSem.v',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.modSem.v',bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.v',fun('type.modSem.v',bool))),X3),s('type.list.list'('type.option.option'('type.modSem.v')),X17))),s('type.semanticPrimitives.v',X22))),s('type.modSem.v',X24)))))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X17))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X18))),s(fun('type.list.list'('type.string.char'),bool),X19))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X20))))) & ! [X8,X9,X10,X11,X12,X13] : ((p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X8))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X10))),s(fun('type.list.list'('type.string.char'),bool),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X13)))) & ! [X14,X15] : (s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.option.SOME_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X15))) = s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X11),s('type.list.list'('type.string.char'),X14))) => ? [X16] : (s('type.option.option'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.option.SOME_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X16))) = s('type.option.option'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X9),s('type.list.list'('type.string.char'),X14))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X8))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X16))),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X15))))))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))))),X7),s('type.list.list'('type.option.option'('type.modSem.v')),X8))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X9))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X11))),s(fun('type.list.list'('type.string.char'),bool),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X13)))))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2))))))),
  inference(flattening,[],[f40])).
fof(f40,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.source_to_modProof.env_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2)))) <=> ! [X3,X4,X5,X6,X7] : ((! [X40,X41,X42] : ((? [X75] : (s('type.semanticPrimitives.v',X41) = s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit',X75))) & s('type.modSem.v',X42) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X75)))) | ? [X72,X73,X74] : (s('type.semanticPrimitives.v',X41) = s('type.semanticPrimitives.v','const.semanticPrimitives.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X72),s('type.list.list'('type.semanticPrimitives.v'),X73))) & s('type.modSem.v',X42) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X72),s('type.list.list'('type.modSem.v'),X74))) & p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X4),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.list.list'('type.semanticPrimitives.v'),X73))),s('type.list.list'('type.modSem.v'),X74))))) | ? [X65,X66,X67,X68,X69,X70,X71] : (s('type.semanticPrimitives.v',X41) = s('type.semanticPrimitives.v','const.semanticPrimitives.Closure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X67))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X70))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X67))),s('type.list.list'('type.string.char'),X68),s('type.ast.exp',X69))) & s('type.modSem.v',X42) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X67))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X71))),s('type.list.list'('type.string.char'),X68),s('type.modLang.exp','const.source_to_mod.compile_exp_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X65),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.fdomsub_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.DRESTRICT_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X66),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.COMPL_1'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X71))))))))),s('type.list.list'('type.string.char'),X68))),s('type.ast.exp',X69))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X67))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X71)))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.DIFF_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X70))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X67))))))))),s(fun('type.list.list'('type.string.char'),bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X66)))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))))),X7),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X65))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X66))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X67))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X71))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X70))))) | ? [X58,X59,X60,X61,X62,X63,X64] : (s('type.semanticPrimitives.v',X41) = s('type.semanticPrimitives.v','const.semanticPrimitives.Recclosure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X60))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X63))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X60))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X61),s('type.list.list'('type.string.char'),X62))) & s('type.modSem.v',X42) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X60))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X64))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),'const.source_to_mod.compile_funs_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X58),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.DRESTRICT_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X59),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.COMPL_1'(s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.UNION_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X64))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X61))))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X61))),s('type.list.list'('type.string.char'),X62))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X60))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X64)))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.DIFF_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X63))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X60))))))))),s(fun('type.list.list'('type.string.char'),bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X59)))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))))),X7),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X58))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X59))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X60))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X64))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X63))))) | ? [X46,X47,X48,X49,X50,X51,X52,X53] : (s('type.semanticPrimitives.v',X41) = s('type.semanticPrimitives.v','const.semanticPrimitives.Recclosure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X49),s('type.list.list'('type.string.char'),X50))) & s('type.modSem.v',X42) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.string.char'),X51),s('type.modLang.exp','const.source_to_mod.compile_exp_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X46),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.fdomsub_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X47),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X53))),s('type.list.list'('type.string.char'),X51))),s('type.ast.exp',X52))))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48))))))),s(fun('type.list.list'('type.string.char'),bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X47)))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))))),X7),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X46))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X47))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48))))),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48)))))) & s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X49))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'const.list.REVERSE_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X53))))) & s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X51),s('type.ast.exp',X52))))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.semanticPrimitives.find_recfun_2'(s('type.list.list'('type.string.char'),X50),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X49))) & ! [X54] : (p(s(bool,'const.bool.IN_2'(s('type.list.list'('type.string.char'),X54),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X49)))))))) => ? [X55,X56,X57] : (s('type.option.option'('type.num.num'),'const.option.SOME_1'(s('type.num.num',X55))) = s('type.option.option'('type.num.num'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.FEMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X53))),s('type.list.list'('type.string.char'),X54))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X55),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X40)))))) & s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X56),s('type.ast.exp',X57))))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.semanticPrimitives.find_recfun_2'(s('type.list.list'('type.string.char'),X54),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X49))) & s('type.option.option'('type.modSem.v'),'const.list.EL_2'(s('type.num.num',X55),s('type.list.list'('type.option.option'('type.modSem.v')),X40))) = s('type.option.option'('type.modSem.v'),'const.option.SOME_1'(s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X48))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.string.char'),X56),s('type.modLang.exp','const.source_to_mod.compile_exp_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X46),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.fdomsub_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X47),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X53))),s('type.list.list'('type.string.char'),X56))),s('type.ast.exp',X57)))))))))) | ? [X45] : (s('type.semanticPrimitives.v',X41) = s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X45))) & s('type.modSem.v',X42) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X45)))) | ? [X43,X44] : (s('type.semanticPrimitives.v',X41) = s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X44))) & s('type.modSem.v',X42) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X43))) & p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X4),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.list.list'('type.semanticPrimitives.v'),X44))),s('type.list.list'('type.modSem.v'),X43)))))) => p(s(bool,happ(s(fun('type.modSem.v',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.modSem.v',bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.v',fun('type.modSem.v',bool))),X3),s('type.list.list'('type.option.option'('type.modSem.v')),X40))),s('type.semanticPrimitives.v',X41))),s('type.modSem.v',X42))))) & ! [X33,X34,X35] : (((s('type.list.list'('type.semanticPrimitives.v'),'const.list.NIL_0') = s('type.list.list'('type.semanticPrimitives.v'),X34) & s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X35)) | ? [X36,X37,X38,X39] : (s('type.list.list'('type.semanticPrimitives.v'),X34) = s('type.list.list'('type.semanticPrimitives.v'),'const.list.CONS_2'(s('type.semanticPrimitives.v',X36),s('type.list.list'('type.semanticPrimitives.v'),X37))) & s('type.list.list'('type.modSem.v'),X35) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X38),s('type.list.list'('type.modSem.v'),X39))) & p(s(bool,happ(s(fun('type.modSem.v',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.modSem.v',bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.v',fun('type.modSem.v',bool))),X3),s('type.list.list'('type.option.option'('type.modSem.v')),X33))),s('type.semanticPrimitives.v',X36))),s('type.modSem.v',X38)))) & p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X4),s('type.list.list'('type.option.option'('type.modSem.v')),X33))),s('type.list.list'('type.semanticPrimitives.v'),X37))),s('type.list.list'('type.modSem.v'),X39)))))) => p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X4),s('type.list.list'('type.option.option'('type.modSem.v')),X33))),s('type.list.list'('type.semanticPrimitives.v'),X34))),s('type.list.list'('type.modSem.v'),X35))))) & ! [X25,X26,X27] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X26) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27)) | ? [X28,X29,X30,X31,X32] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X26) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X28),s('type.semanticPrimitives.v',X29))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X30))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X28),s('type.modSem.v',X32))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X31))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X25))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X30))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X31)))) & p(s(bool,happ(s(fun('type.modSem.v',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.modSem.v',bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.v',fun('type.modSem.v',bool))),X3),s('type.list.list'('type.option.option'('type.modSem.v')),X25))),s('type.semanticPrimitives.v',X29))),s('type.modSem.v',X32)))))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X25))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X26))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))))) & ! [X17,X18,X19,X20] : (! [X21,X22] : ((~p(s(bool,'const.bool.IN_2'(s('type.list.list'('type.string.char'),X21),s(fun('type.list.list'('type.string.char'),bool),X19)))) & s('type.option.option'('type.semanticPrimitives.v'),'const.option.SOME_1'(s('type.semanticPrimitives.v',X22))) = s('type.option.option'('type.semanticPrimitives.v'),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X20),s('type.list.list'('type.string.char'),X21)))) => ? [X23,X24] : (s('type.option.option'('type.num.num'),'const.option.SOME_1'(s('type.num.num',X23))) = s('type.option.option'('type.num.num'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X18),s('type.list.list'('type.string.char'),X21))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X23),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X17)))))) & s('type.option.option'('type.modSem.v'),'const.option.SOME_1'(s('type.modSem.v',X24))) = s('type.option.option'('type.modSem.v'),'const.list.EL_2'(s('type.num.num',X23),s('type.list.list'('type.option.option'('type.modSem.v')),X17))) & p(s(bool,happ(s(fun('type.modSem.v',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.modSem.v',bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.v',fun('type.modSem.v',bool))),X3),s('type.list.list'('type.option.option'('type.modSem.v')),X17))),s('type.semanticPrimitives.v',X22))),s('type.modSem.v',X24)))))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X17))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X18))),s(fun('type.list.list'('type.string.char'),bool),X19))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X20))))) & ! [X8,X9,X10,X11,X12,X13] : ((p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X8))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X10))),s(fun('type.list.list'('type.string.char'),bool),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X13)))) & ! [X14,X15] : (s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.option.SOME_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X15))) = s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X11),s('type.list.list'('type.string.char'),X14))) => ? [X16] : (s('type.option.option'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.option.SOME_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X16))) = s('type.option.option'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X9),s('type.list.list'('type.string.char'),X14))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X8))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X16))),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X15))))))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))))),X7),s('type.list.list'('type.option.option'('type.modSem.v')),X8))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X9))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X11))),s(fun('type.list.list'('type.string.char'),bool),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X13)))))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2))))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X5,X7,X8] : (p(s(bool,'const.source_to_modProof.env_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X8)))) <=> ! [X9,X10,X11,X12,X13] : ((! [X14,X15,X16] : ((? [X17] : (s('type.semanticPrimitives.v',X15) = s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit',X17))) & s('type.modSem.v',X16) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X17)))) | ? [X18,X19,X20] : (s('type.semanticPrimitives.v',X15) = s('type.semanticPrimitives.v','const.semanticPrimitives.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X18),s('type.list.list'('type.semanticPrimitives.v'),X19))) & s('type.modSem.v',X16) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X18),s('type.list.list'('type.modSem.v'),X20))) & p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X10),s('type.list.list'('type.option.option'('type.modSem.v')),X14))),s('type.list.list'('type.semanticPrimitives.v'),X19))),s('type.list.list'('type.modSem.v'),X20))))) | ? [X21,X22,X23,X24,X25,X26,X27] : (s('type.semanticPrimitives.v',X15) = s('type.semanticPrimitives.v','const.semanticPrimitives.Closure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X23))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X26))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X23))),s('type.list.list'('type.string.char'),X24),s('type.ast.exp',X25))) & s('type.modSem.v',X16) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X23))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.string.char'),X24),s('type.modLang.exp','const.source_to_mod.compile_exp_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X21),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.fdomsub_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.DRESTRICT_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X22),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.COMPL_1'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))))))))),s('type.list.list'('type.string.char'),X24))),s('type.ast.exp',X25))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X11),s('type.list.list'('type.option.option'('type.modSem.v')),X14))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X23))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27)))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.DIFF_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X26))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X23))))))))),s(fun('type.list.list'('type.string.char'),bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X22)))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))))),X13),s('type.list.list'('type.option.option'('type.modSem.v')),X14))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X21))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X23))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X26))))) | ? [X21,X22,X23,X28,X24,X26,X27] : (s('type.semanticPrimitives.v',X15) = s('type.semanticPrimitives.v','const.semanticPrimitives.Recclosure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X23))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X26))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X23))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X28),s('type.list.list'('type.string.char'),X24))) & s('type.modSem.v',X16) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X23))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),'const.source_to_mod.compile_funs_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X21),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.DRESTRICT_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X22),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.COMPL_1'(s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.UNION_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X28))))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X28))),s('type.list.list'('type.string.char'),X24))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X11),s('type.list.list'('type.option.option'('type.modSem.v')),X14))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X23))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27)))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.DIFF_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X26))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X23))))))))),s(fun('type.list.list'('type.string.char'),bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X22)))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))))),X13),s('type.list.list'('type.option.option'('type.modSem.v')),X14))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X21))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X23))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X26))))) | ? [X21,X22,X23,X28,X24,X29,X25,X30] : (s('type.semanticPrimitives.v',X15) = s('type.semanticPrimitives.v','const.semanticPrimitives.Recclosure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X23),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X28),s('type.list.list'('type.string.char'),X24))) & s('type.modSem.v',X16) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X23))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.string.char'),X29),s('type.modLang.exp','const.source_to_mod.compile_exp_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X21),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.fdomsub_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X22),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X30))),s('type.list.list'('type.string.char'),X29))),s('type.ast.exp',X25))))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X23))))))),s(fun('type.list.list'('type.string.char'),bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X22)))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))))),X13),s('type.list.list'('type.option.option'('type.modSem.v')),X14))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X21))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X23))))),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X23)))))) & s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X28))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'const.list.REVERSE_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X30))))) & s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X29),s('type.ast.exp',X25))))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.semanticPrimitives.find_recfun_2'(s('type.list.list'('type.string.char'),X24),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X28))) & ! [X31] : (p(s(bool,'const.bool.IN_2'(s('type.list.list'('type.string.char'),X31),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X28)))))))) => ? [X32,X33,X34] : (s('type.option.option'('type.num.num'),'const.option.SOME_1'(s('type.num.num',X32))) = s('type.option.option'('type.num.num'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.FEMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X30))),s('type.list.list'('type.string.char'),X31))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X32),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X14)))))) & s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X33),s('type.ast.exp',X34))))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.semanticPrimitives.find_recfun_2'(s('type.list.list'('type.string.char'),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X28))) & s('type.option.option'('type.modSem.v'),'const.list.EL_2'(s('type.num.num',X32),s('type.list.list'('type.option.option'('type.modSem.v')),X14))) = s('type.option.option'('type.modSem.v'),'const.option.SOME_1'(s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X23))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.string.char'),X33),s('type.modLang.exp','const.source_to_mod.compile_exp_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X21),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.fdomsub_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X22),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X30))),s('type.list.list'('type.string.char'),X33))),s('type.ast.exp',X34)))))))))) | ? [X35] : (s('type.semanticPrimitives.v',X15) = s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X35))) & s('type.modSem.v',X16) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X35)))) | ? [X36,X19] : (s('type.semanticPrimitives.v',X15) = s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X19))) & s('type.modSem.v',X16) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X36))) & p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X10),s('type.list.list'('type.option.option'('type.modSem.v')),X14))),s('type.list.list'('type.semanticPrimitives.v'),X19))),s('type.list.list'('type.modSem.v'),X36)))))) => p(s(bool,happ(s(fun('type.modSem.v',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.modSem.v',bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.v',fun('type.modSem.v',bool))),X9),s('type.list.list'('type.option.option'('type.modSem.v')),X14))),s('type.semanticPrimitives.v',X15))),s('type.modSem.v',X16))))) & ! [X37,X38,X39] : (((s('type.list.list'('type.semanticPrimitives.v'),'const.list.NIL_0') = s('type.list.list'('type.semanticPrimitives.v'),X38) & s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X39)) | ? [X40,X19,X41,X20] : (s('type.list.list'('type.semanticPrimitives.v'),X38) = s('type.list.list'('type.semanticPrimitives.v'),'const.list.CONS_2'(s('type.semanticPrimitives.v',X40),s('type.list.list'('type.semanticPrimitives.v'),X19))) & s('type.list.list'('type.modSem.v'),X39) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X41),s('type.list.list'('type.modSem.v'),X20))) & p(s(bool,happ(s(fun('type.modSem.v',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.modSem.v',bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.v',fun('type.modSem.v',bool))),X9),s('type.list.list'('type.option.option'('type.modSem.v')),X37))),s('type.semanticPrimitives.v',X40))),s('type.modSem.v',X41)))) & p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X10),s('type.list.list'('type.option.option'('type.modSem.v')),X37))),s('type.list.list'('type.semanticPrimitives.v'),X19))),s('type.list.list'('type.modSem.v'),X20)))))) => p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X10),s('type.list.list'('type.option.option'('type.modSem.v')),X37))),s('type.list.list'('type.semanticPrimitives.v'),X38))),s('type.list.list'('type.modSem.v'),X39))))) & ! [X42,X43,X44] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X43) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X44)) | ? [X24,X40,X23,X26,X41] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X43) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X24),s('type.semanticPrimitives.v',X40))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X23))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X44) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X24),s('type.modSem.v',X41))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X26))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X11),s('type.list.list'('type.option.option'('type.modSem.v')),X42))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X23))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X26)))) & p(s(bool,happ(s(fun('type.modSem.v',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.modSem.v',bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.v',fun('type.modSem.v',bool))),X9),s('type.list.list'('type.option.option'('type.modSem.v')),X42))),s('type.semanticPrimitives.v',X40))),s('type.modSem.v',X41)))))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X11),s('type.list.list'('type.option.option'('type.modSem.v')),X42))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X43))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X44))))) & ! [X45,X46,X47,X48] : (! [X24,X40] : ((~p(s(bool,'const.bool.IN_2'(s('type.list.list'('type.string.char'),X24),s(fun('type.list.list'('type.string.char'),bool),X47)))) & s('type.option.option'('type.semanticPrimitives.v'),'const.option.SOME_1'(s('type.semanticPrimitives.v',X40))) = s('type.option.option'('type.semanticPrimitives.v'),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X48),s('type.list.list'('type.string.char'),X24)))) => ? [X32,X49] : (s('type.option.option'('type.num.num'),'const.option.SOME_1'(s('type.num.num',X32))) = s('type.option.option'('type.num.num'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X46),s('type.list.list'('type.string.char'),X24))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X32),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X45)))))) & s('type.option.option'('type.modSem.v'),'const.option.SOME_1'(s('type.modSem.v',X49))) = s('type.option.option'('type.modSem.v'),'const.list.EL_2'(s('type.num.num',X32),s('type.list.list'('type.option.option'('type.modSem.v')),X45))) & p(s(bool,happ(s(fun('type.modSem.v',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.modSem.v',bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.v',fun('type.modSem.v',bool))),X9),s('type.list.list'('type.option.option'('type.modSem.v')),X45))),s('type.semanticPrimitives.v',X40))),s('type.modSem.v',X49)))))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),X12),s('type.list.list'('type.option.option'('type.modSem.v')),X45))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X46))),s(fun('type.list.list'('type.string.char'),bool),X47))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X48))))) & ! [X50,X51,X52,X53,X54,X55] : ((p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),X12),s('type.list.list'('type.option.option'('type.modSem.v')),X50))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X52))),s(fun('type.list.list'('type.string.char'),bool),X54))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X55)))) & ! [X56,X26] : (s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.option.SOME_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X26))) = s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X53),s('type.list.list'('type.string.char'),X56))) => ? [X57] : (s('type.option.option'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.option.SOME_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X57))) = s('type.option.option'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X51),s('type.list.list'('type.string.char'),X56))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),X12),s('type.list.list'('type.option.option'('type.modSem.v')),X50))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X57))),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.EMPTY_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X26))))))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))),happ(s(fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool))))),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),fun('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),bool)))))),X13),s('type.list.list'('type.option.option'('type.modSem.v')),X50))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X51))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X52))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),X53))),s(fun('type.list.list'('type.string.char'),bool),X54))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X55)))))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X11),s('type.list.list'('type.option.option'('type.modSem.v')),X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X8))))))),
  file('thm.source_to_modProof.v_rel_rules|split|9','thm.source_to_modProof.v_rel2_def')).
fof(f243,plain,(
  ~p(s(bool,'const.source_to_modProof.env_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),sK36),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))))),
  inference(cnf_transformation,[],[f111])).
fof(f111,plain,(
  ~p(s(bool,'const.source_to_modProof.env_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),sK36),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK36])],[f46])).
fof(f46,plain,(
  ? [X0] : ~p(s(bool,'const.source_to_modProof.env_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))))),
  inference(ennf_transformation,[],[f23])).
fof(f23,plain,(
  ~! [X0] : p(s(bool,'const.source_to_modProof.env_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : p(s(bool,'const.source_to_modProof.env_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : p(s(bool,'const.source_to_modProof.env_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))))),
  file('thm.source_to_modProof.v_rel_rules|split|9','thm.source_to_modProof.v_rel_rules|split|9')).
fof(f28660,plain,(
  ( ! [X2,X0,X1] : (sP11(X0,X1,X2) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X1)) )),
  inference(resolution,[],[f28645,f339])).
fof(f339,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP7(X0,X1,X2,X3,X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X3) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X4)) )),
  inference(cnf_transformation,[],[f141])).
fof(f141,plain,(
  ! [X0,X1,X2,X3,X4] : ((~sP7(X0,X1,X2,X3,X4) | (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X4) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X3)) | (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X4) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK74(X4,X3,X2,X1,X0)),s('type.semanticPrimitives.v',sK75(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK76(X4,X3,X2,X1,X0)))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X3) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK74(X4,X3,X2,X1,X0)),s('type.modSem.v',sK78(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK77(X4,X3,X2,X1,X0)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK76(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK77(X4,X3,X2,X1,X0))))) & p(s(bool,happ(s(fun('type.modSem.v',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.modSem.v',bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.v',fun('type.modSem.v',bool))),X0),s('type.list.list'('type.option.option'('type.modSem.v')),X1))),s('type.semanticPrimitives.v',sK75(X4,X3,X2,X1,X0)))),s('type.modSem.v',sK78(X4,X3,X2,X1,X0))))))) & (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X3)) & ! [X5,X6,X7,X8,X9] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X4) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.semanticPrimitives.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X7))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X3) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.modSem.v',X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X8))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X8)))) | ~p(s(bool,happ(s(fun('type.modSem.v',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.modSem.v',bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.v',fun('type.modSem.v',bool))),X0),s('type.list.list'('type.option.option'('type.modSem.v')),X1))),s('type.semanticPrimitives.v',X6))),s('type.modSem.v',X9)))))) | sP7(X0,X1,X2,X3,X4)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK74,sK75,sK76,sK77,sK78])],[f140])).
fof(f140,plain,(
  ! [X0,X1,X2,X3,X4] : ((~sP7(X0,X1,X2,X3,X4) | (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X4) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X3)) | ? [X10,X11,X12,X13,X14] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X4) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X10),s('type.semanticPrimitives.v',X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X12))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X3) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X10),s('type.modSem.v',X14))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X13))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X13)))) & p(s(bool,happ(s(fun('type.modSem.v',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.modSem.v',bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.v',fun('type.modSem.v',bool))),X0),s('type.list.list'('type.option.option'('type.modSem.v')),X1))),s('type.semanticPrimitives.v',X11))),s('type.modSem.v',X14)))))) & (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X3)) & ! [X5,X6,X7,X8,X9] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X4) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.semanticPrimitives.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X7))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X3) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.modSem.v',X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X8))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X8)))) | ~p(s(bool,happ(s(fun('type.modSem.v',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.modSem.v',bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.v',fun('type.modSem.v',bool))),X0),s('type.list.list'('type.option.option'('type.modSem.v')),X1))),s('type.semanticPrimitives.v',X6))),s('type.modSem.v',X9)))))) | sP7(X0,X1,X2,X3,X4)))),
  inference(rectify,[],[f139])).
fof(f139,plain,(
  ! [X3,X25,X5,X27,X26] : ((~sP7(X3,X25,X5,X27,X26) | (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X26) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27)) | ? [X28,X29,X30,X31,X32] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X26) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X28),s('type.semanticPrimitives.v',X29))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X30))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X28),s('type.modSem.v',X32))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X31))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X25))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X30))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X31)))) & p(s(bool,happ(s(fun('type.modSem.v',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.modSem.v',bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.v',fun('type.modSem.v',bool))),X3),s('type.list.list'('type.option.option'('type.modSem.v')),X25))),s('type.semanticPrimitives.v',X29))),s('type.modSem.v',X32)))))) & (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X26) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27)) & ! [X28,X29,X30,X31,X32] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X26) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X28),s('type.semanticPrimitives.v',X29))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X30))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X28),s('type.modSem.v',X32))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X31))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X25))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X30))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X31)))) | ~p(s(bool,happ(s(fun('type.modSem.v',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.modSem.v',bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.v',fun('type.modSem.v',bool))),X3),s('type.list.list'('type.option.option'('type.modSem.v')),X25))),s('type.semanticPrimitives.v',X29))),s('type.modSem.v',X32)))))) | sP7(X3,X25,X5,X27,X26)))),
  inference(flattening,[],[f138])).
fof(f138,plain,(
  ! [X3,X25,X5,X27,X26] : ((~sP7(X3,X25,X5,X27,X26) | ((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X26) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27)) | ? [X28,X29,X30,X31,X32] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X26) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X28),s('type.semanticPrimitives.v',X29))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X30))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X28),s('type.modSem.v',X32))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X31))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X25))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X30))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X31)))) & p(s(bool,happ(s(fun('type.modSem.v',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.modSem.v',bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.v',fun('type.modSem.v',bool))),X3),s('type.list.list'('type.option.option'('type.modSem.v')),X25))),s('type.semanticPrimitives.v',X29))),s('type.modSem.v',X32))))))) & (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X26) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27)) & ! [X28,X29,X30,X31,X32] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X26) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X28),s('type.semanticPrimitives.v',X29))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X30))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X28),s('type.modSem.v',X32))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X31))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X25))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X30))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X31)))) | ~p(s(bool,happ(s(fun('type.modSem.v',bool),happ(s(fun('type.semanticPrimitives.v',fun('type.modSem.v',bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.v',fun('type.modSem.v',bool))),X3),s('type.list.list'('type.option.option'('type.modSem.v')),X25))),s('type.semanticPrimitives.v',X29))),s('type.modSem.v',X32)))))) | sP7(X3,X25,X5,X27,X26)))),
  inference(nnf_transformation,[],[f79])).
fof(f28645,plain,(
  ( ! [X2,X0,X1] : (~sP7(sK47(X2,X1,X0),X0,sK49(X2,X1,X0),X2,X1) | sP11(X0,X1,X2)) )),
  inference(duplicate_literal_removal,[],[f28531])).
fof(f28531,plain,(
  ( ! [X2,X0,X1] : (sP11(X0,X1,X2) | ~sP7(sK47(X2,X1,X0),X0,sK49(X2,X1,X0),X2,X1) | sP11(X0,X1,X2)) )),
  inference(resolution,[],[f301,f304])).
fof(f304,plain,(
  ( ! [X2,X0,X1] : (sP11(X0,X1,X2) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),sK49(X2,X1,X0)),s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2))))) )),
  inference(cnf_transformation,[],[f128])).
fof(f128,plain,(
  ! [X0,X1,X2] : ((~sP11(X0,X1,X2) | ! [X14,X15,X16,X17,X18] : (sP8(X14,X15,X18,X16) | (sP6(X15,sK41(X18,X17,X16,X15,X14,X2,X1,X0),X14,sK43(X18,X17,X16,X15,X14,X2,X1,X0),sK42(X18,X17,X16,X15,X14,X2,X1,X0)) & ~p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X15),s('type.list.list'('type.option.option'('type.modSem.v')),sK41(X18,X17,X16,X15,X14,X2,X1,X0)))),s('type.list.list'('type.semanticPrimitives.v'),sK42(X18,X17,X16,X15,X14,X2,X1,X0)))),s('type.list.list'('type.modSem.v'),sK43(X18,X17,X16,X15,X14,X2,X1,X0)))))) | (sP7(X14,sK44(X18,X17,X16,X15,X14,X2,X1,X0),X16,sK46(X18,X17,X16,X15,X14,X2,X1,X0),sK45(X18,X17,X16,X15,X14,X2,X1,X0)) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X16),s('type.list.list'('type.option.option'('type.modSem.v')),sK44(X18,X17,X16,X15,X14,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK45(X18,X17,X16,X15,X14,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK46(X18,X17,X16,X15,X14,X2,X1,X0)))))) | sP9(X17,X14) | sP10(X18,X17) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X16),s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2)))))) & ((~sP8(sK47(X2,X1,X0),sK48(X2,X1,X0),sK51(X2,X1,X0),sK49(X2,X1,X0)) & ! [X11,X12,X13] : (~sP6(sK48(X2,X1,X0),X11,sK47(X2,X1,X0),X13,X12) | p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),sK48(X2,X1,X0)),s('type.list.list'('type.option.option'('type.modSem.v')),X11))),s('type.list.list'('type.semanticPrimitives.v'),X12))),s('type.list.list'('type.modSem.v'),X13))))) & ! [X8,X9,X10] : (~sP7(sK47(X2,X1,X0),X8,sK49(X2,X1,X0),X10,X9) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),sK49(X2,X1,X0)),s('type.list.list'('type.option.option'('type.modSem.v')),X8))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X10))))) & ~sP9(sK50(X2,X1,X0),sK47(X2,X1,X0)) & ~sP10(sK51(X2,X1,X0),sK50(X2,X1,X0)) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),sK49(X2,X1,X0)),s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2))))) | sP11(X0,X1,X2)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK41,sK42,sK43,sK44,sK45,sK46,sK47,sK48,sK49,sK50,sK51])],[f127])).
fof(f127,plain,(
  ! [X0,X1,X2] : ((~sP11(X0,X1,X2) | ! [X14,X15,X16,X17,X18] : (sP8(X14,X15,X18,X16) | ? [X22,X23,X24] : (sP6(X15,X22,X14,X24,X23) & ~p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X15),s('type.list.list'('type.option.option'('type.modSem.v')),X22))),s('type.list.list'('type.semanticPrimitives.v'),X23))),s('type.list.list'('type.modSem.v'),X24))))) | ? [X19,X20,X21] : (sP7(X14,X19,X16,X21,X20) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X16),s('type.list.list'('type.option.option'('type.modSem.v')),X19))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X20))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X21))))) | sP9(X17,X14) | sP10(X18,X17) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X16),s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2)))))) & (? [X3,X4,X5,X6,X7] : (~sP8(X3,X4,X7,X5) & ! [X11,X12,X13] : (~sP6(X4,X11,X3,X13,X12) | p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X4),s('type.list.list'('type.option.option'('type.modSem.v')),X11))),s('type.list.list'('type.semanticPrimitives.v'),X12))),s('type.list.list'('type.modSem.v'),X13))))) & ! [X8,X9,X10] : (~sP7(X3,X8,X5,X10,X9) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X8))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X10))))) & ~sP9(X6,X3) & ~sP10(X7,X6) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2))))) | sP11(X0,X1,X2)))),
  inference(rectify,[],[f126])).
fof(f126,plain,(
  ! [X0,X1,X2] : ((~sP11(X0,X1,X2) | ! [X3,X4,X5,X6,X7] : (sP8(X3,X4,X7,X5) | ? [X33,X34,X35] : (sP6(X4,X33,X3,X35,X34) & ~p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X4),s('type.list.list'('type.option.option'('type.modSem.v')),X33))),s('type.list.list'('type.semanticPrimitives.v'),X34))),s('type.list.list'('type.modSem.v'),X35))))) | ? [X25,X26,X27] : (sP7(X3,X25,X5,X27,X26) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X25))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X26))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))))) | sP9(X6,X3) | sP10(X7,X6) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2)))))) & (? [X3,X4,X5,X6,X7] : (~sP8(X3,X4,X7,X5) & ! [X33,X34,X35] : (~sP6(X4,X33,X3,X35,X34) | p(s(bool,happ(s(fun('type.list.list'('type.modSem.v'),bool),happ(s(fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.semanticPrimitives.v'),fun('type.list.list'('type.modSem.v'),bool))),X4),s('type.list.list'('type.option.option'('type.modSem.v')),X33))),s('type.list.list'('type.semanticPrimitives.v'),X34))),s('type.list.list'('type.modSem.v'),X35))))) & ! [X25,X26,X27] : (~sP7(X3,X25,X5,X27,X26) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X25))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X26))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))))) & ~sP9(X6,X3) & ~sP10(X7,X6) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2))))) | sP11(X0,X1,X2)))),
  inference(nnf_transformation,[],[f83])).
fof(f301,plain,(
  ( ! [X2,X0,X10,X8,X1,X9] : (sP11(X0,X1,X2) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),sK49(X2,X1,X0)),s('type.list.list'('type.option.option'('type.modSem.v')),X8))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X10)))) | ~sP7(sK47(X2,X1,X0),X8,sK49(X2,X1,X0),X10,X9)) )),
  inference(cnf_transformation,[],[f128])).
% SZS output end Proof for thm.source_to_modProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 665
% Passive clauses: 21427
% Generated clauses: 46844
% Final active clauses: 336
% Final passive clauses: 20252
% Input formulas: 21
% Initial clauses: 329
% 
% Selected by SInE selection: 20
% SInE iterations: 1
% 
% Duplicate literals: 1324
% Trivial inequalities: 502
% Fw subsumption resolutions: 6573
% Fw demodulations: 254
% Bw demodulations: 304
% 
% Simple tautologies: 1024
% Equational tautologies: 122
% Forward subsumptions: 14519
% Bw demodulations to eq. taut.: 1
% 
% Binary resolution: 7751
% Factoring: 5
% Forward superposition: 20492
% Backward superposition: 8347
% Self superposition: 247
% Equality factoring: 168
% Equality resolution: 75
% 
% Split clauses: 1453
% Split components: 2928
% SAT solver clauses: 1486
% SAT solver unit clauses: 23
% SAT solver binary clauses: 325
% 
% Sat splits: 1453
% Sat splitting refutations: 24
% 
% Memory used [KB]: 33005
% Time elapsed: 2.834 s
% ------------------------------
% ------------------------------
% Success in time 14.59 s
