Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.holSemanticsExtra
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.holSemanticsExtra
% SZS output start Proof for thm.holSemanticsExtra
fof(f7117,plain,(
  $false),
  inference(subsumption_resolution,[],[f7085,f118])).
fof(f118,plain,(
  p(s(bool,'const.holSemantics.is_std_interpretation|48|_2'(s(fun(sK0,fun(sK0,bool)),sK1),s('type.pair.prod'(fun('type.mlstring.mlstring',fun('type.list.list'(sK0),sK0)),fun('type.mlstring.mlstring',fun('type.list.list'(sK0),sK0))),sK2))))),
  inference(cnf_transformation,[],[f93])).
fof(f93,plain,(
  p(s(bool,'const.holSemantics.is_std_interpretation|48|_2'(s(fun(sK0,fun(sK0,bool)),sK1),s('type.pair.prod'(fun('type.mlstring.mlstring',fun('type.list.list'(sK0),sK0)),fun('type.mlstring.mlstring',fun('type.list.list'(sK0),sK0))),sK2)))) & ~p(s(bool,'const.holSemantics.is_std_type_assignment|48|_2'(s(fun(sK0,fun(sK0,bool)),sK1),s(fun('type.mlstring.mlstring',fun('type.list.list'(sK0),sK0)),'const.pair.FST_1'(s('type.pair.prod'(fun('type.mlstring.mlstring',fun('type.list.list'(sK0),sK0)),fun('type.mlstring.mlstring',fun('type.list.list'(sK0),sK0))),sK2))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f82])).
fof(f82,plain,(
  ? [X0,X1,X2] : (p(s(bool,'const.holSemantics.is_std_interpretation|48|_2'(s(fun(X0,fun(X0,bool)),X1),s('type.pair.prod'(fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0)),fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0))),X2)))) & ~p(s(bool,'const.holSemantics.is_std_type_assignment|48|_2'(s(fun(X0,fun(X0,bool)),X1),s(fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0)),'const.pair.FST_1'(s('type.pair.prod'(fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0)),fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0))),X2)))))))),
  inference(ennf_transformation,[],[f35])).
fof(f35,plain,(
  ~! [X0,X1,X2] : (p(s(bool,'const.holSemantics.is_std_interpretation|48|_2'(s(fun(X0,fun(X0,bool)),X1),s('type.pair.prod'(fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0)),fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0))),X2)))) => p(s(bool,'const.holSemantics.is_std_type_assignment|48|_2'(s(fun(X0,fun(X0,bool)),X1),s(fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0)),'const.pair.FST_1'(s('type.pair.prod'(fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0)),fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0))),X2)))))))),
  inference(flattening,[],[f34])).
fof(f34,plain,(
  ~! [X0] : ! [X1,X2] : (p(s(bool,'const.holSemantics.is_std_interpretation|48|_2'(s(fun(X0,fun(X0,bool)),X1),s('type.pair.prod'(fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0)),fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0))),X2)))) => p(s(bool,'const.holSemantics.is_std_type_assignment|48|_2'(s(fun(X0,fun(X0,bool)),X1),s(fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0)),'const.pair.FST_1'(s('type.pair.prod'(fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0)),fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0))),X2)))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : (p(s(bool,'const.holSemantics.is_std_interpretation|48|_2'(s(fun(X6,fun(X6,bool)),X7),s('type.pair.prod'(fun('type.mlstring.mlstring',fun('type.list.list'(X6),X6)),fun('type.mlstring.mlstring',fun('type.list.list'(X6),X6))),X8)))) => p(s(bool,'const.holSemantics.is_std_type_assignment|48|_2'(s(fun(X6,fun(X6,bool)),X7),s(fun('type.mlstring.mlstring',fun('type.list.list'(X6),X6)),'const.pair.FST_1'(s('type.pair.prod'(fun('type.mlstring.mlstring',fun('type.list.list'(X6),X6)),fun('type.mlstring.mlstring',fun('type.list.list'(X6),X6))),X8)))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : (p(s(bool,'const.holSemantics.is_std_interpretation|48|_2'(s(fun(X6,fun(X6,bool)),X7),s('type.pair.prod'(fun('type.mlstring.mlstring',fun('type.list.list'(X6),X6)),fun('type.mlstring.mlstring',fun('type.list.list'(X6),X6))),X8)))) => p(s(bool,'const.holSemantics.is_std_type_assignment|48|_2'(s(fun(X6,fun(X6,bool)),X7),s(fun('type.mlstring.mlstring',fun('type.list.list'(X6),X6)),'const.pair.FST_1'(s('type.pair.prod'(fun('type.mlstring.mlstring',fun('type.list.list'(X6),X6)),fun('type.mlstring.mlstring',fun('type.list.list'(X6),X6))),X8)))))))),
  file('thm.holSemanticsExtra.is_std_interpretation_is_type','thm.holSemanticsExtra.is_std_interpretation_is_type')).
fof(f7085,plain,(
  ~p(s(bool,'const.holSemantics.is_std_interpretation|48|_2'(s(fun(sK0,fun(sK0,bool)),sK1),s('type.pair.prod'(fun('type.mlstring.mlstring',fun('type.list.list'(sK0),sK0)),fun('type.mlstring.mlstring',fun('type.list.list'(sK0),sK0))),sK2))))),
  inference(resolution,[],[f6743,f2064])).
fof(f2064,plain,(
  ~p(s(bool,'const.holSemantics.is_std_type_assignment|48|_2'(s(fun(sK0,fun(sK0,bool)),sK1),s(fun('type.mlstring.mlstring',fun('type.list.list'(sK0),sK0)),sK3(sK2,fun('type.mlstring.mlstring',fun('type.list.list'(sK0),sK0)),fun('type.mlstring.mlstring',fun('type.list.list'(sK0),sK0)))))))),
  inference(forward_demodulation,[],[f119,f271])).
fof(f271,plain,(
  ( ! [X4,X5,X3] : (s(X3,sK3(X5,X4,X3)) = s(X3,'const.pair.FST_1'(s('type.pair.prod'(X3,X4),X5)))) )),
  inference(superposition,[],[f156,f155])).
fof(f155,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK3(X2,X1,X0)),s(X1,sK4(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f111])).
fof(f111,plain,(
  ! [X0,X1,X2] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK3(X2,X1,X0)),s(X1,sK4(X2,X1,X0))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK3,sK4])],[f60])).
fof(f60,plain,(
  ! [X0,X1,X2] : ? [X3,X4] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X4)))),
  inference(flattening,[],[f59])).
fof(f59,plain,(
  ! [X0,X1] : ! [X2] : ? [X3,X4] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X4)))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X10,X18] : ! [X11] : ? [X19,X20] : s('type.pair.prod'(X10,X18),X11) = s('type.pair.prod'(X10,X18),'const.pair.,_2'(s(X10,X19),s(X18,X20)))),
  file('thm.holSemanticsExtra.is_std_interpretation_is_type','thm.pair.ABS_PAIR_THM')).
fof(f156,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,X2) = s(X1,'const.pair.FST_1'(s('type.pair.prod'(X1,X0),'const.pair.,_2'(s(X1,X2),s(X0,X3)))))) )),
  inference(cnf_transformation,[],[f62])).
fof(f62,plain,(
  ! [X0,X1,X2,X3] : s(X1,X2) = s(X1,'const.pair.FST_1'(s('type.pair.prod'(X1,X0),'const.pair.,_2'(s(X1,X2),s(X0,X3)))))),
  inference(flattening,[],[f61])).
fof(f61,plain,(
  ! [X0,X1] : ! [X2,X3] : s(X1,X2) = s(X1,'const.pair.FST_1'(s('type.pair.prod'(X1,X0),'const.pair.,_2'(s(X1,X2),s(X0,X3)))))),
  inference(rectify,[],[f22])).
fof(f22,axiom,(
  ! [X18,X10] : ! [X11,X12] : s(X10,X11) = s(X10,'const.pair.FST_1'(s('type.pair.prod'(X10,X18),'const.pair.,_2'(s(X10,X11),s(X18,X12)))))),
  file('thm.holSemanticsExtra.is_std_interpretation_is_type','thm.pair.FST')).
fof(f119,plain,(
  ~p(s(bool,'const.holSemantics.is_std_type_assignment|48|_2'(s(fun(sK0,fun(sK0,bool)),sK1),s(fun('type.mlstring.mlstring',fun('type.list.list'(sK0),sK0)),'const.pair.FST_1'(s('type.pair.prod'(fun('type.mlstring.mlstring',fun('type.list.list'(sK0),sK0)),fun('type.mlstring.mlstring',fun('type.list.list'(sK0),sK0))),sK2))))))),
  inference(cnf_transformation,[],[f93])).
fof(f6743,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.holSemantics.is_std_type_assignment|48|_2'(s(fun(X0,fun(X0,bool)),X1),s(fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0)),sK3(X2,fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0)),fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0))))))) | ~p(s(bool,'const.holSemantics.is_std_interpretation|48|_2'(s(fun(X0,fun(X0,bool)),X1),s('type.pair.prod'(fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0)),fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0))),X2))))) )),
  inference(forward_demodulation,[],[f149,f271])).
fof(f149,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.holSemantics.is_std_type_assignment|48|_2'(s(fun(X0,fun(X0,bool)),X1),s(fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0)),'const.pair.FST_1'(s('type.pair.prod'(fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0)),fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0))),X2)))))) | ~p(s(bool,'const.holSemantics.is_std_interpretation|48|_2'(s(fun(X0,fun(X0,bool)),X1),s('type.pair.prod'(fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0)),fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0))),X2))))) )),
  inference(cnf_transformation,[],[f110])).
fof(f110,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.holSemantics.is_std_interpretation|48|_2'(s(fun(X0,fun(X0,bool)),X1),s('type.pair.prod'(fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0)),fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0))),X2)))) | (p(s(bool,'const.holSemantics.is_std_type_assignment|48|_2'(s(fun(X0,fun(X0,bool)),X1),s(fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0)),'const.pair.FST_1'(s('type.pair.prod'(fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0)),fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0))),X2)))))) & p(s(bool,'const.holSemantics.interprets|48|_5'(s(fun(X0,fun(X0,bool)),X1),s(fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0)),'const.pair.SND_1'(s('type.pair.prod'(fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0)),fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0))),X2))),s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('type.list.list'('type.mlstring.mlstring'),'const.list.CONS_2'(s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('type.list.list'('type.mlstring.mlstring'),'const.list.NIL_0'))),s(fun('type.list.list'(X0),X0),'_dst_x0x1x1x1_4'(s(fun(X0,fun(X0,fun(fun(X0,X0),X0))),'const.setSpec.abstract_1'(s(fun(X0,fun(X0,bool)),X1))),s(fun('type.list.list'(X0),X0),'const.list.HD_0'),s(fun('type.list.list'(X0),X0),'_dst_x0x1x0_3'(s(fun(X0,fun(X0,X0)),'const.setSpec.funspace_1'(s(fun(X0,fun(X0,bool)),X1))),s(fun('type.list.list'(X0),X0),'const.list.HD_0'),s(X0,'const.setSpec.two_1'(s(fun(X0,fun(X0,bool)),X1))))),s(fun('type.list.list'(X0),fun(X0,X0)),'_dst_x00x10x00x01_4'(s(fun(X0,fun(X0,fun(fun(X0,X0),X0))),'const.setSpec.abstract_1'(s(fun(X0,fun(X0,bool)),X1))),s(fun('type.list.list'(X0),X0),'const.list.HD_0'),s(X0,'const.setSpec.two_1'(s(fun(X0,fun(X0,bool)),X1))),s(fun(X0,fun(X0,X0)),'_dst_x00x11_2'(s(fun(bool,X0),'const.setSpec.boolean_1'(s(fun(X0,fun(X0,bool)),X1))),s(fun(X0,fun(X0,bool)),'=_0')))))))))))) & (~p(s(bool,'const.holSemantics.is_std_type_assignment|48|_2'(s(fun(X0,fun(X0,bool)),X1),s(fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0)),'const.pair.FST_1'(s('type.pair.prod'(fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0)),fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0))),X2)))))) | ~p(s(bool,'const.holSemantics.interprets|48|_5'(s(fun(X0,fun(X0,bool)),X1),s(fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0)),'const.pair.SND_1'(s('type.pair.prod'(fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0)),fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0))),X2))),s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('type.list.list'('type.mlstring.mlstring'),'const.list.CONS_2'(s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('type.list.list'('type.mlstring.mlstring'),'const.list.NIL_0'))),s(fun('type.list.list'(X0),X0),'_dst_x0x1x1x1_4'(s(fun(X0,fun(X0,fun(fun(X0,X0),X0))),'const.setSpec.abstract_1'(s(fun(X0,fun(X0,bool)),X1))),s(fun('type.list.list'(X0),X0),'const.list.HD_0'),s(fun('type.list.list'(X0),X0),'_dst_x0x1x0_3'(s(fun(X0,fun(X0,X0)),'const.setSpec.funspace_1'(s(fun(X0,fun(X0,bool)),X1))),s(fun('type.list.list'(X0),X0),'const.list.HD_0'),s(X0,'const.setSpec.two_1'(s(fun(X0,fun(X0,bool)),X1))))),s(fun('type.list.list'(X0),fun(X0,X0)),'_dst_x00x10x00x01_4'(s(fun(X0,fun(X0,fun(fun(X0,X0),X0))),'const.setSpec.abstract_1'(s(fun(X0,fun(X0,bool)),X1))),s(fun('type.list.list'(X0),X0),'const.list.HD_0'),s(X0,'const.setSpec.two_1'(s(fun(X0,fun(X0,bool)),X1))),s(fun(X0,fun(X0,X0)),'_dst_x00x11_2'(s(fun(bool,X0),'const.setSpec.boolean_1'(s(fun(X0,fun(X0,bool)),X1))),s(fun(X0,fun(X0,bool)),'=_0')))))))))) | p(s(bool,'const.holSemantics.is_std_interpretation|48|_2'(s(fun(X0,fun(X0,bool)),X1),s('type.pair.prod'(fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0)),fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0))),X2))))))),
  inference(flattening,[],[f109])).
fof(f109,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.holSemantics.is_std_interpretation|48|_2'(s(fun(X0,fun(X0,bool)),X1),s('type.pair.prod'(fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0)),fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0))),X2)))) | (p(s(bool,'const.holSemantics.is_std_type_assignment|48|_2'(s(fun(X0,fun(X0,bool)),X1),s(fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0)),'const.pair.FST_1'(s('type.pair.prod'(fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0)),fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0))),X2)))))) & p(s(bool,'const.holSemantics.interprets|48|_5'(s(fun(X0,fun(X0,bool)),X1),s(fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0)),'const.pair.SND_1'(s('type.pair.prod'(fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0)),fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0))),X2))),s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('type.list.list'('type.mlstring.mlstring'),'const.list.CONS_2'(s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('type.list.list'('type.mlstring.mlstring'),'const.list.NIL_0'))),s(fun('type.list.list'(X0),X0),'_dst_x0x1x1x1_4'(s(fun(X0,fun(X0,fun(fun(X0,X0),X0))),'const.setSpec.abstract_1'(s(fun(X0,fun(X0,bool)),X1))),s(fun('type.list.list'(X0),X0),'const.list.HD_0'),s(fun('type.list.list'(X0),X0),'_dst_x0x1x0_3'(s(fun(X0,fun(X0,X0)),'const.setSpec.funspace_1'(s(fun(X0,fun(X0,bool)),X1))),s(fun('type.list.list'(X0),X0),'const.list.HD_0'),s(X0,'const.setSpec.two_1'(s(fun(X0,fun(X0,bool)),X1))))),s(fun('type.list.list'(X0),fun(X0,X0)),'_dst_x00x10x00x01_4'(s(fun(X0,fun(X0,fun(fun(X0,X0),X0))),'const.setSpec.abstract_1'(s(fun(X0,fun(X0,bool)),X1))),s(fun('type.list.list'(X0),X0),'const.list.HD_0'),s(X0,'const.setSpec.two_1'(s(fun(X0,fun(X0,bool)),X1))),s(fun(X0,fun(X0,X0)),'_dst_x00x11_2'(s(fun(bool,X0),'const.setSpec.boolean_1'(s(fun(X0,fun(X0,bool)),X1))),s(fun(X0,fun(X0,bool)),'=_0')))))))))))) & ((~p(s(bool,'const.holSemantics.is_std_type_assignment|48|_2'(s(fun(X0,fun(X0,bool)),X1),s(fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0)),'const.pair.FST_1'(s('type.pair.prod'(fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0)),fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0))),X2)))))) | ~p(s(bool,'const.holSemantics.interprets|48|_5'(s(fun(X0,fun(X0,bool)),X1),s(fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0)),'const.pair.SND_1'(s('type.pair.prod'(fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0)),fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0))),X2))),s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('type.list.list'('type.mlstring.mlstring'),'const.list.CONS_2'(s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('type.list.list'('type.mlstring.mlstring'),'const.list.NIL_0'))),s(fun('type.list.list'(X0),X0),'_dst_x0x1x1x1_4'(s(fun(X0,fun(X0,fun(fun(X0,X0),X0))),'const.setSpec.abstract_1'(s(fun(X0,fun(X0,bool)),X1))),s(fun('type.list.list'(X0),X0),'const.list.HD_0'),s(fun('type.list.list'(X0),X0),'_dst_x0x1x0_3'(s(fun(X0,fun(X0,X0)),'const.setSpec.funspace_1'(s(fun(X0,fun(X0,bool)),X1))),s(fun('type.list.list'(X0),X0),'const.list.HD_0'),s(X0,'const.setSpec.two_1'(s(fun(X0,fun(X0,bool)),X1))))),s(fun('type.list.list'(X0),fun(X0,X0)),'_dst_x00x10x00x01_4'(s(fun(X0,fun(X0,fun(fun(X0,X0),X0))),'const.setSpec.abstract_1'(s(fun(X0,fun(X0,bool)),X1))),s(fun('type.list.list'(X0),X0),'const.list.HD_0'),s(X0,'const.setSpec.two_1'(s(fun(X0,fun(X0,bool)),X1))),s(fun(X0,fun(X0,X0)),'_dst_x00x11_2'(s(fun(bool,X0),'const.setSpec.boolean_1'(s(fun(X0,fun(X0,bool)),X1))),s(fun(X0,fun(X0,bool)),'=_0'))))))))))) | p(s(bool,'const.holSemantics.is_std_interpretation|48|_2'(s(fun(X0,fun(X0,bool)),X1),s('type.pair.prod'(fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0)),fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0))),X2))))))),
  inference(nnf_transformation,[],[f52])).
fof(f52,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.holSemantics.is_std_interpretation|48|_2'(s(fun(X0,fun(X0,bool)),X1),s('type.pair.prod'(fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0)),fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0))),X2)))) <=> (p(s(bool,'const.holSemantics.is_std_type_assignment|48|_2'(s(fun(X0,fun(X0,bool)),X1),s(fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0)),'const.pair.FST_1'(s('type.pair.prod'(fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0)),fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0))),X2)))))) & p(s(bool,'const.holSemantics.interprets|48|_5'(s(fun(X0,fun(X0,bool)),X1),s(fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0)),'const.pair.SND_1'(s('type.pair.prod'(fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0)),fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0))),X2))),s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('type.list.list'('type.mlstring.mlstring'),'const.list.CONS_2'(s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('type.list.list'('type.mlstring.mlstring'),'const.list.NIL_0'))),s(fun('type.list.list'(X0),X0),'_dst_x0x1x1x1_4'(s(fun(X0,fun(X0,fun(fun(X0,X0),X0))),'const.setSpec.abstract_1'(s(fun(X0,fun(X0,bool)),X1))),s(fun('type.list.list'(X0),X0),'const.list.HD_0'),s(fun('type.list.list'(X0),X0),'_dst_x0x1x0_3'(s(fun(X0,fun(X0,X0)),'const.setSpec.funspace_1'(s(fun(X0,fun(X0,bool)),X1))),s(fun('type.list.list'(X0),X0),'const.list.HD_0'),s(X0,'const.setSpec.two_1'(s(fun(X0,fun(X0,bool)),X1))))),s(fun('type.list.list'(X0),fun(X0,X0)),'_dst_x00x10x00x01_4'(s(fun(X0,fun(X0,fun(fun(X0,X0),X0))),'const.setSpec.abstract_1'(s(fun(X0,fun(X0,bool)),X1))),s(fun('type.list.list'(X0),X0),'const.list.HD_0'),s(X0,'const.setSpec.two_1'(s(fun(X0,fun(X0,bool)),X1))),s(fun(X0,fun(X0,X0)),'_dst_x00x11_2'(s(fun(bool,X0),'const.setSpec.boolean_1'(s(fun(X0,fun(X0,bool)),X1))),s(fun(X0,fun(X0,bool)),'=_0'))))))))))))),
  inference(flattening,[],[f51])).
fof(f51,plain,(
  ! [X0] : ! [X1,X2] : (p(s(bool,'const.holSemantics.is_std_interpretation|48|_2'(s(fun(X0,fun(X0,bool)),X1),s('type.pair.prod'(fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0)),fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0))),X2)))) <=> (p(s(bool,'const.holSemantics.is_std_type_assignment|48|_2'(s(fun(X0,fun(X0,bool)),X1),s(fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0)),'const.pair.FST_1'(s('type.pair.prod'(fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0)),fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0))),X2)))))) & p(s(bool,'const.holSemantics.interprets|48|_5'(s(fun(X0,fun(X0,bool)),X1),s(fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0)),'const.pair.SND_1'(s('type.pair.prod'(fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0)),fun('type.mlstring.mlstring',fun('type.list.list'(X0),X0))),X2))),s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('type.list.list'('type.mlstring.mlstring'),'const.list.CONS_2'(s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('type.list.list'('type.mlstring.mlstring'),'const.list.NIL_0'))),s(fun('type.list.list'(X0),X0),'_dst_x0x1x1x1_4'(s(fun(X0,fun(X0,fun(fun(X0,X0),X0))),'const.setSpec.abstract_1'(s(fun(X0,fun(X0,bool)),X1))),s(fun('type.list.list'(X0),X0),'const.list.HD_0'),s(fun('type.list.list'(X0),X0),'_dst_x0x1x0_3'(s(fun(X0,fun(X0,X0)),'const.setSpec.funspace_1'(s(fun(X0,fun(X0,bool)),X1))),s(fun('type.list.list'(X0),X0),'const.list.HD_0'),s(X0,'const.setSpec.two_1'(s(fun(X0,fun(X0,bool)),X1))))),s(fun('type.list.list'(X0),fun(X0,X0)),'_dst_x00x10x00x01_4'(s(fun(X0,fun(X0,fun(fun(X0,X0),X0))),'const.setSpec.abstract_1'(s(fun(X0,fun(X0,bool)),X1))),s(fun('type.list.list'(X0),X0),'const.list.HD_0'),s(X0,'const.setSpec.two_1'(s(fun(X0,fun(X0,bool)),X1))),s(fun(X0,fun(X0,X0)),'_dst_x00x11_2'(s(fun(bool,X0),'const.setSpec.boolean_1'(s(fun(X0,fun(X0,bool)),X1))),s(fun(X0,fun(X0,bool)),'=_0'))))))))))))),
  inference(rectify,[],[f20])).
fof(f20,axiom,(
  ! [X6] : ! [X7,X8] : (p(s(bool,'const.holSemantics.is_std_interpretation|48|_2'(s(fun(X6,fun(X6,bool)),X7),s('type.pair.prod'(fun('type.mlstring.mlstring',fun('type.list.list'(X6),X6)),fun('type.mlstring.mlstring',fun('type.list.list'(X6),X6))),X8)))) <=> (p(s(bool,'const.holSemantics.is_std_type_assignment|48|_2'(s(fun(X6,fun(X6,bool)),X7),s(fun('type.mlstring.mlstring',fun('type.list.list'(X6),X6)),'const.pair.FST_1'(s('type.pair.prod'(fun('type.mlstring.mlstring',fun('type.list.list'(X6),X6)),fun('type.mlstring.mlstring',fun('type.list.list'(X6),X6))),X8)))))) & p(s(bool,'const.holSemantics.interprets|48|_5'(s(fun(X6,fun(X6,bool)),X7),s(fun('type.mlstring.mlstring',fun('type.list.list'(X6),X6)),'const.pair.SND_1'(s('type.pair.prod'(fun('type.mlstring.mlstring',fun('type.list.list'(X6),X6)),fun('type.mlstring.mlstring',fun('type.list.list'(X6),X6))),X8))),s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('type.list.list'('type.mlstring.mlstring'),'const.list.CONS_2'(s('type.mlstring.mlstring','const.mlstring.strlit_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('type.list.list'('type.mlstring.mlstring'),'const.list.NIL_0'))),s(fun('type.list.list'(X6),X6),'_dst_x0x1x1x1_4'(s(fun(X6,fun(X6,fun(fun(X6,X6),X6))),'const.setSpec.abstract_1'(s(fun(X6,fun(X6,bool)),X7))),s(fun('type.list.list'(X6),X6),'const.list.HD_0'),s(fun('type.list.list'(X6),X6),'_dst_x0x1x0_3'(s(fun(X6,fun(X6,X6)),'const.setSpec.funspace_1'(s(fun(X6,fun(X6,bool)),X7))),s(fun('type.list.list'(X6),X6),'const.list.HD_0'),s(X6,'const.setSpec.two_1'(s(fun(X6,fun(X6,bool)),X7))))),s(fun('type.list.list'(X6),fun(X6,X6)),'_dst_x00x10x00x01_4'(s(fun(X6,fun(X6,fun(fun(X6,X6),X6))),'const.setSpec.abstract_1'(s(fun(X6,fun(X6,bool)),X7))),s(fun('type.list.list'(X6),X6),'const.list.HD_0'),s(X6,'const.setSpec.two_1'(s(fun(X6,fun(X6,bool)),X7))),s(fun(X6,fun(X6,X6)),'_dst_x00x11_2'(s(fun(bool,X6),'const.setSpec.boolean_1'(s(fun(X6,fun(X6,bool)),X7))),s(fun(X6,fun(X6,bool)),'=_0'))))))))))))),
  file('thm.holSemanticsExtra.is_std_interpretation_is_type','thm.holSemantics.is_std_interpretation_def')).
% SZS output end Proof for thm.holSemanticsExtra
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 107
% Passive clauses: 1561
% Generated clauses: 6945
% Final active clauses: 79
% Final passive clauses: 1380
% Input formulas: 32
% Initial clauses: 63
% 
% Duplicate literals: 178
% Trivial inequalities: 200
% Fw subsumption resolutions: 352
% Fw demodulations: 993
% Bw demodulations: 23
% 
% Simple tautologies: 164
% Equational tautologies: 18
% Forward subsumptions: 3393
% Fw demodulations to eq. taut.: 1
% 
% Binary resolution: 79
% Forward superposition: 2710
% Backward superposition: 2138
% Self superposition: 103
% Equality factoring: 30
% Equality resolution: 23
% 
% Split clauses: 55
% Split components: 112
% SAT solver clauses: 116
% SAT solver unit clauses: 9
% SAT solver binary clauses: 45
% 
% Sat splits: 55
% Sat splitting refutations: 8
% 
% TWLsolver clauses: 116
% TWLsolver calls for satisfiability: 41
% 
% Memory used [KB]: 6524
% Time elapsed: 0.196 s
% ------------------------------
% ------------------------------
% Success in time 0.2 s
