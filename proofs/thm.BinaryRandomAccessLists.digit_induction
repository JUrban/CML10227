Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.BinaryRandomAccessLists
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.BinaryRandomAccessLists
% SZS output start Proof for thm.BinaryRandomAccessLists
fof(f12954,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f12943,f12861,f12860,f136,f186])).
fof(f186,plain,(
  ~p(s(bool,'F_0')) | $spl1),
  inference(cnf_transformation,[],[f186_D])).
fof(f186_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f136,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f43])).
fof(f43,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.BinaryRandomAccessLists.digit_induction',aHL_FALSITY)).
fof(f12860,plain,(
  s('type.BinaryRandomAccessLists.digit'(sK0),'const.BinaryRandomAccessLists.Zero_0') = s('type.BinaryRandomAccessLists.digit'(sK0),sK2) | $spl130),
  inference(cnf_transformation,[],[f12860_D])).
fof(f12860_D,plain,(
  s('type.BinaryRandomAccessLists.digit'(sK0),'const.BinaryRandomAccessLists.Zero_0') = s('type.BinaryRandomAccessLists.digit'(sK0),sK2) <=> ~$spl130),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl130])])).
fof(f12861,plain,(
  s('type.BinaryRandomAccessLists.digit'(sK0),'const.BinaryRandomAccessLists.Zero_0') = s('type.BinaryRandomAccessLists.digit'(sK0),sK2) | $spl1),
  inference(subsumption_resolution,[],[f12721,f191])).
fof(f191,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl1),
  inference(resolution,[],[f140,f186])).
fof(f140,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'T_0') != s(bool,X0)) )),
  inference(cnf_transformation,[],[f113])).
fof(f113,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f46])).
fof(f46,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f28])).
fof(f28,axiom,(
  ! [X8] : (s(bool,'T_0') = s(bool,X8) <=> p(s(bool,X8)))),
  file('thm.BinaryRandomAccessLists.digit_induction','thm.bool.EQ_CLAUSES|split|0')).
fof(f12721,plain,(
  s(bool,'T_0') = s(bool,'F_0') | s('type.BinaryRandomAccessLists.digit'(sK0),'const.BinaryRandomAccessLists.Zero_0') = s('type.BinaryRandomAccessLists.digit'(sK0),sK2)),
  inference(superposition,[],[f1064,f202])).
fof(f202,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.BinaryRandomAccessLists.digit'(sK0),bool),sK1),s('type.BinaryRandomAccessLists.digit'(sK0),sK2)))),
  inference(resolution,[],[f129,f145])).
fof(f145,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f115])).
fof(f115,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f49])).
fof(f49,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f48])).
fof(f48,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f31])).
fof(f31,axiom,(
  ! [X8] : (s(bool,'F_0') = s(bool,X8) <=> ~p(s(bool,X8)))),
  file('thm.BinaryRandomAccessLists.digit_induction','thm.bool.EQ_CLAUSES|split|3')).
fof(f129,plain,(
  ~p(s(bool,happ(s(fun('type.BinaryRandomAccessLists.digit'(sK0),bool),sK1),s('type.BinaryRandomAccessLists.digit'(sK0),sK2))))),
  inference(cnf_transformation,[],[f110])).
fof(f110,plain,(
  p(s(bool,happ(s(fun('type.BinaryRandomAccessLists.digit'(sK0),bool),sK1),s('type.BinaryRandomAccessLists.digit'(sK0),'const.BinaryRandomAccessLists.Zero_0')))) & ! [X3] : p(s(bool,happ(s(fun('type.BinaryRandomAccessLists.digit'(sK0),bool),sK1),s('type.BinaryRandomAccessLists.digit'(sK0),'const.BinaryRandomAccessLists.One_1'(s('type.BinaryRandomAccessLists.tree'(sK0),X3)))))) & ~p(s(bool,happ(s(fun('type.BinaryRandomAccessLists.digit'(sK0),bool),sK1),s('type.BinaryRandomAccessLists.digit'(sK0),sK2))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f109])).
fof(f109,plain,(
  ? [X0,X1] : (p(s(bool,happ(s(fun('type.BinaryRandomAccessLists.digit'(X0),bool),X1),s('type.BinaryRandomAccessLists.digit'(X0),'const.BinaryRandomAccessLists.Zero_0')))) & ! [X3] : p(s(bool,happ(s(fun('type.BinaryRandomAccessLists.digit'(X0),bool),X1),s('type.BinaryRandomAccessLists.digit'(X0),'const.BinaryRandomAccessLists.One_1'(s('type.BinaryRandomAccessLists.tree'(X0),X3)))))) & ? [X2] : ~p(s(bool,happ(s(fun('type.BinaryRandomAccessLists.digit'(X0),bool),X1),s('type.BinaryRandomAccessLists.digit'(X0),X2)))))),
  inference(rectify,[],[f101])).
fof(f101,plain,(
  ? [X0,X1] : (p(s(bool,happ(s(fun('type.BinaryRandomAccessLists.digit'(X0),bool),X1),s('type.BinaryRandomAccessLists.digit'(X0),'const.BinaryRandomAccessLists.Zero_0')))) & ! [X2] : p(s(bool,happ(s(fun('type.BinaryRandomAccessLists.digit'(X0),bool),X1),s('type.BinaryRandomAccessLists.digit'(X0),'const.BinaryRandomAccessLists.One_1'(s('type.BinaryRandomAccessLists.tree'(X0),X2)))))) & ? [X3] : ~p(s(bool,happ(s(fun('type.BinaryRandomAccessLists.digit'(X0),bool),X1),s('type.BinaryRandomAccessLists.digit'(X0),X3)))))),
  inference(flattening,[],[f100])).
fof(f100,plain,(
  ? [X0,X1] : ((p(s(bool,happ(s(fun('type.BinaryRandomAccessLists.digit'(X0),bool),X1),s('type.BinaryRandomAccessLists.digit'(X0),'const.BinaryRandomAccessLists.Zero_0')))) & ! [X2] : p(s(bool,happ(s(fun('type.BinaryRandomAccessLists.digit'(X0),bool),X1),s('type.BinaryRandomAccessLists.digit'(X0),'const.BinaryRandomAccessLists.One_1'(s('type.BinaryRandomAccessLists.tree'(X0),X2))))))) & ? [X3] : ~p(s(bool,happ(s(fun('type.BinaryRandomAccessLists.digit'(X0),bool),X1),s('type.BinaryRandomAccessLists.digit'(X0),X3)))))),
  inference(ennf_transformation,[],[f40])).
fof(f40,plain,(
  ~! [X0,X1] : ((p(s(bool,happ(s(fun('type.BinaryRandomAccessLists.digit'(X0),bool),X1),s('type.BinaryRandomAccessLists.digit'(X0),'const.BinaryRandomAccessLists.Zero_0')))) & ! [X2] : p(s(bool,happ(s(fun('type.BinaryRandomAccessLists.digit'(X0),bool),X1),s('type.BinaryRandomAccessLists.digit'(X0),'const.BinaryRandomAccessLists.One_1'(s('type.BinaryRandomAccessLists.tree'(X0),X2))))))) => ! [X3] : p(s(bool,happ(s(fun('type.BinaryRandomAccessLists.digit'(X0),bool),X1),s('type.BinaryRandomAccessLists.digit'(X0),X3)))))),
  inference(flattening,[],[f39])).
fof(f39,plain,(
  ~! [X0] : ! [X1] : ((p(s(bool,happ(s(fun('type.BinaryRandomAccessLists.digit'(X0),bool),X1),s('type.BinaryRandomAccessLists.digit'(X0),'const.BinaryRandomAccessLists.Zero_0')))) & ! [X2] : p(s(bool,happ(s(fun('type.BinaryRandomAccessLists.digit'(X0),bool),X1),s('type.BinaryRandomAccessLists.digit'(X0),'const.BinaryRandomAccessLists.One_1'(s('type.BinaryRandomAccessLists.tree'(X0),X2))))))) => ! [X3] : p(s(bool,happ(s(fun('type.BinaryRandomAccessLists.digit'(X0),bool),X1),s('type.BinaryRandomAccessLists.digit'(X0),X3)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : ((p(s(bool,happ(s(fun('type.BinaryRandomAccessLists.digit'(X6),bool),X7),s('type.BinaryRandomAccessLists.digit'(X6),'const.BinaryRandomAccessLists.Zero_0')))) & ! [X8] : p(s(bool,happ(s(fun('type.BinaryRandomAccessLists.digit'(X6),bool),X7),s('type.BinaryRandomAccessLists.digit'(X6),'const.BinaryRandomAccessLists.One_1'(s('type.BinaryRandomAccessLists.tree'(X6),X8))))))) => ! [X9] : p(s(bool,happ(s(fun('type.BinaryRandomAccessLists.digit'(X6),bool),X7),s('type.BinaryRandomAccessLists.digit'(X6),X9)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : ((p(s(bool,happ(s(fun('type.BinaryRandomAccessLists.digit'(X6),bool),X7),s('type.BinaryRandomAccessLists.digit'(X6),'const.BinaryRandomAccessLists.Zero_0')))) & ! [X8] : p(s(bool,happ(s(fun('type.BinaryRandomAccessLists.digit'(X6),bool),X7),s('type.BinaryRandomAccessLists.digit'(X6),'const.BinaryRandomAccessLists.One_1'(s('type.BinaryRandomAccessLists.tree'(X6),X8))))))) => ! [X9] : p(s(bool,happ(s(fun('type.BinaryRandomAccessLists.digit'(X6),bool),X7),s('type.BinaryRandomAccessLists.digit'(X6),X9)))))),
  file('thm.BinaryRandomAccessLists.digit_induction','thm.BinaryRandomAccessLists.digit_induction')).
fof(f1064,plain,(
  ( ! [X2] : (s(bool,'T_0') = s(bool,happ(s(fun('type.BinaryRandomAccessLists.digit'(sK0),bool),sK1),s('type.BinaryRandomAccessLists.digit'(sK0),X2))) | s('type.BinaryRandomAccessLists.digit'(sK0),'const.BinaryRandomAccessLists.Zero_0') = s('type.BinaryRandomAccessLists.digit'(sK0),X2)) )),
  inference(superposition,[],[f290,f153])).
fof(f153,plain,(
  ( ! [X0,X1] : (s('type.BinaryRandomAccessLists.digit'(X0),X1) = s('type.BinaryRandomAccessLists.digit'(X0),'const.BinaryRandomAccessLists.One_1'(s('type.BinaryRandomAccessLists.tree'(X0),sK3(X1,X0)))) | s('type.BinaryRandomAccessLists.digit'(X0),'const.BinaryRandomAccessLists.Zero_0') = s('type.BinaryRandomAccessLists.digit'(X0),X1)) )),
  inference(cnf_transformation,[],[f118])).
fof(f118,plain,(
  ! [X0,X1] : (s('type.BinaryRandomAccessLists.digit'(X0),'const.BinaryRandomAccessLists.Zero_0') = s('type.BinaryRandomAccessLists.digit'(X0),X1) | s('type.BinaryRandomAccessLists.digit'(X0),X1) = s('type.BinaryRandomAccessLists.digit'(X0),'const.BinaryRandomAccessLists.One_1'(s('type.BinaryRandomAccessLists.tree'(X0),sK3(X1,X0)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK3])],[f61])).
fof(f61,plain,(
  ! [X0,X1] : (s('type.BinaryRandomAccessLists.digit'(X0),'const.BinaryRandomAccessLists.Zero_0') = s('type.BinaryRandomAccessLists.digit'(X0),X1) | ? [X2] : s('type.BinaryRandomAccessLists.digit'(X0),X1) = s('type.BinaryRandomAccessLists.digit'(X0),'const.BinaryRandomAccessLists.One_1'(s('type.BinaryRandomAccessLists.tree'(X0),X2))))),
  inference(flattening,[],[f60])).
fof(f60,plain,(
  ! [X0] : ! [X1] : (s('type.BinaryRandomAccessLists.digit'(X0),'const.BinaryRandomAccessLists.Zero_0') = s('type.BinaryRandomAccessLists.digit'(X0),X1) | ? [X2] : s('type.BinaryRandomAccessLists.digit'(X0),X1) = s('type.BinaryRandomAccessLists.digit'(X0),'const.BinaryRandomAccessLists.One_1'(s('type.BinaryRandomAccessLists.tree'(X0),X2))))),
  inference(rectify,[],[f22])).
fof(f22,axiom,(
  ! [X6] : ! [X39] : (s('type.BinaryRandomAccessLists.digit'(X6),'const.BinaryRandomAccessLists.Zero_0') = s('type.BinaryRandomAccessLists.digit'(X6),X39) | ? [X8] : s('type.BinaryRandomAccessLists.digit'(X6),X39) = s('type.BinaryRandomAccessLists.digit'(X6),'const.BinaryRandomAccessLists.One_1'(s('type.BinaryRandomAccessLists.tree'(X6),X8))))),
  file('thm.BinaryRandomAccessLists.digit_induction','thm.BinaryRandomAccessLists.digit_nchotomy')).
fof(f290,plain,(
  ( ! [X2] : (s(bool,'T_0') = s(bool,happ(s(fun('type.BinaryRandomAccessLists.digit'(sK0),bool),sK1),s('type.BinaryRandomAccessLists.digit'(sK0),'const.BinaryRandomAccessLists.One_1'(s('type.BinaryRandomAccessLists.tree'(sK0),X2)))))) )),
  inference(resolution,[],[f128,f141])).
fof(f141,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f113])).
fof(f128,plain,(
  ( ! [X3] : (p(s(bool,happ(s(fun('type.BinaryRandomAccessLists.digit'(sK0),bool),sK1),s('type.BinaryRandomAccessLists.digit'(sK0),'const.BinaryRandomAccessLists.One_1'(s('type.BinaryRandomAccessLists.tree'(sK0),X3))))))) )),
  inference(cnf_transformation,[],[f110])).
fof(f12943,plain,(
  $false | $spl130),
  inference(subsumption_resolution,[],[f12910,f201])).
fof(f201,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.BinaryRandomAccessLists.digit'(sK0),bool),sK1),s('type.BinaryRandomAccessLists.digit'(sK0),'const.BinaryRandomAccessLists.Zero_0')))),
  inference(resolution,[],[f127,f141])).
fof(f127,plain,(
  p(s(bool,happ(s(fun('type.BinaryRandomAccessLists.digit'(sK0),bool),sK1),s('type.BinaryRandomAccessLists.digit'(sK0),'const.BinaryRandomAccessLists.Zero_0'))))),
  inference(cnf_transformation,[],[f110])).
fof(f12910,plain,(
  s(bool,'T_0') != s(bool,happ(s(fun('type.BinaryRandomAccessLists.digit'(sK0),bool),sK1),s('type.BinaryRandomAccessLists.digit'(sK0),'const.BinaryRandomAccessLists.Zero_0'))) | $spl130),
  inference(backward_demodulation,[],[f12860,f203])).
fof(f203,plain,(
  s(bool,'T_0') != s(bool,happ(s(fun('type.BinaryRandomAccessLists.digit'(sK0),bool),sK1),s('type.BinaryRandomAccessLists.digit'(sK0),sK2)))),
  inference(resolution,[],[f129,f140])).
% SZS output end Proof for thm.BinaryRandomAccessLists
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 109
% Passive clauses: 2442
% Generated clauses: 12671
% Final active clauses: 101
% Final passive clauses: 2219
% Input formulas: 37
% Initial clauses: 57
% 
% Duplicate literals: 455
% Trivial inequalities: 231
% Fw subsumption resolutions: 1458
% Fw demodulations: 1757
% Bw demodulations: 8
% 
% Simple tautologies: 234
% Equational tautologies: 44
% Forward subsumptions: 5824
% 
% Binary resolution: 195
% Factoring: 1
% Forward superposition: 4496
% Backward superposition: 3659
% Self superposition: 167
% Equality factoring: 96
% Equality resolution: 32
% 
% Split clauses: 172
% Split components: 346
% SAT solver clauses: 341
% SAT solver unit clauses: 14
% SAT solver binary clauses: 89
% SAT solver learnt clauses: 1
% 
% Sat splits: 172
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 339
% TWLsolver calls for satisfiability: 90
% 
% Memory used [KB]: 12792
% Time elapsed: 0.426 s
% ------------------------------
% ------------------------------
% Success in time 0.43 s
