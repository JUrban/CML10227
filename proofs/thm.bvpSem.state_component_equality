Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.bvpSem
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.bvpSem
% SZS output start Proof for thm.bvpSem
fof(f2630,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f2629,f2555,f23,f49,f24,f51,f25,f53,f26,f55,f27,f57,f28,f59,f29,f61,f30,f63,f31,f65,f47,f32,f66,f64,f62,f60,f58,f56,f54,f52,f50,f48,f2625,f2623,f2621,f2619,f2617,f2615,f2613,f2627])).
fof(f2627,plain,(
  $false | ($spl0 | $spl7)),
  inference(trivial_inequality_removal,[],[f2626])).
fof(f2626,plain,(
  s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),sK1))) | ($spl0 | $spl7)),
  inference(forward_demodulation,[],[f54,f47])).
fof(f2613,plain,(
  $false | ($spl0 | $spl17)),
  inference(trivial_inequality_removal,[],[f2612])).
fof(f2612,plain,(
  s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),sK1))) | ($spl0 | $spl17)),
  inference(forward_demodulation,[],[f64,f47])).
fof(f2615,plain,(
  $false | ($spl0 | $spl5)),
  inference(trivial_inequality_removal,[],[f2614])).
fof(f2614,plain,(
  s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),sK1))) | ($spl0 | $spl5)),
  inference(forward_demodulation,[],[f52,f47])).
fof(f2617,plain,(
  $false | ($spl0 | $spl9)),
  inference(trivial_inequality_removal,[],[f2616])).
fof(f2616,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),sK1))) | ($spl0 | $spl9)),
  inference(forward_demodulation,[],[f56,f47])).
fof(f2619,plain,(
  $false | ($spl0 | $spl3)),
  inference(trivial_inequality_removal,[],[f2618])).
fof(f2618,plain,(
  s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),sK1))) | ($spl0 | $spl3)),
  inference(forward_demodulation,[],[f50,f47])).
fof(f2621,plain,(
  $false | ($spl0 | $spl11)),
  inference(trivial_inequality_removal,[],[f2620])).
fof(f2620,plain,(
  s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),sK1))) | ($spl0 | $spl11)),
  inference(forward_demodulation,[],[f58,f47])).
fof(f2623,plain,(
  $false | ($spl0 | $spl15)),
  inference(trivial_inequality_removal,[],[f2622])).
fof(f2622,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),sK1))) | ($spl0 | $spl15)),
  inference(forward_demodulation,[],[f62,f47])).
fof(f2625,plain,(
  $false | ($spl0 | $spl13)),
  inference(trivial_inequality_removal,[],[f2624])).
fof(f2624,plain,(
  s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),sK1))) | ($spl0 | $spl13)),
  inference(forward_demodulation,[],[f60,f47])).
fof(f48,plain,(
  s('type.bvpSem.state'(sK0),sK1) != s('type.bvpSem.state'(sK0),sK2) | $spl1),
  inference(cnf_transformation,[],[f48_D])).
fof(f48_D,plain,(
  s('type.bvpSem.state'(sK0),sK1) != s('type.bvpSem.state'(sK0),sK2) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f50,plain,(
  s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),sK2))) | $spl3),
  inference(cnf_transformation,[],[f50_D])).
fof(f50_D,plain,(
  s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),sK2))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f52,plain,(
  s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),sK2))) | $spl5),
  inference(cnf_transformation,[],[f52_D])).
fof(f52_D,plain,(
  s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),sK2))) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f54,plain,(
  s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),sK2))) | $spl7),
  inference(cnf_transformation,[],[f54_D])).
fof(f54_D,plain,(
  s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),sK2))) <=> ~$spl7),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl7])])).
fof(f56,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),sK2))) | $spl9),
  inference(cnf_transformation,[],[f56_D])).
fof(f56_D,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),sK2))) <=> ~$spl9),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl9])])).
fof(f58,plain,(
  s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),sK2))) | $spl11),
  inference(cnf_transformation,[],[f58_D])).
fof(f58_D,plain,(
  s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),sK2))) <=> ~$spl11),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl11])])).
fof(f60,plain,(
  s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),sK2))) | $spl13),
  inference(cnf_transformation,[],[f60_D])).
fof(f60_D,plain,(
  s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),sK2))) <=> ~$spl13),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl13])])).
fof(f62,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),sK2))) | $spl15),
  inference(cnf_transformation,[],[f62_D])).
fof(f62_D,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),sK2))) <=> ~$spl15),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl15])])).
fof(f64,plain,(
  s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),sK2))) | $spl17),
  inference(cnf_transformation,[],[f64_D])).
fof(f64_D,plain,(
  s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),sK2))) <=> ~$spl17),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl17])])).
fof(f66,plain,(
  s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),sK2))) | $spl19),
  inference(cnf_transformation,[],[f66_D])).
fof(f66_D,plain,(
  s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),sK2))) <=> ~$spl19),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl19])])).
fof(f32,plain,(
  s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),sK2))) | s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),sK2))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),sK2))) | s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),sK2))) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),sK2))) | s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),sK2))) | s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),sK2))) | s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),sK2))) | s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),sK2))) | s('type.bvpSem.state'(sK0),sK1) != s('type.bvpSem.state'(sK0),sK2)),
  inference(cnf_transformation,[],[f19])).
fof(f19,plain,(
  (s('type.bvpSem.state'(sK0),sK1) = s('type.bvpSem.state'(sK0),sK2) | (s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),sK1))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),sK2))) & s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),sK1))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),sK2))) & s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),sK1))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),sK2))) & s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),sK1))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),sK2))) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),sK1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),sK2))) & s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),sK1))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),sK2))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),sK1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),sK2))) & s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),sK1))) = s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),sK2))) & s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),sK1))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),sK2))))) & (s('type.bvpSem.state'(sK0),sK1) != s('type.bvpSem.state'(sK0),sK2) | s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),sK2))) | s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),sK2))) | s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),sK2))) | s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),sK2))) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),sK2))) | s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),sK2))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),sK2))) | s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),sK2))) | s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),sK2))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f18])).
fof(f18,plain,(
  ? [X0,X1,X2] : ((s('type.bvpSem.state'(X0),X1) = s('type.bvpSem.state'(X0),X2) | (s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X2))) & s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X2))) & s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X2))) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X2))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X2))))) & (s('type.bvpSem.state'(X0),X1) != s('type.bvpSem.state'(X0),X2) | s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X2))) | s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))) != s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X2))) | s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) != s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X2))) | s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) != s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X2))) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X2))) | s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) != s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X2))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X2))) | s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) != s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X2))) | s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) != s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X2)))))),
  inference(flattening,[],[f17])).
fof(f17,plain,(
  ? [X0,X1,X2] : ((s('type.bvpSem.state'(X0),X1) = s('type.bvpSem.state'(X0),X2) | (s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X2))) & s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X2))) & s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X2))) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X2))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X2))))) & (s('type.bvpSem.state'(X0),X1) != s('type.bvpSem.state'(X0),X2) | (s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X2))) | s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))) != s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X2))) | s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) != s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X2))) | s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) != s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X2))) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X2))) | s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) != s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X2))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X2))) | s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) != s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X2))) | s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) != s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X2))))))),
  inference(nnf_transformation,[],[f15])).
fof(f15,plain,(
  ? [X0,X1,X2] : (s('type.bvpSem.state'(X0),X1) = s('type.bvpSem.state'(X0),X2) <~> (s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X2))) & s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X2))) & s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X2))) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X2))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X2)))))),
  inference(ennf_transformation,[],[f9])).
fof(f9,plain,(
  ~! [X0,X1,X2] : (s('type.bvpSem.state'(X0),X1) = s('type.bvpSem.state'(X0),X2) <=> (s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X2))) & s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X2))) & s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X2))) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X2))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X2)))))),
  inference(flattening,[],[f8])).
fof(f8,plain,(
  ~! [X0] : ! [X1,X2] : (s('type.bvpSem.state'(X0),X1) = s('type.bvpSem.state'(X0),X2) <=> (s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X2))) & s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X2))) & s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X2))) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X2))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X2)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : (s('type.bvpSem.state'(X6),X7) = s('type.bvpSem.state'(X6),X8) <=> (s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X6),X7))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X6),X8))) & s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X6),X7))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X6),X8))) & s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X6),X7))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X6),X8))) & s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X6),X7))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X6),X8))) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X6),X7))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X6),X8))) & s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X6),X7))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X6),X8))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X6),X7))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X6),X8))) & s('type.ffi.ffi_state'(X6),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X6),X7))) = s('type.ffi.ffi_state'(X6),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X6),X8))) & s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X6),X7))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X6),X8)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : (s('type.bvpSem.state'(X6),X7) = s('type.bvpSem.state'(X6),X8) <=> (s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X6),X7))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X6),X8))) & s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X6),X7))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X6),X8))) & s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X6),X7))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X6),X8))) & s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X6),X7))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X6),X8))) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X6),X7))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X6),X8))) & s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X6),X7))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X6),X8))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X6),X7))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X6),X8))) & s('type.ffi.ffi_state'(X6),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X6),X7))) = s('type.ffi.ffi_state'(X6),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X6),X8))) & s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X6),X7))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X6),X8)))))),
  file('thm.bvpSem.state_component_equality','thm.bvpSem.state_component_equality')).
fof(f47,plain,(
  s('type.bvpSem.state'(sK0),sK1) = s('type.bvpSem.state'(sK0),sK2) | $spl0),
  inference(cnf_transformation,[],[f47_D])).
fof(f47_D,plain,(
  s('type.bvpSem.state'(sK0),sK1) = s('type.bvpSem.state'(sK0),sK2) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f65,plain,(
  s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),sK1))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),sK2))) | $spl18),
  inference(cnf_transformation,[],[f65_D])).
fof(f65_D,plain,(
  s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),sK1))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),sK2))) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f31,plain,(
  s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),sK1))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),sK2))) | s('type.bvpSem.state'(sK0),sK1) = s('type.bvpSem.state'(sK0),sK2)),
  inference(cnf_transformation,[],[f19])).
fof(f63,plain,(
  s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),sK1))) = s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),sK2))) | $spl16),
  inference(cnf_transformation,[],[f63_D])).
fof(f63_D,plain,(
  s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),sK1))) = s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),sK2))) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f30,plain,(
  s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),sK1))) = s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),sK2))) | s('type.bvpSem.state'(sK0),sK1) = s('type.bvpSem.state'(sK0),sK2)),
  inference(cnf_transformation,[],[f19])).
fof(f61,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),sK1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),sK2))) | $spl14),
  inference(cnf_transformation,[],[f61_D])).
fof(f61_D,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),sK1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),sK2))) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f29,plain,(
  s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),sK1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),sK2))) | s('type.bvpSem.state'(sK0),sK1) = s('type.bvpSem.state'(sK0),sK2)),
  inference(cnf_transformation,[],[f19])).
fof(f59,plain,(
  s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),sK1))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),sK2))) | $spl12),
  inference(cnf_transformation,[],[f59_D])).
fof(f59_D,plain,(
  s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),sK1))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),sK2))) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f28,plain,(
  s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),sK1))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),sK2))) | s('type.bvpSem.state'(sK0),sK1) = s('type.bvpSem.state'(sK0),sK2)),
  inference(cnf_transformation,[],[f19])).
fof(f57,plain,(
  s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),sK1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),sK2))) | $spl10),
  inference(cnf_transformation,[],[f57_D])).
fof(f57_D,plain,(
  s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),sK1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),sK2))) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f27,plain,(
  s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),sK1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),sK2))) | s('type.bvpSem.state'(sK0),sK1) = s('type.bvpSem.state'(sK0),sK2)),
  inference(cnf_transformation,[],[f19])).
fof(f55,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),sK1))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),sK2))) | $spl8),
  inference(cnf_transformation,[],[f55_D])).
fof(f55_D,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),sK1))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),sK2))) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f26,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),sK1))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),sK2))) | s('type.bvpSem.state'(sK0),sK1) = s('type.bvpSem.state'(sK0),sK2)),
  inference(cnf_transformation,[],[f19])).
fof(f53,plain,(
  s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),sK1))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),sK2))) | $spl6),
  inference(cnf_transformation,[],[f53_D])).
fof(f53_D,plain,(
  s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),sK1))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),sK2))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f25,plain,(
  s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),sK1))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),sK2))) | s('type.bvpSem.state'(sK0),sK1) = s('type.bvpSem.state'(sK0),sK2)),
  inference(cnf_transformation,[],[f19])).
fof(f51,plain,(
  s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),sK1))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),sK2))) | $spl4),
  inference(cnf_transformation,[],[f51_D])).
fof(f51_D,plain,(
  s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),sK1))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),sK2))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f24,plain,(
  s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),sK1))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),sK2))) | s('type.bvpSem.state'(sK0),sK1) = s('type.bvpSem.state'(sK0),sK2)),
  inference(cnf_transformation,[],[f19])).
fof(f49,plain,(
  s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),sK1))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),sK2))) | $spl2),
  inference(cnf_transformation,[],[f49_D])).
fof(f49_D,plain,(
  s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),sK1))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),sK2))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f23,plain,(
  s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),sK1))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),sK2))) | s('type.bvpSem.state'(sK0),sK1) = s('type.bvpSem.state'(sK0),sK2)),
  inference(cnf_transformation,[],[f19])).
fof(f2555,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(subsumption_resolution,[],[f2554,f57])).
fof(f2554,plain,(
  s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),sK2))) | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(subsumption_resolution,[],[f2553,f48])).
fof(f2553,plain,(
  s('type.bvpSem.state'(sK0),sK1) = s('type.bvpSem.state'(sK0),sK2) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),sK2))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(trivial_inequality_removal,[],[f2552])).
fof(f2552,plain,(
  s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),sK1))) | s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),sK1))) | s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),sK1))) | s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),sK1))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),sK1))) | s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),sK1))) | s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),sK1))) | s('type.bvpSem.state'(sK0),sK1) = s('type.bvpSem.state'(sK0),sK2) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),sK2))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(equality_resolution,[],[f806])).
fof(f806,plain,(
  ( ! [X0] : (s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.bvpSem.state'(sK0),sK2) = s('type.bvpSem.state'(sK0),X0) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),sK2))) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),X0)))) ) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f805,f49])).
fof(f805,plain,(
  ( ! [X0] : (s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.bvpSem.state'(sK0),sK2) = s('type.bvpSem.state'(sK0),X0) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),sK2))) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),sK2))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),X0)))) ) | ($spl4 | $spl6 | $spl8 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f804,f51])).
fof(f804,plain,(
  ( ! [X0] : (s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.bvpSem.state'(sK0),sK2) = s('type.bvpSem.state'(sK0),X0) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),sK2))) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),sK2))) != s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),sK2))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),X0)))) ) | ($spl6 | $spl8 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f803,f53])).
fof(f803,plain,(
  ( ! [X0] : (s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.bvpSem.state'(sK0),sK2) = s('type.bvpSem.state'(sK0),X0) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),sK2))) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),sK2))) != s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),sK2))) != s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),sK2))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),X0)))) ) | ($spl8 | $spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f802,f55])).
fof(f802,plain,(
  ( ! [X0] : (s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.bvpSem.state'(sK0),sK2) = s('type.bvpSem.state'(sK0),X0) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),sK2))) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),sK2))) != s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),sK2))) != s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),sK2))) != s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),sK2))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),X0)))) ) | ($spl12 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f801,f59])).
fof(f801,plain,(
  ( ! [X0] : (s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.bvpSem.state'(sK0),sK2) = s('type.bvpSem.state'(sK0),X0) | s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),sK2))) != s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),sK2))) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),sK2))) != s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),sK2))) != s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),sK2))) != s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),sK2))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),X0)))) ) | ($spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f800,f61])).
fof(f800,plain,(
  ( ! [X0] : (s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.bvpSem.state'(sK0),sK2) = s('type.bvpSem.state'(sK0),X0) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),sK2))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),sK2))) != s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),sK2))) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),sK2))) != s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),sK2))) != s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),sK2))) != s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),sK2))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),X0)))) ) | ($spl16 | $spl18)),
  inference(forward_demodulation,[],[f797,f65])).
fof(f797,plain,(
  ( ! [X0] : (s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.ffi.ffi_state'(sK0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),sK2))) != s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.bvpSem.state'(sK0),sK2) = s('type.bvpSem.state'(sK0),X0) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),sK2))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),sK2))) != s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),sK2))) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),sK2))) != s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),sK2))) != s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),sK2))) != s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(sK0),X0))) | s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),sK2))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(sK0),X0)))) ) | $spl16),
  inference(superposition,[],[f45,f63])).
fof(f45,plain,(
  ( ! [X2,X0,X1] : (s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) != s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X2))) | s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) != s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X2))) | s('type.bvpSem.state'(X0),X1) = s('type.bvpSem.state'(X0),X2) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X2))) | s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) != s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X2))) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X2))) | s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) != s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X2))) | s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) != s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X2))) | s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))) != s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X2))) | s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X2)))) )),
  inference(cnf_transformation,[],[f21])).
fof(f21,plain,(
  ! [X0,X1,X2] : ((s('type.bvpSem.state'(X0),X1) != s('type.bvpSem.state'(X0),X2) | (s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X2))) & s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X2))) & s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X2))) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X2))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X2))))) & (s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X2))) | s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))) != s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X2))) | s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) != s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X2))) | s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) != s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X2))) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X2))) | s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) != s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X2))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X2))) | s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) != s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X2))) | s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) != s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X2))) | s('type.bvpSem.state'(X0),X1) = s('type.bvpSem.state'(X0),X2)))),
  inference(flattening,[],[f20])).
fof(f20,plain,(
  ! [X0,X1,X2] : ((s('type.bvpSem.state'(X0),X1) != s('type.bvpSem.state'(X0),X2) | (s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X2))) & s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X2))) & s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X2))) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X2))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X2))))) & ((s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X2))) | s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))) != s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X2))) | s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) != s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X2))) | s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) != s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X2))) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X2))) | s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) != s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X2))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X2))) | s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) != s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X2))) | s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) != s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X2)))) | s('type.bvpSem.state'(X0),X1) = s('type.bvpSem.state'(X0),X2)))),
  inference(nnf_transformation,[],[f12])).
fof(f12,plain,(
  ! [X0,X1,X2] : (s('type.bvpSem.state'(X0),X1) = s('type.bvpSem.state'(X0),X2) <=> (s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X2))) & s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X2))) & s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X2))) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X2))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X2)))))),
  inference(flattening,[],[f11])).
fof(f11,plain,(
  ! [X0] : ! [X1,X2] : (s('type.bvpSem.state'(X0),X1) = s('type.bvpSem.state'(X0),X2) <=> (s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X2))) & s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X2))) & s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X2))) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X2))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X2)))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6] : ! [X8,X7] : (s('type.bvpSem.state'(X6),X7) = s('type.bvpSem.state'(X6),X8) <=> (s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X6),X7))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X6),X8))) & s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X6),X7))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X6),X8))) & s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X6),X7))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X6),X8))) & s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X6),X7))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X6),X8))) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X6),X7))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X6),X8))) & s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X6),X7))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X6),X8))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X6),X7))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X6),X8))) & s('type.ffi.ffi_state'(X6),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X6),X7))) = s('type.ffi.ffi_state'(X6),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X6),X8))) & s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X6),X7))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X6),X8)))))),
  file('thm.bvpSem.state_component_equality','thm.bvpSem.bvpSem_|49|72_prove_ltb')).
fof(f2629,plain,(
  $false | ($spl0 | $spl19)),
  inference(trivial_inequality_removal,[],[f2628])).
fof(f2628,plain,(
  s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),sK1))) != s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(sK0),sK1))) | ($spl0 | $spl19)),
  inference(forward_demodulation,[],[f66,f47])).
% SZS output end Proof for thm.bvpSem
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 44
% Passive clauses: 337
% Generated clauses: 2488
% Final active clauses: 31
% Final passive clauses: 281
% Input formulas: 6
% Initial clauses: 24
% 
% Duplicate literals: 345
% Trivial inequalities: 49
% Fw subsumption resolutions: 161
% Fw demodulations: 66
% 
% Simple tautologies: 79
% Equational tautologies: 78
% Forward subsumptions: 1078
% Fw demodulations to eq. taut.: 8
% Bw demodulations to eq. taut.: 8
% 
% Binary resolution: 12
% Forward superposition: 719
% Backward superposition: 683
% Self superposition: 189
% Equality factoring: 180
% Equality resolution: 12
% 
% Split clauses: 183
% Split components: 375
% SAT solver clauses: 303
% SAT solver unit clauses: 60
% SAT solver binary clauses: 124
% SAT solver learnt clauses: 2
% SAT solver learnt literals: 1
% 
% Sat splits: 183
% Sat splitting refutations: 11
% 
% TWLsolver clauses: 301
% TWLsolver calls for satisfiability: 24
% 
% Memory used [KB]: 1918
% Time elapsed: 0.086 s
% ------------------------------
% ------------------------------
% Success in time 0.088 s
