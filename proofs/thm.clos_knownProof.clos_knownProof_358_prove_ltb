Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.clos_knownProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.clos_knownProof
% SZS output start Proof for thm.clos_knownProof
fof(f4333,plain,(
  $false),
  inference(equality_resolution,[],[f872])).
fof(f872,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X0),s('type.sptree.spt'('type.clos_known.val_approx'),X1))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),sK9(sK1,sK0,sK3,sK2)),s('type.sptree.spt'('type.clos_known.val_approx'),sK10(sK1,sK0,sK3,sK2))))) )),
  inference(superposition,[],[f67,f93])).
fof(f93,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),sK9(X3,X2,X1,X0)),s('type.sptree.spt'('type.clos_known.val_approx'),sK10(X3,X2,X1,X0)))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.list.list'('type.clos_known.val_approx'),'const.list.APPEND_2'(s('type.list.list'('type.clos_known.val_approx'),'const.rich_list.REPLICATE_2'(s('type.num.num',X2),s('type.clos_known.val_approx','const.clos_known.Other_0'))),s('type.list.list'('type.clos_known.val_approx'),X1))),s('type.sptree.spt'('type.clos_known.val_approx'),X3)))) )),
  inference(cnf_transformation,[],[f64])).
fof(f64,plain,(
  ! [X0,X1,X2,X3] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),sK9(X3,X2,X1,X0)),s('type.sptree.spt'('type.clos_known.val_approx'),sK10(X3,X2,X1,X0)))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.list.list'('type.clos_known.val_approx'),'const.list.APPEND_2'(s('type.list.list'('type.clos_known.val_approx'),'const.rich_list.REPLICATE_2'(s('type.num.num',X2),s('type.clos_known.val_approx','const.clos_known.Other_0'))),s('type.list.list'('type.clos_known.val_approx'),X1))),s('type.sptree.spt'('type.clos_known.val_approx'),X3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK9,sK10])],[f44])).
fof(f44,plain,(
  ! [X0,X1,X2,X3] : ? [X4,X5] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X4),s('type.sptree.spt'('type.clos_known.val_approx'),X5))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.list.list'('type.clos_known.val_approx'),'const.list.APPEND_2'(s('type.list.list'('type.clos_known.val_approx'),'const.rich_list.REPLICATE_2'(s('type.num.num',X2),s('type.clos_known.val_approx','const.clos_known.Other_0'))),s('type.list.list'('type.clos_known.val_approx'),X1))),s('type.sptree.spt'('type.clos_known.val_approx'),X3)))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X22,X23,X6,X24] : ? [X10,X11] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X10),s('type.sptree.spt'('type.clos_known.val_approx'),X11))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X22),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.list.list'('type.clos_known.val_approx'),'const.list.APPEND_2'(s('type.list.list'('type.clos_known.val_approx'),'const.rich_list.REPLICATE_2'(s('type.num.num',X6),s('type.clos_known.val_approx','const.clos_known.Other_0'))),s('type.list.list'('type.clos_known.val_approx'),X23))),s('type.sptree.spt'('type.clos_known.val_approx'),X24)))),
  file('thm.clos_knownProof.clos_knownProof_358_prove_ltb','thm.clos_knownProof.clos_knownProof_|49|2_prove_ltb')).
fof(f67,plain,(
  ( ! [X4,X5] : (s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X4),s('type.sptree.spt'('type.clos_known.val_approx'),X5))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.list.list'('type.clos_known.val_approx'),'const.list.APPEND_2'(s('type.list.list'('type.clos_known.val_approx'),'const.rich_list.REPLICATE_2'(s('type.num.num',sK0),s('type.clos_known.val_approx','const.clos_known.Other_0'))),s('type.list.list'('type.clos_known.val_approx'),sK3))),s('type.sptree.spt'('type.clos_known.val_approx'),sK1)))) )),
  inference(cnf_transformation,[],[f50])).
fof(f50,plain,(
  ! [X4,X5] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X4),s('type.sptree.spt'('type.clos_known.val_approx'),X5))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK2),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.list.list'('type.clos_known.val_approx'),'const.list.APPEND_2'(s('type.list.list'('type.clos_known.val_approx'),'const.rich_list.REPLICATE_2'(s('type.num.num',sK0),s('type.clos_known.val_approx','const.clos_known.Other_0'))),s('type.list.list'('type.clos_known.val_approx'),sK3))),s('type.sptree.spt'('type.clos_known.val_approx'),sK1)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3])],[f48])).
fof(f48,plain,(
  ? [X0,X1,X2,X3] : ! [X4,X5] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X4),s('type.sptree.spt'('type.clos_known.val_approx'),X5))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X2),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.list.list'('type.clos_known.val_approx'),'const.list.APPEND_2'(s('type.list.list'('type.clos_known.val_approx'),'const.rich_list.REPLICATE_2'(s('type.num.num',X0),s('type.clos_known.val_approx','const.clos_known.Other_0'))),s('type.list.list'('type.clos_known.val_approx'),X3))),s('type.sptree.spt'('type.clos_known.val_approx'),X1)))),
  inference(ennf_transformation,[],[f23])).
fof(f23,plain,(
  ~! [X0,X1,X2,X3] : ? [X4,X5] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X4),s('type.sptree.spt'('type.clos_known.val_approx'),X5))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X2),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.list.list'('type.clos_known.val_approx'),'const.list.APPEND_2'(s('type.list.list'('type.clos_known.val_approx'),'const.rich_list.REPLICATE_2'(s('type.num.num',X0),s('type.clos_known.val_approx','const.clos_known.Other_0'))),s('type.list.list'('type.clos_known.val_approx'),X3))),s('type.sptree.spt'('type.clos_known.val_approx'),X1)))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8,X9] : ? [X10,X11] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X10),s('type.sptree.spt'('type.clos_known.val_approx'),X11))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X8),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.list.list'('type.clos_known.val_approx'),'const.list.APPEND_2'(s('type.list.list'('type.clos_known.val_approx'),'const.rich_list.REPLICATE_2'(s('type.num.num',X6),s('type.clos_known.val_approx','const.clos_known.Other_0'))),s('type.list.list'('type.clos_known.val_approx'),X9))),s('type.sptree.spt'('type.clos_known.val_approx'),X7)))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8,X9] : ? [X10,X11] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X10),s('type.sptree.spt'('type.clos_known.val_approx'),X11))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X8),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.list.list'('type.clos_known.val_approx'),'const.list.APPEND_2'(s('type.list.list'('type.clos_known.val_approx'),'const.rich_list.REPLICATE_2'(s('type.num.num',X6),s('type.clos_known.val_approx','const.clos_known.Other_0'))),s('type.list.list'('type.clos_known.val_approx'),X9))),s('type.sptree.spt'('type.clos_known.val_approx'),X7)))),
  file('thm.clos_knownProof.clos_knownProof_358_prove_ltb','thm.clos_knownProof.clos_knownProof_358_prove_ltb')).
% SZS output end Proof for thm.clos_knownProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 83
% Passive clauses: 449
% Generated clauses: 4150
% Final active clauses: 80
% Final passive clauses: 319
% Input formulas: 21
% Initial clauses: 30
% 
% Duplicate literals: 314
% Trivial inequalities: 247
% Fw subsumption resolutions: 435
% Fw demodulations: 237
% Bw demodulations: 2
% 
% Simple tautologies: 131
% Equational tautologies: 21
% Forward subsumptions: 2101
% 
% Binary resolution: 29
% Forward superposition: 1323
% Backward superposition: 1366
% Self superposition: 60
% Equality factoring: 49
% Equality resolution: 12
% 
% Split clauses: 144
% Split components: 299
% SAT solver clauses: 261
% SAT solver unit clauses: 12
% SAT solver binary clauses: 108
% 
% Sat splits: 144
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 261
% TWLsolver calls for satisfiability: 41
% 
% Memory used [KB]: 2558
% Time elapsed: 0.243 s
% ------------------------------
% ------------------------------
% Success in time 0.26 s
