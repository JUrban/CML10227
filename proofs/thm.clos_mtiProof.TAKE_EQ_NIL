Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.clos_mtiProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.clos_mtiProof
% SZS output start Proof for thm.clos_mtiProof
fof(f714,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f713,f699,f78,f126,f77,f128,f124,f76,f125,f127,f123,f706])).
fof(f706,plain,(
  $false | ($spl1 | $spl2)),
  inference(subsumption_resolution,[],[f705,f408])).
fof(f408,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num',X1),s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(equality_resolution,[],[f115])).
fof(f115,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X2) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num',X1),s('type.list.list'(X0),X2)))) )),
  inference(cnf_transformation,[],[f74])).
fof(f74,plain,(
  ! [X0,X1,X2] : ((s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X2)) & ((s('type.num.num','const.num.|48|_0') != s('type.num.num',X1) & s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X2)) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num',X1),s('type.list.list'(X0),X2)))))),
  inference(flattening,[],[f73])).
fof(f73,plain,(
  ! [X0,X1,X2] : ((s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))) | (s('type.num.num','const.num.|48|_0') = s('type.num.num',X1) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X2))) & ((s('type.num.num','const.num.|48|_0') != s('type.num.num',X1) & s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X2)) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num',X1),s('type.list.list'(X0),X2)))))),
  inference(nnf_transformation,[],[f43])).
fof(f43,plain,(
  ! [X0,X1,X2] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))) <=> (s('type.num.num','const.num.|48|_0') = s('type.num.num',X1) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X2)))),
  inference(flattening,[],[f42])).
fof(f42,plain,(
  ! [X0] : ! [X1,X2] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))) <=> (s('type.num.num','const.num.|48|_0') = s('type.num.num',X1) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X2)))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6] : ! [X8,X7] : (s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),'const.list.TAKE_2'(s('type.num.num',X8),s('type.list.list'(X6),X7))) <=> (s('type.num.num','const.num.|48|_0') = s('type.num.num',X8) | s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X7)))),
  file('thm.clos_mtiProof.TAKE_EQ_NIL','thm.clos_removeProof.TAKE_EQ_NIL')).
fof(f705,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),'const.list.NIL_0'))) | ($spl1 | $spl2)),
  inference(forward_demodulation,[],[f124,f125])).
fof(f123,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))) | $spl0),
  inference(cnf_transformation,[],[f123_D])).
fof(f123_D,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f127,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK2) | $spl4),
  inference(cnf_transformation,[],[f127_D])).
fof(f127_D,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK2) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f125,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK1) | $spl2),
  inference(cnf_transformation,[],[f125_D])).
fof(f125_D,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK1) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f76,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK1) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK2) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1)))),
  inference(cnf_transformation,[],[f54])).
fof(f54,plain,(
  (s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK2) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK1)) & (s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))) | (s('type.num.num','const.num.|48|_0') != s('type.num.num',sK2) & s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),sK1)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f53])).
fof(f53,plain,(
  ? [X0,X1,X2] : ((s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num',X2),s('type.list.list'(X0),X1))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X2) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) & (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num',X2),s('type.list.list'(X0),X1))) | (s('type.num.num','const.num.|48|_0') != s('type.num.num',X2) & s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1))))),
  inference(flattening,[],[f52])).
fof(f52,plain,(
  ? [X0,X1,X2] : ((s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num',X2),s('type.list.list'(X0),X1))) | (s('type.num.num','const.num.|48|_0') = s('type.num.num',X2) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))) & (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num',X2),s('type.list.list'(X0),X1))) | (s('type.num.num','const.num.|48|_0') != s('type.num.num',X2) & s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1))))),
  inference(nnf_transformation,[],[f47])).
fof(f47,plain,(
  ? [X0,X1,X2] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num',X2),s('type.list.list'(X0),X1))) <~> (s('type.num.num','const.num.|48|_0') = s('type.num.num',X2) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)))),
  inference(ennf_transformation,[],[f24])).
fof(f24,plain,(
  ~! [X0,X1,X2] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num',X2),s('type.list.list'(X0),X1))) <=> (s('type.num.num','const.num.|48|_0') = s('type.num.num',X2) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)))),
  inference(flattening,[],[f23])).
fof(f23,plain,(
  ~! [X0] : ! [X1,X2] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num',X2),s('type.list.list'(X0),X1))) <=> (s('type.num.num','const.num.|48|_0') = s('type.num.num',X2) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : (s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),'const.list.TAKE_2'(s('type.num.num',X8),s('type.list.list'(X6),X7))) <=> (s('type.num.num','const.num.|48|_0') = s('type.num.num',X8) | s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X7)))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : (s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),'const.list.TAKE_2'(s('type.num.num',X8),s('type.list.list'(X6),X7))) <=> (s('type.num.num','const.num.|48|_0') = s('type.num.num',X8) | s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X7)))),
  file('thm.clos_mtiProof.TAKE_EQ_NIL','thm.clos_mtiProof.TAKE_EQ_NIL')).
fof(f124,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))) | $spl1),
  inference(cnf_transformation,[],[f124_D])).
fof(f124_D,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f128,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK2) | $spl5),
  inference(cnf_transformation,[],[f128_D])).
fof(f128_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK2) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f77,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK2) | s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1)))),
  inference(cnf_transformation,[],[f54])).
fof(f126,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),sK1) | $spl3),
  inference(cnf_transformation,[],[f126_D])).
fof(f126_D,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),sK1) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f78,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),sK1) | s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1)))),
  inference(cnf_transformation,[],[f54])).
fof(f699,plain,(
  $false | ($spl0 | $spl3 | $spl5)),
  inference(subsumption_resolution,[],[f698,f126])).
fof(f698,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK1) | ($spl0 | $spl5)),
  inference(subsumption_resolution,[],[f697,f128])).
fof(f697,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK2) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK1) | $spl0),
  inference(trivial_inequality_removal,[],[f693])).
fof(f693,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),'const.list.NIL_0') | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK2) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK1) | $spl0),
  inference(superposition,[],[f113,f123])).
fof(f113,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X2)) )),
  inference(cnf_transformation,[],[f74])).
fof(f713,plain,(
  $false | ($spl1 | $spl4)),
  inference(subsumption_resolution,[],[f712,f183])).
fof(f183,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(X0),X1)))) )),
  inference(equality_resolution,[],[f114])).
fof(f114,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X1) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.TAKE_2'(s('type.num.num',X1),s('type.list.list'(X0),X2)))) )),
  inference(cnf_transformation,[],[f74])).
fof(f712,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),'const.list.TAKE_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'(sK0),sK1))) | ($spl1 | $spl4)),
  inference(forward_demodulation,[],[f124,f127])).
% SZS output end Proof for thm.clos_mtiProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 26
% Passive clauses: 100
% Generated clauses: 599
% Final active clauses: 21
% Final passive clauses: 61
% Input formulas: 21
% Initial clauses: 45
% 
% Duplicate literals: 77
% Trivial inequalities: 16
% Fw subsumption resolutions: 66
% Fw demodulations: 8
% 
% Simple tautologies: 54
% Equational tautologies: 29
% Forward subsumptions: 233
% 
% Binary resolution: 23
% Factoring: 1
% Forward superposition: 63
% Backward superposition: 192
% Self superposition: 43
% Equality factoring: 50
% Equality resolution: 3
% 
% Split clauses: 16
% Split components: 33
% SAT solver clauses: 31
% SAT solver unit clauses: 5
% SAT solver binary clauses: 18
% SAT solver learnt clauses: 2
% SAT solver learnt literals: 1
% 
% Sat splits: 16
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 29
% TWLsolver calls for satisfiability: 10
% 
% Memory used [KB]: 767
% Time elapsed: 0.020 s
% ------------------------------
% ------------------------------
% Success in time 0.023 s
