Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.evalProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.evalProps
% SZS output start Proof for thm.evalProps
fof(f10270,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f10264,f6423,f512,f407,f513])).
fof(f513,plain,(
  ( ! [X2,X3] : (s('type.list.list'('type.list.list'('type.string.char')),'const.ast.pat_bindings_2'(s('type.ast.pat',X2),s('type.list.list'('type.list.list'('type.string.char')),X3))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.ast.pat_bindings_2'(s('type.ast.pat',X2),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X3)))) ) | $spl6),
  inference(cnf_transformation,[],[f513_D])).
fof(f513_D,plain,(
  ( ! [X2,X3] : (s('type.list.list'('type.list.list'('type.string.char')),'const.ast.pat_bindings_2'(s('type.ast.pat',X2),s('type.list.list'('type.list.list'('type.string.char')),X3))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.ast.pat_bindings_2'(s('type.ast.pat',X2),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X3)))) ) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f407,plain,(
  ( ! [X0,X1] : (s('type.list.list'('type.list.list'('type.string.char')),'const.ast.pat_bindings_2'(s('type.ast.pat',X0),s('type.list.list'('type.list.list'('type.string.char')),X1))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.ast.pat_bindings_2'(s('type.ast.pat',X0),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X1)))) )),
  inference(cnf_transformation,[],[f133])).
fof(f133,plain,(
  ! [X0,X1] : s('type.list.list'('type.list.list'('type.string.char')),'const.ast.pat_bindings_2'(s('type.ast.pat',X0),s('type.list.list'('type.list.list'('type.string.char')),X1))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.ast.pat_bindings_2'(s('type.ast.pat',X0),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X1)))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X10,X7] : s('type.list.list'('type.list.list'('type.string.char')),'const.ast.pat_bindings_2'(s('type.ast.pat',X10),s('type.list.list'('type.list.list'('type.string.char')),X7))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.ast.pat_bindings_2'(s('type.ast.pat',X10),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X7)))),
  file('thm.evalProps.pat_bindings_accum|split|1','thm.evalProps.pat_bindings_accum|split|0')).
fof(f512,plain,(
  ( ! [X0,X1] : (s('type.list.list'('type.list.list'('type.string.char')),'const.ast.pats_bindings_2'(s('type.list.list'('type.ast.pat'),X0),s('type.list.list'('type.list.list'('type.string.char')),X1))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.ast.pats_bindings_2'(s('type.list.list'('type.ast.pat'),X0),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X1)))) ) | $spl4),
  inference(cnf_transformation,[],[f512_D])).
fof(f512_D,plain,(
  ( ! [X0,X1] : (s('type.list.list'('type.list.list'('type.string.char')),'const.ast.pats_bindings_2'(s('type.list.list'('type.ast.pat'),X0),s('type.list.list'('type.list.list'('type.string.char')),X1))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.ast.pats_bindings_2'(s('type.list.list'('type.ast.pat'),X0),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X1)))) ) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f6423,plain,(
  ( ! [X2,X1] : (s('type.list.list'('type.list.list'('type.string.char')),'const.ast.pats_bindings_2'(s('type.list.list'('type.ast.pat'),X1),s('type.list.list'('type.list.list'('type.string.char')),X2))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.ast.pats_bindings_2'(s('type.list.list'('type.ast.pat'),X1),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X2)))) ) | $spl6),
  inference(forward_demodulation,[],[f6395,f460])).
fof(f460,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.list.list'('type.string.char')),'const.ast.pats_bindings_2'(s('type.list.list'('type.ast.pat'),X1),s('type.list.list'('type.list.list'('type.string.char')),X2))) = s('type.list.list'('type.list.list'('type.string.char')),'const.ast.pat_bindings_2'(s('type.ast.pat','const.ast.Pcon_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),X0),s('type.list.list'('type.ast.pat'),X1))),s('type.list.list'('type.list.list'('type.string.char')),X2)))) )),
  inference(cnf_transformation,[],[f161])).
fof(f161,plain,(
  ! [X0,X1,X2] : s('type.list.list'('type.list.list'('type.string.char')),'const.ast.pats_bindings_2'(s('type.list.list'('type.ast.pat'),X1),s('type.list.list'('type.list.list'('type.string.char')),X2))) = s('type.list.list'('type.list.list'('type.string.char')),'const.ast.pat_bindings_2'(s('type.ast.pat','const.ast.Pcon_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),X0),s('type.list.list'('type.ast.pat'),X1))),s('type.list.list'('type.list.list'('type.string.char')),X2)))),
  inference(rectify,[],[f54])).
fof(f54,axiom,(
  ! [X30,X6,X11] : s('type.list.list'('type.list.list'('type.string.char')),'const.ast.pats_bindings_2'(s('type.list.list'('type.ast.pat'),X6),s('type.list.list'('type.list.list'('type.string.char')),X11))) = s('type.list.list'('type.list.list'('type.string.char')),'const.ast.pat_bindings_2'(s('type.ast.pat','const.ast.Pcon_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),X30),s('type.list.list'('type.ast.pat'),X6))),s('type.list.list'('type.list.list'('type.string.char')),X11)))),
  file('thm.evalProps.pat_bindings_accum|split|1','thm.ast.pat_bindings_def|split|2')).
fof(f6395,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.list.list'('type.string.char')),'const.ast.pat_bindings_2'(s('type.ast.pat','const.ast.Pcon_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),X0),s('type.list.list'('type.ast.pat'),X1))),s('type.list.list'('type.list.list'('type.string.char')),X2))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.ast.pats_bindings_2'(s('type.list.list'('type.ast.pat'),X1),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X2)))) ) | $spl6),
  inference(superposition,[],[f513,f460])).
fof(f10264,plain,(
  $false | $spl4),
  inference(trivial_inequality_removal,[],[f10226])).
fof(f10226,plain,(
  s('type.list.list'('type.list.list'('type.string.char')),'const.ast.pats_bindings_2'(s('type.list.list'('type.ast.pat'),sK8),s('type.list.list'('type.list.list'('type.string.char')),sK9))) != s('type.list.list'('type.list.list'('type.string.char')),'const.ast.pats_bindings_2'(s('type.list.list'('type.ast.pat'),sK8),s('type.list.list'('type.list.list'('type.string.char')),sK9))) | $spl4),
  inference(superposition,[],[f313,f512])).
fof(f313,plain,(
  s('type.list.list'('type.list.list'('type.string.char')),'const.ast.pats_bindings_2'(s('type.list.list'('type.ast.pat'),sK8),s('type.list.list'('type.list.list'('type.string.char')),sK9))) != s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.ast.pats_bindings_2'(s('type.list.list'('type.ast.pat'),sK8),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),sK9)))),
  inference(cnf_transformation,[],[f216])).
fof(f216,plain,(
  s('type.list.list'('type.list.list'('type.string.char')),'const.ast.pats_bindings_2'(s('type.list.list'('type.ast.pat'),sK8),s('type.list.list'('type.list.list'('type.string.char')),sK9))) != s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.ast.pats_bindings_2'(s('type.list.list'('type.ast.pat'),sK8),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),sK9)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK8,sK9])],[f171])).
fof(f171,plain,(
  ? [X0,X1] : s('type.list.list'('type.list.list'('type.string.char')),'const.ast.pats_bindings_2'(s('type.list.list'('type.ast.pat'),X0),s('type.list.list'('type.list.list'('type.string.char')),X1))) != s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.ast.pats_bindings_2'(s('type.list.list'('type.ast.pat'),X0),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X1)))),
  inference(ennf_transformation,[],[f71])).
fof(f71,plain,(
  ~! [X0,X1] : s('type.list.list'('type.list.list'('type.string.char')),'const.ast.pats_bindings_2'(s('type.list.list'('type.ast.pat'),X0),s('type.list.list'('type.list.list'('type.string.char')),X1))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.ast.pats_bindings_2'(s('type.list.list'('type.ast.pat'),X0),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X1)))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : s('type.list.list'('type.list.list'('type.string.char')),'const.ast.pats_bindings_2'(s('type.list.list'('type.ast.pat'),X6),s('type.list.list'('type.list.list'('type.string.char')),X7))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.ast.pats_bindings_2'(s('type.list.list'('type.ast.pat'),X6),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X7)))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : s('type.list.list'('type.list.list'('type.string.char')),'const.ast.pats_bindings_2'(s('type.list.list'('type.ast.pat'),X6),s('type.list.list'('type.list.list'('type.string.char')),X7))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.ast.pats_bindings_2'(s('type.list.list'('type.ast.pat'),X6),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X7)))),
  file('thm.evalProps.pat_bindings_accum|split|1','thm.evalProps.pat_bindings_accum|split|1')).
% SZS output end Proof for thm.evalProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 340
% Passive clauses: 1926
% Generated clauses: 9827
% Final active clauses: 285
% Final passive clauses: 1371
% Input formulas: 69
% Initial clauses: 191
% 
% Duplicate literals: 357
% Trivial inequalities: 49
% Fw subsumption resolutions: 884
% Fw demodulations: 772
% Bw demodulations: 53
% 
% Simple tautologies: 287
% Equational tautologies: 44
% Forward subsumptions: 5257
% 
% Binary resolution: 3442
% Factoring: 13
% Forward superposition: 1964
% Backward superposition: 1836
% Self superposition: 65
% Equality factoring: 50
% Equality resolution: 15
% 
% Split clauses: 234
% Split components: 475
% SAT solver clauses: 400
% SAT solver unit clauses: 24
% SAT solver binary clauses: 179
% SAT solver learnt clauses: 1
% 
% Sat splits: 234
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 396
% TWLsolver calls for satisfiability: 114
% 
% Memory used [KB]: 5500
% Time elapsed: 0.333 s
% ------------------------------
% ------------------------------
% Success in time 0.35 s
