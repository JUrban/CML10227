Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.stack_removeProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.stack_removeProof
% SZS output start Proof for thm.stack_removeProof
fof(f4409,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f4408,f224,f413,f411,f409,f407,f405,f403,f4302,f3976,f3971,f3970,f4303])).
fof(f4303,plain,(
  $false | $spl0),
  inference(subsumption_resolution,[],[f403,f230])).
fof(f230,plain,(
  ( ! [X2,X3] : (s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),sK13) != s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(sK12),'const.wordLang.Const_1'(s('type.fcp.cart'(bool,sK12),X2))),s('type.num.num',X3)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f139,plain,(
  (s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),sK13) = s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(sK12),'const.wordLang.Const_1'(s('type.fcp.cart'(bool,sK12),sK14))),s('type.num.num',sK15))) | s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),sK13) = s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(sK12),'const.wordLang.Var_1'(s('type.num.num',sK16))),s('type.num.num',sK17))) | s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),sK13) = s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(sK12),'const.wordLang.Lookup_1'(s('type.wordLang.store_name',sK18))),s('type.num.num',sK19))) | s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),sK13) = s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(sK12),'const.wordLang.Load_1'(s('type.wordLang.exp'(sK12),sK20))),s('type.num.num',sK21))) | s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),sK13) = s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(sK12),'const.wordLang.Op_2'(s('type.asm.binop',sK22),s('type.list.list'('type.wordLang.exp'(sK12)),sK23))),s('type.num.num',sK24))) | s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),sK13) = s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(sK12),'const.wordLang.Shift_3'(s('type.asm.shift',sK25),s('type.wordLang.exp'(sK12),sK26),s('type.wordLang.num_exp'(sK12),sK27))),s('type.num.num',sK28)))) & ! [X15,X16] : s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),sK13) != s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(sK12),'const.wordLang.Var_1'(s('type.num.num',X15))),s('type.num.num',X16))) & ! [X13,X14] : s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),sK13) != s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(sK12),'const.wordLang.Load_1'(s('type.wordLang.exp'(sK12),X13))),s('type.num.num',X14))) & ! [X9,X10,X11,X12] : s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),sK13) != s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(sK12),'const.wordLang.Shift_3'(s('type.asm.shift',X9),s('type.wordLang.exp'(sK12),X10),s('type.wordLang.num_exp'(sK12),X11))),s('type.num.num',X12))) & ! [X7,X8] : s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),sK13) != s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(sK12),'const.wordLang.Lookup_1'(s('type.wordLang.store_name',X7))),s('type.num.num',X8))) & ! [X4,X5,X6] : s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),sK13) != s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(sK12),'const.wordLang.Op_2'(s('type.asm.binop',X4),s('type.list.list'('type.wordLang.exp'(sK12)),X5))),s('type.num.num',X6))) & ! [X2,X3] : s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),sK13) != s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(sK12),'const.wordLang.Const_1'(s('type.fcp.cart'(bool,sK12),X2))),s('type.num.num',X3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14,sK15,sK16,sK17,sK18,sK19,sK20,sK21,sK22,sK23,sK24,sK25,sK26,sK27,sK28])],[f138])).
fof(f138,plain,(
  ? [X0,X1] : ((? [X30,X31] : s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X0),'const.wordLang.Const_1'(s('type.fcp.cart'(bool,X0),X30))),s('type.num.num',X31))) | ? [X28,X29] : s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X0),'const.wordLang.Var_1'(s('type.num.num',X28))),s('type.num.num',X29))) | ? [X26,X27] : s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X0),'const.wordLang.Lookup_1'(s('type.wordLang.store_name',X26))),s('type.num.num',X27))) | ? [X24,X25] : s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X0),'const.wordLang.Load_1'(s('type.wordLang.exp'(X0),X24))),s('type.num.num',X25))) | ? [X21,X22,X23] : s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X0),'const.wordLang.Op_2'(s('type.asm.binop',X21),s('type.list.list'('type.wordLang.exp'(X0)),X22))),s('type.num.num',X23))) | ? [X17,X18,X19,X20] : s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X0),'const.wordLang.Shift_3'(s('type.asm.shift',X17),s('type.wordLang.exp'(X0),X18),s('type.wordLang.num_exp'(X0),X19))),s('type.num.num',X20)))) & ! [X15,X16] : s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),X1) != s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X0),'const.wordLang.Var_1'(s('type.num.num',X15))),s('type.num.num',X16))) & ! [X13,X14] : s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),X1) != s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X0),'const.wordLang.Load_1'(s('type.wordLang.exp'(X0),X13))),s('type.num.num',X14))) & ! [X9,X10,X11,X12] : s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),X1) != s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X0),'const.wordLang.Shift_3'(s('type.asm.shift',X9),s('type.wordLang.exp'(X0),X10),s('type.wordLang.num_exp'(X0),X11))),s('type.num.num',X12))) & ! [X7,X8] : s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),X1) != s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X0),'const.wordLang.Lookup_1'(s('type.wordLang.store_name',X7))),s('type.num.num',X8))) & ! [X4,X5,X6] : s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),X1) != s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X0),'const.wordLang.Op_2'(s('type.asm.binop',X4),s('type.list.list'('type.wordLang.exp'(X0)),X5))),s('type.num.num',X6))) & ! [X2,X3] : s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),X1) != s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X0),'const.wordLang.Const_1'(s('type.fcp.cart'(bool,X0),X2))),s('type.num.num',X3))))),
  inference(rectify,[],[f98])).
fof(f98,plain,(
  ? [X0,X1] : ((? [X15,X16] : s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X0),'const.wordLang.Const_1'(s('type.fcp.cart'(bool,X0),X15))),s('type.num.num',X16))) | ? [X13,X14] : s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X0),'const.wordLang.Var_1'(s('type.num.num',X13))),s('type.num.num',X14))) | ? [X11,X12] : s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X0),'const.wordLang.Lookup_1'(s('type.wordLang.store_name',X11))),s('type.num.num',X12))) | ? [X9,X10] : s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X0),'const.wordLang.Load_1'(s('type.wordLang.exp'(X0),X9))),s('type.num.num',X10))) | ? [X6,X7,X8] : s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X0),'const.wordLang.Op_2'(s('type.asm.binop',X6),s('type.list.list'('type.wordLang.exp'(X0)),X7))),s('type.num.num',X8))) | ? [X2,X3,X4,X5] : s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X0),'const.wordLang.Shift_3'(s('type.asm.shift',X2),s('type.wordLang.exp'(X0),X3),s('type.wordLang.num_exp'(X0),X4))),s('type.num.num',X5)))) & ! [X30,X31] : s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),X1) != s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X0),'const.wordLang.Var_1'(s('type.num.num',X30))),s('type.num.num',X31))) & ! [X28,X29] : s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),X1) != s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X0),'const.wordLang.Load_1'(s('type.wordLang.exp'(X0),X28))),s('type.num.num',X29))) & ! [X24,X25,X26,X27] : s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),X1) != s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X0),'const.wordLang.Shift_3'(s('type.asm.shift',X24),s('type.wordLang.exp'(X0),X25),s('type.wordLang.num_exp'(X0),X26))),s('type.num.num',X27))) & ! [X22,X23] : s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),X1) != s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X0),'const.wordLang.Lookup_1'(s('type.wordLang.store_name',X22))),s('type.num.num',X23))) & ! [X19,X20,X21] : s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),X1) != s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X0),'const.wordLang.Op_2'(s('type.asm.binop',X19),s('type.list.list'('type.wordLang.exp'(X0)),X20))),s('type.num.num',X21))) & ! [X17,X18] : s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),X1) != s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X0),'const.wordLang.Const_1'(s('type.fcp.cart'(bool,X0),X17))),s('type.num.num',X18))))),
  inference(flattening,[],[f97])).
fof(f97,plain,(
  ? [X0,X1] : ((? [X15,X16] : s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X0),'const.wordLang.Const_1'(s('type.fcp.cart'(bool,X0),X15))),s('type.num.num',X16))) | ? [X13,X14] : s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X0),'const.wordLang.Var_1'(s('type.num.num',X13))),s('type.num.num',X14))) | ? [X11,X12] : s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X0),'const.wordLang.Lookup_1'(s('type.wordLang.store_name',X11))),s('type.num.num',X12))) | ? [X9,X10] : s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X0),'const.wordLang.Load_1'(s('type.wordLang.exp'(X0),X9))),s('type.num.num',X10))) | ? [X6,X7,X8] : s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X0),'const.wordLang.Op_2'(s('type.asm.binop',X6),s('type.list.list'('type.wordLang.exp'(X0)),X7))),s('type.num.num',X8))) | ? [X2,X3,X4,X5] : s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X0),'const.wordLang.Shift_3'(s('type.asm.shift',X2),s('type.wordLang.exp'(X0),X3),s('type.wordLang.num_exp'(X0),X4))),s('type.num.num',X5)))) & (! [X30,X31] : s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),X1) != s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X0),'const.wordLang.Var_1'(s('type.num.num',X30))),s('type.num.num',X31))) & ! [X28,X29] : s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),X1) != s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X0),'const.wordLang.Load_1'(s('type.wordLang.exp'(X0),X28))),s('type.num.num',X29))) & ! [X24,X25,X26,X27] : s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),X1) != s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X0),'const.wordLang.Shift_3'(s('type.asm.shift',X24),s('type.wordLang.exp'(X0),X25),s('type.wordLang.num_exp'(X0),X26))),s('type.num.num',X27))) & ! [X22,X23] : s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),X1) != s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X0),'const.wordLang.Lookup_1'(s('type.wordLang.store_name',X22))),s('type.num.num',X23))) & ! [X19,X20,X21] : s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),X1) != s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X0),'const.wordLang.Op_2'(s('type.asm.binop',X19),s('type.list.list'('type.wordLang.exp'(X0)),X20))),s('type.num.num',X21))) & ! [X17,X18] : s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),X1) != s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X0),'const.wordLang.Const_1'(s('type.fcp.cart'(bool,X0),X17))),s('type.num.num',X18)))))),
  inference(ennf_transformation,[],[f40])).
fof(f40,plain,(
  ~! [X0,X1] : ((? [X15,X16] : s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X0),'const.wordLang.Const_1'(s('type.fcp.cart'(bool,X0),X15))),s('type.num.num',X16))) | ? [X13,X14] : s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X0),'const.wordLang.Var_1'(s('type.num.num',X13))),s('type.num.num',X14))) | ? [X11,X12] : s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X0),'const.wordLang.Lookup_1'(s('type.wordLang.store_name',X11))),s('type.num.num',X12))) | ? [X9,X10] : s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X0),'const.wordLang.Load_1'(s('type.wordLang.exp'(X0),X9))),s('type.num.num',X10))) | ? [X6,X7,X8] : s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X0),'const.wordLang.Op_2'(s('type.asm.binop',X6),s('type.list.list'('type.wordLang.exp'(X0)),X7))),s('type.num.num',X8))) | ? [X2,X3,X4,X5] : s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X0),'const.wordLang.Shift_3'(s('type.asm.shift',X2),s('type.wordLang.exp'(X0),X3),s('type.wordLang.num_exp'(X0),X4))),s('type.num.num',X5)))) => (? [X30,X31] : s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X0),'const.wordLang.Var_1'(s('type.num.num',X30))),s('type.num.num',X31))) | ? [X28,X29] : s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X0),'const.wordLang.Load_1'(s('type.wordLang.exp'(X0),X28))),s('type.num.num',X29))) | ? [X24,X25,X26,X27] : s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X0),'const.wordLang.Shift_3'(s('type.asm.shift',X24),s('type.wordLang.exp'(X0),X25),s('type.wordLang.num_exp'(X0),X26))),s('type.num.num',X27))) | ? [X22,X23] : s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X0),'const.wordLang.Lookup_1'(s('type.wordLang.store_name',X22))),s('type.num.num',X23))) | ? [X19,X20,X21] : s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X0),'const.wordLang.Op_2'(s('type.asm.binop',X19),s('type.list.list'('type.wordLang.exp'(X0)),X20))),s('type.num.num',X21))) | ? [X17,X18] : s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X0),'const.wordLang.Const_1'(s('type.fcp.cart'(bool,X0),X17))),s('type.num.num',X18)))))),
  inference(flattening,[],[f39])).
fof(f39,plain,(
  ~! [X0] : ! [X1] : ((? [X15,X16] : s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X0),'const.wordLang.Const_1'(s('type.fcp.cart'(bool,X0),X15))),s('type.num.num',X16))) | ? [X13,X14] : s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X0),'const.wordLang.Var_1'(s('type.num.num',X13))),s('type.num.num',X14))) | ? [X11,X12] : s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X0),'const.wordLang.Lookup_1'(s('type.wordLang.store_name',X11))),s('type.num.num',X12))) | ? [X9,X10] : s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X0),'const.wordLang.Load_1'(s('type.wordLang.exp'(X0),X9))),s('type.num.num',X10))) | ? [X6,X7,X8] : s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X0),'const.wordLang.Op_2'(s('type.asm.binop',X6),s('type.list.list'('type.wordLang.exp'(X0)),X7))),s('type.num.num',X8))) | ? [X2,X3,X4,X5] : s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X0),'const.wordLang.Shift_3'(s('type.asm.shift',X2),s('type.wordLang.exp'(X0),X3),s('type.wordLang.num_exp'(X0),X4))),s('type.num.num',X5)))) => (? [X30,X31] : s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X0),'const.wordLang.Var_1'(s('type.num.num',X30))),s('type.num.num',X31))) | ? [X28,X29] : s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X0),'const.wordLang.Load_1'(s('type.wordLang.exp'(X0),X28))),s('type.num.num',X29))) | ? [X24,X25,X26,X27] : s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X0),'const.wordLang.Shift_3'(s('type.asm.shift',X24),s('type.wordLang.exp'(X0),X25),s('type.wordLang.num_exp'(X0),X26))),s('type.num.num',X27))) | ? [X22,X23] : s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X0),'const.wordLang.Lookup_1'(s('type.wordLang.store_name',X22))),s('type.num.num',X23))) | ? [X19,X20,X21] : s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X0),'const.wordLang.Op_2'(s('type.asm.binop',X19),s('type.list.list'('type.wordLang.exp'(X0)),X20))),s('type.num.num',X21))) | ? [X17,X18] : s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),X1) = s('type.pair.prod'('type.wordLang.exp'(X0),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X0),'const.wordLang.Const_1'(s('type.fcp.cart'(bool,X0),X17))),s('type.num.num',X18)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : ((? [X8,X9] : s('type.pair.prod'('type.wordLang.exp'(X6),'type.num.num'),X7) = s('type.pair.prod'('type.wordLang.exp'(X6),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X6),'const.wordLang.Const_1'(s('type.fcp.cart'(bool,X6),X8))),s('type.num.num',X9))) | ? [X10,X11] : s('type.pair.prod'('type.wordLang.exp'(X6),'type.num.num'),X7) = s('type.pair.prod'('type.wordLang.exp'(X6),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X6),'const.wordLang.Var_1'(s('type.num.num',X10))),s('type.num.num',X11))) | ? [X12,X13] : s('type.pair.prod'('type.wordLang.exp'(X6),'type.num.num'),X7) = s('type.pair.prod'('type.wordLang.exp'(X6),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X6),'const.wordLang.Lookup_1'(s('type.wordLang.store_name',X12))),s('type.num.num',X13))) | ? [X14,X11] : s('type.pair.prod'('type.wordLang.exp'(X6),'type.num.num'),X7) = s('type.pair.prod'('type.wordLang.exp'(X6),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X6),'const.wordLang.Load_1'(s('type.wordLang.exp'(X6),X14))),s('type.num.num',X11))) | ? [X15,X16,X11] : s('type.pair.prod'('type.wordLang.exp'(X6),'type.num.num'),X7) = s('type.pair.prod'('type.wordLang.exp'(X6),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X6),'const.wordLang.Op_2'(s('type.asm.binop',X15),s('type.list.list'('type.wordLang.exp'(X6)),X16))),s('type.num.num',X11))) | ? [X17,X14,X18,X11] : s('type.pair.prod'('type.wordLang.exp'(X6),'type.num.num'),X7) = s('type.pair.prod'('type.wordLang.exp'(X6),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X6),'const.wordLang.Shift_3'(s('type.asm.shift',X17),s('type.wordLang.exp'(X6),X14),s('type.wordLang.num_exp'(X6),X18))),s('type.num.num',X11)))) => (? [X10,X11] : s('type.pair.prod'('type.wordLang.exp'(X6),'type.num.num'),X7) = s('type.pair.prod'('type.wordLang.exp'(X6),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X6),'const.wordLang.Var_1'(s('type.num.num',X10))),s('type.num.num',X11))) | ? [X14,X11] : s('type.pair.prod'('type.wordLang.exp'(X6),'type.num.num'),X7) = s('type.pair.prod'('type.wordLang.exp'(X6),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X6),'const.wordLang.Load_1'(s('type.wordLang.exp'(X6),X14))),s('type.num.num',X11))) | ? [X17,X14,X18,X11] : s('type.pair.prod'('type.wordLang.exp'(X6),'type.num.num'),X7) = s('type.pair.prod'('type.wordLang.exp'(X6),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X6),'const.wordLang.Shift_3'(s('type.asm.shift',X17),s('type.wordLang.exp'(X6),X14),s('type.wordLang.num_exp'(X6),X18))),s('type.num.num',X11))) | ? [X12,X13] : s('type.pair.prod'('type.wordLang.exp'(X6),'type.num.num'),X7) = s('type.pair.prod'('type.wordLang.exp'(X6),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X6),'const.wordLang.Lookup_1'(s('type.wordLang.store_name',X12))),s('type.num.num',X13))) | ? [X15,X16,X11] : s('type.pair.prod'('type.wordLang.exp'(X6),'type.num.num'),X7) = s('type.pair.prod'('type.wordLang.exp'(X6),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X6),'const.wordLang.Op_2'(s('type.asm.binop',X15),s('type.list.list'('type.wordLang.exp'(X6)),X16))),s('type.num.num',X11))) | ? [X8,X9] : s('type.pair.prod'('type.wordLang.exp'(X6),'type.num.num'),X7) = s('type.pair.prod'('type.wordLang.exp'(X6),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X6),'const.wordLang.Const_1'(s('type.fcp.cart'(bool,X6),X8))),s('type.num.num',X9)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : ((? [X8,X9] : s('type.pair.prod'('type.wordLang.exp'(X6),'type.num.num'),X7) = s('type.pair.prod'('type.wordLang.exp'(X6),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X6),'const.wordLang.Const_1'(s('type.fcp.cart'(bool,X6),X8))),s('type.num.num',X9))) | ? [X10,X11] : s('type.pair.prod'('type.wordLang.exp'(X6),'type.num.num'),X7) = s('type.pair.prod'('type.wordLang.exp'(X6),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X6),'const.wordLang.Var_1'(s('type.num.num',X10))),s('type.num.num',X11))) | ? [X12,X13] : s('type.pair.prod'('type.wordLang.exp'(X6),'type.num.num'),X7) = s('type.pair.prod'('type.wordLang.exp'(X6),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X6),'const.wordLang.Lookup_1'(s('type.wordLang.store_name',X12))),s('type.num.num',X13))) | ? [X14,X11] : s('type.pair.prod'('type.wordLang.exp'(X6),'type.num.num'),X7) = s('type.pair.prod'('type.wordLang.exp'(X6),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X6),'const.wordLang.Load_1'(s('type.wordLang.exp'(X6),X14))),s('type.num.num',X11))) | ? [X15,X16,X11] : s('type.pair.prod'('type.wordLang.exp'(X6),'type.num.num'),X7) = s('type.pair.prod'('type.wordLang.exp'(X6),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X6),'const.wordLang.Op_2'(s('type.asm.binop',X15),s('type.list.list'('type.wordLang.exp'(X6)),X16))),s('type.num.num',X11))) | ? [X17,X14,X18,X11] : s('type.pair.prod'('type.wordLang.exp'(X6),'type.num.num'),X7) = s('type.pair.prod'('type.wordLang.exp'(X6),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X6),'const.wordLang.Shift_3'(s('type.asm.shift',X17),s('type.wordLang.exp'(X6),X14),s('type.wordLang.num_exp'(X6),X18))),s('type.num.num',X11)))) => (? [X10,X11] : s('type.pair.prod'('type.wordLang.exp'(X6),'type.num.num'),X7) = s('type.pair.prod'('type.wordLang.exp'(X6),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X6),'const.wordLang.Var_1'(s('type.num.num',X10))),s('type.num.num',X11))) | ? [X14,X11] : s('type.pair.prod'('type.wordLang.exp'(X6),'type.num.num'),X7) = s('type.pair.prod'('type.wordLang.exp'(X6),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X6),'const.wordLang.Load_1'(s('type.wordLang.exp'(X6),X14))),s('type.num.num',X11))) | ? [X17,X14,X18,X11] : s('type.pair.prod'('type.wordLang.exp'(X6),'type.num.num'),X7) = s('type.pair.prod'('type.wordLang.exp'(X6),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X6),'const.wordLang.Shift_3'(s('type.asm.shift',X17),s('type.wordLang.exp'(X6),X14),s('type.wordLang.num_exp'(X6),X18))),s('type.num.num',X11))) | ? [X12,X13] : s('type.pair.prod'('type.wordLang.exp'(X6),'type.num.num'),X7) = s('type.pair.prod'('type.wordLang.exp'(X6),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X6),'const.wordLang.Lookup_1'(s('type.wordLang.store_name',X12))),s('type.num.num',X13))) | ? [X15,X16,X11] : s('type.pair.prod'('type.wordLang.exp'(X6),'type.num.num'),X7) = s('type.pair.prod'('type.wordLang.exp'(X6),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X6),'const.wordLang.Op_2'(s('type.asm.binop',X15),s('type.list.list'('type.wordLang.exp'(X6)),X16))),s('type.num.num',X11))) | ? [X8,X9] : s('type.pair.prod'('type.wordLang.exp'(X6),'type.num.num'),X7) = s('type.pair.prod'('type.wordLang.exp'(X6),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(X6),'const.wordLang.Const_1'(s('type.fcp.cart'(bool,X6),X8))),s('type.num.num',X9)))))),
  file('thm.stack_removeProof.stack_removeProof_|49|9_prove_ltb','thm.stack_removeProof.stack_removeProof_|49|9_prove_ltb')).
fof(f3970,plain,(
  $false | $spl2),
  inference(subsumption_resolution,[],[f405,f225])).
fof(f225,plain,(
  ( ! [X15,X16] : (s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),sK13) != s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(sK12),'const.wordLang.Var_1'(s('type.num.num',X15))),s('type.num.num',X16)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f3971,plain,(
  $false | $spl4),
  inference(subsumption_resolution,[],[f407,f228])).
fof(f228,plain,(
  ( ! [X8,X7] : (s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),sK13) != s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(sK12),'const.wordLang.Lookup_1'(s('type.wordLang.store_name',X7))),s('type.num.num',X8)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f3976,plain,(
  $false | $spl6),
  inference(subsumption_resolution,[],[f409,f226])).
fof(f226,plain,(
  ( ! [X14,X13] : (s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),sK13) != s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(sK12),'const.wordLang.Load_1'(s('type.wordLang.exp'(sK12),X13))),s('type.num.num',X14)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f4302,plain,(
  $false | $spl8),
  inference(subsumption_resolution,[],[f411,f229])).
fof(f229,plain,(
  ( ! [X6,X4,X5] : (s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),sK13) != s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(sK12),'const.wordLang.Op_2'(s('type.asm.binop',X4),s('type.list.list'('type.wordLang.exp'(sK12)),X5))),s('type.num.num',X6)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f403,plain,(
  s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),sK13) = s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(sK12),'const.wordLang.Const_1'(s('type.fcp.cart'(bool,sK12),sK14))),s('type.num.num',sK15))) | $spl0),
  inference(cnf_transformation,[],[f403_D])).
fof(f403_D,plain,(
  s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),sK13) = s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(sK12),'const.wordLang.Const_1'(s('type.fcp.cart'(bool,sK12),sK14))),s('type.num.num',sK15))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f405,plain,(
  s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),sK13) = s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(sK12),'const.wordLang.Var_1'(s('type.num.num',sK16))),s('type.num.num',sK17))) | $spl2),
  inference(cnf_transformation,[],[f405_D])).
fof(f405_D,plain,(
  s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),sK13) = s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(sK12),'const.wordLang.Var_1'(s('type.num.num',sK16))),s('type.num.num',sK17))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f407,plain,(
  s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),sK13) = s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(sK12),'const.wordLang.Lookup_1'(s('type.wordLang.store_name',sK18))),s('type.num.num',sK19))) | $spl4),
  inference(cnf_transformation,[],[f407_D])).
fof(f407_D,plain,(
  s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),sK13) = s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(sK12),'const.wordLang.Lookup_1'(s('type.wordLang.store_name',sK18))),s('type.num.num',sK19))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f409,plain,(
  s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),sK13) = s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(sK12),'const.wordLang.Load_1'(s('type.wordLang.exp'(sK12),sK20))),s('type.num.num',sK21))) | $spl6),
  inference(cnf_transformation,[],[f409_D])).
fof(f409_D,plain,(
  s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),sK13) = s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(sK12),'const.wordLang.Load_1'(s('type.wordLang.exp'(sK12),sK20))),s('type.num.num',sK21))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f411,plain,(
  s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),sK13) = s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(sK12),'const.wordLang.Op_2'(s('type.asm.binop',sK22),s('type.list.list'('type.wordLang.exp'(sK12)),sK23))),s('type.num.num',sK24))) | $spl8),
  inference(cnf_transformation,[],[f411_D])).
fof(f411_D,plain,(
  s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),sK13) = s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(sK12),'const.wordLang.Op_2'(s('type.asm.binop',sK22),s('type.list.list'('type.wordLang.exp'(sK12)),sK23))),s('type.num.num',sK24))) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f413,plain,(
  s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),sK13) = s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(sK12),'const.wordLang.Shift_3'(s('type.asm.shift',sK25),s('type.wordLang.exp'(sK12),sK26),s('type.wordLang.num_exp'(sK12),sK27))),s('type.num.num',sK28))) | $spl10),
  inference(cnf_transformation,[],[f413_D])).
fof(f413_D,plain,(
  s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),sK13) = s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(sK12),'const.wordLang.Shift_3'(s('type.asm.shift',sK25),s('type.wordLang.exp'(sK12),sK26),s('type.wordLang.num_exp'(sK12),sK27))),s('type.num.num',sK28))) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f224,plain,(
  s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),sK13) = s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(sK12),'const.wordLang.Shift_3'(s('type.asm.shift',sK25),s('type.wordLang.exp'(sK12),sK26),s('type.wordLang.num_exp'(sK12),sK27))),s('type.num.num',sK28))) | s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),sK13) = s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(sK12),'const.wordLang.Op_2'(s('type.asm.binop',sK22),s('type.list.list'('type.wordLang.exp'(sK12)),sK23))),s('type.num.num',sK24))) | s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),sK13) = s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(sK12),'const.wordLang.Load_1'(s('type.wordLang.exp'(sK12),sK20))),s('type.num.num',sK21))) | s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),sK13) = s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(sK12),'const.wordLang.Lookup_1'(s('type.wordLang.store_name',sK18))),s('type.num.num',sK19))) | s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),sK13) = s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(sK12),'const.wordLang.Var_1'(s('type.num.num',sK16))),s('type.num.num',sK17))) | s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),sK13) = s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(sK12),'const.wordLang.Const_1'(s('type.fcp.cart'(bool,sK12),sK14))),s('type.num.num',sK15)))),
  inference(cnf_transformation,[],[f139])).
fof(f4408,plain,(
  $false | $spl10),
  inference(subsumption_resolution,[],[f413,f227])).
fof(f227,plain,(
  ( ! [X12,X10,X11,X9] : (s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),sK13) != s('type.pair.prod'('type.wordLang.exp'(sK12),'type.num.num'),'const.pair.,_2'(s('type.wordLang.exp'(sK12),'const.wordLang.Shift_3'(s('type.asm.shift',X9),s('type.wordLang.exp'(sK12),X10),s('type.wordLang.num_exp'(sK12),X11))),s('type.num.num',X12)))) )),
  inference(cnf_transformation,[],[f139])).
% SZS output end Proof for thm.stack_removeProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 352
% Passive clauses: 1309
% Generated clauses: 4178
% Final active clauses: 352
% Final passive clauses: 803
% Input formulas: 37
% Initial clauses: 174
% 
% Duplicate literals: 153
% Trivial inequalities: 13
% Fw subsumption resolutions: 296
% 
% Simple tautologies: 145
% Equational tautologies: 30
% Forward subsumptions: 2221
% 
% Binary resolution: 2548
% Factoring: 766
% Forward superposition: 112
% Backward superposition: 59
% Self superposition: 2
% Equality factoring: 2
% Equality resolution: 8
% 
% Split clauses: 95
% Split components: 195
% SAT solver clauses: 175
% SAT solver unit clauses: 12
% SAT solver binary clauses: 29
% SAT solver learnt clauses: 1
% 
% Sat splits: 95
% Sat splitting refutations: 6
% 
% TWLsolver clauses: 174
% TWLsolver calls for satisfiability: 146
% 
% Memory used [KB]: 2174
% Time elapsed: 0.094 s
% ------------------------------
% ------------------------------
% Success in time 0.11 s
