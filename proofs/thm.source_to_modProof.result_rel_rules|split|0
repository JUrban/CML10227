Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.source_to_modProof
% (14162)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 91
% Passive clauses: 1987
% Generated clauses: 16519
% Final active clauses: 81
% Final passive clauses: 1574
% Input formulas: 7
% Initial clauses: 27
% 
% Duplicate literals: 1155
% Trivial inequalities: 178
% Fw subsumption resolutions: 2974
% Fw demodulations: 338
% Bw demodulations: 3
% 
% Simple tautologies: 291
% Equational tautologies: 122
% Forward subsumptions: 6508
% 
% Binary resolution: 206
% Factoring: 2
% Forward superposition: 5748
% Backward superposition: 4950
% Self superposition: 423
% Equality factoring: 366
% Equality resolution: 18
% 
% Split clauses: 1250
% Split components: 2543
% SAT solver clauses: 3158
% SAT solver unit clauses: 39
% SAT solver binary clauses: 305
% 
% Sat splits: 1250
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 3141
% TWLsolver calls for satisfiability: 190
% 
% Memory used [KB]: 8059
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.source_to_modProof
% (14191)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 132
% Passive clauses: 467
% Generated clauses: 16875
% Final active clauses: 113
% Final passive clauses: 273
% Input formulas: 7
% Initial clauses: 27
% 
% Duplicate literals: 862
% Trivial inequalities: 262
% Fw subsumption resolutions: 1635
% Fw demodulations: 1918
% Bw demodulations: 56
% Condensations: 1055
% 
% Simple tautologies: 274
% Equational tautologies: 37
% Forward subsumptions: 9171
% Bw demodulations to eq. taut.: 12
% 
% Binary resolution: 180
% Factoring: 1
% Forward superposition: 5320
% Backward superposition: 3917
% Self superposition: 182
% Equality factoring: 87
% Equality resolution: 27
% 
% Split clauses: 142
% Split components: 305
% SAT solver clauses: 989
% SAT solver unit clauses: 29
% SAT solver binary clauses: 40
% 
% Sat splits: 142
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 988
% TWLsolver calls for satisfiability: 541
% 
% Memory used [KB]: 9210
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.source_to_modProof
% (14210)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 347
% Passive clauses: 2594
% Generated clauses: 140126
% Final active clauses: 64
% Final passive clauses: 208
% Input formulas: 7
% Initial clauses: 27
% 
% Duplicate literals: 7605
% Trivial inequalities: 1223
% Fw subsumption resolutions: 13515
% Fw demodulations: 10114
% Bw demodulations: 1225
% Condensations: 17585
% Global subsumptions: 72
% 
% Simple tautologies: 1375
% Equational tautologies: 542
% Forward subsumptions: 84706
% Fw demodulations to eq. taut.: 7
% Bw demodulations to eq. taut.: 39
% 
% Unit resulting resolution: 1614
% Factoring: 1
% Forward superposition: 33047
% Backward superposition: 27158
% Self superposition: 835
% Equality factoring: 459
% Equality resolution: 112
% 
% Split clauses: 490
% Split components: 993
% SAT solver clauses: 3770
% SAT solver unit clauses: 34
% SAT solver binary clauses: 139
% 
% Sat splits: 490
% Sat splitting refutations: 122
% 
% Memory used [KB]: 56928
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 32 next slice time: 32
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.source_to_modProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.source_to_modProof
% SZS output start Proof for thm.source_to_modProof
fof(f11925,plain,(
  $false),
  inference(subsumption_resolution,[],[f11924,f61])).
fof(f61,plain,(
  ~sP1(sK3,sK2,sK5,'const.semanticPrimitives.Rval_1'(s(sK2,sK6)),'const.semanticPrimitives.Rval_1'(s(sK3,sK7)),sK4)),
  inference(resolution,[],[f35,f52])).
fof(f52,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (p(s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X1,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X3),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X4),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5)))) | ~sP1(X1,X0,X3,X4,X5,X2)) )),
  inference(cnf_transformation,[],[f32])).
fof(f32,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((~p(s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X1,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X3),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X4),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5)))) | sP1(X1,X0,X3,X4,X5,X2)) & (~sP1(X1,X0,X3,X4,X5,X2) | p(s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X1,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X3),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X4),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5))))))),
  inference(nnf_transformation,[],[f24])).
fof(f24,plain,(
  ! [X0,X1,X2,X3,X4,X5] : (p(s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X1,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X3),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X4),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5)))) <=> sP1(X1,X0,X3,X4,X5,X2))),
  inference(definition_folding,[],[f18,f23,f22])).
fof(f22,plain,(
  ! [X1,X0,X2,X7,X9,X8] : (sP0(X1,X0,X2,X7,X9,X8) <=> ? [X13,X14] : (s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X8) = s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s(X0,X13))) & s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X9) = s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X14))) & p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X1,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X7))),s(X0,X13))),s(X1,X14))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP0])])).
fof(f23,plain,(
  ! [X1,X0,X3,X4,X5,X2] : (sP1(X1,X0,X3,X4,X5,X2) <=> ! [X6] : (? [X7,X8,X9] : ((sP0(X1,X0,X2,X7,X9,X8) | ? [X11,X12] : (s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X8) = s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rraise_1'(s('type.semanticPrimitives.v',X11))))) & s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X9) = s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X12))))) & p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X7),s('type.semanticPrimitives.v',X11),s('type.modSem.v',X12))))) | ? [X10] : (s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X8) = s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X10))))) & s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X9) = s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X10))))))) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X7))),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X8))),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X9))))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X3))),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X4))),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP1])])).
fof(f18,plain,(
  ! [X0,X1,X2,X3,X4,X5] : (p(s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X1,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X3),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X4),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5)))) <=> ! [X6] : (? [X7,X8,X9] : ((? [X13,X14] : (s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X8) = s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s(X0,X13))) & s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X9) = s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X14))) & p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X1,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X7))),s(X0,X13))),s(X1,X14))))) | ? [X11,X12] : (s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X8) = s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rraise_1'(s('type.semanticPrimitives.v',X11))))) & s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X9) = s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X12))))) & p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X7),s('type.semanticPrimitives.v',X11),s('type.modSem.v',X12))))) | ? [X10] : (s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X8) = s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X10))))) & s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X9) = s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X10))))))) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X7))),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X8))),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X9))))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X3))),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X4))),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5))))))),
  inference(ennf_transformation,[],[f12])).
fof(f12,plain,(
  ! [X0,X1,X2,X3,X4,X5] : (p(s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X1,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X3),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X4),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5)))) <=> ! [X6] : (! [X7,X8,X9] : ((? [X13,X14] : (s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X8) = s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s(X0,X13))) & s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X9) = s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X14))) & p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X1,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X7))),s(X0,X13))),s(X1,X14))))) | ? [X11,X12] : (s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X8) = s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rraise_1'(s('type.semanticPrimitives.v',X11))))) & s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X9) = s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X12))))) & p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X7),s('type.semanticPrimitives.v',X11),s('type.modSem.v',X12))))) | ? [X10] : (s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X8) = s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X10))))) & s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X9) = s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X10))))))) => p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X7))),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X8))),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X9))))) => p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X3))),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X4))),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5))))))),
  inference(flattening,[],[f11])).
fof(f11,plain,(
  ! [X0,X1] : ! [X2,X3,X4,X5] : (p(s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X1,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X3),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X4),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5)))) <=> ! [X6] : (! [X7,X8,X9] : ((? [X13,X14] : (s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X8) = s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s(X0,X13))) & s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X9) = s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X14))) & p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X1,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X7))),s(X0,X13))),s(X1,X14))))) | ? [X11,X12] : (s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X8) = s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rraise_1'(s('type.semanticPrimitives.v',X11))))) & s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X9) = s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X12))))) & p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X7),s('type.semanticPrimitives.v',X11),s('type.modSem.v',X12))))) | ? [X10] : (s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X8) = s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X10))))) & s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X9) = s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X10))))))) => p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X7))),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X8))),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X9))))) => p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X3))),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X4))),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5))))))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X6,X7] : ! [X5,X14,X15,X16] : (p(s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X6,fun(X7,bool))),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X14),s('type.semanticPrimitives.result'(X6,'type.semanticPrimitives.v'),X15),s('type.semanticPrimitives.result'(X7,'type.modSem.v'),X16)))) <=> ! [X17] : (! [X18,X19,X20] : ((? [X10,X11] : (s('type.semanticPrimitives.result'(X6,'type.semanticPrimitives.v'),X19) = s('type.semanticPrimitives.result'(X6,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s(X6,X10))) & s('type.semanticPrimitives.result'(X7,'type.modSem.v'),X20) = s('type.semanticPrimitives.result'(X7,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X7,X11))) & p(s(bool,happ(s(fun(X7,bool),happ(s(fun(X6,fun(X7,bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X6,fun(X7,bool))),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X18))),s(X6,X10))),s(X7,X11))))) | ? [X10,X11] : (s('type.semanticPrimitives.result'(X6,'type.semanticPrimitives.v'),X19) = s('type.semanticPrimitives.result'(X6,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rraise_1'(s('type.semanticPrimitives.v',X10))))) & s('type.semanticPrimitives.result'(X7,'type.modSem.v'),X20) = s('type.semanticPrimitives.result'(X7,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X11))))) & p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X18),s('type.semanticPrimitives.v',X10),s('type.modSem.v',X11))))) | ? [X21] : (s('type.semanticPrimitives.result'(X6,'type.semanticPrimitives.v'),X19) = s('type.semanticPrimitives.result'(X6,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X21))))) & s('type.semanticPrimitives.result'(X7,'type.modSem.v'),X20) = s('type.semanticPrimitives.result'(X7,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X21))))))) => p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X7,'type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X6,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X7,'type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.result'(X6,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X7,'type.modSem.v'),bool))),X17),s('type.list.list'('type.option.option'('type.modSem.v')),X18))),s('type.semanticPrimitives.result'(X6,'type.semanticPrimitives.v'),X19))),s('type.semanticPrimitives.result'(X7,'type.modSem.v'),X20))))) => p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X7,'type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X6,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X7,'type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.result'(X6,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X7,'type.modSem.v'),bool))),X17),s('type.list.list'('type.option.option'('type.modSem.v')),X14))),s('type.semanticPrimitives.result'(X6,'type.semanticPrimitives.v'),X15))),s('type.semanticPrimitives.result'(X7,'type.modSem.v'),X16))))))),
  file('thm.source_to_modProof.result_rel_rules|split|0','thm.source_to_modProof.result_rel_def')).
fof(f35,plain,(
  ~p(s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(sK2,fun(sK3,bool))),sK4),s('type.list.list'('type.option.option'('type.modSem.v')),sK5),s('type.semanticPrimitives.result'(sK2,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s(sK2,sK6))),s('type.semanticPrimitives.result'(sK3,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(sK3,sK7))))))),
  inference(cnf_transformation,[],[f25])).
fof(f25,plain,(
  p(s(bool,happ(s(fun(sK3,bool),happ(s(fun(sK2,fun(sK3,bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(sK2,fun(sK3,bool))),sK4),s('type.list.list'('type.option.option'('type.modSem.v')),sK5))),s(sK2,sK6))),s(sK3,sK7)))) & ~p(s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(sK2,fun(sK3,bool))),sK4),s('type.list.list'('type.option.option'('type.modSem.v')),sK5),s('type.semanticPrimitives.result'(sK2,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s(sK2,sK6))),s('type.semanticPrimitives.result'(sK3,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(sK3,sK7))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK2,sK3,sK4,sK5,sK6,sK7])],[f17])).
fof(f17,plain,(
  ? [X0,X1,X2,X3,X4,X5] : (p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X1,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X3))),s(X0,X4))),s(X1,X5)))) & ~p(s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X1,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X3),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s(X0,X4))),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X5)))))))),
  inference(ennf_transformation,[],[f10])).
fof(f10,plain,(
  ~! [X0,X1,X2,X3,X4,X5] : (p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X1,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X3))),s(X0,X4))),s(X1,X5)))) => p(s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X1,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X3),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s(X0,X4))),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X5)))))))),
  inference(flattening,[],[f9])).
fof(f9,plain,(
  ~! [X0,X1] : ! [X2,X3,X4,X5] : (p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X1,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X3))),s(X0,X4))),s(X1,X5)))) => p(s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X1,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X3),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s(X0,X4))),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X5)))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9,X10,X11] : (p(s(bool,happ(s(fun(X7,bool),happ(s(fun(X6,fun(X7,bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X6,fun(X7,bool))),X8),s('type.list.list'('type.option.option'('type.modSem.v')),X9))),s(X6,X10))),s(X7,X11)))) => p(s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X6,fun(X7,bool))),X8),s('type.list.list'('type.option.option'('type.modSem.v')),X9),s('type.semanticPrimitives.result'(X6,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s(X6,X10))),s('type.semanticPrimitives.result'(X7,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X7,X11)))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9,X10,X11] : (p(s(bool,happ(s(fun(X7,bool),happ(s(fun(X6,fun(X7,bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X6,fun(X7,bool))),X8),s('type.list.list'('type.option.option'('type.modSem.v')),X9))),s(X6,X10))),s(X7,X11)))) => p(s(bool,'const.source_to_modProof.result_rel_4'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X6,fun(X7,bool))),X8),s('type.list.list'('type.option.option'('type.modSem.v')),X9),s('type.semanticPrimitives.result'(X6,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s(X6,X10))),s('type.semanticPrimitives.result'(X7,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X7,X11)))))))),
  file('thm.source_to_modProof.result_rel_rules|split|0','thm.source_to_modProof.result_rel_rules|split|0')).
fof(f11924,plain,(
  sP1(sK3,sK2,sK5,'const.semanticPrimitives.Rval_1'(s(sK2,sK6)),'const.semanticPrimitives.Rval_1'(s(sK3,sK7)),sK4)),
  inference(equality_resolution,[],[f11917])).
fof(f11917,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'(sK2,'type.semanticPrimitives.v'),X0) != s('type.semanticPrimitives.result'(sK2,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s(sK2,sK6))) | sP1(sK3,sK2,sK5,X0,'const.semanticPrimitives.Rval_1'(s(sK3,sK7)),sK4)) )),
  inference(equality_resolution,[],[f1817])).
fof(f1817,plain,(
  ( ! [X0,X1] : (s('type.semanticPrimitives.result'(sK3,'type.modSem.v'),X1) != s('type.semanticPrimitives.result'(sK3,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(sK3,sK7))) | sP1(sK3,sK2,sK5,X0,X1,sK4) | s('type.semanticPrimitives.result'(sK2,'type.semanticPrimitives.v'),X0) != s('type.semanticPrimitives.result'(sK2,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s(sK2,sK6)))) )),
  inference(resolution,[],[f1810,f75])).
fof(f75,plain,(
  ( ! [X0,X1] : (sP0(sK3,sK2,sK4,sK5,X0,X1) | s('type.semanticPrimitives.result'(sK3,'type.modSem.v'),X0) != s('type.semanticPrimitives.result'(sK3,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(sK3,sK7))) | s('type.semanticPrimitives.result'(sK2,'type.semanticPrimitives.v'),X1) != s('type.semanticPrimitives.result'(sK2,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s(sK2,sK6)))) )),
  inference(resolution,[],[f34,f50])).
fof(f50,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (sP0(X0,X1,X2,X3,X4,X5) | ~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X1,fun(X0,bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X1,fun(X0,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X3))),s(X1,X6))),s(X0,X7)))) | s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4) != s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X7))) | s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),X5) != s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s(X1,X6)))) )),
  inference(cnf_transformation,[],[f31])).
fof(f31,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((~sP0(X0,X1,X2,X3,X4,X5) | (s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),X5) = s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s(X1,sK15(X5,X4,X3,X2,X1,X0)))) & s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,sK16(X5,X4,X3,X2,X1,X0)))) & p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X1,fun(X0,bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X1,fun(X0,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X3))),s(X1,sK15(X5,X4,X3,X2,X1,X0)))),s(X0,sK16(X5,X4,X3,X2,X1,X0))))))) & (! [X6,X7] : (s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),X5) != s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s(X1,X6))) | s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4) != s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X7))) | ~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X1,fun(X0,bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X1,fun(X0,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X3))),s(X1,X6))),s(X0,X7))))) | sP0(X0,X1,X2,X3,X4,X5)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK15,sK16])],[f30])).
fof(f30,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((~sP0(X0,X1,X2,X3,X4,X5) | ? [X8,X9] : (s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),X5) = s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s(X1,X8))) & s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X9))) & p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X1,fun(X0,bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X1,fun(X0,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X3))),s(X1,X8))),s(X0,X9)))))) & (! [X6,X7] : (s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),X5) != s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s(X1,X6))) | s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4) != s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X0,X7))) | ~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X1,fun(X0,bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X1,fun(X0,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X3))),s(X1,X6))),s(X0,X7))))) | sP0(X0,X1,X2,X3,X4,X5)))),
  inference(rectify,[],[f29])).
fof(f29,plain,(
  ! [X1,X0,X2,X7,X9,X8] : ((~sP0(X1,X0,X2,X7,X9,X8) | ? [X13,X14] : (s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X8) = s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s(X0,X13))) & s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X9) = s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X14))) & p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X1,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X7))),s(X0,X13))),s(X1,X14)))))) & (! [X13,X14] : (s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X8) != s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s(X0,X13))) | s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X9) != s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s(X1,X14))) | ~p(s(bool,happ(s(fun(X1,bool),happ(s(fun(X0,fun(X1,bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(X0,fun(X1,bool))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),X7))),s(X0,X13))),s(X1,X14))))) | sP0(X1,X0,X2,X7,X9,X8)))),
  inference(nnf_transformation,[],[f22])).
fof(f34,plain,(
  p(s(bool,happ(s(fun(sK3,bool),happ(s(fun(sK2,fun(sK3,bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun(sK2,fun(sK3,bool))),sK4),s('type.list.list'('type.option.option'('type.modSem.v')),sK5))),s(sK2,sK6))),s(sK3,sK7))))),
  inference(cnf_transformation,[],[f25])).
fof(f1810,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP0(X0,X1,X5,X2,X4,X3) | sP1(X0,X1,X2,X3,X4,X5)) )),
  inference(duplicate_literal_removal,[],[f1779])).
fof(f1779,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP1(X0,X1,X2,X3,X4,X5) | ~sP0(X0,X1,X5,X2,X4,X3) | sP1(X0,X1,X2,X3,X4,X5)) )),
  inference(resolution,[],[f43,f46])).
fof(f46,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP1(X0,X1,X2,X3,X4,X5) | ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool))),sK14(X5,X4,X3,X2,X1,X0)),s('type.list.list'('type.option.option'('type.modSem.v')),X2))),s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),X3))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4))))) )),
  inference(cnf_transformation,[],[f28])).
fof(f28,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((~sP1(X0,X1,X2,X3,X4,X5) | ! [X13] : (((sP0(X0,X1,X5,sK8(X13,X5,X4,X3,X2,X1,X0),sK10(X13,X5,X4,X3,X2,X1,X0),sK9(X13,X5,X4,X3,X2,X1,X0)) | (s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),sK9(X13,X5,X4,X3,X2,X1,X0)) = s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rraise_1'(s('type.semanticPrimitives.v',sK11(X13,X5,X4,X3,X2,X1,X0)))))) & s('type.semanticPrimitives.result'(X0,'type.modSem.v'),sK10(X13,X5,X4,X3,X2,X1,X0)) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',sK12(X13,X5,X4,X3,X2,X1,X0)))))) & p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),sK8(X13,X5,X4,X3,X2,X1,X0)),s('type.semanticPrimitives.v',sK11(X13,X5,X4,X3,X2,X1,X0)),s('type.modSem.v',sK12(X13,X5,X4,X3,X2,X1,X0)))))) | (s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),sK9(X13,X5,X4,X3,X2,X1,X0)) = s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK13(X13,X5,X4,X3,X2,X1,X0)))))) & s('type.semanticPrimitives.result'(X0,'type.modSem.v'),sK10(X13,X5,X4,X3,X2,X1,X0)) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK13(X13,X5,X4,X3,X2,X1,X0)))))))) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool))),X13),s('type.list.list'('type.option.option'('type.modSem.v')),sK8(X13,X5,X4,X3,X2,X1,X0)))),s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),sK9(X13,X5,X4,X3,X2,X1,X0)))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),sK10(X13,X5,X4,X3,X2,X1,X0)))))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool))),X13),s('type.list.list'('type.option.option'('type.modSem.v')),X2))),s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),X3))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4)))))) & ((! [X7,X8,X9] : ((~sP0(X0,X1,X5,X7,X9,X8) & ! [X11,X12] : (s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),X8) != s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rraise_1'(s('type.semanticPrimitives.v',X11))))) | s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X9) != s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X12))))) | ~p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X7),s('type.semanticPrimitives.v',X11),s('type.modSem.v',X12))))) & ! [X10] : (s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),X8) != s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X10))))) | s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X9) != s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X10))))))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool))),sK14(X5,X4,X3,X2,X1,X0)),s('type.list.list'('type.option.option'('type.modSem.v')),X7))),s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),X8))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X9))))) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool))),sK14(X5,X4,X3,X2,X1,X0)),s('type.list.list'('type.option.option'('type.modSem.v')),X2))),s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),X3))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4))))) | sP1(X0,X1,X2,X3,X4,X5)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK8,sK9,sK10,sK11,sK12,sK13,sK14])],[f27])).
fof(f27,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((~sP1(X0,X1,X2,X3,X4,X5) | ! [X13] : (? [X14,X15,X16] : ((sP0(X0,X1,X5,X14,X16,X15) | ? [X18,X19] : (s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),X15) = s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rraise_1'(s('type.semanticPrimitives.v',X18))))) & s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X16) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X19))))) & p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X14),s('type.semanticPrimitives.v',X18),s('type.modSem.v',X19))))) | ? [X17] : (s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),X15) = s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X17))))) & s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X16) = s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X17))))))) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool))),X13),s('type.list.list'('type.option.option'('type.modSem.v')),X14))),s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),X15))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X16))))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool))),X13),s('type.list.list'('type.option.option'('type.modSem.v')),X2))),s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),X3))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4)))))) & (? [X6] : (! [X7,X8,X9] : ((~sP0(X0,X1,X5,X7,X9,X8) & ! [X11,X12] : (s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),X8) != s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rraise_1'(s('type.semanticPrimitives.v',X11))))) | s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X9) != s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X12))))) | ~p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X7),s('type.semanticPrimitives.v',X11),s('type.modSem.v',X12))))) & ! [X10] : (s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),X8) != s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X10))))) | s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X9) != s('type.semanticPrimitives.result'(X0,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X10))))))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X7))),s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),X8))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X9))))) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X2))),s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),X3))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X4))))) | sP1(X0,X1,X2,X3,X4,X5)))),
  inference(rectify,[],[f26])).
fof(f26,plain,(
  ! [X1,X0,X3,X4,X5,X2] : ((~sP1(X1,X0,X3,X4,X5,X2) | ! [X6] : (? [X7,X8,X9] : ((sP0(X1,X0,X2,X7,X9,X8) | ? [X11,X12] : (s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X8) = s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rraise_1'(s('type.semanticPrimitives.v',X11))))) & s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X9) = s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X12))))) & p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X7),s('type.semanticPrimitives.v',X11),s('type.modSem.v',X12))))) | ? [X10] : (s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X8) = s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X10))))) & s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X9) = s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X10))))))) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X7))),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X8))),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X9))))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X3))),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X4))),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5)))))) & (? [X6] : (! [X7,X8,X9] : ((~sP0(X1,X0,X2,X7,X9,X8) & ! [X11,X12] : (s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X8) != s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rraise_1'(s('type.semanticPrimitives.v',X11))))) | s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X9) != s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.modSem.v',X12))))) | ~p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X7),s('type.semanticPrimitives.v',X11),s('type.modSem.v',X12))))) & ! [X10] : (s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X8) != s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.semanticPrimitives.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X10))))) | s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X9) != s('type.semanticPrimitives.result'(X1,'type.modSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.modSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X10))))))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X7))),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X8))),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X9))))) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X1,'type.modSem.v'),bool))),X6),s('type.list.list'('type.option.option'('type.modSem.v')),X3))),s('type.semanticPrimitives.result'(X0,'type.semanticPrimitives.v'),X4))),s('type.semanticPrimitives.result'(X1,'type.modSem.v'),X5))))) | sP1(X1,X0,X3,X4,X5,X2)))),
  inference(nnf_transformation,[],[f23])).
fof(f43,plain,(
  ( ! [X4,X2,X0,X8,X7,X5,X3,X1,X9] : (sP1(X0,X1,X2,X3,X4,X5) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool),happ(s(fun('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool)),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),fun('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),fun('type.semanticPrimitives.result'(X0,'type.modSem.v'),bool))),sK14(X5,X4,X3,X2,X1,X0)),s('type.list.list'('type.option.option'('type.modSem.v')),X7))),s('type.semanticPrimitives.result'(X1,'type.semanticPrimitives.v'),X8))),s('type.semanticPrimitives.result'(X0,'type.modSem.v'),X9)))) | ~sP0(X0,X1,X5,X7,X9,X8)) )),
  inference(cnf_transformation,[],[f28])).
% SZS output end Proof for thm.source_to_modProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 180
% Passive clauses: 4295
% Generated clauses: 11664
% Final active clauses: 128
% Final passive clauses: 3720
% Input formulas: 7
% Initial clauses: 27
% 
% Selected by SInE selection: 7
% SInE iterations: 1
% 
% Duplicate literals: 575
% Trivial inequalities: 206
% Fw subsumption resolutions: 1871
% Fw demodulations: 72
% Bw demodulations: 44
% 
% Simple tautologies: 442
% Equational tautologies: 40
% Forward subsumptions: 3877
% 
% Binary resolution: 2065
% Forward superposition: 4733
% Backward superposition: 1673
% Self superposition: 128
% Equality factoring: 100
% Equality resolution: 42
% 
% Split clauses: 515
% Split components: 1037
% SAT solver clauses: 528
% SAT solver unit clauses: 7
% SAT solver binary clauses: 73
% 
% Sat splits: 515
% Sat splitting refutations: 9
% 
% Memory used [KB]: 7803
% Time elapsed: 0.679 s
% ------------------------------
% ------------------------------
% Success in time 12.411 s
