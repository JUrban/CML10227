Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.closSem
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.closSem
% SZS output start Proof for thm.closSem
fof(f4639,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f4638,f223,f421,f419,f417,f415,f413,f411,f409,f407,f405,f4636,f4635,f4634,f4633,f4632,f4631,f4630,f4637])).
fof(f4637,plain,(
  $false | $spl6),
  inference(subsumption_resolution,[],[f411,f228])).
fof(f228,plain,(
  ( ! [X17,X18] : (s('type.closSem.v',sK12) != s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X17),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X18),s('type.list.list'('type.closSem.v'),'const.list.NIL_0')))))) )),
  inference(cnf_transformation,[],[f138])).
fof(f138,plain,(
  (s('type.closSem.v',sK12) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',sK13))) | s('type.closSem.v',sK12) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK14))) | s('type.closSem.v',sK12) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',sK15),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'))) | s('type.closSem.v',sK12) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',sK16),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',sK17),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'))))) | s('type.closSem.v',sK12) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',sK18),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',sK19),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',sK20),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'))))))) | s('type.closSem.v',sK12) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',sK21),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',sK22),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',sK23),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',sK24),s('type.list.list'('type.closSem.v'),sK25))))))))) | s('type.closSem.v',sK12) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',sK26))) | s('type.closSem.v',sK12) = s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),sK27),s('type.list.list'('type.closSem.v'),sK28),s('type.list.list'('type.closSem.v'),sK29),s('type.num.num',sK30),s('type.closLang.exp',sK31))) | s('type.closSem.v',sK12) = s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),sK32),s('type.list.list'('type.closSem.v'),sK33),s('type.list.list'('type.closSem.v'),sK34),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK35),s('type.num.num',sK36)))) & ! [X24] : s('type.closSem.v',sK12) != s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X24),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'))) & ! [X21,X22,X23] : s('type.closSem.v',sK12) != s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X21),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X22),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X23),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'))))))) & ! [X20] : s('type.closSem.v',sK12) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X20))) & ! [X19] : s('type.closSem.v',sK12) != s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X19))) & ! [X17,X18] : s('type.closSem.v',sK12) != s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X17),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X18),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'))))) & ! [X12,X13,X14,X15,X16] : s('type.closSem.v',sK12) != s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X12),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X13),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X14),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X15),s('type.list.list'('type.closSem.v'),X16))))))))) & ! [X11] : s('type.closSem.v',sK12) != s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X11))) & ! [X6,X7,X8,X9,X10] : s('type.closSem.v',sK12) != s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X6),s('type.list.list'('type.closSem.v'),X7),s('type.list.list'('type.closSem.v'),X8),s('type.num.num',X9),s('type.closLang.exp',X10))) & ! [X1,X2,X3,X4,X5] : s('type.closSem.v',sK12) != s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X1),s('type.list.list'('type.closSem.v'),X2),s('type.list.list'('type.closSem.v'),X3),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X4),s('type.num.num',X5)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14,sK15,sK16,sK17,sK18,sK19,sK20,sK21,sK22,sK23,sK24,sK25,sK26,sK27,sK28,sK29,sK30,sK31,sK32,sK33,sK34,sK35,sK36])],[f137])).
fof(f137,plain,(
  ? [X0] : ((? [X48] : s('type.closSem.v',X0) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X48))) | ? [X47] : s('type.closSem.v',X0) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X47))) | ? [X46] : s('type.closSem.v',X0) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X46),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'))) | ? [X44,X45] : s('type.closSem.v',X0) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X44),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X45),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'))))) | ? [X41,X42,X43] : s('type.closSem.v',X0) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X41),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X42),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X43),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'))))))) | ? [X36,X37,X38,X39,X40] : s('type.closSem.v',X0) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X36),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X37),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X38),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X39),s('type.list.list'('type.closSem.v'),X40))))))))) | ? [X35] : s('type.closSem.v',X0) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X35))) | ? [X30,X31,X32,X33,X34] : s('type.closSem.v',X0) = s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X30),s('type.list.list'('type.closSem.v'),X31),s('type.list.list'('type.closSem.v'),X32),s('type.num.num',X33),s('type.closLang.exp',X34))) | ? [X25,X26,X27,X28,X29] : s('type.closSem.v',X0) = s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X25),s('type.list.list'('type.closSem.v'),X26),s('type.list.list'('type.closSem.v'),X27),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X28),s('type.num.num',X29)))) & ! [X24] : s('type.closSem.v',X0) != s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X24),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'))) & ! [X21,X22,X23] : s('type.closSem.v',X0) != s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X21),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X22),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X23),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'))))))) & ! [X20] : s('type.closSem.v',X0) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X20))) & ! [X19] : s('type.closSem.v',X0) != s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X19))) & ! [X17,X18] : s('type.closSem.v',X0) != s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X17),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X18),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'))))) & ! [X12,X13,X14,X15,X16] : s('type.closSem.v',X0) != s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X12),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X13),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X14),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X15),s('type.list.list'('type.closSem.v'),X16))))))))) & ! [X11] : s('type.closSem.v',X0) != s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X11))) & ! [X6,X7,X8,X9,X10] : s('type.closSem.v',X0) != s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X6),s('type.list.list'('type.closSem.v'),X7),s('type.list.list'('type.closSem.v'),X8),s('type.num.num',X9),s('type.closLang.exp',X10))) & ! [X1,X2,X3,X4,X5] : s('type.closSem.v',X0) != s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X1),s('type.list.list'('type.closSem.v'),X2),s('type.list.list'('type.closSem.v'),X3),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X4),s('type.num.num',X5))))),
  inference(rectify,[],[f97])).
fof(f97,plain,(
  ? [X0] : ((? [X24] : s('type.closSem.v',X0) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X24))) | ? [X23] : s('type.closSem.v',X0) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X23))) | ? [X22] : s('type.closSem.v',X0) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X22),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'))) | ? [X20,X21] : s('type.closSem.v',X0) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X20),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X21),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'))))) | ? [X17,X18,X19] : s('type.closSem.v',X0) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X17),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X18),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X19),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'))))))) | ? [X12,X13,X14,X15,X16] : s('type.closSem.v',X0) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X12),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X13),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X14),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X15),s('type.list.list'('type.closSem.v'),X16))))))))) | ? [X11] : s('type.closSem.v',X0) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X11))) | ? [X6,X7,X8,X9,X10] : s('type.closSem.v',X0) = s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X6),s('type.list.list'('type.closSem.v'),X7),s('type.list.list'('type.closSem.v'),X8),s('type.num.num',X9),s('type.closLang.exp',X10))) | ? [X1,X2,X3,X4,X5] : s('type.closSem.v',X0) = s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X1),s('type.list.list'('type.closSem.v'),X2),s('type.list.list'('type.closSem.v'),X3),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X4),s('type.num.num',X5)))) & ! [X48] : s('type.closSem.v',X0) != s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X48),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'))) & ! [X45,X46,X47] : s('type.closSem.v',X0) != s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X45),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X46),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X47),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'))))))) & ! [X44] : s('type.closSem.v',X0) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X44))) & ! [X43] : s('type.closSem.v',X0) != s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X43))) & ! [X41,X42] : s('type.closSem.v',X0) != s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X41),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X42),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'))))) & ! [X36,X37,X38,X39,X40] : s('type.closSem.v',X0) != s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X36),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X37),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X38),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X39),s('type.list.list'('type.closSem.v'),X40))))))))) & ! [X35] : s('type.closSem.v',X0) != s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X35))) & ! [X30,X31,X32,X33,X34] : s('type.closSem.v',X0) != s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X30),s('type.list.list'('type.closSem.v'),X31),s('type.list.list'('type.closSem.v'),X32),s('type.num.num',X33),s('type.closLang.exp',X34))) & ! [X25,X26,X27,X28,X29] : s('type.closSem.v',X0) != s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X25),s('type.list.list'('type.closSem.v'),X26),s('type.list.list'('type.closSem.v'),X27),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X28),s('type.num.num',X29))))),
  inference(flattening,[],[f96])).
fof(f96,plain,(
  ? [X0] : ((? [X24] : s('type.closSem.v',X0) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X24))) | ? [X23] : s('type.closSem.v',X0) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X23))) | ? [X22] : s('type.closSem.v',X0) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X22),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'))) | ? [X20,X21] : s('type.closSem.v',X0) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X20),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X21),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'))))) | ? [X17,X18,X19] : s('type.closSem.v',X0) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X17),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X18),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X19),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'))))))) | ? [X12,X13,X14,X15,X16] : s('type.closSem.v',X0) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X12),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X13),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X14),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X15),s('type.list.list'('type.closSem.v'),X16))))))))) | ? [X11] : s('type.closSem.v',X0) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X11))) | ? [X6,X7,X8,X9,X10] : s('type.closSem.v',X0) = s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X6),s('type.list.list'('type.closSem.v'),X7),s('type.list.list'('type.closSem.v'),X8),s('type.num.num',X9),s('type.closLang.exp',X10))) | ? [X1,X2,X3,X4,X5] : s('type.closSem.v',X0) = s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X1),s('type.list.list'('type.closSem.v'),X2),s('type.list.list'('type.closSem.v'),X3),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X4),s('type.num.num',X5)))) & (! [X48] : s('type.closSem.v',X0) != s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X48),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'))) & ! [X45,X46,X47] : s('type.closSem.v',X0) != s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X45),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X46),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X47),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'))))))) & ! [X44] : s('type.closSem.v',X0) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X44))) & ! [X43] : s('type.closSem.v',X0) != s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X43))) & ! [X41,X42] : s('type.closSem.v',X0) != s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X41),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X42),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'))))) & ! [X36,X37,X38,X39,X40] : s('type.closSem.v',X0) != s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X36),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X37),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X38),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X39),s('type.list.list'('type.closSem.v'),X40))))))))) & ! [X35] : s('type.closSem.v',X0) != s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X35))) & ! [X30,X31,X32,X33,X34] : s('type.closSem.v',X0) != s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X30),s('type.list.list'('type.closSem.v'),X31),s('type.list.list'('type.closSem.v'),X32),s('type.num.num',X33),s('type.closLang.exp',X34))) & ! [X25,X26,X27,X28,X29] : s('type.closSem.v',X0) != s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X25),s('type.list.list'('type.closSem.v'),X26),s('type.list.list'('type.closSem.v'),X27),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X28),s('type.num.num',X29)))))),
  inference(ennf_transformation,[],[f39])).
fof(f39,plain,(
  ~! [X0] : ((? [X24] : s('type.closSem.v',X0) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X24))) | ? [X23] : s('type.closSem.v',X0) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X23))) | ? [X22] : s('type.closSem.v',X0) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X22),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'))) | ? [X20,X21] : s('type.closSem.v',X0) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X20),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X21),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'))))) | ? [X17,X18,X19] : s('type.closSem.v',X0) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X17),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X18),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X19),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'))))))) | ? [X12,X13,X14,X15,X16] : s('type.closSem.v',X0) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X12),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X13),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X14),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X15),s('type.list.list'('type.closSem.v'),X16))))))))) | ? [X11] : s('type.closSem.v',X0) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X11))) | ? [X6,X7,X8,X9,X10] : s('type.closSem.v',X0) = s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X6),s('type.list.list'('type.closSem.v'),X7),s('type.list.list'('type.closSem.v'),X8),s('type.num.num',X9),s('type.closLang.exp',X10))) | ? [X1,X2,X3,X4,X5] : s('type.closSem.v',X0) = s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X1),s('type.list.list'('type.closSem.v'),X2),s('type.list.list'('type.closSem.v'),X3),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X4),s('type.num.num',X5)))) => (? [X48] : s('type.closSem.v',X0) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X48),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'))) | ? [X45,X46,X47] : s('type.closSem.v',X0) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X45),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X46),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X47),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'))))))) | ? [X44] : s('type.closSem.v',X0) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X44))) | ? [X43] : s('type.closSem.v',X0) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X43))) | ? [X41,X42] : s('type.closSem.v',X0) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X41),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X42),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'))))) | ? [X36,X37,X38,X39,X40] : s('type.closSem.v',X0) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X36),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X37),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X38),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X39),s('type.list.list'('type.closSem.v'),X40))))))))) | ? [X35] : s('type.closSem.v',X0) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X35))) | ? [X30,X31,X32,X33,X34] : s('type.closSem.v',X0) = s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X30),s('type.list.list'('type.closSem.v'),X31),s('type.list.list'('type.closSem.v'),X32),s('type.num.num',X33),s('type.closLang.exp',X34))) | ? [X25,X26,X27,X28,X29] : s('type.closSem.v',X0) = s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X25),s('type.list.list'('type.closSem.v'),X26),s('type.list.list'('type.closSem.v'),X27),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X28),s('type.num.num',X29)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ((? [X7] : s('type.closSem.v',X6) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X7))) | ? [X8] : s('type.closSem.v',X6) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X8))) | ? [X9] : s('type.closSem.v',X6) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X9),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'))) | ? [X10,X11] : s('type.closSem.v',X6) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X10),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X11),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'))))) | ? [X9,X12,X13] : s('type.closSem.v',X6) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X9),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X12),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X13),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'))))))) | ? [X10,X11,X14,X15,X16] : s('type.closSem.v',X6) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X10),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X11),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X14),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X15),s('type.list.list'('type.closSem.v'),X16))))))))) | ? [X17] : s('type.closSem.v',X6) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X17))) | ? [X18,X19,X20,X21,X22] : s('type.closSem.v',X6) = s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X18),s('type.list.list'('type.closSem.v'),X19),s('type.list.list'('type.closSem.v'),X20),s('type.num.num',X21),s('type.closLang.exp',X22))) | ? [X23,X24,X25,X26,X27] : s('type.closSem.v',X6) = s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X23),s('type.list.list'('type.closSem.v'),X24),s('type.list.list'('type.closSem.v'),X25),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X26),s('type.num.num',X27)))) => (? [X9] : s('type.closSem.v',X6) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X9),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'))) | ? [X9,X12,X13] : s('type.closSem.v',X6) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X9),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X12),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X13),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'))))))) | ? [X7] : s('type.closSem.v',X6) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X7))) | ? [X8] : s('type.closSem.v',X6) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X8))) | ? [X10,X11] : s('type.closSem.v',X6) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X10),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X11),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'))))) | ? [X10,X11,X14,X15,X16] : s('type.closSem.v',X6) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X10),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X11),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X14),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X15),s('type.list.list'('type.closSem.v'),X16))))))))) | ? [X17] : s('type.closSem.v',X6) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X17))) | ? [X18,X19,X20,X21,X22] : s('type.closSem.v',X6) = s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X18),s('type.list.list'('type.closSem.v'),X19),s('type.list.list'('type.closSem.v'),X20),s('type.num.num',X21),s('type.closLang.exp',X22))) | ? [X23,X24,X25,X26,X27] : s('type.closSem.v',X6) = s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X23),s('type.list.list'('type.closSem.v'),X24),s('type.list.list'('type.closSem.v'),X25),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X26),s('type.num.num',X27)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ((? [X7] : s('type.closSem.v',X6) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X7))) | ? [X8] : s('type.closSem.v',X6) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X8))) | ? [X9] : s('type.closSem.v',X6) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X9),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'))) | ? [X10,X11] : s('type.closSem.v',X6) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X10),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X11),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'))))) | ? [X9,X12,X13] : s('type.closSem.v',X6) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X9),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X12),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X13),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'))))))) | ? [X10,X11,X14,X15,X16] : s('type.closSem.v',X6) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X10),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X11),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X14),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X15),s('type.list.list'('type.closSem.v'),X16))))))))) | ? [X17] : s('type.closSem.v',X6) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X17))) | ? [X18,X19,X20,X21,X22] : s('type.closSem.v',X6) = s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X18),s('type.list.list'('type.closSem.v'),X19),s('type.list.list'('type.closSem.v'),X20),s('type.num.num',X21),s('type.closLang.exp',X22))) | ? [X23,X24,X25,X26,X27] : s('type.closSem.v',X6) = s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X23),s('type.list.list'('type.closSem.v'),X24),s('type.list.list'('type.closSem.v'),X25),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X26),s('type.num.num',X27)))) => (? [X9] : s('type.closSem.v',X6) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X9),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'))) | ? [X9,X12,X13] : s('type.closSem.v',X6) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X9),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X12),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X13),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'))))))) | ? [X7] : s('type.closSem.v',X6) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X7))) | ? [X8] : s('type.closSem.v',X6) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X8))) | ? [X10,X11] : s('type.closSem.v',X6) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X10),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X11),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'))))) | ? [X10,X11,X14,X15,X16] : s('type.closSem.v',X6) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X10),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X11),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X14),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X15),s('type.list.list'('type.closSem.v'),X16))))))))) | ? [X17] : s('type.closSem.v',X6) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X17))) | ? [X18,X19,X20,X21,X22] : s('type.closSem.v',X6) = s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X18),s('type.list.list'('type.closSem.v'),X19),s('type.list.list'('type.closSem.v'),X20),s('type.num.num',X21),s('type.closLang.exp',X22))) | ? [X23,X24,X25,X26,X27] : s('type.closSem.v',X6) = s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X23),s('type.list.list'('type.closSem.v'),X24),s('type.list.list'('type.closSem.v'),X25),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X26),s('type.num.num',X27)))))),
  file('thm.closSem.closSem_|49|35_prove_ltb','thm.closSem.closSem_|49|35_prove_ltb')).
fof(f4630,plain,(
  $false | $spl10),
  inference(subsumption_resolution,[],[f415,f229])).
fof(f229,plain,(
  ( ! [X14,X12,X15,X13,X16] : (s('type.closSem.v',sK12) != s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X12),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X13),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X14),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X15),s('type.list.list'('type.closSem.v'),X16)))))))))) )),
  inference(cnf_transformation,[],[f138])).
fof(f4631,plain,(
  $false | $spl14),
  inference(subsumption_resolution,[],[f419,f231])).
fof(f231,plain,(
  ( ! [X6,X10,X8,X7,X9] : (s('type.closSem.v',sK12) != s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X6),s('type.list.list'('type.closSem.v'),X7),s('type.list.list'('type.closSem.v'),X8),s('type.num.num',X9),s('type.closLang.exp',X10)))) )),
  inference(cnf_transformation,[],[f138])).
fof(f4632,plain,(
  $false | $spl2),
  inference(subsumption_resolution,[],[f407,f227])).
fof(f227,plain,(
  ( ! [X19] : (s('type.closSem.v',sK12) != s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X19)))) )),
  inference(cnf_transformation,[],[f138])).
fof(f4633,plain,(
  $false | $spl16),
  inference(subsumption_resolution,[],[f421,f232])).
fof(f232,plain,(
  ( ! [X4,X2,X5,X3,X1] : (s('type.closSem.v',sK12) != s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X1),s('type.list.list'('type.closSem.v'),X2),s('type.list.list'('type.closSem.v'),X3),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X4),s('type.num.num',X5)))) )),
  inference(cnf_transformation,[],[f138])).
fof(f4634,plain,(
  $false | $spl4),
  inference(subsumption_resolution,[],[f409,f224])).
fof(f224,plain,(
  ( ! [X24] : (s('type.closSem.v',sK12) != s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X24),s('type.list.list'('type.closSem.v'),'const.list.NIL_0')))) )),
  inference(cnf_transformation,[],[f138])).
fof(f4635,plain,(
  $false | $spl8),
  inference(subsumption_resolution,[],[f413,f225])).
fof(f225,plain,(
  ( ! [X23,X21,X22] : (s('type.closSem.v',sK12) != s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X21),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X22),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',X23),s('type.list.list'('type.closSem.v'),'const.list.NIL_0')))))))) )),
  inference(cnf_transformation,[],[f138])).
fof(f4636,plain,(
  $false | $spl12),
  inference(subsumption_resolution,[],[f417,f230])).
fof(f230,plain,(
  ( ! [X11] : (s('type.closSem.v',sK12) != s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X11)))) )),
  inference(cnf_transformation,[],[f138])).
fof(f405,plain,(
  s('type.closSem.v',sK12) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',sK13))) | $spl0),
  inference(cnf_transformation,[],[f405_D])).
fof(f405_D,plain,(
  s('type.closSem.v',sK12) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',sK13))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f407,plain,(
  s('type.closSem.v',sK12) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK14))) | $spl2),
  inference(cnf_transformation,[],[f407_D])).
fof(f407_D,plain,(
  s('type.closSem.v',sK12) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK14))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f409,plain,(
  s('type.closSem.v',sK12) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',sK15),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'))) | $spl4),
  inference(cnf_transformation,[],[f409_D])).
fof(f409_D,plain,(
  s('type.closSem.v',sK12) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',sK15),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f411,plain,(
  s('type.closSem.v',sK12) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',sK16),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',sK17),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'))))) | $spl6),
  inference(cnf_transformation,[],[f411_D])).
fof(f411_D,plain,(
  s('type.closSem.v',sK12) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',sK16),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',sK17),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'))))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f413,plain,(
  s('type.closSem.v',sK12) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',sK18),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',sK19),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',sK20),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'))))))) | $spl8),
  inference(cnf_transformation,[],[f413_D])).
fof(f413_D,plain,(
  s('type.closSem.v',sK12) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',sK18),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',sK19),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',sK20),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'))))))) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f415,plain,(
  s('type.closSem.v',sK12) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',sK21),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',sK22),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',sK23),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',sK24),s('type.list.list'('type.closSem.v'),sK25))))))))) | $spl10),
  inference(cnf_transformation,[],[f415_D])).
fof(f415_D,plain,(
  s('type.closSem.v',sK12) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',sK21),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',sK22),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',sK23),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',sK24),s('type.list.list'('type.closSem.v'),sK25))))))))) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f417,plain,(
  s('type.closSem.v',sK12) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',sK26))) | $spl12),
  inference(cnf_transformation,[],[f417_D])).
fof(f417_D,plain,(
  s('type.closSem.v',sK12) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',sK26))) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f419,plain,(
  s('type.closSem.v',sK12) = s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),sK27),s('type.list.list'('type.closSem.v'),sK28),s('type.list.list'('type.closSem.v'),sK29),s('type.num.num',sK30),s('type.closLang.exp',sK31))) | $spl14),
  inference(cnf_transformation,[],[f419_D])).
fof(f419_D,plain,(
  s('type.closSem.v',sK12) = s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),sK27),s('type.list.list'('type.closSem.v'),sK28),s('type.list.list'('type.closSem.v'),sK29),s('type.num.num',sK30),s('type.closLang.exp',sK31))) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f421,plain,(
  s('type.closSem.v',sK12) = s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),sK32),s('type.list.list'('type.closSem.v'),sK33),s('type.list.list'('type.closSem.v'),sK34),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK35),s('type.num.num',sK36))) | $spl16),
  inference(cnf_transformation,[],[f421_D])).
fof(f421_D,plain,(
  s('type.closSem.v',sK12) = s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),sK32),s('type.list.list'('type.closSem.v'),sK33),s('type.list.list'('type.closSem.v'),sK34),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK35),s('type.num.num',sK36))) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f223,plain,(
  s('type.closSem.v',sK12) = s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),sK32),s('type.list.list'('type.closSem.v'),sK33),s('type.list.list'('type.closSem.v'),sK34),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK35),s('type.num.num',sK36))) | s('type.closSem.v',sK12) = s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),sK27),s('type.list.list'('type.closSem.v'),sK28),s('type.list.list'('type.closSem.v'),sK29),s('type.num.num',sK30),s('type.closLang.exp',sK31))) | s('type.closSem.v',sK12) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',sK26))) | s('type.closSem.v',sK12) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',sK21),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',sK22),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',sK23),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',sK24),s('type.list.list'('type.closSem.v'),sK25))))))))) | s('type.closSem.v',sK12) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',sK18),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',sK19),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',sK20),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'))))))) | s('type.closSem.v',sK12) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',sK16),s('type.list.list'('type.closSem.v'),'const.list.CONS_2'(s('type.closSem.v',sK17),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'))))) | s('type.closSem.v',sK12) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',sK15),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'))) | s('type.closSem.v',sK12) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK14))) | s('type.closSem.v',sK12) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',sK13)))),
  inference(cnf_transformation,[],[f138])).
fof(f4638,plain,(
  $false | $spl0),
  inference(subsumption_resolution,[],[f405,f226])).
fof(f226,plain,(
  ( ! [X20] : (s('type.closSem.v',sK12) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X20)))) )),
  inference(cnf_transformation,[],[f138])).
% SZS output end Proof for thm.closSem
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 371
% Passive clauses: 1458
% Generated clauses: 4409
% Final active clauses: 371
% Final passive clauses: 912
% Input formulas: 37
% Initial clauses: 177
% 
% Duplicate literals: 153
% Trivial inequalities: 23
% Fw subsumption resolutions: 299
% 
% Simple tautologies: 145
% Equational tautologies: 30
% Forward subsumptions: 2294
% 
% Binary resolution: 2708
% Factoring: 770
% Forward superposition: 150
% Backward superposition: 59
% Self superposition: 2
% Equality factoring: 2
% Equality resolution: 13
% 
% Split clauses: 99
% Split components: 206
% SAT solver clauses: 192
% SAT solver unit clauses: 15
% SAT solver binary clauses: 39
% SAT solver learnt clauses: 1
% 
% Sat splits: 99
% Sat splitting refutations: 9
% 
% TWLsolver clauses: 191
% TWLsolver calls for satisfiability: 163
% 
% Memory used [KB]: 2430
% Time elapsed: 0.104 s
% ------------------------------
% ------------------------------
% Success in time 0.12 s
