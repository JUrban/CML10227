Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.mod_to_conProof
% (7843)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 175
% Passive clauses: 3938
% Generated clauses: 13020
% Final active clauses: 172
% Final passive clauses: 3538
% Input formulas: 37
% Initial clauses: 126
% 
% Duplicate literals: 532
% Trivial inequalities: 182
% Fw subsumption resolutions: 2085
% Fw demodulations: 319
% Bw demodulations: 3
% 
% Simple tautologies: 296
% Equational tautologies: 76
% Forward subsumptions: 4473
% 
% Binary resolution: 1287
% Factoring: 4
% Forward superposition: 4425
% Backward superposition: 3494
% Self superposition: 204
% Equality factoring: 174
% Equality resolution: 30
% 
% Split clauses: 465
% Split components: 955
% SAT solver clauses: 1177
% SAT solver unit clauses: 53
% SAT solver binary clauses: 429
% 
% Sat splits: 465
% 
% TWLsolver clauses: 1177
% TWLsolver calls for satisfiability: 232
% 
% Memory used [KB]: 7547
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.mod_to_conProof
% (7887)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 156
% Passive clauses: 986
% Generated clauses: 15297
% Final active clauses: 114
% Final passive clauses: 288
% Input formulas: 37
% Initial clauses: 126
% 
% Duplicate literals: 809
% Trivial inequalities: 165
% Fw subsumption resolutions: 1557
% Fw demodulations: 1258
% Bw demodulations: 547
% Condensations: 1222
% Global subsumptions: 13
% 
% Simple tautologies: 296
% Equational tautologies: 48
% Forward subsumptions: 6972
% Bw demodulations to eq. taut.: 33
% 
% Binary resolution: 716
% Factoring: 4
% Forward superposition: 4404
% Backward superposition: 3351
% Self superposition: 148
% Equality factoring: 110
% Equality resolution: 30
% 
% Split clauses: 123
% Split components: 269
% SAT solver clauses: 1446
% SAT solver unit clauses: 142
% SAT solver binary clauses: 74
% SAT solver learnt clauses: 26
% 
% Sat splits: 123
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 1394
% TWLsolver calls for satisfiability: 1533
% 
% Memory used [KB]: 9083
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.mod_to_conProof
% (7934)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 334
% Passive clauses: 5152
% Generated clauses: 110185
% Final active clauses: 111
% Final passive clauses: 626
% Input formulas: 37
% Initial clauses: 126
% 
% Duplicate literals: 5650
% Trivial inequalities: 1287
% Fw subsumption resolutions: 11710
% Fw demodulations: 7125
% Bw demodulations: 3485
% Condensations: 15127
% Global subsumptions: 1822
% 
% Simple tautologies: 986
% Equational tautologies: 2265
% Forward subsumptions: 52783
% Fw demodulations to eq. taut.: 6
% Bw demodulations to eq. taut.: 218
% 
% Unit resulting resolution: 13534
% Factoring: 2
% Forward superposition: 23270
% Backward superposition: 18785
% Self superposition: 626
% Equality factoring: 397
% Equality resolution: 61
% 
% Split clauses: 224
% Split components: 475
% SAT solver clauses: 12942
% SAT solver unit clauses: 60
% SAT solver binary clauses: 879
% 
% Sat splits: 224
% Sat splitting refutations: 5518
% 
% Memory used [KB]: 57568
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 30 next slice time: 30
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.mod_to_conProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.mod_to_conProof
% SZS output start Proof for thm.mod_to_conProof
fof(f1450,plain,(
  $false),
  inference(subsumption_resolution,[],[f1449,f271])).
fof(f271,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.mod_to_conProof.sv_rel_rules|split|2',aHL_TRUTH)).
fof(f1449,plain,(
  ~p(s(bool,'T_0'))),
  inference(forward_demodulation,[],[f1448,f293])).
fof(f293,plain,(
  s(bool,'T_0') = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK6),s('type.list.list'('type.modSem.v'),sK7),s('type.list.list'('type.conSem.v'),sK8)))),
  inference(resolution,[],[f159,f263])).
fof(f263,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f151])).
fof(f151,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f68])).
fof(f68,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f18])).
fof(f18,axiom,(
  ! [X24] : (s(bool,'T_0') = s(bool,X24) <=> p(s(bool,X24)))),
  file('thm.mod_to_conProof.sv_rel_rules|split|2','thm.bool.EQ_CLAUSES|split|0')).
fof(f159,plain,(
  p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK6),s('type.list.list'('type.modSem.v'),sK7),s('type.list.list'('type.conSem.v'),sK8))))),
  inference(cnf_transformation,[],[f100])).
fof(f100,plain,(
  p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK6),s('type.list.list'('type.modSem.v'),sK7),s('type.list.list'('type.conSem.v'),sK8)))) & ~p(s(bool,'const.mod_to_conProof.sv_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK6),s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.modSem.v'),sK7))),s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.conSem.v'),sK8))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK6,sK7,sK8])],[f78])).
fof(f78,plain,(
  ? [X0,X1,X2] : (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X2)))) & ~p(s(bool,'const.mod_to_conProof.sv_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.modSem.v'),X1))),s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.conSem.v'),X2)))))))),
  inference(ennf_transformation,[],[f39])).
fof(f39,plain,(
  ~! [X0,X1,X2] : (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X2)))) => p(s(bool,'const.mod_to_conProof.sv_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.modSem.v'),X1))),s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.conSem.v'),X2)))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8] : (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.list.list'('type.modSem.v'),X7),s('type.list.list'('type.conSem.v'),X8)))) => p(s(bool,'const.mod_to_conProof.sv_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.modSem.v'),X7))),s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.conSem.v'),X8)))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8] : (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.list.list'('type.modSem.v'),X7),s('type.list.list'('type.conSem.v'),X8)))) => p(s(bool,'const.mod_to_conProof.sv_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.modSem.v'),X7))),s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.conSem.v'),X8)))))))),
  file('thm.mod_to_conProof.sv_rel_rules|split|2','thm.mod_to_conProof.sv_rel_rules|split|2')).
fof(f1448,plain,(
  ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK6),s('type.list.list'('type.modSem.v'),sK7),s('type.list.list'('type.conSem.v'),sK8))))),
  inference(equality_resolution,[],[f1441])).
fof(f1441,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.modSem.v'),sK7))) != s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.modSem.v'),X0))) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK6),s('type.list.list'('type.modSem.v'),X0),s('type.list.list'('type.conSem.v'),sK8))))) )),
  inference(equality_resolution,[],[f1009])).
fof(f1009,plain,(
  ( ! [X2,X1] : (s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.conSem.v'),sK8))) != s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.conSem.v'),X2))) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK6),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X2)))) | s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.modSem.v'),sK7))) != s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.modSem.v'),X1)))) )),
  inference(subsumption_resolution,[],[f975,f310])).
fof(f310,plain,(
  ~sP1(sK6,'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.modSem.v'),sK7)),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.conSem.v'),sK8)))),
  inference(resolution,[],[f160,f177])).
fof(f177,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.mod_to_conProof.sv_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.semanticPrimitives.store_v'('type.modSem.v'),X1),s('type.semanticPrimitives.store_v'('type.conSem.v'),X2)))) | ~sP1(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f107])).
fof(f107,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.mod_to_conProof.sv_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.semanticPrimitives.store_v'('type.modSem.v'),X1),s('type.semanticPrimitives.store_v'('type.conSem.v'),X2)))) | sP1(X0,X1,X2)) & (~sP1(X0,X1,X2) | p(s(bool,'const.mod_to_conProof.sv_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.semanticPrimitives.store_v'('type.modSem.v'),X1),s('type.semanticPrimitives.store_v'('type.conSem.v'),X2))))))),
  inference(nnf_transformation,[],[f93])).
fof(f93,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.mod_to_conProof.sv_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.semanticPrimitives.store_v'('type.modSem.v'),X1),s('type.semanticPrimitives.store_v'('type.conSem.v'),X2)))) <=> sP1(X0,X1,X2))),
  inference(definition_folding,[],[f79,f92,f91])).
fof(f91,plain,(
  ! [X4,X6,X5] : (sP0(X4,X6,X5) <=> ? [X10,X11] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X5) = s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.Refv_1'(s('type.modSem.v',X10))) & s('type.semanticPrimitives.store_v'('type.conSem.v'),X6) = s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.Refv_1'(s('type.conSem.v',X11))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4),s('type.modSem.v',X10),s('type.conSem.v',X11))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP0])])).
fof(f92,plain,(
  ! [X0,X1,X2] : (sP1(X0,X1,X2) <=> ! [X3] : (? [X4,X5,X6] : ((sP0(X4,X6,X5) | ? [X9] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X5) = s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X9))) & s('type.semanticPrimitives.store_v'('type.conSem.v'),X6) = s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X9)))) | ? [X7,X8] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X5) = s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.modSem.v'),X7))) & s('type.semanticPrimitives.store_v'('type.conSem.v'),X6) = s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.conSem.v'),X8))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4),s('type.list.list'('type.modSem.v'),X7),s('type.list.list'('type.conSem.v'),X8)))))) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X5))),s('type.semanticPrimitives.store_v'('type.conSem.v'),X6))))) | p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X1))),s('type.semanticPrimitives.store_v'('type.conSem.v'),X2))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP1])])).
fof(f79,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.mod_to_conProof.sv_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.semanticPrimitives.store_v'('type.modSem.v'),X1),s('type.semanticPrimitives.store_v'('type.conSem.v'),X2)))) <=> ! [X3] : (? [X4,X5,X6] : ((? [X10,X11] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X5) = s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.Refv_1'(s('type.modSem.v',X10))) & s('type.semanticPrimitives.store_v'('type.conSem.v'),X6) = s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.Refv_1'(s('type.conSem.v',X11))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4),s('type.modSem.v',X10),s('type.conSem.v',X11))))) | ? [X9] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X5) = s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X9))) & s('type.semanticPrimitives.store_v'('type.conSem.v'),X6) = s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X9)))) | ? [X7,X8] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X5) = s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.modSem.v'),X7))) & s('type.semanticPrimitives.store_v'('type.conSem.v'),X6) = s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.conSem.v'),X8))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4),s('type.list.list'('type.modSem.v'),X7),s('type.list.list'('type.conSem.v'),X8)))))) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X5))),s('type.semanticPrimitives.store_v'('type.conSem.v'),X6))))) | p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X1))),s('type.semanticPrimitives.store_v'('type.conSem.v'),X2))))))),
  inference(ennf_transformation,[],[f40])).
fof(f40,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.mod_to_conProof.sv_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.semanticPrimitives.store_v'('type.modSem.v'),X1),s('type.semanticPrimitives.store_v'('type.conSem.v'),X2)))) <=> ! [X3] : (! [X4,X5,X6] : ((? [X10,X11] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X5) = s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.Refv_1'(s('type.modSem.v',X10))) & s('type.semanticPrimitives.store_v'('type.conSem.v'),X6) = s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.Refv_1'(s('type.conSem.v',X11))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4),s('type.modSem.v',X10),s('type.conSem.v',X11))))) | ? [X9] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X5) = s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X9))) & s('type.semanticPrimitives.store_v'('type.conSem.v'),X6) = s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X9)))) | ? [X7,X8] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X5) = s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.modSem.v'),X7))) & s('type.semanticPrimitives.store_v'('type.conSem.v'),X6) = s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.conSem.v'),X8))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4),s('type.list.list'('type.modSem.v'),X7),s('type.list.list'('type.conSem.v'),X8)))))) => p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X5))),s('type.semanticPrimitives.store_v'('type.conSem.v'),X6))))) => p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X1))),s('type.semanticPrimitives.store_v'('type.conSem.v'),X2))))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X5,X9,X10] : (p(s(bool,'const.mod_to_conProof.sv_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5),s('type.semanticPrimitives.store_v'('type.modSem.v'),X9),s('type.semanticPrimitives.store_v'('type.conSem.v'),X10)))) <=> ! [X11] : (! [X12,X13,X14] : ((? [X15,X16] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X13) = s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.Refv_1'(s('type.modSem.v',X15))) & s('type.semanticPrimitives.store_v'('type.conSem.v'),X14) = s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.Refv_1'(s('type.conSem.v',X16))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X12),s('type.modSem.v',X15),s('type.conSem.v',X16))))) | ? [X17] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X13) = s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X17))) & s('type.semanticPrimitives.store_v'('type.conSem.v'),X14) = s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X17)))) | ? [X7,X8] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X13) = s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.modSem.v'),X7))) & s('type.semanticPrimitives.store_v'('type.conSem.v'),X14) = s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.conSem.v'),X8))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X12),s('type.list.list'('type.modSem.v'),X7),s('type.list.list'('type.conSem.v'),X8)))))) => p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X12))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X13))),s('type.semanticPrimitives.store_v'('type.conSem.v'),X14))))) => p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X9))),s('type.semanticPrimitives.store_v'('type.conSem.v'),X10))))))),
  file('thm.mod_to_conProof.sv_rel_rules|split|2','thm.mod_to_conProof.sv_rel_def')).
fof(f160,plain,(
  ~p(s(bool,'const.mod_to_conProof.sv_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK6),s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.modSem.v'),sK7))),s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.conSem.v'),sK8))))))),
  inference(cnf_transformation,[],[f100])).
fof(f975,plain,(
  ( ! [X2,X1] : (sP1(sK6,'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.modSem.v'),sK7)),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.conSem.v'),sK8))) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK6),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X2)))) | s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.conSem.v'),sK8))) != s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.conSem.v'),X2))) | s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.modSem.v'),sK7))) != s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.modSem.v'),X1)))) )),
  inference(resolution,[],[f342,f170])).
fof(f170,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X1] : (sP1(X0,X1,X2) | p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool))),sK15(X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X5))),s('type.semanticPrimitives.store_v'('type.conSem.v'),X6)))) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4),s('type.list.list'('type.modSem.v'),X7),s('type.list.list'('type.conSem.v'),X8)))) | s('type.semanticPrimitives.store_v'('type.conSem.v'),X6) != s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.conSem.v'),X8))) | s('type.semanticPrimitives.store_v'('type.modSem.v'),X5) != s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.modSem.v'),X7)))) )),
  inference(cnf_transformation,[],[f103])).
fof(f103,plain,(
  ! [X0,X1,X2] : ((~sP1(X0,X1,X2) | ! [X10] : (((sP0(sK9(X10,X2,X1,X0),sK11(X10,X2,X1,X0),sK10(X10,X2,X1,X0)) | (s('type.semanticPrimitives.store_v'('type.modSem.v'),sK10(X10,X2,X1,X0)) = s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK12(X10,X2,X1,X0)))) & s('type.semanticPrimitives.store_v'('type.conSem.v'),sK11(X10,X2,X1,X0)) = s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK12(X10,X2,X1,X0))))) | (s('type.semanticPrimitives.store_v'('type.modSem.v'),sK10(X10,X2,X1,X0)) = s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.modSem.v'),sK13(X10,X2,X1,X0)))) & s('type.semanticPrimitives.store_v'('type.conSem.v'),sK11(X10,X2,X1,X0)) = s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.conSem.v'),sK14(X10,X2,X1,X0)))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK9(X10,X2,X1,X0)),s('type.list.list'('type.modSem.v'),sK13(X10,X2,X1,X0)),s('type.list.list'('type.conSem.v'),sK14(X10,X2,X1,X0))))))) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK9(X10,X2,X1,X0)))),s('type.semanticPrimitives.store_v'('type.modSem.v'),sK10(X10,X2,X1,X0)))),s('type.semanticPrimitives.store_v'('type.conSem.v'),sK11(X10,X2,X1,X0)))))) | p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X1))),s('type.semanticPrimitives.store_v'('type.conSem.v'),X2)))))) & ((! [X4,X5,X6] : ((~sP0(X4,X6,X5) & ! [X9] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X5) != s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X9))) | s('type.semanticPrimitives.store_v'('type.conSem.v'),X6) != s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X9)))) & ! [X7,X8] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X5) != s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.modSem.v'),X7))) | s('type.semanticPrimitives.store_v'('type.conSem.v'),X6) != s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.conSem.v'),X8))) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4),s('type.list.list'('type.modSem.v'),X7),s('type.list.list'('type.conSem.v'),X8)))))) | p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool))),sK15(X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X5))),s('type.semanticPrimitives.store_v'('type.conSem.v'),X6))))) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool))),sK15(X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X1))),s('type.semanticPrimitives.store_v'('type.conSem.v'),X2))))) | sP1(X0,X1,X2)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK9,sK10,sK11,sK12,sK13,sK14,sK15])],[f102])).
fof(f102,plain,(
  ! [X0,X1,X2] : ((~sP1(X0,X1,X2) | ! [X10] : (? [X11,X12,X13] : ((sP0(X11,X13,X12) | ? [X16] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X12) = s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X16))) & s('type.semanticPrimitives.store_v'('type.conSem.v'),X13) = s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X16)))) | ? [X14,X15] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X12) = s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.modSem.v'),X14))) & s('type.semanticPrimitives.store_v'('type.conSem.v'),X13) = s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.conSem.v'),X15))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X11),s('type.list.list'('type.modSem.v'),X14),s('type.list.list'('type.conSem.v'),X15)))))) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X11))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X12))),s('type.semanticPrimitives.store_v'('type.conSem.v'),X13))))) | p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X1))),s('type.semanticPrimitives.store_v'('type.conSem.v'),X2)))))) & (? [X3] : (! [X4,X5,X6] : ((~sP0(X4,X6,X5) & ! [X9] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X5) != s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X9))) | s('type.semanticPrimitives.store_v'('type.conSem.v'),X6) != s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X9)))) & ! [X7,X8] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X5) != s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.modSem.v'),X7))) | s('type.semanticPrimitives.store_v'('type.conSem.v'),X6) != s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.conSem.v'),X8))) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4),s('type.list.list'('type.modSem.v'),X7),s('type.list.list'('type.conSem.v'),X8)))))) | p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X5))),s('type.semanticPrimitives.store_v'('type.conSem.v'),X6))))) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X1))),s('type.semanticPrimitives.store_v'('type.conSem.v'),X2))))) | sP1(X0,X1,X2)))),
  inference(rectify,[],[f101])).
fof(f101,plain,(
  ! [X0,X1,X2] : ((~sP1(X0,X1,X2) | ! [X3] : (? [X4,X5,X6] : ((sP0(X4,X6,X5) | ? [X9] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X5) = s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X9))) & s('type.semanticPrimitives.store_v'('type.conSem.v'),X6) = s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X9)))) | ? [X7,X8] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X5) = s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.modSem.v'),X7))) & s('type.semanticPrimitives.store_v'('type.conSem.v'),X6) = s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.conSem.v'),X8))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4),s('type.list.list'('type.modSem.v'),X7),s('type.list.list'('type.conSem.v'),X8)))))) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X5))),s('type.semanticPrimitives.store_v'('type.conSem.v'),X6))))) | p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X1))),s('type.semanticPrimitives.store_v'('type.conSem.v'),X2)))))) & (? [X3] : (! [X4,X5,X6] : ((~sP0(X4,X6,X5) & ! [X9] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X5) != s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X9))) | s('type.semanticPrimitives.store_v'('type.conSem.v'),X6) != s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X9)))) & ! [X7,X8] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X5) != s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.modSem.v'),X7))) | s('type.semanticPrimitives.store_v'('type.conSem.v'),X6) != s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.conSem.v'),X8))) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4),s('type.list.list'('type.modSem.v'),X7),s('type.list.list'('type.conSem.v'),X8)))))) | p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X5))),s('type.semanticPrimitives.store_v'('type.conSem.v'),X6))))) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X1))),s('type.semanticPrimitives.store_v'('type.conSem.v'),X2))))) | sP1(X0,X1,X2)))),
  inference(nnf_transformation,[],[f92])).
fof(f342,plain,(
  ~p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool))),sK15('const.semanticPrimitives.Varray_1'(s('type.list.list'('type.conSem.v'),sK8)),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.modSem.v'),sK7)),sK6)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK6))),s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.modSem.v'),sK7))))),s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.conSem.v'),sK8))))))),
  inference(resolution,[],[f310,f171])).
fof(f171,plain,(
  ( ! [X2,X0,X1] : (sP1(X0,X1,X2) | ~p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool))),sK15(X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X1))),s('type.semanticPrimitives.store_v'('type.conSem.v'),X2))))) )),
  inference(cnf_transformation,[],[f103])).
% SZS output end Proof for thm.mod_to_conProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 145
% Passive clauses: 377
% Generated clauses: 1167
% Final active clauses: 136
% Final passive clauses: 284
% Input formulas: 37
% Initial clauses: 120
% 
% Selected by SInE selection: 34
% SInE iterations: 1
% 
% Duplicate literals: 26
% Trivial inequalities: 34
% Fw subsumption resolutions: 107
% Fw demodulations: 169
% Bw demodulations: 9
% 
% Simple tautologies: 74
% Equational tautologies: 2
% Forward subsumptions: 444
% 
% Binary resolution: 221
% Forward superposition: 270
% Backward superposition: 319
% Equality resolution: 11
% 
% Split clauses: 2
% Split components: 4
% SAT solver clauses: 3
% SAT solver binary clauses: 2
% 
% Sat splits: 2
% 
% Memory used [KB]: 2814
% Time elapsed: 0.052 s
% ------------------------------
% ------------------------------
% Success in time 12.034 s
