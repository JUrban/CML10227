Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.clos_annotateProof
% (50159)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 313
% Passive clauses: 4147
% Generated clauses: 32811
% Final active clauses: 202
% Final passive clauses: 3473
% Input formulas: 261
% Initial clauses: 466
% 
% Duplicate literals: 877
% Trivial inequalities: 597
% Fw subsumption resolutions: 2097
% Fw demodulations: 5593
% Bw demodulations: 89
% 
% Simple tautologies: 741
% Equational tautologies: 48
% Forward subsumptions: 18590
% Fw demodulations to eq. taut.: 32
% Bw demodulations to eq. taut.: 3
% 
% Binary resolution: 211
% Factoring: 1
% Forward superposition: 11666
% Backward superposition: 10949
% Self superposition: 153
% Equality factoring: 85
% Equality resolution: 51
% 
% Split clauses: 168
% Split components: 340
% SAT solver clauses: 420
% SAT solver unit clauses: 7
% SAT solver binary clauses: 142
% 
% Sat splits: 168
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 420
% TWLsolver calls for satisfiability: 46
% 
% Memory used [KB]: 15607
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.clos_annotateProof
% (50174)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 292
% Passive clauses: 1814
% Generated clauses: 34166
% Final active clauses: 190
% Final passive clauses: 875
% Input formulas: 261
% Initial clauses: 466
% 
% Duplicate literals: 565
% Trivial inequalities: 425
% Fw subsumption resolutions: 2652
% Fw demodulations: 7562
% Bw demodulations: 676
% Condensations: 672
% Global subsumptions: 10
% 
% Simple tautologies: 357
% Equational tautologies: 25
% Forward subsumptions: 16673
% Fw demodulations to eq. taut.: 12
% Bw demodulations to eq. taut.: 2
% 
% Binary resolution: 121
% Factoring: 2
% Forward superposition: 10231
% Backward superposition: 7575
% Self superposition: 177
% Equality factoring: 58
% Equality resolution: 49
% 
% Split clauses: 101
% Split components: 204
% SAT solver clauses: 2774
% SAT solver unit clauses: 651
% SAT solver binary clauses: 123
% SAT solver learnt clauses: 23
% SAT solver learnt literals: 7
% 
% Sat splits: 101
% Sat splitting refutations: 47
% 
% TWLsolver clauses: 2730
% TWLsolver calls for satisfiability: 5367
% 
% Memory used [KB]: 25841
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.clos_annotateProof
% (50183)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 1235
% Passive clauses: 9324
% Generated clauses: 349049
% Final active clauses: 543
% Final passive clauses: 2682
% Input formulas: 261
% Initial clauses: 466
% Discarded non-redundant clauses: 4032
% 
% Duplicate literals: 4412
% Trivial inequalities: 2433
% Fw subsumption resolutions: 20773
% Fw demodulations: 95430
% Bw demodulations: 4983
% Condensations: 6072
% Global subsumptions: 197
% 
% Simple tautologies: 1729
% Equational tautologies: 1355
% Forward subsumptions: 205959
% Fw demodulations to eq. taut.: 252
% Bw demodulations to eq. taut.: 154
% 
% Unit resulting resolution: 32205
% Factoring: 1
% Forward superposition: 102398
% Backward superposition: 69066
% Self superposition: 585
% Equality factoring: 246
% Equality resolution: 115
% 
% Split clauses: 126
% Split components: 252
% SAT solver clauses: 10429
% SAT solver unit clauses: 2488
% SAT solver binary clauses: 4060
% 
% Sat splits: 126
% Sat splitting refutations: 654
% 
% Memory used [KB]: 141490
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 32 next slice time: 32
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.clos_annotateProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.clos_annotateProof
% SZS output start Proof for thm.clos_annotateProof
fof(f6393,plain,(
  $false),
  inference(equality_resolution,[],[f6323])).
fof(f6323,plain,(
  ( ! [X1] : (s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK7))) != s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1)))) )),
  inference(duplicate_literal_removal,[],[f6317])).
fof(f6317,plain,(
  ( ! [X1] : (s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK7))) != s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1))) | s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK7))) != s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1)))) )),
  inference(resolution,[],[f1376,f570])).
fof(f570,plain,(
  ( ! [X2,X0,X5,X3,X1] : (sP3(X0,X1,X2,X3) | s('type.closSem.v',X2) != s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X5))) | s('type.closSem.v',X3) != s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X5)))) )),
  inference(cnf_transformation,[],[f421])).
fof(f421,plain,(
  ! [X0,X1,X2,X3] : ((~sP3(X0,X1,X2,X3) | (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',sK19(X3,X2,X1,X0)))) & s('type.closSem.v',X2) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',sK19(X3,X2,X1,X0))))) | (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK20(X3,X2,X1,X0)))) & s('type.closSem.v',X2) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK20(X3,X2,X1,X0))))) | sP2(X0,X2,X3) | (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',sK21(X3,X2,X1,X0)))) & s('type.closSem.v',X2) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',sK21(X3,X2,X1,X0))))) | sP0(X0,X1,X2,X3) | sP1(X0,X1,X2,X3)) & ((! [X6] : (s('type.closSem.v',X3) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X6))) | s('type.closSem.v',X2) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X6)))) & ! [X5] : (s('type.closSem.v',X3) != s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X5))) | s('type.closSem.v',X2) != s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X5)))) & ~sP2(X0,X2,X3) & ! [X4] : (s('type.closSem.v',X3) != s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X4))) | s('type.closSem.v',X2) != s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X4)))) & ~sP0(X0,X1,X2,X3) & ~sP1(X0,X1,X2,X3)) | sP3(X0,X1,X2,X3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK19,sK20,sK21])],[f420])).
fof(f420,plain,(
  ! [X0,X1,X2,X3] : ((~sP3(X0,X1,X2,X3) | ? [X9] : (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X9))) & s('type.closSem.v',X2) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X9)))) | ? [X8] : (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X8))) & s('type.closSem.v',X2) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X8)))) | sP2(X0,X2,X3) | ? [X7] : (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X7))) & s('type.closSem.v',X2) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X7)))) | sP0(X0,X1,X2,X3) | sP1(X0,X1,X2,X3)) & ((! [X6] : (s('type.closSem.v',X3) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X6))) | s('type.closSem.v',X2) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X6)))) & ! [X5] : (s('type.closSem.v',X3) != s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X5))) | s('type.closSem.v',X2) != s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X5)))) & ~sP2(X0,X2,X3) & ! [X4] : (s('type.closSem.v',X3) != s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X4))) | s('type.closSem.v',X2) != s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X4)))) & ~sP0(X0,X1,X2,X3) & ~sP1(X0,X1,X2,X3)) | sP3(X0,X1,X2,X3)))),
  inference(rectify,[],[f419])).
fof(f419,plain,(
  ! [X2,X3,X12,X11] : ((~sP3(X2,X3,X12,X11) | ? [X37] : (s('type.closSem.v',X11) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X37))) & s('type.closSem.v',X12) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X37)))) | ? [X36] : (s('type.closSem.v',X11) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X36))) & s('type.closSem.v',X12) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X36)))) | sP2(X2,X12,X11) | ? [X32] : (s('type.closSem.v',X11) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X32))) & s('type.closSem.v',X12) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X32)))) | sP0(X2,X3,X12,X11) | sP1(X2,X3,X12,X11)) & ((! [X37] : (s('type.closSem.v',X11) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X37))) | s('type.closSem.v',X12) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X37)))) & ! [X36] : (s('type.closSem.v',X11) != s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X36))) | s('type.closSem.v',X12) != s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X36)))) & ~sP2(X2,X12,X11) & ! [X32] : (s('type.closSem.v',X11) != s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X32))) | s('type.closSem.v',X12) != s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X32)))) & ~sP0(X2,X3,X12,X11) & ~sP1(X2,X3,X12,X11)) | sP3(X2,X3,X12,X11)))),
  inference(flattening,[],[f418])).
fof(f418,plain,(
  ! [X2,X3,X12,X11] : ((~sP3(X2,X3,X12,X11) | (? [X37] : (s('type.closSem.v',X11) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X37))) & s('type.closSem.v',X12) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X37)))) | ? [X36] : (s('type.closSem.v',X11) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X36))) & s('type.closSem.v',X12) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X36)))) | sP2(X2,X12,X11) | ? [X32] : (s('type.closSem.v',X11) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X32))) & s('type.closSem.v',X12) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X32)))) | sP0(X2,X3,X12,X11) | sP1(X2,X3,X12,X11))) & ((! [X37] : (s('type.closSem.v',X11) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X37))) | s('type.closSem.v',X12) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X37)))) & ! [X36] : (s('type.closSem.v',X11) != s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X36))) | s('type.closSem.v',X12) != s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X36)))) & ~sP2(X2,X12,X11) & ! [X32] : (s('type.closSem.v',X11) != s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X32))) | s('type.closSem.v',X12) != s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X32)))) & ~sP0(X2,X3,X12,X11) & ~sP1(X2,X3,X12,X11)) | sP3(X2,X3,X12,X11)))),
  inference(nnf_transformation,[],[f368])).
fof(f368,plain,(
  ! [X2,X3,X12,X11] : (sP3(X2,X3,X12,X11) <=> (? [X37] : (s('type.closSem.v',X11) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X37))) & s('type.closSem.v',X12) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X37)))) | ? [X36] : (s('type.closSem.v',X11) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X36))) & s('type.closSem.v',X12) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X36)))) | sP2(X2,X12,X11) | ? [X32] : (s('type.closSem.v',X11) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X32))) & s('type.closSem.v',X12) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X32)))) | sP0(X2,X3,X12,X11) | sP1(X2,X3,X12,X11)))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP3])])).
fof(f1376,plain,(
  ~sP3(sK46('const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK7)),'const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK7))),sK47('const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK7)),'const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK7))),'const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK7)),'const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK7)))),
  inference(subsumption_resolution,[],[f1375,f538])).
fof(f538,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f302])).
fof(f302,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.clos_annotateProof.v_rel_rules|split|1',aHL_FALSITY)).
fof(f1375,plain,(
  p(s(bool,'F_0')) | ~sP3(sK46('const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK7)),'const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK7))),sK47('const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK7)),'const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK7))),'const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK7)),'const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK7)))),
  inference(forward_demodulation,[],[f1321,f646])).
fof(f646,plain,(
  s(bool,'F_0') = s(bool,'const.clos_annotateProof.v_rel_2'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK7))),s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK7)))))),
  inference(resolution,[],[f443,f514])).
fof(f514,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f397])).
fof(f397,plain,(
  ! [X0] : (((p(s(bool,X0)) & ~p(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X0)) & (s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0)) | p(s(bool,'F_0'))))),
  inference(flattening,[],[f396])).
fof(f396,plain,(
  ! [X0] : (((p(s(bool,X0)) & ~p(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X0)) & (s(bool,'F_0') != s(bool,X0) | (~p(s(bool,X0)) | p(s(bool,'F_0')))))),
  inference(nnf_transformation,[],[f354])).
fof(f354,plain,(
  ! [X0] : ((~p(s(bool,X0)) | p(s(bool,'F_0'))) <=> s(bool,'F_0') = s(bool,X0))),
  inference(ennf_transformation,[],[f290])).
fof(f290,plain,(
  ! [X0] : ((p(s(bool,X0)) => p(s(bool,'F_0'))) <=> s(bool,'F_0') = s(bool,X0))),
  inference(rectify,[],[f88])).
fof(f88,axiom,(
  ! [X13] : ((p(s(bool,X13)) => p(s(bool,'F_0'))) <=> s(bool,'F_0') = s(bool,X13))),
  file('thm.clos_annotateProof.v_rel_rules|split|1','thm.bool.IMP_F_EQ_F')).
fof(f443,plain,(
  ~p(s(bool,'const.clos_annotateProof.v_rel_2'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK7))),s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK7))))))),
  inference(cnf_transformation,[],[f374])).
fof(f374,plain,(
  ~p(s(bool,'const.clos_annotateProof.v_rel_2'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK7))),s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK7))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK7])],[f331])).
fof(f331,plain,(
  ? [X0] : ~p(s(bool,'const.clos_annotateProof.v_rel_2'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X0))),s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X0))))))),
  inference(ennf_transformation,[],[f263])).
fof(f263,plain,(
  ~! [X0] : p(s(bool,'const.clos_annotateProof.v_rel_2'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X0))),s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X0))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : p(s(bool,'const.clos_annotateProof.v_rel_2'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X6))),s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X6))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : p(s(bool,'const.clos_annotateProof.v_rel_2'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X6))),s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X6))))))),
  file('thm.clos_annotateProof.v_rel_rules|split|1','thm.clos_annotateProof.v_rel_rules|split|1')).
fof(f1321,plain,(
  p(s(bool,'const.clos_annotateProof.v_rel_2'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK7))),s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK7)))))) | ~sP3(sK46('const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK7)),'const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK7))),sK47('const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK7)),'const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK7))),'const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK7)),'const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK7)))),
  inference(resolution,[],[f635,f597])).
fof(f597,plain,(
  ( ! [X4,X0,X5,X1] : (p(s(bool,'const.clos_annotateProof.v_rel_2'(s('type.closSem.v',X0),s('type.closSem.v',X1)))) | p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),sK46(X1,X0)),s('type.closSem.v',X4))),s('type.closSem.v',X5)))) | ~sP3(sK46(X1,X0),sK47(X1,X0),X5,X4)) )),
  inference(cnf_transformation,[],[f433])).
fof(f433,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.clos_annotateProof.v_rel_2'(s('type.closSem.v',X0),s('type.closSem.v',X1)))) | ! [X6,X7] : ((sP3(X6,X7,sK45(X7,X6,X1,X0),sK44(X7,X6,X1,X0)) & ~p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X6),s('type.closSem.v',sK44(X7,X6,X1,X0)))),s('type.closSem.v',sK45(X7,X6,X1,X0)))))) | sP5(X7,X6) | p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X6),s('type.closSem.v',X0))),s('type.closSem.v',X1)))))) & ((! [X4,X5] : (~sP3(sK46(X1,X0),sK47(X1,X0),X5,X4) | p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),sK46(X1,X0)),s('type.closSem.v',X4))),s('type.closSem.v',X5))))) & ~sP5(sK47(X1,X0),sK46(X1,X0)) & ~p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),sK46(X1,X0)),s('type.closSem.v',X0))),s('type.closSem.v',X1))))) | p(s(bool,'const.clos_annotateProof.v_rel_2'(s('type.closSem.v',X0),s('type.closSem.v',X1))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK44,sK45,sK46,sK47])],[f432])).
fof(f432,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.clos_annotateProof.v_rel_2'(s('type.closSem.v',X0),s('type.closSem.v',X1)))) | ! [X6,X7] : (? [X8,X9] : (sP3(X6,X7,X9,X8) & ~p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X6),s('type.closSem.v',X8))),s('type.closSem.v',X9))))) | sP5(X7,X6) | p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X6),s('type.closSem.v',X0))),s('type.closSem.v',X1)))))) & (? [X2,X3] : (! [X4,X5] : (~sP3(X2,X3,X5,X4) | p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v',X4))),s('type.closSem.v',X5))))) & ~sP5(X3,X2) & ~p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v',X0))),s('type.closSem.v',X1))))) | p(s(bool,'const.clos_annotateProof.v_rel_2'(s('type.closSem.v',X0),s('type.closSem.v',X1))))))),
  inference(rectify,[],[f431])).
fof(f431,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.clos_annotateProof.v_rel_2'(s('type.closSem.v',X0),s('type.closSem.v',X1)))) | ! [X2,X3] : (? [X11,X12] : (sP3(X2,X3,X12,X11) & ~p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v',X11))),s('type.closSem.v',X12))))) | sP5(X3,X2) | p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v',X0))),s('type.closSem.v',X1)))))) & (? [X2,X3] : (! [X11,X12] : (~sP3(X2,X3,X12,X11) | p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v',X11))),s('type.closSem.v',X12))))) & ~sP5(X3,X2) & ~p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v',X0))),s('type.closSem.v',X1))))) | p(s(bool,'const.clos_annotateProof.v_rel_2'(s('type.closSem.v',X0),s('type.closSem.v',X1))))))),
  inference(nnf_transformation,[],[f371])).
fof(f371,plain,(
  ! [X0,X1] : (p(s(bool,'const.clos_annotateProof.v_rel_2'(s('type.closSem.v',X0),s('type.closSem.v',X1)))) <=> ! [X2,X3] : (? [X11,X12] : (sP3(X2,X3,X12,X11) & ~p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v',X11))),s('type.closSem.v',X12))))) | sP5(X3,X2) | p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v',X0))),s('type.closSem.v',X1))))))),
  inference(definition_folding,[],[f360,f370,f369,f368,f367,f366,f365])).
fof(f365,plain,(
  ! [X2,X3,X12,X11] : (sP0(X2,X3,X12,X11) <=> ? [X21,X22,X23,X24,X25,X26,X27,X28,X29,X30] : (s('type.closSem.v',X11) = s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X28),s('type.list.list'('type.closSem.v'),X29),s('type.list.list'('type.closSem.v'),X23),s('type.num.num',X27),s('type.closLang.exp',X21))) & s('type.closSem.v',X12) = s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X28),s('type.list.list'('type.closSem.v'),X30),s('type.list.list'('type.closSem.v'),X24),s('type.num.num',X27),s('type.closLang.exp',X22))) & s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X22))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))) = s('type.list.list'('type.closLang.exp'),happ(s(fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))),happ(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp')))),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))))),'const.clos_annotate.shift_0'),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set'),'type.list.list'('type.closLang.exp')),'const.pair.FST_0'),s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set')),'const.clos_free.free_0'),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X21))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))),s('type.num.num',X26))),s('type.num.num',X27))),s('type.sptree.spt'('type.num.num'),X25))) & ! [X31] : (~p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.closLang.exp'),bool)),'const.closProps.fv_0'),s('type.num.num',X31))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X21))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.<=_0'),s('type.num.num',X27))),s('type.num.num',X31)))) | p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))),happ(s(fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))))),happ(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))))),X3),s('type.num.num',X26))),s('type.num.num','const.num.|48|_0'))),s('type.sptree.spt'('type.num.num'),X25))),s('type.list.list'('type.closSem.v'),X23))),s('type.list.list'('type.closSem.v'),X24))),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.-_0'),s('type.num.num',X31))),s('type.num.num',X27))))))) & p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),'const.closProps.every_Fn_vs_NONE_0'),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X21))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) & s('type.num.num',X26) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X23))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.list.list'('type.closSem.v'),X29),s('type.list.list'('type.closSem.v'),X30))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP0])])).
fof(f366,plain,(
  ! [X2,X3,X12,X11] : (sP1(X2,X3,X12,X11) <=> ? [X13,X14,X15,X16,X17,X18,X19,X20] : (s('type.closSem.v',X11) = s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X18),s('type.list.list'('type.closSem.v'),X19),s('type.list.list'('type.closSem.v'),X15),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X13),s('type.num.num',X17))) & s('type.closSem.v',X12) = s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X18),s('type.list.list'('type.closSem.v'),X20),s('type.list.list'('type.closSem.v'),X16),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X14),s('type.num.num',X17))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1111_2'(s(fun(fun('type.num.num',bool),bool),'?_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',bool))))),'_dst_x00000x11111_2'(s(fun(fun('type.sptree.spt'('type.num.num'),bool),bool),'?_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool)))))),'_dst_x000000x101000x110111_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.num.num','type.num.num'),'_i_0_0'))),s(fun('type.num.num',fun('type.closLang.exp',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool))))),'_dst_x00000x11111x11011_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool))))),'_dst_x00000x11011x00100_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'=_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))))),'_dst_x011x100_2'(s(fun('type.closLang.exp',fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))))),'_dst_x0x1_2'(s(fun('type.list.list'('type.closLang.exp'),fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))))),'const.clos_annotate.shift_0'),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x0x1_2'(s(fun('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set'),'type.list.list'('type.closLang.exp')),'const.pair.FST_0'),s(fun('type.closLang.exp','type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set')),'_dst_x0x1_2'(s(fun('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set')),'const.clos_free.free_0'),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))),s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X13))))))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool)))),'_dst_x0000x1111x0110_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool)))),'_dst_x0000x1111_2'(s(fun(fun('type.num.num',bool),bool),'!_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.num.num',bool))))),'_dst_x00000x11001x10111_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',bool))),'_dst_x000x011x101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.closLang.exp',fun('type.num.num',bool)),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.list.list'('type.closLang.exp'),bool)),'const.closProps.fv_0'),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s(fun('type.num.num',fun('type.num.num',bool)),'_dst_x0x1_2'(s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.<=_0'),s(fun('type.num.num','type.num.num'),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X13))))))))),s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.num.num',bool)))),'_dst_x0000x0100x0000x0010x0000x0000x1001_7'(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))))),X3),s(fun('type.num.num','type.num.num'),'_i_0_0'),s('type.num.num','const.num.|48|_0'),s(fun('type.sptree.spt'('type.num.num'),'type.sptree.spt'('type.num.num')),'_i_0_0'),s('type.list.list'('type.closSem.v'),X15),s('type.list.list'('type.closSem.v'),X16),s(fun('type.num.num',fun('type.num.num','type.num.num')),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.-_0'),s(fun('type.num.num','type.num.num'),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X13))))))))))))),s(fun('type.closLang.exp',fun('type.num.num',bool)),'_dst_x00x10x01_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.closLang.exp',bool),'_dst_x0x1_2'(s(fun('type.list.list'('type.closLang.exp'),bool),'const.closProps.every_Fn_vs_NONE_0'),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X15))))))))))))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X13),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X14)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.list.list'('type.closSem.v'),X19),s('type.list.list'('type.closSem.v'),X20)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X17),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X13))))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP1])])).
fof(f367,plain,(
  ! [X2,X12,X11] : (sP2(X2,X12,X11) <=> ? [X33,X34,X35] : (s('type.closSem.v',X11) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X33),s('type.list.list'('type.closSem.v'),X34))) & s('type.closSem.v',X12) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X33),s('type.list.list'('type.closSem.v'),X35))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.list.list'('type.closSem.v'),X34),s('type.list.list'('type.closSem.v'),X35))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP2])])).
fof(f369,plain,(
  ! [X2,X9,X7,X5,X8,X6,X4] : (sP4(X2,X9,X7,X5,X8,X6,X4) <=> ? [X10] : (p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.<=_0'),s('type.num.num',X5))),s('type.num.num',X9)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X5))),s('type.num.num',X4)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X5))),s('type.num.num',X4)))))) & s('type.option.option'('type.num.num'),'const.option.SOME_1'(s('type.num.num',X10))) = s('type.option.option'('type.num.num'),'const.sptree.lookup_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.-_0'),s('type.num.num',X9))),s('type.num.num',X5))),s('type.sptree.spt'('type.num.num'),X6))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X7)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X5))),s('type.num.num',X10))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X8)))))) & p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v','const.list.EL_2'(s('type.num.num',X9),s('type.list.list'('type.closSem.v'),X7))))),s('type.closSem.v','const.list.EL_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X5))),s('type.num.num',X10))),s('type.list.list'('type.closSem.v'),X8))))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP4])])).
fof(f370,plain,(
  ! [X3,X2] : (sP5(X3,X2) <=> ? [X4,X5,X6,X7,X8,X9] : ((p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.<=_0'),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X5))),s('type.num.num',X4))))),s('type.num.num',X9)))) | (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num',X5)))) & p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v','const.list.EL_2'(s('type.num.num',X9),s('type.list.list'('type.closSem.v'),X7))))),s('type.closSem.v','const.list.EL_2'(s('type.num.num',X9),s('type.list.list'('type.closSem.v'),X8)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X7)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X8))))))) | sP4(X2,X9,X7,X5,X8,X6,X4)) & ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))),happ(s(fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))))),happ(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))))),X3),s('type.num.num',X4))),s('type.num.num',X5))),s('type.sptree.spt'('type.num.num'),X6))),s('type.list.list'('type.closSem.v'),X7))),s('type.list.list'('type.closSem.v'),X8))),s('type.num.num',X9))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP5])])).
fof(f360,plain,(
  ! [X0,X1] : (p(s(bool,'const.clos_annotateProof.v_rel_2'(s('type.closSem.v',X0),s('type.closSem.v',X1)))) <=> ! [X2,X3] : (? [X11,X12] : ((? [X37] : (s('type.closSem.v',X11) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X37))) & s('type.closSem.v',X12) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X37)))) | ? [X36] : (s('type.closSem.v',X11) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X36))) & s('type.closSem.v',X12) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X36)))) | ? [X33,X34,X35] : (s('type.closSem.v',X11) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X33),s('type.list.list'('type.closSem.v'),X34))) & s('type.closSem.v',X12) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X33),s('type.list.list'('type.closSem.v'),X35))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.list.list'('type.closSem.v'),X34),s('type.list.list'('type.closSem.v'),X35))))) | ? [X32] : (s('type.closSem.v',X11) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X32))) & s('type.closSem.v',X12) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X32)))) | ? [X21,X22,X23,X24,X25,X26,X27,X28,X29,X30] : (s('type.closSem.v',X11) = s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X28),s('type.list.list'('type.closSem.v'),X29),s('type.list.list'('type.closSem.v'),X23),s('type.num.num',X27),s('type.closLang.exp',X21))) & s('type.closSem.v',X12) = s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X28),s('type.list.list'('type.closSem.v'),X30),s('type.list.list'('type.closSem.v'),X24),s('type.num.num',X27),s('type.closLang.exp',X22))) & s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X22))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))) = s('type.list.list'('type.closLang.exp'),happ(s(fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))),happ(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp')))),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))))),'const.clos_annotate.shift_0'),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set'),'type.list.list'('type.closLang.exp')),'const.pair.FST_0'),s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set')),'const.clos_free.free_0'),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X21))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))),s('type.num.num',X26))),s('type.num.num',X27))),s('type.sptree.spt'('type.num.num'),X25))) & ! [X31] : (~p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.closLang.exp'),bool)),'const.closProps.fv_0'),s('type.num.num',X31))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X21))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.<=_0'),s('type.num.num',X27))),s('type.num.num',X31)))) | p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))),happ(s(fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))))),happ(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))))),X3),s('type.num.num',X26))),s('type.num.num','const.num.|48|_0'))),s('type.sptree.spt'('type.num.num'),X25))),s('type.list.list'('type.closSem.v'),X23))),s('type.list.list'('type.closSem.v'),X24))),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.-_0'),s('type.num.num',X31))),s('type.num.num',X27))))))) & p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),'const.closProps.every_Fn_vs_NONE_0'),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X21))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) & s('type.num.num',X26) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X23))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.list.list'('type.closSem.v'),X29),s('type.list.list'('type.closSem.v'),X30))))) | ? [X13,X14,X15,X16,X17,X18,X19,X20] : (s('type.closSem.v',X11) = s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X18),s('type.list.list'('type.closSem.v'),X19),s('type.list.list'('type.closSem.v'),X15),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X13),s('type.num.num',X17))) & s('type.closSem.v',X12) = s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X18),s('type.list.list'('type.closSem.v'),X20),s('type.list.list'('type.closSem.v'),X16),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X14),s('type.num.num',X17))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1111_2'(s(fun(fun('type.num.num',bool),bool),'?_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',bool))))),'_dst_x00000x11111_2'(s(fun(fun('type.sptree.spt'('type.num.num'),bool),bool),'?_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool)))))),'_dst_x000000x101000x110111_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.num.num','type.num.num'),'_i_0_0'))),s(fun('type.num.num',fun('type.closLang.exp',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool))))),'_dst_x00000x11111x11011_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool))))),'_dst_x00000x11011x00100_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'=_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))))),'_dst_x011x100_2'(s(fun('type.closLang.exp',fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))))),'_dst_x0x1_2'(s(fun('type.list.list'('type.closLang.exp'),fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))))),'const.clos_annotate.shift_0'),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x0x1_2'(s(fun('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set'),'type.list.list'('type.closLang.exp')),'const.pair.FST_0'),s(fun('type.closLang.exp','type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set')),'_dst_x0x1_2'(s(fun('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set')),'const.clos_free.free_0'),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))),s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X13))))))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool)))),'_dst_x0000x1111x0110_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool)))),'_dst_x0000x1111_2'(s(fun(fun('type.num.num',bool),bool),'!_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.num.num',bool))))),'_dst_x00000x11001x10111_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',bool))),'_dst_x000x011x101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.closLang.exp',fun('type.num.num',bool)),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.list.list'('type.closLang.exp'),bool)),'const.closProps.fv_0'),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s(fun('type.num.num',fun('type.num.num',bool)),'_dst_x0x1_2'(s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.<=_0'),s(fun('type.num.num','type.num.num'),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X13))))))))),s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.num.num',bool)))),'_dst_x0000x0100x0000x0010x0000x0000x1001_7'(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))))),X3),s(fun('type.num.num','type.num.num'),'_i_0_0'),s('type.num.num','const.num.|48|_0'),s(fun('type.sptree.spt'('type.num.num'),'type.sptree.spt'('type.num.num')),'_i_0_0'),s('type.list.list'('type.closSem.v'),X15),s('type.list.list'('type.closSem.v'),X16),s(fun('type.num.num',fun('type.num.num','type.num.num')),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.-_0'),s(fun('type.num.num','type.num.num'),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X13))))))))))))),s(fun('type.closLang.exp',fun('type.num.num',bool)),'_dst_x00x10x01_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.closLang.exp',bool),'_dst_x0x1_2'(s(fun('type.list.list'('type.closLang.exp'),bool),'const.closProps.every_Fn_vs_NONE_0'),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X15))))))))))))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X13),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X14)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.list.list'('type.closSem.v'),X19),s('type.list.list'('type.closSem.v'),X20)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X17),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X13)))))))) & ~p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v',X11))),s('type.closSem.v',X12))))) | ? [X4,X5,X6,X7,X8,X9] : ((p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.<=_0'),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X5))),s('type.num.num',X4))))),s('type.num.num',X9)))) | (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num',X5)))) & p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v','const.list.EL_2'(s('type.num.num',X9),s('type.list.list'('type.closSem.v'),X7))))),s('type.closSem.v','const.list.EL_2'(s('type.num.num',X9),s('type.list.list'('type.closSem.v'),X8)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X7)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X8))))))) | ? [X10] : (p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.<=_0'),s('type.num.num',X5))),s('type.num.num',X9)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X5))),s('type.num.num',X4)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X5))),s('type.num.num',X4)))))) & s('type.option.option'('type.num.num'),'const.option.SOME_1'(s('type.num.num',X10))) = s('type.option.option'('type.num.num'),'const.sptree.lookup_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.-_0'),s('type.num.num',X9))),s('type.num.num',X5))),s('type.sptree.spt'('type.num.num'),X6))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X7)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X5))),s('type.num.num',X10))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X8)))))) & p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v','const.list.EL_2'(s('type.num.num',X9),s('type.list.list'('type.closSem.v'),X7))))),s('type.closSem.v','const.list.EL_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X5))),s('type.num.num',X10))),s('type.list.list'('type.closSem.v'),X8)))))))) & ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))),happ(s(fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))))),happ(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))))),X3),s('type.num.num',X4))),s('type.num.num',X5))),s('type.sptree.spt'('type.num.num'),X6))),s('type.list.list'('type.closSem.v'),X7))),s('type.list.list'('type.closSem.v'),X8))),s('type.num.num',X9))))) | p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v',X0))),s('type.closSem.v',X1))))))),
  inference(flattening,[],[f359])).
fof(f359,plain,(
  ! [X0,X1] : (p(s(bool,'const.clos_annotateProof.v_rel_2'(s('type.closSem.v',X0),s('type.closSem.v',X1)))) <=> ! [X2,X3] : ((? [X11,X12] : ((? [X37] : (s('type.closSem.v',X11) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X37))) & s('type.closSem.v',X12) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X37)))) | ? [X36] : (s('type.closSem.v',X11) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X36))) & s('type.closSem.v',X12) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X36)))) | ? [X33,X34,X35] : (s('type.closSem.v',X11) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X33),s('type.list.list'('type.closSem.v'),X34))) & s('type.closSem.v',X12) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X33),s('type.list.list'('type.closSem.v'),X35))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.list.list'('type.closSem.v'),X34),s('type.list.list'('type.closSem.v'),X35))))) | ? [X32] : (s('type.closSem.v',X11) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X32))) & s('type.closSem.v',X12) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X32)))) | ? [X21,X22,X23,X24,X25,X26,X27,X28,X29,X30] : (s('type.closSem.v',X11) = s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X28),s('type.list.list'('type.closSem.v'),X29),s('type.list.list'('type.closSem.v'),X23),s('type.num.num',X27),s('type.closLang.exp',X21))) & s('type.closSem.v',X12) = s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X28),s('type.list.list'('type.closSem.v'),X30),s('type.list.list'('type.closSem.v'),X24),s('type.num.num',X27),s('type.closLang.exp',X22))) & s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X22))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))) = s('type.list.list'('type.closLang.exp'),happ(s(fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))),happ(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp')))),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))))),'const.clos_annotate.shift_0'),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set'),'type.list.list'('type.closLang.exp')),'const.pair.FST_0'),s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set')),'const.clos_free.free_0'),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X21))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))),s('type.num.num',X26))),s('type.num.num',X27))),s('type.sptree.spt'('type.num.num'),X25))) & ! [X31] : ((~p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.closLang.exp'),bool)),'const.closProps.fv_0'),s('type.num.num',X31))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X21))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) | ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.<=_0'),s('type.num.num',X27))),s('type.num.num',X31))))) | p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))),happ(s(fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))))),happ(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))))),X3),s('type.num.num',X26))),s('type.num.num','const.num.|48|_0'))),s('type.sptree.spt'('type.num.num'),X25))),s('type.list.list'('type.closSem.v'),X23))),s('type.list.list'('type.closSem.v'),X24))),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.-_0'),s('type.num.num',X31))),s('type.num.num',X27))))))) & p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),'const.closProps.every_Fn_vs_NONE_0'),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X21))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) & s('type.num.num',X26) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X23))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.list.list'('type.closSem.v'),X29),s('type.list.list'('type.closSem.v'),X30))))) | ? [X13,X14,X15,X16,X17,X18,X19,X20] : (s('type.closSem.v',X11) = s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X18),s('type.list.list'('type.closSem.v'),X19),s('type.list.list'('type.closSem.v'),X15),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X13),s('type.num.num',X17))) & s('type.closSem.v',X12) = s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X18),s('type.list.list'('type.closSem.v'),X20),s('type.list.list'('type.closSem.v'),X16),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X14),s('type.num.num',X17))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1111_2'(s(fun(fun('type.num.num',bool),bool),'?_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',bool))))),'_dst_x00000x11111_2'(s(fun(fun('type.sptree.spt'('type.num.num'),bool),bool),'?_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool)))))),'_dst_x000000x101000x110111_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.num.num','type.num.num'),'_i_0_0'))),s(fun('type.num.num',fun('type.closLang.exp',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool))))),'_dst_x00000x11111x11011_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool))))),'_dst_x00000x11011x00100_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'=_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))))),'_dst_x011x100_2'(s(fun('type.closLang.exp',fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))))),'_dst_x0x1_2'(s(fun('type.list.list'('type.closLang.exp'),fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))))),'const.clos_annotate.shift_0'),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x0x1_2'(s(fun('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set'),'type.list.list'('type.closLang.exp')),'const.pair.FST_0'),s(fun('type.closLang.exp','type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set')),'_dst_x0x1_2'(s(fun('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set')),'const.clos_free.free_0'),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))),s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X13))))))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool)))),'_dst_x0000x1111x0110_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool)))),'_dst_x0000x1111_2'(s(fun(fun('type.num.num',bool),bool),'!_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.num.num',bool))))),'_dst_x00000x11001x10111_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',bool))),'_dst_x000x011x101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.closLang.exp',fun('type.num.num',bool)),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.list.list'('type.closLang.exp'),bool)),'const.closProps.fv_0'),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s(fun('type.num.num',fun('type.num.num',bool)),'_dst_x0x1_2'(s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.<=_0'),s(fun('type.num.num','type.num.num'),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X13))))))))),s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.num.num',bool)))),'_dst_x0000x0100x0000x0010x0000x0000x1001_7'(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))))),X3),s(fun('type.num.num','type.num.num'),'_i_0_0'),s('type.num.num','const.num.|48|_0'),s(fun('type.sptree.spt'('type.num.num'),'type.sptree.spt'('type.num.num')),'_i_0_0'),s('type.list.list'('type.closSem.v'),X15),s('type.list.list'('type.closSem.v'),X16),s(fun('type.num.num',fun('type.num.num','type.num.num')),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.-_0'),s(fun('type.num.num','type.num.num'),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X13))))))))))))),s(fun('type.closLang.exp',fun('type.num.num',bool)),'_dst_x00x10x01_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.closLang.exp',bool),'_dst_x0x1_2'(s(fun('type.list.list'('type.closLang.exp'),bool),'const.closProps.every_Fn_vs_NONE_0'),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X15))))))))))))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X13),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X14)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.list.list'('type.closSem.v'),X19),s('type.list.list'('type.closSem.v'),X20)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X17),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X13)))))))) & ~p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v',X11))),s('type.closSem.v',X12))))) | ? [X4,X5,X6,X7,X8,X9] : ((p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.<=_0'),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X5))),s('type.num.num',X4))))),s('type.num.num',X9)))) | (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num',X5)))) & p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v','const.list.EL_2'(s('type.num.num',X9),s('type.list.list'('type.closSem.v'),X7))))),s('type.closSem.v','const.list.EL_2'(s('type.num.num',X9),s('type.list.list'('type.closSem.v'),X8)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X7)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X8))))))) | ? [X10] : (p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.<=_0'),s('type.num.num',X5))),s('type.num.num',X9)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X5))),s('type.num.num',X4)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X5))),s('type.num.num',X4)))))) & s('type.option.option'('type.num.num'),'const.option.SOME_1'(s('type.num.num',X10))) = s('type.option.option'('type.num.num'),'const.sptree.lookup_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.-_0'),s('type.num.num',X9))),s('type.num.num',X5))),s('type.sptree.spt'('type.num.num'),X6))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X7)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X5))),s('type.num.num',X10))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X8)))))) & p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v','const.list.EL_2'(s('type.num.num',X9),s('type.list.list'('type.closSem.v'),X7))))),s('type.closSem.v','const.list.EL_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X5))),s('type.num.num',X10))),s('type.list.list'('type.closSem.v'),X8)))))))) & ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))),happ(s(fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))))),happ(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))))),X3),s('type.num.num',X4))),s('type.num.num',X5))),s('type.sptree.spt'('type.num.num'),X6))),s('type.list.list'('type.closSem.v'),X7))),s('type.list.list'('type.closSem.v'),X8))),s('type.num.num',X9)))))) | p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v',X0))),s('type.closSem.v',X1))))))),
  inference(ennf_transformation,[],[f305])).
fof(f305,plain,(
  ! [X0,X1] : (p(s(bool,'const.clos_annotateProof.v_rel_2'(s('type.closSem.v',X0),s('type.closSem.v',X1)))) <=> ! [X2,X3] : ((! [X11,X12] : ((? [X37] : (s('type.closSem.v',X11) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X37))) & s('type.closSem.v',X12) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X37)))) | ? [X36] : (s('type.closSem.v',X11) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X36))) & s('type.closSem.v',X12) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X36)))) | ? [X33,X34,X35] : (s('type.closSem.v',X11) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X33),s('type.list.list'('type.closSem.v'),X34))) & s('type.closSem.v',X12) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X33),s('type.list.list'('type.closSem.v'),X35))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.list.list'('type.closSem.v'),X34),s('type.list.list'('type.closSem.v'),X35))))) | ? [X32] : (s('type.closSem.v',X11) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X32))) & s('type.closSem.v',X12) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X32)))) | ? [X21,X22,X23,X24,X25,X26,X27,X28,X29,X30] : (s('type.closSem.v',X11) = s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X28),s('type.list.list'('type.closSem.v'),X29),s('type.list.list'('type.closSem.v'),X23),s('type.num.num',X27),s('type.closLang.exp',X21))) & s('type.closSem.v',X12) = s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X28),s('type.list.list'('type.closSem.v'),X30),s('type.list.list'('type.closSem.v'),X24),s('type.num.num',X27),s('type.closLang.exp',X22))) & s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X22))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))) = s('type.list.list'('type.closLang.exp'),happ(s(fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))),happ(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp')))),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))))),'const.clos_annotate.shift_0'),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set'),'type.list.list'('type.closLang.exp')),'const.pair.FST_0'),s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set')),'const.clos_free.free_0'),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X21))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))),s('type.num.num',X26))),s('type.num.num',X27))),s('type.sptree.spt'('type.num.num'),X25))) & ! [X31] : ((p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.closLang.exp'),bool)),'const.closProps.fv_0'),s('type.num.num',X31))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X21))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) & p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.<=_0'),s('type.num.num',X27))),s('type.num.num',X31))))) => p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))),happ(s(fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))))),happ(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))))),X3),s('type.num.num',X26))),s('type.num.num','const.num.|48|_0'))),s('type.sptree.spt'('type.num.num'),X25))),s('type.list.list'('type.closSem.v'),X23))),s('type.list.list'('type.closSem.v'),X24))),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.-_0'),s('type.num.num',X31))),s('type.num.num',X27))))))) & p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),'const.closProps.every_Fn_vs_NONE_0'),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X21))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) & s('type.num.num',X26) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X23))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.list.list'('type.closSem.v'),X29),s('type.list.list'('type.closSem.v'),X30))))) | ? [X13,X14,X15,X16,X17,X18,X19,X20] : (s('type.closSem.v',X11) = s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X18),s('type.list.list'('type.closSem.v'),X19),s('type.list.list'('type.closSem.v'),X15),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X13),s('type.num.num',X17))) & s('type.closSem.v',X12) = s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X18),s('type.list.list'('type.closSem.v'),X20),s('type.list.list'('type.closSem.v'),X16),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X14),s('type.num.num',X17))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1111_2'(s(fun(fun('type.num.num',bool),bool),'?_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',bool))))),'_dst_x00000x11111_2'(s(fun(fun('type.sptree.spt'('type.num.num'),bool),bool),'?_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool)))))),'_dst_x000000x101000x110111_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.num.num','type.num.num'),'_i_0_0'))),s(fun('type.num.num',fun('type.closLang.exp',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool))))),'_dst_x00000x11111x11011_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool))))),'_dst_x00000x11011x00100_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'=_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))))),'_dst_x011x100_2'(s(fun('type.closLang.exp',fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))))),'_dst_x0x1_2'(s(fun('type.list.list'('type.closLang.exp'),fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))))),'const.clos_annotate.shift_0'),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x0x1_2'(s(fun('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set'),'type.list.list'('type.closLang.exp')),'const.pair.FST_0'),s(fun('type.closLang.exp','type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set')),'_dst_x0x1_2'(s(fun('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set')),'const.clos_free.free_0'),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))),s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X13))))))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool)))),'_dst_x0000x1111x0110_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool)))),'_dst_x0000x1111_2'(s(fun(fun('type.num.num',bool),bool),'!_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.num.num',bool))))),'_dst_x00000x11001x10111_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',bool))),'_dst_x000x011x101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.closLang.exp',fun('type.num.num',bool)),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.list.list'('type.closLang.exp'),bool)),'const.closProps.fv_0'),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s(fun('type.num.num',fun('type.num.num',bool)),'_dst_x0x1_2'(s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.<=_0'),s(fun('type.num.num','type.num.num'),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X13))))))))),s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.num.num',bool)))),'_dst_x0000x0100x0000x0010x0000x0000x1001_7'(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))))),X3),s(fun('type.num.num','type.num.num'),'_i_0_0'),s('type.num.num','const.num.|48|_0'),s(fun('type.sptree.spt'('type.num.num'),'type.sptree.spt'('type.num.num')),'_i_0_0'),s('type.list.list'('type.closSem.v'),X15),s('type.list.list'('type.closSem.v'),X16),s(fun('type.num.num',fun('type.num.num','type.num.num')),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.-_0'),s(fun('type.num.num','type.num.num'),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X13))))))))))))),s(fun('type.closLang.exp',fun('type.num.num',bool)),'_dst_x00x10x01_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.closLang.exp',bool),'_dst_x0x1_2'(s(fun('type.list.list'('type.closLang.exp'),bool),'const.closProps.every_Fn_vs_NONE_0'),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X15))))))))))))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X13),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X14)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.list.list'('type.closSem.v'),X19),s('type.list.list'('type.closSem.v'),X20)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X17),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X13)))))))) => p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v',X11))),s('type.closSem.v',X12))))) & ! [X4,X5,X6,X7,X8,X9] : ((p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.<=_0'),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X5))),s('type.num.num',X4))))),s('type.num.num',X9)))) | (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num',X5)))) & p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v','const.list.EL_2'(s('type.num.num',X9),s('type.list.list'('type.closSem.v'),X7))))),s('type.closSem.v','const.list.EL_2'(s('type.num.num',X9),s('type.list.list'('type.closSem.v'),X8)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X7)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X8))))))) | ? [X10] : (p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.<=_0'),s('type.num.num',X5))),s('type.num.num',X9)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X5))),s('type.num.num',X4)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X5))),s('type.num.num',X4)))))) & s('type.option.option'('type.num.num'),'const.option.SOME_1'(s('type.num.num',X10))) = s('type.option.option'('type.num.num'),'const.sptree.lookup_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.-_0'),s('type.num.num',X9))),s('type.num.num',X5))),s('type.sptree.spt'('type.num.num'),X6))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X7)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X5))),s('type.num.num',X10))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X8)))))) & p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v','const.list.EL_2'(s('type.num.num',X9),s('type.list.list'('type.closSem.v'),X7))))),s('type.closSem.v','const.list.EL_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X5))),s('type.num.num',X10))),s('type.list.list'('type.closSem.v'),X8)))))))) => p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))),happ(s(fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))))),happ(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))))),X3),s('type.num.num',X4))),s('type.num.num',X5))),s('type.sptree.spt'('type.num.num'),X6))),s('type.list.list'('type.closSem.v'),X7))),s('type.list.list'('type.closSem.v'),X8))),s('type.num.num',X9)))))) => p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v',X0))),s('type.closSem.v',X1))))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X5,X7] : (p(s(bool,'const.clos_annotateProof.v_rel_2'(s('type.closSem.v',X5),s('type.closSem.v',X7)))) <=> ! [X8,X9] : ((! [X10,X11] : ((? [X12] : (s('type.closSem.v',X10) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X12))) & s('type.closSem.v',X11) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X12)))) | ? [X6] : (s('type.closSem.v',X10) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X6))) & s('type.closSem.v',X11) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X6)))) | ? [X13,X14,X15] : (s('type.closSem.v',X10) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X13),s('type.list.list'('type.closSem.v'),X14))) & s('type.closSem.v',X11) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X13),s('type.list.list'('type.closSem.v'),X15))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X8),s('type.list.list'('type.closSem.v'),X14),s('type.list.list'('type.closSem.v'),X15))))) | ? [X16] : (s('type.closSem.v',X10) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X16))) & s('type.closSem.v',X11) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X16)))) | ? [X17,X18,X19,X20,X21,X22,X23,X24,X25,X26] : (s('type.closSem.v',X10) = s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X24),s('type.list.list'('type.closSem.v'),X25),s('type.list.list'('type.closSem.v'),X19),s('type.num.num',X23),s('type.closLang.exp',X17))) & s('type.closSem.v',X11) = s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X24),s('type.list.list'('type.closSem.v'),X26),s('type.list.list'('type.closSem.v'),X20),s('type.num.num',X23),s('type.closLang.exp',X18))) & s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X18))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))) = s('type.list.list'('type.closLang.exp'),happ(s(fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))),happ(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp')))),happ(s(fun('type.list.list'('type.closLang.exp'),fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))))),'const.clos_annotate.shift_0'),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set'),'type.list.list'('type.closLang.exp')),'const.pair.FST_0'),s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set')),'const.clos_free.free_0'),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X17))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))),s('type.num.num',X22))),s('type.num.num',X23))),s('type.sptree.spt'('type.num.num'),X21))) & ! [X27] : ((p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.closLang.exp'),bool)),'const.closProps.fv_0'),s('type.num.num',X27))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X17))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) & p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.<=_0'),s('type.num.num',X23))),s('type.num.num',X27))))) => p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))),happ(s(fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))))),happ(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))))),X9),s('type.num.num',X22))),s('type.num.num','const.num.|48|_0'))),s('type.sptree.spt'('type.num.num'),X21))),s('type.list.list'('type.closSem.v'),X19))),s('type.list.list'('type.closSem.v'),X20))),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.-_0'),s('type.num.num',X27))),s('type.num.num',X23))))))) & p(s(bool,happ(s(fun('type.list.list'('type.closLang.exp'),bool),'const.closProps.every_Fn_vs_NONE_0'),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp')),happ(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.closLang.exp',X17))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) & s('type.num.num',X22) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X19))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X8),s('type.list.list'('type.closSem.v'),X25),s('type.list.list'('type.closSem.v'),X26))))) | ? [X28,X29,X19,X20,X30,X24,X25,X26] : (s('type.closSem.v',X10) = s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X24),s('type.list.list'('type.closSem.v'),X25),s('type.list.list'('type.closSem.v'),X19),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X28),s('type.num.num',X30))) & s('type.closSem.v',X11) = s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X24),s('type.list.list'('type.closSem.v'),X26),s('type.list.list'('type.closSem.v'),X20),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X29),s('type.num.num',X30))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1111_2'(s(fun(fun('type.num.num',bool),bool),'?_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',bool))))),'_dst_x00000x11111_2'(s(fun(fun('type.sptree.spt'('type.num.num'),bool),bool),'?_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool)))))),'_dst_x000000x101000x110111_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.num.num','type.num.num'),'_i_0_0'))),s(fun('type.num.num',fun('type.closLang.exp',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool))))),'_dst_x00000x11111x11011_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool))))),'_dst_x00000x11011x00100_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'=_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))))),'_dst_x011x100_2'(s(fun('type.closLang.exp',fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))))),'_dst_x0x1_2'(s(fun('type.list.list'('type.closLang.exp'),fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),'type.list.list'('type.closLang.exp'))))),'const.clos_annotate.shift_0'),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x0x1_2'(s(fun('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set'),'type.list.list'('type.closLang.exp')),'const.pair.FST_0'),s(fun('type.closLang.exp','type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set')),'_dst_x0x1_2'(s(fun('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closLang.exp'),'type.db_vars.db_var_set')),'const.clos_free.free_0'),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))),s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X28))))))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool)))),'_dst_x0000x1111x0110_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),bool)))),'_dst_x0000x1111_2'(s(fun(fun('type.num.num',bool),bool),'!_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.num.num',bool))))),'_dst_x00000x11001x10111_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',bool))),'_dst_x000x011x101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.closLang.exp',fun('type.num.num',bool)),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.list.list'('type.closLang.exp'),bool)),'const.closProps.fv_0'),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s(fun('type.num.num',fun('type.num.num',bool)),'_dst_x0x1_2'(s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.<=_0'),s(fun('type.num.num','type.num.num'),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X28))))))))),s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.num.num',bool)))),'_dst_x0000x0100x0000x0010x0000x0000x1001_7'(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))))),X9),s(fun('type.num.num','type.num.num'),'_i_0_0'),s('type.num.num','const.num.|48|_0'),s(fun('type.sptree.spt'('type.num.num'),'type.sptree.spt'('type.num.num')),'_i_0_0'),s('type.list.list'('type.closSem.v'),X19),s('type.list.list'('type.closSem.v'),X20),s(fun('type.num.num',fun('type.num.num','type.num.num')),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.-_0'),s(fun('type.num.num','type.num.num'),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X28))))))))))))),s(fun('type.closLang.exp',fun('type.num.num',bool)),'_dst_x00x10x01_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.closLang.exp',bool),'_dst_x0x1_2'(s(fun('type.list.list'('type.closLang.exp'),bool),'const.closProps.every_Fn_vs_NONE_0'),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X19))))))))))))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X28),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X29)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X8),s('type.list.list'('type.closSem.v'),X25),s('type.list.list'('type.closSem.v'),X26)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X30),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X28)))))))) => p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X8),s('type.closSem.v',X10))),s('type.closSem.v',X11))))) & ! [X31,X32,X33,X34,X35,X36] : ((p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.<=_0'),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X32))),s('type.num.num',X31))))),s('type.num.num',X36)))) | (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X36),s('type.num.num',X32)))) & p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X8),s('type.closSem.v','const.list.EL_2'(s('type.num.num',X36),s('type.list.list'('type.closSem.v'),X34))))),s('type.closSem.v','const.list.EL_2'(s('type.num.num',X36),s('type.list.list'('type.closSem.v'),X35)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X36),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X34)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X36),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X35))))))) | ? [X37] : (p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.arithmetic.<=_0'),s('type.num.num',X32))),s('type.num.num',X36)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X36),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X32))),s('type.num.num',X31)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X36),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X32))),s('type.num.num',X31)))))) & s('type.option.option'('type.num.num'),'const.option.SOME_1'(s('type.num.num',X37))) = s('type.option.option'('type.num.num'),'const.sptree.lookup_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.-_0'),s('type.num.num',X36))),s('type.num.num',X32))),s('type.sptree.spt'('type.num.num'),X33))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X36),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X34)))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X32))),s('type.num.num',X37))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X35)))))) & p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X8),s('type.closSem.v','const.list.EL_2'(s('type.num.num',X36),s('type.list.list'('type.closSem.v'),X34))))),s('type.closSem.v','const.list.EL_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X32))),s('type.num.num',X37))),s('type.list.list'('type.closSem.v'),X35)))))))) => p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)),happ(s(fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))),happ(s(fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))),happ(s(fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool))))),happ(s(fun('type.num.num',fun('type.num.num',fun('type.sptree.spt'('type.num.num'),fun('type.list.list'('type.closSem.v'),fun('type.list.list'('type.closSem.v'),fun('type.num.num',bool)))))),X9),s('type.num.num',X31))),s('type.num.num',X32))),s('type.sptree.spt'('type.num.num'),X33))),s('type.list.list'('type.closSem.v'),X34))),s('type.list.list'('type.closSem.v'),X35))),s('type.num.num',X36)))))) => p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X8),s('type.closSem.v',X5))),s('type.closSem.v',X7))))))),
  file('thm.clos_annotateProof.v_rel_rules|split|1','thm.clos_annotateProof.v_rel|49|_def')).
fof(f635,plain,(
  ~p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),sK46('const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK7)),'const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK7)))),s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK7))))),s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK7))))))),
  inference(resolution,[],[f443,f599])).
fof(f599,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.clos_annotateProof.v_rel_2'(s('type.closSem.v',X0),s('type.closSem.v',X1)))) | ~p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),sK46(X1,X0)),s('type.closSem.v',X0))),s('type.closSem.v',X1))))) )),
  inference(cnf_transformation,[],[f433])).
% SZS output end Proof for thm.clos_annotateProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 174
% Passive clauses: 2506
% Generated clauses: 5714
% Final active clauses: 165
% Final passive clauses: 2421
% Input formulas: 261
% Initial clauses: 188
% 
% Selected by SInE selection: 51
% SInE iterations: 1
% 
% Duplicate literals: 94
% Trivial inequalities: 47
% Fw subsumption resolutions: 712
% Fw demodulations: 414
% Bw demodulations: 4
% 
% Simple tautologies: 151
% Equational tautologies: 1
% Forward subsumptions: 1698
% 
% Binary resolution: 1016
% Factoring: 1
% Forward superposition: 2882
% Backward superposition: 533
% Equality resolution: 10
% 
% Split clauses: 130
% Split components: 403
% SAT solver clauses: 144
% SAT solver unit clauses: 13
% SAT solver binary clauses: 64
% 
% Sat splits: 130
% Sat splitting refutations: 13
% 
% Memory used [KB]: 9978
% Time elapsed: 0.406 s
% ------------------------------
% ------------------------------
% Success in time 12.2 s
