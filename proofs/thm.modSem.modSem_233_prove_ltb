Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.modSem
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.modSem
% SZS output start Proof for thm.modSem
fof(f2236,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f2235,f132,f235,f233,f231,f229,f1494,f1493,f1495])).
fof(f1495,plain,(
  $false | $spl0),
  inference(subsumption_resolution,[],[f229,f133])).
fof(f133,plain,(
  ( ! [X8,X7] : (s('type.modLang.dec',sK6) != s('type.modLang.dec','const.modLang.Dlet_2'(s('type.num.num',X7),s('type.modLang.exp',X8)))) )),
  inference(cnf_transformation,[],[f90])).
fof(f90,plain,(
  (s('type.modLang.dec',sK6) = s('type.modLang.dec','const.modLang.Dlet_2'(s('type.num.num',sK7),s('type.modLang.exp',sK8))) | s('type.modLang.dec',sK6) = s('type.modLang.dec','const.modLang.Dletrec_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),sK9))) | s('type.modLang.dec',sK6) = s('type.modLang.dec','const.modLang.Dtype_2'(s('type.option.option'('type.list.list'('type.string.char')),sK10),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))))),sK11))) | s('type.modLang.dec',sK6) = s('type.modLang.dec','const.modLang.Dexn_3'(s('type.option.option'('type.list.list'('type.string.char')),sK12),s('type.list.list'('type.string.char'),sK13),s('type.list.list'('type.ast.t'),sK14)))) & ! [X7,X8] : s('type.modLang.dec',sK6) != s('type.modLang.dec','const.modLang.Dlet_2'(s('type.num.num',X7),s('type.modLang.exp',X8))) & ! [X6] : s('type.modLang.dec',sK6) != s('type.modLang.dec','const.modLang.Dletrec_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X6))) & ! [X4,X5] : s('type.modLang.dec',sK6) != s('type.modLang.dec','const.modLang.Dtype_2'(s('type.option.option'('type.list.list'('type.string.char')),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))))),X5))) & ! [X1,X2,X3] : s('type.modLang.dec',sK6) != s('type.modLang.dec','const.modLang.Dexn_3'(s('type.option.option'('type.list.list'('type.string.char')),X1),s('type.list.list'('type.string.char'),X2),s('type.list.list'('type.ast.t'),X3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK6,sK7,sK8,sK9,sK10,sK11,sK12,sK13,sK14])],[f89])).
fof(f89,plain,(
  ? [X0] : ((? [X15,X16] : s('type.modLang.dec',X0) = s('type.modLang.dec','const.modLang.Dlet_2'(s('type.num.num',X15),s('type.modLang.exp',X16))) | ? [X14] : s('type.modLang.dec',X0) = s('type.modLang.dec','const.modLang.Dletrec_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X14))) | ? [X12,X13] : s('type.modLang.dec',X0) = s('type.modLang.dec','const.modLang.Dtype_2'(s('type.option.option'('type.list.list'('type.string.char')),X12),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))))),X13))) | ? [X9,X10,X11] : s('type.modLang.dec',X0) = s('type.modLang.dec','const.modLang.Dexn_3'(s('type.option.option'('type.list.list'('type.string.char')),X9),s('type.list.list'('type.string.char'),X10),s('type.list.list'('type.ast.t'),X11)))) & ! [X7,X8] : s('type.modLang.dec',X0) != s('type.modLang.dec','const.modLang.Dlet_2'(s('type.num.num',X7),s('type.modLang.exp',X8))) & ! [X6] : s('type.modLang.dec',X0) != s('type.modLang.dec','const.modLang.Dletrec_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X6))) & ! [X4,X5] : s('type.modLang.dec',X0) != s('type.modLang.dec','const.modLang.Dtype_2'(s('type.option.option'('type.list.list'('type.string.char')),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))))),X5))) & ! [X1,X2,X3] : s('type.modLang.dec',X0) != s('type.modLang.dec','const.modLang.Dexn_3'(s('type.option.option'('type.list.list'('type.string.char')),X1),s('type.list.list'('type.string.char'),X2),s('type.list.list'('type.ast.t'),X3))))),
  inference(rectify,[],[f64])).
fof(f64,plain,(
  ? [X0] : ((? [X7,X8] : s('type.modLang.dec',X0) = s('type.modLang.dec','const.modLang.Dlet_2'(s('type.num.num',X7),s('type.modLang.exp',X8))) | ? [X6] : s('type.modLang.dec',X0) = s('type.modLang.dec','const.modLang.Dletrec_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X6))) | ? [X4,X5] : s('type.modLang.dec',X0) = s('type.modLang.dec','const.modLang.Dtype_2'(s('type.option.option'('type.list.list'('type.string.char')),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))))),X5))) | ? [X1,X2,X3] : s('type.modLang.dec',X0) = s('type.modLang.dec','const.modLang.Dexn_3'(s('type.option.option'('type.list.list'('type.string.char')),X1),s('type.list.list'('type.string.char'),X2),s('type.list.list'('type.ast.t'),X3)))) & ! [X15,X16] : s('type.modLang.dec',X0) != s('type.modLang.dec','const.modLang.Dlet_2'(s('type.num.num',X15),s('type.modLang.exp',X16))) & ! [X14] : s('type.modLang.dec',X0) != s('type.modLang.dec','const.modLang.Dletrec_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X14))) & ! [X12,X13] : s('type.modLang.dec',X0) != s('type.modLang.dec','const.modLang.Dtype_2'(s('type.option.option'('type.list.list'('type.string.char')),X12),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))))),X13))) & ! [X9,X10,X11] : s('type.modLang.dec',X0) != s('type.modLang.dec','const.modLang.Dexn_3'(s('type.option.option'('type.list.list'('type.string.char')),X9),s('type.list.list'('type.string.char'),X10),s('type.list.list'('type.ast.t'),X11))))),
  inference(flattening,[],[f63])).
fof(f63,plain,(
  ? [X0] : ((? [X7,X8] : s('type.modLang.dec',X0) = s('type.modLang.dec','const.modLang.Dlet_2'(s('type.num.num',X7),s('type.modLang.exp',X8))) | ? [X6] : s('type.modLang.dec',X0) = s('type.modLang.dec','const.modLang.Dletrec_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X6))) | ? [X4,X5] : s('type.modLang.dec',X0) = s('type.modLang.dec','const.modLang.Dtype_2'(s('type.option.option'('type.list.list'('type.string.char')),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))))),X5))) | ? [X1,X2,X3] : s('type.modLang.dec',X0) = s('type.modLang.dec','const.modLang.Dexn_3'(s('type.option.option'('type.list.list'('type.string.char')),X1),s('type.list.list'('type.string.char'),X2),s('type.list.list'('type.ast.t'),X3)))) & (! [X15,X16] : s('type.modLang.dec',X0) != s('type.modLang.dec','const.modLang.Dlet_2'(s('type.num.num',X15),s('type.modLang.exp',X16))) & ! [X14] : s('type.modLang.dec',X0) != s('type.modLang.dec','const.modLang.Dletrec_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X14))) & ! [X12,X13] : s('type.modLang.dec',X0) != s('type.modLang.dec','const.modLang.Dtype_2'(s('type.option.option'('type.list.list'('type.string.char')),X12),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))))),X13))) & ! [X9,X10,X11] : s('type.modLang.dec',X0) != s('type.modLang.dec','const.modLang.Dexn_3'(s('type.option.option'('type.list.list'('type.string.char')),X9),s('type.list.list'('type.string.char'),X10),s('type.list.list'('type.ast.t'),X11)))))),
  inference(ennf_transformation,[],[f28])).
fof(f28,plain,(
  ~! [X0] : ((? [X7,X8] : s('type.modLang.dec',X0) = s('type.modLang.dec','const.modLang.Dlet_2'(s('type.num.num',X7),s('type.modLang.exp',X8))) | ? [X6] : s('type.modLang.dec',X0) = s('type.modLang.dec','const.modLang.Dletrec_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X6))) | ? [X4,X5] : s('type.modLang.dec',X0) = s('type.modLang.dec','const.modLang.Dtype_2'(s('type.option.option'('type.list.list'('type.string.char')),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))))),X5))) | ? [X1,X2,X3] : s('type.modLang.dec',X0) = s('type.modLang.dec','const.modLang.Dexn_3'(s('type.option.option'('type.list.list'('type.string.char')),X1),s('type.list.list'('type.string.char'),X2),s('type.list.list'('type.ast.t'),X3)))) => (? [X15,X16] : s('type.modLang.dec',X0) = s('type.modLang.dec','const.modLang.Dlet_2'(s('type.num.num',X15),s('type.modLang.exp',X16))) | ? [X14] : s('type.modLang.dec',X0) = s('type.modLang.dec','const.modLang.Dletrec_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X14))) | ? [X12,X13] : s('type.modLang.dec',X0) = s('type.modLang.dec','const.modLang.Dtype_2'(s('type.option.option'('type.list.list'('type.string.char')),X12),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))))),X13))) | ? [X9,X10,X11] : s('type.modLang.dec',X0) = s('type.modLang.dec','const.modLang.Dexn_3'(s('type.option.option'('type.list.list'('type.string.char')),X9),s('type.list.list'('type.string.char'),X10),s('type.list.list'('type.ast.t'),X11)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ((? [X7,X8] : s('type.modLang.dec',X6) = s('type.modLang.dec','const.modLang.Dlet_2'(s('type.num.num',X7),s('type.modLang.exp',X8))) | ? [X9] : s('type.modLang.dec',X6) = s('type.modLang.dec','const.modLang.Dletrec_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X9))) | ? [X10,X11] : s('type.modLang.dec',X6) = s('type.modLang.dec','const.modLang.Dtype_2'(s('type.option.option'('type.list.list'('type.string.char')),X10),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))))),X11))) | ? [X12,X13,X14] : s('type.modLang.dec',X6) = s('type.modLang.dec','const.modLang.Dexn_3'(s('type.option.option'('type.list.list'('type.string.char')),X12),s('type.list.list'('type.string.char'),X13),s('type.list.list'('type.ast.t'),X14)))) => (? [X7,X8] : s('type.modLang.dec',X6) = s('type.modLang.dec','const.modLang.Dlet_2'(s('type.num.num',X7),s('type.modLang.exp',X8))) | ? [X9] : s('type.modLang.dec',X6) = s('type.modLang.dec','const.modLang.Dletrec_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X9))) | ? [X10,X11] : s('type.modLang.dec',X6) = s('type.modLang.dec','const.modLang.Dtype_2'(s('type.option.option'('type.list.list'('type.string.char')),X10),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))))),X11))) | ? [X12,X13,X14] : s('type.modLang.dec',X6) = s('type.modLang.dec','const.modLang.Dexn_3'(s('type.option.option'('type.list.list'('type.string.char')),X12),s('type.list.list'('type.string.char'),X13),s('type.list.list'('type.ast.t'),X14)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ((? [X7,X8] : s('type.modLang.dec',X6) = s('type.modLang.dec','const.modLang.Dlet_2'(s('type.num.num',X7),s('type.modLang.exp',X8))) | ? [X9] : s('type.modLang.dec',X6) = s('type.modLang.dec','const.modLang.Dletrec_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X9))) | ? [X10,X11] : s('type.modLang.dec',X6) = s('type.modLang.dec','const.modLang.Dtype_2'(s('type.option.option'('type.list.list'('type.string.char')),X10),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))))),X11))) | ? [X12,X13,X14] : s('type.modLang.dec',X6) = s('type.modLang.dec','const.modLang.Dexn_3'(s('type.option.option'('type.list.list'('type.string.char')),X12),s('type.list.list'('type.string.char'),X13),s('type.list.list'('type.ast.t'),X14)))) => (? [X7,X8] : s('type.modLang.dec',X6) = s('type.modLang.dec','const.modLang.Dlet_2'(s('type.num.num',X7),s('type.modLang.exp',X8))) | ? [X9] : s('type.modLang.dec',X6) = s('type.modLang.dec','const.modLang.Dletrec_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X9))) | ? [X10,X11] : s('type.modLang.dec',X6) = s('type.modLang.dec','const.modLang.Dtype_2'(s('type.option.option'('type.list.list'('type.string.char')),X10),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))))),X11))) | ? [X12,X13,X14] : s('type.modLang.dec',X6) = s('type.modLang.dec','const.modLang.Dexn_3'(s('type.option.option'('type.list.list'('type.string.char')),X12),s('type.list.list'('type.string.char'),X13),s('type.list.list'('type.ast.t'),X14)))))),
  file('thm.modSem.modSem_233_prove_ltb','thm.modSem.modSem_233_prove_ltb')).
fof(f1493,plain,(
  $false | $spl6),
  inference(subsumption_resolution,[],[f235,f136])).
fof(f136,plain,(
  ( ! [X2,X3,X1] : (s('type.modLang.dec',sK6) != s('type.modLang.dec','const.modLang.Dexn_3'(s('type.option.option'('type.list.list'('type.string.char')),X1),s('type.list.list'('type.string.char'),X2),s('type.list.list'('type.ast.t'),X3)))) )),
  inference(cnf_transformation,[],[f90])).
fof(f1494,plain,(
  $false | $spl2),
  inference(subsumption_resolution,[],[f231,f134])).
fof(f134,plain,(
  ( ! [X6] : (s('type.modLang.dec',sK6) != s('type.modLang.dec','const.modLang.Dletrec_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X6)))) )),
  inference(cnf_transformation,[],[f90])).
fof(f229,plain,(
  s('type.modLang.dec',sK6) = s('type.modLang.dec','const.modLang.Dlet_2'(s('type.num.num',sK7),s('type.modLang.exp',sK8))) | $spl0),
  inference(cnf_transformation,[],[f229_D])).
fof(f229_D,plain,(
  s('type.modLang.dec',sK6) = s('type.modLang.dec','const.modLang.Dlet_2'(s('type.num.num',sK7),s('type.modLang.exp',sK8))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f231,plain,(
  s('type.modLang.dec',sK6) = s('type.modLang.dec','const.modLang.Dletrec_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),sK9))) | $spl2),
  inference(cnf_transformation,[],[f231_D])).
fof(f231_D,plain,(
  s('type.modLang.dec',sK6) = s('type.modLang.dec','const.modLang.Dletrec_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),sK9))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f233,plain,(
  s('type.modLang.dec',sK6) = s('type.modLang.dec','const.modLang.Dtype_2'(s('type.option.option'('type.list.list'('type.string.char')),sK10),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))))),sK11))) | $spl4),
  inference(cnf_transformation,[],[f233_D])).
fof(f233_D,plain,(
  s('type.modLang.dec',sK6) = s('type.modLang.dec','const.modLang.Dtype_2'(s('type.option.option'('type.list.list'('type.string.char')),sK10),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))))),sK11))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f235,plain,(
  s('type.modLang.dec',sK6) = s('type.modLang.dec','const.modLang.Dexn_3'(s('type.option.option'('type.list.list'('type.string.char')),sK12),s('type.list.list'('type.string.char'),sK13),s('type.list.list'('type.ast.t'),sK14))) | $spl6),
  inference(cnf_transformation,[],[f235_D])).
fof(f235_D,plain,(
  s('type.modLang.dec',sK6) = s('type.modLang.dec','const.modLang.Dexn_3'(s('type.option.option'('type.list.list'('type.string.char')),sK12),s('type.list.list'('type.string.char'),sK13),s('type.list.list'('type.ast.t'),sK14))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f132,plain,(
  s('type.modLang.dec',sK6) = s('type.modLang.dec','const.modLang.Dexn_3'(s('type.option.option'('type.list.list'('type.string.char')),sK12),s('type.list.list'('type.string.char'),sK13),s('type.list.list'('type.ast.t'),sK14))) | s('type.modLang.dec',sK6) = s('type.modLang.dec','const.modLang.Dtype_2'(s('type.option.option'('type.list.list'('type.string.char')),sK10),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))))),sK11))) | s('type.modLang.dec',sK6) = s('type.modLang.dec','const.modLang.Dletrec_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),sK9))) | s('type.modLang.dec',sK6) = s('type.modLang.dec','const.modLang.Dlet_2'(s('type.num.num',sK7),s('type.modLang.exp',sK8)))),
  inference(cnf_transformation,[],[f90])).
fof(f2235,plain,(
  $false | $spl4),
  inference(subsumption_resolution,[],[f233,f135])).
fof(f135,plain,(
  ( ! [X4,X5] : (s('type.modLang.dec',sK6) != s('type.modLang.dec','const.modLang.Dtype_2'(s('type.option.option'('type.list.list'('type.string.char')),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))))),X5)))) )),
  inference(cnf_transformation,[],[f90])).
% SZS output end Proof for thm.modSem
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 186
% Passive clauses: 897
% Generated clauses: 2097
% Final active clauses: 186
% Final passive clauses: 647
% Input formulas: 26
% Initial clauses: 95
% 
% Duplicate literals: 39
% Trivial inequalities: 13
% Fw subsumption resolutions: 145
% 
% Simple tautologies: 61
% Equational tautologies: 15
% Forward subsumptions: 910
% 
% Binary resolution: 1410
% Factoring: 204
% Forward superposition: 96
% Backward superposition: 59
% Self superposition: 2
% Equality factoring: 2
% Equality resolution: 8
% 
% Split clauses: 43
% Split components: 89
% SAT solver clauses: 82
% SAT solver unit clauses: 10
% SAT solver binary clauses: 29
% SAT solver learnt clauses: 1
% 
% Sat splits: 43
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 81
% TWLsolver calls for satisfiability: 61
% 
% Memory used [KB]: 1407
% Time elapsed: 0.067 s
% ------------------------------
% ------------------------------
% Success in time 0.07 s
