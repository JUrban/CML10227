Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.mod_to_conProof
% (22515)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 89
% Passive clauses: 3770
% Generated clauses: 13982
% Final active clauses: 85
% Final passive clauses: 3577
% Input formulas: 21
% Initial clauses: 36
% 
% Duplicate literals: 787
% Trivial inequalities: 101
% Fw subsumption resolutions: 1510
% Fw demodulations: 537
% Bw demodulations: 1
% 
% Simple tautologies: 247
% Equational tautologies: 76
% Forward subsumptions: 6003
% 
% Binary resolution: 165
% Factoring: 2
% Forward superposition: 6008
% Backward superposition: 4737
% Self superposition: 331
% Equality factoring: 188
% Equality resolution: 9
% 
% Split clauses: 397
% Split components: 798
% SAT solver clauses: 1053
% SAT solver unit clauses: 23
% SAT solver binary clauses: 214
% 
% Sat splits: 397
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 1051
% TWLsolver calls for satisfiability: 117
% 
% Memory used [KB]: 11769
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.mod_to_conProof
% (22564)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 55
% Passive clauses: 581
% Generated clauses: 5979
% Final active clauses: 54
% Final passive clauses: 514
% Input formulas: 21
% Initial clauses: 36
% 
% Duplicate literals: 468
% Trivial inequalities: 39
% Fw subsumption resolutions: 222
% Fw demodulations: 127
% Bw demodulations: 11
% Condensations: 977
% Global subsumptions: 1
% 
% Simple tautologies: 100
% Equational tautologies: 58
% Forward subsumptions: 2432
% 
% Binary resolution: 117
% Factoring: 2
% Forward superposition: 1960
% Backward superposition: 2084
% Self superposition: 205
% Equality factoring: 142
% Equality resolution: 7
% 
% Split clauses: 8
% Split components: 16
% SAT solver clauses: 950
% SAT solver unit clauses: 48
% SAT solver binary clauses: 37
% SAT solver learnt clauses: 2
% 
% Sat splits: 8
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 946
% TWLsolver calls for satisfiability: 442
% 
% Memory used [KB]: 8059
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.mod_to_conProof
% (22602)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 264
% Passive clauses: 14714
% Generated clauses: 86582
% Final active clauses: 92
% Final passive clauses: 547
% Input formulas: 21
% Initial clauses: 36
% Discarded non-redundant clauses: 7725
% 
% Duplicate literals: 3615
% Trivial inequalities: 480
% Fw subsumption resolutions: 4145
% Fw demodulations: 5934
% Bw demodulations: 11542
% Condensations: 7336
% Global subsumptions: 697
% 
% Simple tautologies: 670
% Equational tautologies: 770
% Forward subsumptions: 45867
% Fw demodulations to eq. taut.: 2
% Bw demodulations to eq. taut.: 386
% 
% Unit resulting resolution: 3988
% Factoring: 4
% Forward superposition: 17350
% Backward superposition: 11544
% Self superposition: 376
% Equality factoring: 212
% Equality resolution: 23
% 
% Split clauses: 190
% Split components: 402
% SAT solver clauses: 16837
% SAT solver unit clauses: 218
% SAT solver binary clauses: 1529
% 
% Sat splits: 190
% Sat splitting refutations: 1044
% 
% Memory used [KB]: 55009
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 32 next slice time: 32
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.mod_to_conProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.mod_to_conProof
% SZS output start Proof for thm.mod_to_conProof
fof(f104,plain,(
  $false),
  inference(equality_resolution,[],[f102])).
fof(f102,plain,(
  ( ! [X0] : (s('type.pair.prod'('type.modSem.state'(sK1),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),X0) != s('type.pair.prod'('type.modSem.state'(sK1),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_prompt_3'(s('type.modSem.environment',sK5),s('type.modSem.state'(sK1),sK2),s('type.modLang.prompt','const.modLang.Prompt_2'(s('type.option.option'('type.list.list'('type.string.char')),sK3),s('type.list.list'('type.modLang.dec'),sK4)))))) )),
  inference(superposition,[],[f100,f52])).
fof(f52,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK6(X2,X1,X0)),s(X1,sK7(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f44])).
fof(f44,plain,(
  ! [X0,X1,X2] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK6(X2,X1,X0)),s(X1,sK7(X2,X1,X0))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK6,sK7])],[f26])).
fof(f26,plain,(
  ! [X0,X1,X2] : ? [X3,X4] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X4)))),
  inference(flattening,[],[f25])).
fof(f25,plain,(
  ! [X0,X1] : ! [X2] : ? [X3,X4] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X4)))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X6,X35] : ! [X36] : ? [X37,X32] : s('type.pair.prod'(X6,X35),X36) = s('type.pair.prod'(X6,X35),'const.pair.,_2'(s(X6,X37),s(X35,X32)))),
  file('thm.mod_to_conProof.mod_to_conProof_27|48|_prove_ltb','thm.pair.ABS_PAIR_THM')).
fof(f100,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.modSem.state'(sK1),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_prompt_3'(s('type.modSem.environment',sK5),s('type.modSem.state'(sK1),sK2),s('type.modLang.prompt','const.modLang.Prompt_2'(s('type.option.option'('type.list.list'('type.string.char')),sK3),s('type.list.list'('type.modLang.dec'),sK4))))) != s('type.pair.prod'('type.modSem.state'(sK1),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.pair.,_2'(s('type.modSem.state'(sK1),X1),s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')))),X0)))) )),
  inference(superposition,[],[f93,f52])).
fof(f93,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'('type.modSem.state'(sK1),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_prompt_3'(s('type.modSem.environment',sK5),s('type.modSem.state'(sK1),sK2),s('type.modLang.prompt','const.modLang.Prompt_2'(s('type.option.option'('type.list.list'('type.string.char')),sK3),s('type.list.list'('type.modLang.dec'),sK4))))) != s('type.pair.prod'('type.modSem.state'(sK1),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.pair.,_2'(s('type.modSem.state'(sK1),X1),s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X2),s('type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))),X0)))))) )),
  inference(superposition,[],[f51,f52])).
fof(f51,plain,(
  ( ! [X6,X8,X7,X5] : (s('type.pair.prod'('type.modSem.state'(sK1),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_prompt_3'(s('type.modSem.environment',sK5),s('type.modSem.state'(sK1),sK2),s('type.modLang.prompt','const.modLang.Prompt_2'(s('type.option.option'('type.list.list'('type.string.char')),sK3),s('type.list.list'('type.modLang.dec'),sK4))))) != s('type.pair.prod'('type.modSem.state'(sK1),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.pair.,_2'(s('type.modSem.state'(sK1),X5),s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X6),s('type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))),'const.pair.,_2'(s('type.list.list'('type.option.option'('type.modSem.v')),X7),s('type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')),X8)))))))) )),
  inference(cnf_transformation,[],[f43])).
fof(f43,plain,(
  ! [X5,X6,X7,X8] : s('type.pair.prod'('type.modSem.state'(sK1),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_prompt_3'(s('type.modSem.environment',sK5),s('type.modSem.state'(sK1),sK2),s('type.modLang.prompt','const.modLang.Prompt_2'(s('type.option.option'('type.list.list'('type.string.char')),sK3),s('type.list.list'('type.modLang.dec'),sK4))))) != s('type.pair.prod'('type.modSem.state'(sK1),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.pair.,_2'(s('type.modSem.state'(sK1),X5),s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X6),s('type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))),'const.pair.,_2'(s('type.list.list'('type.option.option'('type.modSem.v')),X7),s('type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')),X8)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK1,sK2,sK3,sK4,sK5])],[f36])).
fof(f36,plain,(
  ? [X0,X1,X2,X3,X4] : ! [X5,X6,X7,X8] : s('type.pair.prod'('type.modSem.state'(X0),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_prompt_3'(s('type.modSem.environment',X4),s('type.modSem.state'(X0),X1),s('type.modLang.prompt','const.modLang.Prompt_2'(s('type.option.option'('type.list.list'('type.string.char')),X2),s('type.list.list'('type.modLang.dec'),X3))))) != s('type.pair.prod'('type.modSem.state'(X0),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.pair.,_2'(s('type.modSem.state'(X0),X5),s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X6),s('type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))),'const.pair.,_2'(s('type.list.list'('type.option.option'('type.modSem.v')),X7),s('type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')),X8)))))))),
  inference(ennf_transformation,[],[f24])).
fof(f24,plain,(
  ~! [X0,X1,X2,X3,X4] : ? [X5,X6,X7,X8] : s('type.pair.prod'('type.modSem.state'(X0),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_prompt_3'(s('type.modSem.environment',X4),s('type.modSem.state'(X0),X1),s('type.modLang.prompt','const.modLang.Prompt_2'(s('type.option.option'('type.list.list'('type.string.char')),X2),s('type.list.list'('type.modLang.dec'),X3))))) = s('type.pair.prod'('type.modSem.state'(X0),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.pair.,_2'(s('type.modSem.state'(X0),X5),s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X6),s('type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))),'const.pair.,_2'(s('type.list.list'('type.option.option'('type.modSem.v')),X7),s('type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')),X8)))))))),
  inference(flattening,[],[f23])).
fof(f23,plain,(
  ~! [X0] : ! [X1,X2,X3,X4] : ? [X5,X6,X7,X8] : s('type.pair.prod'('type.modSem.state'(X0),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_prompt_3'(s('type.modSem.environment',X4),s('type.modSem.state'(X0),X1),s('type.modLang.prompt','const.modLang.Prompt_2'(s('type.option.option'('type.list.list'('type.string.char')),X2),s('type.list.list'('type.modLang.dec'),X3))))) = s('type.pair.prod'('type.modSem.state'(X0),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.pair.,_2'(s('type.modSem.state'(X0),X5),s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X6),s('type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))),'const.pair.,_2'(s('type.list.list'('type.option.option'('type.modSem.v')),X7),s('type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')),X8)))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9,X10] : ? [X11,X12,X13,X14] : s('type.pair.prod'('type.modSem.state'(X6),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_prompt_3'(s('type.modSem.environment',X10),s('type.modSem.state'(X6),X7),s('type.modLang.prompt','const.modLang.Prompt_2'(s('type.option.option'('type.list.list'('type.string.char')),X8),s('type.list.list'('type.modLang.dec'),X9))))) = s('type.pair.prod'('type.modSem.state'(X6),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.pair.,_2'(s('type.modSem.state'(X6),X11),s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X12),s('type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))),'const.pair.,_2'(s('type.list.list'('type.option.option'('type.modSem.v')),X13),s('type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')),X14)))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9,X10] : ? [X11,X12,X13,X14] : s('type.pair.prod'('type.modSem.state'(X6),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_prompt_3'(s('type.modSem.environment',X10),s('type.modSem.state'(X6),X7),s('type.modLang.prompt','const.modLang.Prompt_2'(s('type.option.option'('type.list.list'('type.string.char')),X8),s('type.list.list'('type.modLang.dec'),X9))))) = s('type.pair.prod'('type.modSem.state'(X6),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.pair.,_2'(s('type.modSem.state'(X6),X11),s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X12),s('type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))),'const.pair.,_2'(s('type.list.list'('type.option.option'('type.modSem.v')),X13),s('type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')),X14)))))))),
  file('thm.mod_to_conProof.mod_to_conProof_27|48|_prove_ltb','thm.mod_to_conProof.mod_to_conProof_27|48|_prove_ltb')).
% SZS output end Proof for thm.mod_to_conProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 20
% Passive clauses: 4
% Generated clauses: 32
% Final active clauses: 20
% Input formulas: 21
% Initial clauses: 22
% 
% Selected by SInE selection: 8
% SInE iterations: 1
% 
% Simple tautologies: 5
% Forward subsumptions: 27
% 
% Forward superposition: 31
% Equality resolution: 1
% 
% SAT solver clauses: 1
% 
% Memory used [KB]: 1663
% Time elapsed: 0.008 s
% ------------------------------
% ------------------------------
% Success in time 11.74 s
