Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.misc
% (117845)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 157
% Passive clauses: 4530
% Generated clauses: 27482
% Final active clauses: 132
% Final passive clauses: 3800
% Input formulas: 29
% Initial clauses: 63
% 
% Duplicate literals: 1379
% Trivial inequalities: 482
% Fw subsumption resolutions: 4051
% Fw demodulations: 2834
% Bw demodulations: 16
% 
% Simple tautologies: 548
% Equational tautologies: 69
% Forward subsumptions: 11250
% Fw demodulations to eq. taut.: 13
% Bw demodulations to eq. taut.: 2
% 
% Binary resolution: 290
% Factoring: 2
% Forward superposition: 9009
% Backward superposition: 8630
% Self superposition: 304
% Equality factoring: 203
% Equality resolution: 40
% 
% Split clauses: 1326
% Split components: 2720
% SAT solver clauses: 2587
% SAT solver unit clauses: 13
% SAT solver binary clauses: 199
% 
% Sat splits: 1326
% Sat splitting refutations: 8
% 
% TWLsolver clauses: 2527
% TWLsolver calls for satisfiability: 241
% 
% Memory used [KB]: 13816
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.misc
% (117865)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 68
% Passive clauses: 687
% Generated clauses: 6037
% Final active clauses: 65
% Final passive clauses: 603
% Input formulas: 29
% Initial clauses: 63
% 
% Duplicate literals: 492
% Trivial inequalities: 66
% Fw subsumption resolutions: 470
% Fw demodulations: 169
% Bw demodulations: 15
% Condensations: 910
% Global subsumptions: 9
% 
% Simple tautologies: 125
% Equational tautologies: 43
% Forward subsumptions: 2011
% 
% Binary resolution: 150
% Factoring: 3
% Forward superposition: 1609
% Backward superposition: 1178
% Self superposition: 108
% Equality factoring: 98
% Equality resolution: 16
% 
% Split clauses: 34
% Split components: 69
% SAT solver clauses: 1113
% SAT solver unit clauses: 69
% SAT solver binary clauses: 47
% SAT solver learnt clauses: 18
% 
% Sat splits: 34
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 1077
% TWLsolver calls for satisfiability: 261
% 
% Memory used [KB]: 6524
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.misc
% (117895)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 585
% Passive clauses: 18672
% Generated clauses: 151279
% Final active clauses: 98
% Final passive clauses: 1188
% Input formulas: 29
% Initial clauses: 63
% Discarded non-redundant clauses: 1770
% 
% Duplicate literals: 4679
% Trivial inequalities: 1201
% Fw subsumption resolutions: 8484
% Fw demodulations: 19225
% Bw demodulations: 13384
% Condensations: 7574
% Global subsumptions: 172
% 
% Simple tautologies: 1395
% Equational tautologies: 976
% Forward subsumptions: 87271
% Fw demodulations to eq. taut.: 840
% Bw demodulations to eq. taut.: 384
% 
% Unit resulting resolution: 5889
% Factoring: 1
% Forward superposition: 29682
% Backward superposition: 27870
% Self superposition: 437
% Equality factoring: 202
% Equality resolution: 110
% 
% Split clauses: 225
% Split components: 463
% SAT solver clauses: 19634
% SAT solver unit clauses: 61
% SAT solver binary clauses: 2322
% 
% Sat splits: 225
% Sat splitting refutations: 338
% 
% Memory used [KB]: 56289
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 32 next slice time: 32
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.misc
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.misc
% SZS output start Proof for thm.misc
fof(f6818,plain,(
  $false),
  inference(trivial_inequality_removal,[],[f6817])).
fof(f6817,plain,(
  s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK5(sK1,sK0)))) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK5(sK1,sK0))))),
  inference(forward_demodulation,[],[f6816,f792])).
fof(f792,plain,(
  s(sK0,sK5(sK1,sK0)) = s(sK0,sK5('const.option.SOME_1'(s(sK0,sK5(sK1,sK0))),sK0))),
  inference(trivial_inequality_removal,[],[f780])).
fof(f780,plain,(
  s('type.option.option'(sK0),sK1) != s('type.option.option'(sK0),sK1) | s(sK0,sK5(sK1,sK0)) = s(sK0,sK5('const.option.SOME_1'(s(sK0,sK5(sK1,sK0))),sK0))),
  inference(superposition,[],[f221,f263])).
fof(f263,plain,(
  s('type.option.option'(sK0),sK1) = s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK5('const.option.SOME_1'(s(sK0,sK5(sK1,sK0))),sK0))))),
  inference(forward_demodulation,[],[f262,f209])).
fof(f209,plain,(
  s('type.option.option'(sK0),sK1) = s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK5(sK1,sK0))))),
  inference(trivial_inequality_removal,[],[f202])).
fof(f202,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') != s('type.option.option'(sK0),'const.option.NONE_0') | s('type.option.option'(sK0),sK1) = s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK5(sK1,sK0))))),
  inference(superposition,[],[f188,f130])).
fof(f130,plain,(
  ( ! [X0,X1] : (s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK5(X1,X0)))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1)) )),
  inference(cnf_transformation,[],[f85])).
fof(f85,plain,(
  ! [X0,X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1) | s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK5(X1,X0)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK5])],[f49])).
fof(f49,plain,(
  ! [X0,X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1) | ? [X2] : s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))))),
  inference(flattening,[],[f48])).
fof(f48,plain,(
  ! [X0] : ! [X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1) | ? [X2] : s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))))),
  inference(rectify,[],[f24])).
fof(f24,axiom,(
  ! [X6] : ! [X15] : (s('type.option.option'(X6),'const.option.NONE_0') = s('type.option.option'(X6),X15) | ? [X11] : s('type.option.option'(X6),X15) = s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X11))))),
  file('thm.misc.OPTION_BIND_SOME','thm.option.option_nchotomy')).
fof(f188,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') != s('type.option.option'(sK0),sK1)),
  inference(duplicate_literal_removal,[],[f180])).
fof(f180,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') != s('type.option.option'(sK0),sK1) | s('type.option.option'(sK0),'const.option.NONE_0') != s('type.option.option'(sK0),sK1)),
  inference(superposition,[],[f108,f114])).
fof(f114,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),'const.option.OPTION_BIND_2'(s('type.option.option'(X0),X2),s(fun(X0,'type.option.option'(X1)),X3))) | s('type.option.option'(X0),'const.option.NONE_0') != s('type.option.option'(X0),X2)) )),
  inference(cnf_transformation,[],[f78])).
fof(f78,plain,(
  ! [X0,X1,X2,X3] : ((s('type.option.option'(X1),'const.option.NONE_0') != s('type.option.option'(X1),'const.option.OPTION_BIND_2'(s('type.option.option'(X0),X2),s(fun(X0,'type.option.option'(X1)),X3))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X2) | (s('type.option.option'(X0),X2) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK3(X3,X2,X1,X0)))) & s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),happ(s(fun(X0,'type.option.option'(X1)),X3),s(X0,sK3(X3,X2,X1,X0)))))) & ((s('type.option.option'(X0),'const.option.NONE_0') != s('type.option.option'(X0),X2) & ! [X4] : (s('type.option.option'(X0),X2) != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X4))) | s('type.option.option'(X1),'const.option.NONE_0') != s('type.option.option'(X1),happ(s(fun(X0,'type.option.option'(X1)),X3),s(X0,X4))))) | s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),'const.option.OPTION_BIND_2'(s('type.option.option'(X0),X2),s(fun(X0,'type.option.option'(X1)),X3)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK3])],[f77])).
fof(f77,plain,(
  ! [X0,X1,X2,X3] : ((s('type.option.option'(X1),'const.option.NONE_0') != s('type.option.option'(X1),'const.option.OPTION_BIND_2'(s('type.option.option'(X0),X2),s(fun(X0,'type.option.option'(X1)),X3))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X2) | ? [X5] : (s('type.option.option'(X0),X2) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X5))) & s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),happ(s(fun(X0,'type.option.option'(X1)),X3),s(X0,X5))))) & ((s('type.option.option'(X0),'const.option.NONE_0') != s('type.option.option'(X0),X2) & ! [X4] : (s('type.option.option'(X0),X2) != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X4))) | s('type.option.option'(X1),'const.option.NONE_0') != s('type.option.option'(X1),happ(s(fun(X0,'type.option.option'(X1)),X3),s(X0,X4))))) | s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),'const.option.OPTION_BIND_2'(s('type.option.option'(X0),X2),s(fun(X0,'type.option.option'(X1)),X3)))))),
  inference(rectify,[],[f76])).
fof(f76,plain,(
  ! [X0,X1,X2,X3] : ((s('type.option.option'(X1),'const.option.NONE_0') != s('type.option.option'(X1),'const.option.OPTION_BIND_2'(s('type.option.option'(X0),X2),s(fun(X0,'type.option.option'(X1)),X3))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X2) | ? [X4] : (s('type.option.option'(X0),X2) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X4))) & s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),happ(s(fun(X0,'type.option.option'(X1)),X3),s(X0,X4))))) & ((s('type.option.option'(X0),'const.option.NONE_0') != s('type.option.option'(X0),X2) & ! [X4] : (s('type.option.option'(X0),X2) != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X4))) | s('type.option.option'(X1),'const.option.NONE_0') != s('type.option.option'(X1),happ(s(fun(X0,'type.option.option'(X1)),X3),s(X0,X4))))) | s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),'const.option.OPTION_BIND_2'(s('type.option.option'(X0),X2),s(fun(X0,'type.option.option'(X1)),X3)))))),
  inference(flattening,[],[f75])).
fof(f75,plain,(
  ! [X0,X1,X2,X3] : ((s('type.option.option'(X1),'const.option.NONE_0') != s('type.option.option'(X1),'const.option.OPTION_BIND_2'(s('type.option.option'(X0),X2),s(fun(X0,'type.option.option'(X1)),X3))) | (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X2) | ? [X4] : (s('type.option.option'(X0),X2) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X4))) & s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),happ(s(fun(X0,'type.option.option'(X1)),X3),s(X0,X4)))))) & ((s('type.option.option'(X0),'const.option.NONE_0') != s('type.option.option'(X0),X2) & ! [X4] : (s('type.option.option'(X0),X2) != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X4))) | s('type.option.option'(X1),'const.option.NONE_0') != s('type.option.option'(X1),happ(s(fun(X0,'type.option.option'(X1)),X3),s(X0,X4))))) | s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),'const.option.OPTION_BIND_2'(s('type.option.option'(X0),X2),s(fun(X0,'type.option.option'(X1)),X3)))))),
  inference(nnf_transformation,[],[f36])).
fof(f36,plain,(
  ! [X0,X1,X2,X3] : (s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),'const.option.OPTION_BIND_2'(s('type.option.option'(X0),X2),s(fun(X0,'type.option.option'(X1)),X3))) <=> (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X2) | ? [X4] : (s('type.option.option'(X0),X2) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X4))) & s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),happ(s(fun(X0,'type.option.option'(X1)),X3),s(X0,X4))))))),
  inference(flattening,[],[f35])).
fof(f35,plain,(
  ! [X0,X1] : ! [X2,X3] : (s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),'const.option.OPTION_BIND_2'(s('type.option.option'(X0),X2),s(fun(X0,'type.option.option'(X1)),X3))) <=> (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X2) | ? [X4] : (s('type.option.option'(X0),X2) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X4))) & s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),happ(s(fun(X0,'type.option.option'(X1)),X3),s(X0,X4))))))),
  inference(rectify,[],[f27])).
fof(f27,axiom,(
  ! [X6,X16] : ! [X17,X7] : (s('type.option.option'(X16),'const.option.NONE_0') = s('type.option.option'(X16),'const.option.OPTION_BIND_2'(s('type.option.option'(X6),X17),s(fun(X6,'type.option.option'(X16)),X7))) <=> (s('type.option.option'(X6),'const.option.NONE_0') = s('type.option.option'(X6),X17) | ? [X11] : (s('type.option.option'(X6),X17) = s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X11))) & s('type.option.option'(X16),'const.option.NONE_0') = s('type.option.option'(X16),happ(s(fun(X6,'type.option.option'(X16)),X7),s(X6,X11))))))),
  file('thm.misc.OPTION_BIND_SOME','thm.option.OPTION_BIND_EQUALS_OPTION|split|0')).
fof(f108,plain,(
  s('type.option.option'(sK0),sK1) != s('type.option.option'(sK0),'const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK1),s(fun(sK0,'type.option.option'(sK0)),'const.option.SOME_0')))),
  inference(cnf_transformation,[],[f71])).
fof(f71,plain,(
  s('type.option.option'(sK0),sK1) != s('type.option.option'(sK0),'const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK1),s(fun(sK0,'type.option.option'(sK0)),'const.option.SOME_0')))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1])],[f67])).
fof(f67,plain,(
  ? [X0,X1] : s('type.option.option'(X0),X1) != s('type.option.option'(X0),'const.option.OPTION_BIND_2'(s('type.option.option'(X0),X1),s(fun(X0,'type.option.option'(X0)),'const.option.SOME_0')))),
  inference(ennf_transformation,[],[f32])).
fof(f32,plain,(
  ~! [X0,X1] : s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.OPTION_BIND_2'(s('type.option.option'(X0),X1),s(fun(X0,'type.option.option'(X0)),'const.option.SOME_0')))),
  inference(flattening,[],[f31])).
fof(f31,plain,(
  ~! [X0] : ! [X1] : s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.OPTION_BIND_2'(s('type.option.option'(X0),X1),s(fun(X0,'type.option.option'(X0)),'const.option.SOME_0')))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : s('type.option.option'(X6),X7) = s('type.option.option'(X6),'const.option.OPTION_BIND_2'(s('type.option.option'(X6),X7),s(fun(X6,'type.option.option'(X6)),'const.option.SOME_0')))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : s('type.option.option'(X6),X7) = s('type.option.option'(X6),'const.option.OPTION_BIND_2'(s('type.option.option'(X6),X7),s(fun(X6,'type.option.option'(X6)),'const.option.SOME_0')))),
  file('thm.misc.OPTION_BIND_SOME','thm.misc.OPTION_BIND_SOME')).
fof(f262,plain,(
  s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK5(sK1,sK0)))) = s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK5('const.option.SOME_1'(s(sK0,sK5(sK1,sK0))),sK0))))),
  inference(subsumption_resolution,[],[f214,f188])).
fof(f214,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),sK1) | s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK5(sK1,sK0)))) = s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK5('const.option.SOME_1'(s(sK0,sK5(sK1,sK0))),sK0))))),
  inference(superposition,[],[f209,f130])).
fof(f221,plain,(
  ( ! [X19] : (s('type.option.option'(sK0),sK1) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,X19))) | s(sK0,X19) = s(sK0,sK5(sK1,sK0))) )),
  inference(superposition,[],[f123,f209])).
fof(f123,plain,(
  ( ! [X2,X0,X1] : (s(X0,X1) = s(X0,X2) | s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2)))) )),
  inference(cnf_transformation,[],[f82])).
fof(f82,plain,(
  ! [X0,X1,X2] : ((s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) | s(X0,X1) = s(X0,X2)) & (s(X0,X1) != s(X0,X2) | s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2)))))),
  inference(nnf_transformation,[],[f41])).
fof(f41,plain,(
  ! [X0,X1,X2] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) <=> s(X0,X1) = s(X0,X2))),
  inference(flattening,[],[f40])).
fof(f40,plain,(
  ! [X0] : ! [X1,X2] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) <=> s(X0,X1) = s(X0,X2))),
  inference(rectify,[],[f25])).
fof(f25,axiom,(
  ! [X6] : ! [X11,X12] : (s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X11))) = s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X12))) <=> s(X6,X11) = s(X6,X12))),
  file('thm.misc.OPTION_BIND_SOME','thm.option.SOME_|49||49|')).
fof(f6816,plain,(
  s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK5(sK1,sK0)))) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK5('const.option.SOME_1'(s(sK0,sK5(sK1,sK0))),sK0))))),
  inference(forward_demodulation,[],[f6815,f133])).
fof(f133,plain,(
  ( ! [X0,X1] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) = s('type.option.option'(X0),happ(s(fun(X0,'type.option.option'(X0)),'const.option.SOME_0'),s(X0,X1)))) )),
  inference(cnf_transformation,[],[f53])).
fof(f53,plain,(
  ! [X0,X1] : s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) = s('type.option.option'(X0),happ(s(fun(X0,'type.option.option'(X0)),'const.option.SOME_0'),s(X0,X1)))),
  inference(flattening,[],[f52])).
fof(f52,plain,(
  ! [X0] : ! [X1] : s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) = s('type.option.option'(X0),happ(s(fun(X0,'type.option.option'(X0)),'const.option.SOME_0'),s(X0,X1)))),
  inference(rectify,[],[f29])).
fof(f29,axiom,(
  ! [X6] : ! [X18] : s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X18))) = s('type.option.option'(X6),happ(s(fun(X6,'type.option.option'(X6)),'const.option.SOME_0'),s(X6,X18)))),
  file('thm.misc.OPTION_BIND_SOME','ARITY_0_1_const.option.SOME')).
fof(f6815,plain,(
  s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK5('const.option.SOME_1'(s(sK0,sK5(sK1,sK0))),sK0)))) != s('type.option.option'(sK0),happ(s(fun(sK0,'type.option.option'(sK0)),'const.option.SOME_0'),s(sK0,sK5(sK1,sK0))))),
  inference(subsumption_resolution,[],[f6789,f209])).
fof(f6789,plain,(
  s('type.option.option'(sK0),sK1) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK5(sK1,sK0)))) | s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK5('const.option.SOME_1'(s(sK0,sK5(sK1,sK0))),sK0)))) != s('type.option.option'(sK0),happ(s(fun(sK0,'type.option.option'(sK0)),'const.option.SOME_0'),s(sK0,sK5(sK1,sK0))))),
  inference(superposition,[],[f991,f792])).
fof(f991,plain,(
  ( ! [X0] : (s('type.option.option'(sK0),sK1) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,X0))) | s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,X0))) != s('type.option.option'(sK0),happ(s(fun(sK0,'type.option.option'(sK0)),'const.option.SOME_0'),s(sK0,sK5(sK1,sK0))))) )),
  inference(trivial_inequality_removal,[],[f979])).
fof(f979,plain,(
  ( ! [X0] : (s('type.option.option'(sK0),sK1) != s('type.option.option'(sK0),sK1) | s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,X0))) != s('type.option.option'(sK0),happ(s(fun(sK0,'type.option.option'(sK0)),'const.option.SOME_0'),s(sK0,sK5(sK1,sK0)))) | s('type.option.option'(sK0),sK1) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,X0)))) )),
  inference(superposition,[],[f182,f209])).
fof(f182,plain,(
  ( ! [X2,X1] : (s('type.option.option'(sK0),sK1) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,X2))) | s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,X1))) != s('type.option.option'(sK0),happ(s(fun(sK0,'type.option.option'(sK0)),'const.option.SOME_0'),s(sK0,X2))) | s('type.option.option'(sK0),sK1) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,X1)))) )),
  inference(superposition,[],[f108,f111])).
fof(f111,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))) = s('type.option.option'(X1),'const.option.OPTION_BIND_2'(s('type.option.option'(X0),X3),s(fun(X0,'type.option.option'(X1)),X4))) | s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))) != s('type.option.option'(X1),happ(s(fun(X0,'type.option.option'(X1)),X4),s(X0,X5))) | s('type.option.option'(X0),X3) != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X5)))) )),
  inference(cnf_transformation,[],[f74])).
fof(f74,plain,(
  ! [X0,X1,X2,X3,X4] : ((s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))) != s('type.option.option'(X1),'const.option.OPTION_BIND_2'(s('type.option.option'(X0),X3),s(fun(X0,'type.option.option'(X1)),X4))) | (s('type.option.option'(X0),X3) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK2(X4,X3,X2,X1,X0)))) & s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))) = s('type.option.option'(X1),happ(s(fun(X0,'type.option.option'(X1)),X4),s(X0,sK2(X4,X3,X2,X1,X0)))))) & (! [X5] : (s('type.option.option'(X0),X3) != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X5))) | s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))) != s('type.option.option'(X1),happ(s(fun(X0,'type.option.option'(X1)),X4),s(X0,X5)))) | s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))) = s('type.option.option'(X1),'const.option.OPTION_BIND_2'(s('type.option.option'(X0),X3),s(fun(X0,'type.option.option'(X1)),X4)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK2])],[f73])).
fof(f73,plain,(
  ! [X0,X1,X2,X3,X4] : ((s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))) != s('type.option.option'(X1),'const.option.OPTION_BIND_2'(s('type.option.option'(X0),X3),s(fun(X0,'type.option.option'(X1)),X4))) | ? [X6] : (s('type.option.option'(X0),X3) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X6))) & s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))) = s('type.option.option'(X1),happ(s(fun(X0,'type.option.option'(X1)),X4),s(X0,X6))))) & (! [X5] : (s('type.option.option'(X0),X3) != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X5))) | s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))) != s('type.option.option'(X1),happ(s(fun(X0,'type.option.option'(X1)),X4),s(X0,X5)))) | s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))) = s('type.option.option'(X1),'const.option.OPTION_BIND_2'(s('type.option.option'(X0),X3),s(fun(X0,'type.option.option'(X1)),X4)))))),
  inference(rectify,[],[f72])).
fof(f72,plain,(
  ! [X0,X1,X2,X3,X4] : ((s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))) != s('type.option.option'(X1),'const.option.OPTION_BIND_2'(s('type.option.option'(X0),X3),s(fun(X0,'type.option.option'(X1)),X4))) | ? [X5] : (s('type.option.option'(X0),X3) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X5))) & s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))) = s('type.option.option'(X1),happ(s(fun(X0,'type.option.option'(X1)),X4),s(X0,X5))))) & (! [X5] : (s('type.option.option'(X0),X3) != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X5))) | s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))) != s('type.option.option'(X1),happ(s(fun(X0,'type.option.option'(X1)),X4),s(X0,X5)))) | s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))) = s('type.option.option'(X1),'const.option.OPTION_BIND_2'(s('type.option.option'(X0),X3),s(fun(X0,'type.option.option'(X1)),X4)))))),
  inference(nnf_transformation,[],[f34])).
fof(f34,plain,(
  ! [X0,X1,X2,X3,X4] : (s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))) = s('type.option.option'(X1),'const.option.OPTION_BIND_2'(s('type.option.option'(X0),X3),s(fun(X0,'type.option.option'(X1)),X4))) <=> ? [X5] : (s('type.option.option'(X0),X3) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X5))) & s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))) = s('type.option.option'(X1),happ(s(fun(X0,'type.option.option'(X1)),X4),s(X0,X5)))))),
  inference(flattening,[],[f33])).
fof(f33,plain,(
  ! [X0,X1] : ! [X2,X3,X4] : (s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))) = s('type.option.option'(X1),'const.option.OPTION_BIND_2'(s('type.option.option'(X0),X3),s(fun(X0,'type.option.option'(X1)),X4))) <=> ? [X5] : (s('type.option.option'(X0),X3) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X5))) & s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))) = s('type.option.option'(X1),happ(s(fun(X0,'type.option.option'(X1)),X4),s(X0,X5)))))),
  inference(rectify,[],[f28])).
fof(f28,axiom,(
  ! [X6,X16] : ! [X12,X17,X7] : (s('type.option.option'(X16),'const.option.SOME_1'(s(X16,X12))) = s('type.option.option'(X16),'const.option.OPTION_BIND_2'(s('type.option.option'(X6),X17),s(fun(X6,'type.option.option'(X16)),X7))) <=> ? [X11] : (s('type.option.option'(X6),X17) = s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X11))) & s('type.option.option'(X16),'const.option.SOME_1'(s(X16,X12))) = s('type.option.option'(X16),happ(s(fun(X6,'type.option.option'(X16)),X7),s(X6,X11)))))),
  file('thm.misc.OPTION_BIND_SOME','thm.option.OPTION_BIND_EQUALS_OPTION|split|1')).
% SZS output end Proof for thm.misc
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 133
% Passive clauses: 2240
% Generated clauses: 6607
% Final active clauses: 118
% Final passive clauses: 1934
% Input formulas: 29
% Initial clauses: 62
% 
% Selected by SInE selection: 28
% SInE iterations: 1
% 
% Duplicate literals: 66
% Trivial inequalities: 271
% Fw subsumption resolutions: 415
% Fw demodulations: 1208
% Bw demodulations: 2
% 
% Simple tautologies: 125
% Equational tautologies: 3
% Forward subsumptions: 2158
% Fw demodulations to eq. taut.: 154
% Bw demodulations to eq. taut.: 7
% 
% Binary resolution: 110
% Forward superposition: 2457
% Backward superposition: 2006
% Self superposition: 17
% Equality factoring: 1
% Equality resolution: 38
% 
% Split clauses: 26
% Split components: 52
% SAT solver clauses: 34
% SAT solver unit clauses: 2
% SAT solver binary clauses: 16
% 
% Sat splits: 26
% Sat splitting refutations: 7
% 
% Memory used [KB]: 6140
% Time elapsed: 0.155 s
% ------------------------------
% ------------------------------
% Success in time 11.87 s
