Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.wordProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.wordProps
% SZS output start Proof for thm.wordProps
fof(f4818,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f4817,f224,f446,f444,f442,f440,f438,f436,f434,f432,f430,f428,f426,f424,f422,f420,f418,f416,f414,f231,f413,f4815,f4814,f4813,f4452,f4451,f4450,f3994,f3993,f3992,f3991,f3990,f3989,f3988,f240,f441,f4816])).
fof(f4816,plain,(
  $false | $spl14),
  inference(subsumption_resolution,[],[f428,f228])).
fof(f228,plain,(
  ( ! [X26,X27] : (s('type.wordLang.prog'(sK12),sK13) != s('type.wordLang.prog'(sK12),'const.wordLang.MustTerminate_2'(s('type.num.num',X26),s('type.wordLang.prog'(sK12),X27)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f139,plain,(
  (s('type.wordLang.prog'(sK12),'const.wordLang.Skip_0') = s('type.wordLang.prog'(sK12),sK13) | s('type.wordLang.prog'(sK12),sK13) = s('type.wordLang.prog'(sK12),'const.wordLang.Move_2'(s('type.num.num',sK14),s('type.list.list'('type.pair.prod'('type.num.num','type.num.num')),sK15))) | s('type.wordLang.prog'(sK12),sK13) = s('type.wordLang.prog'(sK12),'const.wordLang.Inst_1'(s('type.asm.inst'(sK12),sK16))) | s('type.wordLang.prog'(sK12),sK13) = s('type.wordLang.prog'(sK12),'const.wordLang.Assign_2'(s('type.num.num',sK17),s('type.wordLang.exp'(sK12),sK18))) | s('type.wordLang.prog'(sK12),sK13) = s('type.wordLang.prog'(sK12),'const.wordLang.Get_2'(s('type.num.num',sK19),s('type.wordLang.store_name',sK20))) | s('type.wordLang.prog'(sK12),sK13) = s('type.wordLang.prog'(sK12),'const.wordLang.Set_2'(s('type.wordLang.store_name',sK21),s('type.wordLang.exp'(sK12),sK22))) | s('type.wordLang.prog'(sK12),sK13) = s('type.wordLang.prog'(sK12),'const.wordLang.Store_2'(s('type.wordLang.exp'(sK12),sK23),s('type.num.num',sK24))) | s('type.wordLang.prog'(sK12),sK13) = s('type.wordLang.prog'(sK12),'const.wordLang.MustTerminate_2'(s('type.num.num',sK25),s('type.wordLang.prog'(sK12),sK26))) | s('type.wordLang.prog'(sK12),sK13) = s('type.wordLang.prog'(sK12),'const.wordLang.Call_4'(s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.sptree.spt'('type.one.one'),'type.pair.prod'('type.wordLang.prog'(sK12),'type.pair.prod'('type.num.num','type.num.num'))))),sK27),s('type.option.option'('type.num.num'),sK28),s('type.list.list'('type.num.num'),sK29),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK12),'type.pair.prod'('type.num.num','type.num.num')))),sK30))) | s('type.wordLang.prog'(sK12),sK13) = s('type.wordLang.prog'(sK12),'const.wordLang.Seq_2'(s('type.wordLang.prog'(sK12),sK31),s('type.wordLang.prog'(sK12),sK32))) | s('type.wordLang.prog'(sK12),sK13) = s('type.wordLang.prog'(sK12),'const.wordLang.If_5'(s('type.asm.cmp',sK33),s('type.num.num',sK34),s('type.asm.reg_imm'(sK12),sK35),s('type.wordLang.prog'(sK12),sK36),s('type.wordLang.prog'(sK12),sK37))) | s('type.wordLang.prog'(sK12),sK13) = s('type.wordLang.prog'(sK12),'const.wordLang.Alloc_2'(s('type.num.num',sK38),s('type.sptree.spt'('type.one.one'),sK39))) | s('type.wordLang.prog'(sK12),sK13) = s('type.wordLang.prog'(sK12),'const.wordLang.Raise_1'(s('type.num.num',sK40))) | s('type.wordLang.prog'(sK12),sK13) = s('type.wordLang.prog'(sK12),'const.wordLang.Return_2'(s('type.num.num',sK41),s('type.num.num',sK42))) | s('type.wordLang.prog'(sK12),'const.wordLang.Tick_0') = s('type.wordLang.prog'(sK12),sK13) | s('type.wordLang.prog'(sK12),sK13) = s('type.wordLang.prog'(sK12),'const.wordLang.LocValue_3'(s('type.num.num',sK43),s('type.num.num',sK44),s('type.num.num',sK45))) | s('type.wordLang.prog'(sK12),sK13) = s('type.wordLang.prog'(sK12),'const.wordLang.FFI_4'(s('type.num.num',sK46),s('type.num.num',sK47),s('type.num.num',sK48),s('type.sptree.spt'('type.one.one'),sK49)))) & ! [X36,X37] : s('type.wordLang.prog'(sK12),sK13) != s('type.wordLang.prog'(sK12),'const.wordLang.Alloc_2'(s('type.num.num',X36),s('type.sptree.spt'('type.one.one'),X37))) & ! [X32,X33,X34,X35] : s('type.wordLang.prog'(sK12),sK13) != s('type.wordLang.prog'(sK12),'const.wordLang.Call_4'(s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.sptree.spt'('type.one.one'),'type.pair.prod'('type.wordLang.prog'(sK12),'type.pair.prod'('type.num.num','type.num.num'))))),X32),s('type.option.option'('type.num.num'),X33),s('type.list.list'('type.num.num'),X34),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK12),'type.pair.prod'('type.num.num','type.num.num')))),X35))) & ! [X28,X29,X30,X31] : s('type.wordLang.prog'(sK12),sK13) != s('type.wordLang.prog'(sK12),'const.wordLang.FFI_4'(s('type.num.num',X28),s('type.num.num',X29),s('type.num.num',X30),s('type.sptree.spt'('type.one.one'),X31))) & ! [X26,X27] : s('type.wordLang.prog'(sK12),sK13) != s('type.wordLang.prog'(sK12),'const.wordLang.MustTerminate_2'(s('type.num.num',X26),s('type.wordLang.prog'(sK12),X27))) & ! [X24,X25] : s('type.wordLang.prog'(sK12),sK13) != s('type.wordLang.prog'(sK12),'const.wordLang.Seq_2'(s('type.wordLang.prog'(sK12),X24),s('type.wordLang.prog'(sK12),X25))) & ! [X19,X20,X21,X22,X23] : s('type.wordLang.prog'(sK12),sK13) != s('type.wordLang.prog'(sK12),'const.wordLang.If_5'(s('type.asm.cmp',X19),s('type.num.num',X20),s('type.asm.reg_imm'(sK12),X21),s('type.wordLang.prog'(sK12),X22),s('type.wordLang.prog'(sK12),X23))) & s('type.wordLang.prog'(sK12),'const.wordLang.Skip_0') != s('type.wordLang.prog'(sK12),sK13) & ! [X17,X18] : s('type.wordLang.prog'(sK12),sK13) != s('type.wordLang.prog'(sK12),'const.wordLang.Move_2'(s('type.num.num',X17),s('type.list.list'('type.pair.prod'('type.num.num','type.num.num')),X18))) & ! [X16] : s('type.wordLang.prog'(sK12),sK13) != s('type.wordLang.prog'(sK12),'const.wordLang.Inst_1'(s('type.asm.inst'(sK12),X16))) & ! [X14,X15] : s('type.wordLang.prog'(sK12),sK13) != s('type.wordLang.prog'(sK12),'const.wordLang.Assign_2'(s('type.num.num',X14),s('type.wordLang.exp'(sK12),X15))) & ! [X12,X13] : s('type.wordLang.prog'(sK12),sK13) != s('type.wordLang.prog'(sK12),'const.wordLang.Get_2'(s('type.num.num',X12),s('type.wordLang.store_name',X13))) & ! [X10,X11] : s('type.wordLang.prog'(sK12),sK13) != s('type.wordLang.prog'(sK12),'const.wordLang.Set_2'(s('type.wordLang.store_name',X10),s('type.wordLang.exp'(sK12),X11))) & ! [X8,X9] : s('type.wordLang.prog'(sK12),sK13) != s('type.wordLang.prog'(sK12),'const.wordLang.Store_2'(s('type.wordLang.exp'(sK12),X8),s('type.num.num',X9))) & ! [X7] : s('type.wordLang.prog'(sK12),sK13) != s('type.wordLang.prog'(sK12),'const.wordLang.Raise_1'(s('type.num.num',X7))) & ! [X5,X6] : s('type.wordLang.prog'(sK12),sK13) != s('type.wordLang.prog'(sK12),'const.wordLang.Return_2'(s('type.num.num',X5),s('type.num.num',X6))) & s('type.wordLang.prog'(sK12),'const.wordLang.Tick_0') != s('type.wordLang.prog'(sK12),sK13) & ! [X2,X3,X4] : s('type.wordLang.prog'(sK12),sK13) != s('type.wordLang.prog'(sK12),'const.wordLang.LocValue_3'(s('type.num.num',X2),s('type.num.num',X3),s('type.num.num',X4)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14,sK15,sK16,sK17,sK18,sK19,sK20,sK21,sK22,sK23,sK24,sK25,sK26,sK27,sK28,sK29,sK30,sK31,sK32,sK33,sK34,sK35,sK36,sK37,sK38,sK39,sK40,sK41,sK42,sK43,sK44,sK45,sK46,sK47,sK48,sK49])],[f138])).
fof(f138,plain,(
  ? [X0,X1] : ((s('type.wordLang.prog'(X0),'const.wordLang.Skip_0') = s('type.wordLang.prog'(X0),X1) | ? [X72,X73] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Move_2'(s('type.num.num',X72),s('type.list.list'('type.pair.prod'('type.num.num','type.num.num')),X73))) | ? [X71] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Inst_1'(s('type.asm.inst'(X0),X71))) | ? [X69,X70] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Assign_2'(s('type.num.num',X69),s('type.wordLang.exp'(X0),X70))) | ? [X67,X68] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Get_2'(s('type.num.num',X67),s('type.wordLang.store_name',X68))) | ? [X65,X66] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Set_2'(s('type.wordLang.store_name',X65),s('type.wordLang.exp'(X0),X66))) | ? [X63,X64] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Store_2'(s('type.wordLang.exp'(X0),X63),s('type.num.num',X64))) | ? [X61,X62] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.MustTerminate_2'(s('type.num.num',X61),s('type.wordLang.prog'(X0),X62))) | ? [X57,X58,X59,X60] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Call_4'(s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.sptree.spt'('type.one.one'),'type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num'))))),X57),s('type.option.option'('type.num.num'),X58),s('type.list.list'('type.num.num'),X59),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')))),X60))) | ? [X55,X56] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Seq_2'(s('type.wordLang.prog'(X0),X55),s('type.wordLang.prog'(X0),X56))) | ? [X50,X51,X52,X53,X54] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.If_5'(s('type.asm.cmp',X50),s('type.num.num',X51),s('type.asm.reg_imm'(X0),X52),s('type.wordLang.prog'(X0),X53),s('type.wordLang.prog'(X0),X54))) | ? [X48,X49] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Alloc_2'(s('type.num.num',X48),s('type.sptree.spt'('type.one.one'),X49))) | ? [X47] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Raise_1'(s('type.num.num',X47))) | ? [X45,X46] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Return_2'(s('type.num.num',X45),s('type.num.num',X46))) | s('type.wordLang.prog'(X0),'const.wordLang.Tick_0') = s('type.wordLang.prog'(X0),X1) | ? [X42,X43,X44] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.LocValue_3'(s('type.num.num',X42),s('type.num.num',X43),s('type.num.num',X44))) | ? [X38,X39,X40,X41] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.FFI_4'(s('type.num.num',X38),s('type.num.num',X39),s('type.num.num',X40),s('type.sptree.spt'('type.one.one'),X41)))) & ! [X36,X37] : s('type.wordLang.prog'(X0),X1) != s('type.wordLang.prog'(X0),'const.wordLang.Alloc_2'(s('type.num.num',X36),s('type.sptree.spt'('type.one.one'),X37))) & ! [X32,X33,X34,X35] : s('type.wordLang.prog'(X0),X1) != s('type.wordLang.prog'(X0),'const.wordLang.Call_4'(s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.sptree.spt'('type.one.one'),'type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num'))))),X32),s('type.option.option'('type.num.num'),X33),s('type.list.list'('type.num.num'),X34),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')))),X35))) & ! [X28,X29,X30,X31] : s('type.wordLang.prog'(X0),X1) != s('type.wordLang.prog'(X0),'const.wordLang.FFI_4'(s('type.num.num',X28),s('type.num.num',X29),s('type.num.num',X30),s('type.sptree.spt'('type.one.one'),X31))) & ! [X26,X27] : s('type.wordLang.prog'(X0),X1) != s('type.wordLang.prog'(X0),'const.wordLang.MustTerminate_2'(s('type.num.num',X26),s('type.wordLang.prog'(X0),X27))) & ! [X24,X25] : s('type.wordLang.prog'(X0),X1) != s('type.wordLang.prog'(X0),'const.wordLang.Seq_2'(s('type.wordLang.prog'(X0),X24),s('type.wordLang.prog'(X0),X25))) & ! [X19,X20,X21,X22,X23] : s('type.wordLang.prog'(X0),X1) != s('type.wordLang.prog'(X0),'const.wordLang.If_5'(s('type.asm.cmp',X19),s('type.num.num',X20),s('type.asm.reg_imm'(X0),X21),s('type.wordLang.prog'(X0),X22),s('type.wordLang.prog'(X0),X23))) & s('type.wordLang.prog'(X0),'const.wordLang.Skip_0') != s('type.wordLang.prog'(X0),X1) & ! [X17,X18] : s('type.wordLang.prog'(X0),X1) != s('type.wordLang.prog'(X0),'const.wordLang.Move_2'(s('type.num.num',X17),s('type.list.list'('type.pair.prod'('type.num.num','type.num.num')),X18))) & ! [X16] : s('type.wordLang.prog'(X0),X1) != s('type.wordLang.prog'(X0),'const.wordLang.Inst_1'(s('type.asm.inst'(X0),X16))) & ! [X14,X15] : s('type.wordLang.prog'(X0),X1) != s('type.wordLang.prog'(X0),'const.wordLang.Assign_2'(s('type.num.num',X14),s('type.wordLang.exp'(X0),X15))) & ! [X12,X13] : s('type.wordLang.prog'(X0),X1) != s('type.wordLang.prog'(X0),'const.wordLang.Get_2'(s('type.num.num',X12),s('type.wordLang.store_name',X13))) & ! [X10,X11] : s('type.wordLang.prog'(X0),X1) != s('type.wordLang.prog'(X0),'const.wordLang.Set_2'(s('type.wordLang.store_name',X10),s('type.wordLang.exp'(X0),X11))) & ! [X8,X9] : s('type.wordLang.prog'(X0),X1) != s('type.wordLang.prog'(X0),'const.wordLang.Store_2'(s('type.wordLang.exp'(X0),X8),s('type.num.num',X9))) & ! [X7] : s('type.wordLang.prog'(X0),X1) != s('type.wordLang.prog'(X0),'const.wordLang.Raise_1'(s('type.num.num',X7))) & ! [X5,X6] : s('type.wordLang.prog'(X0),X1) != s('type.wordLang.prog'(X0),'const.wordLang.Return_2'(s('type.num.num',X5),s('type.num.num',X6))) & s('type.wordLang.prog'(X0),'const.wordLang.Tick_0') != s('type.wordLang.prog'(X0),X1) & ! [X2,X3,X4] : s('type.wordLang.prog'(X0),X1) != s('type.wordLang.prog'(X0),'const.wordLang.LocValue_3'(s('type.num.num',X2),s('type.num.num',X3),s('type.num.num',X4))))),
  inference(rectify,[],[f98])).
fof(f98,plain,(
  ? [X0,X1] : ((s('type.wordLang.prog'(X0),'const.wordLang.Skip_0') = s('type.wordLang.prog'(X0),X1) | ? [X36,X37] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Move_2'(s('type.num.num',X36),s('type.list.list'('type.pair.prod'('type.num.num','type.num.num')),X37))) | ? [X35] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Inst_1'(s('type.asm.inst'(X0),X35))) | ? [X33,X34] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Assign_2'(s('type.num.num',X33),s('type.wordLang.exp'(X0),X34))) | ? [X31,X32] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Get_2'(s('type.num.num',X31),s('type.wordLang.store_name',X32))) | ? [X29,X30] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Set_2'(s('type.wordLang.store_name',X29),s('type.wordLang.exp'(X0),X30))) | ? [X27,X28] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Store_2'(s('type.wordLang.exp'(X0),X27),s('type.num.num',X28))) | ? [X25,X26] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.MustTerminate_2'(s('type.num.num',X25),s('type.wordLang.prog'(X0),X26))) | ? [X21,X22,X23,X24] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Call_4'(s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.sptree.spt'('type.one.one'),'type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num'))))),X21),s('type.option.option'('type.num.num'),X22),s('type.list.list'('type.num.num'),X23),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')))),X24))) | ? [X19,X20] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Seq_2'(s('type.wordLang.prog'(X0),X19),s('type.wordLang.prog'(X0),X20))) | ? [X14,X15,X16,X17,X18] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.If_5'(s('type.asm.cmp',X14),s('type.num.num',X15),s('type.asm.reg_imm'(X0),X16),s('type.wordLang.prog'(X0),X17),s('type.wordLang.prog'(X0),X18))) | ? [X12,X13] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Alloc_2'(s('type.num.num',X12),s('type.sptree.spt'('type.one.one'),X13))) | ? [X11] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Raise_1'(s('type.num.num',X11))) | ? [X9,X10] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Return_2'(s('type.num.num',X9),s('type.num.num',X10))) | s('type.wordLang.prog'(X0),'const.wordLang.Tick_0') = s('type.wordLang.prog'(X0),X1) | ? [X6,X7,X8] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.LocValue_3'(s('type.num.num',X6),s('type.num.num',X7),s('type.num.num',X8))) | ? [X2,X3,X4,X5] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.FFI_4'(s('type.num.num',X2),s('type.num.num',X3),s('type.num.num',X4),s('type.sptree.spt'('type.one.one'),X5)))) & ! [X72,X73] : s('type.wordLang.prog'(X0),X1) != s('type.wordLang.prog'(X0),'const.wordLang.Alloc_2'(s('type.num.num',X72),s('type.sptree.spt'('type.one.one'),X73))) & ! [X68,X69,X70,X71] : s('type.wordLang.prog'(X0),X1) != s('type.wordLang.prog'(X0),'const.wordLang.Call_4'(s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.sptree.spt'('type.one.one'),'type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num'))))),X68),s('type.option.option'('type.num.num'),X69),s('type.list.list'('type.num.num'),X70),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')))),X71))) & ! [X64,X65,X66,X67] : s('type.wordLang.prog'(X0),X1) != s('type.wordLang.prog'(X0),'const.wordLang.FFI_4'(s('type.num.num',X64),s('type.num.num',X65),s('type.num.num',X66),s('type.sptree.spt'('type.one.one'),X67))) & ! [X62,X63] : s('type.wordLang.prog'(X0),X1) != s('type.wordLang.prog'(X0),'const.wordLang.MustTerminate_2'(s('type.num.num',X62),s('type.wordLang.prog'(X0),X63))) & ! [X60,X61] : s('type.wordLang.prog'(X0),X1) != s('type.wordLang.prog'(X0),'const.wordLang.Seq_2'(s('type.wordLang.prog'(X0),X60),s('type.wordLang.prog'(X0),X61))) & ! [X55,X56,X57,X58,X59] : s('type.wordLang.prog'(X0),X1) != s('type.wordLang.prog'(X0),'const.wordLang.If_5'(s('type.asm.cmp',X55),s('type.num.num',X56),s('type.asm.reg_imm'(X0),X57),s('type.wordLang.prog'(X0),X58),s('type.wordLang.prog'(X0),X59))) & s('type.wordLang.prog'(X0),'const.wordLang.Skip_0') != s('type.wordLang.prog'(X0),X1) & ! [X53,X54] : s('type.wordLang.prog'(X0),X1) != s('type.wordLang.prog'(X0),'const.wordLang.Move_2'(s('type.num.num',X53),s('type.list.list'('type.pair.prod'('type.num.num','type.num.num')),X54))) & ! [X52] : s('type.wordLang.prog'(X0),X1) != s('type.wordLang.prog'(X0),'const.wordLang.Inst_1'(s('type.asm.inst'(X0),X52))) & ! [X50,X51] : s('type.wordLang.prog'(X0),X1) != s('type.wordLang.prog'(X0),'const.wordLang.Assign_2'(s('type.num.num',X50),s('type.wordLang.exp'(X0),X51))) & ! [X48,X49] : s('type.wordLang.prog'(X0),X1) != s('type.wordLang.prog'(X0),'const.wordLang.Get_2'(s('type.num.num',X48),s('type.wordLang.store_name',X49))) & ! [X46,X47] : s('type.wordLang.prog'(X0),X1) != s('type.wordLang.prog'(X0),'const.wordLang.Set_2'(s('type.wordLang.store_name',X46),s('type.wordLang.exp'(X0),X47))) & ! [X44,X45] : s('type.wordLang.prog'(X0),X1) != s('type.wordLang.prog'(X0),'const.wordLang.Store_2'(s('type.wordLang.exp'(X0),X44),s('type.num.num',X45))) & ! [X43] : s('type.wordLang.prog'(X0),X1) != s('type.wordLang.prog'(X0),'const.wordLang.Raise_1'(s('type.num.num',X43))) & ! [X41,X42] : s('type.wordLang.prog'(X0),X1) != s('type.wordLang.prog'(X0),'const.wordLang.Return_2'(s('type.num.num',X41),s('type.num.num',X42))) & s('type.wordLang.prog'(X0),'const.wordLang.Tick_0') != s('type.wordLang.prog'(X0),X1) & ! [X38,X39,X40] : s('type.wordLang.prog'(X0),X1) != s('type.wordLang.prog'(X0),'const.wordLang.LocValue_3'(s('type.num.num',X38),s('type.num.num',X39),s('type.num.num',X40))))),
  inference(flattening,[],[f97])).
fof(f97,plain,(
  ? [X0,X1] : ((s('type.wordLang.prog'(X0),'const.wordLang.Skip_0') = s('type.wordLang.prog'(X0),X1) | ? [X36,X37] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Move_2'(s('type.num.num',X36),s('type.list.list'('type.pair.prod'('type.num.num','type.num.num')),X37))) | ? [X35] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Inst_1'(s('type.asm.inst'(X0),X35))) | ? [X33,X34] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Assign_2'(s('type.num.num',X33),s('type.wordLang.exp'(X0),X34))) | ? [X31,X32] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Get_2'(s('type.num.num',X31),s('type.wordLang.store_name',X32))) | ? [X29,X30] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Set_2'(s('type.wordLang.store_name',X29),s('type.wordLang.exp'(X0),X30))) | ? [X27,X28] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Store_2'(s('type.wordLang.exp'(X0),X27),s('type.num.num',X28))) | ? [X25,X26] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.MustTerminate_2'(s('type.num.num',X25),s('type.wordLang.prog'(X0),X26))) | ? [X21,X22,X23,X24] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Call_4'(s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.sptree.spt'('type.one.one'),'type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num'))))),X21),s('type.option.option'('type.num.num'),X22),s('type.list.list'('type.num.num'),X23),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')))),X24))) | ? [X19,X20] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Seq_2'(s('type.wordLang.prog'(X0),X19),s('type.wordLang.prog'(X0),X20))) | ? [X14,X15,X16,X17,X18] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.If_5'(s('type.asm.cmp',X14),s('type.num.num',X15),s('type.asm.reg_imm'(X0),X16),s('type.wordLang.prog'(X0),X17),s('type.wordLang.prog'(X0),X18))) | ? [X12,X13] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Alloc_2'(s('type.num.num',X12),s('type.sptree.spt'('type.one.one'),X13))) | ? [X11] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Raise_1'(s('type.num.num',X11))) | ? [X9,X10] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Return_2'(s('type.num.num',X9),s('type.num.num',X10))) | s('type.wordLang.prog'(X0),'const.wordLang.Tick_0') = s('type.wordLang.prog'(X0),X1) | ? [X6,X7,X8] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.LocValue_3'(s('type.num.num',X6),s('type.num.num',X7),s('type.num.num',X8))) | ? [X2,X3,X4,X5] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.FFI_4'(s('type.num.num',X2),s('type.num.num',X3),s('type.num.num',X4),s('type.sptree.spt'('type.one.one'),X5)))) & (! [X72,X73] : s('type.wordLang.prog'(X0),X1) != s('type.wordLang.prog'(X0),'const.wordLang.Alloc_2'(s('type.num.num',X72),s('type.sptree.spt'('type.one.one'),X73))) & ! [X68,X69,X70,X71] : s('type.wordLang.prog'(X0),X1) != s('type.wordLang.prog'(X0),'const.wordLang.Call_4'(s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.sptree.spt'('type.one.one'),'type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num'))))),X68),s('type.option.option'('type.num.num'),X69),s('type.list.list'('type.num.num'),X70),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')))),X71))) & ! [X64,X65,X66,X67] : s('type.wordLang.prog'(X0),X1) != s('type.wordLang.prog'(X0),'const.wordLang.FFI_4'(s('type.num.num',X64),s('type.num.num',X65),s('type.num.num',X66),s('type.sptree.spt'('type.one.one'),X67))) & ! [X62,X63] : s('type.wordLang.prog'(X0),X1) != s('type.wordLang.prog'(X0),'const.wordLang.MustTerminate_2'(s('type.num.num',X62),s('type.wordLang.prog'(X0),X63))) & ! [X60,X61] : s('type.wordLang.prog'(X0),X1) != s('type.wordLang.prog'(X0),'const.wordLang.Seq_2'(s('type.wordLang.prog'(X0),X60),s('type.wordLang.prog'(X0),X61))) & ! [X55,X56,X57,X58,X59] : s('type.wordLang.prog'(X0),X1) != s('type.wordLang.prog'(X0),'const.wordLang.If_5'(s('type.asm.cmp',X55),s('type.num.num',X56),s('type.asm.reg_imm'(X0),X57),s('type.wordLang.prog'(X0),X58),s('type.wordLang.prog'(X0),X59))) & s('type.wordLang.prog'(X0),'const.wordLang.Skip_0') != s('type.wordLang.prog'(X0),X1) & ! [X53,X54] : s('type.wordLang.prog'(X0),X1) != s('type.wordLang.prog'(X0),'const.wordLang.Move_2'(s('type.num.num',X53),s('type.list.list'('type.pair.prod'('type.num.num','type.num.num')),X54))) & ! [X52] : s('type.wordLang.prog'(X0),X1) != s('type.wordLang.prog'(X0),'const.wordLang.Inst_1'(s('type.asm.inst'(X0),X52))) & ! [X50,X51] : s('type.wordLang.prog'(X0),X1) != s('type.wordLang.prog'(X0),'const.wordLang.Assign_2'(s('type.num.num',X50),s('type.wordLang.exp'(X0),X51))) & ! [X48,X49] : s('type.wordLang.prog'(X0),X1) != s('type.wordLang.prog'(X0),'const.wordLang.Get_2'(s('type.num.num',X48),s('type.wordLang.store_name',X49))) & ! [X46,X47] : s('type.wordLang.prog'(X0),X1) != s('type.wordLang.prog'(X0),'const.wordLang.Set_2'(s('type.wordLang.store_name',X46),s('type.wordLang.exp'(X0),X47))) & ! [X44,X45] : s('type.wordLang.prog'(X0),X1) != s('type.wordLang.prog'(X0),'const.wordLang.Store_2'(s('type.wordLang.exp'(X0),X44),s('type.num.num',X45))) & ! [X43] : s('type.wordLang.prog'(X0),X1) != s('type.wordLang.prog'(X0),'const.wordLang.Raise_1'(s('type.num.num',X43))) & ! [X41,X42] : s('type.wordLang.prog'(X0),X1) != s('type.wordLang.prog'(X0),'const.wordLang.Return_2'(s('type.num.num',X41),s('type.num.num',X42))) & s('type.wordLang.prog'(X0),'const.wordLang.Tick_0') != s('type.wordLang.prog'(X0),X1) & ! [X38,X39,X40] : s('type.wordLang.prog'(X0),X1) != s('type.wordLang.prog'(X0),'const.wordLang.LocValue_3'(s('type.num.num',X38),s('type.num.num',X39),s('type.num.num',X40)))))),
  inference(ennf_transformation,[],[f40])).
fof(f40,plain,(
  ~! [X0,X1] : ((s('type.wordLang.prog'(X0),'const.wordLang.Skip_0') = s('type.wordLang.prog'(X0),X1) | ? [X36,X37] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Move_2'(s('type.num.num',X36),s('type.list.list'('type.pair.prod'('type.num.num','type.num.num')),X37))) | ? [X35] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Inst_1'(s('type.asm.inst'(X0),X35))) | ? [X33,X34] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Assign_2'(s('type.num.num',X33),s('type.wordLang.exp'(X0),X34))) | ? [X31,X32] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Get_2'(s('type.num.num',X31),s('type.wordLang.store_name',X32))) | ? [X29,X30] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Set_2'(s('type.wordLang.store_name',X29),s('type.wordLang.exp'(X0),X30))) | ? [X27,X28] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Store_2'(s('type.wordLang.exp'(X0),X27),s('type.num.num',X28))) | ? [X25,X26] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.MustTerminate_2'(s('type.num.num',X25),s('type.wordLang.prog'(X0),X26))) | ? [X21,X22,X23,X24] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Call_4'(s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.sptree.spt'('type.one.one'),'type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num'))))),X21),s('type.option.option'('type.num.num'),X22),s('type.list.list'('type.num.num'),X23),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')))),X24))) | ? [X19,X20] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Seq_2'(s('type.wordLang.prog'(X0),X19),s('type.wordLang.prog'(X0),X20))) | ? [X14,X15,X16,X17,X18] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.If_5'(s('type.asm.cmp',X14),s('type.num.num',X15),s('type.asm.reg_imm'(X0),X16),s('type.wordLang.prog'(X0),X17),s('type.wordLang.prog'(X0),X18))) | ? [X12,X13] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Alloc_2'(s('type.num.num',X12),s('type.sptree.spt'('type.one.one'),X13))) | ? [X11] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Raise_1'(s('type.num.num',X11))) | ? [X9,X10] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Return_2'(s('type.num.num',X9),s('type.num.num',X10))) | s('type.wordLang.prog'(X0),'const.wordLang.Tick_0') = s('type.wordLang.prog'(X0),X1) | ? [X6,X7,X8] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.LocValue_3'(s('type.num.num',X6),s('type.num.num',X7),s('type.num.num',X8))) | ? [X2,X3,X4,X5] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.FFI_4'(s('type.num.num',X2),s('type.num.num',X3),s('type.num.num',X4),s('type.sptree.spt'('type.one.one'),X5)))) => (? [X72,X73] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Alloc_2'(s('type.num.num',X72),s('type.sptree.spt'('type.one.one'),X73))) | ? [X68,X69,X70,X71] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Call_4'(s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.sptree.spt'('type.one.one'),'type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num'))))),X68),s('type.option.option'('type.num.num'),X69),s('type.list.list'('type.num.num'),X70),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')))),X71))) | ? [X64,X65,X66,X67] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.FFI_4'(s('type.num.num',X64),s('type.num.num',X65),s('type.num.num',X66),s('type.sptree.spt'('type.one.one'),X67))) | ? [X62,X63] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.MustTerminate_2'(s('type.num.num',X62),s('type.wordLang.prog'(X0),X63))) | ? [X60,X61] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Seq_2'(s('type.wordLang.prog'(X0),X60),s('type.wordLang.prog'(X0),X61))) | ? [X55,X56,X57,X58,X59] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.If_5'(s('type.asm.cmp',X55),s('type.num.num',X56),s('type.asm.reg_imm'(X0),X57),s('type.wordLang.prog'(X0),X58),s('type.wordLang.prog'(X0),X59))) | s('type.wordLang.prog'(X0),'const.wordLang.Skip_0') = s('type.wordLang.prog'(X0),X1) | ? [X53,X54] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Move_2'(s('type.num.num',X53),s('type.list.list'('type.pair.prod'('type.num.num','type.num.num')),X54))) | ? [X52] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Inst_1'(s('type.asm.inst'(X0),X52))) | ? [X50,X51] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Assign_2'(s('type.num.num',X50),s('type.wordLang.exp'(X0),X51))) | ? [X48,X49] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Get_2'(s('type.num.num',X48),s('type.wordLang.store_name',X49))) | ? [X46,X47] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Set_2'(s('type.wordLang.store_name',X46),s('type.wordLang.exp'(X0),X47))) | ? [X44,X45] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Store_2'(s('type.wordLang.exp'(X0),X44),s('type.num.num',X45))) | ? [X43] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Raise_1'(s('type.num.num',X43))) | ? [X41,X42] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Return_2'(s('type.num.num',X41),s('type.num.num',X42))) | s('type.wordLang.prog'(X0),'const.wordLang.Tick_0') = s('type.wordLang.prog'(X0),X1) | ? [X38,X39,X40] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.LocValue_3'(s('type.num.num',X38),s('type.num.num',X39),s('type.num.num',X40)))))),
  inference(flattening,[],[f39])).
fof(f39,plain,(
  ~! [X0] : ! [X1] : ((s('type.wordLang.prog'(X0),'const.wordLang.Skip_0') = s('type.wordLang.prog'(X0),X1) | ? [X36,X37] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Move_2'(s('type.num.num',X36),s('type.list.list'('type.pair.prod'('type.num.num','type.num.num')),X37))) | ? [X35] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Inst_1'(s('type.asm.inst'(X0),X35))) | ? [X33,X34] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Assign_2'(s('type.num.num',X33),s('type.wordLang.exp'(X0),X34))) | ? [X31,X32] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Get_2'(s('type.num.num',X31),s('type.wordLang.store_name',X32))) | ? [X29,X30] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Set_2'(s('type.wordLang.store_name',X29),s('type.wordLang.exp'(X0),X30))) | ? [X27,X28] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Store_2'(s('type.wordLang.exp'(X0),X27),s('type.num.num',X28))) | ? [X25,X26] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.MustTerminate_2'(s('type.num.num',X25),s('type.wordLang.prog'(X0),X26))) | ? [X21,X22,X23,X24] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Call_4'(s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.sptree.spt'('type.one.one'),'type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num'))))),X21),s('type.option.option'('type.num.num'),X22),s('type.list.list'('type.num.num'),X23),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')))),X24))) | ? [X19,X20] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Seq_2'(s('type.wordLang.prog'(X0),X19),s('type.wordLang.prog'(X0),X20))) | ? [X14,X15,X16,X17,X18] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.If_5'(s('type.asm.cmp',X14),s('type.num.num',X15),s('type.asm.reg_imm'(X0),X16),s('type.wordLang.prog'(X0),X17),s('type.wordLang.prog'(X0),X18))) | ? [X12,X13] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Alloc_2'(s('type.num.num',X12),s('type.sptree.spt'('type.one.one'),X13))) | ? [X11] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Raise_1'(s('type.num.num',X11))) | ? [X9,X10] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Return_2'(s('type.num.num',X9),s('type.num.num',X10))) | s('type.wordLang.prog'(X0),'const.wordLang.Tick_0') = s('type.wordLang.prog'(X0),X1) | ? [X6,X7,X8] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.LocValue_3'(s('type.num.num',X6),s('type.num.num',X7),s('type.num.num',X8))) | ? [X2,X3,X4,X5] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.FFI_4'(s('type.num.num',X2),s('type.num.num',X3),s('type.num.num',X4),s('type.sptree.spt'('type.one.one'),X5)))) => (? [X72,X73] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Alloc_2'(s('type.num.num',X72),s('type.sptree.spt'('type.one.one'),X73))) | ? [X68,X69,X70,X71] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Call_4'(s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.sptree.spt'('type.one.one'),'type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num'))))),X68),s('type.option.option'('type.num.num'),X69),s('type.list.list'('type.num.num'),X70),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')))),X71))) | ? [X64,X65,X66,X67] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.FFI_4'(s('type.num.num',X64),s('type.num.num',X65),s('type.num.num',X66),s('type.sptree.spt'('type.one.one'),X67))) | ? [X62,X63] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.MustTerminate_2'(s('type.num.num',X62),s('type.wordLang.prog'(X0),X63))) | ? [X60,X61] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Seq_2'(s('type.wordLang.prog'(X0),X60),s('type.wordLang.prog'(X0),X61))) | ? [X55,X56,X57,X58,X59] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.If_5'(s('type.asm.cmp',X55),s('type.num.num',X56),s('type.asm.reg_imm'(X0),X57),s('type.wordLang.prog'(X0),X58),s('type.wordLang.prog'(X0),X59))) | s('type.wordLang.prog'(X0),'const.wordLang.Skip_0') = s('type.wordLang.prog'(X0),X1) | ? [X53,X54] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Move_2'(s('type.num.num',X53),s('type.list.list'('type.pair.prod'('type.num.num','type.num.num')),X54))) | ? [X52] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Inst_1'(s('type.asm.inst'(X0),X52))) | ? [X50,X51] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Assign_2'(s('type.num.num',X50),s('type.wordLang.exp'(X0),X51))) | ? [X48,X49] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Get_2'(s('type.num.num',X48),s('type.wordLang.store_name',X49))) | ? [X46,X47] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Set_2'(s('type.wordLang.store_name',X46),s('type.wordLang.exp'(X0),X47))) | ? [X44,X45] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Store_2'(s('type.wordLang.exp'(X0),X44),s('type.num.num',X45))) | ? [X43] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Raise_1'(s('type.num.num',X43))) | ? [X41,X42] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.Return_2'(s('type.num.num',X41),s('type.num.num',X42))) | s('type.wordLang.prog'(X0),'const.wordLang.Tick_0') = s('type.wordLang.prog'(X0),X1) | ? [X38,X39,X40] : s('type.wordLang.prog'(X0),X1) = s('type.wordLang.prog'(X0),'const.wordLang.LocValue_3'(s('type.num.num',X38),s('type.num.num',X39),s('type.num.num',X40)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : ((s('type.wordLang.prog'(X6),'const.wordLang.Skip_0') = s('type.wordLang.prog'(X6),X7) | ? [X8,X9] : s('type.wordLang.prog'(X6),X7) = s('type.wordLang.prog'(X6),'const.wordLang.Move_2'(s('type.num.num',X8),s('type.list.list'('type.pair.prod'('type.num.num','type.num.num')),X9))) | ? [X10] : s('type.wordLang.prog'(X6),X7) = s('type.wordLang.prog'(X6),'const.wordLang.Inst_1'(s('type.asm.inst'(X6),X10))) | ? [X11,X12] : s('type.wordLang.prog'(X6),X7) = s('type.wordLang.prog'(X6),'const.wordLang.Assign_2'(s('type.num.num',X11),s('type.wordLang.exp'(X6),X12))) | ? [X13,X14] : s('type.wordLang.prog'(X6),X7) = s('type.wordLang.prog'(X6),'const.wordLang.Get_2'(s('type.num.num',X13),s('type.wordLang.store_name',X14))) | ? [X15,X16] : s('type.wordLang.prog'(X6),X7) = s('type.wordLang.prog'(X6),'const.wordLang.Set_2'(s('type.wordLang.store_name',X15),s('type.wordLang.exp'(X6),X16))) | ? [X17,X18] : s('type.wordLang.prog'(X6),X7) = s('type.wordLang.prog'(X6),'const.wordLang.Store_2'(s('type.wordLang.exp'(X6),X17),s('type.num.num',X18))) | ? [X19,X20] : s('type.wordLang.prog'(X6),X7) = s('type.wordLang.prog'(X6),'const.wordLang.MustTerminate_2'(s('type.num.num',X19),s('type.wordLang.prog'(X6),X20))) | ? [X21,X22,X23,X24] : s('type.wordLang.prog'(X6),X7) = s('type.wordLang.prog'(X6),'const.wordLang.Call_4'(s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.sptree.spt'('type.one.one'),'type.pair.prod'('type.wordLang.prog'(X6),'type.pair.prod'('type.num.num','type.num.num'))))),X21),s('type.option.option'('type.num.num'),X22),s('type.list.list'('type.num.num'),X23),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X6),'type.pair.prod'('type.num.num','type.num.num')))),X24))) | ? [X25,X26] : s('type.wordLang.prog'(X6),X7) = s('type.wordLang.prog'(X6),'const.wordLang.Seq_2'(s('type.wordLang.prog'(X6),X25),s('type.wordLang.prog'(X6),X26))) | ? [X27,X28,X29,X30,X31] : s('type.wordLang.prog'(X6),X7) = s('type.wordLang.prog'(X6),'const.wordLang.If_5'(s('type.asm.cmp',X27),s('type.num.num',X28),s('type.asm.reg_imm'(X6),X29),s('type.wordLang.prog'(X6),X30),s('type.wordLang.prog'(X6),X31))) | ? [X32,X20] : s('type.wordLang.prog'(X6),X7) = s('type.wordLang.prog'(X6),'const.wordLang.Alloc_2'(s('type.num.num',X32),s('type.sptree.spt'('type.one.one'),X20))) | ? [X33] : s('type.wordLang.prog'(X6),X7) = s('type.wordLang.prog'(X6),'const.wordLang.Raise_1'(s('type.num.num',X33))) | ? [X34,X35] : s('type.wordLang.prog'(X6),X7) = s('type.wordLang.prog'(X6),'const.wordLang.Return_2'(s('type.num.num',X34),s('type.num.num',X35))) | s('type.wordLang.prog'(X6),'const.wordLang.Tick_0') = s('type.wordLang.prog'(X6),X7) | ? [X36,X37,X38] : s('type.wordLang.prog'(X6),X7) = s('type.wordLang.prog'(X6),'const.wordLang.LocValue_3'(s('type.num.num',X36),s('type.num.num',X37),s('type.num.num',X38))) | ? [X39,X40,X41,X23] : s('type.wordLang.prog'(X6),X7) = s('type.wordLang.prog'(X6),'const.wordLang.FFI_4'(s('type.num.num',X39),s('type.num.num',X40),s('type.num.num',X41),s('type.sptree.spt'('type.one.one'),X23)))) => (? [X32,X20] : s('type.wordLang.prog'(X6),X7) = s('type.wordLang.prog'(X6),'const.wordLang.Alloc_2'(s('type.num.num',X32),s('type.sptree.spt'('type.one.one'),X20))) | ? [X21,X22,X23,X24] : s('type.wordLang.prog'(X6),X7) = s('type.wordLang.prog'(X6),'const.wordLang.Call_4'(s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.sptree.spt'('type.one.one'),'type.pair.prod'('type.wordLang.prog'(X6),'type.pair.prod'('type.num.num','type.num.num'))))),X21),s('type.option.option'('type.num.num'),X22),s('type.list.list'('type.num.num'),X23),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X6),'type.pair.prod'('type.num.num','type.num.num')))),X24))) | ? [X39,X40,X41,X23] : s('type.wordLang.prog'(X6),X7) = s('type.wordLang.prog'(X6),'const.wordLang.FFI_4'(s('type.num.num',X39),s('type.num.num',X40),s('type.num.num',X41),s('type.sptree.spt'('type.one.one'),X23))) | ? [X19,X20] : s('type.wordLang.prog'(X6),X7) = s('type.wordLang.prog'(X6),'const.wordLang.MustTerminate_2'(s('type.num.num',X19),s('type.wordLang.prog'(X6),X20))) | ? [X25,X26] : s('type.wordLang.prog'(X6),X7) = s('type.wordLang.prog'(X6),'const.wordLang.Seq_2'(s('type.wordLang.prog'(X6),X25),s('type.wordLang.prog'(X6),X26))) | ? [X27,X28,X29,X30,X31] : s('type.wordLang.prog'(X6),X7) = s('type.wordLang.prog'(X6),'const.wordLang.If_5'(s('type.asm.cmp',X27),s('type.num.num',X28),s('type.asm.reg_imm'(X6),X29),s('type.wordLang.prog'(X6),X30),s('type.wordLang.prog'(X6),X31))) | s('type.wordLang.prog'(X6),'const.wordLang.Skip_0') = s('type.wordLang.prog'(X6),X7) | ? [X8,X9] : s('type.wordLang.prog'(X6),X7) = s('type.wordLang.prog'(X6),'const.wordLang.Move_2'(s('type.num.num',X8),s('type.list.list'('type.pair.prod'('type.num.num','type.num.num')),X9))) | ? [X10] : s('type.wordLang.prog'(X6),X7) = s('type.wordLang.prog'(X6),'const.wordLang.Inst_1'(s('type.asm.inst'(X6),X10))) | ? [X11,X12] : s('type.wordLang.prog'(X6),X7) = s('type.wordLang.prog'(X6),'const.wordLang.Assign_2'(s('type.num.num',X11),s('type.wordLang.exp'(X6),X12))) | ? [X13,X14] : s('type.wordLang.prog'(X6),X7) = s('type.wordLang.prog'(X6),'const.wordLang.Get_2'(s('type.num.num',X13),s('type.wordLang.store_name',X14))) | ? [X15,X16] : s('type.wordLang.prog'(X6),X7) = s('type.wordLang.prog'(X6),'const.wordLang.Set_2'(s('type.wordLang.store_name',X15),s('type.wordLang.exp'(X6),X16))) | ? [X17,X18] : s('type.wordLang.prog'(X6),X7) = s('type.wordLang.prog'(X6),'const.wordLang.Store_2'(s('type.wordLang.exp'(X6),X17),s('type.num.num',X18))) | ? [X33] : s('type.wordLang.prog'(X6),X7) = s('type.wordLang.prog'(X6),'const.wordLang.Raise_1'(s('type.num.num',X33))) | ? [X34,X35] : s('type.wordLang.prog'(X6),X7) = s('type.wordLang.prog'(X6),'const.wordLang.Return_2'(s('type.num.num',X34),s('type.num.num',X35))) | s('type.wordLang.prog'(X6),'const.wordLang.Tick_0') = s('type.wordLang.prog'(X6),X7) | ? [X36,X37,X38] : s('type.wordLang.prog'(X6),X7) = s('type.wordLang.prog'(X6),'const.wordLang.LocValue_3'(s('type.num.num',X36),s('type.num.num',X37),s('type.num.num',X38)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : ((s('type.wordLang.prog'(X6),'const.wordLang.Skip_0') = s('type.wordLang.prog'(X6),X7) | ? [X8,X9] : s('type.wordLang.prog'(X6),X7) = s('type.wordLang.prog'(X6),'const.wordLang.Move_2'(s('type.num.num',X8),s('type.list.list'('type.pair.prod'('type.num.num','type.num.num')),X9))) | ? [X10] : s('type.wordLang.prog'(X6),X7) = s('type.wordLang.prog'(X6),'const.wordLang.Inst_1'(s('type.asm.inst'(X6),X10))) | ? [X11,X12] : s('type.wordLang.prog'(X6),X7) = s('type.wordLang.prog'(X6),'const.wordLang.Assign_2'(s('type.num.num',X11),s('type.wordLang.exp'(X6),X12))) | ? [X13,X14] : s('type.wordLang.prog'(X6),X7) = s('type.wordLang.prog'(X6),'const.wordLang.Get_2'(s('type.num.num',X13),s('type.wordLang.store_name',X14))) | ? [X15,X16] : s('type.wordLang.prog'(X6),X7) = s('type.wordLang.prog'(X6),'const.wordLang.Set_2'(s('type.wordLang.store_name',X15),s('type.wordLang.exp'(X6),X16))) | ? [X17,X18] : s('type.wordLang.prog'(X6),X7) = s('type.wordLang.prog'(X6),'const.wordLang.Store_2'(s('type.wordLang.exp'(X6),X17),s('type.num.num',X18))) | ? [X19,X20] : s('type.wordLang.prog'(X6),X7) = s('type.wordLang.prog'(X6),'const.wordLang.MustTerminate_2'(s('type.num.num',X19),s('type.wordLang.prog'(X6),X20))) | ? [X21,X22,X23,X24] : s('type.wordLang.prog'(X6),X7) = s('type.wordLang.prog'(X6),'const.wordLang.Call_4'(s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.sptree.spt'('type.one.one'),'type.pair.prod'('type.wordLang.prog'(X6),'type.pair.prod'('type.num.num','type.num.num'))))),X21),s('type.option.option'('type.num.num'),X22),s('type.list.list'('type.num.num'),X23),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X6),'type.pair.prod'('type.num.num','type.num.num')))),X24))) | ? [X25,X26] : s('type.wordLang.prog'(X6),X7) = s('type.wordLang.prog'(X6),'const.wordLang.Seq_2'(s('type.wordLang.prog'(X6),X25),s('type.wordLang.prog'(X6),X26))) | ? [X27,X28,X29,X30,X31] : s('type.wordLang.prog'(X6),X7) = s('type.wordLang.prog'(X6),'const.wordLang.If_5'(s('type.asm.cmp',X27),s('type.num.num',X28),s('type.asm.reg_imm'(X6),X29),s('type.wordLang.prog'(X6),X30),s('type.wordLang.prog'(X6),X31))) | ? [X32,X20] : s('type.wordLang.prog'(X6),X7) = s('type.wordLang.prog'(X6),'const.wordLang.Alloc_2'(s('type.num.num',X32),s('type.sptree.spt'('type.one.one'),X20))) | ? [X33] : s('type.wordLang.prog'(X6),X7) = s('type.wordLang.prog'(X6),'const.wordLang.Raise_1'(s('type.num.num',X33))) | ? [X34,X35] : s('type.wordLang.prog'(X6),X7) = s('type.wordLang.prog'(X6),'const.wordLang.Return_2'(s('type.num.num',X34),s('type.num.num',X35))) | s('type.wordLang.prog'(X6),'const.wordLang.Tick_0') = s('type.wordLang.prog'(X6),X7) | ? [X36,X37,X38] : s('type.wordLang.prog'(X6),X7) = s('type.wordLang.prog'(X6),'const.wordLang.LocValue_3'(s('type.num.num',X36),s('type.num.num',X37),s('type.num.num',X38))) | ? [X39,X40,X41,X23] : s('type.wordLang.prog'(X6),X7) = s('type.wordLang.prog'(X6),'const.wordLang.FFI_4'(s('type.num.num',X39),s('type.num.num',X40),s('type.num.num',X41),s('type.sptree.spt'('type.one.one'),X23)))) => (? [X32,X20] : s('type.wordLang.prog'(X6),X7) = s('type.wordLang.prog'(X6),'const.wordLang.Alloc_2'(s('type.num.num',X32),s('type.sptree.spt'('type.one.one'),X20))) | ? [X21,X22,X23,X24] : s('type.wordLang.prog'(X6),X7) = s('type.wordLang.prog'(X6),'const.wordLang.Call_4'(s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.sptree.spt'('type.one.one'),'type.pair.prod'('type.wordLang.prog'(X6),'type.pair.prod'('type.num.num','type.num.num'))))),X21),s('type.option.option'('type.num.num'),X22),s('type.list.list'('type.num.num'),X23),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X6),'type.pair.prod'('type.num.num','type.num.num')))),X24))) | ? [X39,X40,X41,X23] : s('type.wordLang.prog'(X6),X7) = s('type.wordLang.prog'(X6),'const.wordLang.FFI_4'(s('type.num.num',X39),s('type.num.num',X40),s('type.num.num',X41),s('type.sptree.spt'('type.one.one'),X23))) | ? [X19,X20] : s('type.wordLang.prog'(X6),X7) = s('type.wordLang.prog'(X6),'const.wordLang.MustTerminate_2'(s('type.num.num',X19),s('type.wordLang.prog'(X6),X20))) | ? [X25,X26] : s('type.wordLang.prog'(X6),X7) = s('type.wordLang.prog'(X6),'const.wordLang.Seq_2'(s('type.wordLang.prog'(X6),X25),s('type.wordLang.prog'(X6),X26))) | ? [X27,X28,X29,X30,X31] : s('type.wordLang.prog'(X6),X7) = s('type.wordLang.prog'(X6),'const.wordLang.If_5'(s('type.asm.cmp',X27),s('type.num.num',X28),s('type.asm.reg_imm'(X6),X29),s('type.wordLang.prog'(X6),X30),s('type.wordLang.prog'(X6),X31))) | s('type.wordLang.prog'(X6),'const.wordLang.Skip_0') = s('type.wordLang.prog'(X6),X7) | ? [X8,X9] : s('type.wordLang.prog'(X6),X7) = s('type.wordLang.prog'(X6),'const.wordLang.Move_2'(s('type.num.num',X8),s('type.list.list'('type.pair.prod'('type.num.num','type.num.num')),X9))) | ? [X10] : s('type.wordLang.prog'(X6),X7) = s('type.wordLang.prog'(X6),'const.wordLang.Inst_1'(s('type.asm.inst'(X6),X10))) | ? [X11,X12] : s('type.wordLang.prog'(X6),X7) = s('type.wordLang.prog'(X6),'const.wordLang.Assign_2'(s('type.num.num',X11),s('type.wordLang.exp'(X6),X12))) | ? [X13,X14] : s('type.wordLang.prog'(X6),X7) = s('type.wordLang.prog'(X6),'const.wordLang.Get_2'(s('type.num.num',X13),s('type.wordLang.store_name',X14))) | ? [X15,X16] : s('type.wordLang.prog'(X6),X7) = s('type.wordLang.prog'(X6),'const.wordLang.Set_2'(s('type.wordLang.store_name',X15),s('type.wordLang.exp'(X6),X16))) | ? [X17,X18] : s('type.wordLang.prog'(X6),X7) = s('type.wordLang.prog'(X6),'const.wordLang.Store_2'(s('type.wordLang.exp'(X6),X17),s('type.num.num',X18))) | ? [X33] : s('type.wordLang.prog'(X6),X7) = s('type.wordLang.prog'(X6),'const.wordLang.Raise_1'(s('type.num.num',X33))) | ? [X34,X35] : s('type.wordLang.prog'(X6),X7) = s('type.wordLang.prog'(X6),'const.wordLang.Return_2'(s('type.num.num',X34),s('type.num.num',X35))) | s('type.wordLang.prog'(X6),'const.wordLang.Tick_0') = s('type.wordLang.prog'(X6),X7) | ? [X36,X37,X38] : s('type.wordLang.prog'(X6),X7) = s('type.wordLang.prog'(X6),'const.wordLang.LocValue_3'(s('type.num.num',X36),s('type.num.num',X37),s('type.num.num',X38)))))),
  file('thm.wordProps.wordProps_243_prove_ltb','thm.wordProps.wordProps_243_prove_ltb')).
fof(f441,plain,(
  s('type.wordLang.prog'(sK12),'const.wordLang.Tick_0') != s('type.wordLang.prog'(sK12),sK13) | $spl29),
  inference(cnf_transformation,[],[f441_D])).
fof(f441_D,plain,(
  s('type.wordLang.prog'(sK12),'const.wordLang.Tick_0') != s('type.wordLang.prog'(sK12),sK13) <=> ~$spl29),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl29])])).
fof(f240,plain,(
  s('type.wordLang.prog'(sK12),'const.wordLang.Tick_0') != s('type.wordLang.prog'(sK12),sK13)),
  inference(cnf_transformation,[],[f139])).
fof(f3988,plain,(
  $false | $spl18),
  inference(subsumption_resolution,[],[f432,f229])).
fof(f229,plain,(
  ( ! [X24,X25] : (s('type.wordLang.prog'(sK12),sK13) != s('type.wordLang.prog'(sK12),'const.wordLang.Seq_2'(s('type.wordLang.prog'(sK12),X24),s('type.wordLang.prog'(sK12),X25)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f3989,plain,(
  $false | $spl8),
  inference(subsumption_resolution,[],[f422,f235])).
fof(f235,plain,(
  ( ! [X12,X13] : (s('type.wordLang.prog'(sK12),sK13) != s('type.wordLang.prog'(sK12),'const.wordLang.Get_2'(s('type.num.num',X12),s('type.wordLang.store_name',X13)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f3990,plain,(
  $false | $spl22),
  inference(subsumption_resolution,[],[f436,f225])).
fof(f225,plain,(
  ( ! [X37,X36] : (s('type.wordLang.prog'(sK12),sK13) != s('type.wordLang.prog'(sK12),'const.wordLang.Alloc_2'(s('type.num.num',X36),s('type.sptree.spt'('type.one.one'),X37)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f3991,plain,(
  $false | $spl12),
  inference(subsumption_resolution,[],[f426,f237])).
fof(f237,plain,(
  ( ! [X8,X9] : (s('type.wordLang.prog'(sK12),sK13) != s('type.wordLang.prog'(sK12),'const.wordLang.Store_2'(s('type.wordLang.exp'(sK12),X8),s('type.num.num',X9)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f3992,plain,(
  $false | $spl10),
  inference(subsumption_resolution,[],[f424,f236])).
fof(f236,plain,(
  ( ! [X10,X11] : (s('type.wordLang.prog'(sK12),sK13) != s('type.wordLang.prog'(sK12),'const.wordLang.Set_2'(s('type.wordLang.store_name',X10),s('type.wordLang.exp'(sK12),X11)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f3993,plain,(
  $false | $spl4),
  inference(subsumption_resolution,[],[f418,f233])).
fof(f233,plain,(
  ( ! [X16] : (s('type.wordLang.prog'(sK12),sK13) != s('type.wordLang.prog'(sK12),'const.wordLang.Inst_1'(s('type.asm.inst'(sK12),X16)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f3994,plain,(
  $false | $spl26),
  inference(subsumption_resolution,[],[f440,f239])).
fof(f239,plain,(
  ( ! [X6,X5] : (s('type.wordLang.prog'(sK12),sK13) != s('type.wordLang.prog'(sK12),'const.wordLang.Return_2'(s('type.num.num',X5),s('type.num.num',X6)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f4450,plain,(
  $false | $spl20),
  inference(subsumption_resolution,[],[f434,f230])).
fof(f230,plain,(
  ( ! [X23,X21,X19,X22,X20] : (s('type.wordLang.prog'(sK12),sK13) != s('type.wordLang.prog'(sK12),'const.wordLang.If_5'(s('type.asm.cmp',X19),s('type.num.num',X20),s('type.asm.reg_imm'(sK12),X21),s('type.wordLang.prog'(sK12),X22),s('type.wordLang.prog'(sK12),X23)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f4451,plain,(
  $false | $spl24),
  inference(subsumption_resolution,[],[f438,f238])).
fof(f238,plain,(
  ( ! [X7] : (s('type.wordLang.prog'(sK12),sK13) != s('type.wordLang.prog'(sK12),'const.wordLang.Raise_1'(s('type.num.num',X7)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f4452,plain,(
  $false | $spl6),
  inference(subsumption_resolution,[],[f420,f234])).
fof(f234,plain,(
  ( ! [X14,X15] : (s('type.wordLang.prog'(sK12),sK13) != s('type.wordLang.prog'(sK12),'const.wordLang.Assign_2'(s('type.num.num',X14),s('type.wordLang.exp'(sK12),X15)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f4813,plain,(
  $false | $spl16),
  inference(subsumption_resolution,[],[f430,f226])).
fof(f226,plain,(
  ( ! [X35,X33,X34,X32] : (s('type.wordLang.prog'(sK12),sK13) != s('type.wordLang.prog'(sK12),'const.wordLang.Call_4'(s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.sptree.spt'('type.one.one'),'type.pair.prod'('type.wordLang.prog'(sK12),'type.pair.prod'('type.num.num','type.num.num'))))),X32),s('type.option.option'('type.num.num'),X33),s('type.list.list'('type.num.num'),X34),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK12),'type.pair.prod'('type.num.num','type.num.num')))),X35)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f4814,plain,(
  $false | $spl30),
  inference(subsumption_resolution,[],[f444,f241])).
fof(f241,plain,(
  ( ! [X4,X2,X3] : (s('type.wordLang.prog'(sK12),sK13) != s('type.wordLang.prog'(sK12),'const.wordLang.LocValue_3'(s('type.num.num',X2),s('type.num.num',X3),s('type.num.num',X4)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f4815,plain,(
  $false | $spl32),
  inference(subsumption_resolution,[],[f446,f227])).
fof(f227,plain,(
  ( ! [X30,X28,X31,X29] : (s('type.wordLang.prog'(sK12),sK13) != s('type.wordLang.prog'(sK12),'const.wordLang.FFI_4'(s('type.num.num',X28),s('type.num.num',X29),s('type.num.num',X30),s('type.sptree.spt'('type.one.one'),X31)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f413,plain,(
  s('type.wordLang.prog'(sK12),'const.wordLang.Skip_0') != s('type.wordLang.prog'(sK12),sK13) | $spl1),
  inference(cnf_transformation,[],[f413_D])).
fof(f413_D,plain,(
  s('type.wordLang.prog'(sK12),'const.wordLang.Skip_0') != s('type.wordLang.prog'(sK12),sK13) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f231,plain,(
  s('type.wordLang.prog'(sK12),'const.wordLang.Skip_0') != s('type.wordLang.prog'(sK12),sK13)),
  inference(cnf_transformation,[],[f139])).
fof(f414,plain,(
  s('type.wordLang.prog'(sK12),'const.wordLang.Skip_0') = s('type.wordLang.prog'(sK12),sK13) | $spl0),
  inference(cnf_transformation,[],[f414_D])).
fof(f414_D,plain,(
  s('type.wordLang.prog'(sK12),'const.wordLang.Skip_0') = s('type.wordLang.prog'(sK12),sK13) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f416,plain,(
  s('type.wordLang.prog'(sK12),sK13) = s('type.wordLang.prog'(sK12),'const.wordLang.Move_2'(s('type.num.num',sK14),s('type.list.list'('type.pair.prod'('type.num.num','type.num.num')),sK15))) | $spl2),
  inference(cnf_transformation,[],[f416_D])).
fof(f416_D,plain,(
  s('type.wordLang.prog'(sK12),sK13) = s('type.wordLang.prog'(sK12),'const.wordLang.Move_2'(s('type.num.num',sK14),s('type.list.list'('type.pair.prod'('type.num.num','type.num.num')),sK15))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f418,plain,(
  s('type.wordLang.prog'(sK12),sK13) = s('type.wordLang.prog'(sK12),'const.wordLang.Inst_1'(s('type.asm.inst'(sK12),sK16))) | $spl4),
  inference(cnf_transformation,[],[f418_D])).
fof(f418_D,plain,(
  s('type.wordLang.prog'(sK12),sK13) = s('type.wordLang.prog'(sK12),'const.wordLang.Inst_1'(s('type.asm.inst'(sK12),sK16))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f420,plain,(
  s('type.wordLang.prog'(sK12),sK13) = s('type.wordLang.prog'(sK12),'const.wordLang.Assign_2'(s('type.num.num',sK17),s('type.wordLang.exp'(sK12),sK18))) | $spl6),
  inference(cnf_transformation,[],[f420_D])).
fof(f420_D,plain,(
  s('type.wordLang.prog'(sK12),sK13) = s('type.wordLang.prog'(sK12),'const.wordLang.Assign_2'(s('type.num.num',sK17),s('type.wordLang.exp'(sK12),sK18))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f422,plain,(
  s('type.wordLang.prog'(sK12),sK13) = s('type.wordLang.prog'(sK12),'const.wordLang.Get_2'(s('type.num.num',sK19),s('type.wordLang.store_name',sK20))) | $spl8),
  inference(cnf_transformation,[],[f422_D])).
fof(f422_D,plain,(
  s('type.wordLang.prog'(sK12),sK13) = s('type.wordLang.prog'(sK12),'const.wordLang.Get_2'(s('type.num.num',sK19),s('type.wordLang.store_name',sK20))) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f424,plain,(
  s('type.wordLang.prog'(sK12),sK13) = s('type.wordLang.prog'(sK12),'const.wordLang.Set_2'(s('type.wordLang.store_name',sK21),s('type.wordLang.exp'(sK12),sK22))) | $spl10),
  inference(cnf_transformation,[],[f424_D])).
fof(f424_D,plain,(
  s('type.wordLang.prog'(sK12),sK13) = s('type.wordLang.prog'(sK12),'const.wordLang.Set_2'(s('type.wordLang.store_name',sK21),s('type.wordLang.exp'(sK12),sK22))) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f426,plain,(
  s('type.wordLang.prog'(sK12),sK13) = s('type.wordLang.prog'(sK12),'const.wordLang.Store_2'(s('type.wordLang.exp'(sK12),sK23),s('type.num.num',sK24))) | $spl12),
  inference(cnf_transformation,[],[f426_D])).
fof(f426_D,plain,(
  s('type.wordLang.prog'(sK12),sK13) = s('type.wordLang.prog'(sK12),'const.wordLang.Store_2'(s('type.wordLang.exp'(sK12),sK23),s('type.num.num',sK24))) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f428,plain,(
  s('type.wordLang.prog'(sK12),sK13) = s('type.wordLang.prog'(sK12),'const.wordLang.MustTerminate_2'(s('type.num.num',sK25),s('type.wordLang.prog'(sK12),sK26))) | $spl14),
  inference(cnf_transformation,[],[f428_D])).
fof(f428_D,plain,(
  s('type.wordLang.prog'(sK12),sK13) = s('type.wordLang.prog'(sK12),'const.wordLang.MustTerminate_2'(s('type.num.num',sK25),s('type.wordLang.prog'(sK12),sK26))) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f430,plain,(
  s('type.wordLang.prog'(sK12),sK13) = s('type.wordLang.prog'(sK12),'const.wordLang.Call_4'(s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.sptree.spt'('type.one.one'),'type.pair.prod'('type.wordLang.prog'(sK12),'type.pair.prod'('type.num.num','type.num.num'))))),sK27),s('type.option.option'('type.num.num'),sK28),s('type.list.list'('type.num.num'),sK29),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK12),'type.pair.prod'('type.num.num','type.num.num')))),sK30))) | $spl16),
  inference(cnf_transformation,[],[f430_D])).
fof(f430_D,plain,(
  s('type.wordLang.prog'(sK12),sK13) = s('type.wordLang.prog'(sK12),'const.wordLang.Call_4'(s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.sptree.spt'('type.one.one'),'type.pair.prod'('type.wordLang.prog'(sK12),'type.pair.prod'('type.num.num','type.num.num'))))),sK27),s('type.option.option'('type.num.num'),sK28),s('type.list.list'('type.num.num'),sK29),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK12),'type.pair.prod'('type.num.num','type.num.num')))),sK30))) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f432,plain,(
  s('type.wordLang.prog'(sK12),sK13) = s('type.wordLang.prog'(sK12),'const.wordLang.Seq_2'(s('type.wordLang.prog'(sK12),sK31),s('type.wordLang.prog'(sK12),sK32))) | $spl18),
  inference(cnf_transformation,[],[f432_D])).
fof(f432_D,plain,(
  s('type.wordLang.prog'(sK12),sK13) = s('type.wordLang.prog'(sK12),'const.wordLang.Seq_2'(s('type.wordLang.prog'(sK12),sK31),s('type.wordLang.prog'(sK12),sK32))) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f434,plain,(
  s('type.wordLang.prog'(sK12),sK13) = s('type.wordLang.prog'(sK12),'const.wordLang.If_5'(s('type.asm.cmp',sK33),s('type.num.num',sK34),s('type.asm.reg_imm'(sK12),sK35),s('type.wordLang.prog'(sK12),sK36),s('type.wordLang.prog'(sK12),sK37))) | $spl20),
  inference(cnf_transformation,[],[f434_D])).
fof(f434_D,plain,(
  s('type.wordLang.prog'(sK12),sK13) = s('type.wordLang.prog'(sK12),'const.wordLang.If_5'(s('type.asm.cmp',sK33),s('type.num.num',sK34),s('type.asm.reg_imm'(sK12),sK35),s('type.wordLang.prog'(sK12),sK36),s('type.wordLang.prog'(sK12),sK37))) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f436,plain,(
  s('type.wordLang.prog'(sK12),sK13) = s('type.wordLang.prog'(sK12),'const.wordLang.Alloc_2'(s('type.num.num',sK38),s('type.sptree.spt'('type.one.one'),sK39))) | $spl22),
  inference(cnf_transformation,[],[f436_D])).
fof(f436_D,plain,(
  s('type.wordLang.prog'(sK12),sK13) = s('type.wordLang.prog'(sK12),'const.wordLang.Alloc_2'(s('type.num.num',sK38),s('type.sptree.spt'('type.one.one'),sK39))) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f438,plain,(
  s('type.wordLang.prog'(sK12),sK13) = s('type.wordLang.prog'(sK12),'const.wordLang.Raise_1'(s('type.num.num',sK40))) | $spl24),
  inference(cnf_transformation,[],[f438_D])).
fof(f438_D,plain,(
  s('type.wordLang.prog'(sK12),sK13) = s('type.wordLang.prog'(sK12),'const.wordLang.Raise_1'(s('type.num.num',sK40))) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f440,plain,(
  s('type.wordLang.prog'(sK12),sK13) = s('type.wordLang.prog'(sK12),'const.wordLang.Return_2'(s('type.num.num',sK41),s('type.num.num',sK42))) | $spl26),
  inference(cnf_transformation,[],[f440_D])).
fof(f440_D,plain,(
  s('type.wordLang.prog'(sK12),sK13) = s('type.wordLang.prog'(sK12),'const.wordLang.Return_2'(s('type.num.num',sK41),s('type.num.num',sK42))) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f442,plain,(
  s('type.wordLang.prog'(sK12),'const.wordLang.Tick_0') = s('type.wordLang.prog'(sK12),sK13) | $spl28),
  inference(cnf_transformation,[],[f442_D])).
fof(f442_D,plain,(
  s('type.wordLang.prog'(sK12),'const.wordLang.Tick_0') = s('type.wordLang.prog'(sK12),sK13) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f444,plain,(
  s('type.wordLang.prog'(sK12),sK13) = s('type.wordLang.prog'(sK12),'const.wordLang.LocValue_3'(s('type.num.num',sK43),s('type.num.num',sK44),s('type.num.num',sK45))) | $spl30),
  inference(cnf_transformation,[],[f444_D])).
fof(f444_D,plain,(
  s('type.wordLang.prog'(sK12),sK13) = s('type.wordLang.prog'(sK12),'const.wordLang.LocValue_3'(s('type.num.num',sK43),s('type.num.num',sK44),s('type.num.num',sK45))) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f446,plain,(
  s('type.wordLang.prog'(sK12),sK13) = s('type.wordLang.prog'(sK12),'const.wordLang.FFI_4'(s('type.num.num',sK46),s('type.num.num',sK47),s('type.num.num',sK48),s('type.sptree.spt'('type.one.one'),sK49))) | $spl32),
  inference(cnf_transformation,[],[f446_D])).
fof(f446_D,plain,(
  s('type.wordLang.prog'(sK12),sK13) = s('type.wordLang.prog'(sK12),'const.wordLang.FFI_4'(s('type.num.num',sK46),s('type.num.num',sK47),s('type.num.num',sK48),s('type.sptree.spt'('type.one.one'),sK49))) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f224,plain,(
  s('type.wordLang.prog'(sK12),sK13) = s('type.wordLang.prog'(sK12),'const.wordLang.FFI_4'(s('type.num.num',sK46),s('type.num.num',sK47),s('type.num.num',sK48),s('type.sptree.spt'('type.one.one'),sK49))) | s('type.wordLang.prog'(sK12),sK13) = s('type.wordLang.prog'(sK12),'const.wordLang.LocValue_3'(s('type.num.num',sK43),s('type.num.num',sK44),s('type.num.num',sK45))) | s('type.wordLang.prog'(sK12),'const.wordLang.Tick_0') = s('type.wordLang.prog'(sK12),sK13) | s('type.wordLang.prog'(sK12),sK13) = s('type.wordLang.prog'(sK12),'const.wordLang.Return_2'(s('type.num.num',sK41),s('type.num.num',sK42))) | s('type.wordLang.prog'(sK12),sK13) = s('type.wordLang.prog'(sK12),'const.wordLang.Raise_1'(s('type.num.num',sK40))) | s('type.wordLang.prog'(sK12),sK13) = s('type.wordLang.prog'(sK12),'const.wordLang.Alloc_2'(s('type.num.num',sK38),s('type.sptree.spt'('type.one.one'),sK39))) | s('type.wordLang.prog'(sK12),sK13) = s('type.wordLang.prog'(sK12),'const.wordLang.If_5'(s('type.asm.cmp',sK33),s('type.num.num',sK34),s('type.asm.reg_imm'(sK12),sK35),s('type.wordLang.prog'(sK12),sK36),s('type.wordLang.prog'(sK12),sK37))) | s('type.wordLang.prog'(sK12),sK13) = s('type.wordLang.prog'(sK12),'const.wordLang.Seq_2'(s('type.wordLang.prog'(sK12),sK31),s('type.wordLang.prog'(sK12),sK32))) | s('type.wordLang.prog'(sK12),sK13) = s('type.wordLang.prog'(sK12),'const.wordLang.Call_4'(s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.sptree.spt'('type.one.one'),'type.pair.prod'('type.wordLang.prog'(sK12),'type.pair.prod'('type.num.num','type.num.num'))))),sK27),s('type.option.option'('type.num.num'),sK28),s('type.list.list'('type.num.num'),sK29),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK12),'type.pair.prod'('type.num.num','type.num.num')))),sK30))) | s('type.wordLang.prog'(sK12),sK13) = s('type.wordLang.prog'(sK12),'const.wordLang.MustTerminate_2'(s('type.num.num',sK25),s('type.wordLang.prog'(sK12),sK26))) | s('type.wordLang.prog'(sK12),sK13) = s('type.wordLang.prog'(sK12),'const.wordLang.Store_2'(s('type.wordLang.exp'(sK12),sK23),s('type.num.num',sK24))) | s('type.wordLang.prog'(sK12),sK13) = s('type.wordLang.prog'(sK12),'const.wordLang.Set_2'(s('type.wordLang.store_name',sK21),s('type.wordLang.exp'(sK12),sK22))) | s('type.wordLang.prog'(sK12),sK13) = s('type.wordLang.prog'(sK12),'const.wordLang.Get_2'(s('type.num.num',sK19),s('type.wordLang.store_name',sK20))) | s('type.wordLang.prog'(sK12),sK13) = s('type.wordLang.prog'(sK12),'const.wordLang.Assign_2'(s('type.num.num',sK17),s('type.wordLang.exp'(sK12),sK18))) | s('type.wordLang.prog'(sK12),sK13) = s('type.wordLang.prog'(sK12),'const.wordLang.Inst_1'(s('type.asm.inst'(sK12),sK16))) | s('type.wordLang.prog'(sK12),sK13) = s('type.wordLang.prog'(sK12),'const.wordLang.Move_2'(s('type.num.num',sK14),s('type.list.list'('type.pair.prod'('type.num.num','type.num.num')),sK15))) | s('type.wordLang.prog'(sK12),'const.wordLang.Skip_0') = s('type.wordLang.prog'(sK12),sK13)),
  inference(cnf_transformation,[],[f139])).
fof(f4817,plain,(
  $false | $spl2),
  inference(subsumption_resolution,[],[f416,f232])).
fof(f232,plain,(
  ( ! [X17,X18] : (s('type.wordLang.prog'(sK12),sK13) != s('type.wordLang.prog'(sK12),'const.wordLang.Move_2'(s('type.num.num',X17),s('type.list.list'('type.pair.prod'('type.num.num','type.num.num')),X18)))) )),
  inference(cnf_transformation,[],[f139])).
% SZS output end Proof for thm.wordProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 398
% Passive clauses: 1477
% Generated clauses: 4585
% Final active clauses: 398
% Final passive clauses: 883
% Input formulas: 37
% Initial clauses: 185
% 
% Duplicate literals: 154
% Trivial inequalities: 29
% Fw subsumption resolutions: 317
% 
% Simple tautologies: 145
% Equational tautologies: 32
% Forward subsumptions: 2407
% 
% Binary resolution: 2792
% Factoring: 794
% Forward superposition: 162
% Backward superposition: 59
% Self superposition: 2
% Equality factoring: 2
% Equality resolution: 16
% 
% Split clauses: 111
% Split components: 238
% SAT solver clauses: 230
% SAT solver unit clauses: 23
% SAT solver binary clauses: 45
% SAT solver learnt clauses: 1
% 
% Sat splits: 111
% Sat splitting refutations: 15
% 
% TWLsolver clauses: 229
% TWLsolver calls for satisfiability: 193
% 
% Memory used [KB]: 2558
% Time elapsed: 0.209 s
% ------------------------------
% ------------------------------
% Success in time 0.23 s
