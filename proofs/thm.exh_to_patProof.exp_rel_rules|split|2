Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.exh_to_patProof
% (77754)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 161
% Passive clauses: 2880
% Generated clauses: 19055
% Final active clauses: 154
% Final passive clauses: 2534
% Input formulas: 37
% Initial clauses: 184
% 
% Duplicate literals: 526
% Trivial inequalities: 292
% Fw subsumption resolutions: 3228
% Fw demodulations: 3466
% Bw demodulations: 3
% 
% Simple tautologies: 375
% Equational tautologies: 57
% Forward subsumptions: 7589
% 
% Binary resolution: 413
% Factoring: 1
% Forward superposition: 4983
% Backward superposition: 5508
% Self superposition: 185
% Equality factoring: 138
% Equality resolution: 39
% 
% Split clauses: 319
% Split components: 656
% SAT solver clauses: 714
% SAT solver unit clauses: 12
% SAT solver binary clauses: 85
% 
% Sat splits: 319
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 714
% TWLsolver calls for satisfiability: 149
% 
% Memory used [KB]: 10106
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.exh_to_patProof
% (77775)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 223
% Passive clauses: 1118
% Generated clauses: 17994
% Final active clauses: 191
% Final passive clauses: 748
% Input formulas: 37
% Initial clauses: 184
% 
% Duplicate literals: 241
% Trivial inequalities: 716
% Fw subsumption resolutions: 1515
% Fw demodulations: 3522
% Bw demodulations: 162
% Condensations: 398
% Global subsumptions: 7
% 
% Simple tautologies: 277
% Equational tautologies: 19
% Forward subsumptions: 8479
% Bw demodulations to eq. taut.: 2
% 
% Binary resolution: 147
% Factoring: 2
% Forward superposition: 5202
% Backward superposition: 4668
% Self superposition: 110
% Equality factoring: 27
% Equality resolution: 46
% 
% Split clauses: 52
% Split components: 105
% SAT solver clauses: 1865
% SAT solver unit clauses: 186
% SAT solver binary clauses: 98
% SAT solver learnt clauses: 14
% 
% Sat splits: 52
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 1837
% TWLsolver calls for satisfiability: 4185
% 
% Memory used [KB]: 18677
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.exh_to_patProof
% (77790)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 665
% Passive clauses: 15629
% Generated clauses: 126519
% Final active clauses: 169
% Final passive clauses: 1351
% Input formulas: 37
% Initial clauses: 184
% Discarded non-redundant clauses: 5094
% 
% Duplicate literals: 3012
% Trivial inequalities: 775
% Fw subsumption resolutions: 9408
% Fw demodulations: 21422
% Bw demodulations: 7606
% Condensations: 4918
% Global subsumptions: 253
% 
% Simple tautologies: 927
% Equational tautologies: 345
% Forward subsumptions: 68776
% Fw demodulations to eq. taut.: 38
% Bw demodulations to eq. taut.: 2012
% 
% Unit resulting resolution: 2562
% Factoring: 7
% Forward superposition: 30626
% Backward superposition: 22439
% Self superposition: 333
% Equality factoring: 151
% Equality resolution: 81
% 
% Split clauses: 288
% Split components: 592
% SAT solver clauses: 16916
% SAT solver unit clauses: 472
% SAT solver binary clauses: 2417
% 
% Sat splits: 288
% Sat splitting refutations: 456
% 
% Memory used [KB]: 101576
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 32 next slice time: 32
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.exh_to_patProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.exh_to_patProof
% SZS output start Proof for thm.exh_to_patProof
fof(f5030,plain,(
  $false),
  inference(equality_resolution,[],[f4942])).
fof(f4942,plain,(
  ( ! [X0] : (s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit',sK13))) != s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit',X0)))) )),
  inference(duplicate_literal_removal,[],[f4929])).
fof(f4929,plain,(
  ( ! [X0] : (s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit',sK13))) != s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit',X0))) | s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit',sK13))) != s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit',X0)))) )),
  inference(resolution,[],[f4916,f270])).
fof(f270,plain,(
  ( ! [X4,X2,X0,X8,X5,X3,X1] : (sP11(X0,X1,X2,X3,X4,X5) | s('type.patLang.exp',X0) != s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit',X8))) | s('type.patLang.exp',X1) != s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit',X8)))) )),
  inference(cnf_transformation,[],[f142])).
fof(f142,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((~sP11(X0,X1,X2,X3,X4,X5) | sP7(X2,X3,X4,X5,X0,X1) | sP3(X2,X3,X4,X5,X0,X1) | (s('type.patLang.exp',X1) = s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit',sK18(X5,X4,X3,X2,X1,X0)))) & s('type.patLang.exp',X0) = s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit',sK18(X5,X4,X3,X2,X1,X0))))) | sP8(X2,X3,X4,X5,X0,X1) | sP1(X4,X3,X5,X0,X1) | (s('type.patLang.exp',X1) = s('type.patLang.exp','const.patLang.Var_global_1'(s('type.num.num',sK19(X5,X4,X3,X2,X1,X0)))) & s('type.patLang.exp',X0) = s('type.patLang.exp','const.patLang.Var_global_1'(s('type.num.num',sK19(X5,X4,X3,X2,X1,X0))))) | sP9(X2,X3,X4,X5,X0,X1) | sP10(X2,X3,X4,X5,X0,X1) | sP2(X2,X3,X4,X5,X0,X1) | sP4(X2,X3,X4,X5,X0,X1) | sP5(X2,X3,X4,X5,X0,X1) | sP6(X2,X3,X4,X5,X0,X1) | (s('type.patLang.exp',X1) = s('type.patLang.exp','const.patLang.Extend_global_1'(s('type.num.num',sK20(X5,X4,X3,X2,X1,X0)))) & s('type.patLang.exp',X0) = s('type.patLang.exp','const.patLang.Extend_global_1'(s('type.num.num',sK20(X5,X4,X3,X2,X1,X0)))))) & ((~sP7(X2,X3,X4,X5,X0,X1) & ~sP3(X2,X3,X4,X5,X0,X1) & ! [X8] : (s('type.patLang.exp',X1) != s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit',X8))) | s('type.patLang.exp',X0) != s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit',X8)))) & ~sP8(X2,X3,X4,X5,X0,X1) & ~sP1(X4,X3,X5,X0,X1) & ! [X7] : (s('type.patLang.exp',X1) != s('type.patLang.exp','const.patLang.Var_global_1'(s('type.num.num',X7))) | s('type.patLang.exp',X0) != s('type.patLang.exp','const.patLang.Var_global_1'(s('type.num.num',X7)))) & ~sP9(X2,X3,X4,X5,X0,X1) & ~sP10(X2,X3,X4,X5,X0,X1) & ~sP2(X2,X3,X4,X5,X0,X1) & ~sP4(X2,X3,X4,X5,X0,X1) & ~sP5(X2,X3,X4,X5,X0,X1) & ~sP6(X2,X3,X4,X5,X0,X1) & ! [X6] : (s('type.patLang.exp',X1) != s('type.patLang.exp','const.patLang.Extend_global_1'(s('type.num.num',X6))) | s('type.patLang.exp',X0) != s('type.patLang.exp','const.patLang.Extend_global_1'(s('type.num.num',X6))))) | sP11(X0,X1,X2,X3,X4,X5)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK18,sK19,sK20])],[f141])).
fof(f141,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((~sP11(X0,X1,X2,X3,X4,X5) | sP7(X2,X3,X4,X5,X0,X1) | sP3(X2,X3,X4,X5,X0,X1) | ? [X11] : (s('type.patLang.exp',X1) = s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit',X11))) & s('type.patLang.exp',X0) = s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit',X11)))) | sP8(X2,X3,X4,X5,X0,X1) | sP1(X4,X3,X5,X0,X1) | ? [X10] : (s('type.patLang.exp',X1) = s('type.patLang.exp','const.patLang.Var_global_1'(s('type.num.num',X10))) & s('type.patLang.exp',X0) = s('type.patLang.exp','const.patLang.Var_global_1'(s('type.num.num',X10)))) | sP9(X2,X3,X4,X5,X0,X1) | sP10(X2,X3,X4,X5,X0,X1) | sP2(X2,X3,X4,X5,X0,X1) | sP4(X2,X3,X4,X5,X0,X1) | sP5(X2,X3,X4,X5,X0,X1) | sP6(X2,X3,X4,X5,X0,X1) | ? [X9] : (s('type.patLang.exp',X1) = s('type.patLang.exp','const.patLang.Extend_global_1'(s('type.num.num',X9))) & s('type.patLang.exp',X0) = s('type.patLang.exp','const.patLang.Extend_global_1'(s('type.num.num',X9))))) & ((~sP7(X2,X3,X4,X5,X0,X1) & ~sP3(X2,X3,X4,X5,X0,X1) & ! [X8] : (s('type.patLang.exp',X1) != s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit',X8))) | s('type.patLang.exp',X0) != s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit',X8)))) & ~sP8(X2,X3,X4,X5,X0,X1) & ~sP1(X4,X3,X5,X0,X1) & ! [X7] : (s('type.patLang.exp',X1) != s('type.patLang.exp','const.patLang.Var_global_1'(s('type.num.num',X7))) | s('type.patLang.exp',X0) != s('type.patLang.exp','const.patLang.Var_global_1'(s('type.num.num',X7)))) & ~sP9(X2,X3,X4,X5,X0,X1) & ~sP10(X2,X3,X4,X5,X0,X1) & ~sP2(X2,X3,X4,X5,X0,X1) & ~sP4(X2,X3,X4,X5,X0,X1) & ~sP5(X2,X3,X4,X5,X0,X1) & ~sP6(X2,X3,X4,X5,X0,X1) & ! [X6] : (s('type.patLang.exp',X1) != s('type.patLang.exp','const.patLang.Extend_global_1'(s('type.num.num',X6))) | s('type.patLang.exp',X0) != s('type.patLang.exp','const.patLang.Extend_global_1'(s('type.num.num',X6))))) | sP11(X0,X1,X2,X3,X4,X5)))),
  inference(rectify,[],[f140])).
fof(f140,plain,(
  ! [X10,X9,X5,X6,X7,X8] : ((~sP11(X10,X9,X5,X6,X7,X8) | sP7(X5,X6,X7,X8,X10,X9) | sP3(X5,X6,X7,X8,X10,X9) | ? [X41] : (s('type.patLang.exp',X9) = s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit',X41))) & s('type.patLang.exp',X10) = s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit',X41)))) | sP8(X5,X6,X7,X8,X10,X9) | sP1(X7,X6,X8,X10,X9) | ? [X35] : (s('type.patLang.exp',X9) = s('type.patLang.exp','const.patLang.Var_global_1'(s('type.num.num',X35))) & s('type.patLang.exp',X10) = s('type.patLang.exp','const.patLang.Var_global_1'(s('type.num.num',X35)))) | sP9(X5,X6,X7,X8,X10,X9) | sP10(X5,X6,X7,X8,X10,X9) | sP2(X5,X6,X7,X8,X10,X9) | sP4(X5,X6,X7,X8,X10,X9) | sP5(X5,X6,X7,X8,X10,X9) | sP6(X5,X6,X7,X8,X10,X9) | ? [X11] : (s('type.patLang.exp',X9) = s('type.patLang.exp','const.patLang.Extend_global_1'(s('type.num.num',X11))) & s('type.patLang.exp',X10) = s('type.patLang.exp','const.patLang.Extend_global_1'(s('type.num.num',X11))))) & ((~sP7(X5,X6,X7,X8,X10,X9) & ~sP3(X5,X6,X7,X8,X10,X9) & ! [X41] : (s('type.patLang.exp',X9) != s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit',X41))) | s('type.patLang.exp',X10) != s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit',X41)))) & ~sP8(X5,X6,X7,X8,X10,X9) & ~sP1(X7,X6,X8,X10,X9) & ! [X35] : (s('type.patLang.exp',X9) != s('type.patLang.exp','const.patLang.Var_global_1'(s('type.num.num',X35))) | s('type.patLang.exp',X10) != s('type.patLang.exp','const.patLang.Var_global_1'(s('type.num.num',X35)))) & ~sP9(X5,X6,X7,X8,X10,X9) & ~sP10(X5,X6,X7,X8,X10,X9) & ~sP2(X5,X6,X7,X8,X10,X9) & ~sP4(X5,X6,X7,X8,X10,X9) & ~sP5(X5,X6,X7,X8,X10,X9) & ~sP6(X5,X6,X7,X8,X10,X9) & ! [X11] : (s('type.patLang.exp',X9) != s('type.patLang.exp','const.patLang.Extend_global_1'(s('type.num.num',X11))) | s('type.patLang.exp',X10) != s('type.patLang.exp','const.patLang.Extend_global_1'(s('type.num.num',X11))))) | sP11(X10,X9,X5,X6,X7,X8)))),
  inference(flattening,[],[f139])).
fof(f139,plain,(
  ! [X10,X9,X5,X6,X7,X8] : ((~sP11(X10,X9,X5,X6,X7,X8) | (sP7(X5,X6,X7,X8,X10,X9) | sP3(X5,X6,X7,X8,X10,X9) | ? [X41] : (s('type.patLang.exp',X9) = s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit',X41))) & s('type.patLang.exp',X10) = s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit',X41)))) | sP8(X5,X6,X7,X8,X10,X9) | sP1(X7,X6,X8,X10,X9) | ? [X35] : (s('type.patLang.exp',X9) = s('type.patLang.exp','const.patLang.Var_global_1'(s('type.num.num',X35))) & s('type.patLang.exp',X10) = s('type.patLang.exp','const.patLang.Var_global_1'(s('type.num.num',X35)))) | sP9(X5,X6,X7,X8,X10,X9) | sP10(X5,X6,X7,X8,X10,X9) | sP2(X5,X6,X7,X8,X10,X9) | sP4(X5,X6,X7,X8,X10,X9) | sP5(X5,X6,X7,X8,X10,X9) | sP6(X5,X6,X7,X8,X10,X9) | ? [X11] : (s('type.patLang.exp',X9) = s('type.patLang.exp','const.patLang.Extend_global_1'(s('type.num.num',X11))) & s('type.patLang.exp',X10) = s('type.patLang.exp','const.patLang.Extend_global_1'(s('type.num.num',X11)))))) & ((~sP7(X5,X6,X7,X8,X10,X9) & ~sP3(X5,X6,X7,X8,X10,X9) & ! [X41] : (s('type.patLang.exp',X9) != s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit',X41))) | s('type.patLang.exp',X10) != s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit',X41)))) & ~sP8(X5,X6,X7,X8,X10,X9) & ~sP1(X7,X6,X8,X10,X9) & ! [X35] : (s('type.patLang.exp',X9) != s('type.patLang.exp','const.patLang.Var_global_1'(s('type.num.num',X35))) | s('type.patLang.exp',X10) != s('type.patLang.exp','const.patLang.Var_global_1'(s('type.num.num',X35)))) & ~sP9(X5,X6,X7,X8,X10,X9) & ~sP10(X5,X6,X7,X8,X10,X9) & ~sP2(X5,X6,X7,X8,X10,X9) & ~sP4(X5,X6,X7,X8,X10,X9) & ~sP5(X5,X6,X7,X8,X10,X9) & ~sP6(X5,X6,X7,X8,X10,X9) & ! [X11] : (s('type.patLang.exp',X9) != s('type.patLang.exp','const.patLang.Extend_global_1'(s('type.num.num',X11))) | s('type.patLang.exp',X10) != s('type.patLang.exp','const.patLang.Extend_global_1'(s('type.num.num',X11))))) | sP11(X10,X9,X5,X6,X7,X8)))),
  inference(nnf_transformation,[],[f108])).
fof(f108,plain,(
  ! [X10,X9,X5,X6,X7,X8] : (sP11(X10,X9,X5,X6,X7,X8) <=> (sP7(X5,X6,X7,X8,X10,X9) | sP3(X5,X6,X7,X8,X10,X9) | ? [X41] : (s('type.patLang.exp',X9) = s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit',X41))) & s('type.patLang.exp',X10) = s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit',X41)))) | sP8(X5,X6,X7,X8,X10,X9) | sP1(X7,X6,X8,X10,X9) | ? [X35] : (s('type.patLang.exp',X9) = s('type.patLang.exp','const.patLang.Var_global_1'(s('type.num.num',X35))) & s('type.patLang.exp',X10) = s('type.patLang.exp','const.patLang.Var_global_1'(s('type.num.num',X35)))) | sP9(X5,X6,X7,X8,X10,X9) | sP10(X5,X6,X7,X8,X10,X9) | sP2(X5,X6,X7,X8,X10,X9) | sP4(X5,X6,X7,X8,X10,X9) | sP5(X5,X6,X7,X8,X10,X9) | sP6(X5,X6,X7,X8,X10,X9) | ? [X11] : (s('type.patLang.exp',X9) = s('type.patLang.exp','const.patLang.Extend_global_1'(s('type.num.num',X11))) & s('type.patLang.exp',X10) = s('type.patLang.exp','const.patLang.Extend_global_1'(s('type.num.num',X11))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP11])])).
fof(f4916,plain,(
  ~sP11('const.patLang.Lit_1'(s('type.ast.lit',sK13)),'const.patLang.Lit_1'(s('type.ast.lit',sK13)),sK60('const.patLang.Lit_1'(s('type.ast.lit',sK13)),'const.patLang.Lit_1'(s('type.ast.lit',sK13)),sK12,sK15,sK14),sK14,sK15,sK12)),
  inference(subsumption_resolution,[],[f4915,f256])).
fof(f256,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f63])).
fof(f63,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.exh_to_patProof.exp_rel_rules|split|2',aHL_FALSITY)).
fof(f4915,plain,(
  p(s(bool,'F_0')) | ~sP11('const.patLang.Lit_1'(s('type.ast.lit',sK13)),'const.patLang.Lit_1'(s('type.ast.lit',sK13)),sK60('const.patLang.Lit_1'(s('type.ast.lit',sK13)),'const.patLang.Lit_1'(s('type.ast.lit',sK13)),sK12,sK15,sK14),sK14,sK15,sK12)),
  inference(forward_demodulation,[],[f4849,f379])).
fof(f379,plain,(
  s(bool,'F_0') = s(bool,'const.exh_to_patProof.exp_rel_5'(s('type.num.num',sK14),s('type.num.num',sK15),s(fun('type.num.num',fun('type.num.num',bool)),sK12),s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit',sK13))),s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit',sK13)))))),
  inference(resolution,[],[f184,f249])).
fof(f249,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f135])).
fof(f135,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f58])).
fof(f58,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f57])).
fof(f57,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f27])).
fof(f27,axiom,(
  ! [X36] : (s(bool,'F_0') = s(bool,X36) <=> ~p(s(bool,X36)))),
  file('thm.exh_to_patProof.exp_rel_rules|split|2','thm.bool.EQ_CLAUSES|split|3')).
fof(f184,plain,(
  ~p(s(bool,'const.exh_to_patProof.exp_rel_5'(s('type.num.num',sK14),s('type.num.num',sK15),s(fun('type.num.num',fun('type.num.num',bool)),sK12),s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit',sK13))),s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit',sK13))))))),
  inference(cnf_transformation,[],[f110])).
fof(f110,plain,(
  ~p(s(bool,'const.exh_to_patProof.exp_rel_5'(s('type.num.num',sK14),s('type.num.num',sK15),s(fun('type.num.num',fun('type.num.num',bool)),sK12),s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit',sK13))),s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit',sK13))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14,sK15])],[f75])).
fof(f75,plain,(
  ? [X0,X1,X2,X3] : ~p(s(bool,'const.exh_to_patProof.exp_rel_5'(s('type.num.num',X2),s('type.num.num',X3),s(fun('type.num.num',fun('type.num.num',bool)),X0),s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit',X1))),s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit',X1))))))),
  inference(ennf_transformation,[],[f39])).
fof(f39,plain,(
  ~! [X0,X1,X2,X3] : p(s(bool,'const.exh_to_patProof.exp_rel_5'(s('type.num.num',X2),s('type.num.num',X3),s(fun('type.num.num',fun('type.num.num',bool)),X0),s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit',X1))),s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit',X1))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8,X9] : p(s(bool,'const.exh_to_patProof.exp_rel_5'(s('type.num.num',X8),s('type.num.num',X9),s(fun('type.num.num',fun('type.num.num',bool)),X6),s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit',X7))),s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit',X7))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8,X9] : p(s(bool,'const.exh_to_patProof.exp_rel_5'(s('type.num.num',X8),s('type.num.num',X9),s(fun('type.num.num',fun('type.num.num',bool)),X6),s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit',X7))),s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit',X7))))))),
  file('thm.exh_to_patProof.exp_rel_rules|split|2','thm.exh_to_patProof.exp_rel_rules|split|2')).
fof(f4849,plain,(
  p(s(bool,'const.exh_to_patProof.exp_rel_5'(s('type.num.num',sK14),s('type.num.num',sK15),s(fun('type.num.num',fun('type.num.num',bool)),sK12),s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit',sK13))),s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit',sK13)))))) | ~sP11('const.patLang.Lit_1'(s('type.ast.lit',sK13)),'const.patLang.Lit_1'(s('type.ast.lit',sK13)),sK60('const.patLang.Lit_1'(s('type.ast.lit',sK13)),'const.patLang.Lit_1'(s('type.ast.lit',sK13)),sK12,sK15,sK14),sK14,sK15,sK12)),
  inference(resolution,[],[f363,f336])).
fof(f336,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X3,X1,X9] : (p(s(bool,'const.exh_to_patProof.exp_rel_5'(s('type.num.num',X0),s('type.num.num',X1),s(fun('type.num.num',fun('type.num.num',bool)),X2),s('type.patLang.exp',X3),s('type.patLang.exp',X4)))) | p(s(bool,happ(s(fun('type.patLang.exp',bool),happ(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),sK60(X4,X3,X2,X1,X0)),s('type.num.num',X6))),s('type.num.num',X7))),s(fun('type.num.num',fun('type.num.num',bool)),X8))),s('type.patLang.exp',X9))),s('type.patLang.exp',X10)))) | ~sP11(X10,X9,sK60(X4,X3,X2,X1,X0),X6,X7,X8)) )),
  inference(cnf_transformation,[],[f178])).
fof(f178,plain,(
  ! [X0,X1,X2,X3,X4] : ((~p(s(bool,'const.exh_to_patProof.exp_rel_5'(s('type.num.num',X0),s('type.num.num',X1),s(fun('type.num.num',fun('type.num.num',bool)),X2),s('type.patLang.exp',X3),s('type.patLang.exp',X4)))) | ! [X11] : ((sP11(sK59(X11,X4,X3,X2,X1,X0),sK58(X11,X4,X3,X2,X1,X0),X11,sK55(X11,X4,X3,X2,X1,X0),sK56(X11,X4,X3,X2,X1,X0),sK57(X11,X4,X3,X2,X1,X0)) & ~p(s(bool,happ(s(fun('type.patLang.exp',bool),happ(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X11),s('type.num.num',sK55(X11,X4,X3,X2,X1,X0)))),s('type.num.num',sK56(X11,X4,X3,X2,X1,X0)))),s(fun('type.num.num',fun('type.num.num',bool)),sK57(X11,X4,X3,X2,X1,X0)))),s('type.patLang.exp',sK58(X11,X4,X3,X2,X1,X0)))),s('type.patLang.exp',sK59(X11,X4,X3,X2,X1,X0)))))) | p(s(bool,happ(s(fun('type.patLang.exp',bool),happ(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X11),s('type.num.num',X0))),s('type.num.num',X1))),s(fun('type.num.num',fun('type.num.num',bool)),X2))),s('type.patLang.exp',X3))),s('type.patLang.exp',X4)))))) & ((! [X6,X7,X8,X9,X10] : (~sP11(X10,X9,sK60(X4,X3,X2,X1,X0),X6,X7,X8) | p(s(bool,happ(s(fun('type.patLang.exp',bool),happ(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),sK60(X4,X3,X2,X1,X0)),s('type.num.num',X6))),s('type.num.num',X7))),s(fun('type.num.num',fun('type.num.num',bool)),X8))),s('type.patLang.exp',X9))),s('type.patLang.exp',X10))))) & ~p(s(bool,happ(s(fun('type.patLang.exp',bool),happ(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),sK60(X4,X3,X2,X1,X0)),s('type.num.num',X0))),s('type.num.num',X1))),s(fun('type.num.num',fun('type.num.num',bool)),X2))),s('type.patLang.exp',X3))),s('type.patLang.exp',X4))))) | p(s(bool,'const.exh_to_patProof.exp_rel_5'(s('type.num.num',X0),s('type.num.num',X1),s(fun('type.num.num',fun('type.num.num',bool)),X2),s('type.patLang.exp',X3),s('type.patLang.exp',X4))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK55,sK56,sK57,sK58,sK59,sK60])],[f177])).
fof(f177,plain,(
  ! [X0,X1,X2,X3,X4] : ((~p(s(bool,'const.exh_to_patProof.exp_rel_5'(s('type.num.num',X0),s('type.num.num',X1),s(fun('type.num.num',fun('type.num.num',bool)),X2),s('type.patLang.exp',X3),s('type.patLang.exp',X4)))) | ! [X11] : (? [X12,X13,X14,X15,X16] : (sP11(X16,X15,X11,X12,X13,X14) & ~p(s(bool,happ(s(fun('type.patLang.exp',bool),happ(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X11),s('type.num.num',X12))),s('type.num.num',X13))),s(fun('type.num.num',fun('type.num.num',bool)),X14))),s('type.patLang.exp',X15))),s('type.patLang.exp',X16))))) | p(s(bool,happ(s(fun('type.patLang.exp',bool),happ(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X11),s('type.num.num',X0))),s('type.num.num',X1))),s(fun('type.num.num',fun('type.num.num',bool)),X2))),s('type.patLang.exp',X3))),s('type.patLang.exp',X4)))))) & (? [X5] : (! [X6,X7,X8,X9,X10] : (~sP11(X10,X9,X5,X6,X7,X8) | p(s(bool,happ(s(fun('type.patLang.exp',bool),happ(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X5),s('type.num.num',X6))),s('type.num.num',X7))),s(fun('type.num.num',fun('type.num.num',bool)),X8))),s('type.patLang.exp',X9))),s('type.patLang.exp',X10))))) & ~p(s(bool,happ(s(fun('type.patLang.exp',bool),happ(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X5),s('type.num.num',X0))),s('type.num.num',X1))),s(fun('type.num.num',fun('type.num.num',bool)),X2))),s('type.patLang.exp',X3))),s('type.patLang.exp',X4))))) | p(s(bool,'const.exh_to_patProof.exp_rel_5'(s('type.num.num',X0),s('type.num.num',X1),s(fun('type.num.num',fun('type.num.num',bool)),X2),s('type.patLang.exp',X3),s('type.patLang.exp',X4))))))),
  inference(rectify,[],[f176])).
fof(f176,plain,(
  ! [X0,X1,X2,X3,X4] : ((~p(s(bool,'const.exh_to_patProof.exp_rel_5'(s('type.num.num',X0),s('type.num.num',X1),s(fun('type.num.num',fun('type.num.num',bool)),X2),s('type.patLang.exp',X3),s('type.patLang.exp',X4)))) | ! [X5] : (? [X6,X7,X8,X9,X10] : (sP11(X10,X9,X5,X6,X7,X8) & ~p(s(bool,happ(s(fun('type.patLang.exp',bool),happ(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X5),s('type.num.num',X6))),s('type.num.num',X7))),s(fun('type.num.num',fun('type.num.num',bool)),X8))),s('type.patLang.exp',X9))),s('type.patLang.exp',X10))))) | p(s(bool,happ(s(fun('type.patLang.exp',bool),happ(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X5),s('type.num.num',X0))),s('type.num.num',X1))),s(fun('type.num.num',fun('type.num.num',bool)),X2))),s('type.patLang.exp',X3))),s('type.patLang.exp',X4)))))) & (? [X5] : (! [X6,X7,X8,X9,X10] : (~sP11(X10,X9,X5,X6,X7,X8) | p(s(bool,happ(s(fun('type.patLang.exp',bool),happ(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X5),s('type.num.num',X6))),s('type.num.num',X7))),s(fun('type.num.num',fun('type.num.num',bool)),X8))),s('type.patLang.exp',X9))),s('type.patLang.exp',X10))))) & ~p(s(bool,happ(s(fun('type.patLang.exp',bool),happ(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X5),s('type.num.num',X0))),s('type.num.num',X1))),s(fun('type.num.num',fun('type.num.num',bool)),X2))),s('type.patLang.exp',X3))),s('type.patLang.exp',X4))))) | p(s(bool,'const.exh_to_patProof.exp_rel_5'(s('type.num.num',X0),s('type.num.num',X1),s(fun('type.num.num',fun('type.num.num',bool)),X2),s('type.patLang.exp',X3),s('type.patLang.exp',X4))))))),
  inference(nnf_transformation,[],[f109])).
fof(f109,plain,(
  ! [X0,X1,X2,X3,X4] : (p(s(bool,'const.exh_to_patProof.exp_rel_5'(s('type.num.num',X0),s('type.num.num',X1),s(fun('type.num.num',fun('type.num.num',bool)),X2),s('type.patLang.exp',X3),s('type.patLang.exp',X4)))) <=> ! [X5] : (? [X6,X7,X8,X9,X10] : (sP11(X10,X9,X5,X6,X7,X8) & ~p(s(bool,happ(s(fun('type.patLang.exp',bool),happ(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X5),s('type.num.num',X6))),s('type.num.num',X7))),s(fun('type.num.num',fun('type.num.num',bool)),X8))),s('type.patLang.exp',X9))),s('type.patLang.exp',X10))))) | p(s(bool,happ(s(fun('type.patLang.exp',bool),happ(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X5),s('type.num.num',X0))),s('type.num.num',X1))),s(fun('type.num.num',fun('type.num.num',bool)),X2))),s('type.patLang.exp',X3))),s('type.patLang.exp',X4))))))),
  inference(definition_folding,[],[f95,f108,f107,f106,f105,f104,f103,f102,f101,f100,f99,f98,f97])).
fof(f97,plain,(
  ! [X8,X36,X37,X7,X6] : (sP0(X8,X36,X37,X7,X6) <=> (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X36),s('type.num.num',X6)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X37),s('type.num.num',X7)))) & p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),X8),s('type.num.num',X36))),s('type.num.num',X37))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP0])])).
fof(f98,plain,(
  ! [X7,X6,X8,X10,X9] : (sP1(X7,X6,X8,X10,X9) <=> ? [X36,X37] : (s('type.patLang.exp',X9) = s('type.patLang.exp','const.patLang.Var_local_1'(s('type.num.num',X36))) & s('type.patLang.exp',X10) = s('type.patLang.exp','const.patLang.Var_local_1'(s('type.num.num',X37))) & (sP0(X8,X36,X37,X7,X6) | (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num',X36)))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num',X37)))) & s('type.num.num',X36) = s('type.num.num',X37)))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP1])])).
fof(f99,plain,(
  ! [X5,X6,X7,X8,X10,X9] : (sP2(X5,X6,X7,X8,X10,X9) <=> ? [X24,X25,X26,X27,X28,X29] : (s('type.patLang.exp',X9) = s('type.patLang.exp','const.patLang.If_3'(s('type.patLang.exp',X24),s('type.patLang.exp',X25),s('type.patLang.exp',X26))) & s('type.patLang.exp',X10) = s('type.patLang.exp','const.patLang.If_3'(s('type.patLang.exp',X27),s('type.patLang.exp',X28),s('type.patLang.exp',X29))) & p(s(bool,happ(s(fun('type.patLang.exp',bool),happ(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X5),s('type.num.num',X6))),s('type.num.num',X7))),s(fun('type.num.num',fun('type.num.num',bool)),X8))),s('type.patLang.exp',X24))),s('type.patLang.exp',X27)))) & p(s(bool,happ(s(fun('type.patLang.exp',bool),happ(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X5),s('type.num.num',X6))),s('type.num.num',X7))),s(fun('type.num.num',fun('type.num.num',bool)),X8))),s('type.patLang.exp',X25))),s('type.patLang.exp',X28)))) & p(s(bool,happ(s(fun('type.patLang.exp',bool),happ(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X5),s('type.num.num',X6))),s('type.num.num',X7))),s(fun('type.num.num',fun('type.num.num',bool)),X8))),s('type.patLang.exp',X26))),s('type.patLang.exp',X29))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP2])])).
fof(f100,plain,(
  ! [X5,X6,X7,X8,X10,X9] : (sP3(X5,X6,X7,X8,X10,X9) <=> ? [X42,X43,X44,X45] : (s('type.patLang.exp',X9) = s('type.patLang.exp','const.patLang.Handle_2'(s('type.patLang.exp',X42),s('type.patLang.exp',X43))) & s('type.patLang.exp',X10) = s('type.patLang.exp','const.patLang.Handle_2'(s('type.patLang.exp',X44),s('type.patLang.exp',X45))) & p(s(bool,happ(s(fun('type.patLang.exp',bool),happ(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X5),s('type.num.num',X6))),s('type.num.num',X7))),s(fun('type.num.num',fun('type.num.num',bool)),X8))),s('type.patLang.exp',X42))),s('type.patLang.exp',X44)))) & p(s(bool,happ(s(fun('type.patLang.exp',bool),happ(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),X8))))),s('type.patLang.exp',X43))),s('type.patLang.exp',X45))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP3])])).
fof(f101,plain,(
  ! [X5,X6,X7,X8,X10,X9] : (sP4(X5,X6,X7,X8,X10,X9) <=> ? [X20,X21,X22,X23] : (s('type.patLang.exp',X9) = s('type.patLang.exp','const.patLang.Let_2'(s('type.patLang.exp',X20),s('type.patLang.exp',X21))) & s('type.patLang.exp',X10) = s('type.patLang.exp','const.patLang.Let_2'(s('type.patLang.exp',X22),s('type.patLang.exp',X23))) & p(s(bool,happ(s(fun('type.patLang.exp',bool),happ(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X5),s('type.num.num',X6))),s('type.num.num',X7))),s(fun('type.num.num',fun('type.num.num',bool)),X8))),s('type.patLang.exp',X20))),s('type.patLang.exp',X22)))) & p(s(bool,happ(s(fun('type.patLang.exp',bool),happ(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),X8))))),s('type.patLang.exp',X21))),s('type.patLang.exp',X23))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP4])])).
fof(f102,plain,(
  ! [X5,X6,X7,X8,X10,X9] : (sP5(X5,X6,X7,X8,X10,X9) <=> ? [X16,X17,X18,X19] : (s('type.patLang.exp',X9) = s('type.patLang.exp','const.patLang.Seq_2'(s('type.patLang.exp',X16),s('type.patLang.exp',X17))) & s('type.patLang.exp',X10) = s('type.patLang.exp','const.patLang.Seq_2'(s('type.patLang.exp',X18),s('type.patLang.exp',X19))) & p(s(bool,happ(s(fun('type.patLang.exp',bool),happ(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X5),s('type.num.num',X6))),s('type.num.num',X7))),s(fun('type.num.num',fun('type.num.num',bool)),X8))),s('type.patLang.exp',X16))),s('type.patLang.exp',X18)))) & p(s(bool,happ(s(fun('type.patLang.exp',bool),happ(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X5),s('type.num.num',X6))),s('type.num.num',X7))),s(fun('type.num.num',fun('type.num.num',bool)),X8))),s('type.patLang.exp',X17))),s('type.patLang.exp',X19))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP5])])).
fof(f103,plain,(
  ! [X5,X6,X7,X8,X10,X9] : (sP6(X5,X6,X7,X8,X10,X9) <=> ? [X12,X13,X14,X15] : (s('type.patLang.exp',X9) = s('type.patLang.exp','const.patLang.Letrec_2'(s('type.list.list'('type.patLang.exp'),X14),s('type.patLang.exp',X12))) & s('type.patLang.exp',X10) = s('type.patLang.exp','const.patLang.Letrec_2'(s('type.list.list'('type.patLang.exp'),X15),s('type.patLang.exp',X13))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patLang.exp'),X14))))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patLang.exp'),X15))))))))),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bindn_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patLang.exp'),X14))))),s(fun('type.num.num',fun('type.num.num',bool)),X8))))),s('type.list.list'('type.patLang.exp'),X14),s('type.list.list'('type.patLang.exp'),X15)))) & p(s(bool,happ(s(fun('type.patLang.exp',bool),happ(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patLang.exp'),X14))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patLang.exp'),X15))))))),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bindn_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patLang.exp'),X14))),s(fun('type.num.num',fun('type.num.num',bool)),X8))))),s('type.patLang.exp',X12))),s('type.patLang.exp',X13))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP6])])).
fof(f104,plain,(
  ! [X5,X6,X7,X8,X10,X9] : (sP7(X5,X6,X7,X8,X10,X9) <=> ? [X46,X47] : (s('type.patLang.exp',X9) = s('type.patLang.exp','const.patLang.Raise_1'(s('type.patLang.exp',X46))) & s('type.patLang.exp',X10) = s('type.patLang.exp','const.patLang.Raise_1'(s('type.patLang.exp',X47))) & p(s(bool,happ(s(fun('type.patLang.exp',bool),happ(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X5),s('type.num.num',X6))),s('type.num.num',X7))),s(fun('type.num.num',fun('type.num.num',bool)),X8))),s('type.patLang.exp',X46))),s('type.patLang.exp',X47))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP7])])).
fof(f105,plain,(
  ! [X5,X6,X7,X8,X10,X9] : (sP8(X5,X6,X7,X8,X10,X9) <=> ? [X38,X39,X40] : (s('type.patLang.exp',X9) = s('type.patLang.exp','const.patLang.Con_2'(s('type.num.num',X40),s('type.list.list'('type.patLang.exp'),X38))) & s('type.patLang.exp',X10) = s('type.patLang.exp','const.patLang.Con_2'(s('type.num.num',X40),s('type.list.list'('type.patLang.exp'),X39))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X5),s('type.num.num',X6))),s('type.num.num',X7))),s(fun('type.num.num',fun('type.num.num',bool)),X8))),s('type.list.list'('type.patLang.exp'),X38),s('type.list.list'('type.patLang.exp'),X39))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP8])])).
fof(f106,plain,(
  ! [X5,X6,X7,X8,X10,X9] : (sP9(X5,X6,X7,X8,X10,X9) <=> ? [X33,X34] : (s('type.patLang.exp',X9) = s('type.patLang.exp','const.patLang.Fun_1'(s('type.patLang.exp',X33))) & s('type.patLang.exp',X10) = s('type.patLang.exp','const.patLang.Fun_1'(s('type.patLang.exp',X34))) & p(s(bool,happ(s(fun('type.patLang.exp',bool),happ(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),X8))))),s('type.patLang.exp',X33))),s('type.patLang.exp',X34))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP9])])).
fof(f107,plain,(
  ! [X5,X6,X7,X8,X10,X9] : (sP10(X5,X6,X7,X8,X10,X9) <=> ? [X30,X31,X32] : (s('type.patLang.exp',X9) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op',X32),s('type.list.list'('type.patLang.exp'),X30))) & s('type.patLang.exp',X10) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op',X32),s('type.list.list'('type.patLang.exp'),X31))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X5),s('type.num.num',X6))),s('type.num.num',X7))),s(fun('type.num.num',fun('type.num.num',bool)),X8))),s('type.list.list'('type.patLang.exp'),X30),s('type.list.list'('type.patLang.exp'),X31))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP10])])).
fof(f95,plain,(
  ! [X0,X1,X2,X3,X4] : (p(s(bool,'const.exh_to_patProof.exp_rel_5'(s('type.num.num',X0),s('type.num.num',X1),s(fun('type.num.num',fun('type.num.num',bool)),X2),s('type.patLang.exp',X3),s('type.patLang.exp',X4)))) <=> ! [X5] : (? [X6,X7,X8,X9,X10] : ((? [X46,X47] : (s('type.patLang.exp',X9) = s('type.patLang.exp','const.patLang.Raise_1'(s('type.patLang.exp',X46))) & s('type.patLang.exp',X10) = s('type.patLang.exp','const.patLang.Raise_1'(s('type.patLang.exp',X47))) & p(s(bool,happ(s(fun('type.patLang.exp',bool),happ(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X5),s('type.num.num',X6))),s('type.num.num',X7))),s(fun('type.num.num',fun('type.num.num',bool)),X8))),s('type.patLang.exp',X46))),s('type.patLang.exp',X47))))) | ? [X42,X43,X44,X45] : (s('type.patLang.exp',X9) = s('type.patLang.exp','const.patLang.Handle_2'(s('type.patLang.exp',X42),s('type.patLang.exp',X43))) & s('type.patLang.exp',X10) = s('type.patLang.exp','const.patLang.Handle_2'(s('type.patLang.exp',X44),s('type.patLang.exp',X45))) & p(s(bool,happ(s(fun('type.patLang.exp',bool),happ(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X5),s('type.num.num',X6))),s('type.num.num',X7))),s(fun('type.num.num',fun('type.num.num',bool)),X8))),s('type.patLang.exp',X42))),s('type.patLang.exp',X44)))) & p(s(bool,happ(s(fun('type.patLang.exp',bool),happ(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),X8))))),s('type.patLang.exp',X43))),s('type.patLang.exp',X45))))) | ? [X41] : (s('type.patLang.exp',X9) = s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit',X41))) & s('type.patLang.exp',X10) = s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit',X41)))) | ? [X38,X39,X40] : (s('type.patLang.exp',X9) = s('type.patLang.exp','const.patLang.Con_2'(s('type.num.num',X40),s('type.list.list'('type.patLang.exp'),X38))) & s('type.patLang.exp',X10) = s('type.patLang.exp','const.patLang.Con_2'(s('type.num.num',X40),s('type.list.list'('type.patLang.exp'),X39))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X5),s('type.num.num',X6))),s('type.num.num',X7))),s(fun('type.num.num',fun('type.num.num',bool)),X8))),s('type.list.list'('type.patLang.exp'),X38),s('type.list.list'('type.patLang.exp'),X39))))) | ? [X36,X37] : (s('type.patLang.exp',X9) = s('type.patLang.exp','const.patLang.Var_local_1'(s('type.num.num',X36))) & s('type.patLang.exp',X10) = s('type.patLang.exp','const.patLang.Var_local_1'(s('type.num.num',X37))) & ((p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X36),s('type.num.num',X6)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X37),s('type.num.num',X7)))) & p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),X8),s('type.num.num',X36))),s('type.num.num',X37))))) | (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num',X36)))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num',X37)))) & s('type.num.num',X36) = s('type.num.num',X37)))) | ? [X35] : (s('type.patLang.exp',X9) = s('type.patLang.exp','const.patLang.Var_global_1'(s('type.num.num',X35))) & s('type.patLang.exp',X10) = s('type.patLang.exp','const.patLang.Var_global_1'(s('type.num.num',X35)))) | ? [X33,X34] : (s('type.patLang.exp',X9) = s('type.patLang.exp','const.patLang.Fun_1'(s('type.patLang.exp',X33))) & s('type.patLang.exp',X10) = s('type.patLang.exp','const.patLang.Fun_1'(s('type.patLang.exp',X34))) & p(s(bool,happ(s(fun('type.patLang.exp',bool),happ(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),X8))))),s('type.patLang.exp',X33))),s('type.patLang.exp',X34))))) | ? [X30,X31,X32] : (s('type.patLang.exp',X9) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op',X32),s('type.list.list'('type.patLang.exp'),X30))) & s('type.patLang.exp',X10) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op',X32),s('type.list.list'('type.patLang.exp'),X31))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X5),s('type.num.num',X6))),s('type.num.num',X7))),s(fun('type.num.num',fun('type.num.num',bool)),X8))),s('type.list.list'('type.patLang.exp'),X30),s('type.list.list'('type.patLang.exp'),X31))))) | ? [X24,X25,X26,X27,X28,X29] : (s('type.patLang.exp',X9) = s('type.patLang.exp','const.patLang.If_3'(s('type.patLang.exp',X24),s('type.patLang.exp',X25),s('type.patLang.exp',X26))) & s('type.patLang.exp',X10) = s('type.patLang.exp','const.patLang.If_3'(s('type.patLang.exp',X27),s('type.patLang.exp',X28),s('type.patLang.exp',X29))) & p(s(bool,happ(s(fun('type.patLang.exp',bool),happ(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X5),s('type.num.num',X6))),s('type.num.num',X7))),s(fun('type.num.num',fun('type.num.num',bool)),X8))),s('type.patLang.exp',X24))),s('type.patLang.exp',X27)))) & p(s(bool,happ(s(fun('type.patLang.exp',bool),happ(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X5),s('type.num.num',X6))),s('type.num.num',X7))),s(fun('type.num.num',fun('type.num.num',bool)),X8))),s('type.patLang.exp',X25))),s('type.patLang.exp',X28)))) & p(s(bool,happ(s(fun('type.patLang.exp',bool),happ(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X5),s('type.num.num',X6))),s('type.num.num',X7))),s(fun('type.num.num',fun('type.num.num',bool)),X8))),s('type.patLang.exp',X26))),s('type.patLang.exp',X29))))) | ? [X20,X21,X22,X23] : (s('type.patLang.exp',X9) = s('type.patLang.exp','const.patLang.Let_2'(s('type.patLang.exp',X20),s('type.patLang.exp',X21))) & s('type.patLang.exp',X10) = s('type.patLang.exp','const.patLang.Let_2'(s('type.patLang.exp',X22),s('type.patLang.exp',X23))) & p(s(bool,happ(s(fun('type.patLang.exp',bool),happ(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X5),s('type.num.num',X6))),s('type.num.num',X7))),s(fun('type.num.num',fun('type.num.num',bool)),X8))),s('type.patLang.exp',X20))),s('type.patLang.exp',X22)))) & p(s(bool,happ(s(fun('type.patLang.exp',bool),happ(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),X8))))),s('type.patLang.exp',X21))),s('type.patLang.exp',X23))))) | ? [X16,X17,X18,X19] : (s('type.patLang.exp',X9) = s('type.patLang.exp','const.patLang.Seq_2'(s('type.patLang.exp',X16),s('type.patLang.exp',X17))) & s('type.patLang.exp',X10) = s('type.patLang.exp','const.patLang.Seq_2'(s('type.patLang.exp',X18),s('type.patLang.exp',X19))) & p(s(bool,happ(s(fun('type.patLang.exp',bool),happ(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X5),s('type.num.num',X6))),s('type.num.num',X7))),s(fun('type.num.num',fun('type.num.num',bool)),X8))),s('type.patLang.exp',X16))),s('type.patLang.exp',X18)))) & p(s(bool,happ(s(fun('type.patLang.exp',bool),happ(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X5),s('type.num.num',X6))),s('type.num.num',X7))),s(fun('type.num.num',fun('type.num.num',bool)),X8))),s('type.patLang.exp',X17))),s('type.patLang.exp',X19))))) | ? [X12,X13,X14,X15] : (s('type.patLang.exp',X9) = s('type.patLang.exp','const.patLang.Letrec_2'(s('type.list.list'('type.patLang.exp'),X14),s('type.patLang.exp',X12))) & s('type.patLang.exp',X10) = s('type.patLang.exp','const.patLang.Letrec_2'(s('type.list.list'('type.patLang.exp'),X15),s('type.patLang.exp',X13))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patLang.exp'),X14))))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patLang.exp'),X15))))))))),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bindn_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patLang.exp'),X14))))),s(fun('type.num.num',fun('type.num.num',bool)),X8))))),s('type.list.list'('type.patLang.exp'),X14),s('type.list.list'('type.patLang.exp'),X15)))) & p(s(bool,happ(s(fun('type.patLang.exp',bool),happ(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patLang.exp'),X14))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patLang.exp'),X15))))))),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bindn_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patLang.exp'),X14))),s(fun('type.num.num',fun('type.num.num',bool)),X8))))),s('type.patLang.exp',X12))),s('type.patLang.exp',X13))))) | ? [X11] : (s('type.patLang.exp',X9) = s('type.patLang.exp','const.patLang.Extend_global_1'(s('type.num.num',X11))) & s('type.patLang.exp',X10) = s('type.patLang.exp','const.patLang.Extend_global_1'(s('type.num.num',X11))))) & ~p(s(bool,happ(s(fun('type.patLang.exp',bool),happ(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X5),s('type.num.num',X6))),s('type.num.num',X7))),s(fun('type.num.num',fun('type.num.num',bool)),X8))),s('type.patLang.exp',X9))),s('type.patLang.exp',X10))))) | p(s(bool,happ(s(fun('type.patLang.exp',bool),happ(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X5),s('type.num.num',X0))),s('type.num.num',X1))),s(fun('type.num.num',fun('type.num.num',bool)),X2))),s('type.patLang.exp',X3))),s('type.patLang.exp',X4))))))),
  inference(ennf_transformation,[],[f65])).
fof(f65,plain,(
  ! [X0,X1,X2,X3,X4] : (p(s(bool,'const.exh_to_patProof.exp_rel_5'(s('type.num.num',X0),s('type.num.num',X1),s(fun('type.num.num',fun('type.num.num',bool)),X2),s('type.patLang.exp',X3),s('type.patLang.exp',X4)))) <=> ! [X5] : (! [X6,X7,X8,X9,X10] : ((? [X46,X47] : (s('type.patLang.exp',X9) = s('type.patLang.exp','const.patLang.Raise_1'(s('type.patLang.exp',X46))) & s('type.patLang.exp',X10) = s('type.patLang.exp','const.patLang.Raise_1'(s('type.patLang.exp',X47))) & p(s(bool,happ(s(fun('type.patLang.exp',bool),happ(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X5),s('type.num.num',X6))),s('type.num.num',X7))),s(fun('type.num.num',fun('type.num.num',bool)),X8))),s('type.patLang.exp',X46))),s('type.patLang.exp',X47))))) | ? [X42,X43,X44,X45] : (s('type.patLang.exp',X9) = s('type.patLang.exp','const.patLang.Handle_2'(s('type.patLang.exp',X42),s('type.patLang.exp',X43))) & s('type.patLang.exp',X10) = s('type.patLang.exp','const.patLang.Handle_2'(s('type.patLang.exp',X44),s('type.patLang.exp',X45))) & p(s(bool,happ(s(fun('type.patLang.exp',bool),happ(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X5),s('type.num.num',X6))),s('type.num.num',X7))),s(fun('type.num.num',fun('type.num.num',bool)),X8))),s('type.patLang.exp',X42))),s('type.patLang.exp',X44)))) & p(s(bool,happ(s(fun('type.patLang.exp',bool),happ(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),X8))))),s('type.patLang.exp',X43))),s('type.patLang.exp',X45))))) | ? [X41] : (s('type.patLang.exp',X9) = s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit',X41))) & s('type.patLang.exp',X10) = s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit',X41)))) | ? [X38,X39,X40] : (s('type.patLang.exp',X9) = s('type.patLang.exp','const.patLang.Con_2'(s('type.num.num',X40),s('type.list.list'('type.patLang.exp'),X38))) & s('type.patLang.exp',X10) = s('type.patLang.exp','const.patLang.Con_2'(s('type.num.num',X40),s('type.list.list'('type.patLang.exp'),X39))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X5),s('type.num.num',X6))),s('type.num.num',X7))),s(fun('type.num.num',fun('type.num.num',bool)),X8))),s('type.list.list'('type.patLang.exp'),X38),s('type.list.list'('type.patLang.exp'),X39))))) | ? [X36,X37] : (s('type.patLang.exp',X9) = s('type.patLang.exp','const.patLang.Var_local_1'(s('type.num.num',X36))) & s('type.patLang.exp',X10) = s('type.patLang.exp','const.patLang.Var_local_1'(s('type.num.num',X37))) & ((p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X36),s('type.num.num',X6)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X37),s('type.num.num',X7)))) & p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),X8),s('type.num.num',X36))),s('type.num.num',X37))))) | (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num',X36)))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num',X37)))) & s('type.num.num',X36) = s('type.num.num',X37)))) | ? [X35] : (s('type.patLang.exp',X9) = s('type.patLang.exp','const.patLang.Var_global_1'(s('type.num.num',X35))) & s('type.patLang.exp',X10) = s('type.patLang.exp','const.patLang.Var_global_1'(s('type.num.num',X35)))) | ? [X33,X34] : (s('type.patLang.exp',X9) = s('type.patLang.exp','const.patLang.Fun_1'(s('type.patLang.exp',X33))) & s('type.patLang.exp',X10) = s('type.patLang.exp','const.patLang.Fun_1'(s('type.patLang.exp',X34))) & p(s(bool,happ(s(fun('type.patLang.exp',bool),happ(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),X8))))),s('type.patLang.exp',X33))),s('type.patLang.exp',X34))))) | ? [X30,X31,X32] : (s('type.patLang.exp',X9) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op',X32),s('type.list.list'('type.patLang.exp'),X30))) & s('type.patLang.exp',X10) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op',X32),s('type.list.list'('type.patLang.exp'),X31))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X5),s('type.num.num',X6))),s('type.num.num',X7))),s(fun('type.num.num',fun('type.num.num',bool)),X8))),s('type.list.list'('type.patLang.exp'),X30),s('type.list.list'('type.patLang.exp'),X31))))) | ? [X24,X25,X26,X27,X28,X29] : (s('type.patLang.exp',X9) = s('type.patLang.exp','const.patLang.If_3'(s('type.patLang.exp',X24),s('type.patLang.exp',X25),s('type.patLang.exp',X26))) & s('type.patLang.exp',X10) = s('type.patLang.exp','const.patLang.If_3'(s('type.patLang.exp',X27),s('type.patLang.exp',X28),s('type.patLang.exp',X29))) & p(s(bool,happ(s(fun('type.patLang.exp',bool),happ(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X5),s('type.num.num',X6))),s('type.num.num',X7))),s(fun('type.num.num',fun('type.num.num',bool)),X8))),s('type.patLang.exp',X24))),s('type.patLang.exp',X27)))) & p(s(bool,happ(s(fun('type.patLang.exp',bool),happ(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X5),s('type.num.num',X6))),s('type.num.num',X7))),s(fun('type.num.num',fun('type.num.num',bool)),X8))),s('type.patLang.exp',X25))),s('type.patLang.exp',X28)))) & p(s(bool,happ(s(fun('type.patLang.exp',bool),happ(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X5),s('type.num.num',X6))),s('type.num.num',X7))),s(fun('type.num.num',fun('type.num.num',bool)),X8))),s('type.patLang.exp',X26))),s('type.patLang.exp',X29))))) | ? [X20,X21,X22,X23] : (s('type.patLang.exp',X9) = s('type.patLang.exp','const.patLang.Let_2'(s('type.patLang.exp',X20),s('type.patLang.exp',X21))) & s('type.patLang.exp',X10) = s('type.patLang.exp','const.patLang.Let_2'(s('type.patLang.exp',X22),s('type.patLang.exp',X23))) & p(s(bool,happ(s(fun('type.patLang.exp',bool),happ(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X5),s('type.num.num',X6))),s('type.num.num',X7))),s(fun('type.num.num',fun('type.num.num',bool)),X8))),s('type.patLang.exp',X20))),s('type.patLang.exp',X22)))) & p(s(bool,happ(s(fun('type.patLang.exp',bool),happ(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),X8))))),s('type.patLang.exp',X21))),s('type.patLang.exp',X23))))) | ? [X16,X17,X18,X19] : (s('type.patLang.exp',X9) = s('type.patLang.exp','const.patLang.Seq_2'(s('type.patLang.exp',X16),s('type.patLang.exp',X17))) & s('type.patLang.exp',X10) = s('type.patLang.exp','const.patLang.Seq_2'(s('type.patLang.exp',X18),s('type.patLang.exp',X19))) & p(s(bool,happ(s(fun('type.patLang.exp',bool),happ(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X5),s('type.num.num',X6))),s('type.num.num',X7))),s(fun('type.num.num',fun('type.num.num',bool)),X8))),s('type.patLang.exp',X16))),s('type.patLang.exp',X18)))) & p(s(bool,happ(s(fun('type.patLang.exp',bool),happ(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X5),s('type.num.num',X6))),s('type.num.num',X7))),s(fun('type.num.num',fun('type.num.num',bool)),X8))),s('type.patLang.exp',X17))),s('type.patLang.exp',X19))))) | ? [X12,X13,X14,X15] : (s('type.patLang.exp',X9) = s('type.patLang.exp','const.patLang.Letrec_2'(s('type.list.list'('type.patLang.exp'),X14),s('type.patLang.exp',X12))) & s('type.patLang.exp',X10) = s('type.patLang.exp','const.patLang.Letrec_2'(s('type.list.list'('type.patLang.exp'),X15),s('type.patLang.exp',X13))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patLang.exp'),X14))))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patLang.exp'),X15))))))))),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bindn_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patLang.exp'),X14))))),s(fun('type.num.num',fun('type.num.num',bool)),X8))))),s('type.list.list'('type.patLang.exp'),X14),s('type.list.list'('type.patLang.exp'),X15)))) & p(s(bool,happ(s(fun('type.patLang.exp',bool),happ(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patLang.exp'),X14))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patLang.exp'),X15))))))),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bindn_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patLang.exp'),X14))),s(fun('type.num.num',fun('type.num.num',bool)),X8))))),s('type.patLang.exp',X12))),s('type.patLang.exp',X13))))) | ? [X11] : (s('type.patLang.exp',X9) = s('type.patLang.exp','const.patLang.Extend_global_1'(s('type.num.num',X11))) & s('type.patLang.exp',X10) = s('type.patLang.exp','const.patLang.Extend_global_1'(s('type.num.num',X11))))) => p(s(bool,happ(s(fun('type.patLang.exp',bool),happ(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X5),s('type.num.num',X6))),s('type.num.num',X7))),s(fun('type.num.num',fun('type.num.num',bool)),X8))),s('type.patLang.exp',X9))),s('type.patLang.exp',X10))))) => p(s(bool,happ(s(fun('type.patLang.exp',bool),happ(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X5),s('type.num.num',X0))),s('type.num.num',X1))),s(fun('type.num.num',fun('type.num.num',bool)),X2))),s('type.patLang.exp',X3))),s('type.patLang.exp',X4))))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X5,X10,X11,X12,X13] : (p(s(bool,'const.exh_to_patProof.exp_rel_5'(s('type.num.num',X5),s('type.num.num',X10),s(fun('type.num.num',fun('type.num.num',bool)),X11),s('type.patLang.exp',X12),s('type.patLang.exp',X13)))) <=> ! [X14] : (! [X15,X16,X17,X18,X19] : ((? [X20,X21] : (s('type.patLang.exp',X18) = s('type.patLang.exp','const.patLang.Raise_1'(s('type.patLang.exp',X20))) & s('type.patLang.exp',X19) = s('type.patLang.exp','const.patLang.Raise_1'(s('type.patLang.exp',X21))) & p(s(bool,happ(s(fun('type.patLang.exp',bool),happ(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X14),s('type.num.num',X15))),s('type.num.num',X16))),s(fun('type.num.num',fun('type.num.num',bool)),X17))),s('type.patLang.exp',X20))),s('type.patLang.exp',X21))))) | ? [X22,X23,X24,X25] : (s('type.patLang.exp',X18) = s('type.patLang.exp','const.patLang.Handle_2'(s('type.patLang.exp',X22),s('type.patLang.exp',X23))) & s('type.patLang.exp',X19) = s('type.patLang.exp','const.patLang.Handle_2'(s('type.patLang.exp',X24),s('type.patLang.exp',X25))) & p(s(bool,happ(s(fun('type.patLang.exp',bool),happ(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X14),s('type.num.num',X15))),s('type.num.num',X16))),s(fun('type.num.num',fun('type.num.num',bool)),X17))),s('type.patLang.exp',X22))),s('type.patLang.exp',X24)))) & p(s(bool,happ(s(fun('type.patLang.exp',bool),happ(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X14),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),X17))))),s('type.patLang.exp',X23))),s('type.patLang.exp',X25))))) | ? [X7] : (s('type.patLang.exp',X18) = s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit',X7))) & s('type.patLang.exp',X19) = s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit',X7)))) | ? [X26,X27,X28] : (s('type.patLang.exp',X18) = s('type.patLang.exp','const.patLang.Con_2'(s('type.num.num',X28),s('type.list.list'('type.patLang.exp'),X26))) & s('type.patLang.exp',X19) = s('type.patLang.exp','const.patLang.Con_2'(s('type.num.num',X28),s('type.list.list'('type.patLang.exp'),X27))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X14),s('type.num.num',X15))),s('type.num.num',X16))),s(fun('type.num.num',fun('type.num.num',bool)),X17))),s('type.list.list'('type.patLang.exp'),X26),s('type.list.list'('type.patLang.exp'),X27))))) | ? [X29,X30] : (s('type.patLang.exp',X18) = s('type.patLang.exp','const.patLang.Var_local_1'(s('type.num.num',X29))) & s('type.patLang.exp',X19) = s('type.patLang.exp','const.patLang.Var_local_1'(s('type.num.num',X30))) & ((p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X29),s('type.num.num',X15)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X30),s('type.num.num',X16)))) & p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),X17),s('type.num.num',X29))),s('type.num.num',X30))))) | (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X15),s('type.num.num',X29)))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X16),s('type.num.num',X30)))) & s('type.num.num',X29) = s('type.num.num',X30)))) | ? [X31] : (s('type.patLang.exp',X18) = s('type.patLang.exp','const.patLang.Var_global_1'(s('type.num.num',X31))) & s('type.patLang.exp',X19) = s('type.patLang.exp','const.patLang.Var_global_1'(s('type.num.num',X31)))) | ? [X20,X21] : (s('type.patLang.exp',X18) = s('type.patLang.exp','const.patLang.Fun_1'(s('type.patLang.exp',X20))) & s('type.patLang.exp',X19) = s('type.patLang.exp','const.patLang.Fun_1'(s('type.patLang.exp',X21))) & p(s(bool,happ(s(fun('type.patLang.exp',bool),happ(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X14),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),X17))))),s('type.patLang.exp',X20))),s('type.patLang.exp',X21))))) | ? [X26,X27,X32] : (s('type.patLang.exp',X18) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op',X32),s('type.list.list'('type.patLang.exp'),X26))) & s('type.patLang.exp',X19) = s('type.patLang.exp','const.patLang.App_2'(s('type.patLang.op',X32),s('type.list.list'('type.patLang.exp'),X27))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X14),s('type.num.num',X15))),s('type.num.num',X16))),s(fun('type.num.num',fun('type.num.num',bool)),X17))),s('type.list.list'('type.patLang.exp'),X26),s('type.list.list'('type.patLang.exp'),X27))))) | ? [X22,X23,X33,X24,X25,X34] : (s('type.patLang.exp',X18) = s('type.patLang.exp','const.patLang.If_3'(s('type.patLang.exp',X22),s('type.patLang.exp',X23),s('type.patLang.exp',X33))) & s('type.patLang.exp',X19) = s('type.patLang.exp','const.patLang.If_3'(s('type.patLang.exp',X24),s('type.patLang.exp',X25),s('type.patLang.exp',X34))) & p(s(bool,happ(s(fun('type.patLang.exp',bool),happ(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X14),s('type.num.num',X15))),s('type.num.num',X16))),s(fun('type.num.num',fun('type.num.num',bool)),X17))),s('type.patLang.exp',X22))),s('type.patLang.exp',X24)))) & p(s(bool,happ(s(fun('type.patLang.exp',bool),happ(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X14),s('type.num.num',X15))),s('type.num.num',X16))),s(fun('type.num.num',fun('type.num.num',bool)),X17))),s('type.patLang.exp',X23))),s('type.patLang.exp',X25)))) & p(s(bool,happ(s(fun('type.patLang.exp',bool),happ(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X14),s('type.num.num',X15))),s('type.num.num',X16))),s(fun('type.num.num',fun('type.num.num',bool)),X17))),s('type.patLang.exp',X33))),s('type.patLang.exp',X34))))) | ? [X22,X23,X24,X25] : (s('type.patLang.exp',X18) = s('type.patLang.exp','const.patLang.Let_2'(s('type.patLang.exp',X22),s('type.patLang.exp',X23))) & s('type.patLang.exp',X19) = s('type.patLang.exp','const.patLang.Let_2'(s('type.patLang.exp',X24),s('type.patLang.exp',X25))) & p(s(bool,happ(s(fun('type.patLang.exp',bool),happ(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X14),s('type.num.num',X15))),s('type.num.num',X16))),s(fun('type.num.num',fun('type.num.num',bool)),X17))),s('type.patLang.exp',X22))),s('type.patLang.exp',X24)))) & p(s(bool,happ(s(fun('type.patLang.exp',bool),happ(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X14),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bind_1'(s(fun('type.num.num',fun('type.num.num',bool)),X17))))),s('type.patLang.exp',X23))),s('type.patLang.exp',X25))))) | ? [X22,X23,X24,X25] : (s('type.patLang.exp',X18) = s('type.patLang.exp','const.patLang.Seq_2'(s('type.patLang.exp',X22),s('type.patLang.exp',X23))) & s('type.patLang.exp',X19) = s('type.patLang.exp','const.patLang.Seq_2'(s('type.patLang.exp',X24),s('type.patLang.exp',X25))) & p(s(bool,happ(s(fun('type.patLang.exp',bool),happ(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X14),s('type.num.num',X15))),s('type.num.num',X16))),s(fun('type.num.num',fun('type.num.num',bool)),X17))),s('type.patLang.exp',X22))),s('type.patLang.exp',X24)))) & p(s(bool,happ(s(fun('type.patLang.exp',bool),happ(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X14),s('type.num.num',X15))),s('type.num.num',X16))),s(fun('type.num.num',fun('type.num.num',bool)),X17))),s('type.patLang.exp',X23))),s('type.patLang.exp',X25))))) | ? [X20,X21,X26,X27] : (s('type.patLang.exp',X18) = s('type.patLang.exp','const.patLang.Letrec_2'(s('type.list.list'('type.patLang.exp'),X26),s('type.patLang.exp',X20))) & s('type.patLang.exp',X19) = s('type.patLang.exp','const.patLang.Letrec_2'(s('type.list.list'('type.patLang.exp'),X27),s('type.patLang.exp',X21))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X14),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patLang.exp'),X26))))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patLang.exp'),X27))))))))),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bindn_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patLang.exp'),X26))))),s(fun('type.num.num',fun('type.num.num',bool)),X17))))),s('type.list.list'('type.patLang.exp'),X26),s('type.list.list'('type.patLang.exp'),X27)))) & p(s(bool,happ(s(fun('type.patLang.exp',bool),happ(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X14),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patLang.exp'),X26))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patLang.exp'),X27))))))),s(fun('type.num.num',fun('type.num.num',bool)),'const.exh_to_patProof.bindn_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patLang.exp'),X26))),s(fun('type.num.num',fun('type.num.num',bool)),X17))))),s('type.patLang.exp',X20))),s('type.patLang.exp',X21))))) | ? [X35] : (s('type.patLang.exp',X18) = s('type.patLang.exp','const.patLang.Extend_global_1'(s('type.num.num',X35))) & s('type.patLang.exp',X19) = s('type.patLang.exp','const.patLang.Extend_global_1'(s('type.num.num',X35))))) => p(s(bool,happ(s(fun('type.patLang.exp',bool),happ(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X14),s('type.num.num',X15))),s('type.num.num',X16))),s(fun('type.num.num',fun('type.num.num',bool)),X17))),s('type.patLang.exp',X18))),s('type.patLang.exp',X19))))) => p(s(bool,happ(s(fun('type.patLang.exp',bool),happ(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),X14),s('type.num.num',X5))),s('type.num.num',X10))),s(fun('type.num.num',fun('type.num.num',bool)),X11))),s('type.patLang.exp',X12))),s('type.patLang.exp',X13))))))),
  file('thm.exh_to_patProof.exp_rel_rules|split|2','thm.exh_to_patProof.exp_rel_def')).
fof(f363,plain,(
  ~p(s(bool,happ(s(fun('type.patLang.exp',bool),happ(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),sK60('const.patLang.Lit_1'(s('type.ast.lit',sK13)),'const.patLang.Lit_1'(s('type.ast.lit',sK13)),sK12,sK15,sK14)),s('type.num.num',sK14))),s('type.num.num',sK15))),s(fun('type.num.num',fun('type.num.num',bool)),sK12))),s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit',sK13))))),s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit',sK13))))))),
  inference(resolution,[],[f184,f337])).
fof(f337,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.exh_to_patProof.exp_rel_5'(s('type.num.num',X0),s('type.num.num',X1),s(fun('type.num.num',fun('type.num.num',bool)),X2),s('type.patLang.exp',X3),s('type.patLang.exp',X4)))) | ~p(s(bool,happ(s(fun('type.patLang.exp',bool),happ(s(fun('type.patLang.exp',fun('type.patLang.exp',bool)),happ(s(fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))),happ(s(fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool)))),happ(s(fun('type.num.num',fun('type.num.num',fun(fun('type.num.num',fun('type.num.num',bool)),fun('type.patLang.exp',fun('type.patLang.exp',bool))))),sK60(X4,X3,X2,X1,X0)),s('type.num.num',X0))),s('type.num.num',X1))),s(fun('type.num.num',fun('type.num.num',bool)),X2))),s('type.patLang.exp',X3))),s('type.patLang.exp',X4))))) )),
  inference(cnf_transformation,[],[f178])).
% SZS output end Proof for thm.exh_to_patProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 169
% Passive clauses: 1166
% Generated clauses: 4574
% Final active clauses: 163
% Final passive clauses: 1004
% Input formulas: 37
% Initial clauses: 176
% 
% Selected by SInE selection: 31
% SInE iterations: 1
% 
% Duplicate literals: 170
% Trivial inequalities: 67
% Fw subsumption resolutions: 655
% Fw demodulations: 320
% Bw demodulations: 1
% 
% Simple tautologies: 192
% Equational tautologies: 13
% Forward subsumptions: 1816
% 
% Binary resolution: 878
% Forward superposition: 1264
% Backward superposition: 1135
% Self superposition: 20
% Equality factoring: 24
% Equality resolution: 12
% 
% Split clauses: 187
% Split components: 391
% SAT solver clauses: 201
% SAT solver unit clauses: 11
% SAT solver binary clauses: 46
% 
% Sat splits: 187
% Sat splitting refutations: 11
% 
% Memory used [KB]: 6268
% Time elapsed: 0.319 s
% ------------------------------
% ------------------------------
% Success in time 12.09 s
