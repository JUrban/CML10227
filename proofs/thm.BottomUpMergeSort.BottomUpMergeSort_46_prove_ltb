Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.BottomUpMergeSort
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.BottomUpMergeSort
% SZS output start Proof for thm.BottomUpMergeSort
fof(f1835,plain,(
  $false),
  inference(trivial_inequality_removal,[],[f1834])).
fof(f1834,plain,(
  s('type.pair.prod'('type.one.one','type.pair.prod'(fun(sK7,fun(sK7,bool)),'type.pair.prod'(sK6,'type.list.list'('type.list.list'(sK7))))),sK8) != s('type.pair.prod'('type.one.one','type.pair.prod'(fun(sK7,fun(sK7,bool)),'type.pair.prod'(sK6,'type.list.list'('type.list.list'(sK7))))),sK8)),
  inference(superposition,[],[f133,f132])).
fof(f132,plain,(
  s('type.pair.prod'('type.one.one','type.pair.prod'(fun(sK7,fun(sK7,bool)),'type.pair.prod'(sK6,'type.list.list'('type.list.list'(sK7))))),sK8) = s('type.pair.prod'('type.one.one','type.pair.prod'(fun(sK7,fun(sK7,bool)),'type.pair.prod'(sK6,'type.list.list'('type.list.list'(sK7))))),'const.pair.,_2'(s('type.one.one','const.one.one_0'),s('type.pair.prod'(fun(sK7,fun(sK7,bool)),'type.pair.prod'(sK6,'type.list.list'('type.list.list'(sK7)))),'const.pair.,_2'(s(fun(sK7,fun(sK7,bool)),sK9),s('type.pair.prod'(sK6,'type.list.list'('type.list.list'(sK7))),'const.pair.,_2'(s(sK6,sK10),s('type.list.list'('type.list.list'(sK7)),sK11)))))))),
  inference(cnf_transformation,[],[f90])).
fof(f90,plain,(
  s('type.pair.prod'('type.one.one','type.pair.prod'(fun(sK7,fun(sK7,bool)),'type.pair.prod'(sK6,'type.list.list'('type.list.list'(sK7))))),sK8) = s('type.pair.prod'('type.one.one','type.pair.prod'(fun(sK7,fun(sK7,bool)),'type.pair.prod'(sK6,'type.list.list'('type.list.list'(sK7))))),'const.pair.,_2'(s('type.one.one','const.one.one_0'),s('type.pair.prod'(fun(sK7,fun(sK7,bool)),'type.pair.prod'(sK6,'type.list.list'('type.list.list'(sK7)))),'const.pair.,_2'(s(fun(sK7,fun(sK7,bool)),sK9),s('type.pair.prod'(sK6,'type.list.list'('type.list.list'(sK7))),'const.pair.,_2'(s(sK6,sK10),s('type.list.list'('type.list.list'(sK7)),sK11))))))) & ! [X3,X4,X5] : s('type.pair.prod'('type.one.one','type.pair.prod'(fun(sK7,fun(sK7,bool)),'type.pair.prod'(sK6,'type.list.list'('type.list.list'(sK7))))),sK8) != s('type.pair.prod'('type.one.one','type.pair.prod'(fun(sK7,fun(sK7,bool)),'type.pair.prod'(sK6,'type.list.list'('type.list.list'(sK7))))),'const.pair.,_2'(s('type.one.one','const.one.one_0'),s('type.pair.prod'(fun(sK7,fun(sK7,bool)),'type.pair.prod'(sK6,'type.list.list'('type.list.list'(sK7)))),'const.pair.,_2'(s(fun(sK7,fun(sK7,bool)),X3),s('type.pair.prod'(sK6,'type.list.list'('type.list.list'(sK7))),'const.pair.,_2'(s(sK6,X4),s('type.list.list'('type.list.list'(sK7)),X5)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK6,sK7,sK8,sK9,sK10,sK11])],[f89])).
fof(f89,plain,(
  ? [X0,X1,X2] : (? [X6,X7,X8] : s('type.pair.prod'('type.one.one','type.pair.prod'(fun(X1,fun(X1,bool)),'type.pair.prod'(X0,'type.list.list'('type.list.list'(X1))))),X2) = s('type.pair.prod'('type.one.one','type.pair.prod'(fun(X1,fun(X1,bool)),'type.pair.prod'(X0,'type.list.list'('type.list.list'(X1))))),'const.pair.,_2'(s('type.one.one','const.one.one_0'),s('type.pair.prod'(fun(X1,fun(X1,bool)),'type.pair.prod'(X0,'type.list.list'('type.list.list'(X1)))),'const.pair.,_2'(s(fun(X1,fun(X1,bool)),X6),s('type.pair.prod'(X0,'type.list.list'('type.list.list'(X1))),'const.pair.,_2'(s(X0,X7),s('type.list.list'('type.list.list'(X1)),X8))))))) & ! [X3,X4,X5] : s('type.pair.prod'('type.one.one','type.pair.prod'(fun(X1,fun(X1,bool)),'type.pair.prod'(X0,'type.list.list'('type.list.list'(X1))))),X2) != s('type.pair.prod'('type.one.one','type.pair.prod'(fun(X1,fun(X1,bool)),'type.pair.prod'(X0,'type.list.list'('type.list.list'(X1))))),'const.pair.,_2'(s('type.one.one','const.one.one_0'),s('type.pair.prod'(fun(X1,fun(X1,bool)),'type.pair.prod'(X0,'type.list.list'('type.list.list'(X1)))),'const.pair.,_2'(s(fun(X1,fun(X1,bool)),X3),s('type.pair.prod'(X0,'type.list.list'('type.list.list'(X1))),'const.pair.,_2'(s(X0,X4),s('type.list.list'('type.list.list'(X1)),X5))))))))),
  inference(rectify,[],[f64])).
fof(f64,plain,(
  ? [X0,X1,X2] : (? [X3,X4,X5] : s('type.pair.prod'('type.one.one','type.pair.prod'(fun(X1,fun(X1,bool)),'type.pair.prod'(X0,'type.list.list'('type.list.list'(X1))))),X2) = s('type.pair.prod'('type.one.one','type.pair.prod'(fun(X1,fun(X1,bool)),'type.pair.prod'(X0,'type.list.list'('type.list.list'(X1))))),'const.pair.,_2'(s('type.one.one','const.one.one_0'),s('type.pair.prod'(fun(X1,fun(X1,bool)),'type.pair.prod'(X0,'type.list.list'('type.list.list'(X1)))),'const.pair.,_2'(s(fun(X1,fun(X1,bool)),X3),s('type.pair.prod'(X0,'type.list.list'('type.list.list'(X1))),'const.pair.,_2'(s(X0,X4),s('type.list.list'('type.list.list'(X1)),X5))))))) & ! [X6,X7,X8] : s('type.pair.prod'('type.one.one','type.pair.prod'(fun(X1,fun(X1,bool)),'type.pair.prod'(X0,'type.list.list'('type.list.list'(X1))))),X2) != s('type.pair.prod'('type.one.one','type.pair.prod'(fun(X1,fun(X1,bool)),'type.pair.prod'(X0,'type.list.list'('type.list.list'(X1))))),'const.pair.,_2'(s('type.one.one','const.one.one_0'),s('type.pair.prod'(fun(X1,fun(X1,bool)),'type.pair.prod'(X0,'type.list.list'('type.list.list'(X1)))),'const.pair.,_2'(s(fun(X1,fun(X1,bool)),X6),s('type.pair.prod'(X0,'type.list.list'('type.list.list'(X1))),'const.pair.,_2'(s(X0,X7),s('type.list.list'('type.list.list'(X1)),X8))))))))),
  inference(ennf_transformation,[],[f29])).
fof(f29,plain,(
  ~! [X0,X1,X2] : (? [X3,X4,X5] : s('type.pair.prod'('type.one.one','type.pair.prod'(fun(X1,fun(X1,bool)),'type.pair.prod'(X0,'type.list.list'('type.list.list'(X1))))),X2) = s('type.pair.prod'('type.one.one','type.pair.prod'(fun(X1,fun(X1,bool)),'type.pair.prod'(X0,'type.list.list'('type.list.list'(X1))))),'const.pair.,_2'(s('type.one.one','const.one.one_0'),s('type.pair.prod'(fun(X1,fun(X1,bool)),'type.pair.prod'(X0,'type.list.list'('type.list.list'(X1)))),'const.pair.,_2'(s(fun(X1,fun(X1,bool)),X3),s('type.pair.prod'(X0,'type.list.list'('type.list.list'(X1))),'const.pair.,_2'(s(X0,X4),s('type.list.list'('type.list.list'(X1)),X5))))))) => ? [X6,X7,X8] : s('type.pair.prod'('type.one.one','type.pair.prod'(fun(X1,fun(X1,bool)),'type.pair.prod'(X0,'type.list.list'('type.list.list'(X1))))),X2) = s('type.pair.prod'('type.one.one','type.pair.prod'(fun(X1,fun(X1,bool)),'type.pair.prod'(X0,'type.list.list'('type.list.list'(X1))))),'const.pair.,_2'(s('type.one.one','const.one.one_0'),s('type.pair.prod'(fun(X1,fun(X1,bool)),'type.pair.prod'(X0,'type.list.list'('type.list.list'(X1)))),'const.pair.,_2'(s(fun(X1,fun(X1,bool)),X6),s('type.pair.prod'(X0,'type.list.list'('type.list.list'(X1))),'const.pair.,_2'(s(X0,X7),s('type.list.list'('type.list.list'(X1)),X8))))))))),
  inference(flattening,[],[f28])).
fof(f28,plain,(
  ~! [X0,X1] : ! [X2] : (? [X3,X4,X5] : s('type.pair.prod'('type.one.one','type.pair.prod'(fun(X1,fun(X1,bool)),'type.pair.prod'(X0,'type.list.list'('type.list.list'(X1))))),X2) = s('type.pair.prod'('type.one.one','type.pair.prod'(fun(X1,fun(X1,bool)),'type.pair.prod'(X0,'type.list.list'('type.list.list'(X1))))),'const.pair.,_2'(s('type.one.one','const.one.one_0'),s('type.pair.prod'(fun(X1,fun(X1,bool)),'type.pair.prod'(X0,'type.list.list'('type.list.list'(X1)))),'const.pair.,_2'(s(fun(X1,fun(X1,bool)),X3),s('type.pair.prod'(X0,'type.list.list'('type.list.list'(X1))),'const.pair.,_2'(s(X0,X4),s('type.list.list'('type.list.list'(X1)),X5))))))) => ? [X6,X7,X8] : s('type.pair.prod'('type.one.one','type.pair.prod'(fun(X1,fun(X1,bool)),'type.pair.prod'(X0,'type.list.list'('type.list.list'(X1))))),X2) = s('type.pair.prod'('type.one.one','type.pair.prod'(fun(X1,fun(X1,bool)),'type.pair.prod'(X0,'type.list.list'('type.list.list'(X1))))),'const.pair.,_2'(s('type.one.one','const.one.one_0'),s('type.pair.prod'(fun(X1,fun(X1,bool)),'type.pair.prod'(X0,'type.list.list'('type.list.list'(X1)))),'const.pair.,_2'(s(fun(X1,fun(X1,bool)),X6),s('type.pair.prod'(X0,'type.list.list'('type.list.list'(X1))),'const.pair.,_2'(s(X0,X7),s('type.list.list'('type.list.list'(X1)),X8))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8] : (? [X9,X10,X11] : s('type.pair.prod'('type.one.one','type.pair.prod'(fun(X7,fun(X7,bool)),'type.pair.prod'(X6,'type.list.list'('type.list.list'(X7))))),X8) = s('type.pair.prod'('type.one.one','type.pair.prod'(fun(X7,fun(X7,bool)),'type.pair.prod'(X6,'type.list.list'('type.list.list'(X7))))),'const.pair.,_2'(s('type.one.one','const.one.one_0'),s('type.pair.prod'(fun(X7,fun(X7,bool)),'type.pair.prod'(X6,'type.list.list'('type.list.list'(X7)))),'const.pair.,_2'(s(fun(X7,fun(X7,bool)),X9),s('type.pair.prod'(X6,'type.list.list'('type.list.list'(X7))),'const.pair.,_2'(s(X6,X10),s('type.list.list'('type.list.list'(X7)),X11))))))) => ? [X9,X10,X11] : s('type.pair.prod'('type.one.one','type.pair.prod'(fun(X7,fun(X7,bool)),'type.pair.prod'(X6,'type.list.list'('type.list.list'(X7))))),X8) = s('type.pair.prod'('type.one.one','type.pair.prod'(fun(X7,fun(X7,bool)),'type.pair.prod'(X6,'type.list.list'('type.list.list'(X7))))),'const.pair.,_2'(s('type.one.one','const.one.one_0'),s('type.pair.prod'(fun(X7,fun(X7,bool)),'type.pair.prod'(X6,'type.list.list'('type.list.list'(X7)))),'const.pair.,_2'(s(fun(X7,fun(X7,bool)),X9),s('type.pair.prod'(X6,'type.list.list'('type.list.list'(X7))),'const.pair.,_2'(s(X6,X10),s('type.list.list'('type.list.list'(X7)),X11))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8] : (? [X9,X10,X11] : s('type.pair.prod'('type.one.one','type.pair.prod'(fun(X7,fun(X7,bool)),'type.pair.prod'(X6,'type.list.list'('type.list.list'(X7))))),X8) = s('type.pair.prod'('type.one.one','type.pair.prod'(fun(X7,fun(X7,bool)),'type.pair.prod'(X6,'type.list.list'('type.list.list'(X7))))),'const.pair.,_2'(s('type.one.one','const.one.one_0'),s('type.pair.prod'(fun(X7,fun(X7,bool)),'type.pair.prod'(X6,'type.list.list'('type.list.list'(X7)))),'const.pair.,_2'(s(fun(X7,fun(X7,bool)),X9),s('type.pair.prod'(X6,'type.list.list'('type.list.list'(X7))),'const.pair.,_2'(s(X6,X10),s('type.list.list'('type.list.list'(X7)),X11))))))) => ? [X9,X10,X11] : s('type.pair.prod'('type.one.one','type.pair.prod'(fun(X7,fun(X7,bool)),'type.pair.prod'(X6,'type.list.list'('type.list.list'(X7))))),X8) = s('type.pair.prod'('type.one.one','type.pair.prod'(fun(X7,fun(X7,bool)),'type.pair.prod'(X6,'type.list.list'('type.list.list'(X7))))),'const.pair.,_2'(s('type.one.one','const.one.one_0'),s('type.pair.prod'(fun(X7,fun(X7,bool)),'type.pair.prod'(X6,'type.list.list'('type.list.list'(X7)))),'const.pair.,_2'(s(fun(X7,fun(X7,bool)),X9),s('type.pair.prod'(X6,'type.list.list'('type.list.list'(X7))),'const.pair.,_2'(s(X6,X10),s('type.list.list'('type.list.list'(X7)),X11))))))))),
  file('thm.BottomUpMergeSort.BottomUpMergeSort_46_prove_ltb','thm.BottomUpMergeSort.BottomUpMergeSort_46_prove_ltb')).
fof(f133,plain,(
  ( ! [X4,X5,X3] : (s('type.pair.prod'('type.one.one','type.pair.prod'(fun(sK7,fun(sK7,bool)),'type.pair.prod'(sK6,'type.list.list'('type.list.list'(sK7))))),sK8) != s('type.pair.prod'('type.one.one','type.pair.prod'(fun(sK7,fun(sK7,bool)),'type.pair.prod'(sK6,'type.list.list'('type.list.list'(sK7))))),'const.pair.,_2'(s('type.one.one','const.one.one_0'),s('type.pair.prod'(fun(sK7,fun(sK7,bool)),'type.pair.prod'(sK6,'type.list.list'('type.list.list'(sK7)))),'const.pair.,_2'(s(fun(sK7,fun(sK7,bool)),X3),s('type.pair.prod'(sK6,'type.list.list'('type.list.list'(sK7))),'const.pair.,_2'(s(sK6,X4),s('type.list.list'('type.list.list'(sK7)),X5)))))))) )),
  inference(cnf_transformation,[],[f90])).
% SZS output end Proof for thm.BottomUpMergeSort
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 170
% Passive clauses: 595
% Generated clauses: 1698
% Final active clauses: 170
% Final passive clauses: 369
% Input formulas: 26
% Initial clauses: 92
% 
% Duplicate literals: 37
% Trivial inequalities: 14
% Fw subsumption resolutions: 126
% 
% Simple tautologies: 58
% Equational tautologies: 11
% Forward subsumptions: 836
% 
% Binary resolution: 1071
% Factoring: 200
% Forward superposition: 79
% Backward superposition: 51
% Self superposition: 2
% Equality factoring: 2
% Equality resolution: 7
% 
% Split clauses: 42
% Split components: 85
% SAT solver clauses: 76
% SAT solver unit clauses: 6
% SAT solver binary clauses: 29
% 
% Sat splits: 42
% 
% TWLsolver clauses: 76
% TWLsolver calls for satisfiability: 58
% 
% Memory used [KB]: 1279
% Time elapsed: 0.028 s
% ------------------------------
% ------------------------------
% Success in time 0.029 s
