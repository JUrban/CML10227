Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.mod_to_conProof
% (16863)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 85
% Passive clauses: 3695
% Generated clauses: 13601
% Final active clauses: 81
% Final passive clauses: 3506
% Input formulas: 21
% Initial clauses: 36
% 
% Duplicate literals: 782
% Trivial inequalities: 88
% Fw subsumption resolutions: 1466
% Fw demodulations: 497
% Bw demodulations: 1
% 
% Simple tautologies: 236
% Equational tautologies: 76
% Forward subsumptions: 5859
% 
% Binary resolution: 154
% Factoring: 2
% Forward superposition: 5449
% Backward superposition: 4576
% Self superposition: 303
% Equality factoring: 188
% Equality resolution: 8
% 
% Split clauses: 390
% Split components: 784
% SAT solver clauses: 1004
% SAT solver unit clauses: 23
% SAT solver binary clauses: 204
% 
% Sat splits: 390
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 1002
% TWLsolver calls for satisfiability: 114
% 
% Memory used [KB]: 10234
% Time elapsed: 0.626 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.mod_to_conProof
% (16929)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 55
% Passive clauses: 581
% Generated clauses: 7578
% Final active clauses: 54
% Final passive clauses: 514
% Input formulas: 21
% Initial clauses: 36
% 
% Duplicate literals: 771
% Trivial inequalities: 40
% Fw subsumption resolutions: 222
% Fw demodulations: 127
% Bw demodulations: 11
% Condensations: 1327
% Global subsumptions: 1
% 
% Simple tautologies: 102
% Equational tautologies: 58
% Forward subsumptions: 2432
% 
% Binary resolution: 117
% Factoring: 2
% Forward superposition: 1964
% Backward superposition: 2080
% Self superposition: 205
% Equality factoring: 142
% Equality resolution: 7
% 
% Split clauses: 8
% Split components: 16
% SAT solver clauses: 950
% SAT solver unit clauses: 48
% SAT solver binary clauses: 37
% SAT solver learnt clauses: 2
% 
% Sat splits: 8
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 946
% TWLsolver calls for satisfiability: 442
% 
% Memory used [KB]: 8699
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.mod_to_conProof
% (16986)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 275
% Passive clauses: 15414
% Generated clauses: 95494
% Final active clauses: 100
% Final passive clauses: 571
% Input formulas: 21
% Initial clauses: 36
% Discarded non-redundant clauses: 7960
% 
% Duplicate literals: 4013
% Trivial inequalities: 515
% Fw subsumption resolutions: 4731
% Fw demodulations: 7012
% Bw demodulations: 11879
% Condensations: 8414
% Global subsumptions: 715
% 
% Simple tautologies: 701
% Equational tautologies: 771
% Forward subsumptions: 49882
% Fw demodulations to eq. taut.: 2
% Bw demodulations to eq. taut.: 392
% 
% Unit resulting resolution: 4137
% Factoring: 4
% Forward superposition: 20159
% Backward superposition: 13542
% Self superposition: 444
% Equality factoring: 215
% Equality resolution: 25
% 
% Split clauses: 199
% Split components: 420
% SAT solver clauses: 17585
% SAT solver unit clauses: 259
% SAT solver binary clauses: 1565
% 
% Sat splits: 199
% Sat splitting refutations: 1056
% 
% Memory used [KB]: 61917
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 32 next slice time: 32
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.mod_to_conProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.mod_to_conProof
% SZS output start Proof for thm.mod_to_conProof
fof(f117,plain,(
  $false),
  inference(equality_resolution,[],[f114])).
fof(f114,plain,(
  ( ! [X0] : (s('type.pair.prod'('type.modSem.state'(sK1),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),X0) != s('type.pair.prod'('type.modSem.state'(sK1),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_prompts_3'(s('type.modSem.environment','const.modSem.environment_c_fupd_2'(s(fun('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'const.semanticPrimitives.merge_alist_mod_env_1'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK7))),s('type.modSem.environment',sK6))),s('type.modSem.state'(sK1),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.list.APPEND_2'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),sK3))),s('type.list.list'('type.option.option'('type.modSem.v')),sK5))))),s('type.modSem.state'(sK1),sK2))),s('type.list.list'('type.modLang.prompt'),sK4)))) )),
  inference(superposition,[],[f110,f54])).
fof(f54,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK8(X2,X1,X0)),s(X1,sK9(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f46])).
fof(f46,plain,(
  ! [X0,X1,X2] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK8(X2,X1,X0)),s(X1,sK9(X2,X1,X0))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK8,sK9])],[f26])).
fof(f26,plain,(
  ! [X0,X1,X2] : ? [X3,X4] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X4)))),
  inference(flattening,[],[f25])).
fof(f25,plain,(
  ! [X0,X1] : ! [X2] : ? [X3,X4] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X4)))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X6,X35] : ! [X36] : ? [X37,X16] : s('type.pair.prod'(X6,X35),X36) = s('type.pair.prod'(X6,X35),'const.pair.,_2'(s(X6,X37),s(X35,X16)))),
  file('thm.mod_to_conProof.mod_to_conProof_27|49|_prove_ltb','thm.pair.ABS_PAIR_THM')).
fof(f110,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.modSem.state'(sK1),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.pair.,_2'(s('type.modSem.state'(sK1),X1),s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')))),X0))) != s('type.pair.prod'('type.modSem.state'(sK1),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_prompts_3'(s('type.modSem.environment','const.modSem.environment_c_fupd_2'(s(fun('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'const.semanticPrimitives.merge_alist_mod_env_1'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK7))),s('type.modSem.environment',sK6))),s('type.modSem.state'(sK1),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.list.APPEND_2'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),sK3))),s('type.list.list'('type.option.option'('type.modSem.v')),sK5))))),s('type.modSem.state'(sK1),sK2))),s('type.list.list'('type.modLang.prompt'),sK4)))) )),
  inference(superposition,[],[f100,f54])).
fof(f100,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'('type.modSem.state'(sK1),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.pair.,_2'(s('type.modSem.state'(sK1),X1),s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X2),s('type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))),X0))))) != s('type.pair.prod'('type.modSem.state'(sK1),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_prompts_3'(s('type.modSem.environment','const.modSem.environment_c_fupd_2'(s(fun('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'const.semanticPrimitives.merge_alist_mod_env_1'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK7))),s('type.modSem.environment',sK6))),s('type.modSem.state'(sK1),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.list.APPEND_2'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),sK3))),s('type.list.list'('type.option.option'('type.modSem.v')),sK5))))),s('type.modSem.state'(sK1),sK2))),s('type.list.list'('type.modLang.prompt'),sK4)))) )),
  inference(superposition,[],[f53,f54])).
fof(f53,plain,(
  ( ! [X10,X8,X7,X9] : (s('type.pair.prod'('type.modSem.state'(sK1),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.pair.,_2'(s('type.modSem.state'(sK1),X7),s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))),'const.pair.,_2'(s('type.list.list'('type.option.option'('type.modSem.v')),X9),s('type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')),X10))))))) != s('type.pair.prod'('type.modSem.state'(sK1),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_prompts_3'(s('type.modSem.environment','const.modSem.environment_c_fupd_2'(s(fun('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'const.semanticPrimitives.merge_alist_mod_env_1'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK7))),s('type.modSem.environment',sK6))),s('type.modSem.state'(sK1),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.list.APPEND_2'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),sK3))),s('type.list.list'('type.option.option'('type.modSem.v')),sK5))))),s('type.modSem.state'(sK1),sK2))),s('type.list.list'('type.modLang.prompt'),sK4)))) )),
  inference(cnf_transformation,[],[f45])).
fof(f45,plain,(
  ! [X7,X8,X9,X10] : s('type.pair.prod'('type.modSem.state'(sK1),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.pair.,_2'(s('type.modSem.state'(sK1),X7),s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))),'const.pair.,_2'(s('type.list.list'('type.option.option'('type.modSem.v')),X9),s('type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')),X10))))))) != s('type.pair.prod'('type.modSem.state'(sK1),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_prompts_3'(s('type.modSem.environment','const.modSem.environment_c_fupd_2'(s(fun('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'const.semanticPrimitives.merge_alist_mod_env_1'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK7))),s('type.modSem.environment',sK6))),s('type.modSem.state'(sK1),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.list.APPEND_2'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),sK3))),s('type.list.list'('type.option.option'('type.modSem.v')),sK5))))),s('type.modSem.state'(sK1),sK2))),s('type.list.list'('type.modLang.prompt'),sK4)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK1,sK2,sK3,sK4,sK5,sK6,sK7])],[f38])).
fof(f38,plain,(
  ? [X0,X1,X2,X3,X4,X5,X6] : ! [X7,X8,X9,X10] : s('type.pair.prod'('type.modSem.state'(X0),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.pair.,_2'(s('type.modSem.state'(X0),X7),s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))),'const.pair.,_2'(s('type.list.list'('type.option.option'('type.modSem.v')),X9),s('type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')),X10))))))) != s('type.pair.prod'('type.modSem.state'(X0),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_prompts_3'(s('type.modSem.environment','const.modSem.environment_c_fupd_2'(s(fun('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'const.semanticPrimitives.merge_alist_mod_env_1'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X6))),s('type.modSem.environment',X5))),s('type.modSem.state'(X0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.list.APPEND_2'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X2))),s('type.list.list'('type.option.option'('type.modSem.v')),X4))))),s('type.modSem.state'(X0),X1))),s('type.list.list'('type.modLang.prompt'),X3)))),
  inference(ennf_transformation,[],[f24])).
fof(f24,plain,(
  ~! [X0,X1,X2,X3,X4,X5,X6] : ? [X7,X8,X9,X10] : s('type.pair.prod'('type.modSem.state'(X0),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.pair.,_2'(s('type.modSem.state'(X0),X7),s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))),'const.pair.,_2'(s('type.list.list'('type.option.option'('type.modSem.v')),X9),s('type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')),X10))))))) = s('type.pair.prod'('type.modSem.state'(X0),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_prompts_3'(s('type.modSem.environment','const.modSem.environment_c_fupd_2'(s(fun('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'const.semanticPrimitives.merge_alist_mod_env_1'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X6))),s('type.modSem.environment',X5))),s('type.modSem.state'(X0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.list.APPEND_2'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X2))),s('type.list.list'('type.option.option'('type.modSem.v')),X4))))),s('type.modSem.state'(X0),X1))),s('type.list.list'('type.modLang.prompt'),X3)))),
  inference(flattening,[],[f23])).
fof(f23,plain,(
  ~! [X0] : ! [X1,X2,X3,X4,X5,X6] : ? [X7,X8,X9,X10] : s('type.pair.prod'('type.modSem.state'(X0),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.pair.,_2'(s('type.modSem.state'(X0),X7),s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))),'const.pair.,_2'(s('type.list.list'('type.option.option'('type.modSem.v')),X9),s('type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')),X10))))))) = s('type.pair.prod'('type.modSem.state'(X0),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_prompts_3'(s('type.modSem.environment','const.modSem.environment_c_fupd_2'(s(fun('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'const.semanticPrimitives.merge_alist_mod_env_1'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X6))),s('type.modSem.environment',X5))),s('type.modSem.state'(X0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.list.APPEND_2'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X2))),s('type.list.list'('type.option.option'('type.modSem.v')),X4))))),s('type.modSem.state'(X0),X1))),s('type.list.list'('type.modLang.prompt'),X3)))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9,X10,X11,X12] : ? [X13,X14,X15,X16] : s('type.pair.prod'('type.modSem.state'(X6),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.pair.,_2'(s('type.modSem.state'(X6),X13),s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X14),s('type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))),'const.pair.,_2'(s('type.list.list'('type.option.option'('type.modSem.v')),X15),s('type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')),X16))))))) = s('type.pair.prod'('type.modSem.state'(X6),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_prompts_3'(s('type.modSem.environment','const.modSem.environment_c_fupd_2'(s(fun('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'const.semanticPrimitives.merge_alist_mod_env_1'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X12))),s('type.modSem.environment',X11))),s('type.modSem.state'(X6),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.list.APPEND_2'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X6),X8))),s('type.list.list'('type.option.option'('type.modSem.v')),X10))))),s('type.modSem.state'(X6),X7))),s('type.list.list'('type.modLang.prompt'),X9)))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9,X10,X11,X12] : ? [X13,X14,X15,X16] : s('type.pair.prod'('type.modSem.state'(X6),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.pair.,_2'(s('type.modSem.state'(X6),X13),s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X14),s('type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))),'const.pair.,_2'(s('type.list.list'('type.option.option'('type.modSem.v')),X15),s('type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')),X16))))))) = s('type.pair.prod'('type.modSem.state'(X6),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_prompts_3'(s('type.modSem.environment','const.modSem.environment_c_fupd_2'(s(fun('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'const.semanticPrimitives.merge_alist_mod_env_1'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X12))),s('type.modSem.environment',X11))),s('type.modSem.state'(X6),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.list.APPEND_2'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X6),X8))),s('type.list.list'('type.option.option'('type.modSem.v')),X10))))),s('type.modSem.state'(X6),X7))),s('type.list.list'('type.modLang.prompt'),X9)))),
  file('thm.mod_to_conProof.mod_to_conProof_27|49|_prove_ltb','thm.mod_to_conProof.mod_to_conProof_27|49|_prove_ltb')).
% SZS output end Proof for thm.mod_to_conProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 21
% Passive clauses: 4
% Generated clauses: 41
% Final active clauses: 21
% Input formulas: 21
% Initial clauses: 23
% 
% Selected by SInE selection: 9
% SInE iterations: 1
% 
% Simple tautologies: 5
% Forward subsumptions: 36
% 
% Forward superposition: 41
% Equality resolution: 1
% 
% SAT solver clauses: 1
% 
% Memory used [KB]: 1918
% Time elapsed: 0.010 s
% ------------------------------
% ------------------------------
% Success in time 11.766 s
