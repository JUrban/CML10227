Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.clos_knownProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.clos_knownProof
% SZS output start Proof for thm.clos_knownProof
fof(f18712,plain,(
  $false),
  inference(equality_resolution,[],[f4442])).
fof(f4442,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),sK1),s('type.list.list'('type.clos_known.val_approx'),sK2),s('type.sptree.spt'('type.clos_known.val_approx'),sK0))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X1),s('type.list.list'('type.clos_known.val_approx'),X0),s('type.sptree.spt'('type.clos_known.val_approx'),X2)))) )),
  inference(superposition,[],[f113,f144])).
fof(f144,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X1),s('type.list.list'('type.clos_known.val_approx'),X2),s('type.sptree.spt'('type.clos_known.val_approx'),X0))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),sK8(X2,X1,X0)),s('type.sptree.spt'('type.clos_known.val_approx'),sK9(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f103])).
fof(f103,plain,(
  ! [X0,X1,X2] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X1),s('type.list.list'('type.clos_known.val_approx'),X2),s('type.sptree.spt'('type.clos_known.val_approx'),X0))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),sK8(X2,X1,X0)),s('type.sptree.spt'('type.clos_known.val_approx'),sK9(X2,X1,X0))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK8,sK9])],[f73])).
fof(f73,plain,(
  ! [X0,X1,X2] : ? [X3,X4] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3),s('type.sptree.spt'('type.clos_known.val_approx'),X4))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X1),s('type.list.list'('type.clos_known.val_approx'),X2),s('type.sptree.spt'('type.clos_known.val_approx'),X0)))),
  inference(rectify,[],[f19])).
fof(f19,axiom,(
  ! [X6,X7,X8] : ? [X23,X10] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X23),s('type.sptree.spt'('type.clos_known.val_approx'),X10))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X7),s('type.list.list'('type.clos_known.val_approx'),X8),s('type.sptree.spt'('type.clos_known.val_approx'),X6)))),
  file('thm.clos_knownProof.clos_knownProof_9|49|_prove_ltb','thm.clos_knownProof.clos_knownProof_88_prove_ltb')).
fof(f113,plain,(
  ( ! [X4,X3] : (s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3),s('type.sptree.spt'('type.clos_known.val_approx'),X4))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),sK1),s('type.list.list'('type.clos_known.val_approx'),sK2),s('type.sptree.spt'('type.clos_known.val_approx'),sK0)))) )),
  inference(cnf_transformation,[],[f91])).
fof(f91,plain,(
  ! [X3,X4] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3),s('type.sptree.spt'('type.clos_known.val_approx'),X4))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),sK1),s('type.list.list'('type.clos_known.val_approx'),sK2),s('type.sptree.spt'('type.clos_known.val_approx'),sK0)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f89])).
fof(f89,plain,(
  ? [X0,X1,X2] : ! [X3,X4] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3),s('type.sptree.spt'('type.clos_known.val_approx'),X4))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X1),s('type.list.list'('type.clos_known.val_approx'),X2),s('type.sptree.spt'('type.clos_known.val_approx'),X0)))),
  inference(ennf_transformation,[],[f39])).
fof(f39,plain,(
  ~! [X0,X1,X2] : ? [X3,X4] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X3),s('type.sptree.spt'('type.clos_known.val_approx'),X4))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X1),s('type.list.list'('type.clos_known.val_approx'),X2),s('type.sptree.spt'('type.clos_known.val_approx'),X0)))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8] : ? [X9,X10] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X9),s('type.sptree.spt'('type.clos_known.val_approx'),X10))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X7),s('type.list.list'('type.clos_known.val_approx'),X8),s('type.sptree.spt'('type.clos_known.val_approx'),X6)))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8] : ? [X9,X10] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X9),s('type.sptree.spt'('type.clos_known.val_approx'),X10))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X7),s('type.list.list'('type.clos_known.val_approx'),X8),s('type.sptree.spt'('type.clos_known.val_approx'),X6)))),
  file('thm.clos_knownProof.clos_knownProof_9|49|_prove_ltb','thm.clos_knownProof.clos_knownProof_9|49|_prove_ltb')).
% SZS output end Proof for thm.clos_knownProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 170
% Passive clauses: 2295
% Generated clauses: 18305
% Final active clauses: 168
% Final passive clauses: 1957
% Input formulas: 37
% Initial clauses: 44
% 
% Duplicate literals: 605
% Trivial inequalities: 894
% Fw subsumption resolutions: 1907
% Fw demodulations: 2267
% Bw demodulations: 2
% 
% Simple tautologies: 449
% Equational tautologies: 24
% Forward subsumptions: 9226
% 
% Binary resolution: 29
% Forward superposition: 6958
% Backward superposition: 5312
% Self superposition: 139
% Equality factoring: 58
% Equality resolution: 36
% 
% Split clauses: 333
% Split components: 683
% SAT solver clauses: 809
% SAT solver unit clauses: 17
% SAT solver binary clauses: 194
% 
% Sat splits: 333
% 
% TWLsolver clauses: 805
% TWLsolver calls for satisfiability: 106
% 
% Memory used [KB]: 14711
% Time elapsed: 0.456 s
% ------------------------------
% ------------------------------
% Success in time 0.47 s
