Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.modSem
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.modSem
% SZS output start Proof for thm.modSem
fof(f521,plain,(
  $false),
  inference(subsumption_resolution,[],[f520,f20])).
fof(f20,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f7])).
fof(f7,axiom,(
  p(s(bool,'T_0'))),
  file('thm.modSem.datatype_environment','thm.bool.TRUTH')).
fof(f520,plain,(
  ~p(s(bool,'T_0'))),
  inference(forward_demodulation,[],[f19,f24])).
fof(f24,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.bool.DATATYPE_1'(s(X0,X1)))) )),
  inference(cnf_transformation,[],[f12])).
fof(f12,plain,(
  ! [X0,X1] : s(bool,'T_0') = s(bool,'const.bool.DATATYPE_1'(s(X0,X1)))),
  inference(flattening,[],[f11])).
fof(f11,plain,(
  ! [X0] : ! [X1] : s(bool,'T_0') = s(bool,'const.bool.DATATYPE_1'(s(X0,X1)))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X10] : ! [X11] : s(bool,'T_0') = s(bool,'const.bool.DATATYPE_1'(s(X10,X11)))),
  file('thm.modSem.datatype_environment','thm.bool.DATATYPE_TAG_THM')).
fof(f19,plain,(
  ~p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.min.ind',fun('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),sK1),s('type.min.ind',sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK0))))))),
  inference(cnf_transformation,[],[f17])).
fof(f17,plain,(
  ~p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.min.ind',fun('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),sK1),s('type.min.ind',sK2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK0))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3])],[f15])).
fof(f15,plain,(
  ? [X0,X1,X2,X3] : ~p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.min.ind',fun('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X1),s('type.min.ind',X2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X0))))))),
  inference(ennf_transformation,[],[f9])).
fof(f9,plain,(
  ~! [X0,X1,X2,X3] : p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.min.ind',fun('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X1),s('type.min.ind',X2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X0))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8,X9] : p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.min.ind',fun('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X7),s('type.min.ind',X8))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X6))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8,X9] : p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool),happ(s(fun('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool)),happ(s(fun('type.min.ind',fun('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),bool))),X7),s('type.min.ind',X8))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X6))))))),
  file('thm.modSem.datatype_environment','thm.modSem.datatype_environment')).
% SZS output end Proof for thm.modSem
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 14
% Passive clauses: 57
% Generated clauses: 470
% Final active clauses: 12
% Final passive clauses: 36
% Input formulas: 7
% Initial clauses: 7
% 
% Duplicate literals: 84
% Trivial inequalities: 7
% Fw subsumption resolutions: 6
% Fw demodulations: 16
% 
% Simple tautologies: 25
% Equational tautologies: 16
% Forward subsumptions: 244
% 
% Binary resolution: 4
% Forward superposition: 123
% Backward superposition: 126
% Self superposition: 49
% Equality factoring: 40
% Equality resolution: 1
% 
% Split clauses: 12
% Split components: 24
% SAT solver clauses: 18
% SAT solver unit clauses: 4
% SAT solver binary clauses: 12
% 
% Sat splits: 12
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 18
% TWLsolver calls for satisfiability: 6
% 
% Memory used [KB]: 767
% Time elapsed: 0.019 s
% ------------------------------
% ------------------------------
% Success in time 0.009 s
