Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.wordProps
% (147097)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 79
% Passive clauses: 2508
% Generated clauses: 11715
% Final active clauses: 76
% Final passive clauses: 2195
% Input formulas: 85
% Initial clauses: 86
% 
% Duplicate literals: 704
% Trivial inequalities: 131
% Fw subsumption resolutions: 1147
% Fw demodulations: 125
% Bw demodulations: 1
% 
% Simple tautologies: 232
% Equational tautologies: 131
% Forward subsumptions: 4931
% Fw demodulations to eq. taut.: 37
% 
% Binary resolution: 25
% Forward superposition: 4671
% Backward superposition: 3833
% Self superposition: 515
% Equality factoring: 408
% Equality resolution: 14
% 
% Split clauses: 506
% Split components: 1106
% SAT solver clauses: 1719
% SAT solver unit clauses: 403
% SAT solver binary clauses: 622
% 
% Sat splits: 506
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 1713
% TWLsolver calls for satisfiability: 53
% 
% Memory used [KB]: 7931
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.wordProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.wordProps
% SZS output start Proof for thm.wordProps
fof(f429,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f428,f255,f343,f288,f375])).
fof(f375,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.wordSem.state'(X0,X1),'const.wordSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X4),s('type.wordSem.state'(X0,X1),'const.wordSem.state_permute_fupd_2'(s(fun(fun('type.num.num',fun('type.num.num','type.num.num')),fun('type.num.num',fun('type.num.num','type.num.num'))),X3),s('type.wordSem.state'(X0,X1),X2))))) = s('type.wordSem.state'(X0,X1),'const.wordSem.state_permute_fupd_2'(s(fun(fun('type.num.num',fun('type.num.num','type.num.num')),fun('type.num.num',fun('type.num.num','type.num.num'))),X3),s('type.wordSem.state'(X0,X1),'const.wordSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X4),s('type.wordSem.state'(X0,X1),X2)))))) ) | $spl60),
  inference(cnf_transformation,[],[f375_D])).
fof(f375_D,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.wordSem.state'(X0,X1),'const.wordSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X4),s('type.wordSem.state'(X0,X1),'const.wordSem.state_permute_fupd_2'(s(fun(fun('type.num.num',fun('type.num.num','type.num.num')),fun('type.num.num',fun('type.num.num','type.num.num'))),X3),s('type.wordSem.state'(X0,X1),X2))))) = s('type.wordSem.state'(X0,X1),'const.wordSem.state_permute_fupd_2'(s(fun(fun('type.num.num',fun('type.num.num','type.num.num')),fun('type.num.num',fun('type.num.num','type.num.num'))),X3),s('type.wordSem.state'(X0,X1),'const.wordSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X4),s('type.wordSem.state'(X0,X1),X2)))))) ) <=> ~$spl60),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl60])])).
fof(f288,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.wordSem.state'(X0,X1),'const.wordSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X4),s('type.wordSem.state'(X0,X1),'const.wordSem.state_permute_fupd_2'(s(fun(fun('type.num.num',fun('type.num.num','type.num.num')),fun('type.num.num',fun('type.num.num','type.num.num'))),X3),s('type.wordSem.state'(X0,X1),X2))))) = s('type.wordSem.state'(X0,X1),'const.wordSem.state_permute_fupd_2'(s(fun(fun('type.num.num',fun('type.num.num','type.num.num')),fun('type.num.num',fun('type.num.num','type.num.num'))),X3),s('type.wordSem.state'(X0,X1),'const.wordSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X4),s('type.wordSem.state'(X0,X1),X2)))))) )),
  inference(cnf_transformation,[],[f145])).
fof(f145,plain,(
  ! [X0,X1,X2,X3,X4] : s('type.wordSem.state'(X0,X1),'const.wordSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X4),s('type.wordSem.state'(X0,X1),'const.wordSem.state_permute_fupd_2'(s(fun(fun('type.num.num',fun('type.num.num','type.num.num')),fun('type.num.num',fun('type.num.num','type.num.num'))),X3),s('type.wordSem.state'(X0,X1),X2))))) = s('type.wordSem.state'(X0,X1),'const.wordSem.state_permute_fupd_2'(s(fun(fun('type.num.num',fun('type.num.num','type.num.num')),fun('type.num.num',fun('type.num.num','type.num.num'))),X3),s('type.wordSem.state'(X0,X1),'const.wordSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X4),s('type.wordSem.state'(X0,X1),X2)))))),
  inference(flattening,[],[f144])).
fof(f144,plain,(
  ! [X0,X1] : ! [X2,X3,X4] : s('type.wordSem.state'(X0,X1),'const.wordSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X4),s('type.wordSem.state'(X0,X1),'const.wordSem.state_permute_fupd_2'(s(fun(fun('type.num.num',fun('type.num.num','type.num.num')),fun('type.num.num',fun('type.num.num','type.num.num'))),X3),s('type.wordSem.state'(X0,X1),X2))))) = s('type.wordSem.state'(X0,X1),'const.wordSem.state_permute_fupd_2'(s(fun(fun('type.num.num',fun('type.num.num','type.num.num')),fun('type.num.num',fun('type.num.num','type.num.num'))),X3),s('type.wordSem.state'(X0,X1),'const.wordSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X4),s('type.wordSem.state'(X0,X1),X2)))))),
  inference(rectify,[],[f42])).
fof(f42,axiom,(
  ! [X6,X12] : ! [X13,X14,X15] : s('type.wordSem.state'(X6,X12),'const.wordSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X15),s('type.wordSem.state'(X6,X12),'const.wordSem.state_permute_fupd_2'(s(fun(fun('type.num.num',fun('type.num.num','type.num.num')),fun('type.num.num',fun('type.num.num','type.num.num'))),X14),s('type.wordSem.state'(X6,X12),X13))))) = s('type.wordSem.state'(X6,X12),'const.wordSem.state_permute_fupd_2'(s(fun(fun('type.num.num',fun('type.num.num','type.num.num')),fun('type.num.num',fun('type.num.num','type.num.num'))),X14),s('type.wordSem.state'(X6,X12),'const.wordSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X15),s('type.wordSem.state'(X6,X12),X13)))))),
  file('thm.wordProps.wordProps_|49|84_prove_ltb','thm.wordSem.wordSem_287_prove_ltb')).
fof(f343,plain,(
  s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_permute_fupd_2'(s(fun(fun('type.num.num',fun('type.num.num','type.num.num')),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.combin.K_1'(s(fun('type.num.num',fun('type.num.num','type.num.num')),sK3))),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_permute_fupd_2'(s(fun(fun('type.num.num',fun('type.num.num','type.num.num')),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.combin.K_1'(s(fun('type.num.num',fun('type.num.num','type.num.num')),sK3))),s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.wordSem.state'(sK0,sK1),sK2))))) | $spl1),
  inference(cnf_transformation,[],[f343_D])).
fof(f343_D,plain,(
  s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_permute_fupd_2'(s(fun(fun('type.num.num',fun('type.num.num','type.num.num')),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.combin.K_1'(s(fun('type.num.num',fun('type.num.num','type.num.num')),sK3))),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_permute_fupd_2'(s(fun(fun('type.num.num',fun('type.num.num','type.num.num')),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.combin.K_1'(s(fun('type.num.num',fun('type.num.num','type.num.num')),sK3))),s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.wordSem.state'(sK0,sK1),sK2))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f255,plain,(
  s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_permute_fupd_2'(s(fun(fun('type.num.num',fun('type.num.num','type.num.num')),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.combin.K_1'(s(fun('type.num.num',fun('type.num.num','type.num.num')),sK3))),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_permute_fupd_2'(s(fun(fun('type.num.num',fun('type.num.num','type.num.num')),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.combin.K_1'(s(fun('type.num.num',fun('type.num.num','type.num.num')),sK3))),s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.wordSem.state'(sK0,sK1),sK2)))))),
  inference(cnf_transformation,[],[f252])).
fof(f252,plain,(
  s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_permute_fupd_2'(s(fun(fun('type.num.num',fun('type.num.num','type.num.num')),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.combin.K_1'(s(fun('type.num.num',fun('type.num.num','type.num.num')),sK3))),s('type.wordSem.state'(sK0,sK1),sK2))))) != s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_permute_fupd_2'(s(fun(fun('type.num.num',fun('type.num.num','type.num.num')),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.combin.K_1'(s(fun('type.num.num',fun('type.num.num','type.num.num')),sK3))),s('type.wordSem.state'(sK0,sK1),'const.wordSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK4))),s('type.wordSem.state'(sK0,sK1),sK2)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4])],[f250])).
fof(f250,plain,(
  ? [X0,X1,X2,X3,X4] : s('type.wordSem.state'(X0,X1),'const.wordSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X4))),s('type.wordSem.state'(X0,X1),'const.wordSem.state_permute_fupd_2'(s(fun(fun('type.num.num',fun('type.num.num','type.num.num')),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.combin.K_1'(s(fun('type.num.num',fun('type.num.num','type.num.num')),X3))),s('type.wordSem.state'(X0,X1),X2))))) != s('type.wordSem.state'(X0,X1),'const.wordSem.state_permute_fupd_2'(s(fun(fun('type.num.num',fun('type.num.num','type.num.num')),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.combin.K_1'(s(fun('type.num.num',fun('type.num.num','type.num.num')),X3))),s('type.wordSem.state'(X0,X1),'const.wordSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X4))),s('type.wordSem.state'(X0,X1),X2)))))),
  inference(ennf_transformation,[],[f88])).
fof(f88,plain,(
  ~! [X0,X1,X2,X3,X4] : s('type.wordSem.state'(X0,X1),'const.wordSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X4))),s('type.wordSem.state'(X0,X1),'const.wordSem.state_permute_fupd_2'(s(fun(fun('type.num.num',fun('type.num.num','type.num.num')),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.combin.K_1'(s(fun('type.num.num',fun('type.num.num','type.num.num')),X3))),s('type.wordSem.state'(X0,X1),X2))))) = s('type.wordSem.state'(X0,X1),'const.wordSem.state_permute_fupd_2'(s(fun(fun('type.num.num',fun('type.num.num','type.num.num')),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.combin.K_1'(s(fun('type.num.num',fun('type.num.num','type.num.num')),X3))),s('type.wordSem.state'(X0,X1),'const.wordSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X4))),s('type.wordSem.state'(X0,X1),X2)))))),
  inference(flattening,[],[f87])).
fof(f87,plain,(
  ~! [X0,X1] : ! [X2,X3,X4] : s('type.wordSem.state'(X0,X1),'const.wordSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X4))),s('type.wordSem.state'(X0,X1),'const.wordSem.state_permute_fupd_2'(s(fun(fun('type.num.num',fun('type.num.num','type.num.num')),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.combin.K_1'(s(fun('type.num.num',fun('type.num.num','type.num.num')),X3))),s('type.wordSem.state'(X0,X1),X2))))) = s('type.wordSem.state'(X0,X1),'const.wordSem.state_permute_fupd_2'(s(fun(fun('type.num.num',fun('type.num.num','type.num.num')),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.combin.K_1'(s(fun('type.num.num',fun('type.num.num','type.num.num')),X3))),s('type.wordSem.state'(X0,X1),'const.wordSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X4))),s('type.wordSem.state'(X0,X1),X2)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9,X10] : s('type.wordSem.state'(X6,X7),'const.wordSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X10))),s('type.wordSem.state'(X6,X7),'const.wordSem.state_permute_fupd_2'(s(fun(fun('type.num.num',fun('type.num.num','type.num.num')),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.combin.K_1'(s(fun('type.num.num',fun('type.num.num','type.num.num')),X9))),s('type.wordSem.state'(X6,X7),X8))))) = s('type.wordSem.state'(X6,X7),'const.wordSem.state_permute_fupd_2'(s(fun(fun('type.num.num',fun('type.num.num','type.num.num')),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.combin.K_1'(s(fun('type.num.num',fun('type.num.num','type.num.num')),X9))),s('type.wordSem.state'(X6,X7),'const.wordSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X10))),s('type.wordSem.state'(X6,X7),X8)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9,X10] : s('type.wordSem.state'(X6,X7),'const.wordSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X10))),s('type.wordSem.state'(X6,X7),'const.wordSem.state_permute_fupd_2'(s(fun(fun('type.num.num',fun('type.num.num','type.num.num')),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.combin.K_1'(s(fun('type.num.num',fun('type.num.num','type.num.num')),X9))),s('type.wordSem.state'(X6,X7),X8))))) = s('type.wordSem.state'(X6,X7),'const.wordSem.state_permute_fupd_2'(s(fun(fun('type.num.num',fun('type.num.num','type.num.num')),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.combin.K_1'(s(fun('type.num.num',fun('type.num.num','type.num.num')),X9))),s('type.wordSem.state'(X6,X7),'const.wordSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X10))),s('type.wordSem.state'(X6,X7),X8)))))),
  file('thm.wordProps.wordProps_|49|84_prove_ltb','thm.wordProps.wordProps_|49|84_prove_ltb')).
fof(f428,plain,(
  $false | ($spl1 | $spl60)),
  inference(subsumption_resolution,[],[f343,f375])).
% SZS output end Proof for thm.wordProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Passive clauses: 82
% Generated clauses: 171
% Final passive clauses: 82
% Input formulas: 85
% Initial clauses: 86
% 
% Trivial inequalities: 1
% Fw subsumption resolutions: 1
% 
% Equational tautologies: 1
% 
% SAT solver clauses: 172
% SAT solver unit clauses: 168
% SAT solver binary clauses: 3
% SAT solver learnt clauses: 1
% 
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 171
% TWLsolver calls for satisfiability: 94
% 
% Memory used [KB]: 1535
% Time elapsed: 0.010 s
% ------------------------------
% ------------------------------
% Success in time 0.633 s
