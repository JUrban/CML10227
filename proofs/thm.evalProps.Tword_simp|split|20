Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.evalProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.evalProps
% SZS output start Proof for thm.evalProps
fof(f3761,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f3760,f669,f292,f444,f588,f471,f475,f473,f293,f446,f442,f294,f447,f445,f443,f3662,f858,f890,f945,f951,f603,f630,f3495,f3594,f3522])).
fof(f3522,plain,(
  $false | ($spl5 | $spl16 | $spl28)),
  inference(subsumption_resolution,[],[f3521,f475])).
fof(f3521,plain,(
  s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',sK2) | ($spl5 | $spl28)),
  inference(forward_demodulation,[],[f3520,f298])).
fof(f298,plain,(
  s('type.ast.tctor','const.ast.TC_word64_0') = s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size','const.ast.W64_0')))),
  inference(cnf_transformation,[],[f98])).
fof(f98,axiom,(
  s('type.ast.tctor','const.ast.TC_word64_0') = s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size','const.ast.W64_0')))),
  file('thm.evalProps.Tword_simp|split|20','thm.ast.TC_word_def|split|1')).
fof(f3520,plain,(
  s('type.ast.tctor',sK2) != s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size','const.ast.W64_0'))) | ($spl5 | $spl28)),
  inference(forward_demodulation,[],[f447,f951])).
fof(f3594,plain,(
  $false | ($spl0 | $spl17 | $spl28)),
  inference(subsumption_resolution,[],[f3589,f474])).
fof(f474,plain,(
  s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',sK2) | $spl17),
  inference(cnf_transformation,[],[f474_D])).
fof(f474_D,plain,(
  s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',sK2) <=> ~$spl17),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl17])])).
fof(f3589,plain,(
  s('type.ast.tctor','const.ast.TC_word64_0') = s('type.ast.tctor',sK2) | ($spl0 | $spl28)),
  inference(trivial_inequality_removal,[],[f3587])).
fof(f3587,plain,(
  s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tword64_0') | s('type.ast.tctor','const.ast.TC_word64_0') = s('type.ast.tctor',sK2) | ($spl0 | $spl28)),
  inference(superposition,[],[f3529,f586])).
fof(f586,plain,(
  s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor','const.ast.TC_word64_0')))),
  inference(forward_demodulation,[],[f580,f299])).
fof(f299,plain,(
  s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')))),
  inference(cnf_transformation,[],[f101])).
fof(f101,axiom,(
  s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')))),
  file('thm.evalProps.Tword_simp|split|20','thm.ast.Tword64_def')).
fof(f580,plain,(
  s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor','const.ast.TC_word64_0')))),
  inference(superposition,[],[f375,f298])).
fof(f375,plain,(
  ( ! [X0] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X0))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',X0)))))) )),
  inference(cnf_transformation,[],[f193])).
fof(f193,plain,(
  ! [X0] : s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X0))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',X0)))))),
  inference(rectify,[],[f99])).
fof(f99,axiom,(
  ! [X17] : s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X17))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',X17)))))),
  file('thm.evalProps.Tword_simp|split|20','thm.ast.Tword_def')).
fof(f3529,plain,(
  ( ! [X6,X7] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X6),s('type.ast.tctor',X7))) | s('type.ast.tctor',sK2) = s('type.ast.tctor',X7)) ) | ($spl0 | $spl28)),
  inference(superposition,[],[f438,f3524])).
fof(f3524,plain,(
  s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),sK1),s('type.ast.tctor',sK2))) | ($spl0 | $spl28)),
  inference(forward_demodulation,[],[f3523,f299])).
fof(f3523,plain,(
  s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),sK1),s('type.ast.tctor',sK2))) | ($spl0 | $spl28)),
  inference(forward_demodulation,[],[f442,f951])).
fof(f438,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X0),s('type.ast.tctor',X1))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X2),s('type.ast.tctor',X3))) | s('type.ast.tctor',X1) = s('type.ast.tctor',X3)) )),
  inference(cnf_transformation,[],[f291])).
fof(f291,plain,(
  ! [X0,X1,X2,X3] : ((s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X0),s('type.ast.tctor',X1))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X2),s('type.ast.tctor',X3))) | (s('type.list.list'('type.ast.t'),X0) = s('type.list.list'('type.ast.t'),X2) & s('type.ast.tctor',X1) = s('type.ast.tctor',X3))) & (s('type.list.list'('type.ast.t'),X0) != s('type.list.list'('type.ast.t'),X2) | s('type.ast.tctor',X1) != s('type.ast.tctor',X3) | s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X0),s('type.ast.tctor',X1))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X2),s('type.ast.tctor',X3)))))),
  inference(flattening,[],[f290])).
fof(f290,plain,(
  ! [X0,X1,X2,X3] : ((s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X0),s('type.ast.tctor',X1))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X2),s('type.ast.tctor',X3))) | (s('type.list.list'('type.ast.t'),X0) = s('type.list.list'('type.ast.t'),X2) & s('type.ast.tctor',X1) = s('type.ast.tctor',X3))) & ((s('type.list.list'('type.ast.t'),X0) != s('type.list.list'('type.ast.t'),X2) | s('type.ast.tctor',X1) != s('type.ast.tctor',X3)) | s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X0),s('type.ast.tctor',X1))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X2),s('type.ast.tctor',X3)))))),
  inference(nnf_transformation,[],[f256])).
fof(f256,plain,(
  ! [X0,X1,X2,X3] : (s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X0),s('type.ast.tctor',X1))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X2),s('type.ast.tctor',X3))) <=> (s('type.list.list'('type.ast.t'),X0) = s('type.list.list'('type.ast.t'),X2) & s('type.ast.tctor',X1) = s('type.ast.tctor',X3)))),
  inference(rectify,[],[f91])).
fof(f91,axiom,(
  ! [X13,X14,X15,X16] : (s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X13),s('type.ast.tctor',X14))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X15),s('type.ast.tctor',X16))) <=> (s('type.list.list'('type.ast.t'),X13) = s('type.list.list'('type.ast.t'),X15) & s('type.ast.tctor',X14) = s('type.ast.tctor',X16)))),
  file('thm.evalProps.Tword_simp|split|20','thm.ast.t_|49||49||split|2')).
fof(f3495,plain,(
  $false | ($spl0 | $spl3 | $spl4 | $spl16)),
  inference(subsumption_resolution,[],[f3493,f445])).
fof(f3493,plain,(
  s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),sK1) | ($spl0 | $spl4 | $spl16)),
  inference(trivial_inequality_removal,[],[f3491])).
fof(f3491,plain,(
  s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tword64_0') | s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),sK1) | ($spl0 | $spl4 | $spl16)),
  inference(superposition,[],[f2178,f586])).
fof(f2178,plain,(
  ( ! [X12,X11] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X11),s('type.ast.tctor',X12))) | s('type.list.list'('type.ast.t'),sK1) = s('type.list.list'('type.ast.t'),X11)) ) | ($spl0 | $spl4 | $spl16)),
  inference(superposition,[],[f437,f677])).
fof(f677,plain,(
  s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),sK1),s('type.ast.tctor','const.ast.TC_word64_0'))) | ($spl0 | $spl4 | $spl16)),
  inference(backward_demodulation,[],[f676,f671])).
fof(f671,plain,(
  s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',sK0))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),sK1),s('type.ast.tctor','const.ast.TC_word64_0'))) | ($spl0 | $spl16)),
  inference(forward_demodulation,[],[f442,f475])).
fof(f676,plain,(
  s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',sK0))) | ($spl4 | $spl16)),
  inference(forward_demodulation,[],[f596,f586])).
fof(f596,plain,(
  s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',sK0))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor','const.ast.TC_word64_0'))) | ($spl4 | $spl16)),
  inference(superposition,[],[f375,f594])).
fof(f594,plain,(
  s('type.ast.tctor','const.ast.TC_word64_0') = s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',sK0))) | ($spl4 | $spl16)),
  inference(forward_demodulation,[],[f446,f475])).
fof(f437,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X0),s('type.ast.tctor',X1))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X2),s('type.ast.tctor',X3))) | s('type.list.list'('type.ast.t'),X0) = s('type.list.list'('type.ast.t'),X2)) )),
  inference(cnf_transformation,[],[f291])).
fof(f630,plain,(
  $false | $spl18),
  inference(trivial_inequality_removal,[],[f626])).
fof(f626,plain,(
  s('type.ast.word_size','const.ast.W8_0') != s('type.ast.word_size','const.ast.W8_0') | $spl18),
  inference(superposition,[],[f308,f603])).
fof(f308,plain,(
  s('type.ast.word_size','const.ast.W8_0') != s('type.ast.word_size','const.ast.W64_0')),
  inference(cnf_transformation,[],[f126])).
fof(f126,plain,(
  s('type.ast.word_size','const.ast.W8_0') != s('type.ast.word_size','const.ast.W64_0')),
  inference(flattening,[],[f8])).
fof(f8,axiom,(
  ~s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size','const.ast.W64_0')),
  file('thm.evalProps.Tword_simp|split|20','thm.ast.word_size_distinct')).
fof(f603,plain,(
  ( ! [X2] : (s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X2)) ) | $spl18),
  inference(cnf_transformation,[],[f603_D])).
fof(f603_D,plain,(
  ( ! [X2] : (s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X2)) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f951,plain,(
  s('type.ast.word_size','const.ast.W64_0') = s('type.ast.word_size',sK0) | $spl28),
  inference(cnf_transformation,[],[f951_D])).
fof(f951_D,plain,(
  s('type.ast.word_size','const.ast.W64_0') = s('type.ast.word_size',sK0) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f945,plain,(
  ( ! [X9] : (s('type.ast.word_size','const.ast.W64_0') = s('type.ast.word_size',sK0) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X9)) ) | $spl24),
  inference(duplicate_literal_removal,[],[f909])).
fof(f909,plain,(
  ( ! [X9] : (s('type.ast.word_size','const.ast.W64_0') = s('type.ast.word_size',sK0) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X9) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X9)) ) | $spl24),
  inference(superposition,[],[f890,f376])).
fof(f376,plain,(
  ( ! [X0] : (s('type.ast.word_size','const.ast.W64_0') = s('type.ast.word_size',X0) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X0)) )),
  inference(cnf_transformation,[],[f194])).
fof(f194,plain,(
  ! [X0] : (s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X0) | s('type.ast.word_size','const.ast.W64_0') = s('type.ast.word_size',X0))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X7] : (s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X7) | s('type.ast.word_size','const.ast.W64_0') = s('type.ast.word_size',X7))),
  file('thm.evalProps.Tword_simp|split|20','thm.ast.word_size_nchotomy')).
fof(f890,plain,(
  ( ! [X21] : (s('type.ast.word_size',sK0) = s('type.ast.word_size',X21) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X21)) ) | $spl24),
  inference(cnf_transformation,[],[f890_D])).
fof(f890_D,plain,(
  ( ! [X21] : (s('type.ast.word_size',sK0) = s('type.ast.word_size',X21) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X21)) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f858,plain,(
  ( ! [X23] : (s('type.ast.word_size',sK0) = s('type.ast.word_size',X23) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X23)) ) | $spl15),
  inference(trivial_inequality_removal,[],[f799])).
fof(f799,plain,(
  ( ! [X23] : (s('type.ast.word_size','const.ast.W8_0') != s('type.ast.word_size','const.ast.W8_0') | s('type.ast.word_size',sK0) = s('type.ast.word_size',X23) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X23)) ) | $spl15),
  inference(superposition,[],[f472,f460])).
fof(f460,plain,(
  ( ! [X0,X1] : (s('type.ast.word_size',X0) = s('type.ast.word_size',X1) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X1) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',X0)) )),
  inference(superposition,[],[f376,f376])).
fof(f472,plain,(
  s('type.ast.word_size','const.ast.W8_0') != s('type.ast.word_size',sK0) | $spl15),
  inference(cnf_transformation,[],[f472_D])).
fof(f472_D,plain,(
  s('type.ast.word_size','const.ast.W8_0') != s('type.ast.word_size',sK0) <=> ~$spl15),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl15])])).
fof(f3662,plain,(
  $false | ($spl0 | $spl5 | $spl14)),
  inference(subsumption_resolution,[],[f3661,f3648])).
fof(f3648,plain,(
  s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',sK2) | ($spl5 | $spl14)),
  inference(forward_demodulation,[],[f3647,f297])).
fof(f297,plain,(
  s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size','const.ast.W8_0')))),
  inference(cnf_transformation,[],[f97])).
fof(f97,axiom,(
  s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size','const.ast.W8_0')))),
  file('thm.evalProps.Tword_simp|split|20','thm.ast.TC_word_def|split|0')).
fof(f3647,plain,(
  s('type.ast.tctor',sK2) != s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size','const.ast.W8_0'))) | ($spl5 | $spl14)),
  inference(forward_demodulation,[],[f447,f473])).
fof(f3661,plain,(
  s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor',sK2) | ($spl0 | $spl14)),
  inference(trivial_inequality_removal,[],[f3659])).
fof(f3659,plain,(
  s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tword8_0') | s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor',sK2) | ($spl0 | $spl14)),
  inference(superposition,[],[f1893,f3650])).
fof(f3650,plain,(
  s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),sK1),s('type.ast.tctor',sK2))) | ($spl0 | $spl14)),
  inference(forward_demodulation,[],[f3649,f300])).
fof(f300,plain,(
  s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')))),
  inference(cnf_transformation,[],[f100])).
fof(f100,axiom,(
  s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')))),
  file('thm.evalProps.Tword_simp|split|20','thm.ast.Tword8_def')).
fof(f3649,plain,(
  s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),sK1),s('type.ast.tctor',sK2))) | ($spl0 | $spl14)),
  inference(forward_demodulation,[],[f442,f473])).
fof(f1893,plain,(
  ( ! [X8,X7] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X7),s('type.ast.tctor',X8))) | s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor',X8)) )),
  inference(superposition,[],[f438,f587])).
fof(f587,plain,(
  s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor','const.ast.TC_word8_0')))),
  inference(forward_demodulation,[],[f581,f300])).
fof(f581,plain,(
  s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor','const.ast.TC_word8_0')))),
  inference(superposition,[],[f375,f297])).
fof(f443,plain,(
  s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',sK0))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),sK1),s('type.ast.tctor',sK2))) | $spl1),
  inference(cnf_transformation,[],[f443_D])).
fof(f443_D,plain,(
  s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',sK0))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),sK1),s('type.ast.tctor',sK2))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f445,plain,(
  s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),sK1) | $spl3),
  inference(cnf_transformation,[],[f445_D])).
fof(f445_D,plain,(
  s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),sK1) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f447,plain,(
  s('type.ast.tctor',sK2) != s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',sK0))) | $spl5),
  inference(cnf_transformation,[],[f447_D])).
fof(f447_D,plain,(
  s('type.ast.tctor',sK2) != s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',sK0))) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f294,plain,(
  s('type.ast.tctor',sK2) != s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',sK0))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),sK1) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',sK0))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),sK1),s('type.ast.tctor',sK2)))),
  inference(cnf_transformation,[],[f264])).
fof(f264,plain,(
  (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',sK0))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),sK1),s('type.ast.tctor',sK2))) | (s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),sK1) & s('type.ast.tctor',sK2) = s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',sK0))))) & (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',sK0))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),sK1),s('type.ast.tctor',sK2))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),sK1) | s('type.ast.tctor',sK2) != s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',sK0))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f263])).
fof(f263,plain,(
  ? [X0,X1,X2] : ((s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X0))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X1),s('type.ast.tctor',X2))) | (s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X1) & s('type.ast.tctor',X2) = s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',X0))))) & (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X0))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X1),s('type.ast.tctor',X2))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X1) | s('type.ast.tctor',X2) != s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',X0)))))),
  inference(flattening,[],[f262])).
fof(f262,plain,(
  ? [X0,X1,X2] : ((s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X0))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X1),s('type.ast.tctor',X2))) | (s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X1) & s('type.ast.tctor',X2) = s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',X0))))) & (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X0))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X1),s('type.ast.tctor',X2))) | (s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X1) | s('type.ast.tctor',X2) != s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',X0))))))),
  inference(nnf_transformation,[],[f257])).
fof(f257,plain,(
  ? [X0,X1,X2] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X0))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X1),s('type.ast.tctor',X2))) <~> (s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X1) & s('type.ast.tctor',X2) = s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',X0)))))),
  inference(ennf_transformation,[],[f122])).
fof(f122,plain,(
  ~! [X0,X1,X2] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X0))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X1),s('type.ast.tctor',X2))) <=> (s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X1) & s('type.ast.tctor',X2) = s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',X0)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X6))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X7),s('type.ast.tctor',X8))) <=> (s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X7) & s('type.ast.tctor',X8) = s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',X6)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X6))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X7),s('type.ast.tctor',X8))) <=> (s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X7) & s('type.ast.tctor',X8) = s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',X6)))))),
  file('thm.evalProps.Tword_simp|split|20','thm.evalProps.Tword_simp|split|20')).
fof(f442,plain,(
  s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',sK0))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),sK1),s('type.ast.tctor',sK2))) | $spl0),
  inference(cnf_transformation,[],[f442_D])).
fof(f442_D,plain,(
  s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',sK0))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),sK1),s('type.ast.tctor',sK2))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f446,plain,(
  s('type.ast.tctor',sK2) = s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',sK0))) | $spl4),
  inference(cnf_transformation,[],[f446_D])).
fof(f446_D,plain,(
  s('type.ast.tctor',sK2) = s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',sK0))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f293,plain,(
  s('type.ast.tctor',sK2) = s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',sK0))) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',sK0))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),sK1),s('type.ast.tctor',sK2)))),
  inference(cnf_transformation,[],[f264])).
fof(f473,plain,(
  s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',sK0) | $spl14),
  inference(cnf_transformation,[],[f473_D])).
fof(f473_D,plain,(
  s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',sK0) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f475,plain,(
  s('type.ast.tctor','const.ast.TC_word64_0') = s('type.ast.tctor',sK2) | $spl16),
  inference(cnf_transformation,[],[f475_D])).
fof(f475_D,plain,(
  s('type.ast.tctor','const.ast.TC_word64_0') = s('type.ast.tctor',sK2) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f471,plain,(
  s('type.ast.tctor','const.ast.TC_word64_0') = s('type.ast.tctor',sK2) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',sK0) | $spl4),
  inference(forward_demodulation,[],[f468,f298])).
fof(f468,plain,(
  s('type.ast.tctor',sK2) = s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size','const.ast.W64_0'))) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',sK0) | $spl4),
  inference(superposition,[],[f446,f376])).
fof(f588,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl14)),
  inference(subsumption_resolution,[],[f587,f536])).
fof(f536,plain,(
  s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor','const.ast.TC_word8_0'))) | ($spl1 | $spl2 | $spl4 | $spl14)),
  inference(forward_demodulation,[],[f535,f300])).
fof(f535,plain,(
  s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor','const.ast.TC_word8_0'))) | ($spl1 | $spl2 | $spl4 | $spl14)),
  inference(forward_demodulation,[],[f534,f473])).
fof(f534,plain,(
  s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',sK0))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor','const.ast.TC_word8_0'))) | ($spl1 | $spl2 | $spl4 | $spl14)),
  inference(forward_demodulation,[],[f533,f444])).
fof(f533,plain,(
  s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',sK0))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),sK1),s('type.ast.tctor','const.ast.TC_word8_0'))) | ($spl1 | $spl4 | $spl14)),
  inference(forward_demodulation,[],[f443,f479])).
fof(f479,plain,(
  s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor',sK2) | ($spl4 | $spl14)),
  inference(forward_demodulation,[],[f476,f297])).
fof(f476,plain,(
  s('type.ast.tctor',sK2) = s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size','const.ast.W8_0'))) | ($spl4 | $spl14)),
  inference(backward_demodulation,[],[f473,f446])).
fof(f444,plain,(
  s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),sK1) | $spl2),
  inference(cnf_transformation,[],[f444_D])).
fof(f444_D,plain,(
  s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),sK1) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f292,plain,(
  s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),sK1) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',sK0))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),sK1),s('type.ast.tctor',sK2)))),
  inference(cnf_transformation,[],[f264])).
fof(f669,plain,(
  $false | ($spl1 | $spl2 | $spl15 | $spl16)),
  inference(subsumption_resolution,[],[f668,f472])).
fof(f668,plain,(
  s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',sK0) | ($spl1 | $spl2 | $spl16)),
  inference(subsumption_resolution,[],[f665,f299])).
fof(f665,plain,(
  s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) | s('type.ast.word_size','const.ast.W8_0') = s('type.ast.word_size',sK0) | ($spl1 | $spl2 | $spl16)),
  inference(superposition,[],[f664,f376])).
fof(f664,plain,(
  s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',sK0))) | ($spl1 | $spl2 | $spl16)),
  inference(forward_demodulation,[],[f663,f586])).
fof(f663,plain,(
  s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',sK0))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor','const.ast.TC_word64_0'))) | ($spl1 | $spl2 | $spl16)),
  inference(forward_demodulation,[],[f589,f475])).
fof(f589,plain,(
  s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',sK0))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',sK2))) | ($spl1 | $spl2)),
  inference(forward_demodulation,[],[f443,f444])).
fof(f3760,plain,(
  $false | ($spl0 | $spl3 | $spl14)),
  inference(subsumption_resolution,[],[f3758,f445])).
fof(f3758,plain,(
  s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),sK1) | ($spl0 | $spl14)),
  inference(trivial_inequality_removal,[],[f3755])).
fof(f3755,plain,(
  s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tword8_0') | s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),sK1) | ($spl0 | $spl14)),
  inference(superposition,[],[f3653,f587])).
fof(f3653,plain,(
  ( ! [X2,X3] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X2),s('type.ast.tctor',X3))) | s('type.list.list'('type.ast.t'),sK1) = s('type.list.list'('type.ast.t'),X2)) ) | ($spl0 | $spl14)),
  inference(superposition,[],[f437,f3650])).
% SZS output end Proof for thm.evalProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 223
% Passive clauses: 590
% Generated clauses: 3350
% Final active clauses: 177
% Final passive clauses: 223
% Input formulas: 120
% Initial clauses: 148
% 
% Duplicate literals: 252
% Trivial inequalities: 69
% Fw subsumption resolutions: 333
% Fw demodulations: 184
% Bw demodulations: 14
% 
% Simple tautologies: 144
% Equational tautologies: 52
% Forward subsumptions: 1497
% 
% Binary resolution: 35
% Factoring: 1
% Forward superposition: 1130
% Backward superposition: 885
% Self superposition: 84
% Equality factoring: 87
% Equality resolution: 12
% 
% Split clauses: 157
% Split components: 315
% SAT solver clauses: 276
% SAT solver unit clauses: 37
% SAT solver binary clauses: 96
% SAT solver learnt clauses: 4
% SAT solver learnt literals: 4
% 
% Sat splits: 157
% Sat splitting refutations: 31
% 
% TWLsolver clauses: 272
% TWLsolver calls for satisfiability: 61
% 
% Memory used [KB]: 1918
% Time elapsed: 0.126 s
% ------------------------------
% ------------------------------
% Success in time 0.137 s
