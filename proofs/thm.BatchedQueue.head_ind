Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.BatchedQueue
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.BatchedQueue
% SZS output start Proof for thm.BatchedQueue
fof(f3657,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f3648,f1579,f527])).
fof(f527,plain,(
  ( ! [X45] : (s(bool,'T_0') = s(bool,happ(s(fun('type.BatchedQueue.queue'(sK0),bool),sK1),s('type.BatchedQueue.queue'(sK0),'const.BatchedQueue.QUEUE_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),X45)))))) ) | $spl0),
  inference(cnf_transformation,[],[f527_D])).
fof(f527_D,plain,(
  ( ! [X45] : (s(bool,'T_0') = s(bool,happ(s(fun('type.BatchedQueue.queue'(sK0),bool),sK1),s('type.BatchedQueue.queue'(sK0),'const.BatchedQueue.QUEUE_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),X45)))))) ) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f1579,plain,(
  ( ! [X50] : (s(bool,'T_0') = s(bool,happ(s(fun('type.BatchedQueue.queue'(sK0),bool),sK1),s('type.BatchedQueue.queue'(sK0),'const.BatchedQueue.QUEUE_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),X50)))))) )),
  inference(subsumption_resolution,[],[f1578,f91])).
fof(f91,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f25])).
fof(f25,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.BatchedQueue.head_ind',aHL_FALSITY)).
fof(f1578,plain,(
  ( ! [X50] : (p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,happ(s(fun('type.BatchedQueue.queue'(sK0),bool),sK1),s('type.BatchedQueue.queue'(sK0),'const.BatchedQueue.QUEUE_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),X50)))))) )),
  inference(forward_demodulation,[],[f1508,f126])).
fof(f126,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.BatchedQueue.queue'(sK0),bool),sK1),s('type.BatchedQueue.queue'(sK0),sK2)))),
  inference(resolution,[],[f88,f99])).
fof(f99,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f71])).
fof(f71,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f30])).
fof(f30,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f29])).
fof(f29,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X21] : (s(bool,'F_0') = s(bool,X21) <=> ~p(s(bool,X21)))),
  file('thm.BatchedQueue.head_ind','thm.bool.EQ_CLAUSES|split|3')).
fof(f88,plain,(
  ~p(s(bool,happ(s(fun('type.BatchedQueue.queue'(sK0),bool),sK1),s('type.BatchedQueue.queue'(sK0),sK2))))),
  inference(cnf_transformation,[],[f68])).
fof(f68,plain,(
  ! [X4,X5,X6] : p(s(bool,happ(s(fun('type.BatchedQueue.queue'(sK0),bool),sK1),s('type.BatchedQueue.queue'(sK0),'const.BatchedQueue.QUEUE_2'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),X5))),s('type.list.list'(sK0),X6)))))) & ! [X3] : p(s(bool,happ(s(fun('type.BatchedQueue.queue'(sK0),bool),sK1),s('type.BatchedQueue.queue'(sK0),'const.BatchedQueue.QUEUE_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),X3)))))) & ~p(s(bool,happ(s(fun('type.BatchedQueue.queue'(sK0),bool),sK1),s('type.BatchedQueue.queue'(sK0),sK2))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f67])).
fof(f67,plain,(
  ? [X0,X1] : (! [X4,X5,X6] : p(s(bool,happ(s(fun('type.BatchedQueue.queue'(X0),bool),X1),s('type.BatchedQueue.queue'(X0),'const.BatchedQueue.QUEUE_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X5))),s('type.list.list'(X0),X6)))))) & ! [X3] : p(s(bool,happ(s(fun('type.BatchedQueue.queue'(X0),bool),X1),s('type.BatchedQueue.queue'(X0),'const.BatchedQueue.QUEUE_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),X3)))))) & ? [X2] : ~p(s(bool,happ(s(fun('type.BatchedQueue.queue'(X0),bool),X1),s('type.BatchedQueue.queue'(X0),X2)))))),
  inference(rectify,[],[f55])).
fof(f55,plain,(
  ? [X0,X1] : (! [X3,X4,X5] : p(s(bool,happ(s(fun('type.BatchedQueue.queue'(X0),bool),X1),s('type.BatchedQueue.queue'(X0),'const.BatchedQueue.QUEUE_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))),s('type.list.list'(X0),X5)))))) & ! [X2] : p(s(bool,happ(s(fun('type.BatchedQueue.queue'(X0),bool),X1),s('type.BatchedQueue.queue'(X0),'const.BatchedQueue.QUEUE_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),X2)))))) & ? [X6] : ~p(s(bool,happ(s(fun('type.BatchedQueue.queue'(X0),bool),X1),s('type.BatchedQueue.queue'(X0),X6)))))),
  inference(flattening,[],[f54])).
fof(f54,plain,(
  ? [X0,X1] : ((! [X3,X4,X5] : p(s(bool,happ(s(fun('type.BatchedQueue.queue'(X0),bool),X1),s('type.BatchedQueue.queue'(X0),'const.BatchedQueue.QUEUE_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))),s('type.list.list'(X0),X5)))))) & ! [X2] : p(s(bool,happ(s(fun('type.BatchedQueue.queue'(X0),bool),X1),s('type.BatchedQueue.queue'(X0),'const.BatchedQueue.QUEUE_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),X2))))))) & ? [X6] : ~p(s(bool,happ(s(fun('type.BatchedQueue.queue'(X0),bool),X1),s('type.BatchedQueue.queue'(X0),X6)))))),
  inference(ennf_transformation,[],[f24])).
fof(f24,plain,(
  ~! [X0,X1] : ((! [X3,X4,X5] : p(s(bool,happ(s(fun('type.BatchedQueue.queue'(X0),bool),X1),s('type.BatchedQueue.queue'(X0),'const.BatchedQueue.QUEUE_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))),s('type.list.list'(X0),X5)))))) & ! [X2] : p(s(bool,happ(s(fun('type.BatchedQueue.queue'(X0),bool),X1),s('type.BatchedQueue.queue'(X0),'const.BatchedQueue.QUEUE_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),X2))))))) => ! [X6] : p(s(bool,happ(s(fun('type.BatchedQueue.queue'(X0),bool),X1),s('type.BatchedQueue.queue'(X0),X6)))))),
  inference(flattening,[],[f23])).
fof(f23,plain,(
  ~! [X0] : ! [X1] : ((! [X3,X4,X5] : p(s(bool,happ(s(fun('type.BatchedQueue.queue'(X0),bool),X1),s('type.BatchedQueue.queue'(X0),'const.BatchedQueue.QUEUE_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))),s('type.list.list'(X0),X5)))))) & ! [X2] : p(s(bool,happ(s(fun('type.BatchedQueue.queue'(X0),bool),X1),s('type.BatchedQueue.queue'(X0),'const.BatchedQueue.QUEUE_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),X2))))))) => ! [X6] : p(s(bool,happ(s(fun('type.BatchedQueue.queue'(X0),bool),X1),s('type.BatchedQueue.queue'(X0),X6)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : ((! [X8,X9,X10] : p(s(bool,happ(s(fun('type.BatchedQueue.queue'(X6),bool),X7),s('type.BatchedQueue.queue'(X6),'const.BatchedQueue.QUEUE_2'(s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X8),s('type.list.list'(X6),X9))),s('type.list.list'(X6),X10)))))) & ! [X11] : p(s(bool,happ(s(fun('type.BatchedQueue.queue'(X6),bool),X7),s('type.BatchedQueue.queue'(X6),'const.BatchedQueue.QUEUE_2'(s('type.list.list'(X6),'const.list.NIL_0'),s('type.list.list'(X6),X11))))))) => ! [X12] : p(s(bool,happ(s(fun('type.BatchedQueue.queue'(X6),bool),X7),s('type.BatchedQueue.queue'(X6),X12)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : ((! [X8,X9,X10] : p(s(bool,happ(s(fun('type.BatchedQueue.queue'(X6),bool),X7),s('type.BatchedQueue.queue'(X6),'const.BatchedQueue.QUEUE_2'(s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X8),s('type.list.list'(X6),X9))),s('type.list.list'(X6),X10)))))) & ! [X11] : p(s(bool,happ(s(fun('type.BatchedQueue.queue'(X6),bool),X7),s('type.BatchedQueue.queue'(X6),'const.BatchedQueue.QUEUE_2'(s('type.list.list'(X6),'const.list.NIL_0'),s('type.list.list'(X6),X11))))))) => ! [X12] : p(s(bool,happ(s(fun('type.BatchedQueue.queue'(X6),bool),X7),s('type.BatchedQueue.queue'(X6),X12)))))),
  file('thm.BatchedQueue.head_ind','thm.BatchedQueue.head_ind')).
fof(f1508,plain,(
  ( ! [X50] : (p(s(bool,happ(s(fun('type.BatchedQueue.queue'(sK0),bool),sK1),s('type.BatchedQueue.queue'(sK0),sK2)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.BatchedQueue.queue'(sK0),bool),sK1),s('type.BatchedQueue.queue'(sK0),'const.BatchedQueue.QUEUE_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),X50)))))) )),
  inference(superposition,[],[f87,f221])).
fof(f221,plain,(
  ( ! [X4] : (s(bool,X4) = s(bool,happ(s(fun('type.BatchedQueue.queue'(sK0),bool),sK1),s('type.BatchedQueue.queue'(sK0),sK2))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f217,f91])).
fof(f217,plain,(
  ( ! [X4] : (p(s(bool,'F_0')) | s(bool,X4) = s(bool,happ(s(fun('type.BatchedQueue.queue'(sK0),bool),sK1),s('type.BatchedQueue.queue'(sK0),sK2))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f160,f126])).
fof(f160,plain,(
  ( ! [X2,X1] : (p(s(bool,X1)) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) )),
  inference(resolution,[],[f114,f95])).
fof(f95,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f69])).
fof(f69,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f27])).
fof(f27,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X21] : (s(bool,'T_0') = s(bool,X21) <=> p(s(bool,X21)))),
  file('thm.BatchedQueue.head_ind','thm.bool.EQ_CLAUSES|split|0')).
fof(f114,plain,(
  ( ! [X0,X1] : (p(s(bool,X1)) | p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f65])).
fof(f65,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1))),
  inference(flattening,[],[f64])).
fof(f64,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | ((p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1)))),
  inference(ennf_transformation,[],[f51])).
fof(f51,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) => p(s(bool,X1))) => ((p(s(bool,X1)) => p(s(bool,X0))) => s(bool,X0) = s(bool,X1)))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X13,X14] : ((p(s(bool,X13)) => p(s(bool,X14))) => ((p(s(bool,X14)) => p(s(bool,X13))) => s(bool,X13) = s(bool,X14)))),
  file('thm.BatchedQueue.head_ind','thm.bool.IMP_ANTISYM_AX')).
fof(f87,plain,(
  ( ! [X3] : (p(s(bool,happ(s(fun('type.BatchedQueue.queue'(sK0),bool),sK1),s('type.BatchedQueue.queue'(sK0),'const.BatchedQueue.QUEUE_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),X3))))))) )),
  inference(cnf_transformation,[],[f68])).
fof(f3648,plain,(
  $false | $spl0),
  inference(subsumption_resolution,[],[f3632,f91])).
fof(f3632,plain,(
  p(s(bool,'F_0')) | $spl0),
  inference(superposition,[],[f3603,f126])).
fof(f3603,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.BatchedQueue.queue'(sK0),bool),sK1),s('type.BatchedQueue.queue'(sK0),X0))))) ) | $spl0),
  inference(subsumption_resolution,[],[f3602,f86])).
fof(f86,plain,(
  ( ! [X6,X4,X5] : (p(s(bool,happ(s(fun('type.BatchedQueue.queue'(sK0),bool),sK1),s('type.BatchedQueue.queue'(sK0),'const.BatchedQueue.QUEUE_2'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),X5))),s('type.list.list'(sK0),X6))))))) )),
  inference(cnf_transformation,[],[f68])).
fof(f3602,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.BatchedQueue.queue'(sK0),bool),sK1),s('type.BatchedQueue.queue'(sK0),'const.BatchedQueue.QUEUE_2'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7(sK1,sK0)),s('type.list.list'(sK0),sK8(sK1,sK0)))),s('type.list.list'(sK0),sK9(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.BatchedQueue.queue'(sK0),bool),sK1),s('type.BatchedQueue.queue'(sK0),X0))))) ) | $spl0),
  inference(subsumption_resolution,[],[f3588,f89])).
fof(f89,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.BatchedQueue.head_ind',aHL_TRUTH)).
fof(f3588,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.BatchedQueue.queue'(sK0),bool),sK1),s('type.BatchedQueue.queue'(sK0),'const.BatchedQueue.QUEUE_2'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7(sK1,sK0)),s('type.list.list'(sK0),sK8(sK1,sK0)))),s('type.list.list'(sK0),sK9(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.BatchedQueue.queue'(sK0),bool),sK1),s('type.BatchedQueue.queue'(sK0),X0))))) ) | $spl0),
  inference(superposition,[],[f107,f527])).
fof(f107,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun('type.BatchedQueue.queue'(X0),bool),X1),s('type.BatchedQueue.queue'(X0),'const.BatchedQueue.QUEUE_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),sK6(X1,X0))))))) | ~p(s(bool,happ(s(fun('type.BatchedQueue.queue'(X0),bool),X1),s('type.BatchedQueue.queue'(X0),'const.BatchedQueue.QUEUE_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK7(X1,X0)),s('type.list.list'(X0),sK8(X1,X0)))),s('type.list.list'(X0),sK9(X1,X0))))))) | p(s(bool,happ(s(fun('type.BatchedQueue.queue'(X0),bool),X1),s('type.BatchedQueue.queue'(X0),X2))))) )),
  inference(cnf_transformation,[],[f77])).
fof(f77,plain,(
  ! [X0,X1] : (~p(s(bool,happ(s(fun('type.BatchedQueue.queue'(X0),bool),X1),s('type.BatchedQueue.queue'(X0),'const.BatchedQueue.QUEUE_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),sK6(X1,X0))))))) | ~p(s(bool,happ(s(fun('type.BatchedQueue.queue'(X0),bool),X1),s('type.BatchedQueue.queue'(X0),'const.BatchedQueue.QUEUE_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK7(X1,X0)),s('type.list.list'(X0),sK8(X1,X0)))),s('type.list.list'(X0),sK9(X1,X0))))))) | ! [X2] : p(s(bool,happ(s(fun('type.BatchedQueue.queue'(X0),bool),X1),s('type.BatchedQueue.queue'(X0),X2)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK6,sK7,sK8,sK9])],[f76])).
fof(f76,plain,(
  ! [X0,X1] : (? [X6] : ~p(s(bool,happ(s(fun('type.BatchedQueue.queue'(X0),bool),X1),s('type.BatchedQueue.queue'(X0),'const.BatchedQueue.QUEUE_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),X6)))))) | ? [X3,X4,X5] : ~p(s(bool,happ(s(fun('type.BatchedQueue.queue'(X0),bool),X1),s('type.BatchedQueue.queue'(X0),'const.BatchedQueue.QUEUE_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))),s('type.list.list'(X0),X5)))))) | ! [X2] : p(s(bool,happ(s(fun('type.BatchedQueue.queue'(X0),bool),X1),s('type.BatchedQueue.queue'(X0),X2)))))),
  inference(rectify,[],[f58])).
fof(f58,plain,(
  ! [X0,X1] : (? [X5] : ~p(s(bool,happ(s(fun('type.BatchedQueue.queue'(X0),bool),X1),s('type.BatchedQueue.queue'(X0),'const.BatchedQueue.QUEUE_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),X5)))))) | ? [X2,X3,X4] : ~p(s(bool,happ(s(fun('type.BatchedQueue.queue'(X0),bool),X1),s('type.BatchedQueue.queue'(X0),'const.BatchedQueue.QUEUE_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X3))),s('type.list.list'(X0),X4)))))) | ! [X6] : p(s(bool,happ(s(fun('type.BatchedQueue.queue'(X0),bool),X1),s('type.BatchedQueue.queue'(X0),X6)))))),
  inference(flattening,[],[f57])).
fof(f57,plain,(
  ! [X0,X1] : ((? [X5] : ~p(s(bool,happ(s(fun('type.BatchedQueue.queue'(X0),bool),X1),s('type.BatchedQueue.queue'(X0),'const.BatchedQueue.QUEUE_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),X5)))))) | ? [X2,X3,X4] : ~p(s(bool,happ(s(fun('type.BatchedQueue.queue'(X0),bool),X1),s('type.BatchedQueue.queue'(X0),'const.BatchedQueue.QUEUE_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X3))),s('type.list.list'(X0),X4))))))) | ! [X6] : p(s(bool,happ(s(fun('type.BatchedQueue.queue'(X0),bool),X1),s('type.BatchedQueue.queue'(X0),X6)))))),
  inference(ennf_transformation,[],[f42])).
fof(f42,plain,(
  ! [X0,X1] : ((! [X5] : p(s(bool,happ(s(fun('type.BatchedQueue.queue'(X0),bool),X1),s('type.BatchedQueue.queue'(X0),'const.BatchedQueue.QUEUE_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),X5)))))) & ! [X2,X3,X4] : p(s(bool,happ(s(fun('type.BatchedQueue.queue'(X0),bool),X1),s('type.BatchedQueue.queue'(X0),'const.BatchedQueue.QUEUE_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X3))),s('type.list.list'(X0),X4))))))) => ! [X6] : p(s(bool,happ(s(fun('type.BatchedQueue.queue'(X0),bool),X1),s('type.BatchedQueue.queue'(X0),X6)))))),
  inference(flattening,[],[f41])).
fof(f41,plain,(
  ! [X0] : ! [X1] : ((! [X5] : p(s(bool,happ(s(fun('type.BatchedQueue.queue'(X0),bool),X1),s('type.BatchedQueue.queue'(X0),'const.BatchedQueue.QUEUE_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),X5)))))) & ! [X2,X3,X4] : p(s(bool,happ(s(fun('type.BatchedQueue.queue'(X0),bool),X1),s('type.BatchedQueue.queue'(X0),'const.BatchedQueue.QUEUE_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X3))),s('type.list.list'(X0),X4))))))) => ! [X6] : p(s(bool,happ(s(fun('type.BatchedQueue.queue'(X0),bool),X1),s('type.BatchedQueue.queue'(X0),X6)))))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X6] : ! [X7] : ((! [X15] : p(s(bool,happ(s(fun('type.BatchedQueue.queue'(X6),bool),X7),s('type.BatchedQueue.queue'(X6),'const.BatchedQueue.QUEUE_2'(s('type.list.list'(X6),'const.list.NIL_0'),s('type.list.list'(X6),X15)))))) & ! [X11,X16,X17] : p(s(bool,happ(s(fun('type.BatchedQueue.queue'(X6),bool),X7),s('type.BatchedQueue.queue'(X6),'const.BatchedQueue.QUEUE_2'(s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X11),s('type.list.list'(X6),X16))),s('type.list.list'(X6),X17))))))) => ! [X12] : p(s(bool,happ(s(fun('type.BatchedQueue.queue'(X6),bool),X7),s('type.BatchedQueue.queue'(X6),X12)))))),
  file('thm.BatchedQueue.head_ind','thm.BatchedQueue.is_empty_ind')).
% SZS output end Proof for thm.BatchedQueue
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 76
% Passive clauses: 843
% Generated clauses: 3525
% Final active clauses: 63
% Final passive clauses: 692
% Input formulas: 21
% Initial clauses: 33
% 
% Duplicate literals: 185
% Trivial inequalities: 51
% Fw subsumption resolutions: 501
% Fw demodulations: 285
% Bw demodulations: 12
% 
% Simple tautologies: 92
% Equational tautologies: 31
% Forward subsumptions: 1419
% 
% Binary resolution: 293
% Factoring: 1
% Forward superposition: 1123
% Backward superposition: 883
% Self superposition: 53
% Equality factoring: 56
% Equality resolution: 9
% 
% Split clauses: 79
% Split components: 158
% SAT solver clauses: 183
% SAT solver unit clauses: 40
% SAT solver binary clauses: 81
% SAT solver learnt clauses: 1
% 
% Sat splits: 79
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 179
% TWLsolver calls for satisfiability: 55
% 
% Memory used [KB]: 2558
% Time elapsed: 0.090 s
% ------------------------------
% ------------------------------
% Success in time 0.09 s
