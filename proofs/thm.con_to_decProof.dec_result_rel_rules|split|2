Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.con_to_decProof
% (61539)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 84
% Passive clauses: 2063
% Generated clauses: 13041
% Final active clauses: 77
% Final passive clauses: 1824
% Input formulas: 7
% Initial clauses: 24
% 
% Duplicate literals: 828
% Trivial inequalities: 184
% Fw subsumption resolutions: 2133
% Fw demodulations: 417
% Bw demodulations: 4
% 
% Simple tautologies: 247
% Equational tautologies: 94
% Forward subsumptions: 5294
% 
% Binary resolution: 214
% Factoring: 4
% Forward superposition: 4598
% Backward superposition: 3893
% Self superposition: 327
% Equality factoring: 268
% Equality resolution: 19
% 
% Split clauses: 708
% Split components: 1423
% SAT solver clauses: 1905
% SAT solver unit clauses: 30
% SAT solver binary clauses: 239
% 
% Sat splits: 707
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 1903
% TWLsolver calls for satisfiability: 159
% 
% Memory used [KB]: 6396
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.con_to_decProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.con_to_decProof
% SZS output start Proof for thm.con_to_decProof
fof(f1407,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f1404,f658,f51,f75,f50,f76,f676,f678,f117,f84,f90,f35,f62,f36,f63,f126,f33,f58,f34,f60,f197,f198,f152,f159,f52,f80,f168,f175,f150,f157,f1311,f1284,f1285,f186,f564,f47,f64])).
fof(f64,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X2) != s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),'const.option.SOME_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X3))))) | s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X1) != s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X0),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X3))))) | sP0(X0,X1,X2)) ) | $spl8),
  inference(cnf_transformation,[],[f64_D])).
fof(f64_D,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X2) != s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),'const.option.SOME_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X3))))) | s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X1) != s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X0),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X3))))) | sP0(X0,X1,X2)) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f47,plain,(
  ( ! [X2,X0,X3,X1] : (sP0(X0,X1,X2) | s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X1) != s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X0),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X3))))) | s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X2) != s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),'const.option.SOME_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X3)))))) )),
  inference(cnf_transformation,[],[f28])).
fof(f28,plain,(
  ! [X0,X1,X2] : ((~sP0(X0,X1,X2) | (s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),'const.option.NONE_0') = s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X2) & s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X1) = s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num','const.conLang.none_tag_0'),s('type.semanticPrimitives.tid_or_exn','const.semanticPrimitives.TypeId_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))))))))))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))))) | (s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X2) = s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),'const.option.SOME_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',sK3(X2,X1,X0)))))) & s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X1) = s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num','const.conLang.some_tag_0'),s('type.semanticPrimitives.tid_or_exn','const.semanticPrimitives.TypeId_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))))))))))),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',sK3(X2,X1,X0)),s('type.list.list'('type.conSem.v'),'const.list.NIL_0'))))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))))) | (s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X2) = s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),'const.option.SOME_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK4(X2,X1,X0)))))) & s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X1) = s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X0),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK4(X2,X1,X0)))))))) & (((s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),'const.option.NONE_0') != s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X2) | s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X1) != s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num','const.conLang.none_tag_0'),s('type.semanticPrimitives.tid_or_exn','const.semanticPrimitives.TypeId_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))))))))))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))))) & ! [X4] : (s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X2) != s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),'const.option.SOME_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X4))))) | s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X1) != s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num','const.conLang.some_tag_0'),s('type.semanticPrimitives.tid_or_exn','const.semanticPrimitives.TypeId_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))))))))))),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X4),s('type.list.list'('type.conSem.v'),'const.list.NIL_0'))))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))))) & ! [X3] : (s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X2) != s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),'const.option.SOME_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X3))))) | s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X1) != s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X0),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X3))))))) | sP0(X0,X1,X2)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK3,sK4])],[f27])).
fof(f27,plain,(
  ! [X0,X1,X2] : ((~sP0(X0,X1,X2) | (s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),'const.option.NONE_0') = s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X2) & s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X1) = s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num','const.conLang.none_tag_0'),s('type.semanticPrimitives.tid_or_exn','const.semanticPrimitives.TypeId_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))))))))))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))))) | ? [X6] : (s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X2) = s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),'const.option.SOME_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X6))))) & s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X1) = s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num','const.conLang.some_tag_0'),s('type.semanticPrimitives.tid_or_exn','const.semanticPrimitives.TypeId_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))))))))))),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X6),s('type.list.list'('type.conSem.v'),'const.list.NIL_0'))))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))))) | ? [X5] : (s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X2) = s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),'const.option.SOME_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X5))))) & s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X1) = s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X0),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X5))))))) & (((s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),'const.option.NONE_0') != s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X2) | s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X1) != s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num','const.conLang.none_tag_0'),s('type.semanticPrimitives.tid_or_exn','const.semanticPrimitives.TypeId_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))))))))))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))))) & ! [X4] : (s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X2) != s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),'const.option.SOME_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X4))))) | s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X1) != s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num','const.conLang.some_tag_0'),s('type.semanticPrimitives.tid_or_exn','const.semanticPrimitives.TypeId_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))))))))))),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X4),s('type.list.list'('type.conSem.v'),'const.list.NIL_0'))))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))))) & ! [X3] : (s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X2) != s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),'const.option.SOME_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X3))))) | s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X1) != s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X0),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X3))))))) | sP0(X0,X1,X2)))),
  inference(rectify,[],[f26])).
fof(f26,plain,(
  ! [X0,X5,X4] : ((~sP0(X0,X5,X4) | (s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),'const.option.NONE_0') = s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X4) & s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X5) = s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num','const.conLang.none_tag_0'),s('type.semanticPrimitives.tid_or_exn','const.semanticPrimitives.TypeId_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))))))))))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))))) | ? [X7] : (s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X4) = s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),'const.option.SOME_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X7))))) & s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X5) = s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num','const.conLang.some_tag_0'),s('type.semanticPrimitives.tid_or_exn','const.semanticPrimitives.TypeId_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))))))))))),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X7),s('type.list.list'('type.conSem.v'),'const.list.NIL_0'))))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))))) | ? [X6] : (s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X4) = s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),'const.option.SOME_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X6))))) & s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X5) = s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X0),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X6))))))) & (((s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),'const.option.NONE_0') != s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X4) | s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X5) != s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num','const.conLang.none_tag_0'),s('type.semanticPrimitives.tid_or_exn','const.semanticPrimitives.TypeId_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))))))))))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))))) & ! [X7] : (s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X4) != s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),'const.option.SOME_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X7))))) | s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X5) != s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num','const.conLang.some_tag_0'),s('type.semanticPrimitives.tid_or_exn','const.semanticPrimitives.TypeId_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))))))))))),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X7),s('type.list.list'('type.conSem.v'),'const.list.NIL_0'))))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))))) & ! [X6] : (s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X4) != s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),'const.option.SOME_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X6))))) | s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X5) != s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X0),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X6))))))) | sP0(X0,X5,X4)))),
  inference(flattening,[],[f25])).
fof(f25,plain,(
  ! [X0,X5,X4] : ((~sP0(X0,X5,X4) | ((s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),'const.option.NONE_0') = s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X4) & s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X5) = s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num','const.conLang.none_tag_0'),s('type.semanticPrimitives.tid_or_exn','const.semanticPrimitives.TypeId_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))))))))))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))))) | ? [X7] : (s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X4) = s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),'const.option.SOME_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X7))))) & s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X5) = s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num','const.conLang.some_tag_0'),s('type.semanticPrimitives.tid_or_exn','const.semanticPrimitives.TypeId_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))))))))))),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X7),s('type.list.list'('type.conSem.v'),'const.list.NIL_0'))))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))))) | ? [X6] : (s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X4) = s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),'const.option.SOME_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X6))))) & s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X5) = s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X0),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X6)))))))) & (((s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),'const.option.NONE_0') != s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X4) | s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X5) != s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num','const.conLang.none_tag_0'),s('type.semanticPrimitives.tid_or_exn','const.semanticPrimitives.TypeId_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))))))))))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))))) & ! [X7] : (s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X4) != s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),'const.option.SOME_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X7))))) | s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X5) != s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num','const.conLang.some_tag_0'),s('type.semanticPrimitives.tid_or_exn','const.semanticPrimitives.TypeId_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))))))))))),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X7),s('type.list.list'('type.conSem.v'),'const.list.NIL_0'))))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))))) & ! [X6] : (s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X4) != s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),'const.option.SOME_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X6))))) | s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X5) != s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X0),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X6))))))) | sP0(X0,X5,X4)))),
  inference(nnf_transformation,[],[f22])).
fof(f22,plain,(
  ! [X0,X5,X4] : (sP0(X0,X5,X4) <=> ((s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),'const.option.NONE_0') = s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X4) & s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X5) = s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num','const.conLang.none_tag_0'),s('type.semanticPrimitives.tid_or_exn','const.semanticPrimitives.TypeId_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))))))))))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))))) | ? [X7] : (s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X4) = s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),'const.option.SOME_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X7))))) & s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X5) = s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num','const.conLang.some_tag_0'),s('type.semanticPrimitives.tid_or_exn','const.semanticPrimitives.TypeId_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))))))))))),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X7),s('type.list.list'('type.conSem.v'),'const.list.NIL_0'))))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))))) | ? [X6] : (s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X4) = s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),'const.option.SOME_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X6))))) & s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X5) = s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X0),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X6))))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP0])])).
fof(f564,plain,(
  ( ! [X2,X0,X1] : (s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X1) != s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X0),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X2))))) | sP0(X0,X1,'const.option.SOME_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X2)))))) ) | $spl128),
  inference(cnf_transformation,[],[f564_D])).
fof(f564_D,plain,(
  ( ! [X2,X0,X1] : (s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X1) != s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X0),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X2))))) | sP0(X0,X1,'const.option.SOME_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X2)))))) ) <=> ~$spl128),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl128])])).
fof(f186,plain,(
  ( ! [X2,X0,X1] : (s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X1) != s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X0),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X2))))) | sP0(X0,X1,'const.option.SOME_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X2)))))) ) | $spl8),
  inference(equality_resolution,[],[f64])).
fof(f1285,plain,(
  ( ! [X0,X1] : (sP0(X0,'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X0),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X1)))),'const.option.SOME_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X1)))))) ) | $spl262),
  inference(cnf_transformation,[],[f1285_D])).
fof(f1285_D,plain,(
  ( ! [X0,X1] : (sP0(X0,'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X0),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X1)))),'const.option.SOME_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X1)))))) ) <=> ~$spl262),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl262])])).
fof(f1284,plain,(
  ( ! [X0,X1] : (sP0(X0,'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X0),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X1)))),'const.option.SOME_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X1)))))) ) | $spl128),
  inference(equality_resolution,[],[f564])).
fof(f1311,plain,(
  $false | ($spl175 | $spl262)),
  inference(resolution,[],[f1285,f678])).
fof(f157,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) ) | $spl62),
  inference(cnf_transformation,[],[f157_D])).
fof(f157_D,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) ) <=> ~$spl62),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl62])])).
fof(f150,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) ) | ($spl5 | $spl40)),
  inference(resolution,[],[f80,f62])).
fof(f175,plain,(
  s(bool,'F_0') = s(bool,'const.con_to_decProof.dec_result_rel_2'(s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),'const.option.SOME_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK2))))),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK2))))))) | $spl74),
  inference(cnf_transformation,[],[f175_D])).
fof(f175_D,plain,(
  s(bool,'F_0') = s(bool,'const.con_to_decProof.dec_result_rel_2'(s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),'const.option.SOME_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK2))))),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK2))))))) <=> ~$spl74),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl74])])).
fof(f168,plain,(
  s(bool,'F_0') = s(bool,'const.con_to_decProof.dec_result_rel_2'(s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),'const.option.SOME_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK2))))),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK2))))))) | ($spl1 | $spl62)),
  inference(resolution,[],[f157,f58])).
fof(f80,plain,(
  ( ! [X0,X1] : (p(s(bool,X0)) | p(s(bool,X1)) | s(bool,X0) = s(bool,X1)) ) | $spl40),
  inference(cnf_transformation,[],[f80_D])).
fof(f80_D,plain,(
  ( ! [X0,X1] : (p(s(bool,X0)) | p(s(bool,X1)) | s(bool,X0) = s(bool,X1)) ) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f52,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | p(s(bool,X1)) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f20])).
fof(f20,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1))),
  inference(flattening,[],[f19])).
fof(f19,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | ((p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1)))),
  inference(ennf_transformation,[],[f14])).
fof(f14,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) => p(s(bool,X1))) => ((p(s(bool,X1)) => p(s(bool,X0))) => s(bool,X0) = s(bool,X1)))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X8,X9] : ((p(s(bool,X8)) => p(s(bool,X9))) => ((p(s(bool,X9)) => p(s(bool,X8))) => s(bool,X8) = s(bool,X9)))),
  file('thm.con_to_decProof.dec_result_rel_rules|split|2','thm.bool.IMP_ANTISYM_AX')).
fof(f159,plain,(
  ( ! [X2,X3] : (p(s(bool,X2)) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | $spl66),
  inference(cnf_transformation,[],[f159_D])).
fof(f159_D,plain,(
  ( ! [X2,X3] : (p(s(bool,X2)) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) <=> ~$spl66),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl66])])).
fof(f152,plain,(
  ( ! [X2,X3] : (p(s(bool,X2)) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | ($spl40 | $spl46)),
  inference(resolution,[],[f80,f90])).
fof(f198,plain,(
  ( ! [X4] : (s(bool,X4) = s(bool,'const.con_to_decProof.dec_result_rel_2'(s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),'const.option.SOME_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK2))))),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK2))))))) | s(bool,'T_0') = s(bool,X4)) ) | $spl82),
  inference(cnf_transformation,[],[f198_D])).
fof(f198_D,plain,(
  ( ! [X4] : (s(bool,X4) = s(bool,'const.con_to_decProof.dec_result_rel_2'(s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),'const.option.SOME_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK2))))),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK2))))))) | s(bool,'T_0') = s(bool,X4)) ) <=> ~$spl82),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl82])])).
fof(f197,plain,(
  ( ! [X4] : (s(bool,X4) = s(bool,'const.con_to_decProof.dec_result_rel_2'(s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),'const.option.SOME_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK2))))),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK2))))))) | s(bool,'T_0') = s(bool,X4)) ) | ($spl5 | $spl66 | $spl74)),
  inference(subsumption_resolution,[],[f195,f62])).
fof(f195,plain,(
  ( ! [X4] : (p(s(bool,'F_0')) | s(bool,X4) = s(bool,'const.con_to_decProof.dec_result_rel_2'(s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),'const.option.SOME_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK2))))),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK2))))))) | s(bool,'T_0') = s(bool,X4)) ) | ($spl66 | $spl74)),
  inference(superposition,[],[f159,f175])).
fof(f60,plain,(
  p(s(bool,'T_0')) | $spl2),
  inference(cnf_transformation,[],[f60_D])).
fof(f60_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f34,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.con_to_decProof.dec_result_rel_rules|split|2',aHL_TRUTH)).
fof(f58,plain,(
  ~p(s(bool,'const.con_to_decProof.dec_result_rel_2'(s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),'const.option.SOME_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK2))))),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK2)))))))) | $spl1),
  inference(cnf_transformation,[],[f58_D])).
fof(f58_D,plain,(
  ~p(s(bool,'const.con_to_decProof.dec_result_rel_2'(s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),'const.option.SOME_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK2))))),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK2)))))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f33,plain,(
  ~p(s(bool,'const.con_to_decProof.dec_result_rel_2'(s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),'const.option.SOME_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK2))))),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK2))))))))),
  inference(cnf_transformation,[],[f24])).
fof(f24,plain,(
  ~p(s(bool,'const.con_to_decProof.dec_result_rel_2'(s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),'const.option.SOME_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK2))))),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),sK1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK2))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK1,sK2])],[f17])).
fof(f17,plain,(
  ? [X0,X1] : ~p(s(bool,'const.con_to_decProof.dec_result_rel_2'(s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),'const.option.SOME_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X1))))),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X0),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X1))))))))),
  inference(ennf_transformation,[],[f10])).
fof(f10,plain,(
  ~! [X0,X1] : p(s(bool,'const.con_to_decProof.dec_result_rel_2'(s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),'const.option.SOME_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X1))))),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X0),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X1))))))))),
  inference(flattening,[],[f9])).
fof(f9,plain,(
  ~! [X0] : ! [X1] : p(s(bool,'const.con_to_decProof.dec_result_rel_2'(s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),'const.option.SOME_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X1))))),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X0),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X1))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : p(s(bool,'const.con_to_decProof.dec_result_rel_2'(s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),'const.option.SOME_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X7))))),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X6),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X6),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X7))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : p(s(bool,'const.con_to_decProof.dec_result_rel_2'(s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),'const.option.SOME_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X7))))),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X6),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X6),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X7))))))))),
  file('thm.con_to_decProof.dec_result_rel_rules|split|2','thm.con_to_decProof.dec_result_rel_rules|split|2')).
fof(f126,plain,(
  $false | ($spl1 | $spl2 | $spl56)),
  inference(subsumption_resolution,[],[f125,f60])).
fof(f125,plain,(
  ~p(s(bool,'T_0')) | ($spl1 | $spl56)),
  inference(forward_demodulation,[],[f58,f117])).
fof(f63,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl6),
  inference(cnf_transformation,[],[f63_D])).
fof(f63_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f36,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.con_to_decProof.dec_result_rel_rules|split|2',aHL_BOOL_CASES)).
fof(f62,plain,(
  ~p(s(bool,'F_0')) | $spl5),
  inference(cnf_transformation,[],[f62_D])).
fof(f62_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f35,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f11])).
fof(f11,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.con_to_decProof.dec_result_rel_rules|split|2',aHL_FALSITY)).
fof(f90,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) | $spl46),
  inference(cnf_transformation,[],[f90_D])).
fof(f90_D,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl46),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl46])])).
fof(f84,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) | ($spl5 | $spl6)),
  inference(superposition,[],[f62,f63])).
fof(f117,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | $spl56),
  inference(cnf_transformation,[],[f117_D])).
fof(f117_D,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl56),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl56])])).
fof(f678,plain,(
  ~sP0(sK1,'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK2)))),'const.option.SOME_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK2))))) | $spl175),
  inference(cnf_transformation,[],[f678_D])).
fof(f678_D,plain,(
  ~sP0(sK1,'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK2)))),'const.option.SOME_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK2))))) <=> ~$spl175),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl175])])).
fof(f676,plain,(
  ( ! [X0] : (~sP0(sK1,'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK2)))),'const.option.SOME_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK2))))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl46 | $spl82 | $spl162)),
  inference(subsumption_resolution,[],[f669,f90])).
fof(f669,plain,(
  ( ! [X0] : (p(s(bool,X0)) | ~sP0(sK1,'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK1),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK2)))),'const.option.SOME_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',sK2))))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl82 | $spl162)),
  inference(superposition,[],[f658,f198])).
fof(f76,plain,(
  ( ! [X4,X2,X0,X5,X1] : (p(s(bool,happ(s(fun('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),bool),happ(s(fun('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),fun('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),bool)),sK7(X2,X1,X0)),s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X4))),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X5)))) | p(s(bool,'const.con_to_decProof.dec_result_rel_2'(s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X1),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X2)))) | ~sP0(X0,X5,X4)) ) | $spl32),
  inference(cnf_transformation,[],[f76_D])).
fof(f76_D,plain,(
  ( ! [X4,X2,X0,X5,X1] : (p(s(bool,happ(s(fun('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),bool),happ(s(fun('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),fun('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),bool)),sK7(X2,X1,X0)),s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X4))),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X5)))) | p(s(bool,'const.con_to_decProof.dec_result_rel_2'(s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X1),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X2)))) | ~sP0(X0,X5,X4)) ) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f50,plain,(
  ( ! [X4,X2,X0,X5,X1] : (p(s(bool,'const.con_to_decProof.dec_result_rel_2'(s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X1),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X2)))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),bool),happ(s(fun('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),fun('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),bool)),sK7(X2,X1,X0)),s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X4))),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X5)))) | ~sP0(X0,X5,X4)) )),
  inference(cnf_transformation,[],[f31])).
fof(f31,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.con_to_decProof.dec_result_rel_2'(s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X1),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X2)))) | ! [X6] : ((sP0(X0,sK6(X6,X2,X1,X0),sK5(X6,X2,X1,X0)) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),bool),happ(s(fun('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),fun('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),bool)),X6),s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),sK5(X6,X2,X1,X0)))),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),sK6(X6,X2,X1,X0)))))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),bool),happ(s(fun('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),fun('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),bool)),X6),s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X1))),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X2)))))) & ((! [X4,X5] : (~sP0(X0,X5,X4) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),bool),happ(s(fun('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),fun('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),bool)),sK7(X2,X1,X0)),s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X4))),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X5))))) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),bool),happ(s(fun('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),fun('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),bool)),sK7(X2,X1,X0)),s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X1))),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X2))))) | p(s(bool,'const.con_to_decProof.dec_result_rel_2'(s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X1),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X2))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK5,sK6,sK7])],[f30])).
fof(f30,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.con_to_decProof.dec_result_rel_2'(s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X1),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X2)))) | ! [X6] : (? [X7,X8] : (sP0(X0,X8,X7) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),bool),happ(s(fun('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),fun('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),bool)),X6),s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X7))),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X8))))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),bool),happ(s(fun('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),fun('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),bool)),X6),s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X1))),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X2)))))) & (? [X3] : (! [X4,X5] : (~sP0(X0,X5,X4) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),bool),happ(s(fun('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),fun('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),bool)),X3),s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X4))),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X5))))) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),bool),happ(s(fun('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),fun('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),bool)),X3),s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X1))),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X2))))) | p(s(bool,'const.con_to_decProof.dec_result_rel_2'(s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X1),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X2))))))),
  inference(rectify,[],[f29])).
fof(f29,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.con_to_decProof.dec_result_rel_2'(s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X1),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X2)))) | ! [X3] : (? [X4,X5] : (sP0(X0,X5,X4) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),bool),happ(s(fun('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),fun('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),bool)),X3),s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X4))),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X5))))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),bool),happ(s(fun('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),fun('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),bool)),X3),s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X1))),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X2)))))) & (? [X3] : (! [X4,X5] : (~sP0(X0,X5,X4) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),bool),happ(s(fun('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),fun('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),bool)),X3),s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X4))),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X5))))) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),bool),happ(s(fun('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),fun('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),bool)),X3),s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X1))),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X2))))) | p(s(bool,'const.con_to_decProof.dec_result_rel_2'(s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X1),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X2))))))),
  inference(nnf_transformation,[],[f23])).
fof(f23,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.con_to_decProof.dec_result_rel_2'(s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X1),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X2)))) <=> ! [X3] : (? [X4,X5] : (sP0(X0,X5,X4) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),bool),happ(s(fun('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),fun('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),bool)),X3),s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X4))),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X5))))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),bool),happ(s(fun('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),fun('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),bool)),X3),s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X1))),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X2))))))),
  inference(definition_folding,[],[f18,f22])).
fof(f18,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.con_to_decProof.dec_result_rel_2'(s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X1),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X2)))) <=> ! [X3] : (? [X4,X5] : (((s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),'const.option.NONE_0') = s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X4) & s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X5) = s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num','const.conLang.none_tag_0'),s('type.semanticPrimitives.tid_or_exn','const.semanticPrimitives.TypeId_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))))))))))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))))) | ? [X7] : (s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X4) = s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),'const.option.SOME_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X7))))) & s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X5) = s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num','const.conLang.some_tag_0'),s('type.semanticPrimitives.tid_or_exn','const.semanticPrimitives.TypeId_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))))))))))),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X7),s('type.list.list'('type.conSem.v'),'const.list.NIL_0'))))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))))) | ? [X6] : (s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X4) = s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),'const.option.SOME_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X6))))) & s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X5) = s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X0),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X6))))))) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),bool),happ(s(fun('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),fun('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),bool)),X3),s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X4))),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X5))))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),bool),happ(s(fun('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),fun('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),bool)),X3),s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X1))),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X2))))))),
  inference(ennf_transformation,[],[f13])).
fof(f13,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.con_to_decProof.dec_result_rel_2'(s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X1),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X2)))) <=> ! [X3] : (! [X4,X5] : (((s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),'const.option.NONE_0') = s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X4) & s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X5) = s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num','const.conLang.none_tag_0'),s('type.semanticPrimitives.tid_or_exn','const.semanticPrimitives.TypeId_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))))))))))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))))) | ? [X7] : (s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X4) = s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),'const.option.SOME_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X7))))) & s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X5) = s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num','const.conLang.some_tag_0'),s('type.semanticPrimitives.tid_or_exn','const.semanticPrimitives.TypeId_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))))))))))),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X7),s('type.list.list'('type.conSem.v'),'const.list.NIL_0'))))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))))) | ? [X6] : (s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X4) = s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),'const.option.SOME_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X6))))) & s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X5) = s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X0),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X6))))))) => p(s(bool,happ(s(fun('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),bool),happ(s(fun('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),fun('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),bool)),X3),s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X4))),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X5))))) => p(s(bool,happ(s(fun('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),bool),happ(s(fun('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),fun('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),bool)),X3),s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X1))),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X2))))))),
  inference(flattening,[],[f12])).
fof(f12,plain,(
  ! [X0] : ! [X1,X2] : (p(s(bool,'const.con_to_decProof.dec_result_rel_2'(s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X1),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X2)))) <=> ! [X3] : (! [X4,X5] : (((s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),'const.option.NONE_0') = s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X4) & s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X5) = s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num','const.conLang.none_tag_0'),s('type.semanticPrimitives.tid_or_exn','const.semanticPrimitives.TypeId_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))))))))))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))))) | ? [X7] : (s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X4) = s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),'const.option.SOME_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X7))))) & s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X5) = s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num','const.conLang.some_tag_0'),s('type.semanticPrimitives.tid_or_exn','const.semanticPrimitives.TypeId_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))))))))))),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X7),s('type.list.list'('type.conSem.v'),'const.list.NIL_0'))))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))))) | ? [X6] : (s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X4) = s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),'const.option.SOME_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X6))))) & s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X5) = s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X0),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X6))))))) => p(s(bool,happ(s(fun('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),bool),happ(s(fun('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),fun('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),bool)),X3),s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X4))),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X5))))) => p(s(bool,happ(s(fun('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),bool),happ(s(fun('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),fun('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),bool)),X3),s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X1))),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X2))))))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X6] : ! [X5,X10] : (p(s(bool,'const.con_to_decProof.dec_result_rel_2'(s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X5),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X6),X10)))) <=> ! [X11] : (! [X12,X13] : (((s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),'const.option.NONE_0') = s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X12) & s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X6),X13) = s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X6),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num','const.conLang.none_tag_0'),s('type.semanticPrimitives.tid_or_exn','const.semanticPrimitives.TypeId_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))))))))))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))))) | ? [X14] : (s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X12) = s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),'const.option.SOME_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rraise_1'(s('type.conSem.v',X14))))) & s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X6),X13) = s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X6),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num','const.conLang.some_tag_0'),s('type.semanticPrimitives.tid_or_exn','const.semanticPrimitives.TypeId_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))))))))))),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X14),s('type.list.list'('type.conSem.v'),'const.list.NIL_0'))))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))))) | ? [X7] : (s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X12) = s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),'const.option.SOME_1'(s('type.semanticPrimitives.error_result'('type.conSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X7))))) & s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X6),X13) = s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X6),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X6),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort',X7))))))) => p(s(bool,happ(s(fun('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X6),bool),happ(s(fun('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),fun('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X6),bool)),X11),s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X12))),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X6),X13))))) => p(s(bool,happ(s(fun('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X6),bool),happ(s(fun('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),fun('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X6),bool)),X11),s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X5))),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X6),X10))))))),
  file('thm.con_to_decProof.dec_result_rel_rules|split|2','thm.con_to_decProof.dec_result_rel_def')).
fof(f75,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),bool),happ(s(fun('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),fun('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),bool)),sK7(X2,X1,X0)),s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X1))),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X2)))) | p(s(bool,'const.con_to_decProof.dec_result_rel_2'(s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X1),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X2))))) ) | $spl30),
  inference(cnf_transformation,[],[f75_D])).
fof(f75_D,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),bool),happ(s(fun('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),fun('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),bool)),sK7(X2,X1,X0)),s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X1))),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X2)))) | p(s(bool,'const.con_to_decProof.dec_result_rel_2'(s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X1),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X2))))) ) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f51,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.con_to_decProof.dec_result_rel_2'(s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X1),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X2)))) | ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),bool),happ(s(fun('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),fun('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),bool)),sK7(X2,X1,X0)),s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X1))),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X0),X2))))) )),
  inference(cnf_transformation,[],[f31])).
fof(f658,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.con_to_decProof.dec_result_rel_2'(s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X0),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X1),X2)))) | ~sP0(X1,X2,X0)) ) | $spl162),
  inference(cnf_transformation,[],[f658_D])).
fof(f658_D,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.con_to_decProof.dec_result_rel_2'(s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X0),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X1),X2)))) | ~sP0(X1,X2,X0)) ) <=> ~$spl162),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl162])])).
fof(f1404,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.con_to_decProof.dec_result_rel_2'(s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X0),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X1),X2)))) | ~sP0(X1,X2,X0)) ) | ($spl30 | $spl32)),
  inference(duplicate_literal_removal,[],[f1390])).
fof(f1390,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.con_to_decProof.dec_result_rel_2'(s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X0),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X1),X2)))) | ~sP0(X1,X2,X0) | p(s(bool,'const.con_to_decProof.dec_result_rel_2'(s('type.option.option'('type.semanticPrimitives.error_result'('type.conSem.v')),X0),s('type.semanticPrimitives.result'('type.list.list'('type.conSem.v'),X1),X2))))) ) | ($spl30 | $spl32)),
  inference(resolution,[],[f76,f75])).
% SZS output end Proof for thm.con_to_decProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 74
% Passive clauses: 148
% Generated clauses: 1442
% Final active clauses: 49
% Final passive clauses: 59
% Input formulas: 7
% Initial clauses: 24
% 
% Duplicate literals: 82
% Trivial inequalities: 8
% Fw subsumption resolutions: 119
% Fw demodulations: 93
% Bw demodulations: 17
% Condensations: 96
% 
% Simple tautologies: 33
% Equational tautologies: 20
% Forward subsumptions: 567
% 
% Binary resolution: 182
% Factoring: 3
% Forward superposition: 222
% Backward superposition: 280
% Self superposition: 36
% Equality factoring: 32
% Equality resolution: 5
% 
% Split clauses: 21
% Split components: 42
% SAT solver clauses: 270
% SAT solver unit clauses: 28
% SAT solver binary clauses: 18
% SAT solver learnt clauses: 3
% SAT solver learnt literals: 2
% 
% Sat splits: 21
% Sat splitting refutations: 7
% 
% TWLsolver clauses: 267
% TWLsolver calls for satisfiability: 372
% 
% Memory used [KB]: 2942
% Time elapsed: 0.136 s
% ------------------------------
% ------------------------------
% Success in time 0.754 s
