Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.bvp_to_wordProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.bvp_to_wordProps
% SZS output start Proof for thm.bvp_to_wordProps
fof(f2235,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f2234,f133,f233,f231,f229,f1843,f2233])).
fof(f2233,plain,(
  $false | $spl4),
  inference(subsumption_resolution,[],[f233,f136])).
fof(f136,plain,(
  ( ! [X6,X4,X8,X7,X5,X3] : (s('type.pair.prod'('type.fcp.cart'(bool,sK6),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'type.bvp_to_word.config')),sK8) != s('type.pair.prod'('type.fcp.cart'(bool,sK6),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'type.bvp_to_word.config')),'const.pair.,_2'(s('type.fcp.cart'(bool,sK6),X3),s('type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'type.bvp_to_word.config'),'const.pair.,_2'(s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK7))),X4),s('type.num.num',X5),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7))),'const.pair.,_2'(s('type.bvp_to_wordProps.tag',X6),s('type.list.list'('type.wordSem.word_loc'(sK7)),X7))))),s('type.bvp_to_word.config',X8)))))) )),
  inference(cnf_transformation,[],[f91])).
fof(f91,plain,(
  (s('type.pair.prod'('type.fcp.cart'(bool,sK6),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'type.bvp_to_word.config')),sK8) = s('type.pair.prod'('type.fcp.cart'(bool,sK6),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'type.bvp_to_word.config')),'const.pair.,_2'(s('type.fcp.cart'(bool,sK6),sK9),s('type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'type.bvp_to_word.config'),'const.pair.,_2'(s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'const.copying_gc.Unused_1'(s('type.num.num',sK10))),s('type.bvp_to_word.config',sK11))))) | s('type.pair.prod'('type.fcp.cart'(bool,sK6),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'type.bvp_to_word.config')),sK8) = s('type.pair.prod'('type.fcp.cart'(bool,sK6),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'type.bvp_to_word.config')),'const.pair.,_2'(s('type.fcp.cart'(bool,sK6),sK12),s('type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'type.bvp_to_word.config'),'const.pair.,_2'(s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'const.copying_gc.ForwardPointer_3'(s('type.num.num',sK13),s('type.wordSem.word_loc'(sK7),sK14),s('type.num.num',sK15))),s('type.bvp_to_word.config',sK16))))) | s('type.pair.prod'('type.fcp.cart'(bool,sK6),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'type.bvp_to_word.config')),sK8) = s('type.pair.prod'('type.fcp.cart'(bool,sK6),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'type.bvp_to_word.config')),'const.pair.,_2'(s('type.fcp.cart'(bool,sK6),sK17),s('type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'type.bvp_to_word.config'),'const.pair.,_2'(s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK7))),sK18),s('type.num.num',sK19),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7))),'const.pair.,_2'(s('type.bvp_to_wordProps.tag',sK20),s('type.list.list'('type.wordSem.word_loc'(sK7)),sK21))))),s('type.bvp_to_word.config',sK22)))))) & ! [X14,X15,X16] : s('type.pair.prod'('type.fcp.cart'(bool,sK6),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'type.bvp_to_word.config')),sK8) != s('type.pair.prod'('type.fcp.cart'(bool,sK6),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'type.bvp_to_word.config')),'const.pair.,_2'(s('type.fcp.cart'(bool,sK6),X14),s('type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'type.bvp_to_word.config'),'const.pair.,_2'(s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'const.copying_gc.Unused_1'(s('type.num.num',X15))),s('type.bvp_to_word.config',X16))))) & ! [X9,X10,X11,X12,X13] : s('type.pair.prod'('type.fcp.cart'(bool,sK6),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'type.bvp_to_word.config')),sK8) != s('type.pair.prod'('type.fcp.cart'(bool,sK6),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'type.bvp_to_word.config')),'const.pair.,_2'(s('type.fcp.cart'(bool,sK6),X9),s('type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'type.bvp_to_word.config'),'const.pair.,_2'(s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'const.copying_gc.ForwardPointer_3'(s('type.num.num',X10),s('type.wordSem.word_loc'(sK7),X11),s('type.num.num',X12))),s('type.bvp_to_word.config',X13))))) & ! [X3,X4,X5,X6,X7,X8] : s('type.pair.prod'('type.fcp.cart'(bool,sK6),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'type.bvp_to_word.config')),sK8) != s('type.pair.prod'('type.fcp.cart'(bool,sK6),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'type.bvp_to_word.config')),'const.pair.,_2'(s('type.fcp.cart'(bool,sK6),X3),s('type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'type.bvp_to_word.config'),'const.pair.,_2'(s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK7))),X4),s('type.num.num',X5),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7))),'const.pair.,_2'(s('type.bvp_to_wordProps.tag',X6),s('type.list.list'('type.wordSem.word_loc'(sK7)),X7))))),s('type.bvp_to_word.config',X8)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK6,sK7,sK8,sK9,sK10,sK11,sK12,sK13,sK14,sK15,sK16,sK17,sK18,sK19,sK20,sK21,sK22])],[f90])).
fof(f90,plain,(
  ? [X0,X1,X2] : ((? [X28,X29,X30] : s('type.pair.prod'('type.fcp.cart'(bool,X0),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config')),X2) = s('type.pair.prod'('type.fcp.cart'(bool,X0),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config')),'const.pair.,_2'(s('type.fcp.cart'(bool,X0),X28),s('type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config'),'const.pair.,_2'(s('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'const.copying_gc.Unused_1'(s('type.num.num',X29))),s('type.bvp_to_word.config',X30))))) | ? [X23,X24,X25,X26,X27] : s('type.pair.prod'('type.fcp.cart'(bool,X0),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config')),X2) = s('type.pair.prod'('type.fcp.cart'(bool,X0),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config')),'const.pair.,_2'(s('type.fcp.cart'(bool,X0),X23),s('type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config'),'const.pair.,_2'(s('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'const.copying_gc.ForwardPointer_3'(s('type.num.num',X24),s('type.wordSem.word_loc'(X1),X25),s('type.num.num',X26))),s('type.bvp_to_word.config',X27))))) | ? [X17,X18,X19,X20,X21,X22] : s('type.pair.prod'('type.fcp.cart'(bool,X0),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config')),X2) = s('type.pair.prod'('type.fcp.cart'(bool,X0),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config')),'const.pair.,_2'(s('type.fcp.cart'(bool,X0),X17),s('type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config'),'const.pair.,_2'(s('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(X1))),X18),s('type.num.num',X19),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))),'const.pair.,_2'(s('type.bvp_to_wordProps.tag',X20),s('type.list.list'('type.wordSem.word_loc'(X1)),X21))))),s('type.bvp_to_word.config',X22)))))) & ! [X14,X15,X16] : s('type.pair.prod'('type.fcp.cart'(bool,X0),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config')),X2) != s('type.pair.prod'('type.fcp.cart'(bool,X0),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config')),'const.pair.,_2'(s('type.fcp.cart'(bool,X0),X14),s('type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config'),'const.pair.,_2'(s('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'const.copying_gc.Unused_1'(s('type.num.num',X15))),s('type.bvp_to_word.config',X16))))) & ! [X9,X10,X11,X12,X13] : s('type.pair.prod'('type.fcp.cart'(bool,X0),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config')),X2) != s('type.pair.prod'('type.fcp.cart'(bool,X0),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config')),'const.pair.,_2'(s('type.fcp.cart'(bool,X0),X9),s('type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config'),'const.pair.,_2'(s('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'const.copying_gc.ForwardPointer_3'(s('type.num.num',X10),s('type.wordSem.word_loc'(X1),X11),s('type.num.num',X12))),s('type.bvp_to_word.config',X13))))) & ! [X3,X4,X5,X6,X7,X8] : s('type.pair.prod'('type.fcp.cart'(bool,X0),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config')),X2) != s('type.pair.prod'('type.fcp.cart'(bool,X0),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config')),'const.pair.,_2'(s('type.fcp.cart'(bool,X0),X3),s('type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config'),'const.pair.,_2'(s('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(X1))),X4),s('type.num.num',X5),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))),'const.pair.,_2'(s('type.bvp_to_wordProps.tag',X6),s('type.list.list'('type.wordSem.word_loc'(X1)),X7))))),s('type.bvp_to_word.config',X8))))))),
  inference(rectify,[],[f65])).
fof(f65,plain,(
  ? [X0,X1,X2] : ((? [X14,X15,X16] : s('type.pair.prod'('type.fcp.cart'(bool,X0),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config')),X2) = s('type.pair.prod'('type.fcp.cart'(bool,X0),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config')),'const.pair.,_2'(s('type.fcp.cart'(bool,X0),X14),s('type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config'),'const.pair.,_2'(s('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'const.copying_gc.Unused_1'(s('type.num.num',X15))),s('type.bvp_to_word.config',X16))))) | ? [X9,X10,X11,X12,X13] : s('type.pair.prod'('type.fcp.cart'(bool,X0),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config')),X2) = s('type.pair.prod'('type.fcp.cart'(bool,X0),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config')),'const.pair.,_2'(s('type.fcp.cart'(bool,X0),X9),s('type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config'),'const.pair.,_2'(s('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'const.copying_gc.ForwardPointer_3'(s('type.num.num',X10),s('type.wordSem.word_loc'(X1),X11),s('type.num.num',X12))),s('type.bvp_to_word.config',X13))))) | ? [X3,X4,X5,X6,X7,X8] : s('type.pair.prod'('type.fcp.cart'(bool,X0),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config')),X2) = s('type.pair.prod'('type.fcp.cart'(bool,X0),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config')),'const.pair.,_2'(s('type.fcp.cart'(bool,X0),X3),s('type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config'),'const.pair.,_2'(s('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(X1))),X4),s('type.num.num',X5),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))),'const.pair.,_2'(s('type.bvp_to_wordProps.tag',X6),s('type.list.list'('type.wordSem.word_loc'(X1)),X7))))),s('type.bvp_to_word.config',X8)))))) & ! [X28,X29,X30] : s('type.pair.prod'('type.fcp.cart'(bool,X0),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config')),X2) != s('type.pair.prod'('type.fcp.cart'(bool,X0),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config')),'const.pair.,_2'(s('type.fcp.cart'(bool,X0),X28),s('type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config'),'const.pair.,_2'(s('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'const.copying_gc.Unused_1'(s('type.num.num',X29))),s('type.bvp_to_word.config',X30))))) & ! [X23,X24,X25,X26,X27] : s('type.pair.prod'('type.fcp.cart'(bool,X0),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config')),X2) != s('type.pair.prod'('type.fcp.cart'(bool,X0),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config')),'const.pair.,_2'(s('type.fcp.cart'(bool,X0),X23),s('type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config'),'const.pair.,_2'(s('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'const.copying_gc.ForwardPointer_3'(s('type.num.num',X24),s('type.wordSem.word_loc'(X1),X25),s('type.num.num',X26))),s('type.bvp_to_word.config',X27))))) & ! [X17,X18,X19,X20,X21,X22] : s('type.pair.prod'('type.fcp.cart'(bool,X0),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config')),X2) != s('type.pair.prod'('type.fcp.cart'(bool,X0),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config')),'const.pair.,_2'(s('type.fcp.cart'(bool,X0),X17),s('type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config'),'const.pair.,_2'(s('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(X1))),X18),s('type.num.num',X19),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))),'const.pair.,_2'(s('type.bvp_to_wordProps.tag',X20),s('type.list.list'('type.wordSem.word_loc'(X1)),X21))))),s('type.bvp_to_word.config',X22))))))),
  inference(flattening,[],[f64])).
fof(f64,plain,(
  ? [X0,X1,X2] : ((? [X14,X15,X16] : s('type.pair.prod'('type.fcp.cart'(bool,X0),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config')),X2) = s('type.pair.prod'('type.fcp.cart'(bool,X0),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config')),'const.pair.,_2'(s('type.fcp.cart'(bool,X0),X14),s('type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config'),'const.pair.,_2'(s('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'const.copying_gc.Unused_1'(s('type.num.num',X15))),s('type.bvp_to_word.config',X16))))) | ? [X9,X10,X11,X12,X13] : s('type.pair.prod'('type.fcp.cart'(bool,X0),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config')),X2) = s('type.pair.prod'('type.fcp.cart'(bool,X0),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config')),'const.pair.,_2'(s('type.fcp.cart'(bool,X0),X9),s('type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config'),'const.pair.,_2'(s('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'const.copying_gc.ForwardPointer_3'(s('type.num.num',X10),s('type.wordSem.word_loc'(X1),X11),s('type.num.num',X12))),s('type.bvp_to_word.config',X13))))) | ? [X3,X4,X5,X6,X7,X8] : s('type.pair.prod'('type.fcp.cart'(bool,X0),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config')),X2) = s('type.pair.prod'('type.fcp.cart'(bool,X0),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config')),'const.pair.,_2'(s('type.fcp.cart'(bool,X0),X3),s('type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config'),'const.pair.,_2'(s('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(X1))),X4),s('type.num.num',X5),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))),'const.pair.,_2'(s('type.bvp_to_wordProps.tag',X6),s('type.list.list'('type.wordSem.word_loc'(X1)),X7))))),s('type.bvp_to_word.config',X8)))))) & (! [X28,X29,X30] : s('type.pair.prod'('type.fcp.cart'(bool,X0),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config')),X2) != s('type.pair.prod'('type.fcp.cart'(bool,X0),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config')),'const.pair.,_2'(s('type.fcp.cart'(bool,X0),X28),s('type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config'),'const.pair.,_2'(s('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'const.copying_gc.Unused_1'(s('type.num.num',X29))),s('type.bvp_to_word.config',X30))))) & ! [X23,X24,X25,X26,X27] : s('type.pair.prod'('type.fcp.cart'(bool,X0),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config')),X2) != s('type.pair.prod'('type.fcp.cart'(bool,X0),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config')),'const.pair.,_2'(s('type.fcp.cart'(bool,X0),X23),s('type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config'),'const.pair.,_2'(s('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'const.copying_gc.ForwardPointer_3'(s('type.num.num',X24),s('type.wordSem.word_loc'(X1),X25),s('type.num.num',X26))),s('type.bvp_to_word.config',X27))))) & ! [X17,X18,X19,X20,X21,X22] : s('type.pair.prod'('type.fcp.cart'(bool,X0),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config')),X2) != s('type.pair.prod'('type.fcp.cart'(bool,X0),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config')),'const.pair.,_2'(s('type.fcp.cart'(bool,X0),X17),s('type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config'),'const.pair.,_2'(s('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(X1))),X18),s('type.num.num',X19),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))),'const.pair.,_2'(s('type.bvp_to_wordProps.tag',X20),s('type.list.list'('type.wordSem.word_loc'(X1)),X21))))),s('type.bvp_to_word.config',X22)))))))),
  inference(ennf_transformation,[],[f29])).
fof(f29,plain,(
  ~! [X0,X1,X2] : ((? [X14,X15,X16] : s('type.pair.prod'('type.fcp.cart'(bool,X0),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config')),X2) = s('type.pair.prod'('type.fcp.cart'(bool,X0),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config')),'const.pair.,_2'(s('type.fcp.cart'(bool,X0),X14),s('type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config'),'const.pair.,_2'(s('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'const.copying_gc.Unused_1'(s('type.num.num',X15))),s('type.bvp_to_word.config',X16))))) | ? [X9,X10,X11,X12,X13] : s('type.pair.prod'('type.fcp.cart'(bool,X0),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config')),X2) = s('type.pair.prod'('type.fcp.cart'(bool,X0),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config')),'const.pair.,_2'(s('type.fcp.cart'(bool,X0),X9),s('type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config'),'const.pair.,_2'(s('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'const.copying_gc.ForwardPointer_3'(s('type.num.num',X10),s('type.wordSem.word_loc'(X1),X11),s('type.num.num',X12))),s('type.bvp_to_word.config',X13))))) | ? [X3,X4,X5,X6,X7,X8] : s('type.pair.prod'('type.fcp.cart'(bool,X0),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config')),X2) = s('type.pair.prod'('type.fcp.cart'(bool,X0),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config')),'const.pair.,_2'(s('type.fcp.cart'(bool,X0),X3),s('type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config'),'const.pair.,_2'(s('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(X1))),X4),s('type.num.num',X5),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))),'const.pair.,_2'(s('type.bvp_to_wordProps.tag',X6),s('type.list.list'('type.wordSem.word_loc'(X1)),X7))))),s('type.bvp_to_word.config',X8)))))) => (? [X28,X29,X30] : s('type.pair.prod'('type.fcp.cart'(bool,X0),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config')),X2) = s('type.pair.prod'('type.fcp.cart'(bool,X0),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config')),'const.pair.,_2'(s('type.fcp.cart'(bool,X0),X28),s('type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config'),'const.pair.,_2'(s('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'const.copying_gc.Unused_1'(s('type.num.num',X29))),s('type.bvp_to_word.config',X30))))) | ? [X23,X24,X25,X26,X27] : s('type.pair.prod'('type.fcp.cart'(bool,X0),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config')),X2) = s('type.pair.prod'('type.fcp.cart'(bool,X0),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config')),'const.pair.,_2'(s('type.fcp.cart'(bool,X0),X23),s('type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config'),'const.pair.,_2'(s('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'const.copying_gc.ForwardPointer_3'(s('type.num.num',X24),s('type.wordSem.word_loc'(X1),X25),s('type.num.num',X26))),s('type.bvp_to_word.config',X27))))) | ? [X17,X18,X19,X20,X21,X22] : s('type.pair.prod'('type.fcp.cart'(bool,X0),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config')),X2) = s('type.pair.prod'('type.fcp.cart'(bool,X0),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config')),'const.pair.,_2'(s('type.fcp.cart'(bool,X0),X17),s('type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config'),'const.pair.,_2'(s('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(X1))),X18),s('type.num.num',X19),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))),'const.pair.,_2'(s('type.bvp_to_wordProps.tag',X20),s('type.list.list'('type.wordSem.word_loc'(X1)),X21))))),s('type.bvp_to_word.config',X22)))))))),
  inference(flattening,[],[f28])).
fof(f28,plain,(
  ~! [X0,X1] : ! [X2] : ((? [X14,X15,X16] : s('type.pair.prod'('type.fcp.cart'(bool,X0),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config')),X2) = s('type.pair.prod'('type.fcp.cart'(bool,X0),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config')),'const.pair.,_2'(s('type.fcp.cart'(bool,X0),X14),s('type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config'),'const.pair.,_2'(s('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'const.copying_gc.Unused_1'(s('type.num.num',X15))),s('type.bvp_to_word.config',X16))))) | ? [X9,X10,X11,X12,X13] : s('type.pair.prod'('type.fcp.cart'(bool,X0),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config')),X2) = s('type.pair.prod'('type.fcp.cart'(bool,X0),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config')),'const.pair.,_2'(s('type.fcp.cart'(bool,X0),X9),s('type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config'),'const.pair.,_2'(s('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'const.copying_gc.ForwardPointer_3'(s('type.num.num',X10),s('type.wordSem.word_loc'(X1),X11),s('type.num.num',X12))),s('type.bvp_to_word.config',X13))))) | ? [X3,X4,X5,X6,X7,X8] : s('type.pair.prod'('type.fcp.cart'(bool,X0),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config')),X2) = s('type.pair.prod'('type.fcp.cart'(bool,X0),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config')),'const.pair.,_2'(s('type.fcp.cart'(bool,X0),X3),s('type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config'),'const.pair.,_2'(s('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(X1))),X4),s('type.num.num',X5),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))),'const.pair.,_2'(s('type.bvp_to_wordProps.tag',X6),s('type.list.list'('type.wordSem.word_loc'(X1)),X7))))),s('type.bvp_to_word.config',X8)))))) => (? [X28,X29,X30] : s('type.pair.prod'('type.fcp.cart'(bool,X0),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config')),X2) = s('type.pair.prod'('type.fcp.cart'(bool,X0),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config')),'const.pair.,_2'(s('type.fcp.cart'(bool,X0),X28),s('type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config'),'const.pair.,_2'(s('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'const.copying_gc.Unused_1'(s('type.num.num',X29))),s('type.bvp_to_word.config',X30))))) | ? [X23,X24,X25,X26,X27] : s('type.pair.prod'('type.fcp.cart'(bool,X0),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config')),X2) = s('type.pair.prod'('type.fcp.cart'(bool,X0),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config')),'const.pair.,_2'(s('type.fcp.cart'(bool,X0),X23),s('type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config'),'const.pair.,_2'(s('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'const.copying_gc.ForwardPointer_3'(s('type.num.num',X24),s('type.wordSem.word_loc'(X1),X25),s('type.num.num',X26))),s('type.bvp_to_word.config',X27))))) | ? [X17,X18,X19,X20,X21,X22] : s('type.pair.prod'('type.fcp.cart'(bool,X0),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config')),X2) = s('type.pair.prod'('type.fcp.cart'(bool,X0),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config')),'const.pair.,_2'(s('type.fcp.cart'(bool,X0),X17),s('type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'type.bvp_to_word.config'),'const.pair.,_2'(s('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(X1))),X18),s('type.num.num',X19),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))),'const.pair.,_2'(s('type.bvp_to_wordProps.tag',X20),s('type.list.list'('type.wordSem.word_loc'(X1)),X21))))),s('type.bvp_to_word.config',X22)))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8] : ((? [X9,X10,X11] : s('type.pair.prod'('type.fcp.cart'(bool,X6),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),'type.bvp_to_word.config')),X8) = s('type.pair.prod'('type.fcp.cart'(bool,X6),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),'type.bvp_to_word.config')),'const.pair.,_2'(s('type.fcp.cart'(bool,X6),X9),s('type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),'type.bvp_to_word.config'),'const.pair.,_2'(s('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),'const.copying_gc.Unused_1'(s('type.num.num',X10))),s('type.bvp_to_word.config',X11))))) | ? [X9,X12,X13,X10,X11] : s('type.pair.prod'('type.fcp.cart'(bool,X6),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),'type.bvp_to_word.config')),X8) = s('type.pair.prod'('type.fcp.cart'(bool,X6),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),'type.bvp_to_word.config')),'const.pair.,_2'(s('type.fcp.cart'(bool,X6),X9),s('type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),'type.bvp_to_word.config'),'const.pair.,_2'(s('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),'const.copying_gc.ForwardPointer_3'(s('type.num.num',X12),s('type.wordSem.word_loc'(X7),X13),s('type.num.num',X10))),s('type.bvp_to_word.config',X11))))) | ? [X9,X14,X10,X15,X16,X11] : s('type.pair.prod'('type.fcp.cart'(bool,X6),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),'type.bvp_to_word.config')),X8) = s('type.pair.prod'('type.fcp.cart'(bool,X6),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),'type.bvp_to_word.config')),'const.pair.,_2'(s('type.fcp.cart'(bool,X6),X9),s('type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),'type.bvp_to_word.config'),'const.pair.,_2'(s('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(X7))),X14),s('type.num.num',X10),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7))),'const.pair.,_2'(s('type.bvp_to_wordProps.tag',X15),s('type.list.list'('type.wordSem.word_loc'(X7)),X16))))),s('type.bvp_to_word.config',X11)))))) => (? [X9,X10,X11] : s('type.pair.prod'('type.fcp.cart'(bool,X6),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),'type.bvp_to_word.config')),X8) = s('type.pair.prod'('type.fcp.cart'(bool,X6),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),'type.bvp_to_word.config')),'const.pair.,_2'(s('type.fcp.cart'(bool,X6),X9),s('type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),'type.bvp_to_word.config'),'const.pair.,_2'(s('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),'const.copying_gc.Unused_1'(s('type.num.num',X10))),s('type.bvp_to_word.config',X11))))) | ? [X9,X12,X13,X10,X11] : s('type.pair.prod'('type.fcp.cart'(bool,X6),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),'type.bvp_to_word.config')),X8) = s('type.pair.prod'('type.fcp.cart'(bool,X6),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),'type.bvp_to_word.config')),'const.pair.,_2'(s('type.fcp.cart'(bool,X6),X9),s('type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),'type.bvp_to_word.config'),'const.pair.,_2'(s('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),'const.copying_gc.ForwardPointer_3'(s('type.num.num',X12),s('type.wordSem.word_loc'(X7),X13),s('type.num.num',X10))),s('type.bvp_to_word.config',X11))))) | ? [X9,X14,X10,X15,X16,X11] : s('type.pair.prod'('type.fcp.cart'(bool,X6),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),'type.bvp_to_word.config')),X8) = s('type.pair.prod'('type.fcp.cart'(bool,X6),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),'type.bvp_to_word.config')),'const.pair.,_2'(s('type.fcp.cart'(bool,X6),X9),s('type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),'type.bvp_to_word.config'),'const.pair.,_2'(s('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(X7))),X14),s('type.num.num',X10),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7))),'const.pair.,_2'(s('type.bvp_to_wordProps.tag',X15),s('type.list.list'('type.wordSem.word_loc'(X7)),X16))))),s('type.bvp_to_word.config',X11)))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8] : ((? [X9,X10,X11] : s('type.pair.prod'('type.fcp.cart'(bool,X6),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),'type.bvp_to_word.config')),X8) = s('type.pair.prod'('type.fcp.cart'(bool,X6),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),'type.bvp_to_word.config')),'const.pair.,_2'(s('type.fcp.cart'(bool,X6),X9),s('type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),'type.bvp_to_word.config'),'const.pair.,_2'(s('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),'const.copying_gc.Unused_1'(s('type.num.num',X10))),s('type.bvp_to_word.config',X11))))) | ? [X9,X12,X13,X10,X11] : s('type.pair.prod'('type.fcp.cart'(bool,X6),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),'type.bvp_to_word.config')),X8) = s('type.pair.prod'('type.fcp.cart'(bool,X6),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),'type.bvp_to_word.config')),'const.pair.,_2'(s('type.fcp.cart'(bool,X6),X9),s('type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),'type.bvp_to_word.config'),'const.pair.,_2'(s('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),'const.copying_gc.ForwardPointer_3'(s('type.num.num',X12),s('type.wordSem.word_loc'(X7),X13),s('type.num.num',X10))),s('type.bvp_to_word.config',X11))))) | ? [X9,X14,X10,X15,X16,X11] : s('type.pair.prod'('type.fcp.cart'(bool,X6),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),'type.bvp_to_word.config')),X8) = s('type.pair.prod'('type.fcp.cart'(bool,X6),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),'type.bvp_to_word.config')),'const.pair.,_2'(s('type.fcp.cart'(bool,X6),X9),s('type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),'type.bvp_to_word.config'),'const.pair.,_2'(s('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(X7))),X14),s('type.num.num',X10),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7))),'const.pair.,_2'(s('type.bvp_to_wordProps.tag',X15),s('type.list.list'('type.wordSem.word_loc'(X7)),X16))))),s('type.bvp_to_word.config',X11)))))) => (? [X9,X10,X11] : s('type.pair.prod'('type.fcp.cart'(bool,X6),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),'type.bvp_to_word.config')),X8) = s('type.pair.prod'('type.fcp.cart'(bool,X6),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),'type.bvp_to_word.config')),'const.pair.,_2'(s('type.fcp.cart'(bool,X6),X9),s('type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),'type.bvp_to_word.config'),'const.pair.,_2'(s('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),'const.copying_gc.Unused_1'(s('type.num.num',X10))),s('type.bvp_to_word.config',X11))))) | ? [X9,X12,X13,X10,X11] : s('type.pair.prod'('type.fcp.cart'(bool,X6),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),'type.bvp_to_word.config')),X8) = s('type.pair.prod'('type.fcp.cart'(bool,X6),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),'type.bvp_to_word.config')),'const.pair.,_2'(s('type.fcp.cart'(bool,X6),X9),s('type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),'type.bvp_to_word.config'),'const.pair.,_2'(s('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),'const.copying_gc.ForwardPointer_3'(s('type.num.num',X12),s('type.wordSem.word_loc'(X7),X13),s('type.num.num',X10))),s('type.bvp_to_word.config',X11))))) | ? [X9,X14,X10,X15,X16,X11] : s('type.pair.prod'('type.fcp.cart'(bool,X6),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),'type.bvp_to_word.config')),X8) = s('type.pair.prod'('type.fcp.cart'(bool,X6),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),'type.bvp_to_word.config')),'const.pair.,_2'(s('type.fcp.cart'(bool,X6),X9),s('type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),'type.bvp_to_word.config'),'const.pair.,_2'(s('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(X7))),X14),s('type.num.num',X10),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7))),'const.pair.,_2'(s('type.bvp_to_wordProps.tag',X15),s('type.list.list'('type.wordSem.word_loc'(X7)),X16))))),s('type.bvp_to_word.config',X11)))))))),
  file('thm.bvp_to_wordProps.bvp_to_wordProps_|49|75_prove_ltb','thm.bvp_to_wordProps.bvp_to_wordProps_|49|75_prove_ltb')).
fof(f1843,plain,(
  $false | $spl0),
  inference(subsumption_resolution,[],[f229,f134])).
fof(f134,plain,(
  ( ! [X14,X15,X16] : (s('type.pair.prod'('type.fcp.cart'(bool,sK6),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'type.bvp_to_word.config')),sK8) != s('type.pair.prod'('type.fcp.cart'(bool,sK6),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'type.bvp_to_word.config')),'const.pair.,_2'(s('type.fcp.cart'(bool,sK6),X14),s('type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'type.bvp_to_word.config'),'const.pair.,_2'(s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'const.copying_gc.Unused_1'(s('type.num.num',X15))),s('type.bvp_to_word.config',X16)))))) )),
  inference(cnf_transformation,[],[f91])).
fof(f229,plain,(
  s('type.pair.prod'('type.fcp.cart'(bool,sK6),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'type.bvp_to_word.config')),sK8) = s('type.pair.prod'('type.fcp.cart'(bool,sK6),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'type.bvp_to_word.config')),'const.pair.,_2'(s('type.fcp.cart'(bool,sK6),sK9),s('type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'type.bvp_to_word.config'),'const.pair.,_2'(s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'const.copying_gc.Unused_1'(s('type.num.num',sK10))),s('type.bvp_to_word.config',sK11))))) | $spl0),
  inference(cnf_transformation,[],[f229_D])).
fof(f229_D,plain,(
  s('type.pair.prod'('type.fcp.cart'(bool,sK6),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'type.bvp_to_word.config')),sK8) = s('type.pair.prod'('type.fcp.cart'(bool,sK6),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'type.bvp_to_word.config')),'const.pair.,_2'(s('type.fcp.cart'(bool,sK6),sK9),s('type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'type.bvp_to_word.config'),'const.pair.,_2'(s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'const.copying_gc.Unused_1'(s('type.num.num',sK10))),s('type.bvp_to_word.config',sK11))))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f231,plain,(
  s('type.pair.prod'('type.fcp.cart'(bool,sK6),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'type.bvp_to_word.config')),sK8) = s('type.pair.prod'('type.fcp.cart'(bool,sK6),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'type.bvp_to_word.config')),'const.pair.,_2'(s('type.fcp.cart'(bool,sK6),sK12),s('type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'type.bvp_to_word.config'),'const.pair.,_2'(s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'const.copying_gc.ForwardPointer_3'(s('type.num.num',sK13),s('type.wordSem.word_loc'(sK7),sK14),s('type.num.num',sK15))),s('type.bvp_to_word.config',sK16))))) | $spl2),
  inference(cnf_transformation,[],[f231_D])).
fof(f231_D,plain,(
  s('type.pair.prod'('type.fcp.cart'(bool,sK6),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'type.bvp_to_word.config')),sK8) = s('type.pair.prod'('type.fcp.cart'(bool,sK6),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'type.bvp_to_word.config')),'const.pair.,_2'(s('type.fcp.cart'(bool,sK6),sK12),s('type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'type.bvp_to_word.config'),'const.pair.,_2'(s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'const.copying_gc.ForwardPointer_3'(s('type.num.num',sK13),s('type.wordSem.word_loc'(sK7),sK14),s('type.num.num',sK15))),s('type.bvp_to_word.config',sK16))))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f233,plain,(
  s('type.pair.prod'('type.fcp.cart'(bool,sK6),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'type.bvp_to_word.config')),sK8) = s('type.pair.prod'('type.fcp.cart'(bool,sK6),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'type.bvp_to_word.config')),'const.pair.,_2'(s('type.fcp.cart'(bool,sK6),sK17),s('type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'type.bvp_to_word.config'),'const.pair.,_2'(s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK7))),sK18),s('type.num.num',sK19),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7))),'const.pair.,_2'(s('type.bvp_to_wordProps.tag',sK20),s('type.list.list'('type.wordSem.word_loc'(sK7)),sK21))))),s('type.bvp_to_word.config',sK22))))) | $spl4),
  inference(cnf_transformation,[],[f233_D])).
fof(f233_D,plain,(
  s('type.pair.prod'('type.fcp.cart'(bool,sK6),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'type.bvp_to_word.config')),sK8) = s('type.pair.prod'('type.fcp.cart'(bool,sK6),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'type.bvp_to_word.config')),'const.pair.,_2'(s('type.fcp.cart'(bool,sK6),sK17),s('type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'type.bvp_to_word.config'),'const.pair.,_2'(s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK7))),sK18),s('type.num.num',sK19),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7))),'const.pair.,_2'(s('type.bvp_to_wordProps.tag',sK20),s('type.list.list'('type.wordSem.word_loc'(sK7)),sK21))))),s('type.bvp_to_word.config',sK22))))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f133,plain,(
  s('type.pair.prod'('type.fcp.cart'(bool,sK6),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'type.bvp_to_word.config')),sK8) = s('type.pair.prod'('type.fcp.cart'(bool,sK6),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'type.bvp_to_word.config')),'const.pair.,_2'(s('type.fcp.cart'(bool,sK6),sK17),s('type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'type.bvp_to_word.config'),'const.pair.,_2'(s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'const.copying_gc.DataElement_3'(s('type.list.list'('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK7))),sK18),s('type.num.num',sK19),s('type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7))),'const.pair.,_2'(s('type.bvp_to_wordProps.tag',sK20),s('type.list.list'('type.wordSem.word_loc'(sK7)),sK21))))),s('type.bvp_to_word.config',sK22))))) | s('type.pair.prod'('type.fcp.cart'(bool,sK6),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'type.bvp_to_word.config')),sK8) = s('type.pair.prod'('type.fcp.cart'(bool,sK6),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'type.bvp_to_word.config')),'const.pair.,_2'(s('type.fcp.cart'(bool,sK6),sK12),s('type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'type.bvp_to_word.config'),'const.pair.,_2'(s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'const.copying_gc.ForwardPointer_3'(s('type.num.num',sK13),s('type.wordSem.word_loc'(sK7),sK14),s('type.num.num',sK15))),s('type.bvp_to_word.config',sK16))))) | s('type.pair.prod'('type.fcp.cart'(bool,sK6),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'type.bvp_to_word.config')),sK8) = s('type.pair.prod'('type.fcp.cart'(bool,sK6),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'type.bvp_to_word.config')),'const.pair.,_2'(s('type.fcp.cart'(bool,sK6),sK9),s('type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'type.bvp_to_word.config'),'const.pair.,_2'(s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'const.copying_gc.Unused_1'(s('type.num.num',sK10))),s('type.bvp_to_word.config',sK11)))))),
  inference(cnf_transformation,[],[f91])).
fof(f2234,plain,(
  $false | $spl2),
  inference(subsumption_resolution,[],[f231,f135])).
fof(f135,plain,(
  ( ! [X12,X10,X13,X11,X9] : (s('type.pair.prod'('type.fcp.cart'(bool,sK6),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'type.bvp_to_word.config')),sK8) != s('type.pair.prod'('type.fcp.cart'(bool,sK6),'type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'type.bvp_to_word.config')),'const.pair.,_2'(s('type.fcp.cart'(bool,sK6),X9),s('type.pair.prod'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'type.bvp_to_word.config'),'const.pair.,_2'(s('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK7)))),'const.copying_gc.ForwardPointer_3'(s('type.num.num',X10),s('type.wordSem.word_loc'(sK7),X11),s('type.num.num',X12))),s('type.bvp_to_word.config',X13)))))) )),
  inference(cnf_transformation,[],[f91])).
% SZS output end Proof for thm.bvp_to_wordProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 186
% Passive clauses: 898
% Generated clauses: 2095
% Final active clauses: 186
% Final passive clauses: 648
% Input formulas: 26
% Initial clauses: 94
% 
% Duplicate literals: 39
% Trivial inequalities: 13
% Fw subsumption resolutions: 144
% 
% Simple tautologies: 61
% Equational tautologies: 15
% Forward subsumptions: 909
% 
% Binary resolution: 1410
% Factoring: 204
% Forward superposition: 106
% Backward superposition: 51
% Self superposition: 2
% Equality factoring: 2
% Equality resolution: 8
% 
% Split clauses: 43
% Split components: 88
% SAT solver clauses: 81
% SAT solver unit clauses: 9
% SAT solver binary clauses: 29
% SAT solver learnt clauses: 1
% 
% Sat splits: 43
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 80
% TWLsolver calls for satisfiability: 60
% 
% Memory used [KB]: 1535
% Time elapsed: 0.103 s
% ------------------------------
% ------------------------------
% Success in time 0.112 s
