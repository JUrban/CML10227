Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.bvp_to_wordProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.bvp_to_wordProps
% SZS output start Proof for thm.bvp_to_wordProps
fof(f2057,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f2056,f133,f230,f228,f1840])).
fof(f1840,plain,(
  $false | $spl2),
  inference(subsumption_resolution,[],[f230,f135])).
fof(f135,plain,(
  ( ! [X6,X4,X5] : (s('type.pair.prod'('type.copying_gc.heap_address'(sK6),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(sK7,sK8)))),sK9) != s('type.pair.prod'('type.copying_gc.heap_address'(sK6),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(sK7,sK8)))),'const.pair.,_2'(s('type.copying_gc.heap_address'(sK6),'const.copying_gc.Data_1'(s(sK6,X4))),s('type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(sK7,sK8))),'const.pair.,_2'(s('type.num.num',X5),s('type.list.list'('type.copying_gc.heap_element'(sK7,sK8)),X6)))))) )),
  inference(cnf_transformation,[],[f91])).
fof(f91,plain,(
  (s('type.pair.prod'('type.copying_gc.heap_address'(sK6),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(sK7,sK8)))),sK9) = s('type.pair.prod'('type.copying_gc.heap_address'(sK6),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(sK7,sK8)))),'const.pair.,_2'(s('type.copying_gc.heap_address'(sK6),'const.copying_gc.Pointer_2'(s('type.num.num',sK10),s(sK6,sK11))),s('type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(sK7,sK8))),'const.pair.,_2'(s('type.num.num',sK12),s('type.list.list'('type.copying_gc.heap_element'(sK7,sK8)),sK13))))) | s('type.pair.prod'('type.copying_gc.heap_address'(sK6),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(sK7,sK8)))),sK9) = s('type.pair.prod'('type.copying_gc.heap_address'(sK6),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(sK7,sK8)))),'const.pair.,_2'(s('type.copying_gc.heap_address'(sK6),'const.copying_gc.Data_1'(s(sK6,sK14))),s('type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(sK7,sK8))),'const.pair.,_2'(s('type.num.num',sK15),s('type.list.list'('type.copying_gc.heap_element'(sK7,sK8)),sK16)))))) & ! [X7,X8,X9,X10] : s('type.pair.prod'('type.copying_gc.heap_address'(sK6),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(sK7,sK8)))),sK9) != s('type.pair.prod'('type.copying_gc.heap_address'(sK6),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(sK7,sK8)))),'const.pair.,_2'(s('type.copying_gc.heap_address'(sK6),'const.copying_gc.Pointer_2'(s('type.num.num',X7),s(sK6,X8))),s('type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(sK7,sK8))),'const.pair.,_2'(s('type.num.num',X9),s('type.list.list'('type.copying_gc.heap_element'(sK7,sK8)),X10))))) & ! [X4,X5,X6] : s('type.pair.prod'('type.copying_gc.heap_address'(sK6),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(sK7,sK8)))),sK9) != s('type.pair.prod'('type.copying_gc.heap_address'(sK6),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(sK7,sK8)))),'const.pair.,_2'(s('type.copying_gc.heap_address'(sK6),'const.copying_gc.Data_1'(s(sK6,X4))),s('type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(sK7,sK8))),'const.pair.,_2'(s('type.num.num',X5),s('type.list.list'('type.copying_gc.heap_element'(sK7,sK8)),X6)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK6,sK7,sK8,sK9,sK10,sK11,sK12,sK13,sK14,sK15,sK16])],[f90])).
fof(f90,plain,(
  ? [X0,X1,X2,X3] : ((? [X14,X15,X16,X17] : s('type.pair.prod'('type.copying_gc.heap_address'(X0),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X1,X2)))),X3) = s('type.pair.prod'('type.copying_gc.heap_address'(X0),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X1,X2)))),'const.pair.,_2'(s('type.copying_gc.heap_address'(X0),'const.copying_gc.Pointer_2'(s('type.num.num',X14),s(X0,X15))),s('type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X1,X2))),'const.pair.,_2'(s('type.num.num',X16),s('type.list.list'('type.copying_gc.heap_element'(X1,X2)),X17))))) | ? [X11,X12,X13] : s('type.pair.prod'('type.copying_gc.heap_address'(X0),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X1,X2)))),X3) = s('type.pair.prod'('type.copying_gc.heap_address'(X0),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X1,X2)))),'const.pair.,_2'(s('type.copying_gc.heap_address'(X0),'const.copying_gc.Data_1'(s(X0,X11))),s('type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X1,X2))),'const.pair.,_2'(s('type.num.num',X12),s('type.list.list'('type.copying_gc.heap_element'(X1,X2)),X13)))))) & ! [X7,X8,X9,X10] : s('type.pair.prod'('type.copying_gc.heap_address'(X0),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X1,X2)))),X3) != s('type.pair.prod'('type.copying_gc.heap_address'(X0),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X1,X2)))),'const.pair.,_2'(s('type.copying_gc.heap_address'(X0),'const.copying_gc.Pointer_2'(s('type.num.num',X7),s(X0,X8))),s('type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X1,X2))),'const.pair.,_2'(s('type.num.num',X9),s('type.list.list'('type.copying_gc.heap_element'(X1,X2)),X10))))) & ! [X4,X5,X6] : s('type.pair.prod'('type.copying_gc.heap_address'(X0),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X1,X2)))),X3) != s('type.pair.prod'('type.copying_gc.heap_address'(X0),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X1,X2)))),'const.pair.,_2'(s('type.copying_gc.heap_address'(X0),'const.copying_gc.Data_1'(s(X0,X4))),s('type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X1,X2))),'const.pair.,_2'(s('type.num.num',X5),s('type.list.list'('type.copying_gc.heap_element'(X1,X2)),X6))))))),
  inference(rectify,[],[f65])).
fof(f65,plain,(
  ? [X0,X1,X2,X3] : ((? [X7,X8,X9,X10] : s('type.pair.prod'('type.copying_gc.heap_address'(X0),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X1,X2)))),X3) = s('type.pair.prod'('type.copying_gc.heap_address'(X0),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X1,X2)))),'const.pair.,_2'(s('type.copying_gc.heap_address'(X0),'const.copying_gc.Pointer_2'(s('type.num.num',X7),s(X0,X8))),s('type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X1,X2))),'const.pair.,_2'(s('type.num.num',X9),s('type.list.list'('type.copying_gc.heap_element'(X1,X2)),X10))))) | ? [X4,X5,X6] : s('type.pair.prod'('type.copying_gc.heap_address'(X0),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X1,X2)))),X3) = s('type.pair.prod'('type.copying_gc.heap_address'(X0),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X1,X2)))),'const.pair.,_2'(s('type.copying_gc.heap_address'(X0),'const.copying_gc.Data_1'(s(X0,X4))),s('type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X1,X2))),'const.pair.,_2'(s('type.num.num',X5),s('type.list.list'('type.copying_gc.heap_element'(X1,X2)),X6)))))) & ! [X14,X15,X16,X17] : s('type.pair.prod'('type.copying_gc.heap_address'(X0),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X1,X2)))),X3) != s('type.pair.prod'('type.copying_gc.heap_address'(X0),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X1,X2)))),'const.pair.,_2'(s('type.copying_gc.heap_address'(X0),'const.copying_gc.Pointer_2'(s('type.num.num',X14),s(X0,X15))),s('type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X1,X2))),'const.pair.,_2'(s('type.num.num',X16),s('type.list.list'('type.copying_gc.heap_element'(X1,X2)),X17))))) & ! [X11,X12,X13] : s('type.pair.prod'('type.copying_gc.heap_address'(X0),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X1,X2)))),X3) != s('type.pair.prod'('type.copying_gc.heap_address'(X0),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X1,X2)))),'const.pair.,_2'(s('type.copying_gc.heap_address'(X0),'const.copying_gc.Data_1'(s(X0,X11))),s('type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X1,X2))),'const.pair.,_2'(s('type.num.num',X12),s('type.list.list'('type.copying_gc.heap_element'(X1,X2)),X13))))))),
  inference(flattening,[],[f64])).
fof(f64,plain,(
  ? [X0,X1,X2,X3] : ((? [X7,X8,X9,X10] : s('type.pair.prod'('type.copying_gc.heap_address'(X0),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X1,X2)))),X3) = s('type.pair.prod'('type.copying_gc.heap_address'(X0),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X1,X2)))),'const.pair.,_2'(s('type.copying_gc.heap_address'(X0),'const.copying_gc.Pointer_2'(s('type.num.num',X7),s(X0,X8))),s('type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X1,X2))),'const.pair.,_2'(s('type.num.num',X9),s('type.list.list'('type.copying_gc.heap_element'(X1,X2)),X10))))) | ? [X4,X5,X6] : s('type.pair.prod'('type.copying_gc.heap_address'(X0),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X1,X2)))),X3) = s('type.pair.prod'('type.copying_gc.heap_address'(X0),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X1,X2)))),'const.pair.,_2'(s('type.copying_gc.heap_address'(X0),'const.copying_gc.Data_1'(s(X0,X4))),s('type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X1,X2))),'const.pair.,_2'(s('type.num.num',X5),s('type.list.list'('type.copying_gc.heap_element'(X1,X2)),X6)))))) & (! [X14,X15,X16,X17] : s('type.pair.prod'('type.copying_gc.heap_address'(X0),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X1,X2)))),X3) != s('type.pair.prod'('type.copying_gc.heap_address'(X0),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X1,X2)))),'const.pair.,_2'(s('type.copying_gc.heap_address'(X0),'const.copying_gc.Pointer_2'(s('type.num.num',X14),s(X0,X15))),s('type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X1,X2))),'const.pair.,_2'(s('type.num.num',X16),s('type.list.list'('type.copying_gc.heap_element'(X1,X2)),X17))))) & ! [X11,X12,X13] : s('type.pair.prod'('type.copying_gc.heap_address'(X0),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X1,X2)))),X3) != s('type.pair.prod'('type.copying_gc.heap_address'(X0),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X1,X2)))),'const.pair.,_2'(s('type.copying_gc.heap_address'(X0),'const.copying_gc.Data_1'(s(X0,X11))),s('type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X1,X2))),'const.pair.,_2'(s('type.num.num',X12),s('type.list.list'('type.copying_gc.heap_element'(X1,X2)),X13)))))))),
  inference(ennf_transformation,[],[f29])).
fof(f29,plain,(
  ~! [X0,X1,X2,X3] : ((? [X7,X8,X9,X10] : s('type.pair.prod'('type.copying_gc.heap_address'(X0),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X1,X2)))),X3) = s('type.pair.prod'('type.copying_gc.heap_address'(X0),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X1,X2)))),'const.pair.,_2'(s('type.copying_gc.heap_address'(X0),'const.copying_gc.Pointer_2'(s('type.num.num',X7),s(X0,X8))),s('type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X1,X2))),'const.pair.,_2'(s('type.num.num',X9),s('type.list.list'('type.copying_gc.heap_element'(X1,X2)),X10))))) | ? [X4,X5,X6] : s('type.pair.prod'('type.copying_gc.heap_address'(X0),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X1,X2)))),X3) = s('type.pair.prod'('type.copying_gc.heap_address'(X0),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X1,X2)))),'const.pair.,_2'(s('type.copying_gc.heap_address'(X0),'const.copying_gc.Data_1'(s(X0,X4))),s('type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X1,X2))),'const.pair.,_2'(s('type.num.num',X5),s('type.list.list'('type.copying_gc.heap_element'(X1,X2)),X6)))))) => (? [X14,X15,X16,X17] : s('type.pair.prod'('type.copying_gc.heap_address'(X0),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X1,X2)))),X3) = s('type.pair.prod'('type.copying_gc.heap_address'(X0),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X1,X2)))),'const.pair.,_2'(s('type.copying_gc.heap_address'(X0),'const.copying_gc.Pointer_2'(s('type.num.num',X14),s(X0,X15))),s('type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X1,X2))),'const.pair.,_2'(s('type.num.num',X16),s('type.list.list'('type.copying_gc.heap_element'(X1,X2)),X17))))) | ? [X11,X12,X13] : s('type.pair.prod'('type.copying_gc.heap_address'(X0),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X1,X2)))),X3) = s('type.pair.prod'('type.copying_gc.heap_address'(X0),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X1,X2)))),'const.pair.,_2'(s('type.copying_gc.heap_address'(X0),'const.copying_gc.Data_1'(s(X0,X11))),s('type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X1,X2))),'const.pair.,_2'(s('type.num.num',X12),s('type.list.list'('type.copying_gc.heap_element'(X1,X2)),X13)))))))),
  inference(flattening,[],[f28])).
fof(f28,plain,(
  ~! [X0,X1,X2] : ! [X3] : ((? [X7,X8,X9,X10] : s('type.pair.prod'('type.copying_gc.heap_address'(X0),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X1,X2)))),X3) = s('type.pair.prod'('type.copying_gc.heap_address'(X0),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X1,X2)))),'const.pair.,_2'(s('type.copying_gc.heap_address'(X0),'const.copying_gc.Pointer_2'(s('type.num.num',X7),s(X0,X8))),s('type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X1,X2))),'const.pair.,_2'(s('type.num.num',X9),s('type.list.list'('type.copying_gc.heap_element'(X1,X2)),X10))))) | ? [X4,X5,X6] : s('type.pair.prod'('type.copying_gc.heap_address'(X0),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X1,X2)))),X3) = s('type.pair.prod'('type.copying_gc.heap_address'(X0),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X1,X2)))),'const.pair.,_2'(s('type.copying_gc.heap_address'(X0),'const.copying_gc.Data_1'(s(X0,X4))),s('type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X1,X2))),'const.pair.,_2'(s('type.num.num',X5),s('type.list.list'('type.copying_gc.heap_element'(X1,X2)),X6)))))) => (? [X14,X15,X16,X17] : s('type.pair.prod'('type.copying_gc.heap_address'(X0),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X1,X2)))),X3) = s('type.pair.prod'('type.copying_gc.heap_address'(X0),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X1,X2)))),'const.pair.,_2'(s('type.copying_gc.heap_address'(X0),'const.copying_gc.Pointer_2'(s('type.num.num',X14),s(X0,X15))),s('type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X1,X2))),'const.pair.,_2'(s('type.num.num',X16),s('type.list.list'('type.copying_gc.heap_element'(X1,X2)),X17))))) | ? [X11,X12,X13] : s('type.pair.prod'('type.copying_gc.heap_address'(X0),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X1,X2)))),X3) = s('type.pair.prod'('type.copying_gc.heap_address'(X0),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X1,X2)))),'const.pair.,_2'(s('type.copying_gc.heap_address'(X0),'const.copying_gc.Data_1'(s(X0,X11))),s('type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X1,X2))),'const.pair.,_2'(s('type.num.num',X12),s('type.list.list'('type.copying_gc.heap_element'(X1,X2)),X13)))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8] : ! [X9] : ((? [X10,X11,X12,X13] : s('type.pair.prod'('type.copying_gc.heap_address'(X6),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X7,X8)))),X9) = s('type.pair.prod'('type.copying_gc.heap_address'(X6),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X7,X8)))),'const.pair.,_2'(s('type.copying_gc.heap_address'(X6),'const.copying_gc.Pointer_2'(s('type.num.num',X10),s(X6,X11))),s('type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X7,X8))),'const.pair.,_2'(s('type.num.num',X12),s('type.list.list'('type.copying_gc.heap_element'(X7,X8)),X13))))) | ? [X14,X15,X16] : s('type.pair.prod'('type.copying_gc.heap_address'(X6),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X7,X8)))),X9) = s('type.pair.prod'('type.copying_gc.heap_address'(X6),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X7,X8)))),'const.pair.,_2'(s('type.copying_gc.heap_address'(X6),'const.copying_gc.Data_1'(s(X6,X14))),s('type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X7,X8))),'const.pair.,_2'(s('type.num.num',X15),s('type.list.list'('type.copying_gc.heap_element'(X7,X8)),X16)))))) => (? [X10,X11,X12,X13] : s('type.pair.prod'('type.copying_gc.heap_address'(X6),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X7,X8)))),X9) = s('type.pair.prod'('type.copying_gc.heap_address'(X6),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X7,X8)))),'const.pair.,_2'(s('type.copying_gc.heap_address'(X6),'const.copying_gc.Pointer_2'(s('type.num.num',X10),s(X6,X11))),s('type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X7,X8))),'const.pair.,_2'(s('type.num.num',X12),s('type.list.list'('type.copying_gc.heap_element'(X7,X8)),X13))))) | ? [X14,X15,X16] : s('type.pair.prod'('type.copying_gc.heap_address'(X6),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X7,X8)))),X9) = s('type.pair.prod'('type.copying_gc.heap_address'(X6),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X7,X8)))),'const.pair.,_2'(s('type.copying_gc.heap_address'(X6),'const.copying_gc.Data_1'(s(X6,X14))),s('type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X7,X8))),'const.pair.,_2'(s('type.num.num',X15),s('type.list.list'('type.copying_gc.heap_element'(X7,X8)),X16)))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8] : ! [X9] : ((? [X10,X11,X12,X13] : s('type.pair.prod'('type.copying_gc.heap_address'(X6),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X7,X8)))),X9) = s('type.pair.prod'('type.copying_gc.heap_address'(X6),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X7,X8)))),'const.pair.,_2'(s('type.copying_gc.heap_address'(X6),'const.copying_gc.Pointer_2'(s('type.num.num',X10),s(X6,X11))),s('type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X7,X8))),'const.pair.,_2'(s('type.num.num',X12),s('type.list.list'('type.copying_gc.heap_element'(X7,X8)),X13))))) | ? [X14,X15,X16] : s('type.pair.prod'('type.copying_gc.heap_address'(X6),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X7,X8)))),X9) = s('type.pair.prod'('type.copying_gc.heap_address'(X6),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X7,X8)))),'const.pair.,_2'(s('type.copying_gc.heap_address'(X6),'const.copying_gc.Data_1'(s(X6,X14))),s('type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X7,X8))),'const.pair.,_2'(s('type.num.num',X15),s('type.list.list'('type.copying_gc.heap_element'(X7,X8)),X16)))))) => (? [X10,X11,X12,X13] : s('type.pair.prod'('type.copying_gc.heap_address'(X6),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X7,X8)))),X9) = s('type.pair.prod'('type.copying_gc.heap_address'(X6),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X7,X8)))),'const.pair.,_2'(s('type.copying_gc.heap_address'(X6),'const.copying_gc.Pointer_2'(s('type.num.num',X10),s(X6,X11))),s('type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X7,X8))),'const.pair.,_2'(s('type.num.num',X12),s('type.list.list'('type.copying_gc.heap_element'(X7,X8)),X13))))) | ? [X14,X15,X16] : s('type.pair.prod'('type.copying_gc.heap_address'(X6),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X7,X8)))),X9) = s('type.pair.prod'('type.copying_gc.heap_address'(X6),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X7,X8)))),'const.pair.,_2'(s('type.copying_gc.heap_address'(X6),'const.copying_gc.Data_1'(s(X6,X14))),s('type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(X7,X8))),'const.pair.,_2'(s('type.num.num',X15),s('type.list.list'('type.copying_gc.heap_element'(X7,X8)),X16)))))))),
  file('thm.bvp_to_wordProps.bvp_to_wordProps_|49|34_prove_ltb','thm.bvp_to_wordProps.bvp_to_wordProps_|49|34_prove_ltb')).
fof(f228,plain,(
  s('type.pair.prod'('type.copying_gc.heap_address'(sK6),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(sK7,sK8)))),sK9) = s('type.pair.prod'('type.copying_gc.heap_address'(sK6),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(sK7,sK8)))),'const.pair.,_2'(s('type.copying_gc.heap_address'(sK6),'const.copying_gc.Pointer_2'(s('type.num.num',sK10),s(sK6,sK11))),s('type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(sK7,sK8))),'const.pair.,_2'(s('type.num.num',sK12),s('type.list.list'('type.copying_gc.heap_element'(sK7,sK8)),sK13))))) | $spl0),
  inference(cnf_transformation,[],[f228_D])).
fof(f228_D,plain,(
  s('type.pair.prod'('type.copying_gc.heap_address'(sK6),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(sK7,sK8)))),sK9) = s('type.pair.prod'('type.copying_gc.heap_address'(sK6),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(sK7,sK8)))),'const.pair.,_2'(s('type.copying_gc.heap_address'(sK6),'const.copying_gc.Pointer_2'(s('type.num.num',sK10),s(sK6,sK11))),s('type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(sK7,sK8))),'const.pair.,_2'(s('type.num.num',sK12),s('type.list.list'('type.copying_gc.heap_element'(sK7,sK8)),sK13))))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f230,plain,(
  s('type.pair.prod'('type.copying_gc.heap_address'(sK6),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(sK7,sK8)))),sK9) = s('type.pair.prod'('type.copying_gc.heap_address'(sK6),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(sK7,sK8)))),'const.pair.,_2'(s('type.copying_gc.heap_address'(sK6),'const.copying_gc.Data_1'(s(sK6,sK14))),s('type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(sK7,sK8))),'const.pair.,_2'(s('type.num.num',sK15),s('type.list.list'('type.copying_gc.heap_element'(sK7,sK8)),sK16))))) | $spl2),
  inference(cnf_transformation,[],[f230_D])).
fof(f230_D,plain,(
  s('type.pair.prod'('type.copying_gc.heap_address'(sK6),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(sK7,sK8)))),sK9) = s('type.pair.prod'('type.copying_gc.heap_address'(sK6),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(sK7,sK8)))),'const.pair.,_2'(s('type.copying_gc.heap_address'(sK6),'const.copying_gc.Data_1'(s(sK6,sK14))),s('type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(sK7,sK8))),'const.pair.,_2'(s('type.num.num',sK15),s('type.list.list'('type.copying_gc.heap_element'(sK7,sK8)),sK16))))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f133,plain,(
  s('type.pair.prod'('type.copying_gc.heap_address'(sK6),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(sK7,sK8)))),sK9) = s('type.pair.prod'('type.copying_gc.heap_address'(sK6),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(sK7,sK8)))),'const.pair.,_2'(s('type.copying_gc.heap_address'(sK6),'const.copying_gc.Data_1'(s(sK6,sK14))),s('type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(sK7,sK8))),'const.pair.,_2'(s('type.num.num',sK15),s('type.list.list'('type.copying_gc.heap_element'(sK7,sK8)),sK16))))) | s('type.pair.prod'('type.copying_gc.heap_address'(sK6),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(sK7,sK8)))),sK9) = s('type.pair.prod'('type.copying_gc.heap_address'(sK6),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(sK7,sK8)))),'const.pair.,_2'(s('type.copying_gc.heap_address'(sK6),'const.copying_gc.Pointer_2'(s('type.num.num',sK10),s(sK6,sK11))),s('type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(sK7,sK8))),'const.pair.,_2'(s('type.num.num',sK12),s('type.list.list'('type.copying_gc.heap_element'(sK7,sK8)),sK13)))))),
  inference(cnf_transformation,[],[f91])).
fof(f2056,plain,(
  $false | $spl0),
  inference(subsumption_resolution,[],[f228,f134])).
fof(f134,plain,(
  ( ! [X10,X8,X7,X9] : (s('type.pair.prod'('type.copying_gc.heap_address'(sK6),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(sK7,sK8)))),sK9) != s('type.pair.prod'('type.copying_gc.heap_address'(sK6),'type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(sK7,sK8)))),'const.pair.,_2'(s('type.copying_gc.heap_address'(sK6),'const.copying_gc.Pointer_2'(s('type.num.num',X7),s(sK6,X8))),s('type.pair.prod'('type.num.num','type.list.list'('type.copying_gc.heap_element'(sK7,sK8))),'const.pair.,_2'(s('type.num.num',X9),s('type.list.list'('type.copying_gc.heap_element'(sK7,sK8)),X10)))))) )),
  inference(cnf_transformation,[],[f91])).
% SZS output end Proof for thm.bvp_to_wordProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 179
% Passive clauses: 754
% Generated clauses: 1917
% Final active clauses: 179
% Final passive clauses: 512
% Input formulas: 26
% Initial clauses: 93
% 
% Duplicate literals: 39
% Trivial inequalities: 13
% Fw subsumption resolutions: 138
% 
% Simple tautologies: 61
% Equational tautologies: 11
% Forward subsumptions: 885
% 
% Binary resolution: 1253
% Factoring: 200
% Forward superposition: 98
% Backward superposition: 51
% Self superposition: 2
% Equality factoring: 2
% Equality resolution: 8
% 
% Split clauses: 43
% Split components: 87
% SAT solver clauses: 80
% SAT solver unit clauses: 8
% SAT solver binary clauses: 30
% SAT solver learnt clauses: 1
% 
% Sat splits: 43
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 79
% TWLsolver calls for satisfiability: 59
% 
% Memory used [KB]: 1407
% Time elapsed: 0.044 s
% ------------------------------
% ------------------------------
% Success in time 0.045 s
