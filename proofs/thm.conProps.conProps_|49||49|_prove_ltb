Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.conProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.conProps
% SZS output start Proof for thm.conProps
fof(f2902,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f2901,f27,f43,f41,f39,f37,f2507,f23,f45,f2899,f2900,f26,f44])).
fof(f44,plain,(
  ( ! [X12,X13] : (s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),X12),s('type.list.list'('type.list.list'('type.string.char')),X13))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),X12),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X13)))) ) | $spl8),
  inference(cnf_transformation,[],[f44_D])).
fof(f44_D,plain,(
  ( ! [X12,X13] : (s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),X12),s('type.list.list'('type.list.list'('type.string.char')),X13))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),X12),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X13)))) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f26,plain,(
  ( ! [X12,X8,X13,X9] : (s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),X8),s('type.list.list'('type.list.list'('type.string.char')),X9))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),X8),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X9))) | s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),X12),s('type.list.list'('type.list.list'('type.string.char')),X13))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),X12),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X13)))) )),
  inference(cnf_transformation,[],[f20])).
fof(f20,plain,(
  ((! [X14,X15] : s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',X14),s('type.list.list'('type.list.list'('type.string.char')),X15))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',X14),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X15))) & ! [X12,X13] : s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),X12),s('type.list.list'('type.list.list'('type.string.char')),X13))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),X12),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X13)))) | (! [X10,X11] : s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',X10),s('type.list.list'('type.list.list'('type.string.char')),X11))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',X10),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X11))) & ! [X8,X9] : s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),X8),s('type.list.list'('type.list.list'('type.string.char')),X9))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),X8),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X9))))) & (s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',sK0),s('type.list.list'('type.list.list'('type.string.char')),sK1))) != s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',sK0),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),sK1))) | s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),sK2),s('type.list.list'('type.list.list'('type.string.char')),sK3))) != s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),sK2),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),sK3))) | s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',sK4),s('type.list.list'('type.list.list'('type.string.char')),sK5))) != s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',sK4),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),sK5))) | s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),sK6),s('type.list.list'('type.list.list'('type.string.char')),sK7))) != s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),sK6),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),sK7))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5,sK6,sK7])],[f19])).
fof(f19,plain,(
  ((! [X14,X15] : s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',X14),s('type.list.list'('type.list.list'('type.string.char')),X15))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',X14),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X15))) & ! [X12,X13] : s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),X12),s('type.list.list'('type.list.list'('type.string.char')),X13))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),X12),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X13)))) | (! [X10,X11] : s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',X10),s('type.list.list'('type.list.list'('type.string.char')),X11))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',X10),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X11))) & ! [X8,X9] : s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),X8),s('type.list.list'('type.list.list'('type.string.char')),X9))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),X8),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X9))))) & (? [X6,X7] : s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',X6),s('type.list.list'('type.list.list'('type.string.char')),X7))) != s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',X6),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X7))) | ? [X4,X5] : s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),X4),s('type.list.list'('type.list.list'('type.string.char')),X5))) != s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),X4),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X5))) | ? [X2,X3] : s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',X2),s('type.list.list'('type.list.list'('type.string.char')),X3))) != s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',X2),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X3))) | ? [X0,X1] : s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),X0),s('type.list.list'('type.list.list'('type.string.char')),X1))) != s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),X0),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X1))))),
  inference(rectify,[],[f18])).
fof(f18,plain,(
  ((! [X2,X3] : s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',X2),s('type.list.list'('type.list.list'('type.string.char')),X3))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',X2),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X3))) & ! [X0,X1] : s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),X0),s('type.list.list'('type.list.list'('type.string.char')),X1))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),X0),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X1)))) | (! [X6,X7] : s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',X6),s('type.list.list'('type.list.list'('type.string.char')),X7))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',X6),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X7))) & ! [X4,X5] : s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),X4),s('type.list.list'('type.list.list'('type.string.char')),X5))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),X4),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X5))))) & (? [X2,X3] : s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',X2),s('type.list.list'('type.list.list'('type.string.char')),X3))) != s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',X2),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X3))) | ? [X0,X1] : s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),X0),s('type.list.list'('type.list.list'('type.string.char')),X1))) != s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),X0),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X1))) | ? [X6,X7] : s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',X6),s('type.list.list'('type.list.list'('type.string.char')),X7))) != s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',X6),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X7))) | ? [X4,X5] : s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),X4),s('type.list.list'('type.list.list'('type.string.char')),X5))) != s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),X4),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X5))))),
  inference(flattening,[],[f17])).
fof(f17,plain,(
  ((! [X2,X3] : s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',X2),s('type.list.list'('type.list.list'('type.string.char')),X3))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',X2),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X3))) & ! [X0,X1] : s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),X0),s('type.list.list'('type.list.list'('type.string.char')),X1))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),X0),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X1)))) | (! [X6,X7] : s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',X6),s('type.list.list'('type.list.list'('type.string.char')),X7))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',X6),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X7))) & ! [X4,X5] : s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),X4),s('type.list.list'('type.list.list'('type.string.char')),X5))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),X4),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X5))))) & ((? [X2,X3] : s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',X2),s('type.list.list'('type.list.list'('type.string.char')),X3))) != s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',X2),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X3))) | ? [X0,X1] : s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),X0),s('type.list.list'('type.list.list'('type.string.char')),X1))) != s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),X0),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X1)))) | (? [X6,X7] : s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',X6),s('type.list.list'('type.list.list'('type.string.char')),X7))) != s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',X6),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X7))) | ? [X4,X5] : s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),X4),s('type.list.list'('type.list.list'('type.string.char')),X5))) != s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),X4),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X5)))))),
  inference(nnf_transformation,[],[f15])).
fof(f15,plain,(
  (! [X2,X3] : s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',X2),s('type.list.list'('type.list.list'('type.string.char')),X3))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',X2),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X3))) & ! [X0,X1] : s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),X0),s('type.list.list'('type.list.list'('type.string.char')),X1))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),X0),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X1)))) <~> (! [X6,X7] : s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',X6),s('type.list.list'('type.list.list'('type.string.char')),X7))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',X6),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X7))) & ! [X4,X5] : s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),X4),s('type.list.list'('type.list.list'('type.string.char')),X5))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),X4),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X5))))),
  inference(ennf_transformation,[],[f9])).
fof(f9,plain,(
  ~((! [X2,X3] : s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',X2),s('type.list.list'('type.list.list'('type.string.char')),X3))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',X2),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X3))) & ! [X0,X1] : s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),X0),s('type.list.list'('type.list.list'('type.string.char')),X1))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),X0),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X1)))) <=> (! [X6,X7] : s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',X6),s('type.list.list'('type.list.list'('type.string.char')),X7))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',X6),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X7))) & ! [X4,X5] : s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),X4),s('type.list.list'('type.list.list'('type.string.char')),X5))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),X4),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X5)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~((! [X6,X7] : s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',X6),s('type.list.list'('type.list.list'('type.string.char')),X7))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',X6),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X7))) & ! [X8,X7] : s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),X8),s('type.list.list'('type.list.list'('type.string.char')),X7))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),X8),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X7)))) <=> (! [X6,X7] : s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',X6),s('type.list.list'('type.list.list'('type.string.char')),X7))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',X6),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X7))) & ! [X8,X7] : s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),X8),s('type.list.list'('type.list.list'('type.string.char')),X7))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),X8),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X7)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  (! [X6,X7] : s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',X6),s('type.list.list'('type.list.list'('type.string.char')),X7))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',X6),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X7))) & ! [X8,X7] : s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),X8),s('type.list.list'('type.list.list'('type.string.char')),X7))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),X8),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X7)))) <=> (! [X6,X7] : s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',X6),s('type.list.list'('type.list.list'('type.string.char')),X7))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',X6),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X7))) & ! [X8,X7] : s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),X8),s('type.list.list'('type.list.list'('type.string.char')),X7))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),X8),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X7))))),
  file('thm.conProps.conProps_|49||49|_prove_ltb','thm.conProps.conProps_|49||49|_prove_ltb')).
fof(f2900,plain,(
  $false | ($spl5 | $spl10)),
  inference(subsumption_resolution,[],[f41,f45])).
fof(f2899,plain,(
  $false | ($spl3 | $spl8)),
  inference(trivial_inequality_removal,[],[f2897])).
fof(f2897,plain,(
  s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),sK2),s('type.list.list'('type.list.list'('type.string.char')),sK3))) != s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),sK2),s('type.list.list'('type.list.list'('type.string.char')),sK3))) | ($spl3 | $spl8)),
  inference(superposition,[],[f39,f44])).
fof(f45,plain,(
  ( ! [X14,X15] : (s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',X14),s('type.list.list'('type.list.list'('type.string.char')),X15))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',X14),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X15)))) ) | $spl10),
  inference(cnf_transformation,[],[f45_D])).
fof(f45_D,plain,(
  ( ! [X14,X15] : (s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',X14),s('type.list.list'('type.list.list'('type.string.char')),X15))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',X14),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X15)))) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f23,plain,(
  ( ! [X14,X10,X15,X11] : (s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',X10),s('type.list.list'('type.list.list'('type.string.char')),X11))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',X10),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X11))) | s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',X14),s('type.list.list'('type.list.list'('type.string.char')),X15))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',X14),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),X15)))) )),
  inference(cnf_transformation,[],[f20])).
fof(f2507,plain,(
  $false | ($spl1 | $spl10)),
  inference(trivial_inequality_removal,[],[f2506])).
fof(f2506,plain,(
  s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',sK0),s('type.list.list'('type.list.list'('type.string.char')),sK1))) != s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',sK0),s('type.list.list'('type.list.list'('type.string.char')),sK1))) | ($spl1 | $spl10)),
  inference(superposition,[],[f37,f45])).
fof(f37,plain,(
  s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',sK0),s('type.list.list'('type.list.list'('type.string.char')),sK1))) != s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',sK0),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),sK1))) | $spl1),
  inference(cnf_transformation,[],[f37_D])).
fof(f37_D,plain,(
  s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',sK0),s('type.list.list'('type.list.list'('type.string.char')),sK1))) != s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',sK0),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),sK1))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f39,plain,(
  s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),sK2),s('type.list.list'('type.list.list'('type.string.char')),sK3))) != s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),sK2),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),sK3))) | $spl3),
  inference(cnf_transformation,[],[f39_D])).
fof(f39_D,plain,(
  s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),sK2),s('type.list.list'('type.list.list'('type.string.char')),sK3))) != s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),sK2),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),sK3))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f41,plain,(
  s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',sK4),s('type.list.list'('type.list.list'('type.string.char')),sK5))) != s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',sK4),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),sK5))) | $spl5),
  inference(cnf_transformation,[],[f41_D])).
fof(f41_D,plain,(
  s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',sK4),s('type.list.list'('type.list.list'('type.string.char')),sK5))) != s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',sK4),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),sK5))) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f43,plain,(
  s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),sK6),s('type.list.list'('type.list.list'('type.string.char')),sK7))) != s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),sK6),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),sK7))) | $spl7),
  inference(cnf_transformation,[],[f43_D])).
fof(f43_D,plain,(
  s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),sK6),s('type.list.list'('type.list.list'('type.string.char')),sK7))) != s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),sK6),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),sK7))) <=> ~$spl7),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl7])])).
fof(f27,plain,(
  s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),sK6),s('type.list.list'('type.list.list'('type.string.char')),sK7))) != s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),sK6),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),sK7))) | s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',sK4),s('type.list.list'('type.list.list'('type.string.char')),sK5))) != s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',sK4),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),sK5))) | s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),sK2),s('type.list.list'('type.list.list'('type.string.char')),sK3))) != s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pats_bindings_2'(s('type.list.list'('type.conLang.pat'),sK2),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),sK3))) | s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',sK0),s('type.list.list'('type.list.list'('type.string.char')),sK1))) != s('type.list.list'('type.list.list'('type.string.char')),'const.list.APPEND_2'(s('type.list.list'('type.list.list'('type.string.char')),'const.conSem.pat_bindings_2'(s('type.conLang.pat',sK0),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.list.list'('type.string.char')),sK1)))),
  inference(cnf_transformation,[],[f20])).
fof(f2901,plain,(
  $false | ($spl7 | $spl8)),
  inference(subsumption_resolution,[],[f43,f44])).
% SZS output end Proof for thm.conProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 27
% Passive clauses: 500
% Generated clauses: 2760
% Final active clauses: 23
% Final passive clauses: 455
% Input formulas: 7
% Initial clauses: 12
% 
% Duplicate literals: 314
% Trivial inequalities: 39
% Fw subsumption resolutions: 184
% 
% Simple tautologies: 108
% Equational tautologies: 80
% Forward subsumptions: 1109
% 
% Binary resolution: 16
% Forward superposition: 940
% Backward superposition: 796
% Self superposition: 224
% Equality factoring: 202
% Equality resolution: 4
% 
% Split clauses: 146
% Split components: 296
% SAT solver clauses: 446
% SAT solver unit clauses: 227
% SAT solver binary clauses: 113
% SAT solver learnt clauses: 1
% 
% Sat splits: 146
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 441
% TWLsolver calls for satisfiability: 19
% 
% Memory used [KB]: 1535
% Time elapsed: 0.113 s
% ------------------------------
% ------------------------------
% Success in time 0.12 s
