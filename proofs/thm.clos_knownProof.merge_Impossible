Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.clos_knownProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.clos_knownProof
% SZS output start Proof for thm.clos_knownProof
fof(f5701,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f5700,f5580,f5609,f5607,f5605,f5603,f5665,f5625,f5690])).
fof(f5690,plain,(
  $false | $spl188),
  inference(subsumption_resolution,[],[f5683,f124])).
fof(f124,plain,(
  ( ! [X0] : (s('type.clos_known.val_approx',X0) = s('type.clos_known.val_approx','const.clos_known.merge_2'(s('type.clos_known.val_approx','const.clos_known.Impossible_0'),s('type.clos_known.val_approx',X0)))) )),
  inference(cnf_transformation,[],[f46])).
fof(f46,plain,(
  ! [X0] : s('type.clos_known.val_approx',X0) = s('type.clos_known.val_approx','const.clos_known.merge_2'(s('type.clos_known.val_approx','const.clos_known.Impossible_0'),s('type.clos_known.val_approx',X0)))),
  inference(rectify,[],[f22])).
fof(f22,axiom,(
  ! [X20] : s('type.clos_known.val_approx',X20) = s('type.clos_known.val_approx','const.clos_known.merge_2'(s('type.clos_known.val_approx','const.clos_known.Impossible_0'),s('type.clos_known.val_approx',X20)))),
  file('thm.clos_knownProof.merge_Impossible','thm.clos_known.merge_def|split|0')).
fof(f5683,plain,(
  s('type.clos_known.val_approx','const.clos_known.Impossible_0') != s('type.clos_known.val_approx','const.clos_known.merge_2'(s('type.clos_known.val_approx','const.clos_known.Impossible_0'),s('type.clos_known.val_approx','const.clos_known.Impossible_0'))) | $spl188),
  inference(backward_demodulation,[],[f5603,f118])).
fof(f118,plain,(
  s('type.clos_known.val_approx',sK0) != s('type.clos_known.val_approx','const.clos_known.merge_2'(s('type.clos_known.val_approx',sK0),s('type.clos_known.val_approx','const.clos_known.Impossible_0')))),
  inference(cnf_transformation,[],[f87])).
fof(f87,plain,(
  s('type.clos_known.val_approx',sK0) != s('type.clos_known.val_approx','const.clos_known.merge_2'(s('type.clos_known.val_approx',sK0),s('type.clos_known.val_approx','const.clos_known.Impossible_0')))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0])],[f85])).
fof(f85,plain,(
  ? [X0] : s('type.clos_known.val_approx',X0) != s('type.clos_known.val_approx','const.clos_known.merge_2'(s('type.clos_known.val_approx',X0),s('type.clos_known.val_approx','const.clos_known.Impossible_0')))),
  inference(ennf_transformation,[],[f44])).
fof(f44,plain,(
  ~! [X0] : s('type.clos_known.val_approx',X0) = s('type.clos_known.val_approx','const.clos_known.merge_2'(s('type.clos_known.val_approx',X0),s('type.clos_known.val_approx','const.clos_known.Impossible_0')))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : s('type.clos_known.val_approx',X6) = s('type.clos_known.val_approx','const.clos_known.merge_2'(s('type.clos_known.val_approx',X6),s('type.clos_known.val_approx','const.clos_known.Impossible_0')))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : s('type.clos_known.val_approx',X6) = s('type.clos_known.val_approx','const.clos_known.merge_2'(s('type.clos_known.val_approx',X6),s('type.clos_known.val_approx','const.clos_known.Impossible_0')))),
  file('thm.clos_knownProof.merge_Impossible','thm.clos_knownProof.merge_Impossible')).
fof(f5625,plain,(
  $false | $spl190),
  inference(subsumption_resolution,[],[f5612,f118])).
fof(f5612,plain,(
  s('type.clos_known.val_approx',sK0) = s('type.clos_known.val_approx','const.clos_known.merge_2'(s('type.clos_known.val_approx',sK0),s('type.clos_known.val_approx','const.clos_known.Impossible_0'))) | $spl190),
  inference(superposition,[],[f130,f5605])).
fof(f130,plain,(
  ( ! [X0] : (s('type.clos_known.val_approx','const.clos_known.Tuple_1'(s('type.list.list'('type.clos_known.val_approx'),X0))) = s('type.clos_known.val_approx','const.clos_known.merge_2'(s('type.clos_known.val_approx','const.clos_known.Tuple_1'(s('type.list.list'('type.clos_known.val_approx'),X0))),s('type.clos_known.val_approx','const.clos_known.Impossible_0')))) )),
  inference(cnf_transformation,[],[f52])).
fof(f52,plain,(
  ! [X0] : s('type.clos_known.val_approx','const.clos_known.Tuple_1'(s('type.list.list'('type.clos_known.val_approx'),X0))) = s('type.clos_known.val_approx','const.clos_known.merge_2'(s('type.clos_known.val_approx','const.clos_known.Tuple_1'(s('type.list.list'('type.clos_known.val_approx'),X0))),s('type.clos_known.val_approx','const.clos_known.Impossible_0')))),
  inference(rectify,[],[f24])).
fof(f24,axiom,(
  ! [X23] : s('type.clos_known.val_approx','const.clos_known.Tuple_1'(s('type.list.list'('type.clos_known.val_approx'),X23))) = s('type.clos_known.val_approx','const.clos_known.merge_2'(s('type.clos_known.val_approx','const.clos_known.Tuple_1'(s('type.list.list'('type.clos_known.val_approx'),X23))),s('type.clos_known.val_approx','const.clos_known.Impossible_0')))),
  file('thm.clos_knownProof.merge_Impossible','thm.clos_known.merge_def|split|2')).
fof(f5665,plain,(
  $false | $spl192),
  inference(subsumption_resolution,[],[f5649,f118])).
fof(f5649,plain,(
  s('type.clos_known.val_approx',sK0) = s('type.clos_known.val_approx','const.clos_known.merge_2'(s('type.clos_known.val_approx',sK0),s('type.clos_known.val_approx','const.clos_known.Impossible_0'))) | $spl192),
  inference(superposition,[],[f129,f5607])).
fof(f129,plain,(
  ( ! [X0] : (s('type.clos_known.val_approx','const.clos_known.Int_1'(s('type.integer.int',X0))) = s('type.clos_known.val_approx','const.clos_known.merge_2'(s('type.clos_known.val_approx','const.clos_known.Int_1'(s('type.integer.int',X0))),s('type.clos_known.val_approx','const.clos_known.Impossible_0')))) )),
  inference(cnf_transformation,[],[f51])).
fof(f51,plain,(
  ! [X0] : s('type.clos_known.val_approx','const.clos_known.Int_1'(s('type.integer.int',X0))) = s('type.clos_known.val_approx','const.clos_known.merge_2'(s('type.clos_known.val_approx','const.clos_known.Int_1'(s('type.integer.int',X0))),s('type.clos_known.val_approx','const.clos_known.Impossible_0')))),
  inference(rectify,[],[f25])).
fof(f25,axiom,(
  ! [X24] : s('type.clos_known.val_approx','const.clos_known.Int_1'(s('type.integer.int',X24))) = s('type.clos_known.val_approx','const.clos_known.merge_2'(s('type.clos_known.val_approx','const.clos_known.Int_1'(s('type.integer.int',X24))),s('type.clos_known.val_approx','const.clos_known.Impossible_0')))),
  file('thm.clos_knownProof.merge_Impossible','thm.clos_known.merge_def|split|3')).
fof(f5603,plain,(
  s('type.clos_known.val_approx','const.clos_known.Impossible_0') = s('type.clos_known.val_approx',sK0) | $spl188),
  inference(cnf_transformation,[],[f5603_D])).
fof(f5603_D,plain,(
  s('type.clos_known.val_approx','const.clos_known.Impossible_0') = s('type.clos_known.val_approx',sK0) <=> ~$spl188),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl188])])).
fof(f5605,plain,(
  s('type.clos_known.val_approx',sK0) = s('type.clos_known.val_approx','const.clos_known.Tuple_1'(s('type.list.list'('type.clos_known.val_approx'),sK3(sK0)))) | $spl190),
  inference(cnf_transformation,[],[f5605_D])).
fof(f5605_D,plain,(
  s('type.clos_known.val_approx',sK0) = s('type.clos_known.val_approx','const.clos_known.Tuple_1'(s('type.list.list'('type.clos_known.val_approx'),sK3(sK0)))) <=> ~$spl190),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl190])])).
fof(f5607,plain,(
  s('type.clos_known.val_approx',sK0) = s('type.clos_known.val_approx','const.clos_known.Int_1'(s('type.integer.int',sK4(sK0)))) | $spl192),
  inference(cnf_transformation,[],[f5607_D])).
fof(f5607_D,plain,(
  s('type.clos_known.val_approx',sK0) = s('type.clos_known.val_approx','const.clos_known.Int_1'(s('type.integer.int',sK4(sK0)))) <=> ~$spl192),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl192])])).
fof(f5609,plain,(
  s('type.clos_known.val_approx','const.clos_known.Other_0') = s('type.clos_known.val_approx',sK0) | $spl194),
  inference(cnf_transformation,[],[f5609_D])).
fof(f5609_D,plain,(
  s('type.clos_known.val_approx','const.clos_known.Other_0') = s('type.clos_known.val_approx',sK0) <=> ~$spl194),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl194])])).
fof(f5580,plain,(
  s('type.clos_known.val_approx','const.clos_known.Other_0') = s('type.clos_known.val_approx',sK0) | s('type.clos_known.val_approx',sK0) = s('type.clos_known.val_approx','const.clos_known.Int_1'(s('type.integer.int',sK4(sK0)))) | s('type.clos_known.val_approx',sK0) = s('type.clos_known.val_approx','const.clos_known.Tuple_1'(s('type.list.list'('type.clos_known.val_approx'),sK3(sK0)))) | s('type.clos_known.val_approx','const.clos_known.Impossible_0') = s('type.clos_known.val_approx',sK0)),
  inference(trivial_inequality_removal,[],[f5574])).
fof(f5574,plain,(
  s('type.clos_known.val_approx',sK0) != s('type.clos_known.val_approx',sK0) | s('type.clos_known.val_approx','const.clos_known.Other_0') = s('type.clos_known.val_approx',sK0) | s('type.clos_known.val_approx',sK0) = s('type.clos_known.val_approx','const.clos_known.Int_1'(s('type.integer.int',sK4(sK0)))) | s('type.clos_known.val_approx',sK0) = s('type.clos_known.val_approx','const.clos_known.Tuple_1'(s('type.list.list'('type.clos_known.val_approx'),sK3(sK0)))) | s('type.clos_known.val_approx','const.clos_known.Impossible_0') = s('type.clos_known.val_approx',sK0)),
  inference(superposition,[],[f118,f2836])).
fof(f2836,plain,(
  ( ! [X2] : (s('type.clos_known.val_approx',X2) = s('type.clos_known.val_approx','const.clos_known.merge_2'(s('type.clos_known.val_approx',X2),s('type.clos_known.val_approx','const.clos_known.Impossible_0'))) | s('type.clos_known.val_approx','const.clos_known.Other_0') = s('type.clos_known.val_approx',X2) | s('type.clos_known.val_approx',X2) = s('type.clos_known.val_approx','const.clos_known.Int_1'(s('type.integer.int',sK4(X2)))) | s('type.clos_known.val_approx',X2) = s('type.clos_known.val_approx','const.clos_known.Tuple_1'(s('type.list.list'('type.clos_known.val_approx'),sK3(X2)))) | s('type.clos_known.val_approx','const.clos_known.Impossible_0') = s('type.clos_known.val_approx',X2)) )),
  inference(superposition,[],[f162,f132])).
fof(f132,plain,(
  ( ! [X0] : (s('type.clos_known.val_approx',X0) = s('type.clos_known.val_approx','const.clos_known.Clos_2'(s('type.num.num',sK1(X0)),s('type.num.num',sK2(X0)))) | s('type.clos_known.val_approx','const.clos_known.Other_0') = s('type.clos_known.val_approx',X0) | s('type.clos_known.val_approx',X0) = s('type.clos_known.val_approx','const.clos_known.Int_1'(s('type.integer.int',sK4(X0)))) | s('type.clos_known.val_approx',X0) = s('type.clos_known.val_approx','const.clos_known.Tuple_1'(s('type.list.list'('type.clos_known.val_approx'),sK3(X0)))) | s('type.clos_known.val_approx','const.clos_known.Impossible_0') = s('type.clos_known.val_approx',X0)) )),
  inference(cnf_transformation,[],[f88])).
fof(f88,plain,(
  ! [X0] : (s('type.clos_known.val_approx',X0) = s('type.clos_known.val_approx','const.clos_known.Clos_2'(s('type.num.num',sK1(X0)),s('type.num.num',sK2(X0)))) | s('type.clos_known.val_approx',X0) = s('type.clos_known.val_approx','const.clos_known.Tuple_1'(s('type.list.list'('type.clos_known.val_approx'),sK3(X0)))) | s('type.clos_known.val_approx',X0) = s('type.clos_known.val_approx','const.clos_known.Int_1'(s('type.integer.int',sK4(X0)))) | s('type.clos_known.val_approx','const.clos_known.Other_0') = s('type.clos_known.val_approx',X0) | s('type.clos_known.val_approx','const.clos_known.Impossible_0') = s('type.clos_known.val_approx',X0))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK1,sK2,sK3,sK4])],[f53])).
fof(f53,plain,(
  ! [X0] : (? [X3,X4] : s('type.clos_known.val_approx',X0) = s('type.clos_known.val_approx','const.clos_known.Clos_2'(s('type.num.num',X3),s('type.num.num',X4))) | ? [X2] : s('type.clos_known.val_approx',X0) = s('type.clos_known.val_approx','const.clos_known.Tuple_1'(s('type.list.list'('type.clos_known.val_approx'),X2))) | ? [X1] : s('type.clos_known.val_approx',X0) = s('type.clos_known.val_approx','const.clos_known.Int_1'(s('type.integer.int',X1))) | s('type.clos_known.val_approx','const.clos_known.Other_0') = s('type.clos_known.val_approx',X0) | s('type.clos_known.val_approx','const.clos_known.Impossible_0') = s('type.clos_known.val_approx',X0))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X15] : (? [X16,X17] : s('type.clos_known.val_approx',X15) = s('type.clos_known.val_approx','const.clos_known.Clos_2'(s('type.num.num',X16),s('type.num.num',X17))) | ? [X18] : s('type.clos_known.val_approx',X15) = s('type.clos_known.val_approx','const.clos_known.Tuple_1'(s('type.list.list'('type.clos_known.val_approx'),X18))) | ? [X19] : s('type.clos_known.val_approx',X15) = s('type.clos_known.val_approx','const.clos_known.Int_1'(s('type.integer.int',X19))) | s('type.clos_known.val_approx','const.clos_known.Other_0') = s('type.clos_known.val_approx',X15) | s('type.clos_known.val_approx','const.clos_known.Impossible_0') = s('type.clos_known.val_approx',X15))),
  file('thm.clos_knownProof.merge_Impossible','thm.clos_known.val_approx_nchotomy')).
fof(f162,plain,(
  ( ! [X0,X1] : (s('type.clos_known.val_approx','const.clos_known.Clos_2'(s('type.num.num',X1),s('type.num.num',X0))) = s('type.clos_known.val_approx','const.clos_known.merge_2'(s('type.clos_known.val_approx','const.clos_known.Clos_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.clos_known.val_approx','const.clos_known.Impossible_0')))) )),
  inference(cnf_transformation,[],[f71])).
fof(f71,plain,(
  ! [X0,X1] : s('type.clos_known.val_approx','const.clos_known.Clos_2'(s('type.num.num',X1),s('type.num.num',X0))) = s('type.clos_known.val_approx','const.clos_known.merge_2'(s('type.clos_known.val_approx','const.clos_known.Clos_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.clos_known.val_approx','const.clos_known.Impossible_0')))),
  inference(rectify,[],[f23])).
fof(f23,axiom,(
  ! [X21,X22] : s('type.clos_known.val_approx','const.clos_known.Clos_2'(s('type.num.num',X22),s('type.num.num',X21))) = s('type.clos_known.val_approx','const.clos_known.merge_2'(s('type.clos_known.val_approx','const.clos_known.Clos_2'(s('type.num.num',X22),s('type.num.num',X21))),s('type.clos_known.val_approx','const.clos_known.Impossible_0')))),
  file('thm.clos_knownProof.merge_Impossible','thm.clos_known.merge_def|split|1')).
fof(f5700,plain,(
  $false | $spl194),
  inference(subsumption_resolution,[],[f5699,f122])).
fof(f122,plain,(
  s('type.clos_known.val_approx','const.clos_known.Other_0') = s('type.clos_known.val_approx','const.clos_known.merge_2'(s('type.clos_known.val_approx','const.clos_known.Other_0'),s('type.clos_known.val_approx','const.clos_known.Impossible_0')))),
  inference(cnf_transformation,[],[f26])).
fof(f26,axiom,(
  s('type.clos_known.val_approx','const.clos_known.Other_0') = s('type.clos_known.val_approx','const.clos_known.merge_2'(s('type.clos_known.val_approx','const.clos_known.Other_0'),s('type.clos_known.val_approx','const.clos_known.Impossible_0')))),
  file('thm.clos_knownProof.merge_Impossible','thm.clos_known.merge_def|split|4')).
fof(f5699,plain,(
  s('type.clos_known.val_approx','const.clos_known.Other_0') != s('type.clos_known.val_approx','const.clos_known.merge_2'(s('type.clos_known.val_approx','const.clos_known.Other_0'),s('type.clos_known.val_approx','const.clos_known.Impossible_0'))) | $spl194),
  inference(forward_demodulation,[],[f118,f5609])).
% SZS output end Proof for thm.clos_knownProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 133
% Passive clauses: 563
% Generated clauses: 5446
% Final active clauses: 124
% Final passive clauses: 312
% Input formulas: 42
% Initial clauses: 68
% 
% Duplicate literals: 498
% Trivial inequalities: 73
% Fw subsumption resolutions: 695
% Fw demodulations: 252
% Bw demodulations: 6
% 
% Simple tautologies: 176
% Equational tautologies: 33
% Forward subsumptions: 2729
% 
% Binary resolution: 92
% Forward superposition: 1918
% Backward superposition: 1604
% Self superposition: 80
% Equality factoring: 43
% Equality resolution: 28
% 
% Split clauses: 404
% Split components: 838
% SAT solver clauses: 530
% SAT solver unit clauses: 10
% SAT solver binary clauses: 88
% SAT solver learnt clauses: 1
% 
% Sat splits: 404
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 528
% TWLsolver calls for satisfiability: 64
% 
% Memory used [KB]: 3709
% Time elapsed: 0.086 s
% ------------------------------
% ------------------------------
% Success in time 0.088 s
