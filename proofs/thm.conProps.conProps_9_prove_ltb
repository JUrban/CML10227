Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.conProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.conProps
% SZS output start Proof for thm.conProps
fof(f204,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f203,f40,f72,f43,f184,f44,f67,f42,f65,f41,f71,f69])).
fof(f69,plain,(
  p(s(bool,happ(s(fun('type.conLang.pat',bool),sK0),s('type.conLang.pat',sK1)))) | $spl4),
  inference(cnf_transformation,[],[f69_D])).
fof(f69_D,plain,(
  p(s(bool,happ(s(fun('type.conLang.pat',bool),sK0),s('type.conLang.pat',sK1)))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f71,plain,(
  p(s(bool,happ(s(fun('type.conLang.pat',bool),sK0),s('type.conLang.pat',sK2)))) | $spl6),
  inference(cnf_transformation,[],[f71_D])).
fof(f71_D,plain,(
  p(s(bool,happ(s(fun('type.conLang.pat',bool),sK0),s('type.conLang.pat',sK2)))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f41,plain,(
  p(s(bool,happ(s(fun('type.conLang.pat',bool),sK0),s('type.conLang.pat',sK2)))) | p(s(bool,happ(s(fun('type.conLang.pat',bool),sK0),s('type.conLang.pat',sK1))))),
  inference(cnf_transformation,[],[f32])).
fof(f32,plain,(
  (! [X4] : (~p(s(bool,happ(s(fun('type.conLang.pat',bool),sK0),s('type.conLang.pat',X4)))) | p(s(bool,happ(s(fun('type.conLang.pat',bool),sK0),s('type.conLang.pat','const.conLang.Pref_1'(s('type.conLang.pat',X4))))))) | ! [X3] : (~p(s(bool,happ(s(fun('type.conLang.pat',bool),sK0),s('type.conLang.pat',X3)))) | p(s(bool,happ(s(fun('type.conLang.pat',bool),sK0),s('type.conLang.pat','const.conLang.Pref_1'(s('type.conLang.pat',X3)))))))) & ((p(s(bool,happ(s(fun('type.conLang.pat',bool),sK0),s('type.conLang.pat',sK1)))) & ~p(s(bool,happ(s(fun('type.conLang.pat',bool),sK0),s('type.conLang.pat','const.conLang.Pref_1'(s('type.conLang.pat',sK1))))))) | (p(s(bool,happ(s(fun('type.conLang.pat',bool),sK0),s('type.conLang.pat',sK2)))) & ~p(s(bool,happ(s(fun('type.conLang.pat',bool),sK0),s('type.conLang.pat','const.conLang.Pref_1'(s('type.conLang.pat',sK2))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f31])).
fof(f31,plain,(
  ? [X0] : ((! [X4] : (~p(s(bool,happ(s(fun('type.conLang.pat',bool),X0),s('type.conLang.pat',X4)))) | p(s(bool,happ(s(fun('type.conLang.pat',bool),X0),s('type.conLang.pat','const.conLang.Pref_1'(s('type.conLang.pat',X4))))))) | ! [X3] : (~p(s(bool,happ(s(fun('type.conLang.pat',bool),X0),s('type.conLang.pat',X3)))) | p(s(bool,happ(s(fun('type.conLang.pat',bool),X0),s('type.conLang.pat','const.conLang.Pref_1'(s('type.conLang.pat',X3)))))))) & (? [X2] : (p(s(bool,happ(s(fun('type.conLang.pat',bool),X0),s('type.conLang.pat',X2)))) & ~p(s(bool,happ(s(fun('type.conLang.pat',bool),X0),s('type.conLang.pat','const.conLang.Pref_1'(s('type.conLang.pat',X2))))))) | ? [X1] : (p(s(bool,happ(s(fun('type.conLang.pat',bool),X0),s('type.conLang.pat',X1)))) & ~p(s(bool,happ(s(fun('type.conLang.pat',bool),X0),s('type.conLang.pat','const.conLang.Pref_1'(s('type.conLang.pat',X1)))))))))),
  inference(rectify,[],[f30])).
fof(f30,plain,(
  ? [X0] : ((! [X1] : (~p(s(bool,happ(s(fun('type.conLang.pat',bool),X0),s('type.conLang.pat',X1)))) | p(s(bool,happ(s(fun('type.conLang.pat',bool),X0),s('type.conLang.pat','const.conLang.Pref_1'(s('type.conLang.pat',X1))))))) | ! [X2] : (~p(s(bool,happ(s(fun('type.conLang.pat',bool),X0),s('type.conLang.pat',X2)))) | p(s(bool,happ(s(fun('type.conLang.pat',bool),X0),s('type.conLang.pat','const.conLang.Pref_1'(s('type.conLang.pat',X2)))))))) & (? [X1] : (p(s(bool,happ(s(fun('type.conLang.pat',bool),X0),s('type.conLang.pat',X1)))) & ~p(s(bool,happ(s(fun('type.conLang.pat',bool),X0),s('type.conLang.pat','const.conLang.Pref_1'(s('type.conLang.pat',X1))))))) | ? [X2] : (p(s(bool,happ(s(fun('type.conLang.pat',bool),X0),s('type.conLang.pat',X2)))) & ~p(s(bool,happ(s(fun('type.conLang.pat',bool),X0),s('type.conLang.pat','const.conLang.Pref_1'(s('type.conLang.pat',X2)))))))))),
  inference(nnf_transformation,[],[f26])).
fof(f26,plain,(
  ? [X0] : (! [X1] : (~p(s(bool,happ(s(fun('type.conLang.pat',bool),X0),s('type.conLang.pat',X1)))) | p(s(bool,happ(s(fun('type.conLang.pat',bool),X0),s('type.conLang.pat','const.conLang.Pref_1'(s('type.conLang.pat',X1))))))) <~> ! [X2] : (~p(s(bool,happ(s(fun('type.conLang.pat',bool),X0),s('type.conLang.pat',X2)))) | p(s(bool,happ(s(fun('type.conLang.pat',bool),X0),s('type.conLang.pat','const.conLang.Pref_1'(s('type.conLang.pat',X2))))))))),
  inference(ennf_transformation,[],[f14])).
fof(f14,plain,(
  ~! [X0] : (! [X1] : (p(s(bool,happ(s(fun('type.conLang.pat',bool),X0),s('type.conLang.pat',X1)))) => p(s(bool,happ(s(fun('type.conLang.pat',bool),X0),s('type.conLang.pat','const.conLang.Pref_1'(s('type.conLang.pat',X1))))))) <=> ! [X2] : (p(s(bool,happ(s(fun('type.conLang.pat',bool),X0),s('type.conLang.pat',X2)))) => p(s(bool,happ(s(fun('type.conLang.pat',bool),X0),s('type.conLang.pat','const.conLang.Pref_1'(s('type.conLang.pat',X2))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : (! [X7] : (p(s(bool,happ(s(fun('type.conLang.pat',bool),X6),s('type.conLang.pat',X7)))) => p(s(bool,happ(s(fun('type.conLang.pat',bool),X6),s('type.conLang.pat','const.conLang.Pref_1'(s('type.conLang.pat',X7))))))) <=> ! [X7] : (p(s(bool,happ(s(fun('type.conLang.pat',bool),X6),s('type.conLang.pat',X7)))) => p(s(bool,happ(s(fun('type.conLang.pat',bool),X6),s('type.conLang.pat','const.conLang.Pref_1'(s('type.conLang.pat',X7))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : (! [X7] : (p(s(bool,happ(s(fun('type.conLang.pat',bool),X6),s('type.conLang.pat',X7)))) => p(s(bool,happ(s(fun('type.conLang.pat',bool),X6),s('type.conLang.pat','const.conLang.Pref_1'(s('type.conLang.pat',X7))))))) <=> ! [X7] : (p(s(bool,happ(s(fun('type.conLang.pat',bool),X6),s('type.conLang.pat',X7)))) => p(s(bool,happ(s(fun('type.conLang.pat',bool),X6),s('type.conLang.pat','const.conLang.Pref_1'(s('type.conLang.pat',X7))))))))),
  file('thm.conProps.conProps_9_prove_ltb','thm.conProps.conProps_9_prove_ltb')).
fof(f65,plain,(
  ~p(s(bool,happ(s(fun('type.conLang.pat',bool),sK0),s('type.conLang.pat','const.conLang.Pref_1'(s('type.conLang.pat',sK1)))))) | $spl1),
  inference(cnf_transformation,[],[f65_D])).
fof(f65_D,plain,(
  ~p(s(bool,happ(s(fun('type.conLang.pat',bool),sK0),s('type.conLang.pat','const.conLang.Pref_1'(s('type.conLang.pat',sK1)))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f42,plain,(
  p(s(bool,happ(s(fun('type.conLang.pat',bool),sK0),s('type.conLang.pat',sK2)))) | ~p(s(bool,happ(s(fun('type.conLang.pat',bool),sK0),s('type.conLang.pat','const.conLang.Pref_1'(s('type.conLang.pat',sK1))))))),
  inference(cnf_transformation,[],[f32])).
fof(f67,plain,(
  ~p(s(bool,happ(s(fun('type.conLang.pat',bool),sK0),s('type.conLang.pat','const.conLang.Pref_1'(s('type.conLang.pat',sK2)))))) | $spl3),
  inference(cnf_transformation,[],[f67_D])).
fof(f67_D,plain,(
  ~p(s(bool,happ(s(fun('type.conLang.pat',bool),sK0),s('type.conLang.pat','const.conLang.Pref_1'(s('type.conLang.pat',sK2)))))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f44,plain,(
  ~p(s(bool,happ(s(fun('type.conLang.pat',bool),sK0),s('type.conLang.pat','const.conLang.Pref_1'(s('type.conLang.pat',sK2)))))) | ~p(s(bool,happ(s(fun('type.conLang.pat',bool),sK0),s('type.conLang.pat','const.conLang.Pref_1'(s('type.conLang.pat',sK1))))))),
  inference(cnf_transformation,[],[f32])).
fof(f184,plain,(
  $false | ($spl1 | $spl4 | $spl8)),
  inference(subsumption_resolution,[],[f183,f45])).
fof(f45,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.conProps.conProps_9_prove_ltb',aHL_TRUTH)).
fof(f183,plain,(
  ~p(s(bool,'T_0')) | ($spl1 | $spl4 | $spl8)),
  inference(forward_demodulation,[],[f182,f79])).
fof(f79,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.conLang.pat',bool),sK0),s('type.conLang.pat',sK1))) | $spl4),
  inference(resolution,[],[f69,f50])).
fof(f50,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f33])).
fof(f33,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f16])).
fof(f16,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X11] : (s(bool,'T_0') = s(bool,X11) <=> p(s(bool,X11)))),
  file('thm.conProps.conProps_9_prove_ltb','thm.bool.EQ_CLAUSES|split|1')).
fof(f182,plain,(
  ~p(s(bool,happ(s(fun('type.conLang.pat',bool),sK0),s('type.conLang.pat',sK1)))) | ($spl1 | $spl8)),
  inference(subsumption_resolution,[],[f180,f47])).
fof(f47,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f15])).
fof(f15,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.conProps.conProps_9_prove_ltb',aHL_FALSITY)).
fof(f180,plain,(
  p(s(bool,'F_0')) | ~p(s(bool,happ(s(fun('type.conLang.pat',bool),sK0),s('type.conLang.pat',sK1)))) | ($spl1 | $spl8)),
  inference(superposition,[],[f72,f103])).
fof(f103,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.conLang.pat',bool),sK0),s('type.conLang.pat','const.conLang.Pref_1'(s('type.conLang.pat',sK1))))) | $spl1),
  inference(resolution,[],[f65,f54])).
fof(f54,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f35])).
fof(f35,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f19])).
fof(f19,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f18])).
fof(f18,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f12])).
fof(f12,axiom,(
  ! [X11] : (s(bool,'F_0') = s(bool,X11) <=> ~p(s(bool,X11)))),
  file('thm.conProps.conProps_9_prove_ltb','thm.bool.EQ_CLAUSES|split|2')).
fof(f43,plain,(
  ~p(s(bool,happ(s(fun('type.conLang.pat',bool),sK0),s('type.conLang.pat','const.conLang.Pref_1'(s('type.conLang.pat',sK2)))))) | p(s(bool,happ(s(fun('type.conLang.pat',bool),sK0),s('type.conLang.pat',sK1))))),
  inference(cnf_transformation,[],[f32])).
fof(f72,plain,(
  ( ! [X4] : (p(s(bool,happ(s(fun('type.conLang.pat',bool),sK0),s('type.conLang.pat','const.conLang.Pref_1'(s('type.conLang.pat',X4)))))) | ~p(s(bool,happ(s(fun('type.conLang.pat',bool),sK0),s('type.conLang.pat',X4))))) ) | $spl8),
  inference(cnf_transformation,[],[f72_D])).
fof(f72_D,plain,(
  ( ! [X4] : (p(s(bool,happ(s(fun('type.conLang.pat',bool),sK0),s('type.conLang.pat','const.conLang.Pref_1'(s('type.conLang.pat',X4)))))) | ~p(s(bool,happ(s(fun('type.conLang.pat',bool),sK0),s('type.conLang.pat',X4))))) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f40,plain,(
  ( ! [X4,X3] : (p(s(bool,happ(s(fun('type.conLang.pat',bool),sK0),s('type.conLang.pat','const.conLang.Pref_1'(s('type.conLang.pat',X3)))))) | ~p(s(bool,happ(s(fun('type.conLang.pat',bool),sK0),s('type.conLang.pat',X3)))) | p(s(bool,happ(s(fun('type.conLang.pat',bool),sK0),s('type.conLang.pat','const.conLang.Pref_1'(s('type.conLang.pat',X4)))))) | ~p(s(bool,happ(s(fun('type.conLang.pat',bool),sK0),s('type.conLang.pat',X4))))) )),
  inference(cnf_transformation,[],[f32])).
fof(f203,plain,(
  $false | ($spl3 | $spl6 | $spl8)),
  inference(subsumption_resolution,[],[f196,f71])).
fof(f196,plain,(
  ~p(s(bool,happ(s(fun('type.conLang.pat',bool),sK0),s('type.conLang.pat',sK2)))) | ($spl3 | $spl8)),
  inference(resolution,[],[f67,f72])).
% SZS output end Proof for thm.conProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 21
% Passive clauses: 68
% Generated clauses: 160
% Final active clauses: 17
% Final passive clauses: 35
% Input formulas: 12
% Initial clauses: 24
% 
% Duplicate literals: 1
% Trivial inequalities: 3
% Fw subsumption resolutions: 17
% Fw demodulations: 5
% Bw demodulations: 2
% 
% Simple tautologies: 9
% Equational tautologies: 4
% Forward subsumptions: 54
% 
% Binary resolution: 44
% Factoring: 1
% Forward superposition: 23
% Backward superposition: 29
% Self superposition: 2
% Equality factoring: 2
% Equality resolution: 1
% 
% Split clauses: 5
% Split components: 10
% SAT solver clauses: 10
% SAT solver unit clauses: 2
% SAT solver binary clauses: 5
% SAT solver learnt clauses: 2
% SAT solver learnt literals: 1
% 
% Sat splits: 5
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 7
% TWLsolver calls for satisfiability: 3
% 
% Memory used [KB]: 639
% Time elapsed: 0.017 s
% ------------------------------
% ------------------------------
% Success in time 0.06 s
