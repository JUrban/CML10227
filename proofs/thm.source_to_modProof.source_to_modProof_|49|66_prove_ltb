Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.source_to_modProof
% (32460)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 845
% Passive clauses: 8803
% Generated clauses: 25610
% Final active clauses: 777
% Final passive clauses: 7617
% Input formulas: 133
% Initial clauses: 396
% 
% Duplicate literals: 143
% Trivial inequalities: 113
% Fw subsumption resolutions: 1011
% Fw demodulations: 3798
% Bw demodulations: 66
% 
% Simple tautologies: 386
% Equational tautologies: 25
% Forward subsumptions: 10794
% Fw demodulations to eq. taut.: 2
% 
% Binary resolution: 6399
% Factoring: 281
% Forward superposition: 5129
% Backward superposition: 8036
% Self superposition: 42
% Equality factoring: 2
% Equality resolution: 23
% 
% Split clauses: 413
% Split components: 828
% SAT solver clauses: 533
% SAT solver unit clauses: 14
% SAT solver binary clauses: 101
% 
% Sat splits: 413
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 531
% TWLsolver calls for satisfiability: 207
% 
% Memory used [KB]: 16119
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 144 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.source_to_modProof
% (32480)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 374
% Passive clauses: 3230
% Generated clauses: 13825
% Final active clauses: 373
% Final passive clauses: 2558
% Input formulas: 133
% Initial clauses: 396
% 
% Duplicate literals: 85
% Trivial inequalities: 2
% Fw subsumption resolutions: 285
% Fw demodulations: 1891
% Bw demodulations: 307
% Condensations: 112
% Global subsumptions: 23
% 
% Simple tautologies: 327
% Equational tautologies: 9
% Forward subsumptions: 4244
% 
% Binary resolution: 2122
% Factoring: 101
% Forward superposition: 2681
% Backward superposition: 2481
% Self superposition: 50
% Equality factoring: 2
% Equality resolution: 3
% 
% Split clauses: 34
% Split components: 68
% SAT solver clauses: 3939
% SAT solver unit clauses: 386
% SAT solver binary clauses: 86
% SAT solver learnt clauses: 46
% SAT solver learnt literals: 12
% 
% Sat splits: 34
% 
% TWLsolver clauses: 3847
% TWLsolver calls for satisfiability: 3127
% 
% Memory used [KB]: 19189
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.source_to_modProof
% (32498)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 467
% Passive clauses: 3164
% Generated clauses: 304623
% Final active clauses: 462
% Final passive clauses: 992
% Input formulas: 133
% Initial clauses: 396
% Discarded non-redundant clauses: 267913
% 
% Duplicate literals: 10
% Trivial inequalities: 10
% Fw subsumption resolutions: 589
% Fw demodulations: 17458
% Bw demodulations: 132
% Condensations: 27
% 
% Simple tautologies: 171
% Equational tautologies: 33
% Forward subsumptions: 9999
% Fw demodulations to eq. taut.: 6206
% Bw demodulations to eq. taut.: 29
% 
% Unit resulting resolution: 279177
% Factoring: 1
% Forward superposition: 3501
% Backward superposition: 3270
% Self superposition: 57
% Equality factoring: 2
% Equality resolution: 4
% 
% Split clauses: 13
% Split components: 26
% SAT solver clauses: 4084
% SAT solver unit clauses: 1764
% SAT solver binary clauses: 1216
% 
% Sat splits: 13
% Sat splitting refutations: 892
% 
% Memory used [KB]: 203664
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 32 next slice time: 32
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.source_to_modProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.source_to_modProof
% SZS output start Proof for thm.source_to_modProof
fof(f866,plain,(
  $false),
  inference(equality_resolution,[],[f782])).
fof(f782,plain,(
  ( ! [X8] : (s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.list.list'('type.modLang.dec'))),X8) != s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.list.list'('type.modLang.dec'))),'const.source_to_mod.compile_decs_5'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK14),sK16))))),s('type.option.option'('type.list.list'('type.string.char')),sK18),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),sK17),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),sK15),s('type.list.list'('type.ast.dec'),sK19)))) )),
  inference(superposition,[],[f710,f484])).
fof(f484,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK26(X2,X1,X0)),s(X1,sK27(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f318])).
fof(f318,plain,(
  ! [X0,X1,X2] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK26(X2,X1,X0)),s(X1,sK27(X2,X1,X0))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK26,sK27])],[f168])).
fof(f168,plain,(
  ! [X0,X1,X2] : ? [X3,X4] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X4)))),
  inference(flattening,[],[f167])).
fof(f167,plain,(
  ! [X0,X1] : ! [X2] : ? [X3,X4] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X4)))),
  inference(rectify,[],[f20])).
fof(f20,axiom,(
  ! [X6,X15] : ! [X37] : ? [X40,X21] : s('type.pair.prod'(X6,X15),X37) = s('type.pair.prod'(X6,X15),'const.pair.,_2'(s(X6,X40),s(X15,X21)))),
  file('thm.source_to_modProof.source_to_modProof_|49|66_prove_ltb','thm.pair.ABS_PAIR_THM')).
fof(f710,plain,(
  ( ! [X10,X11] : (s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.list.list'('type.modLang.dec'))),'const.pair.,_2'(s('type.num.num',X11),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.list.list'('type.modLang.dec')),X10))) != s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.list.list'('type.modLang.dec'))),'const.source_to_mod.compile_decs_5'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK14),sK16))))),s('type.option.option'('type.list.list'('type.string.char')),sK18),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),sK17),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),sK15),s('type.list.list'('type.ast.dec'),sK19)))) )),
  inference(superposition,[],[f411,f484])).
fof(f411,plain,(
  ( ! [X6,X8,X7] : (s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.list.list'('type.modLang.dec'))),'const.pair.,_2'(s('type.num.num',X6),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.list.list'('type.modLang.dec')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X7),s('type.list.list'('type.modLang.dec'),X8))))) != s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.list.list'('type.modLang.dec'))),'const.source_to_mod.compile_decs_5'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK14),sK16))))),s('type.option.option'('type.list.list'('type.string.char')),sK18),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),sK17),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),sK15),s('type.list.list'('type.ast.dec'),sK19)))) )),
  inference(cnf_transformation,[],[f286])).
fof(f286,plain,(
  ! [X6,X7,X8] : s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.list.list'('type.modLang.dec'))),'const.pair.,_2'(s('type.num.num',X6),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.list.list'('type.modLang.dec')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X7),s('type.list.list'('type.modLang.dec'),X8))))) != s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.list.list'('type.modLang.dec'))),'const.source_to_mod.compile_decs_5'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK14),sK16))))),s('type.option.option'('type.list.list'('type.string.char')),sK18),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),sK17),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),sK15),s('type.list.list'('type.ast.dec'),sK19)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK14,sK15,sK16,sK17,sK18,sK19])],[f231])).
fof(f231,plain,(
  ? [X0,X1,X2,X3,X4,X5] : ! [X6,X7,X8] : s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.list.list'('type.modLang.dec'))),'const.pair.,_2'(s('type.num.num',X6),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.list.list'('type.modLang.dec')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X7),s('type.list.list'('type.modLang.dec'),X8))))) != s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.list.list'('type.modLang.dec'))),'const.source_to_mod.compile_decs_5'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X2))))),s('type.option.option'('type.list.list'('type.string.char')),X4),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X3),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X1),s('type.list.list'('type.ast.dec'),X5)))),
  inference(ennf_transformation,[],[f136])).
fof(f136,plain,(
  ~! [X0,X1,X2,X3,X4,X5] : ? [X6,X7,X8] : s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.list.list'('type.modLang.dec'))),'const.pair.,_2'(s('type.num.num',X6),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.list.list'('type.modLang.dec')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X7),s('type.list.list'('type.modLang.dec'),X8))))) = s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.list.list'('type.modLang.dec'))),'const.source_to_mod.compile_decs_5'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X2))))),s('type.option.option'('type.list.list'('type.string.char')),X4),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X3),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X1),s('type.list.list'('type.ast.dec'),X5)))),
  inference(flattening,[],[f135])).
fof(f135,plain,(
  ~! [X0] : ! [X1,X2,X3,X4,X5] : ? [X6,X7,X8] : s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.list.list'('type.modLang.dec'))),'const.pair.,_2'(s('type.num.num',X6),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.list.list'('type.modLang.dec')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X7),s('type.list.list'('type.modLang.dec'),X8))))) = s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.list.list'('type.modLang.dec'))),'const.source_to_mod.compile_decs_5'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X2))))),s('type.option.option'('type.list.list'('type.string.char')),X4),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X3),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X1),s('type.list.list'('type.ast.dec'),X5)))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9,X10,X11] : ? [X12,X13,X14] : s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.list.list'('type.modLang.dec'))),'const.pair.,_2'(s('type.num.num',X12),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.list.list'('type.modLang.dec')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X13),s('type.list.list'('type.modLang.dec'),X14))))) = s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.list.list'('type.modLang.dec'))),'const.source_to_mod.compile_decs_5'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X6),X8))))),s('type.option.option'('type.list.list'('type.string.char')),X10),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X9),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X7),s('type.list.list'('type.ast.dec'),X11)))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9,X10,X11] : ? [X12,X13,X14] : s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.list.list'('type.modLang.dec'))),'const.pair.,_2'(s('type.num.num',X12),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.list.list'('type.modLang.dec')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X13),s('type.list.list'('type.modLang.dec'),X14))))) = s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.list.list'('type.modLang.dec'))),'const.source_to_mod.compile_decs_5'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X6),X8))))),s('type.option.option'('type.list.list'('type.string.char')),X10),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X9),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X7),s('type.list.list'('type.ast.dec'),X11)))),
  file('thm.source_to_modProof.source_to_modProof_|49|66_prove_ltb','thm.source_to_modProof.source_to_modProof_|49|66_prove_ltb')).
% SZS output end Proof for thm.source_to_modProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 173
% Passive clauses: 83
% Generated clauses: 146
% Final active clauses: 173
% Final passive clauses: 80
% Input formulas: 133
% Initial clauses: 256
% 
% Selected by SInE selection: 57
% SInE iterations: 1
% 
% Duplicate literals: 8
% Trivial inequalities: 1
% 
% Simple tautologies: 82
% Equational tautologies: 3
% Forward subsumptions: 62
% 
% Forward superposition: 190
% Equality resolution: 1
% 
% SAT solver clauses: 1
% 
% Memory used [KB]: 2174
% Time elapsed: 0.021 s
% ------------------------------
% ------------------------------
% Success in time 11.802 s
