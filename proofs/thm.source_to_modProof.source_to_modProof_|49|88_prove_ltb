Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.source_to_modProof
% (4799)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 695
% Passive clauses: 6048
% Generated clauses: 19614
% Final active clauses: 641
% Final passive clauses: 5075
% Input formulas: 260
% Initial clauses: 548
% 
% Duplicate literals: 124
% Trivial inequalities: 119
% Fw subsumption resolutions: 1007
% Fw demodulations: 1558
% Bw demodulations: 51
% 
% Simple tautologies: 242
% Equational tautologies: 31
% Forward subsumptions: 10181
% 
% Binary resolution: 4846
% Factoring: 333
% Forward superposition: 4318
% Backward superposition: 6574
% Self superposition: 31
% Equality factoring: 2
% Equality resolution: 24
% 
% Split clauses: 363
% Split components: 728
% SAT solver clauses: 481
% SAT solver unit clauses: 11
% SAT solver binary clauses: 78
% 
% Sat splits: 363
% Sat splitting refutations: 6
% 
% TWLsolver clauses: 479
% TWLsolver calls for satisfiability: 240
% 
% Memory used [KB]: 14072
% Time elapsed: 0.605 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.source_to_modProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.source_to_modProof
% SZS output start Proof for thm.source_to_modProof
fof(f9340,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f9339,f9151,f9196,f944,f1515,f1191,f1693])).
fof(f1693,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,'const.pair.FST_1'(s('type.pair.prod'(X0,X1),X2))),s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),X2)))))) ) | $spl296),
  inference(cnf_transformation,[],[f1693_D])).
fof(f1693_D,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,'const.pair.FST_1'(s('type.pair.prod'(X0,X1),X2))),s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),X2)))))) ) <=> ~$spl296),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl296])])).
fof(f1191,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,'const.pair.FST_1'(s('type.pair.prod'(X0,X1),X2))),s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),X2)))))) )),
  inference(cnf_transformation,[],[f453])).
fof(f453,plain,(
  ! [X0,X1,X2] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,'const.pair.FST_1'(s('type.pair.prod'(X0,X1),X2))),s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),X2)))))),
  inference(flattening,[],[f452])).
fof(f452,plain,(
  ! [X0,X1] : ! [X2] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,'const.pair.FST_1'(s('type.pair.prod'(X0,X1),X2))),s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),X2)))))),
  inference(rectify,[],[f195])).
fof(f195,axiom,(
  ! [X13,X14] : ! [X18] : s('type.pair.prod'(X13,X14),X18) = s('type.pair.prod'(X13,X14),'const.pair.,_2'(s(X13,'const.pair.FST_1'(s('type.pair.prod'(X13,X14),X18))),s(X14,'const.pair.SND_1'(s('type.pair.prod'(X13,X14),X18)))))),
  file('thm.source_to_modProof.source_to_modProof_|49|88_prove_ltb','thm.pair.PAIR')).
fof(f1515,plain,(
  ( ! [X2,X1] : (s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.source_to_mod.config_mod_env_1'(s('type.source_to_mod.config',sK19))) != s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.pair.,_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2)))) ) | $spl0),
  inference(cnf_transformation,[],[f1515_D])).
fof(f1515_D,plain,(
  ( ! [X2,X1] : (s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.source_to_mod.config_mod_env_1'(s('type.source_to_mod.config',sK19))) != s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.pair.,_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2)))) ) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f944,plain,(
  ( ! [X2,X1] : (s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.source_to_mod.config_mod_env_1'(s('type.source_to_mod.config',sK19))) != s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.pair.,_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2)))) )),
  inference(cnf_transformation,[],[f747])).
fof(f747,plain,(
  ! [X1,X2] : s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.source_to_mod.config_mod_env_1'(s('type.source_to_mod.config',sK19))) != s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.pair.,_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK19])],[f667])).
fof(f667,plain,(
  ? [X0] : ! [X1,X2] : s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.source_to_mod.config_mod_env_1'(s('type.source_to_mod.config',X0))) != s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.pair.,_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2)))),
  inference(ennf_transformation,[],[f262])).
fof(f262,plain,(
  ~! [X0] : ? [X1,X2] : s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.source_to_mod.config_mod_env_1'(s('type.source_to_mod.config',X0))) = s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.pair.,_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X1),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X2)))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ? [X7,X8] : s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.source_to_mod.config_mod_env_1'(s('type.source_to_mod.config',X6))) = s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.pair.,_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X7),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X8)))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ? [X7,X8] : s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.source_to_mod.config_mod_env_1'(s('type.source_to_mod.config',X6))) = s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.pair.,_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X7),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X8)))),
  file('thm.source_to_modProof.source_to_modProof_|49|88_prove_ltb','thm.source_to_modProof.source_to_modProof_|49|88_prove_ltb')).
fof(f9196,plain,(
  ( ! [X0] : (s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X0) != s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.source_to_mod.config_mod_env_1'(s('type.source_to_mod.config',sK19)))) ) | $spl3692),
  inference(cnf_transformation,[],[f9196_D])).
fof(f9196_D,plain,(
  ( ! [X0] : (s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X0) != s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.source_to_mod.config_mod_env_1'(s('type.source_to_mod.config',sK19)))) ) <=> ~$spl3692),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3692])])).
fof(f9151,plain,(
  ( ! [X0] : (s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X0) != s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'const.source_to_mod.config_mod_env_1'(s('type.source_to_mod.config',sK19)))) ) | ($spl0 | $spl296)),
  inference(superposition,[],[f1515,f1693])).
fof(f9339,plain,(
  $false | $spl3692),
  inference(equality_resolution,[],[f9196])).
% SZS output end Proof for thm.source_to_modProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 312
% Passive clauses: 1838
% Generated clauses: 8380
% Final active clauses: 308
% Final passive clauses: 1457
% Input formulas: 260
% Initial clauses: 548
% 
% Duplicate literals: 73
% Trivial inequalities: 2
% Fw subsumption resolutions: 204
% Fw demodulations: 724
% Bw demodulations: 73
% Condensations: 48
% Global subsumptions: 33
% 
% Simple tautologies: 227
% Equational tautologies: 10
% Forward subsumptions: 3159
% Fw demodulations to eq. taut.: 2
% 
% Binary resolution: 1458
% Factoring: 110
% Forward superposition: 1679
% Backward superposition: 1500
% Self superposition: 31
% Equality factoring: 2
% Equality resolution: 4
% 
% Split clauses: 7
% Split components: 14
% SAT solver clauses: 2721
% SAT solver unit clauses: 754
% SAT solver binary clauses: 170
% SAT solver learnt clauses: 79
% SAT solver learnt literals: 34
% 
% Sat splits: 7
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 2564
% TWLsolver calls for satisfiability: 4474
% 
% Memory used [KB]: 24306
% Time elapsed: 0.556 s
% ------------------------------
% ------------------------------
% Success in time 1.231 s
