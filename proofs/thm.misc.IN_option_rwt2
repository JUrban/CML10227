Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.misc
% (27400)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 146
% Passive clauses: 3188
% Generated clauses: 19231
% Final active clauses: 104
% Final passive clauses: 2413
% Input formulas: 31
% Initial clauses: 59
% 
% Duplicate literals: 998
% Trivial inequalities: 431
% Fw subsumption resolutions: 2789
% Fw demodulations: 1563
% Bw demodulations: 27
% 
% Simple tautologies: 467
% Equational tautologies: 74
% Forward subsumptions: 7641
% Fw demodulations to eq. taut.: 11
% 
% Binary resolution: 353
% Factoring: 1
% Forward superposition: 5688
% Backward superposition: 6624
% Self superposition: 278
% Equality factoring: 204
% Equality resolution: 40
% 
% Split clauses: 809
% Split components: 1704
% SAT solver clauses: 1576
% SAT solver unit clauses: 64
% SAT solver binary clauses: 310
% SAT solver learnt clauses: 1
% SAT solver learnt literals: 2
% 
% Sat splits: 809
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 1515
% TWLsolver calls for satisfiability: 203
% 
% Memory used [KB]: 9722
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 144 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.misc
% (27426)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit

% Active clauses: 150
% Passive clauses: 1351
% Generated clauses: 8956
% Final active clauses: 81
% Final passive clauses: 941
% Input formulas: 31
% Initial clauses: 59
% 
% Duplicate literals: 286
% Trivial inequalities: 167
% Fw subsumption resolutions: 695
% Fw demodulations: 542
% Bw demodulations: 242
% Condensations: 419
% Global subsumptions: 9
% 
% Simple tautologies: 155
% Equational tautologies: 40
% Forward subsumptions: 3437
% Fw demodulations to eq. taut.: 9
% Bw demodulations to eq. taut.: 34
% 
% Binary resolution: 297
% Factoring: 1
% Forward superposition: 2331
% Backward superposition: 2250
% Self superposition: 124
% Equality factoring: 78
% Equality resolution: 41
% 
% Split clauses: 74
% Split components: 150
% SAT solver clauses: 1893
% SAT solver unit clauses: 76
% SAT solver binary clauses: 82
% SAT solver learnt clauses: 21
% SAT solver learnt literals: 4
% 
% Sat splits: 74
% Sat splitting refutations: 13
% 
% TWLsolver clauses: 1854
% TWLsolver calls for satisfiability: 348
% 
% Memory used [KB]: 9083
% Time elapsed: 0.719 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.misc
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.misc
% SZS output start Proof for thm.misc
fof(f40057,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f113,f174,f173,f112,f176,f111,f178,f172,f603,f604,f664,f668,f672,f676,f677,f4001,f4003,f4005,f4006,f4324,f4325,f4327,f4328,f4329,f4350,f4353,f4382,f4384,f4387,f4389,f4391,f4393,f4397,f4399,f4403,f4405,f4409,f4410,f4411,f4412,f4413,f4415,f4416,f4418,f4419,f4421,f4424,f4426,f4429,f4431,f4511,f4514,f4512,f7465,f7463,f7475,f7706,f7748,f7746,f7700,f7750,f8097,f8100,f8103,f8108,f8112,f8114,f8120,f8122,f8125,f8127,f8135,f8410,f8411,f8412,f8413,f8414,f8415,f8417,f11861,f11836,f11825,f11878,f11758,f12056,f11752,f12064,f11749,f12069,f13739,f13719,f13710,f13812,f14795,f14810,f14794,f14814,f14816,f14809,f14831,f14832,f15750,f15753,f15755,f15751,f16366,f16367,f18833,f18835,f18837,f18834,f18855,f18857,f18859,f18863,f18865,f18867,f18869,f18871,f18873,f18877,f18879,f18881,f18883,f18885,f18887,f18895,f18897,f18899,f18915,f18917,f18919,f19380,f19382,f19381,f19387,f19388,f19389,f19390,f19391,f19392,f20251,f20253,f20255,f20252,f20700,f20723,f22611,f22736,f22582,f22569,f22733,f22832,f22833,f22840,f22844,f22845,f22855,f22856,f22858,f22841,f22859,f23060,f23068,f23069,f23071,f23075,f22483,f23070,f22482,f23239,f23241,f23242,f23244,f23245,f22477,f22476,f23247,f23252,f22470,f23253,f23257,f23258,f23260,f23246,f7749,f22465,f23263,f23267,f22737,f23281,f23283,f23243,f22454,f23356,f23663,f23674,f30647,f30648,f31405,f31407,f31409,f31406,f31416,f31417,f32122,f32260,f32397,f32398,f32399,f32400,f32401,f32431,f32402,f32403,f32404,f32405,f32435,f32406,f32440,f32407,f32441,f32408,f32442,f32409,f32443,f32444,f32411,f32445,f32412,f32446,f32413,f32448,f32414,f32449,f32415,f32450,f32451,f32417,f32452,f32453,f32438,f32419,f32454,f32437,f32420,f32430,f32455,f32421,f32456,f32427,f32422,f32434,f32458,f32423,f32433,f32428,f32459,f34364,f15752,f34365,f35571,f35788,f35572,f35790,f35787,f35830,f37012,f37014,f37018,f37013,f37142,f37144,f37154,f37143,f4002,f37261,f4513,f37265,f37262,f37270,f37015,f37271,f37571,f37573,f37579,f37580,f37572,f38845,f38846,f38848,f38849,f38851,f38855,f38857,f38867,f38885,f38887,f38890,f38893,f38895,f38898,f38900,f38902,f38918,f38922,f38947,f38950,f38959,f38962,f38965,f38968,f38971,f38973,f38974,f38980,f38982,f38984,f38986,f38989,f38990,f38993,f38996,f39003,f39006,f39008,f39012,f39015,f39017,f39019,f39021,f39024,f39027,f39029,f39034,f39038,f39041,f39044,f39051,f39066,f39068,f39071,f39073,f39078,f39082,f39084,f39086,f39089,f39090,f39093,f39095,f39097,f39101,f39103,f39104,f39106,f39108,f39109,f39111,f39112,f39114,f39116,f39118,f39128,f39161,f39163,f39174,f39175,f39182,f39196,f39209,f39214,f39215,f39216,f39219,f39221,f39222,f39225,f39228,f39232,f39235,f39239,f39245,f39253,f39262,f39263,f39264,f39265,f39266,f39267,f39269,f39272,f39276,f39279,f39294,f39309,f39311,f39312,f39313,f39315,f39317,f39328,f39335,f40050,f40056])).
fof(f40056,plain,(
  $false | ($spl2 | $spl153 | $spl156)),
  inference(subsumption_resolution,[],[f40055,f114])).
fof(f114,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f7])).
fof(f7,axiom,(
  p(s(bool,'T_0'))),
  file('thm.misc.IN_option_rwt2','thm.bool.TRUTH')).
fof(f40055,plain,(
  ~p(s(bool,'T_0')) | ($spl2 | $spl153 | $spl156)),
  inference(forward_demodulation,[],[f40048,f35790])).
fof(f40048,plain,(
  ~p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),happ(s(fun(sK1,fun(sK0,bool)),sK3),s(sK1,sK6(sK4,sK1))))))) | ($spl2 | $spl153)),
  inference(trivial_inequality_removal,[],[f40046])).
fof(f40046,plain,(
  s('type.option.option'(sK1),sK4) != s('type.option.option'(sK1),sK4) | ~p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),happ(s(fun(sK1,fun(sK0,bool)),sK3),s(sK1,sK6(sK4,sK1))))))) | ($spl2 | $spl153)),
  inference(superposition,[],[f174,f39367])).
fof(f39367,plain,(
  s('type.option.option'(sK1),sK4) = s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK6(sK4,sK1)))) | $spl153),
  inference(unit_resulting_resolution,[],[f35786,f148])).
fof(f148,plain,(
  ( ! [X0,X1] : (s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK6(X1,X0)))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1)) )),
  inference(cnf_transformation,[],[f101])).
fof(f101,plain,(
  ! [X0,X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1) | s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK6(X1,X0)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK6])],[f53])).
fof(f53,plain,(
  ! [X0,X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1) | ? [X2] : s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))))),
  inference(flattening,[],[f52])).
fof(f52,plain,(
  ! [X0] : ! [X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1) | ? [X2] : s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))))),
  inference(rectify,[],[f26])).
fof(f26,axiom,(
  ! [X6] : ! [X10] : (s('type.option.option'(X6),'const.option.NONE_0') = s('type.option.option'(X6),X10) | ? [X8] : s('type.option.option'(X6),X10) = s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X8))))),
  file('thm.misc.IN_option_rwt2','thm.option.option_nchotomy')).
fof(f35786,plain,(
  s('type.option.option'(sK1),'const.option.NONE_0') != s('type.option.option'(sK1),sK4) | $spl153),
  inference(cnf_transformation,[],[f35786_D])).
fof(f35786_D,plain,(
  s('type.option.option'(sK1),'const.option.NONE_0') != s('type.option.option'(sK1),sK4) <=> ~$spl153),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl153])])).
fof(f40050,plain,(
  $false | ($spl2 | $spl153 | $spl156)),
  inference(subsumption_resolution,[],[f40049,f114])).
fof(f40049,plain,(
  ~p(s(bool,'T_0')) | ($spl2 | $spl153 | $spl156)),
  inference(forward_demodulation,[],[f40041,f35790])).
fof(f40041,plain,(
  ~p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),happ(s(fun(sK1,fun(sK0,bool)),sK3),s(sK1,sK6(sK4,sK1))))))) | ($spl2 | $spl153)),
  inference(unit_resulting_resolution,[],[f39367,f174])).
fof(f39335,plain,(
  $false | ($spl0 | $spl14 | $spl152)),
  inference(global_subsumption,[],[f39334,f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023,f38275,f39033,f39037,f39040,f38840,f39050,f39065,f39072,f38398,f39094,f39096,f39102,f38407,f39105,f39107,f38411,f38420,f39115,f39127,f39160,f39162,f38491,f39195,f39213,f38525,f39218,f39231,f38560,f38569,f38582,f38601,f38604,f38614,f39268,f39271,f39275,f39278,f39293,f39308,f38832,f39314,f39316])).
fof(f39316,plain,(
  ( ! [X39] : (s('type.option.option'(bool),X39) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X39)) ) | ($spl0 | $spl152)),
  inference(subsumption_resolution,[],[f38830,f114])).
fof(f38830,plain,(
  ( ! [X39] : (~p(s(bool,'T_0')) | s('type.option.option'(bool),X39) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X39)) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f31154])).
fof(f39314,plain,(
  ( ! [X72,X73] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X73))) | s('type.option.option'(bool),X72) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X72)) ) | ($spl0 | $spl152)),
  inference(subsumption_resolution,[],[f38829,f158])).
fof(f38829,plain,(
  ( ! [X72,X73] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X73))) | s(bool,'T_0') = s(bool,X73) | s('type.option.option'(bool),X72) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X72)) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f31152])).
fof(f38832,plain,(
  ( ! [X697,X699,X696,X698] : (s(fun(X696,bool),X697) = s(fun(X696,bool),X698) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X699))) | s(bool,X699) = s(bool,g(s(X696,sK8(X697,X698,bool,X696))))) ) | ($spl0 | $spl152)),
  inference(trivial_inequality_removal,[],[f38820])).
fof(f38820,plain,(
  ( ! [X697,X699,X696,X698] : (s(bool,'T_0') != s(bool,'T_0') | s(fun(X696,bool),X697) = s(fun(X696,bool),X698) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X699))) | s(bool,X699) = s(bool,g(s(X696,sK8(X697,X698,bool,X696))))) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f29142])).
fof(f39308,plain,(
  ( ! [X883,X885,X882,X886,X884] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X886))) | s(bool,X886) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X882),X883),s(bool,X884),s(fun(X882,bool),X885))) | s('type.option.option'(X882),'const.option.NONE_0') = s('type.option.option'(X882),X883)) ) | ($spl0 | $spl152)),
  inference(subsumption_resolution,[],[f38798,f35030])).
fof(f38798,plain,(
  ( ! [X883,X885,X882,X886,X884] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X886))) | s(bool,'T_0') != s(bool,happ(s(fun(X882,bool),X885),s(X882,sK6(X883,X882)))) | s(bool,X886) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X882),X883),s(bool,X884),s(fun(X882,bool),X885))) | s('type.option.option'(X882),'const.option.NONE_0') = s('type.option.option'(X882),X883)) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f35569])).
fof(f39293,plain,(
  ( ! [X532,X534,X533,X535] : (s(bool,X535) = s(bool,happ(s(fun(X532,bool),X533),s(X532,X534))) | s(X532,X534) = s(X532,sK7(sK6('const.option.SOME_1'(s(X532,X534)),X532),X533,X532))) ) | ($spl0 | $spl152)),
  inference(subsumption_resolution,[],[f38693,f32269])).
fof(f38693,plain,(
  ( ! [X532,X534,X533,X535] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X535))) | s(bool,X535) = s(bool,happ(s(fun(X532,bool),X533),s(X532,X534))) | s(X532,X534) = s(X532,sK7(sK6('const.option.SOME_1'(s(X532,X534)),X532),X533,X532))) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f32077])).
fof(f39278,plain,(
  ( ! [X282,X281] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X282))) | s('type.option.option'(bool),X281) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X281)) ) | ($spl0 | $spl152)),
  inference(forward_demodulation,[],[f39277,f37880])).
fof(f39277,plain,(
  ( ! [X282,X281] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X282))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6(X281,bool)))) | s('type.option.option'(bool),X281) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X281)) ) | ($spl0 | $spl152)),
  inference(subsumption_resolution,[],[f38654,f37880])).
fof(f38654,plain,(
  ( ! [X282,X281] : (s(bool,'T_0') != s(bool,X282) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X282))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6(X281,bool)))) | s('type.option.option'(bool),X281) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X281)) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f31110])).
fof(f39275,plain,(
  ( ! [X277,X278] : (s(bool,X278) = s(bool,sK6(X277,bool)) | s('type.option.option'(bool),X277) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X277)) ) | ($spl0 | $spl152)),
  inference(subsumption_resolution,[],[f38653,f29146])).
fof(f38653,plain,(
  ( ! [X277,X278] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X278))) | s(bool,X278) = s(bool,sK6(X277,bool)) | s('type.option.option'(bool),X277) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X277)) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f31108])).
fof(f39271,plain,(
  ( ! [X196,X194,X197,X195] : (s(bool,X195) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X196),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X196,bool),X197))) | s('type.option.option'(bool),X194) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X194)) ) | ($spl0 | $spl152)),
  inference(forward_demodulation,[],[f39270,f37880])).
fof(f39270,plain,(
  ( ! [X196,X194,X197,X195] : (s(bool,X195) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X196),'const.option.NONE_0'),s(bool,sK6(X194,bool)),s(fun(X196,bool),X197))) | s('type.option.option'(bool),X194) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X194)) ) | ($spl0 | $spl152)),
  inference(subsumption_resolution,[],[f38651,f37880])).
fof(f38651,plain,(
  ( ! [X196,X194,X197,X195] : (s(bool,'T_0') != s(bool,X195) | s(bool,X195) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X196),'const.option.NONE_0'),s(bool,sK6(X194,bool)),s(fun(X196,bool),X197))) | s('type.option.option'(bool),X194) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X194)) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f31070])).
fof(f39268,plain,(
  ( ! [X202,X201] : (s('type.option.option'(bool),X201) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X202))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X201)) ) | ($spl0 | $spl152)),
  inference(subsumption_resolution,[],[f38626,f29146])).
fof(f38626,plain,(
  ( ! [X202,X201] : (s('type.option.option'(bool),X201) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,X202) != s(bool,sK6(X201,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X202))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X201)) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f30149])).
fof(f38614,plain,(
  ( ! [X152,X151,X153,X150] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X150))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X151))) | s(bool,X150) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X152),'const.option.NONE_0'),s(bool,X151),s(fun(X152,bool),X153)))) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f29990])).
fof(f38604,plain,(
  ( ! [X350,X349,X351,X348] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X348))) | s(bool,X349) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X350),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X350,bool),X351))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X348))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X349)))) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f29970])).
fof(f38601,plain,(
  ( ! [X152,X151,X153,X150] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X150))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X151))) | s(bool,X151) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X152),'const.option.NONE_0'),s(bool,X150),s(fun(X152,bool),X153)))) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f29940])).
fof(f38582,plain,(
  ( ! [X94,X99,X97,X95,X100,X98,X96] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X95))) | s(bool,X94) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X96),'const.option.NONE_0'),s(bool,X95),s(fun(X96,bool),X97))) | s(bool,X98) = s(bool,'const.bool.IN_2'(s(X99,X100),s(fun(X99,bool),'const.pred_set.EMPTY_0'))) | s(bool,X94) = s(bool,X98)) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f29848])).
fof(f38569,plain,(
  ( ! [X255,X257,X259,X260,X254,X256,X258] : (s(bool,X255) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X256),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X256,bool),X257))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X254))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X255))) | s(bool,X258) = s(bool,'const.bool.IN_2'(s(X259,X260),s(fun(X259,bool),'const.pred_set.EMPTY_0'))) | s(bool,X254) = s(bool,X258)) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f29785])).
fof(f38560,plain,(
  ( ! [X94,X99,X97,X95,X100,X98,X96] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X95))) | s(bool,X95) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X96),'const.option.NONE_0'),s(bool,X94),s(fun(X96,bool),X97))) | s(bool,X98) = s(bool,'const.bool.IN_2'(s(X99,X100),s(fun(X99,bool),'const.pred_set.EMPTY_0'))) | s(bool,X94) = s(bool,X98)) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f29753])).
fof(f39231,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0)))) ) | ($spl0 | $spl152)),
  inference(condensation,[],[f39230])).
fof(f39230,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0))) | s(bool,X0) = s(bool,X1) | s(bool,X0) = s(bool,X2)) ) | ($spl0 | $spl152)),
  inference(condensation,[],[f39229])).
fof(f39229,plain,(
  ( ! [X103,X101,X102,X104] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X103))) | s(bool,X102) = s(bool,X103) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X104))) | s(bool,X101) = s(bool,X104)) ) | ($spl0 | $spl152)),
  inference(subsumption_resolution,[],[f38543,f28107])).
fof(f38543,plain,(
  ( ! [X103,X101,X102,X104] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X103))) | s(bool,X101) != s(bool,X102) | s(bool,X102) = s(bool,X103) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X104))) | s(bool,X101) = s(bool,X104)) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f28801])).
fof(f39218,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1))) | s(bool,X1) = s(bool,X2)) ) | ($spl0 | $spl152)),
  inference(condensation,[],[f39217])).
fof(f39217,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X2))) | s(bool,X1) = s(bool,X2) | s(bool,X3) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X0) = s(bool,X3)) ) | ($spl0 | $spl152)),
  inference(subsumption_resolution,[],[f38527,f28108])).
fof(f38527,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X2))) | s(bool,X0) != s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,X3) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X0) = s(bool,X3)) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f27741])).
fof(f38525,plain,(
  ( ! [X134,X132,X130,X133,X131] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X134))) | s(bool,X130) = s(bool,happ(s(fun(X131,bool),X132),s(X131,X133))) | s(X131,X133) = s(X131,sK7(X133,X132,X131)) | s(bool,X130) = s(bool,X134)) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f27378])).
fof(f39213,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1)))) ) | ($spl0 | $spl152)),
  inference(condensation,[],[f39212])).
fof(f39212,plain,(
  ( ! [X10,X11,X9] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X11))) | s(bool,X9) = s(bool,X10) | s(bool,X9) = s(bool,X11)) ) | ($spl0 | $spl152)),
  inference(subsumption_resolution,[],[f38524,f29658])).
fof(f38524,plain,(
  ( ! [X10,X11,X9] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X11))) | p(s(bool,X10)) | s(bool,X9) = s(bool,X10) | s(bool,X9) = s(bool,X11)) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f27365])).
fof(f39195,plain,(
  ( ! [X565,X564,X566] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X566))) | s(bool,X564) = s(bool,sK7(X564,X565,bool)) | s(bool,X564) = s(bool,X566)) ) | ($spl0 | $spl152)),
  inference(subsumption_resolution,[],[f38509,f37880])).
fof(f38509,plain,(
  ( ! [X565,X564,X566] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X566))) | s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X565),s(bool,'F_0'))) | s(bool,X564) = s(bool,sK7(X564,X565,bool)) | s(bool,X564) = s(bool,X566)) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f26809])).
fof(f38491,plain,(
  ( ! [X70,X68,X69] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X70))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X68))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X69))) | s(bool,X69) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X68) = s(bool,X70)) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f26497])).
fof(f39162,plain,(
  ( ! [X8,X9] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X9))) | s(bool,X8) = s(bool,X9)) ) | ($spl0 | $spl152)),
  inference(subsumption_resolution,[],[f38480,f14030])).
fof(f38480,plain,(
  ( ! [X8,X9] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X9))) | s(bool,'T_0') != s(bool,X8) | s(bool,X8) = s(bool,X9)) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f26480])).
fof(f39160,plain,(
  ( ! [X4,X5,X3] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X5))) | ~p(s(bool,X4)) | s(bool,X3) = s(bool,X5)) ) | ($spl0 | $spl152)),
  inference(subsumption_resolution,[],[f38479,f29658])).
fof(f38479,plain,(
  ( ! [X4,X5,X3] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X5))) | s(bool,X3) != s(bool,X4) | ~p(s(bool,X4)) | s(bool,X3) = s(bool,X5)) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f26478])).
fof(f39127,plain,(
  ( ! [X6,X4,X2,X5,X3] : (s(bool,X2) = s(bool,'const.bool.IN_2'(s(X3,X4),s(fun(X3,bool),'const.pred_set.EMPTY_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X5))) | s(bool,X5) = s(bool,X6)) ) | ($spl0 | $spl152)),
  inference(condensation,[],[f39126])).
fof(f39126,plain,(
  ( ! [X19,X17,X15,X20,X18,X16] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X17))) | s(bool,X16) = s(bool,X17) | s(bool,X18) = s(bool,'const.bool.IN_2'(s(X19,X20),s(fun(X19,bool),'const.pred_set.EMPTY_0'))) | s(bool,X15) = s(bool,X18)) ) | ($spl0 | $spl152)),
  inference(subsumption_resolution,[],[f38445,f28800])).
fof(f38445,plain,(
  ( ! [X19,X17,X15,X20,X18,X16] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X17))) | s(bool,X15) = s(bool,X16) | s(bool,X16) = s(bool,X17) | s(bool,X18) = s(bool,'const.bool.IN_2'(s(X19,X20),s(fun(X19,bool),'const.pred_set.EMPTY_0'))) | s(bool,X15) = s(bool,X18)) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f25845])).
fof(f39115,plain,(
  ( ! [X282,X281,X278] : (s(bool,X278) = s(bool,'const.bool.IN_2'(s(X281,X282),s(fun(X281,bool),'const.pred_set.EMPTY_0')))) ) | ($spl0 | $spl152)),
  inference(subsumption_resolution,[],[f38425,f37880])).
fof(f38425,plain,(
  ( ! [X282,X281,X278] : (s(bool,'T_0') != s(bool,X278) | s(bool,X278) = s(bool,'const.bool.IN_2'(s(X281,X282),s(fun(X281,bool),'const.pred_set.EMPTY_0')))) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f23265])).
fof(f38420,plain,(
  ( ! [X198,X200,X199,X201] : (s('type.option.option'(bool),X198) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,X199) = s(bool,'const.bool.IN_2'(s(X200,X201),s(fun(X200,bool),'const.pred_set.EMPTY_0'))) | s(bool,X199) = s(bool,sK6(X198,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X198)) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f22816])).
fof(f38411,plain,(
  ( ! [X878,X876,X880,X875,X879,X877] : (s(X877,f(s(bool,'T_0'))) != s(X877,g(s(bool,'T_0'))) | s(fun(bool,X877),X875) = s(fun(bool,X877),X876) | s(bool,X878) = s(bool,'const.bool.IN_2'(s(X879,X880),s(fun(X879,bool),'const.pred_set.EMPTY_0'))) | s(bool,X878) = s(bool,sK8(X875,X876,X877,bool))) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f22377])).
fof(f39107,plain,(
  ( ! [X841,X839,X837,X840,X838,X836] : (s(fun(X836,bool),X837) = s(fun(X836,bool),X838) | s(bool,X839) = s(bool,'const.bool.IN_2'(s(X840,X841),s(fun(X840,bool),'const.pred_set.EMPTY_0'))) | s(bool,X839) = s(bool,g(s(X836,sK8(X837,X838,bool,X836))))) ) | ($spl0 | $spl152)),
  inference(subsumption_resolution,[],[f38410,f37880])).
fof(f38410,plain,(
  ( ! [X841,X839,X837,X840,X838,X836] : (s(bool,'T_0') != s(bool,f(s(X836,sK8(X837,X838,bool,X836)))) | s(fun(X836,bool),X837) = s(fun(X836,bool),X838) | s(bool,X839) = s(bool,'const.bool.IN_2'(s(X840,X841),s(fun(X840,bool),'const.pred_set.EMPTY_0'))) | s(bool,X839) = s(bool,g(s(X836,sK8(X837,X838,bool,X836))))) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f22370])).
fof(f39105,plain,(
  ( ! [X831,X829,X830,X828,X832] : (s(bool,X828) = s(bool,sK7(X828,X829,bool)) | s(bool,X830) = s(bool,'const.bool.IN_2'(s(X831,X832),s(fun(X831,bool),'const.pred_set.EMPTY_0'))) | s(bool,X828) = s(bool,X830)) ) | ($spl0 | $spl152)),
  inference(subsumption_resolution,[],[f38409,f37880])).
fof(f38409,plain,(
  ( ! [X831,X829,X830,X828,X832] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X829),s(bool,'T_0'))) | s(bool,X828) = s(bool,sK7(X828,X829,bool)) | s(bool,X830) = s(bool,'const.bool.IN_2'(s(X831,X832),s(fun(X831,bool),'const.pred_set.EMPTY_0'))) | s(bool,X828) = s(bool,X830)) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f22369])).
fof(f38407,plain,(
  ( ! [X810,X812,X811,X809,X813] : (s('type.option.option'(bool),X810) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,X809) = s(bool,sK6(X810,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X810) | s(bool,X811) = s(bool,'const.bool.IN_2'(s(X812,X813),s(fun(X812,bool),'const.pred_set.EMPTY_0'))) | s(bool,X809) = s(bool,X811)) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f22365])).
fof(f39102,plain,(
  ( ! [X753,X749,X751,X752,X750] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X749))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X750))) | s(bool,X751) = s(bool,'const.bool.IN_2'(s(X752,X753),s(fun(X752,bool),'const.pred_set.EMPTY_0'))) | s(bool,X749) = s(bool,X751)) ) | ($spl0 | $spl152)),
  inference(subsumption_resolution,[],[f38406,f23346])).
fof(f38406,plain,(
  ( ! [X753,X749,X751,X752,X750] : (s(bool,'T_0') != s(bool,X750) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X749))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X750))) | s(bool,X751) = s(bool,'const.bool.IN_2'(s(X752,X753),s(fun(X752,bool),'const.pred_set.EMPTY_0'))) | s(bool,X749) = s(bool,X751)) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f22354])).
fof(f39096,plain,(
  ( ! [X366,X372,X368,X370,X367,X369,X371] : (s(bool,X366) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X368),'const.option.NONE_0'),s(bool,X367),s(fun(X368,bool),X369))) | s(bool,X370) = s(bool,'const.bool.IN_2'(s(X371,X372),s(fun(X371,bool),'const.pred_set.EMPTY_0'))) | s(bool,X366) = s(bool,X370)) ) | ($spl0 | $spl152)),
  inference(subsumption_resolution,[],[f38404,f37880])).
fof(f38404,plain,(
  ( ! [X366,X372,X368,X370,X367,X369,X371] : (s(bool,'T_0') != s(bool,X367) | s(bool,X366) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X368),'const.option.NONE_0'),s(bool,X367),s(fun(X368,bool),X369))) | s(bool,X370) = s(bool,'const.bool.IN_2'(s(X371,X372),s(fun(X371,bool),'const.pred_set.EMPTY_0'))) | s(bool,X366) = s(bool,X370)) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f22272])).
fof(f39094,plain,(
  ( ! [X364,X360,X362,X359,X365,X361,X363] : (s(bool,X360) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X361),'const.option.NONE_0'),s(bool,X359),s(fun(X361,bool),X362))) | s(bool,X363) = s(bool,'const.bool.IN_2'(s(X364,X365),s(fun(X364,bool),'const.pred_set.EMPTY_0'))) | s(bool,X359) = s(bool,X363)) ) | ($spl0 | $spl152)),
  inference(subsumption_resolution,[],[f38403,f37880])).
fof(f38403,plain,(
  ( ! [X364,X360,X362,X359,X365,X361,X363] : (s(bool,'T_0') != s(bool,X360) | s(bool,X360) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X361),'const.option.NONE_0'),s(bool,X359),s(fun(X361,bool),X362))) | s(bool,X363) = s(bool,'const.bool.IN_2'(s(X364,X365),s(fun(X364,bool),'const.pred_set.EMPTY_0'))) | s(bool,X359) = s(bool,X363)) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f22271])).
fof(f38398,plain,(
  ( ! [X428,X430,X432,X429,X431,X427,X433] : (s(bool,X428) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X429),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X429,bool),X430))) | s(bool,X427) != s(bool,X428) | s(bool,X431) = s(bool,'const.bool.IN_2'(s(X432,X433),s(fun(X432,bool),'const.pred_set.EMPTY_0'))) | s(bool,X427) = s(bool,X431)) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f22159])).
fof(f39072,plain,(
  ( ! [X66,X65] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X65))) | s(bool,X65) = s(bool,sK6(X66,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X66)) ) | ($spl0 | $spl152)),
  inference(subsumption_resolution,[],[f38341,f29146])).
fof(f38341,plain,(
  ( ! [X66,X65] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X65))) | s('type.option.option'(bool),X66) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,X65) = s(bool,sK6(X66,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X66)) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f18133])).
fof(f39065,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,sK6(X1,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X1) | s(bool,X0) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl152)),
  inference(subsumption_resolution,[],[f38332,f13551])).
fof(f38332,plain,(
  ( ! [X0,X1] : (s('type.option.option'(bool),X1) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,X0) = s(bool,sK6(X1,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X1) | s(bool,X0) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f18109])).
fof(f39050,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1)))) ) | ($spl0 | $spl152)),
  inference(condensation,[],[f39049])).
fof(f39049,plain,(
  ( ! [X52,X50,X51] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X51))) | s(bool,X52) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X50) = s(bool,X52)) ) | ($spl0 | $spl152)),
  inference(subsumption_resolution,[],[f38309,f13394])).
fof(f38309,plain,(
  ( ! [X52,X50,X51] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X51))) | s(bool,X50) = s(bool,X51) | s(bool,X52) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X50) = s(bool,X52)) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f18003])).
fof(f38840,plain,(
  ( ! [X185] : (s('type.option.option'(bool),X185) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X185)) ) | ($spl0 | $spl152)),
  inference(duplicate_literal_removal,[],[f38299])).
fof(f38299,plain,(
  ( ! [X185] : (s('type.option.option'(bool),X185) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),X185) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X185)) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f17768])).
fof(f39040,plain,(
  ( ! [X192,X193] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X193))) | s('type.option.option'(bool),X192) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X192)) ) | ($spl0 | $spl152)),
  inference(forward_demodulation,[],[f39039,f37880])).
fof(f39039,plain,(
  ( ! [X192,X193] : (s('type.option.option'(bool),X192) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X193))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6(X192,bool)))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X192)) ) | ($spl0 | $spl152)),
  inference(subsumption_resolution,[],[f38296,f37880])).
fof(f38296,plain,(
  ( ! [X192,X193] : (s('type.option.option'(bool),X192) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,'T_0') != s(bool,X193) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X193))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6(X192,bool)))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X192)) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f17752])).
fof(f39037,plain,(
  ( ! [X189,X188] : (s('type.option.option'(bool),X188) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,X189) = s(bool,sK6(X188,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X188)) ) | ($spl0 | $spl152)),
  inference(subsumption_resolution,[],[f38295,f29146])).
fof(f38295,plain,(
  ( ! [X189,X188] : (s('type.option.option'(bool),X188) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X189))) | s(bool,X189) = s(bool,sK6(X188,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X188)) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f17750])).
fof(f39033,plain,(
  ( ! [X152,X151,X153,X150] : (s(bool,X151) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X152),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X152,bool),X153))) | s('type.option.option'(bool),X150) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X150)) ) | ($spl0 | $spl152)),
  inference(forward_demodulation,[],[f39032,f37880])).
fof(f39032,plain,(
  ( ! [X152,X151,X153,X150] : (s('type.option.option'(bool),X150) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,X151) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X152),'const.option.NONE_0'),s(bool,sK6(X150,bool)),s(fun(X152,bool),X153))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X150)) ) | ($spl0 | $spl152)),
  inference(subsumption_resolution,[],[f38293,f37880])).
fof(f38293,plain,(
  ( ! [X152,X151,X153,X150] : (s('type.option.option'(bool),X150) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,'T_0') != s(bool,X151) | s(bool,X151) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X152),'const.option.NONE_0'),s(bool,sK6(X150,bool)),s(fun(X152,bool),X153))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X150)) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f17730])).
fof(f38275,plain,(
  ( ! [X146,X149,X147,X148] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X146))) | s(bool,X147) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X148),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X148,bool),X149))) | s(bool,X146) != s(bool,X147)) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f17487])).
fof(f39023,plain,(
  ( ! [X249,X248] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X248))) | s(bool,X248) = s(bool,sK7(X248,X249,bool))) ) | ($spl0 | $spl152)),
  inference(subsumption_resolution,[],[f38268,f37880])).
fof(f38268,plain,(
  ( ! [X249,X248] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X248))) | s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X249),s(bool,'T_0'))) | s(bool,X248) = s(bool,sK7(X248,X249,bool))) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f17448])).
fof(f39018,plain,(
  ( ! [X127,X128,X126,X129] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X126))) | s(bool,X126) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X128),'const.option.NONE_0'),s(bool,X127),s(fun(X128,bool),X129)))) ) | ($spl0 | $spl152)),
  inference(subsumption_resolution,[],[f38265,f28187])).
fof(f38265,plain,(
  ( ! [X127,X128,X126,X129] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X126))) | s(bool,'T_0') != s(bool,X127) | s(bool,X126) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X128),'const.option.NONE_0'),s(bool,X127),s(fun(X128,bool),X129)))) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f17385])).
fof(f39016,plain,(
  ( ! [X125,X123,X124,X122] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X122))) | s(bool,X123) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X124),'const.option.NONE_0'),s(bool,X122),s(fun(X124,bool),X125)))) ) | ($spl0 | $spl152)),
  inference(subsumption_resolution,[],[f38264,f27950])).
fof(f38264,plain,(
  ( ! [X125,X123,X124,X122] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X122))) | s(bool,'T_0') != s(bool,X123) | s(bool,X123) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X124),'const.option.NONE_0'),s(bool,X122),s(fun(X124,bool),X125)))) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f17384])).
fof(f39007,plain,(
  ( ! [X184,X183] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X183))) | s(bool,X184) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl152)),
  inference(subsumption_resolution,[],[f38247,f29629])).
fof(f38247,plain,(
  ( ! [X184,X183] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X183))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X183))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X184))) | s(bool,X184) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f17205])).
fof(f39005,plain,(
  ( ! [X0] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0)))) ) | ($spl0 | $spl152)),
  inference(condensation,[],[f39004])).
fof(f39004,plain,(
  ( ! [X218,X219] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X218))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X218))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X219)))) ) | ($spl0 | $spl152)),
  inference(subsumption_resolution,[],[f38246,f29629])).
fof(f38246,plain,(
  ( ! [X218,X219] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X218))) | s(bool,X219) != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X218))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X219)))) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f17089])).
fof(f38901,plain,(
  ( ! [X88,X87] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X87))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X88))) | s(bool,X87) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl152)),
  inference(subsumption_resolution,[],[f38076,f15321])).
fof(f38076,plain,(
  ( ! [X88,X87] : (s(bool,'T_0') != s(bool,X88) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X87))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X88))) | s(bool,X87) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f8985])).
fof(f38884,plain,(
  ( ! [X0] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0)))) ) | ($spl0 | $spl152)),
  inference(subsumption_resolution,[],[f38018,f158])).
fof(f38018,plain,(
  ( ! [X0] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f3994])).
fof(f38854,plain,(
  ( ! [X0] : (s('type.option.option'(bool),X0) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X0)) ) | ($spl0 | $spl152)),
  inference(subsumption_resolution,[],[f37892,f31209])).
fof(f37892,plain,(
  ( ! [X0] : (s('type.option.option'(bool),X0) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,sK6(X0,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X0)) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f458])).
fof(f38847,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl0 | $spl152)),
  inference(subsumption_resolution,[],[f37881,f37880])).
fof(f37881,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | ~p(s(bool,X0))) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f127])).
fof(f37880,plain,(
  ( ! [X3] : (s(bool,'T_0') = s(bool,X3)) ) | ($spl0 | $spl152)),
  inference(subsumption_resolution,[],[f37879,f782])).
fof(f37879,plain,(
  ( ! [X3] : (s(bool,X3) != s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.pred_set.EMPTY_0'))) | s(bool,'T_0') = s(bool,X3)) ) | ($spl0 | $spl152)),
  inference(forward_demodulation,[],[f35800,f166])).
fof(f35800,plain,(
  ( ! [X3] : (s(bool,X3) != s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),'const.option.NONE_0'),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3))))) | s(bool,'T_0') = s(bool,X3)) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f35787,f766])).
fof(f35597,plain,(
  ( ! [X1042,X1040,X1044,X1043,X1041,X1045] : (s('type.option.option'(X1040),'const.option.SOME_1'(s(X1040,X1045))) != s('type.option.option'(X1040),happ(s(fun(X1041,'type.option.option'(X1040)),X1044),s(X1041,sK6(X1042,X1041)))) | s(X1040,X1045) = s(X1040,sK6('const.option.option_CASE_3'(s('type.option.option'(X1041),X1042),s('type.option.option'(X1040),X1043),s(fun(X1041,'type.option.option'(X1040)),X1044)),X1040)) | s('type.option.option'(X1040),'const.option.NONE_0') = s('type.option.option'(X1040),'const.option.option_CASE_3'(s('type.option.option'(X1041),X1042),s('type.option.option'(X1040),X1043),s(fun(X1041,'type.option.option'(X1040)),X1044))) | s('type.option.option'(X1041),'const.option.NONE_0') = s('type.option.option'(X1041),X1042)) )),
  inference(superposition,[],[f459,f559])).
fof(f35591,plain,(
  ( ! [X1006,X1004,X1008,X1003,X1007,X1005] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X1003,bool),happ(s(fun(X1004,fun(X1003,bool)),X1007),s(X1004,sK6(X1005,X1004)))),s(X1003,X1008)))),bool)) | s(X1003,X1008) = s(X1003,sK7(X1008,'const.option.option_CASE_3'(s('type.option.option'(X1004),X1005),s(fun(X1003,bool),X1006),s(fun(X1004,fun(X1003,bool)),X1007)),X1003)) | s('type.option.option'(X1004),'const.option.NONE_0') = s('type.option.option'(X1004),X1005)) ) | $spl0),
  inference(superposition,[],[f33781,f559])).
fof(f35590,plain,(
  ( ! [X1002,X1000,X998,X1001,X999,X997] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X997,bool),happ(s(fun(X998,fun(X997,bool)),X1001),s(X998,sK6(X999,X998)))),s(X997,X1002)))),bool)) | s(X997,X1002) = s(X997,sK7(X1002,'const.option.option_CASE_3'(s('type.option.option'(X998),X999),s(fun(X997,bool),X1000),s(fun(X998,fun(X997,bool)),X1001)),X997)) | s('type.option.option'(X998),'const.option.NONE_0') = s('type.option.option'(X998),X999)) ) | $spl0),
  inference(superposition,[],[f3724,f559])).
fof(f35589,plain,(
  ( ! [X994,X992,X996,X991,X995,X993] : (s(bool,'T_0') != s(bool,happ(s(fun(X991,bool),happ(s(fun(X992,fun(X991,bool)),X995),s(X992,sK6(X993,X992)))),s(X991,X996))) | s(X991,X996) = s(X991,sK7(sK6('const.option.SOME_1'(s(X991,X996)),X991),'const.option.option_CASE_3'(s('type.option.option'(X992),X993),s(fun(X991,bool),X994),s(fun(X992,fun(X991,bool)),X995)),X991)) | s('type.option.option'(X992),'const.option.NONE_0') = s('type.option.option'(X992),X993)) ) | $spl0),
  inference(superposition,[],[f3093,f559])).
fof(f35588,plain,(
  ( ! [X990,X988,X987,X985,X989,X986] : (s(bool,'T_0') != s(bool,happ(s(fun(X985,bool),happ(s(fun(X986,fun(X985,bool)),X989),s(X986,sK6(X987,X986)))),s(X985,X990))) | s(X985,X990) = s(X985,sK7(X990,'const.option.option_CASE_3'(s('type.option.option'(X986),X987),s(fun(X985,bool),X988),s(fun(X986,fun(X985,bool)),X989)),X985)) | s('type.option.option'(X986),'const.option.NONE_0') = s('type.option.option'(X986),X987)) ) | $spl0),
  inference(superposition,[],[f2789,f559])).
fof(f35587,plain,(
  ( ! [X984,X982,X980,X979,X983,X981] : (~p(s(bool,happ(s(fun(X979,bool),happ(s(fun(X980,fun(X979,bool)),X983),s(X980,sK6(X981,X980)))),s(X979,X984)))) | s(X979,sK7(X984,'const.option.option_CASE_3'(s('type.option.option'(X980),X981),s(fun(X979,bool),X982),s(fun(X980,fun(X979,bool)),X983)),X979)) = s(X979,sK7(sK7(X984,'const.option.option_CASE_3'(s('type.option.option'(X980),X981),s(fun(X979,bool),X982),s(fun(X980,fun(X979,bool)),X983)),X979),'const.option.option_CASE_3'(s('type.option.option'(X980),X981),s(fun(X979,bool),X982),s(fun(X980,fun(X979,bool)),X983)),X979)) | s('type.option.option'(X980),'const.option.NONE_0') = s('type.option.option'(X980),X981)) ) | $spl0),
  inference(superposition,[],[f2788,f559])).
fof(f35586,plain,(
  ( ! [X978,X976,X975,X973,X977,X974] : (s(bool,'F_0') = s(bool,happ(s(fun(X973,bool),happ(s(fun(X974,fun(X973,bool)),X977),s(X974,sK6(X975,X974)))),s(X973,X978))) | s(X973,X978) = s(X973,sK7(sK6('const.option.SOME_1'(s(X973,X978)),X973),'const.option.option_CASE_3'(s('type.option.option'(X974),X975),s(fun(X973,bool),X976),s(fun(X974,fun(X973,bool)),X977)),X973)) | s('type.option.option'(X974),'const.option.NONE_0') = s('type.option.option'(X974),X975)) ) | $spl0),
  inference(superposition,[],[f2781,f559])).
fof(f35585,plain,(
  ( ! [X971,X969,X967,X970,X968,X972] : (s(bool,'F_0') = s(bool,happ(s(fun(X967,bool),happ(s(fun(X968,fun(X967,bool)),X971),s(X968,sK6(X969,X968)))),s(X967,X972))) | s(X967,X972) = s(X967,sK7(X972,'const.option.option_CASE_3'(s('type.option.option'(X968),X969),s(fun(X967,bool),X970),s(fun(X968,fun(X967,bool)),X971)),X967)) | s('type.option.option'(X968),'const.option.NONE_0') = s('type.option.option'(X968),X969)) ) | $spl0),
  inference(superposition,[],[f1756,f559])).
fof(f35584,plain,(
  ( ! [X963,X961,X965,X962,X960,X966,X964] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X960),'const.option.SOME_1'(s(X960,X965))),s(bool,X966),s(fun(X960,bool),happ(s(fun(X961,fun(X960,bool)),X964),s(X961,sK6(X962,X961)))))) | s(bool,'F_0') = s(bool,happ(s(fun(X960,bool),'const.option.option_CASE_3'(s('type.option.option'(X961),X962),s(fun(X960,bool),X963),s(fun(X961,fun(X960,bool)),X964))),s(X960,X965))) | s('type.option.option'(X961),'const.option.NONE_0') = s('type.option.option'(X961),X962)) )),
  inference(superposition,[],[f572,f559])).
fof(f35583,plain,(
  ( ! [X957,X954,X958,X956,X955,X959] : (~p(s(bool,happ(s(fun(X954,bool),happ(s(fun(X955,fun(X954,bool)),X958),s(X955,sK6(X956,X955)))),s(X954,X959)))) | s(bool,'T_0') = s(bool,happ(s(fun(X954,bool),'const.option.option_CASE_3'(s('type.option.option'(X955),X956),s(fun(X954,bool),X957),s(fun(X955,fun(X954,bool)),X958))),s(X954,sK7(X959,'const.option.option_CASE_3'(s('type.option.option'(X955),X956),s(fun(X954,bool),X957),s(fun(X955,fun(X954,bool)),X958)),X954)))) | s('type.option.option'(X955),'const.option.NONE_0') = s('type.option.option'(X955),X956)) )),
  inference(superposition,[],[f535,f559])).
fof(f35582,plain,(
  ( ! [X947,X951,X949,X952,X946,X950,X948,X953] : (~p(s(bool,happ(s(fun(X946,bool),happ(s(fun(X947,fun(X946,bool)),X950),s(X947,sK6(X948,X947)))),s(X946,X951)))) | s(X946,X951) = s(X946,sK7('const.option.option_CASE_3'(s('type.option.option'(X952),'const.option.NONE_0'),s(X946,X951),s(fun(X952,X946),X953)),'const.option.option_CASE_3'(s('type.option.option'(X947),X948),s(fun(X946,bool),X949),s(fun(X947,fun(X946,bool)),X950)),X946)) | s('type.option.option'(X947),'const.option.NONE_0') = s('type.option.option'(X947),X948)) )),
  inference(superposition,[],[f447,f559])).
fof(f35581,plain,(
  ( ! [X945,X938,X942,X940,X944,X939,X943,X941] : (~p(s(bool,happ(s(fun(X938,bool),happ(s(fun(X939,fun(X938,bool)),X942),s(X939,sK6(X940,X939)))),s(X938,X943)))) | s(X938,X943) = s(X938,sK7(X943,'const.option.option_CASE_3'(s('type.option.option'(X944),'const.option.NONE_0'),s(fun(X938,bool),'const.option.option_CASE_3'(s('type.option.option'(X939),X940),s(fun(X938,bool),X941),s(fun(X939,fun(X938,bool)),X942))),s(fun(X944,fun(X938,bool)),X945)),X938)) | s('type.option.option'(X939),'const.option.NONE_0') = s('type.option.option'(X939),X940)) )),
  inference(superposition,[],[f434,f559])).
fof(f35579,plain,(
  ( ! [X926,X930,X928,X927,X931,X929] : (p(s(bool,happ(s(fun(X926,bool),happ(s(fun(X927,fun(X926,bool)),X930),s(X927,sK6(X928,X927)))),s(X926,sK7(X931,'const.option.option_CASE_3'(s('type.option.option'(X927),X928),s(fun(X926,bool),X929),s(fun(X927,fun(X926,bool)),X930)),X926))))) | ~p(s(bool,happ(s(fun(X926,bool),'const.option.option_CASE_3'(s('type.option.option'(X927),X928),s(fun(X926,bool),X929),s(fun(X927,fun(X926,bool)),X930))),s(X926,X931)))) | s('type.option.option'(X927),'const.option.NONE_0') = s('type.option.option'(X927),X928)) )),
  inference(superposition,[],[f161,f559])).
fof(f35578,plain,(
  ( ! [X922,X920,X924,X923,X921,X925] : (~p(s(bool,happ(s(fun(X920,bool),happ(s(fun(X921,fun(X920,bool)),X924),s(X921,sK6(X922,X921)))),s(X920,X925)))) | s(X920,X925) = s(X920,sK7(X925,'const.option.option_CASE_3'(s('type.option.option'(X921),X922),s(fun(X920,bool),X923),s(fun(X921,fun(X920,bool)),X924)),X920)) | s('type.option.option'(X921),'const.option.NONE_0') = s('type.option.option'(X921),X922)) )),
  inference(superposition,[],[f160,f559])).
fof(f35577,plain,(
  ( ! [X918,X916,X914,X915,X913,X919,X917] : (~p(s(bool,happ(s(fun(X913,bool),happ(s(fun(X914,fun(X913,bool)),X917),s(X914,sK6(X915,X914)))),s(X913,X918)))) | p(s(bool,happ(s(fun(X913,bool),'const.option.option_CASE_3'(s('type.option.option'(X914),X915),s(fun(X913,bool),X916),s(fun(X914,fun(X913,bool)),X917))),s(X913,X919)))) | s(X913,X918) != s(X913,X919) | s('type.option.option'(X914),'const.option.NONE_0') = s('type.option.option'(X914),X915)) )),
  inference(superposition,[],[f159,f559])).
fof(f35576,plain,(
  ( ! [X912,X911,X909,X910,X908] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(X908,fun(bool,bool)),X911),s(X908,sK6(X909,X908)))),s(bool,'T_0')))) | s(bool,X912) = s(bool,sK7(X912,'const.option.option_CASE_3'(s('type.option.option'(X908),X909),s(fun(bool,bool),X910),s(fun(X908,fun(bool,bool)),X911)),bool)) | s(bool,'F_0') = s(bool,X912) | s('type.option.option'(X908),'const.option.NONE_0') = s('type.option.option'(X908),X909)) ) | $spl0),
  inference(superposition,[],[f1761,f559])).
fof(f35575,plain,(
  ( ! [X907,X905,X903,X906,X904] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(X903,fun(bool,bool)),X906),s(X903,sK6(X904,X903)))),s(bool,X907)))) | s(bool,'F_0') = s(bool,sK7('F_0','const.option.option_CASE_3'(s('type.option.option'(X903),X904),s(fun(bool,bool),X905),s(fun(X903,fun(bool,bool)),X906)),bool)) | s(bool,'T_0') = s(bool,X907) | s('type.option.option'(X903),'const.option.NONE_0') = s('type.option.option'(X903),X904)) )),
  inference(superposition,[],[f439,f559])).
fof(f35574,plain,(
  ( ! [X899,X901,X898,X902,X900] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(X898,fun(bool,bool)),X901),s(X898,sK6(X899,X898)))),s(bool,'F_0')))) | s(bool,X902) = s(bool,sK7(X902,'const.option.option_CASE_3'(s('type.option.option'(X898),X899),s(fun(bool,bool),X900),s(fun(X898,fun(bool,bool)),X901)),bool)) | s(bool,'T_0') = s(bool,X902) | s('type.option.option'(X898),'const.option.NONE_0') = s('type.option.option'(X898),X899)) )),
  inference(superposition,[],[f440,f559])).
fof(f35573,plain,(
  ( ! [X895,X893,X897,X894,X896] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(X893,fun(bool,bool)),X896),s(X893,sK6(X894,X893)))),s(bool,X897)))) | p(s(bool,happ(s(fun(bool,bool),'const.option.option_CASE_3'(s('type.option.option'(X893),X894),s(fun(bool,bool),X895),s(fun(X893,fun(bool,bool)),X896))),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X897,'const.option.option_CASE_3'(s('type.option.option'(X893),X894),s(fun(bool,bool),X895),s(fun(X893,fun(bool,bool)),X896)),bool)) | s('type.option.option'(X893),'const.option.NONE_0') = s('type.option.option'(X893),X894)) )),
  inference(superposition,[],[f532,f559])).
fof(f35570,plain,(
  ( ! [X887,X890,X888,X891,X889] : (~p(s(bool,happ(s(fun(X887,bool),X890),s(X887,sK6(X888,X887))))) | s(bool,X891) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X887),X888),s(bool,X889),s(fun(X887,bool),X890))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X891))) | s('type.option.option'(X887),'const.option.NONE_0') = s('type.option.option'(X887),X888)) ) | $spl0),
  inference(superposition,[],[f29621,f559])).
fof(f35569,plain,(
  ( ! [X883,X885,X882,X886,X884] : (s(bool,'T_0') != s(bool,happ(s(fun(X882,bool),X885),s(X882,sK6(X883,X882)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X886))) | s(bool,X886) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X882),X883),s(bool,X884),s(fun(X882,bool),X885))) | s('type.option.option'(X882),'const.option.NONE_0') = s('type.option.option'(X882),X883)) ) | $spl0),
  inference(superposition,[],[f26480,f559])).
fof(f35567,plain,(
  ( ! [X872,X870,X868,X873,X867,X871,X869] : (s(bool,X871) != s(bool,happ(s(fun(X867,bool),X870),s(X867,sK6(X868,X867)))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X867),X868),s(bool,X869),s(fun(X867,bool),X870))) | s(bool,X871) = s(bool,'const.bool.IN_2'(s(X872,X873),s(fun(X872,bool),'const.pred_set.EMPTY_0'))) | s('type.option.option'(X867),'const.option.NONE_0') = s('type.option.option'(X867),X868)) ) | $spl0),
  inference(superposition,[],[f23308,f559])).
fof(f35559,plain,(
  ( ! [X819,X817,X823,X821,X818,X822,X820] : (s(bool,'T_0') != s(bool,happ(s(fun(X817,bool),X820),s(X817,sK6(X818,X817)))) | s(bool,X821) = s(bool,'const.bool.IN_2'(s(X822,X823),s(fun(X822,bool),'const.pred_set.EMPTY_0'))) | s(bool,X821) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X817),X818),s(bool,X819),s(fun(X817,bool),X820))) | s('type.option.option'(X817),'const.option.NONE_0') = s('type.option.option'(X817),X818)) ) | $spl0),
  inference(superposition,[],[f22072,f559])).
fof(f35557,plain,(
  ( ! [X810,X808,X811,X809] : (p(s(bool,happ(s(fun(X808,bool),X811),s(X808,sK6(X809,X808))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X808),X809),s(bool,X810),s(fun(X808,bool),X811))))) | s('type.option.option'(X808),'const.option.NONE_0') = s('type.option.option'(X808),X809)) ) | $spl0),
  inference(superposition,[],[f17462,f559])).
fof(f35556,plain,(
  ( ! [X806,X804,X803,X807,X805] : (~p(s(bool,happ(s(fun(X803,bool),X806),s(X803,sK6(X804,X803))))) | s(bool,X807) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X803),X804),s(bool,X805),s(fun(X803,bool),X806))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X807))) | s('type.option.option'(X803),'const.option.NONE_0') = s('type.option.option'(X803),X804)) ) | $spl0),
  inference(superposition,[],[f17344,f559])).
fof(f35550,plain,(
  ( ! [X779,X777,X781,X778,X780] : (s(bool,'F_0') != s(bool,happ(s(fun(X777,bool),X780),s(X777,sK6(X778,X777)))) | s(bool,X781) = s(bool,sK6('const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X777),X778),s(bool,X779),s(fun(X777,bool),X780)))),bool)) | s(bool,'T_0') = s(bool,X781) | s('type.option.option'(X777),'const.option.NONE_0') = s('type.option.option'(X777),X778)) ) | $spl0),
  inference(superposition,[],[f14507,f559])).
fof(f35545,plain,(
  ( ! [X753,X755,X756,X752,X754] : (s(bool,'F_0') != s(bool,happ(s(fun(X752,bool),X755),s(X752,sK6(X753,X752)))) | s(bool,X756) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X752),X753),s(bool,X754),s(fun(X752,bool),X755))) | s(bool,'T_0') = s(bool,X756) | s('type.option.option'(X752),'const.option.NONE_0') = s('type.option.option'(X752),X753)) ) | $spl0),
  inference(superposition,[],[f13980,f559])).
fof(f35534,plain,(
  ( ! [X697,X699,X700,X702,X696,X698,X701] : (s(bool,X700) != s(bool,happ(s(fun(X696,bool),X699),s(X696,sK6(X697,X696)))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(X701),'const.option.NONE_0'),s(bool,X700),s(fun(X701,bool),X702))) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X696),X697),s(bool,X698),s(fun(X696,bool),X699))) | s('type.option.option'(X696),'const.option.NONE_0') = s('type.option.option'(X696),X697)) ) | $spl0),
  inference(superposition,[],[f9763,f559])).
fof(f35533,plain,(
  ( ! [X693,X695,X689,X691,X692,X694,X690] : (s(bool,X693) != s(bool,happ(s(fun(X689,bool),X692),s(X689,sK6(X690,X689)))) | s(bool,X693) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X694),'const.option.NONE_0'),s(bool,'const.option.option_CASE_3'(s('type.option.option'(X689),X690),s(bool,X691),s(fun(X689,bool),X692))),s(fun(X694,bool),X695))) | s('type.option.option'(X689),'const.option.NONE_0') = s('type.option.option'(X689),X690)) ) | $spl0),
  inference(superposition,[],[f9763,f559])).
fof(f35527,plain,(
  ( ! [X662,X664,X661,X663] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X661,bool),X664),s(X661,sK6(X662,X661))))),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X661),X662),s(bool,X663),s(fun(X661,bool),X664))))) | s('type.option.option'(X661),'const.option.NONE_0') = s('type.option.option'(X661),X662)) ) | $spl0),
  inference(superposition,[],[f9094,f559])).
fof(f35515,plain,(
  ( ! [X613,X615,X611,X616,X612,X614] : (s(bool,'T_0') != s(bool,happ(s(fun(X611,bool),X614),s(X611,sK6(X612,X611)))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X615),'const.option.NONE_0'),s(bool,'const.option.option_CASE_3'(s('type.option.option'(X611),X612),s(bool,X613),s(fun(X611,bool),X614))),s(fun(X615,bool),X616))) | s('type.option.option'(X611),'const.option.NONE_0') = s('type.option.option'(X611),X612)) ) | $spl0),
  inference(superposition,[],[f5098,f559])).
fof(f35512,plain,(
  ( ! [X600,X602,X601,X599] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X599,bool),X602),s(X599,sK6(X600,X599))))),bool)) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X599),X600),s(bool,X601),s(fun(X599,bool),X602))) | s('type.option.option'(X599),'const.option.NONE_0') = s('type.option.option'(X599),X600)) ) | $spl0),
  inference(superposition,[],[f4597,f559])).
fof(f35510,plain,(
  ( ! [X592,X594,X590,X593,X589,X591] : (s(bool,'F_0') != s(bool,happ(s(fun(X589,bool),X592),s(X589,sK6(X590,X589)))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X593),'const.option.NONE_0'),s(bool,'const.option.option_CASE_3'(s('type.option.option'(X589),X590),s(bool,X591),s(fun(X589,bool),X592))),s(fun(X593,bool),X594))) | s('type.option.option'(X589),'const.option.NONE_0') = s('type.option.option'(X589),X590)) ) | $spl0),
  inference(superposition,[],[f4508,f559])).
fof(f35509,plain,(
  ( ! [X588,X584,X586,X585,X587] : (s(bool,sK6('const.option.SOME_1'(s(bool,X588)),bool)) != s(bool,happ(s(fun(X584,bool),X587),s(X584,sK6(X585,X584)))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X584),X585),s(bool,X586),s(fun(X584,bool),X587))) | s(bool,'T_0') = s(bool,X588) | s('type.option.option'(X584),'const.option.NONE_0') = s('type.option.option'(X584),X585)) ) | $spl0),
  inference(superposition,[],[f4477,f559])).
fof(f35508,plain,(
  ( ! [X580,X582,X581,X583,X579] : (s(bool,X583) != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X579,bool),X582),s(X579,sK6(X580,X579))))),bool)) | s(bool,'F_0') = s(bool,X583) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X579),X580),s(bool,X581),s(fun(X579,bool),X582))) | s('type.option.option'(X579),'const.option.NONE_0') = s('type.option.option'(X579),X580)) ) | $spl0),
  inference(superposition,[],[f4477,f559])).
fof(f35506,plain,(
  ( ! [X573,X571,X572,X574] : (s(bool,'F_0') != s(bool,happ(s(fun(X571,bool),X574),s(X571,sK6(X572,X571)))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X571),X572),s(bool,X573),s(fun(X571,bool),X574)))),bool)) | s('type.option.option'(X571),'const.option.NONE_0') = s('type.option.option'(X571),X572)) ) | $spl0),
  inference(superposition,[],[f3910,f559])).
fof(f35501,plain,(
  ( ! [X546,X549,X547,X548,X550] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X546,bool),X549),s(X546,sK6(X547,X546))))),bool)) | s(bool,X550) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X546),X547),s(bool,X548),s(fun(X546,bool),X549))) | s(bool,'F_0') = s(bool,X550) | s('type.option.option'(X546),'const.option.NONE_0') = s('type.option.option'(X546),X547)) ) | $spl0),
  inference(superposition,[],[f3886,f559])).
fof(f35744,plain,(
  ( ! [X540,X538,X541,X539] : (s(bool,'F_0') != s(bool,happ(s(fun(X538,bool),X541),s(X538,sK6(X539,X538)))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X538),X539),s(bool,X540),s(fun(X538,bool),X541))) | s('type.option.option'(X538),'const.option.NONE_0') = s('type.option.option'(X538),X539)) ) | $spl0),
  inference(forward_demodulation,[],[f35499,f901])).
fof(f35499,plain,(
  ( ! [X540,X538,X541,X539] : (s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) != s(bool,happ(s(fun(X538,bool),X541),s(X538,sK6(X539,X538)))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X538),X539),s(bool,X540),s(fun(X538,bool),X541))) | s('type.option.option'(X538),'const.option.NONE_0') = s('type.option.option'(X538),X539)) ) | $spl0),
  inference(superposition,[],[f3597,f559])).
fof(f35498,plain,(
  ( ! [X536,X534,X537,X533,X535] : (s(bool,X537) != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X533,bool),X536),s(X533,sK6(X534,X533))))),bool)) | s(bool,X537) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X533),X534),s(bool,X535),s(fun(X533,bool),X536))) | s(bool,'F_0') = s(bool,X537) | s('type.option.option'(X533),'const.option.NONE_0') = s('type.option.option'(X533),X534)) ) | $spl0),
  inference(superposition,[],[f3585,f559])).
fof(f35497,plain,(
  ( ! [X532,X528,X530,X529,X531] : (s(bool,sK6('const.option.SOME_1'(s(bool,X532)),bool)) != s(bool,happ(s(fun(X528,bool),X531),s(X528,sK6(X529,X528)))) | s(bool,X532) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X528),X529),s(bool,X530),s(fun(X528,bool),X531))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X528),X529),s(bool,X530),s(fun(X528,bool),X531))) | s('type.option.option'(X528),'const.option.NONE_0') = s('type.option.option'(X528),X529)) ) | $spl0),
  inference(superposition,[],[f3585,f559])).
fof(f35496,plain,(
  ( ! [X524,X526,X525,X527,X523] : (s(bool,'T_0') != s(bool,happ(s(fun(X523,bool),X526),s(X523,sK6(X524,X523)))) | s(bool,X527) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X523),X524),s(bool,X525),s(fun(X523,bool),X526))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X527)),bool)) | s('type.option.option'(X523),'const.option.NONE_0') = s('type.option.option'(X523),X524)) ) | $spl0),
  inference(superposition,[],[f3405,f559])).
fof(f35491,plain,(
  ( ! [X492,X494,X488,X490,X493,X489,X491] : (p(s(bool,happ(s(fun(X488,bool),X491),s(X488,sK6(X489,X488))))) | s(bool,happ(s(fun(X492,bool),X493),s(X492,X494))) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X488),X489),s(bool,X490),s(fun(X488,bool),X491))) | s(X492,X494) = s(X492,sK7(X494,X493,X492)) | s('type.option.option'(X488),'const.option.NONE_0') = s('type.option.option'(X488),X489)) ) | $spl0),
  inference(superposition,[],[f2790,f559])).
fof(f35490,plain,(
  ( ! [X484,X486,X485,X487,X483] : (s(bool,'T_0') != s(bool,happ(s(fun(X483,bool),X486),s(X483,sK6(X484,X483)))) | s(bool,X487) = s(bool,sK6('const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X483),X484),s(bool,X485),s(fun(X483,bool),X486)))),bool)) | s(bool,'F_0') = s(bool,X487) | s('type.option.option'(X483),'const.option.NONE_0') = s('type.option.option'(X483),X484)) ) | $spl0),
  inference(superposition,[],[f2660,f559])).
fof(f35489,plain,(
  ( ! [X478,X480,X482,X477,X479,X481] : (s(bool,X481) != s(bool,happ(s(fun(X477,bool),X480),s(X477,sK6(X478,X477)))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X477),X478),s(bool,X479),s(fun(X477,bool),X480))) | s(bool,X481) = s(bool,X482) | s(bool,'F_0') = s(bool,X482) | s('type.option.option'(X477),'const.option.NONE_0') = s('type.option.option'(X477),X478)) ) | $spl0),
  inference(superposition,[],[f2517,f559])).
fof(f35488,plain,(
  ( ! [X476,X472,X474,X471,X475,X473] : (s(bool,X475) != s(bool,happ(s(fun(X471,bool),X474),s(X471,sK6(X472,X471)))) | s(bool,'F_0') = s(bool,X475) | s(bool,X476) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X471),X472),s(bool,X473),s(fun(X471,bool),X474))) | s(bool,'F_0') = s(bool,X476) | s('type.option.option'(X471),'const.option.NONE_0') = s('type.option.option'(X471),X472)) ) | $spl0),
  inference(superposition,[],[f2517,f559])).
fof(f35487,plain,(
  ( ! [X466,X469,X467,X468,X470] : (s(bool,X470) != s(bool,happ(s(fun(X466,bool),X469),s(X466,sK6(X467,X466)))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X470)),bool)) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X466),X467),s(bool,X468),s(fun(X466,bool),X469))) | s('type.option.option'(X466),'const.option.NONE_0') = s('type.option.option'(X466),X467)) ) | $spl0),
  inference(superposition,[],[f2494,f559])).
fof(f35486,plain,(
  ( ! [X461,X463,X465,X462,X464] : (s(bool,X465) != s(bool,happ(s(fun(X461,bool),X464),s(X461,sK6(X462,X461)))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X461),X462),s(bool,X463),s(fun(X461,bool),X464)))),bool)) | s(bool,'F_0') = s(bool,X465) | s('type.option.option'(X461),'const.option.NONE_0') = s('type.option.option'(X461),X462)) ) | $spl0),
  inference(superposition,[],[f2494,f559])).
fof(f35485,plain,(
  ( ! [X457,X459,X460,X456,X458] : (s(bool,X460) != s(bool,happ(s(fun(X456,bool),X459),s(X456,sK6(X457,X456)))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X456),X457),s(bool,X458),s(fun(X456,bool),X459))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X460)),bool)) | s('type.option.option'(X456),'const.option.NONE_0') = s('type.option.option'(X456),X457)) ) | $spl0),
  inference(superposition,[],[f2471,f559])).
fof(f35484,plain,(
  ( ! [X453,X455,X451,X452,X454] : (s(bool,X455) != s(bool,happ(s(fun(X451,bool),X454),s(X451,sK6(X452,X451)))) | s(bool,'T_0') = s(bool,X455) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X451),X452),s(bool,X453),s(fun(X451,bool),X454)))),bool)) | s('type.option.option'(X451),'const.option.NONE_0') = s('type.option.option'(X451),X452)) ) | $spl0),
  inference(superposition,[],[f2471,f559])).
fof(f35483,plain,(
  ( ! [X445,X447,X449,X446,X448,X450] : (p(s(bool,happ(s(fun(X445,bool),X448),s(X445,sK6(X446,X445))))) | s(bool,X449) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X445),X446),s(bool,X447),s(fun(X445,bool),X448))) | s(bool,X449) = s(bool,X450) | s(bool,'F_0') = s(bool,X450) | s('type.option.option'(X445),'const.option.NONE_0') = s('type.option.option'(X445),X446)) ) | $spl0),
  inference(superposition,[],[f2416,f559])).
fof(f35482,plain,(
  ( ! [X441,X443,X444,X440,X442] : (s(bool,'T_0') != s(bool,happ(s(fun(X440,bool),X443),s(X440,sK6(X441,X440)))) | s(bool,X444) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X440),X441),s(bool,X442),s(fun(X440,bool),X443))) | s(bool,'F_0') = s(bool,X444) | s('type.option.option'(X440),'const.option.NONE_0') = s('type.option.option'(X440),X441)) ) | $spl0),
  inference(superposition,[],[f2035,f559])).
fof(f35481,plain,(
  ( ! [X436,X438,X434,X437,X439,X435] : (~p(s(bool,happ(s(fun(X434,bool),X437),s(X434,sK6(X435,X434))))) | s(bool,X438) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X434),X435),s(bool,X436),s(fun(X434,bool),X437))) | s(bool,X438) = s(bool,X439) | s(bool,'F_0') = s(bool,X439) | s('type.option.option'(X434),'const.option.NONE_0') = s('type.option.option'(X434),X435)) ) | $spl0),
  inference(superposition,[],[f2033,f559])).
fof(f35476,plain,(
  ( ! [X412,X410,X413,X409,X411] : (s(bool,X413) != s(bool,happ(s(fun(X409,bool),X412),s(X409,sK6(X410,X409)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X413))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X409),X410),s(bool,X411),s(fun(X409,bool),X412))) | s('type.option.option'(X409),'const.option.NONE_0') = s('type.option.option'(X409),X410)) ) | $spl0),
  inference(superposition,[],[f1774,f559])).
fof(f35475,plain,(
  ( ! [X408,X405,X407,X404,X406] : (s(bool,X408) != s(bool,happ(s(fun(X404,bool),X407),s(X404,sK6(X405,X404)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X404),X405),s(bool,X406),s(fun(X404,bool),X407))))) | s(bool,'F_0') = s(bool,X408) | s('type.option.option'(X404),'const.option.NONE_0') = s('type.option.option'(X404),X405)) ) | $spl0),
  inference(superposition,[],[f1774,f559])).
fof(f35474,plain,(
  ( ! [X399,X401,X403,X400,X402] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X399,bool),X402),s(X399,sK6(X400,X399)))))) | s(bool,X403) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X399),X400),s(bool,X401),s(fun(X399,bool),X402))) | s(bool,'F_0') = s(bool,X403) | s('type.option.option'(X399),'const.option.NONE_0') = s('type.option.option'(X399),X400)) ) | $spl0),
  inference(superposition,[],[f1758,f559])).
fof(f35473,plain,(
  ( ! [X397,X395,X396,X398,X394] : (s(bool,X398) != s(bool,happ(s(fun(X394,bool),X397),s(X394,sK6(X395,X394)))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X394),X395),s(bool,X396),s(fun(X394,bool),X397))) | s(bool,'F_0') = s(bool,X398) | s('type.option.option'(X394),'const.option.NONE_0') = s('type.option.option'(X394),X395)) ) | $spl0),
  inference(superposition,[],[f1747,f559])).
fof(f35472,plain,(
  ( ! [X389,X391,X393,X390,X392] : (s(bool,X393) != s(bool,happ(s(fun(X389,bool),X392),s(X389,sK6(X390,X389)))) | s(bool,'T_0') = s(bool,X393) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X389),X390),s(bool,X391),s(fun(X389,bool),X392))) | s('type.option.option'(X389),'const.option.NONE_0') = s('type.option.option'(X389),X390)) ) | $spl0),
  inference(superposition,[],[f1747,f559])).
fof(f35741,plain,(
  ( ! [X366,X368,X365,X367] : (s(bool,'T_0') != s(bool,happ(s(fun(X365,bool),X368),s(X365,sK6(X366,X365)))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X365),X366),s(bool,X367),s(fun(X365,bool),X368))) | s('type.option.option'(X365),'const.option.NONE_0') = s('type.option.option'(X365),X366)) ) | $spl0),
  inference(forward_demodulation,[],[f35467,f689])).
fof(f35467,plain,(
  ( ! [X366,X368,X365,X367] : (s(bool,happ(s(fun(X365,bool),X368),s(X365,sK6(X366,X365)))) != s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3))))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X365),X366),s(bool,X367),s(fun(X365,bool),X368))) | s('type.option.option'(X365),'const.option.NONE_0') = s('type.option.option'(X365),X366)) ) | $spl0),
  inference(superposition,[],[f766,f559])).
fof(f35465,plain,(
  ( ! [X356,X354,X357,X353,X355] : (~p(s(bool,happ(s(fun(bool,bool),X357),s(bool,happ(s(fun(X353,bool),X356),s(X353,sK6(X354,X353))))))) | p(s(bool,happ(s(fun(bool,bool),X357),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X353),X354),s(bool,X355),s(fun(X353,bool),X356)),X357,bool)) | s('type.option.option'(X353),'const.option.NONE_0') = s('type.option.option'(X353),X354)) )),
  inference(superposition,[],[f532,f559])).
fof(f35464,plain,(
  ( ! [X350,X352,X349,X351,X348] : (~p(s(bool,happ(s(fun(bool,bool),X352),s(bool,happ(s(fun(X348,bool),X351),s(X348,sK6(X349,X348))))))) | s(bool,'F_0') = s(bool,sK7('F_0',X352,bool)) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X348),X349),s(bool,X350),s(fun(X348,bool),X351))) | s('type.option.option'(X348),'const.option.NONE_0') = s('type.option.option'(X348),X349)) )),
  inference(superposition,[],[f439,f559])).
fof(f35463,plain,(
  ( ! [X344,X346,X343,X345,X347] : (s(bool,'F_0') != s(bool,happ(s(fun(X343,bool),X346),s(X343,sK6(X344,X343)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X347))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X343),X344),s(bool,X345),s(fun(X343,bool),X346))))) | s(bool,'T_0') = s(bool,X347) | s('type.option.option'(X343),'const.option.NONE_0') = s('type.option.option'(X343),X344)) )),
  inference(superposition,[],[f404,f559])).
fof(f35462,plain,(
  ( ! [X341,X339,X340,X342,X338] : (s(bool,X342) != s(bool,happ(s(fun(X338,bool),X341),s(X338,sK6(X339,X338)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X338),X339),s(bool,X340),s(fun(X338,bool),X341))))) | s(bool,'T_0') = s(bool,X342) | s('type.option.option'(X338),'const.option.NONE_0') = s('type.option.option'(X338),X339)) )),
  inference(superposition,[],[f403,f559])).
fof(f35461,plain,(
  ( ! [X333,X335,X337,X334,X336] : (s(bool,X337) != s(bool,happ(s(fun(X333,bool),X336),s(X333,sK6(X334,X333)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X337))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X333),X334),s(bool,X335),s(fun(X333,bool),X336))) | s('type.option.option'(X333),'const.option.NONE_0') = s('type.option.option'(X333),X334)) )),
  inference(superposition,[],[f403,f559])).
fof(f35460,plain,(
  ( ! [X329,X331,X332,X328,X330] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X328,bool),X331),s(X328,sK6(X329,X328)))))) | s(bool,X332) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X328),X329),s(bool,X330),s(fun(X328,bool),X331))) | s(bool,'T_0') = s(bool,X332) | s('type.option.option'(X328),'const.option.NONE_0') = s('type.option.option'(X328),X329)) )),
  inference(superposition,[],[f362,f559])).
fof(f35459,plain,(
  ( ! [X325,X327,X323,X324,X326] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X327))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X323,bool),X326),s(X323,sK6(X324,X323)))))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X323),X324),s(bool,X325),s(fun(X323,bool),X326))) | s(bool,'T_0') = s(bool,X327) | s('type.option.option'(X323),'const.option.NONE_0') = s('type.option.option'(X323),X324)) )),
  inference(superposition,[],[f361,f559])).
fof(f35458,plain,(
  ( ! [X321,X318,X320,X322,X319] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X322))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X318,bool),X321),s(X318,sK6(X319,X318)))))) | s(bool,'F_0') = s(bool,X322) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X318),X319),s(bool,X320),s(fun(X318,bool),X321))) | s('type.option.option'(X318),'const.option.NONE_0') = s('type.option.option'(X318),X319)) )),
  inference(superposition,[],[f361,f559])).
fof(f35457,plain,(
  ( ! [X313,X315,X316,X312,X314,X317] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X316),'const.option.NONE_0'),s(bool,happ(s(fun(X312,bool),X315),s(X312,sK6(X313,X312)))),s(fun(X316,bool),X317))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X312),X313),s(bool,X314),s(fun(X312,bool),X315))) | s('type.option.option'(X312),'const.option.NONE_0') = s('type.option.option'(X312),X313)) )),
  inference(superposition,[],[f298,f559])).
fof(f35456,plain,(
  ( ! [X308,X310,X309,X311,X307] : (p(s(bool,happ(s(fun(X307,bool),X310),s(X307,sK6(X308,X307))))) | s(bool,X311) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X307),X308),s(bool,X309),s(fun(X307,bool),X310))) | s(bool,'T_0') = s(bool,X311) | s('type.option.option'(X307),'const.option.NONE_0') = s('type.option.option'(X307),X308)) )),
  inference(superposition,[],[f243,f559])).
fof(f35455,plain,(
  ( ! [X302,X304,X306,X303,X305] : (~p(s(bool,happ(s(fun(X302,bool),X305),s(X302,sK6(X303,X302))))) | s(bool,X306) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X302),X303),s(bool,X304),s(fun(X302,bool),X305))) | s(bool,'T_0') = s(bool,X306) | s('type.option.option'(X302),'const.option.NONE_0') = s('type.option.option'(X302),X303)) )),
  inference(superposition,[],[f211,f559])).
fof(f35450,plain,(
  ( ! [X280,X277,X279,X281,X278] : (~p(s(bool,happ(s(fun(X277,bool),X280),s(X277,sK6(X278,X277))))) | ~p(s(bool,X281)) | s(bool,X281) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X277),X278),s(bool,X279),s(fun(X277,bool),X280))) | s('type.option.option'(X277),'const.option.NONE_0') = s('type.option.option'(X277),X278)) )),
  inference(superposition,[],[f165,f559])).
fof(f35448,plain,(
  ( ! [X269,X271,X267,X268,X270] : (p(s(bool,happ(s(fun(X267,bool),X270),s(X267,sK6(X268,X267))))) | p(s(bool,X271)) | s(bool,X271) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X267),X268),s(bool,X269),s(fun(X267,bool),X270))) | s('type.option.option'(X267),'const.option.NONE_0') = s('type.option.option'(X267),X268)) )),
  inference(superposition,[],[f162,f559])).
fof(f35447,plain,(
  ( ! [X263,X265,X264,X266] : (p(s(bool,happ(s(fun(X263,bool),X266),s(X263,sK6(X264,X263))))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X263),X264),s(bool,X265),s(fun(X263,bool),X266))) | s('type.option.option'(X263),'const.option.NONE_0') = s('type.option.option'(X263),X264)) )),
  inference(superposition,[],[f128,f559])).
fof(f35446,plain,(
  ( ! [X261,X259,X260,X262] : (s(bool,'F_0') != s(bool,happ(s(fun(X259,bool),X262),s(X259,sK6(X260,X259)))) | ~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X259),X260),s(bool,X261),s(fun(X259,bool),X262)))) | s('type.option.option'(X259),'const.option.NONE_0') = s('type.option.option'(X259),X260)) )),
  inference(superposition,[],[f127,f559])).
fof(f35445,plain,(
  ( ! [X255,X257,X256,X258] : (~p(s(bool,happ(s(fun(X255,bool),X258),s(X255,sK6(X256,X255))))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X255),X256),s(bool,X257),s(fun(X255,bool),X258))) | s('type.option.option'(X255),'const.option.NONE_0') = s('type.option.option'(X255),X256)) )),
  inference(superposition,[],[f124,f559])).
fof(f35444,plain,(
  ( ! [X253,X251,X254,X252] : (p(s(bool,happ(s(fun(X251,bool),X254),s(X251,sK6(X252,X251))))) | s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X251),X252),s(bool,X253),s(fun(X251,bool),X254))) | s('type.option.option'(X251),'const.option.NONE_0') = s('type.option.option'(X251),X252)) )),
  inference(superposition,[],[f123,f559])).
fof(f35440,plain,(
  ( ! [X239,X237,X235,X238,X236,X234] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X234,bool),X239),s(X234,happ(s(fun(X235,X234),X238),s(X235,sK6(X236,X235))))))),bool)) | s(X234,'const.option.option_CASE_3'(s('type.option.option'(X235),X236),s(X234,X237),s(fun(X235,X234),X238))) = s(X234,sK7('const.option.option_CASE_3'(s('type.option.option'(X235),X236),s(X234,X237),s(fun(X235,X234),X238)),X239,X234)) | s('type.option.option'(X235),'const.option.NONE_0') = s('type.option.option'(X235),X236)) ) | $spl0),
  inference(superposition,[],[f33781,f559])).
fof(f35434,plain,(
  ( ! [X198,X196,X200,X199,X197,X201] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X196,bool),X201),s(X196,happ(s(fun(X197,X196),X200),s(X197,sK6(X198,X197))))))),bool)) | s(X196,'const.option.option_CASE_3'(s('type.option.option'(X197),X198),s(X196,X199),s(fun(X197,X196),X200))) = s(X196,sK7('const.option.option_CASE_3'(s('type.option.option'(X197),X198),s(X196,X199),s(fun(X197,X196),X200)),X201,X196)) | s('type.option.option'(X197),'const.option.NONE_0') = s('type.option.option'(X197),X198)) ) | $spl0),
  inference(superposition,[],[f3724,f559])).
fof(f35433,plain,(
  ( ! [X191,X194,X192,X190,X195,X193] : (s(bool,'T_0') != s(bool,happ(s(fun(X190,bool),X195),s(X190,happ(s(fun(X191,X190),X194),s(X191,sK6(X192,X191)))))) | s(X190,'const.option.option_CASE_3'(s('type.option.option'(X191),X192),s(X190,X193),s(fun(X191,X190),X194))) = s(X190,sK7(sK6('const.option.SOME_1'(s(X190,'const.option.option_CASE_3'(s('type.option.option'(X191),X192),s(X190,X193),s(fun(X191,X190),X194)))),X190),X195,X190)) | s('type.option.option'(X191),'const.option.NONE_0') = s('type.option.option'(X191),X192)) ) | $spl0),
  inference(superposition,[],[f3093,f559])).
fof(f35431,plain,(
  ( ! [X177,X182,X180,X178,X181,X179] : (s(bool,'T_0') != s(bool,happ(s(fun(X177,bool),X182),s(X177,happ(s(fun(X178,X177),X181),s(X178,sK6(X179,X178)))))) | s(X177,'const.option.option_CASE_3'(s('type.option.option'(X178),X179),s(X177,X180),s(fun(X178,X177),X181))) = s(X177,sK7('const.option.option_CASE_3'(s('type.option.option'(X178),X179),s(X177,X180),s(fun(X178,X177),X181)),X182,X177)) | s('type.option.option'(X178),'const.option.NONE_0') = s('type.option.option'(X178),X179)) ) | $spl0),
  inference(superposition,[],[f2789,f559])).
fof(f35430,plain,(
  ( ! [X175,X173,X171,X176,X174,X172] : (~p(s(bool,happ(s(fun(X171,bool),X176),s(X171,happ(s(fun(X172,X171),X175),s(X172,sK6(X173,X172))))))) | s(X171,sK7('const.option.option_CASE_3'(s('type.option.option'(X172),X173),s(X171,X174),s(fun(X172,X171),X175)),X176,X171)) = s(X171,sK7(sK7('const.option.option_CASE_3'(s('type.option.option'(X172),X173),s(X171,X174),s(fun(X172,X171),X175)),X176,X171),X176,X171)) | s('type.option.option'(X172),'const.option.NONE_0') = s('type.option.option'(X172),X173)) ) | $spl0),
  inference(superposition,[],[f2788,f559])).
fof(f35427,plain,(
  ( ! [X158,X156,X154,X157,X155,X153] : (s(bool,'F_0') = s(bool,happ(s(fun(X153,bool),X158),s(X153,happ(s(fun(X154,X153),X157),s(X154,sK6(X155,X154)))))) | s(X153,'const.option.option_CASE_3'(s('type.option.option'(X154),X155),s(X153,X156),s(fun(X154,X153),X157))) = s(X153,sK7('const.option.option_CASE_3'(s('type.option.option'(X154),X155),s(X153,X156),s(fun(X154,X153),X157)),X158,X153)) | s('type.option.option'(X154),'const.option.NONE_0') = s('type.option.option'(X154),X155)) ) | $spl0),
  inference(superposition,[],[f1756,f559])).
fof(f35425,plain,(
  ( ! [X146,X144,X142,X147,X145,X143,X141] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X141),'const.option.SOME_1'(s(X141,happ(s(fun(X142,X141),X145),s(X142,sK6(X143,X142)))))),s(bool,X146),s(fun(X141,bool),X147))) | s(bool,'F_0') = s(bool,happ(s(fun(X141,bool),X147),s(X141,'const.option.option_CASE_3'(s('type.option.option'(X142),X143),s(X141,X144),s(fun(X142,X141),X145))))) | s('type.option.option'(X142),'const.option.NONE_0') = s('type.option.option'(X142),X143)) )),
  inference(superposition,[],[f572,f559])).
fof(f35424,plain,(
  ( ! [X140,X138,X136,X135,X139,X137] : (~p(s(bool,happ(s(fun(X135,bool),X140),s(X135,happ(s(fun(X136,X135),X139),s(X136,sK6(X137,X136))))))) | s(bool,'T_0') = s(bool,happ(s(fun(X135,bool),X140),s(X135,sK7('const.option.option_CASE_3'(s('type.option.option'(X136),X137),s(X135,X138),s(fun(X136,X135),X139)),X140,X135)))) | s('type.option.option'(X136),'const.option.NONE_0') = s('type.option.option'(X136),X137)) )),
  inference(superposition,[],[f535,f559])).
fof(f35423,plain,(
  ( ! [X134,X132,X130,X133,X131,X129] : (s('type.option.option'(X129),X134) != s('type.option.option'(X129),'const.option.SOME_1'(s(X129,happ(s(fun(X130,X129),X133),s(X130,sK6(X131,X130)))))) | s(X129,sK6(X134,X129)) = s(X129,'const.option.option_CASE_3'(s('type.option.option'(X130),X131),s(X129,X132),s(fun(X130,X129),X133))) | s('type.option.option'(X129),'const.option.NONE_0') = s('type.option.option'(X129),X134) | s('type.option.option'(X130),'const.option.NONE_0') = s('type.option.option'(X130),X131)) )),
  inference(superposition,[],[f459,f559])).
fof(f35422,plain,(
  ( ! [X127,X125,X123,X121,X128,X126,X124,X122] : (~p(s(bool,happ(s(fun(X121,bool),X126),s(X121,happ(s(fun(X122,X121),X125),s(X122,sK6(X123,X122))))))) | s(X121,'const.option.option_CASE_3'(s('type.option.option'(X122),X123),s(X121,X124),s(fun(X122,X121),X125))) = s(X121,sK7('const.option.option_CASE_3'(s('type.option.option'(X127),'const.option.NONE_0'),s(X121,'const.option.option_CASE_3'(s('type.option.option'(X122),X123),s(X121,X124),s(fun(X122,X121),X125))),s(fun(X127,X121),X128)),X126,X121)) | s('type.option.option'(X122),'const.option.NONE_0') = s('type.option.option'(X122),X123)) )),
  inference(superposition,[],[f447,f559])).
fof(f35421,plain,(
  ( ! [X118,X116,X114,X120,X119,X117,X115,X113] : (~p(s(bool,happ(s(fun(X113,bool),X118),s(X113,happ(s(fun(X114,X113),X117),s(X114,sK6(X115,X114))))))) | s(X113,'const.option.option_CASE_3'(s('type.option.option'(X114),X115),s(X113,X116),s(fun(X114,X113),X117))) = s(X113,sK7('const.option.option_CASE_3'(s('type.option.option'(X114),X115),s(X113,X116),s(fun(X114,X113),X117)),'const.option.option_CASE_3'(s('type.option.option'(X119),'const.option.NONE_0'),s(fun(X113,bool),X118),s(fun(X119,fun(X113,bool)),X120)),X113)) | s('type.option.option'(X114),'const.option.NONE_0') = s('type.option.option'(X114),X115)) )),
  inference(superposition,[],[f434,f559])).
fof(f35420,plain,(
  ( ! [X111,X109,X107,X105,X112,X110,X108,X106] : (s('type.option.option'(X105),'const.option.SOME_1'(s(X105,X110))) != s('type.option.option'(X105),'const.option.SOME_1'(s(X105,happ(s(fun(X106,X105),X109),s(X106,sK6(X107,X106)))))) | s(X105,'const.option.option_CASE_3'(s('type.option.option'(X111),'const.option.NONE_0'),s(X105,X110),s(fun(X111,X105),X112))) = s(X105,'const.option.option_CASE_3'(s('type.option.option'(X106),X107),s(X105,X108),s(fun(X106,X105),X109))) | s('type.option.option'(X106),'const.option.NONE_0') = s('type.option.option'(X106),X107)) )),
  inference(superposition,[],[f363,f559])).
fof(f35419,plain,(
  ( ! [X103,X101,X99,X97,X102,X100,X98,X104] : (s('type.option.option'(X97),'const.option.SOME_1'(s(X97,X102))) != s('type.option.option'(X97),'const.option.SOME_1'(s(X97,happ(s(fun(X98,X97),X101),s(X98,sK6(X99,X98)))))) | s(X97,X102) = s(X97,'const.option.option_CASE_3'(s('type.option.option'(X103),'const.option.NONE_0'),s(X97,'const.option.option_CASE_3'(s('type.option.option'(X98),X99),s(X97,X100),s(fun(X98,X97),X101))),s(fun(X103,X97),X104))) | s('type.option.option'(X98),'const.option.NONE_0') = s('type.option.option'(X98),X99)) )),
  inference(superposition,[],[f363,f559])).
fof(f35411,plain,(
  ( ! [X47,X45,X50,X48,X46,X49] : (~p(s(bool,happ(s(fun(X45,bool),X50),s(X45,happ(s(fun(X46,X45),X49),s(X46,sK6(X47,X46))))))) | s(X45,'const.option.option_CASE_3'(s('type.option.option'(X46),X47),s(X45,X48),s(fun(X46,X45),X49))) = s(X45,sK7('const.option.option_CASE_3'(s('type.option.option'(X46),X47),s(X45,X48),s(fun(X46,X45),X49)),X50,X45)) | s('type.option.option'(X46),'const.option.NONE_0') = s('type.option.option'(X46),X47)) )),
  inference(superposition,[],[f160,f559])).
fof(f35410,plain,(
  ( ! [X39,X43,X41,X38,X44,X42,X40] : (~p(s(bool,happ(s(fun(X38,bool),X43),s(X38,happ(s(fun(X39,X38),X42),s(X39,sK6(X40,X39))))))) | p(s(bool,happ(s(fun(X38,bool),X43),s(X38,X44)))) | s(X38,X44) != s(X38,'const.option.option_CASE_3'(s('type.option.option'(X39),X40),s(X38,X41),s(fun(X39,X38),X42))) | s('type.option.option'(X39),'const.option.NONE_0') = s('type.option.option'(X39),X40)) )),
  inference(superposition,[],[f159,f559])).
fof(f35408,plain,(
  ( ! [X30,X28,X26,X31,X29,X27] : (s(X26,X31) != s(X26,happ(s(fun(X27,X26),X30),s(X27,sK6(X28,X27)))) | s('type.option.option'(X26),'const.option.SOME_1'(s(X26,X31))) = s('type.option.option'(X26),'const.option.SOME_1'(s(X26,'const.option.option_CASE_3'(s('type.option.option'(X27),X28),s(X26,X29),s(fun(X27,X26),X30))))) | s('type.option.option'(X27),'const.option.NONE_0') = s('type.option.option'(X27),X28)) )),
  inference(superposition,[],[f158,f559])).
fof(f35406,plain,(
  ( ! [X14,X19,X17,X15,X18,X16] : (s('type.option.option'(X14),'const.option.SOME_1'(s(X14,X19))) != s('type.option.option'(X14),'const.option.SOME_1'(s(X14,happ(s(fun(X15,X14),X18),s(X15,sK6(X16,X15)))))) | s(X14,X19) = s(X14,'const.option.option_CASE_3'(s('type.option.option'(X15),X16),s(X14,X17),s(fun(X15,X14),X18))) | s('type.option.option'(X15),'const.option.NONE_0') = s('type.option.option'(X15),X16)) )),
  inference(superposition,[],[f157,f559])).
fof(f35400,plain,(
  ( ! [X1104,X1099,X1103,X1101,X1102,X1100] : (s('type.option.option'(X1099),'const.option.SOME_1'(s(X1099,X1104))) != s('type.option.option'(X1099),'const.option.option_CASE_3'(s('type.option.option'(X1100),X1102),s('type.option.option'(X1099),X1103),s(fun(X1100,'type.option.option'(X1099)),X1101))) | s(X1099,X1104) = s(X1099,sK6(happ(s(fun(X1100,'type.option.option'(X1099)),X1101),s(X1100,sK6(X1102,X1100))),X1099)) | s('type.option.option'(X1099),'const.option.NONE_0') = s('type.option.option'(X1099),happ(s(fun(X1100,'type.option.option'(X1099)),X1101),s(X1100,sK6(X1102,X1100)))) | s('type.option.option'(X1100),'const.option.NONE_0') = s('type.option.option'(X1100),X1102)) )),
  inference(superposition,[],[f459,f559])).
fof(f35394,plain,(
  ( ! [X1066,X1064,X1062,X1067,X1065,X1063] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X1062,bool),'const.option.option_CASE_3'(s('type.option.option'(X1063),X1065),s(fun(X1062,bool),X1066),s(fun(X1063,fun(X1062,bool)),X1064))),s(X1062,X1067)))),bool)) | s(X1062,X1067) = s(X1062,sK7(X1067,happ(s(fun(X1063,fun(X1062,bool)),X1064),s(X1063,sK6(X1065,X1063))),X1062)) | s('type.option.option'(X1063),'const.option.NONE_0') = s('type.option.option'(X1063),X1065)) ) | $spl0),
  inference(superposition,[],[f33781,f559])).
fof(f35393,plain,(
  ( ! [X1058,X1056,X1060,X1059,X1057,X1061] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X1056,bool),'const.option.option_CASE_3'(s('type.option.option'(X1057),X1059),s(fun(X1056,bool),X1060),s(fun(X1057,fun(X1056,bool)),X1058))),s(X1056,X1061)))),bool)) | s(X1056,X1061) = s(X1056,sK7(X1061,happ(s(fun(X1057,fun(X1056,bool)),X1058),s(X1057,sK6(X1059,X1057))),X1056)) | s('type.option.option'(X1057),'const.option.NONE_0') = s('type.option.option'(X1057),X1059)) ) | $spl0),
  inference(superposition,[],[f3724,f559])).
fof(f35392,plain,(
  ( ! [X1050,X1054,X1052,X1051,X1055,X1053] : (s(bool,'T_0') != s(bool,happ(s(fun(X1050,bool),'const.option.option_CASE_3'(s('type.option.option'(X1051),X1053),s(fun(X1050,bool),X1054),s(fun(X1051,fun(X1050,bool)),X1052))),s(X1050,X1055))) | s(X1050,X1055) = s(X1050,sK7(sK6('const.option.SOME_1'(s(X1050,X1055)),X1050),happ(s(fun(X1051,fun(X1050,bool)),X1052),s(X1051,sK6(X1053,X1051))),X1050)) | s('type.option.option'(X1051),'const.option.NONE_0') = s('type.option.option'(X1051),X1053)) ) | $spl0),
  inference(superposition,[],[f3093,f559])).
fof(f35391,plain,(
  ( ! [X1048,X1046,X1044,X1049,X1047,X1045] : (s(bool,'T_0') != s(bool,happ(s(fun(X1044,bool),'const.option.option_CASE_3'(s('type.option.option'(X1045),X1047),s(fun(X1044,bool),X1048),s(fun(X1045,fun(X1044,bool)),X1046))),s(X1044,X1049))) | s(X1044,X1049) = s(X1044,sK7(X1049,happ(s(fun(X1045,fun(X1044,bool)),X1046),s(X1045,sK6(X1047,X1045))),X1044)) | s('type.option.option'(X1045),'const.option.NONE_0') = s('type.option.option'(X1045),X1047)) ) | $spl0),
  inference(superposition,[],[f2789,f559])).
fof(f35390,plain,(
  ( ! [X1042,X1040,X1039,X1043,X1041,X1038] : (~p(s(bool,happ(s(fun(X1038,bool),'const.option.option_CASE_3'(s('type.option.option'(X1039),X1041),s(fun(X1038,bool),X1042),s(fun(X1039,fun(X1038,bool)),X1040))),s(X1038,X1043)))) | s(X1038,sK7(X1043,happ(s(fun(X1039,fun(X1038,bool)),X1040),s(X1039,sK6(X1041,X1039))),X1038)) = s(X1038,sK7(sK7(X1043,happ(s(fun(X1039,fun(X1038,bool)),X1040),s(X1039,sK6(X1041,X1039))),X1038),happ(s(fun(X1039,fun(X1038,bool)),X1040),s(X1039,sK6(X1041,X1039))),X1038)) | s('type.option.option'(X1039),'const.option.NONE_0') = s('type.option.option'(X1039),X1041)) ) | $spl0),
  inference(superposition,[],[f2788,f559])).
fof(f35389,plain,(
  ( ! [X1035,X1033,X1037,X1034,X1032,X1036] : (s(bool,'F_0') = s(bool,happ(s(fun(X1032,bool),'const.option.option_CASE_3'(s('type.option.option'(X1033),X1035),s(fun(X1032,bool),X1036),s(fun(X1033,fun(X1032,bool)),X1034))),s(X1032,X1037))) | s(X1032,X1037) = s(X1032,sK7(sK6('const.option.SOME_1'(s(X1032,X1037)),X1032),happ(s(fun(X1033,fun(X1032,bool)),X1034),s(X1033,sK6(X1035,X1033))),X1032)) | s('type.option.option'(X1033),'const.option.NONE_0') = s('type.option.option'(X1033),X1035)) ) | $spl0),
  inference(superposition,[],[f2781,f559])).
fof(f35388,plain,(
  ( ! [X1027,X1031,X1029,X1026,X1030,X1028] : (s(bool,'F_0') = s(bool,happ(s(fun(X1026,bool),'const.option.option_CASE_3'(s('type.option.option'(X1027),X1029),s(fun(X1026,bool),X1030),s(fun(X1027,fun(X1026,bool)),X1028))),s(X1026,X1031))) | s(X1026,X1031) = s(X1026,sK7(X1031,happ(s(fun(X1027,fun(X1026,bool)),X1028),s(X1027,sK6(X1029,X1027))),X1026)) | s('type.option.option'(X1027),'const.option.NONE_0') = s('type.option.option'(X1027),X1029)) ) | $spl0),
  inference(superposition,[],[f1756,f559])).
fof(f35387,plain,(
  ( ! [X1019,X1023,X1021,X1025,X1022,X1020,X1024] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X1019),'const.option.SOME_1'(s(X1019,X1024))),s(bool,X1025),s(fun(X1019,bool),'const.option.option_CASE_3'(s('type.option.option'(X1020),X1022),s(fun(X1019,bool),X1023),s(fun(X1020,fun(X1019,bool)),X1021))))) | s(bool,'F_0') = s(bool,happ(s(fun(X1019,bool),happ(s(fun(X1020,fun(X1019,bool)),X1021),s(X1020,sK6(X1022,X1020)))),s(X1019,X1024))) | s('type.option.option'(X1020),'const.option.NONE_0') = s('type.option.option'(X1020),X1022)) )),
  inference(superposition,[],[f572,f559])).
fof(f35386,plain,(
  ( ! [X1017,X1015,X1013,X1018,X1016,X1014] : (~p(s(bool,happ(s(fun(X1013,bool),'const.option.option_CASE_3'(s('type.option.option'(X1014),X1016),s(fun(X1013,bool),X1017),s(fun(X1014,fun(X1013,bool)),X1015))),s(X1013,X1018)))) | s(bool,'T_0') = s(bool,happ(s(fun(X1013,bool),happ(s(fun(X1014,fun(X1013,bool)),X1015),s(X1014,sK6(X1016,X1014)))),s(X1013,sK7(X1018,happ(s(fun(X1014,fun(X1013,bool)),X1015),s(X1014,sK6(X1016,X1014))),X1013)))) | s('type.option.option'(X1014),'const.option.NONE_0') = s('type.option.option'(X1014),X1016)) )),
  inference(superposition,[],[f535,f559])).
fof(f35385,plain,(
  ( ! [X1011,X1009,X1006,X1010,X1008,X1012,X1007,X1005] : (~p(s(bool,happ(s(fun(X1005,bool),'const.option.option_CASE_3'(s('type.option.option'(X1006),X1008),s(fun(X1005,bool),X1009),s(fun(X1006,fun(X1005,bool)),X1007))),s(X1005,X1010)))) | s(X1005,X1010) = s(X1005,sK7('const.option.option_CASE_3'(s('type.option.option'(X1011),'const.option.NONE_0'),s(X1005,X1010),s(fun(X1011,X1005),X1012)),happ(s(fun(X1006,fun(X1005,bool)),X1007),s(X1006,sK6(X1008,X1006))),X1005)) | s('type.option.option'(X1006),'const.option.NONE_0') = s('type.option.option'(X1006),X1008)) )),
  inference(superposition,[],[f447,f559])).
fof(f35384,plain,(
  ( ! [X1002,X1000,X1004,X998,X1003,X1001,X999,X997] : (~p(s(bool,happ(s(fun(X997,bool),'const.option.option_CASE_3'(s('type.option.option'(X998),X1000),s(fun(X997,bool),X1001),s(fun(X998,fun(X997,bool)),X999))),s(X997,X1002)))) | s(X997,X1002) = s(X997,sK7(X1002,'const.option.option_CASE_3'(s('type.option.option'(X1003),'const.option.NONE_0'),s(fun(X997,bool),happ(s(fun(X998,fun(X997,bool)),X999),s(X998,sK6(X1000,X998)))),s(fun(X1003,fun(X997,bool)),X1004)),X997)) | s('type.option.option'(X998),'const.option.NONE_0') = s('type.option.option'(X998),X1000)) )),
  inference(superposition,[],[f434,f559])).
fof(f35382,plain,(
  ( ! [X990,X988,X987,X985,X989,X986] : (p(s(bool,happ(s(fun(X985,bool),'const.option.option_CASE_3'(s('type.option.option'(X986),X988),s(fun(X985,bool),X989),s(fun(X986,fun(X985,bool)),X987))),s(X985,sK7(X990,happ(s(fun(X986,fun(X985,bool)),X987),s(X986,sK6(X988,X986))),X985))))) | ~p(s(bool,happ(s(fun(X985,bool),happ(s(fun(X986,fun(X985,bool)),X987),s(X986,sK6(X988,X986)))),s(X985,X990)))) | s('type.option.option'(X986),'const.option.NONE_0') = s('type.option.option'(X986),X988)) )),
  inference(superposition,[],[f161,f559])).
fof(f35381,plain,(
  ( ! [X984,X982,X980,X979,X983,X981] : (~p(s(bool,happ(s(fun(X979,bool),'const.option.option_CASE_3'(s('type.option.option'(X980),X982),s(fun(X979,bool),X983),s(fun(X980,fun(X979,bool)),X981))),s(X979,X984)))) | s(X979,X984) = s(X979,sK7(X984,happ(s(fun(X980,fun(X979,bool)),X981),s(X980,sK6(X982,X980))),X979)) | s('type.option.option'(X980),'const.option.NONE_0') = s('type.option.option'(X980),X982)) )),
  inference(superposition,[],[f160,f559])).
fof(f35380,plain,(
  ( ! [X978,X976,X975,X973,X977,X974,X972] : (~p(s(bool,happ(s(fun(X972,bool),'const.option.option_CASE_3'(s('type.option.option'(X973),X975),s(fun(X972,bool),X976),s(fun(X973,fun(X972,bool)),X974))),s(X972,X977)))) | p(s(bool,happ(s(fun(X972,bool),happ(s(fun(X973,fun(X972,bool)),X974),s(X973,sK6(X975,X973)))),s(X972,X978)))) | s(X972,X977) != s(X972,X978) | s('type.option.option'(X973),'const.option.NONE_0') = s('type.option.option'(X973),X975)) )),
  inference(superposition,[],[f159,f559])).
fof(f35379,plain,(
  ( ! [X971,X969,X967,X970,X968] : (~p(s(bool,happ(s(fun(bool,bool),'const.option.option_CASE_3'(s('type.option.option'(X967),X969),s(fun(bool,bool),X970),s(fun(X967,fun(bool,bool)),X968))),s(bool,'T_0')))) | s(bool,X971) = s(bool,sK7(X971,happ(s(fun(X967,fun(bool,bool)),X968),s(X967,sK6(X969,X967))),bool)) | s(bool,'F_0') = s(bool,X971) | s('type.option.option'(X967),'const.option.NONE_0') = s('type.option.option'(X967),X969)) ) | $spl0),
  inference(superposition,[],[f1761,f559])).
fof(f35378,plain,(
  ( ! [X963,X965,X962,X966,X964] : (~p(s(bool,happ(s(fun(bool,bool),'const.option.option_CASE_3'(s('type.option.option'(X962),X964),s(fun(bool,bool),X965),s(fun(X962,fun(bool,bool)),X963))),s(bool,X966)))) | s(bool,'F_0') = s(bool,sK7('F_0',happ(s(fun(X962,fun(bool,bool)),X963),s(X962,sK6(X964,X962))),bool)) | s(bool,'T_0') = s(bool,X966) | s('type.option.option'(X962),'const.option.NONE_0') = s('type.option.option'(X962),X964)) )),
  inference(superposition,[],[f439,f559])).
fof(f35377,plain,(
  ( ! [X957,X961,X958,X960,X959] : (~p(s(bool,happ(s(fun(bool,bool),'const.option.option_CASE_3'(s('type.option.option'(X957),X959),s(fun(bool,bool),X960),s(fun(X957,fun(bool,bool)),X958))),s(bool,'F_0')))) | s(bool,X961) = s(bool,sK7(X961,happ(s(fun(X957,fun(bool,bool)),X958),s(X957,sK6(X959,X957))),bool)) | s(bool,'T_0') = s(bool,X961) | s('type.option.option'(X957),'const.option.NONE_0') = s('type.option.option'(X957),X959)) )),
  inference(superposition,[],[f440,f559])).
fof(f35376,plain,(
  ( ! [X954,X952,X956,X955,X953] : (~p(s(bool,happ(s(fun(bool,bool),'const.option.option_CASE_3'(s('type.option.option'(X952),X954),s(fun(bool,bool),X955),s(fun(X952,fun(bool,bool)),X953))),s(bool,X956)))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(X952,fun(bool,bool)),X953),s(X952,sK6(X954,X952)))),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X956,happ(s(fun(X952,fun(bool,bool)),X953),s(X952,sK6(X954,X952))),bool)) | s('type.option.option'(X952),'const.option.NONE_0') = s('type.option.option'(X952),X954)) )),
  inference(superposition,[],[f532,f559])).
fof(f35375,plain,(
  ( ! [X938,X936,X940,X939,X937] : (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X936),X938),s(bool,X939),s(fun(X936,bool),X937)))) | s(bool,X940) != s(bool,happ(s(fun(X936,bool),X937),s(X936,sK6(X938,X936)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X940))) | s('type.option.option'(X936),'const.option.NONE_0') = s('type.option.option'(X936),X938)) ) | $spl0),
  inference(superposition,[],[f29621,f559])).
fof(f35374,plain,(
  ( ! [X934,X932,X931,X935,X933] : (s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X931),X933),s(bool,X934),s(fun(X931,bool),X932))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X935))) | s(bool,X935) = s(bool,happ(s(fun(X931,bool),X932),s(X931,sK6(X933,X931)))) | s('type.option.option'(X931),'const.option.NONE_0') = s('type.option.option'(X931),X933)) ) | $spl0),
  inference(superposition,[],[f26480,f559])).
fof(f35372,plain,(
  ( ! [X922,X920,X918,X916,X921,X919,X917] : (s(bool,X920) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X916),X918),s(bool,X919),s(fun(X916,bool),X917))) | s(bool,'T_0') = s(bool,happ(s(fun(X916,bool),X917),s(X916,sK6(X918,X916)))) | s(bool,X920) = s(bool,'const.bool.IN_2'(s(X921,X922),s(fun(X921,bool),'const.pred_set.EMPTY_0'))) | s('type.option.option'(X916),'const.option.NONE_0') = s('type.option.option'(X916),X918)) ) | $spl0),
  inference(superposition,[],[f23308,f559])).
fof(f35364,plain,(
  ( ! [X872,X866,X870,X868,X867,X871,X869] : (s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X866),X868),s(bool,X869),s(fun(X866,bool),X867))) | s(bool,X870) = s(bool,'const.bool.IN_2'(s(X871,X872),s(fun(X871,bool),'const.pred_set.EMPTY_0'))) | s(bool,X870) = s(bool,happ(s(fun(X866,bool),X867),s(X866,sK6(X868,X866)))) | s('type.option.option'(X866),'const.option.NONE_0') = s('type.option.option'(X866),X868)) ) | $spl0),
  inference(superposition,[],[f22072,f559])).
fof(f35362,plain,(
  ( ! [X860,X859,X857,X858] : (p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X857),X859),s(bool,X860),s(fun(X857,bool),X858)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X857,bool),X858),s(X857,sK6(X859,X857)))))) | s('type.option.option'(X857),'const.option.NONE_0') = s('type.option.option'(X857),X859)) ) | $spl0),
  inference(superposition,[],[f17462,f559])).
fof(f35361,plain,(
  ( ! [X854,X852,X855,X853,X856] : (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X852),X854),s(bool,X855),s(fun(X852,bool),X853)))) | s(bool,X856) = s(bool,happ(s(fun(X852,bool),X853),s(X852,sK6(X854,X852)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X856))) | s('type.option.option'(X852),'const.option.NONE_0') = s('type.option.option'(X852),X854)) ) | $spl0),
  inference(superposition,[],[f17344,f559])).
fof(f35355,plain,(
  ( ! [X829,X826,X830,X828,X827] : (s(bool,'F_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X826),X828),s(bool,X829),s(fun(X826,bool),X827))) | s(bool,X830) = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X826,bool),X827),s(X826,sK6(X828,X826))))),bool)) | s(bool,'T_0') = s(bool,X830) | s('type.option.option'(X826),'const.option.NONE_0') = s('type.option.option'(X826),X828)) ) | $spl0),
  inference(superposition,[],[f14507,f559])).
fof(f35350,plain,(
  ( ! [X802,X804,X803,X801,X805] : (s(bool,'F_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X801),X803),s(bool,X804),s(fun(X801,bool),X802))) | s(bool,X805) = s(bool,happ(s(fun(X801,bool),X802),s(X801,sK6(X803,X801)))) | s(bool,'T_0') = s(bool,X805) | s('type.option.option'(X801),'const.option.NONE_0') = s('type.option.option'(X801),X803)) ) | $spl0),
  inference(superposition,[],[f13980,f559])).
fof(f35339,plain,(
  ( ! [X749,X751,X745,X747,X748,X750,X746] : (s(bool,X749) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X745),X747),s(bool,X748),s(fun(X745,bool),X746))) | s(bool,happ(s(fun(X745,bool),X746),s(X745,sK6(X747,X745)))) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X750),'const.option.NONE_0'),s(bool,X749),s(fun(X750,bool),X751))) | s('type.option.option'(X745),'const.option.NONE_0') = s('type.option.option'(X745),X747)) ) | $spl0),
  inference(superposition,[],[f9763,f559])).
fof(f35338,plain,(
  ( ! [X738,X741,X743,X739,X744,X740,X742] : (s(bool,X742) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X738),X740),s(bool,X741),s(fun(X738,bool),X739))) | s(bool,X742) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X743),'const.option.NONE_0'),s(bool,happ(s(fun(X738,bool),X739),s(X738,sK6(X740,X738)))),s(fun(X743,bool),X744))) | s('type.option.option'(X738),'const.option.NONE_0') = s('type.option.option'(X738),X740)) ) | $spl0),
  inference(superposition,[],[f9763,f559])).
fof(f35332,plain,(
  ( ! [X712,X710,X713,X711] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X710),X712),s(bool,X713),s(fun(X710,bool),X711)))),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X710,bool),X711),s(X710,sK6(X712,X710)))))) | s('type.option.option'(X710),'const.option.NONE_0') = s('type.option.option'(X710),X712)) ) | $spl0),
  inference(superposition,[],[f9094,f559])).
fof(f35320,plain,(
  ( ! [X660,X662,X664,X661,X663,X665] : (s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X660),X662),s(bool,X663),s(fun(X660,bool),X661))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X664),'const.option.NONE_0'),s(bool,happ(s(fun(X660,bool),X661),s(X660,sK6(X662,X660)))),s(fun(X664,bool),X665))) | s('type.option.option'(X660),'const.option.NONE_0') = s('type.option.option'(X660),X662)) ) | $spl0),
  inference(superposition,[],[f5098,f559])).
fof(f35317,plain,(
  ( ! [X648,X650,X649,X651] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X648),X650),s(bool,X651),s(fun(X648,bool),X649)))),bool)) | s(bool,'T_0') = s(bool,happ(s(fun(X648,bool),X649),s(X648,sK6(X650,X648)))) | s('type.option.option'(X648),'const.option.NONE_0') = s('type.option.option'(X648),X650)) ) | $spl0),
  inference(superposition,[],[f4597,f559])).
fof(f35315,plain,(
  ( ! [X639,X640,X642,X638,X641,X643] : (s(bool,'F_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X638),X640),s(bool,X641),s(fun(X638,bool),X639))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X642),'const.option.NONE_0'),s(bool,happ(s(fun(X638,bool),X639),s(X638,sK6(X640,X638)))),s(fun(X642,bool),X643))) | s('type.option.option'(X638),'const.option.NONE_0') = s('type.option.option'(X638),X640)) ) | $spl0),
  inference(superposition,[],[f4508,f559])).
fof(f35314,plain,(
  ( ! [X633,X635,X636,X634,X637] : (s(bool,sK6('const.option.SOME_1'(s(bool,X637)),bool)) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X633),X635),s(bool,X636),s(fun(X633,bool),X634))) | s(bool,'F_0') = s(bool,happ(s(fun(X633,bool),X634),s(X633,sK6(X635,X633)))) | s(bool,'T_0') = s(bool,X637) | s('type.option.option'(X633),'const.option.NONE_0') = s('type.option.option'(X633),X635)) ) | $spl0),
  inference(superposition,[],[f4477,f559])).
fof(f35313,plain,(
  ( ! [X629,X631,X632,X628,X630] : (s(bool,X632) != s(bool,sK6('const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X628),X630),s(bool,X631),s(fun(X628,bool),X629)))),bool)) | s(bool,'F_0') = s(bool,X632) | s(bool,'T_0') = s(bool,happ(s(fun(X628,bool),X629),s(X628,sK6(X630,X628)))) | s('type.option.option'(X628),'const.option.NONE_0') = s('type.option.option'(X628),X630)) ) | $spl0),
  inference(superposition,[],[f4477,f559])).
fof(f35311,plain,(
  ( ! [X621,X623,X620,X622] : (s(bool,'F_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X620),X622),s(bool,X623),s(fun(X620,bool),X621))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X620,bool),X621),s(X620,sK6(X622,X620))))),bool)) | s('type.option.option'(X620),'const.option.NONE_0') = s('type.option.option'(X620),X622)) ) | $spl0),
  inference(superposition,[],[f3910,f559])).
fof(f35306,plain,(
  ( ! [X596,X598,X597,X599,X595] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X595),X597),s(bool,X598),s(fun(X595,bool),X596)))),bool)) | s(bool,X599) = s(bool,happ(s(fun(X595,bool),X596),s(X595,sK6(X597,X595)))) | s(bool,'F_0') = s(bool,X599) | s('type.option.option'(X595),'const.option.NONE_0') = s('type.option.option'(X595),X597)) ) | $spl0),
  inference(superposition,[],[f3886,f559])).
fof(f35696,plain,(
  ( ! [X588,X590,X589,X587] : (s(bool,'F_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X587),X589),s(bool,X590),s(fun(X587,bool),X588))) | s(bool,'F_0') = s(bool,happ(s(fun(X587,bool),X588),s(X587,sK6(X589,X587)))) | s('type.option.option'(X587),'const.option.NONE_0') = s('type.option.option'(X587),X589)) ) | $spl0),
  inference(forward_demodulation,[],[f35304,f901])).
fof(f35304,plain,(
  ( ! [X588,X590,X589,X587] : (s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X587),X589),s(bool,X590),s(fun(X587,bool),X588))) | s(bool,'F_0') = s(bool,happ(s(fun(X587,bool),X588),s(X587,sK6(X589,X587)))) | s('type.option.option'(X587),'const.option.NONE_0') = s('type.option.option'(X587),X589)) ) | $spl0),
  inference(superposition,[],[f3597,f559])).
fof(f35303,plain,(
  ( ! [X584,X586,X582,X585,X583] : (s(bool,X586) != s(bool,sK6('const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X582),X584),s(bool,X585),s(fun(X582,bool),X583)))),bool)) | s(bool,X586) = s(bool,happ(s(fun(X582,bool),X583),s(X582,sK6(X584,X582)))) | s(bool,'F_0') = s(bool,X586) | s('type.option.option'(X582),'const.option.NONE_0') = s('type.option.option'(X582),X584)) ) | $spl0),
  inference(superposition,[],[f3585,f559])).
fof(f35302,plain,(
  ( ! [X580,X578,X581,X577,X579] : (s(bool,sK6('const.option.SOME_1'(s(bool,X581)),bool)) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X577),X579),s(bool,X580),s(fun(X577,bool),X578))) | s(bool,X581) = s(bool,happ(s(fun(X577,bool),X578),s(X577,sK6(X579,X577)))) | s(bool,'F_0') = s(bool,happ(s(fun(X577,bool),X578),s(X577,sK6(X579,X577)))) | s('type.option.option'(X577),'const.option.NONE_0') = s('type.option.option'(X577),X579)) ) | $spl0),
  inference(superposition,[],[f3585,f559])).
fof(f35301,plain,(
  ( ! [X573,X575,X576,X572,X574] : (s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X572),X574),s(bool,X575),s(fun(X572,bool),X573))) | s(bool,X576) = s(bool,happ(s(fun(X572,bool),X573),s(X572,sK6(X574,X572)))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X576)),bool)) | s('type.option.option'(X572),'const.option.NONE_0') = s('type.option.option'(X572),X574)) ) | $spl0),
  inference(superposition,[],[f3405,f559])).
fof(f35296,plain,(
  ( ! [X540,X542,X538,X541,X543,X537,X539] : (p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X537),X539),s(bool,X540),s(fun(X537,bool),X538)))) | s(bool,happ(s(fun(X541,bool),X542),s(X541,X543))) = s(bool,happ(s(fun(X537,bool),X538),s(X537,sK6(X539,X537)))) | s(X541,X543) = s(X541,sK7(X543,X542,X541)) | s('type.option.option'(X537),'const.option.NONE_0') = s('type.option.option'(X537),X539)) ) | $spl0),
  inference(superposition,[],[f2790,f559])).
fof(f35295,plain,(
  ( ! [X536,X532,X534,X533,X535] : (s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X532),X534),s(bool,X535),s(fun(X532,bool),X533))) | s(bool,X536) = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X532,bool),X533),s(X532,sK6(X534,X532))))),bool)) | s(bool,'F_0') = s(bool,X536) | s('type.option.option'(X532),'const.option.NONE_0') = s('type.option.option'(X532),X534)) ) | $spl0),
  inference(superposition,[],[f2660,f559])).
fof(f35294,plain,(
  ( ! [X528,X530,X526,X529,X531,X527] : (s(bool,X530) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X526),X528),s(bool,X529),s(fun(X526,bool),X527))) | s(bool,'F_0') = s(bool,happ(s(fun(X526,bool),X527),s(X526,sK6(X528,X526)))) | s(bool,X530) = s(bool,X531) | s(bool,'F_0') = s(bool,X531) | s('type.option.option'(X526),'const.option.NONE_0') = s('type.option.option'(X526),X528)) ) | $spl0),
  inference(superposition,[],[f2517,f559])).
fof(f35293,plain,(
  ( ! [X524,X520,X522,X525,X521,X523] : (s(bool,X524) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X520),X522),s(bool,X523),s(fun(X520,bool),X521))) | s(bool,'F_0') = s(bool,X524) | s(bool,X525) = s(bool,happ(s(fun(X520,bool),X521),s(X520,sK6(X522,X520)))) | s(bool,'F_0') = s(bool,X525) | s('type.option.option'(X520),'const.option.NONE_0') = s('type.option.option'(X520),X522)) ) | $spl0),
  inference(superposition,[],[f2517,f559])).
fof(f35292,plain,(
  ( ! [X516,X518,X517,X519,X515] : (s(bool,X519) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X515),X517),s(bool,X518),s(fun(X515,bool),X516))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X519)),bool)) | s(bool,'F_0') = s(bool,happ(s(fun(X515,bool),X516),s(X515,sK6(X517,X515)))) | s('type.option.option'(X515),'const.option.NONE_0') = s('type.option.option'(X515),X517)) ) | $spl0),
  inference(superposition,[],[f2494,f559])).
fof(f35291,plain,(
  ( ! [X511,X512,X514,X510,X513] : (s(bool,X514) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X510),X512),s(bool,X513),s(fun(X510,bool),X511))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X510,bool),X511),s(X510,sK6(X512,X510))))),bool)) | s(bool,'F_0') = s(bool,X514) | s('type.option.option'(X510),'const.option.NONE_0') = s('type.option.option'(X510),X512)) ) | $spl0),
  inference(superposition,[],[f2494,f559])).
fof(f35290,plain,(
  ( ! [X509,X505,X507,X508,X506] : (s(bool,X509) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X505),X507),s(bool,X508),s(fun(X505,bool),X506))) | s(bool,'T_0') = s(bool,happ(s(fun(X505,bool),X506),s(X505,sK6(X507,X505)))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X509)),bool)) | s('type.option.option'(X505),'const.option.NONE_0') = s('type.option.option'(X505),X507)) ) | $spl0),
  inference(superposition,[],[f2471,f559])).
fof(f35289,plain,(
  ( ! [X500,X502,X504,X501,X503] : (s(bool,X504) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X500),X502),s(bool,X503),s(fun(X500,bool),X501))) | s(bool,'T_0') = s(bool,X504) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X500,bool),X501),s(X500,sK6(X502,X500))))),bool)) | s('type.option.option'(X500),'const.option.NONE_0') = s('type.option.option'(X500),X502)) ) | $spl0),
  inference(superposition,[],[f2471,f559])).
fof(f35288,plain,(
  ( ! [X499,X494,X496,X498,X495,X497] : (p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X494),X496),s(bool,X497),s(fun(X494,bool),X495)))) | s(bool,X498) = s(bool,happ(s(fun(X494,bool),X495),s(X494,sK6(X496,X494)))) | s(bool,X498) = s(bool,X499) | s(bool,'F_0') = s(bool,X499) | s('type.option.option'(X494),'const.option.NONE_0') = s('type.option.option'(X494),X496)) ) | $spl0),
  inference(superposition,[],[f2416,f559])).
fof(f35287,plain,(
  ( ! [X492,X490,X493,X489,X491] : (s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X489),X491),s(bool,X492),s(fun(X489,bool),X490))) | s(bool,X493) = s(bool,happ(s(fun(X489,bool),X490),s(X489,sK6(X491,X489)))) | s(bool,'F_0') = s(bool,X493) | s('type.option.option'(X489),'const.option.NONE_0') = s('type.option.option'(X489),X491)) ) | $spl0),
  inference(superposition,[],[f2035,f559])).
fof(f35286,plain,(
  ( ! [X484,X486,X488,X485,X487,X483] : (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X483),X485),s(bool,X486),s(fun(X483,bool),X484)))) | s(bool,X487) != s(bool,happ(s(fun(X483,bool),X484),s(X483,sK6(X485,X483)))) | s(bool,X487) = s(bool,X488) | s(bool,'F_0') = s(bool,X488) | s('type.option.option'(X483),'const.option.NONE_0') = s('type.option.option'(X483),X485)) ) | $spl0),
  inference(superposition,[],[f2033,f559])).
fof(f35281,plain,(
  ( ! [X461,X459,X460,X462,X458] : (s(bool,X462) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X458),X460),s(bool,X461),s(fun(X458,bool),X459))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X462))) | s(bool,'F_0') = s(bool,happ(s(fun(X458,bool),X459),s(X458,sK6(X460,X458)))) | s('type.option.option'(X458),'const.option.NONE_0') = s('type.option.option'(X458),X460)) ) | $spl0),
  inference(superposition,[],[f1774,f559])).
fof(f35280,plain,(
  ( ! [X453,X455,X457,X454,X456] : (s(bool,X457) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X453),X455),s(bool,X456),s(fun(X453,bool),X454))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X453,bool),X454),s(X453,sK6(X455,X453)))))) | s(bool,'F_0') = s(bool,X457) | s('type.option.option'(X453),'const.option.NONE_0') = s('type.option.option'(X453),X455)) ) | $spl0),
  inference(superposition,[],[f1774,f559])).
fof(f35279,plain,(
  ( ! [X449,X451,X452,X448,X450] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X448),X450),s(bool,X451),s(fun(X448,bool),X449))))) | s(bool,X452) = s(bool,happ(s(fun(X448,bool),X449),s(X448,sK6(X450,X448)))) | s(bool,'F_0') = s(bool,X452) | s('type.option.option'(X448),'const.option.NONE_0') = s('type.option.option'(X448),X450)) ) | $spl0),
  inference(superposition,[],[f1758,f559])).
fof(f35278,plain,(
  ( ! [X445,X447,X443,X444,X446] : (s(bool,X447) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X443),X445),s(bool,X446),s(fun(X443,bool),X444))) | s(bool,'T_0') = s(bool,happ(s(fun(X443,bool),X444),s(X443,sK6(X445,X443)))) | s(bool,'F_0') = s(bool,X447) | s('type.option.option'(X443),'const.option.NONE_0') = s('type.option.option'(X443),X445)) ) | $spl0),
  inference(superposition,[],[f1747,f559])).
fof(f35277,plain,(
  ( ! [X441,X438,X440,X442,X439] : (s(bool,X442) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X438),X440),s(bool,X441),s(fun(X438,bool),X439))) | s(bool,'T_0') = s(bool,X442) | s(bool,'F_0') = s(bool,happ(s(fun(X438,bool),X439),s(X438,sK6(X440,X438)))) | s('type.option.option'(X438),'const.option.NONE_0') = s('type.option.option'(X438),X440)) ) | $spl0),
  inference(superposition,[],[f1747,f559])).
fof(f35693,plain,(
  ( ! [X414,X416,X415,X417] : (s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X414),X416),s(bool,X417),s(fun(X414,bool),X415))) | s(bool,'T_0') = s(bool,happ(s(fun(X414,bool),X415),s(X414,sK6(X416,X414)))) | s('type.option.option'(X414),'const.option.NONE_0') = s('type.option.option'(X414),X416)) ) | $spl0),
  inference(forward_demodulation,[],[f35272,f689])).
fof(f35272,plain,(
  ( ! [X414,X416,X415,X417] : (s(bool,'const.option.option_CASE_3'(s('type.option.option'(X414),X416),s(bool,X417),s(fun(X414,bool),X415))) != s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3))))) | s(bool,'T_0') = s(bool,happ(s(fun(X414,bool),X415),s(X414,sK6(X416,X414)))) | s('type.option.option'(X414),'const.option.NONE_0') = s('type.option.option'(X414),X416)) ) | $spl0),
  inference(superposition,[],[f766,f559])).
fof(f35270,plain,(
  ( ! [X405,X403,X404,X406,X402] : (~p(s(bool,happ(s(fun(bool,bool),X406),s(bool,'const.option.option_CASE_3'(s('type.option.option'(X402),X404),s(bool,X405),s(fun(X402,bool),X403)))))) | p(s(bool,happ(s(fun(bool,bool),X406),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(happ(s(fun(X402,bool),X403),s(X402,sK6(X404,X402))),X406,bool)) | s('type.option.option'(X402),'const.option.NONE_0') = s('type.option.option'(X402),X404)) )),
  inference(superposition,[],[f532,f559])).
fof(f35269,plain,(
  ( ! [X397,X399,X401,X398,X400] : (~p(s(bool,happ(s(fun(bool,bool),X401),s(bool,'const.option.option_CASE_3'(s('type.option.option'(X397),X399),s(bool,X400),s(fun(X397,bool),X398)))))) | s(bool,'F_0') = s(bool,sK7('F_0',X401,bool)) | s(bool,'T_0') = s(bool,happ(s(fun(X397,bool),X398),s(X397,sK6(X399,X397)))) | s('type.option.option'(X397),'const.option.NONE_0') = s('type.option.option'(X397),X399)) )),
  inference(superposition,[],[f439,f559])).
fof(f35268,plain,(
  ( ! [X393,X395,X396,X392,X394] : (s(bool,'F_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X392),X394),s(bool,X395),s(fun(X392,bool),X393))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X396))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X392,bool),X393),s(X392,sK6(X394,X392)))))) | s(bool,'T_0') = s(bool,X396) | s('type.option.option'(X392),'const.option.NONE_0') = s('type.option.option'(X392),X394)) )),
  inference(superposition,[],[f404,f559])).
fof(f35267,plain,(
  ( ! [X389,X391,X387,X388,X390] : (s(bool,X391) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X387),X389),s(bool,X390),s(fun(X387,bool),X388))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X387,bool),X388),s(X387,sK6(X389,X387)))))) | s(bool,'T_0') = s(bool,X391) | s('type.option.option'(X387),'const.option.NONE_0') = s('type.option.option'(X387),X389)) )),
  inference(superposition,[],[f403,f559])).
fof(f35266,plain,(
  ( ! [X383,X385,X382,X384,X386] : (s(bool,X386) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X382),X384),s(bool,X385),s(fun(X382,bool),X383))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X386))) | s(bool,'T_0') = s(bool,happ(s(fun(X382,bool),X383),s(X382,sK6(X384,X382)))) | s('type.option.option'(X382),'const.option.NONE_0') = s('type.option.option'(X382),X384)) )),
  inference(superposition,[],[f403,f559])).
fof(f35265,plain,(
  ( ! [X377,X379,X380,X378,X381] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X377),X379),s(bool,X380),s(fun(X377,bool),X378))))) | s(bool,X381) = s(bool,happ(s(fun(X377,bool),X378),s(X377,sK6(X379,X377)))) | s(bool,'T_0') = s(bool,X381) | s('type.option.option'(X377),'const.option.NONE_0') = s('type.option.option'(X377),X379)) )),
  inference(superposition,[],[f362,f559])).
fof(f35264,plain,(
  ( ! [X372,X374,X376,X373,X375] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X376))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X372),X374),s(bool,X375),s(fun(X372,bool),X373))))) | s(bool,'F_0') = s(bool,happ(s(fun(X372,bool),X373),s(X372,sK6(X374,X372)))) | s(bool,'T_0') = s(bool,X376) | s('type.option.option'(X372),'const.option.NONE_0') = s('type.option.option'(X372),X374)) )),
  inference(superposition,[],[f361,f559])).
fof(f35263,plain,(
  ( ! [X368,X370,X367,X369,X371] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X371))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X367),X369),s(bool,X370),s(fun(X367,bool),X368))))) | s(bool,'F_0') = s(bool,X371) | s(bool,'T_0') = s(bool,happ(s(fun(X367,bool),X368),s(X367,sK6(X369,X367)))) | s('type.option.option'(X367),'const.option.NONE_0') = s('type.option.option'(X367),X369)) )),
  inference(superposition,[],[f361,f559])).
fof(f35262,plain,(
  ( ! [X364,X366,X362,X365,X361,X363] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X365),'const.option.NONE_0'),s(bool,'const.option.option_CASE_3'(s('type.option.option'(X361),X363),s(bool,X364),s(fun(X361,bool),X362))),s(fun(X365,bool),X366))) | s(bool,'F_0') = s(bool,happ(s(fun(X361,bool),X362),s(X361,sK6(X363,X361)))) | s('type.option.option'(X361),'const.option.NONE_0') = s('type.option.option'(X361),X363)) )),
  inference(superposition,[],[f298,f559])).
fof(f35261,plain,(
  ( ! [X356,X358,X360,X357,X359] : (p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X356),X358),s(bool,X359),s(fun(X356,bool),X357)))) | s(bool,X360) = s(bool,happ(s(fun(X356,bool),X357),s(X356,sK6(X358,X356)))) | s(bool,'T_0') = s(bool,X360) | s('type.option.option'(X356),'const.option.NONE_0') = s('type.option.option'(X356),X358)) )),
  inference(superposition,[],[f243,f559])).
fof(f35260,plain,(
  ( ! [X352,X354,X351,X353,X355] : (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X351),X353),s(bool,X354),s(fun(X351,bool),X352)))) | s(bool,X355) != s(bool,happ(s(fun(X351,bool),X352),s(X351,sK6(X353,X351)))) | s(bool,'T_0') = s(bool,X355) | s('type.option.option'(X351),'const.option.NONE_0') = s('type.option.option'(X351),X353)) )),
  inference(superposition,[],[f211,f559])).
fof(f35255,plain,(
  ( ! [X327,X329,X326,X328,X330] : (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X326),X328),s(bool,X329),s(fun(X326,bool),X327)))) | ~p(s(bool,X330)) | s(bool,X330) = s(bool,happ(s(fun(X326,bool),X327),s(X326,sK6(X328,X326)))) | s('type.option.option'(X326),'const.option.NONE_0') = s('type.option.option'(X326),X328)) )),
  inference(superposition,[],[f165,f559])).
fof(f35253,plain,(
  ( ! [X316,X318,X320,X317,X319] : (p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X316),X318),s(bool,X319),s(fun(X316,bool),X317)))) | p(s(bool,X320)) | s(bool,X320) = s(bool,happ(s(fun(X316,bool),X317),s(X316,sK6(X318,X316)))) | s('type.option.option'(X316),'const.option.NONE_0') = s('type.option.option'(X316),X318)) )),
  inference(superposition,[],[f162,f559])).
fof(f35252,plain,(
  ( ! [X313,X315,X312,X314] : (p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X312),X314),s(bool,X315),s(fun(X312,bool),X313)))) | s(bool,'F_0') = s(bool,happ(s(fun(X312,bool),X313),s(X312,sK6(X314,X312)))) | s('type.option.option'(X312),'const.option.NONE_0') = s('type.option.option'(X312),X314)) )),
  inference(superposition,[],[f128,f559])).
fof(f35251,plain,(
  ( ! [X308,X310,X309,X311] : (s(bool,'F_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X308),X310),s(bool,X311),s(fun(X308,bool),X309))) | ~p(s(bool,happ(s(fun(X308,bool),X309),s(X308,sK6(X310,X308))))) | s('type.option.option'(X308),'const.option.NONE_0') = s('type.option.option'(X308),X310)) )),
  inference(superposition,[],[f127,f559])).
fof(f35250,plain,(
  ( ! [X304,X306,X305,X307] : (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X304),X306),s(bool,X307),s(fun(X304,bool),X305)))) | s(bool,'T_0') = s(bool,happ(s(fun(X304,bool),X305),s(X304,sK6(X306,X304)))) | s('type.option.option'(X304),'const.option.NONE_0') = s('type.option.option'(X304),X306)) )),
  inference(superposition,[],[f124,f559])).
fof(f35249,plain,(
  ( ! [X300,X302,X301,X303] : (p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X300),X302),s(bool,X303),s(fun(X300,bool),X301)))) | s(bool,'T_0') != s(bool,happ(s(fun(X300,bool),X301),s(X300,sK6(X302,X300)))) | s('type.option.option'(X300),'const.option.NONE_0') = s('type.option.option'(X300),X302)) )),
  inference(superposition,[],[f123,f559])).
fof(f35247,plain,(
  ( ! [X288,X287,X289,X286] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X286),X288),s(bool,X289),s(fun(X286,bool),X287)))),bool)) | s(X286,sK6(X288,X286)) = s(X286,sK7(sK6(X288,X286),X287,X286)) | s('type.option.option'(X286),'const.option.NONE_0') = s('type.option.option'(X286),X288)) ) | $spl0),
  inference(superposition,[],[f33781,f559])).
fof(f35246,plain,(
  ( ! [X282,X285,X283,X284] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X282),X284),s(bool,X285),s(fun(X282,bool),X283)))),bool)) | s(X282,sK6(X284,X282)) = s(X282,sK7(sK6(X284,X282),X283,X282)) | s('type.option.option'(X282),'const.option.NONE_0') = s('type.option.option'(X282),X284)) ) | $spl0),
  inference(superposition,[],[f3724,f559])).
fof(f35245,plain,(
  ( ! [X280,X279,X281,X278] : (s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X278),X280),s(bool,X281),s(fun(X278,bool),X279))) | s(X278,sK6(X280,X278)) = s(X278,sK7(sK6('const.option.SOME_1'(s(X278,sK6(X280,X278))),X278),X279,X278)) | s('type.option.option'(X278),'const.option.NONE_0') = s('type.option.option'(X278),X280)) ) | $spl0),
  inference(superposition,[],[f3093,f559])).
fof(f35244,plain,(
  ( ! [X277,X275,X276,X274] : (s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X274),X276),s(bool,X277),s(fun(X274,bool),X275))) | s(X274,sK6(X276,X274)) = s(X274,sK7(sK6(X276,X274),X275,X274)) | s('type.option.option'(X274),'const.option.NONE_0') = s('type.option.option'(X274),X276)) ) | $spl0),
  inference(superposition,[],[f2789,f559])).
fof(f35243,plain,(
  ( ! [X271,X273,X270,X272] : (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X270),X272),s(bool,X273),s(fun(X270,bool),X271)))) | s(X270,sK7(sK6(X272,X270),X271,X270)) = s(X270,sK7(sK7(sK6(X272,X270),X271,X270),X271,X270)) | s('type.option.option'(X270),'const.option.NONE_0') = s('type.option.option'(X270),X272)) ) | $spl0),
  inference(superposition,[],[f2788,f559])).
fof(f35240,plain,(
  ( ! [X261,X259,X260,X258] : (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X258),X260),s(bool,X261),s(fun(X258,bool),X259)))) | s(bool,'T_0') = s(bool,happ(s(fun(X258,bool),X259),s(X258,sK7(sK6(X260,X258),X259,X258)))) | s('type.option.option'(X258),'const.option.NONE_0') = s('type.option.option'(X258),X260)) )),
  inference(superposition,[],[f535,f559])).
fof(f35239,plain,(
  ( ! [X255,X253,X257,X254,X252,X256] : (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X252),X254),s(bool,X255),s(fun(X252,bool),X253)))) | s(X252,sK6(X254,X252)) = s(X252,sK7('const.option.option_CASE_3'(s('type.option.option'(X256),'const.option.NONE_0'),s(X252,sK6(X254,X252)),s(fun(X256,X252),X257)),X253,X252)) | s('type.option.option'(X252),'const.option.NONE_0') = s('type.option.option'(X252),X254)) )),
  inference(superposition,[],[f447,f559])).
fof(f35238,plain,(
  ( ! [X251,X249,X246,X250,X248,X247] : (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X246),X248),s(bool,X249),s(fun(X246,bool),X247)))) | s(X246,sK6(X248,X246)) = s(X246,sK7(sK6(X248,X246),'const.option.option_CASE_3'(s('type.option.option'(X250),'const.option.NONE_0'),s(fun(X246,bool),X247),s(fun(X250,fun(X246,bool)),X251)),X246)) | s('type.option.option'(X246),'const.option.NONE_0') = s('type.option.option'(X246),X248)) )),
  inference(superposition,[],[f434,f559])).
fof(f35237,plain,(
  ( ! [X243,X244,X242,X245] : (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X242),X244),s(bool,X245),s(fun(X242,bool),X243)))) | s(X242,sK6(X244,X242)) = s(X242,sK7(sK6(X244,X242),X243,X242)) | s('type.option.option'(X242),'const.option.NONE_0') = s('type.option.option'(X242),X244)) )),
  inference(superposition,[],[f160,f559])).
fof(f35236,plain,(
  ( ! [X241,X239,X237,X240,X238] : (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X237),X239),s(bool,X240),s(fun(X237,bool),X238)))) | p(s(bool,happ(s(fun(X237,bool),X238),s(X237,X241)))) | s(X237,X241) != s(X237,sK6(X239,X237)) | s('type.option.option'(X237),'const.option.NONE_0') = s('type.option.option'(X237),X239)) )),
  inference(superposition,[],[f159,f559])).
fof(f35235,plain,(
  ( ! [X231,X235,X233,X236,X234,X232] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X231,bool),X236),s(X231,'const.option.option_CASE_3'(s('type.option.option'(X232),X234),s(X231,X235),s(fun(X232,X231),X233)))))),bool)) | s(X231,happ(s(fun(X232,X231),X233),s(X232,sK6(X234,X232)))) = s(X231,sK7(happ(s(fun(X232,X231),X233),s(X232,sK6(X234,X232))),X236,X231)) | s('type.option.option'(X232),'const.option.NONE_0') = s('type.option.option'(X232),X234)) ) | $spl0),
  inference(superposition,[],[f33781,f559])).
fof(f35229,plain,(
  ( ! [X198,X196,X194,X197,X195,X193] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X193,bool),X198),s(X193,'const.option.option_CASE_3'(s('type.option.option'(X194),X196),s(X193,X197),s(fun(X194,X193),X195)))))),bool)) | s(X193,happ(s(fun(X194,X193),X195),s(X194,sK6(X196,X194)))) = s(X193,sK7(happ(s(fun(X194,X193),X195),s(X194,sK6(X196,X194))),X198,X193)) | s('type.option.option'(X194),'const.option.NONE_0') = s('type.option.option'(X194),X196)) ) | $spl0),
  inference(superposition,[],[f3724,f559])).
fof(f35228,plain,(
  ( ! [X191,X189,X187,X192,X190,X188] : (s(bool,'T_0') != s(bool,happ(s(fun(X187,bool),X192),s(X187,'const.option.option_CASE_3'(s('type.option.option'(X188),X190),s(X187,X191),s(fun(X188,X187),X189))))) | s(X187,happ(s(fun(X188,X187),X189),s(X188,sK6(X190,X188)))) = s(X187,sK7(sK6('const.option.SOME_1'(s(X187,happ(s(fun(X188,X187),X189),s(X188,sK6(X190,X188))))),X187),X192,X187)) | s('type.option.option'(X188),'const.option.NONE_0') = s('type.option.option'(X188),X190)) ) | $spl0),
  inference(superposition,[],[f3093,f559])).
fof(f35226,plain,(
  ( ! [X177,X175,X178,X176,X174,X179] : (s(bool,'T_0') != s(bool,happ(s(fun(X174,bool),X179),s(X174,'const.option.option_CASE_3'(s('type.option.option'(X175),X177),s(X174,X178),s(fun(X175,X174),X176))))) | s(X174,happ(s(fun(X175,X174),X176),s(X175,sK6(X177,X175)))) = s(X174,sK7(happ(s(fun(X175,X174),X176),s(X175,sK6(X177,X175))),X179,X174)) | s('type.option.option'(X175),'const.option.NONE_0') = s('type.option.option'(X175),X177)) ) | $spl0),
  inference(superposition,[],[f2789,f559])).
fof(f35225,plain,(
  ( ! [X173,X171,X169,X172,X170,X168] : (~p(s(bool,happ(s(fun(X168,bool),X173),s(X168,'const.option.option_CASE_3'(s('type.option.option'(X169),X171),s(X168,X172),s(fun(X169,X168),X170)))))) | s(X168,sK7(happ(s(fun(X169,X168),X170),s(X169,sK6(X171,X169))),X173,X168)) = s(X168,sK7(sK7(happ(s(fun(X169,X168),X170),s(X169,sK6(X171,X169))),X173,X168),X173,X168)) | s('type.option.option'(X169),'const.option.NONE_0') = s('type.option.option'(X169),X171)) ) | $spl0),
  inference(superposition,[],[f2788,f559])).
fof(f35224,plain,(
  ( ! [X167,X165,X163,X166,X164,X162] : (s(X162,'const.option.option_CASE_3'(s('type.option.option'(X163),X165),s(X162,X166),s(fun(X163,X162),X164))) = s(X162,sK7(sK6('const.option.SOME_1'(s(X162,'const.option.option_CASE_3'(s('type.option.option'(X163),X165),s(X162,X166),s(fun(X163,X162),X164)))),X162),X167,X162)) | s(bool,'F_0') = s(bool,happ(s(fun(X162,bool),X167),s(X162,happ(s(fun(X163,X162),X164),s(X163,sK6(X165,X163)))))) | s('type.option.option'(X163),'const.option.NONE_0') = s('type.option.option'(X163),X165)) ) | $spl0),
  inference(superposition,[],[f2781,f559])).
fof(f35223,plain,(
  ( ! [X158,X156,X161,X159,X157,X160] : (s(bool,'F_0') = s(bool,happ(s(fun(X156,bool),X161),s(X156,'const.option.option_CASE_3'(s('type.option.option'(X157),X159),s(X156,X160),s(fun(X157,X156),X158))))) | s(X156,happ(s(fun(X157,X156),X158),s(X157,sK6(X159,X157)))) = s(X156,sK7(sK6('const.option.SOME_1'(s(X156,happ(s(fun(X157,X156),X158),s(X157,sK6(X159,X157))))),X156),X161,X156)) | s('type.option.option'(X157),'const.option.NONE_0') = s('type.option.option'(X157),X159)) ) | $spl0),
  inference(superposition,[],[f2781,f559])).
fof(f35222,plain,(
  ( ! [X154,X152,X151,X155,X153,X150] : (s(bool,'F_0') = s(bool,happ(s(fun(X150,bool),X155),s(X150,'const.option.option_CASE_3'(s('type.option.option'(X151),X153),s(X150,X154),s(fun(X151,X150),X152))))) | s(X150,happ(s(fun(X151,X150),X152),s(X151,sK6(X153,X151)))) = s(X150,sK7(happ(s(fun(X151,X150),X152),s(X151,sK6(X153,X151))),X155,X150)) | s('type.option.option'(X151),'const.option.NONE_0') = s('type.option.option'(X151),X153)) ) | $spl0),
  inference(superposition,[],[f1756,f559])).
fof(f35220,plain,(
  ( ! [X144,X142,X140,X138,X143,X141,X139] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X138),'const.option.SOME_1'(s(X138,'const.option.option_CASE_3'(s('type.option.option'(X139),X141),s(X138,X142),s(fun(X139,X138),X140))))),s(bool,X143),s(fun(X138,bool),X144))) | s(bool,'F_0') = s(bool,happ(s(fun(X138,bool),X144),s(X138,happ(s(fun(X139,X138),X140),s(X139,sK6(X141,X139)))))) | s('type.option.option'(X139),'const.option.NONE_0') = s('type.option.option'(X139),X141)) )),
  inference(superposition,[],[f572,f559])).
fof(f35219,plain,(
  ( ! [X134,X132,X136,X135,X133,X137] : (~p(s(bool,happ(s(fun(X132,bool),X137),s(X132,'const.option.option_CASE_3'(s('type.option.option'(X133),X135),s(X132,X136),s(fun(X133,X132),X134)))))) | s(bool,'T_0') = s(bool,happ(s(fun(X132,bool),X137),s(X132,sK7(happ(s(fun(X133,X132),X134),s(X133,sK6(X135,X133))),X137,X132)))) | s('type.option.option'(X133),'const.option.NONE_0') = s('type.option.option'(X133),X135)) )),
  inference(superposition,[],[f535,f559])).
fof(f35218,plain,(
  ( ! [X127,X130,X128,X126,X131,X129] : (s('type.option.option'(X126),X131) != s('type.option.option'(X126),'const.option.SOME_1'(s(X126,'const.option.option_CASE_3'(s('type.option.option'(X127),X129),s(X126,X130),s(fun(X127,X126),X128))))) | s(X126,sK6(X131,X126)) = s(X126,happ(s(fun(X127,X126),X128),s(X127,sK6(X129,X127)))) | s('type.option.option'(X126),'const.option.NONE_0') = s('type.option.option'(X126),X131) | s('type.option.option'(X127),'const.option.NONE_0') = s('type.option.option'(X127),X129)) )),
  inference(superposition,[],[f459,f559])).
fof(f35217,plain,(
  ( ! [X125,X123,X121,X118,X124,X122,X120,X119] : (~p(s(bool,happ(s(fun(X118,bool),X123),s(X118,'const.option.option_CASE_3'(s('type.option.option'(X119),X121),s(X118,X122),s(fun(X119,X118),X120)))))) | s(X118,happ(s(fun(X119,X118),X120),s(X119,sK6(X121,X119)))) = s(X118,sK7('const.option.option_CASE_3'(s('type.option.option'(X124),'const.option.NONE_0'),s(X118,happ(s(fun(X119,X118),X120),s(X119,sK6(X121,X119)))),s(fun(X124,X118),X125)),X123,X118)) | s('type.option.option'(X119),'const.option.NONE_0') = s('type.option.option'(X119),X121)) )),
  inference(superposition,[],[f447,f559])).
fof(f35216,plain,(
  ( ! [X111,X116,X114,X112,X110,X117,X115,X113] : (~p(s(bool,happ(s(fun(X110,bool),X115),s(X110,'const.option.option_CASE_3'(s('type.option.option'(X111),X113),s(X110,X114),s(fun(X111,X110),X112)))))) | s(X110,happ(s(fun(X111,X110),X112),s(X111,sK6(X113,X111)))) = s(X110,sK7(happ(s(fun(X111,X110),X112),s(X111,sK6(X113,X111))),'const.option.option_CASE_3'(s('type.option.option'(X116),'const.option.NONE_0'),s(fun(X110,bool),X115),s(fun(X116,fun(X110,bool)),X117)),X110)) | s('type.option.option'(X111),'const.option.NONE_0') = s('type.option.option'(X111),X113)) )),
  inference(superposition,[],[f434,f559])).
fof(f35215,plain,(
  ( ! [X103,X109,X107,X105,X102,X108,X106,X104] : (s('type.option.option'(X102),'const.option.SOME_1'(s(X102,X107))) != s('type.option.option'(X102),'const.option.SOME_1'(s(X102,'const.option.option_CASE_3'(s('type.option.option'(X103),X105),s(X102,X106),s(fun(X103,X102),X104))))) | s(X102,happ(s(fun(X103,X102),X104),s(X103,sK6(X105,X103)))) = s(X102,'const.option.option_CASE_3'(s('type.option.option'(X108),'const.option.NONE_0'),s(X102,X107),s(fun(X108,X102),X109))) | s('type.option.option'(X103),'const.option.NONE_0') = s('type.option.option'(X103),X105)) )),
  inference(superposition,[],[f363,f559])).
fof(f35214,plain,(
  ( ! [X94,X101,X99,X97,X95,X100,X98,X96] : (s('type.option.option'(X94),'const.option.SOME_1'(s(X94,X99))) != s('type.option.option'(X94),'const.option.SOME_1'(s(X94,'const.option.option_CASE_3'(s('type.option.option'(X95),X97),s(X94,X98),s(fun(X95,X94),X96))))) | s(X94,X99) = s(X94,'const.option.option_CASE_3'(s('type.option.option'(X100),'const.option.NONE_0'),s(X94,happ(s(fun(X95,X94),X96),s(X95,sK6(X97,X95)))),s(fun(X100,X94),X101))) | s('type.option.option'(X95),'const.option.NONE_0') = s('type.option.option'(X95),X97)) )),
  inference(superposition,[],[f363,f559])).
fof(f35206,plain,(
  ( ! [X47,X45,X43,X46,X44,X42] : (~p(s(bool,happ(s(fun(X42,bool),X47),s(X42,'const.option.option_CASE_3'(s('type.option.option'(X43),X45),s(X42,X46),s(fun(X43,X42),X44)))))) | s(X42,happ(s(fun(X43,X42),X44),s(X43,sK6(X45,X43)))) = s(X42,sK7(happ(s(fun(X43,X42),X44),s(X43,sK6(X45,X43))),X47,X42)) | s('type.option.option'(X43),'const.option.NONE_0') = s('type.option.option'(X43),X45)) )),
  inference(superposition,[],[f160,f559])).
fof(f35205,plain,(
  ( ! [X39,X37,X35,X41,X38,X36,X40] : (~p(s(bool,happ(s(fun(X35,bool),X40),s(X35,'const.option.option_CASE_3'(s('type.option.option'(X36),X38),s(X35,X39),s(fun(X36,X35),X37)))))) | p(s(bool,happ(s(fun(X35,bool),X40),s(X35,X41)))) | s(X35,X41) != s(X35,happ(s(fun(X36,X35),X37),s(X36,sK6(X38,X36)))) | s('type.option.option'(X36),'const.option.NONE_0') = s('type.option.option'(X36),X38)) )),
  inference(superposition,[],[f159,f559])).
fof(f35203,plain,(
  ( ! [X28,X26,X24,X23,X27,X25] : (s(X23,X28) != s(X23,'const.option.option_CASE_3'(s('type.option.option'(X24),X26),s(X23,X27),s(fun(X24,X23),X25))) | s('type.option.option'(X23),'const.option.SOME_1'(s(X23,X28))) = s('type.option.option'(X23),'const.option.SOME_1'(s(X23,happ(s(fun(X24,X23),X25),s(X24,sK6(X26,X24)))))) | s('type.option.option'(X24),'const.option.NONE_0') = s('type.option.option'(X24),X26)) )),
  inference(superposition,[],[f158,f559])).
fof(f35201,plain,(
  ( ! [X14,X12,X15,X13,X11,X16] : (s('type.option.option'(X11),'const.option.SOME_1'(s(X11,X16))) != s('type.option.option'(X11),'const.option.SOME_1'(s(X11,'const.option.option_CASE_3'(s('type.option.option'(X12),X14),s(X11,X15),s(fun(X12,X11),X13))))) | s(X11,X16) = s(X11,happ(s(fun(X12,X11),X13),s(X12,sK6(X14,X12)))) | s('type.option.option'(X12),'const.option.NONE_0') = s('type.option.option'(X12),X14)) )),
  inference(superposition,[],[f157,f559])).
fof(f35198,plain,(
  ( ! [X212,X215,X213,X214] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),happ(s(fun(X212,'type.option.option'(bool)),X215),s(X212,sK6(X213,X212)))) | s('type.option.option'(X212),'const.option.NONE_0') = s('type.option.option'(X212),X213) | s(bool,'T_0') = s(bool,sK6('const.option.option_CASE_3'(s('type.option.option'(X212),X213),s('type.option.option'(bool),X214),s(fun(X212,'type.option.option'(bool)),X215)),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X212),X213),s('type.option.option'(bool),X214),s(fun(X212,'type.option.option'(bool)),X215)))) )),
  inference(superposition,[],[f559,f458])).
fof(f35197,plain,(
  ( ! [X210,X208,X211,X209] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),happ(s(fun(X208,'type.option.option'(bool)),X211),s(X208,sK6(X209,X208)))) | s('type.option.option'(X208),'const.option.NONE_0') = s('type.option.option'(X208),X209) | s(bool,'F_0') = s(bool,sK6('const.option.option_CASE_3'(s('type.option.option'(X208),X209),s('type.option.option'(bool),X210),s(fun(X208,'type.option.option'(bool)),X211)),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X208),X209),s('type.option.option'(bool),X210),s(fun(X208,'type.option.option'(bool)),X211)))) ) | $spl0),
  inference(superposition,[],[f559,f1766])).
fof(f35194,plain,(
  ( ! [X196,X194,X192,X195,X193] : (s(bool,X196) = s(bool,happ(s(fun(X192,bool),X195),s(X192,sK6(X193,X192)))) | s('type.option.option'(X192),'const.option.NONE_0') = s('type.option.option'(X192),X193) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X192),X193),s(bool,X194),s(fun(X192,bool),X195))))) | s(bool,'T_0') = s(bool,X196)) ) | $spl0),
  inference(superposition,[],[f559,f14030])).
fof(f35683,plain,(
  ( ! [X146,X144,X145,X143] : (s(bool,'T_0') = s(bool,happ(s(fun(X143,bool),X146),s(X143,sK6(X144,X143)))) | s('type.option.option'(X143),'const.option.NONE_0') = s('type.option.option'(X143),X144) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X143),X144),s(bool,X145),s(fun(X143,bool),X146)))))) ) | $spl0),
  inference(forward_demodulation,[],[f35184,f901])).
fof(f35184,plain,(
  ( ! [X146,X144,X145,X143] : (s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) = s(bool,happ(s(fun(X143,bool),X146),s(X143,sK6(X144,X143)))) | s('type.option.option'(X143),'const.option.NONE_0') = s('type.option.option'(X143),X144) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X143),X144),s(bool,X145),s(fun(X143,bool),X146)))))) ) | $spl0),
  inference(superposition,[],[f559,f8984])).
fof(f35682,plain,(
  ( ! [X142,X140,X141,X139] : (s(bool,'T_0') = s(bool,happ(s(fun(X139,bool),X142),s(X139,sK6(X140,X139)))) | s('type.option.option'(X139),'const.option.NONE_0') = s('type.option.option'(X139),X140) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X139),X140),s(bool,X141),s(fun(X139,bool),X142)))),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f35183,f901])).
fof(f35183,plain,(
  ( ! [X142,X140,X141,X139] : (s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) = s(bool,happ(s(fun(X139,bool),X142),s(X139,sK6(X140,X139)))) | s('type.option.option'(X139),'const.option.NONE_0') = s('type.option.option'(X139),X140) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X139),X140),s(bool,X141),s(fun(X139,bool),X142)))),bool))) ) | $spl0),
  inference(superposition,[],[f559,f7724])).
fof(f35177,plain,(
  ( ! [X116,X114,X117,X115,X113] : (s(bool,X117) = s(bool,happ(s(fun(X113,bool),X116),s(X113,sK6(X114,X113)))) | s('type.option.option'(X113),'const.option.NONE_0') = s('type.option.option'(X113),X114) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X113),X114),s(bool,X115),s(fun(X113,bool),X116))))) | s(bool,'F_0') = s(bool,X117)) ) | $spl0),
  inference(superposition,[],[f559,f3902])).
fof(f35169,plain,(
  ( ! [X68,X66,X69,X67,X65] : (s(bool,X69) = s(bool,happ(s(fun(X65,bool),X68),s(X65,sK6(X66,X65)))) | s('type.option.option'(X65),'const.option.NONE_0') = s('type.option.option'(X65),X66) | s(bool,'F_0') = s(bool,X69) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X65),X66),s(bool,X67),s(fun(X65,bool),X68)))),bool))) ) | $spl0),
  inference(superposition,[],[f559,f1834])).
fof(f35055,plain,(
  ( ! [X103,X101,X105,X102,X106,X104] : (s(X104,'const.option.option_CASE_3'(s('type.option.option'(X101),X102),s(X104,X106),s(fun(X101,X104),X105))) = s(X104,happ(s(fun(X101,X104),X105),s(X101,sK6(sK7(sK6('const.option.SOME_1'(s('type.option.option'(X101),X102)),'type.option.option'(X101)),X103,'type.option.option'(X101)),X101)))) | s('type.option.option'(X101),'const.option.NONE_0') = s('type.option.option'(X101),sK7(sK6('const.option.SOME_1'(s('type.option.option'(X101),X102)),'type.option.option'(X101)),X103,'type.option.option'(X101))) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(X101),bool),X103),s('type.option.option'(X101),X102)))) ) | $spl0),
  inference(superposition,[],[f559,f2781])).
fof(f35672,plain,(
  ( ! [X99,X97,X100,X98,X96] : (s('type.option.option'(X96),'const.option.NONE_0') = s('type.option.option'(X96),X97) | s(X98,'const.option.option_CASE_3'(s('type.option.option'(X96),X97),s(X98,X100),s(fun(X96,X98),X99))) = s(X98,happ(s(fun(X96,X98),X99),s(X96,sK6(sK6('const.option.SOME_1'(s('type.option.option'(X96),X97)),'type.option.option'(X96)),X96))))) )),
  inference(forward_demodulation,[],[f35054,f901])).
fof(f35054,plain,(
  ( ! [X99,X97,X100,X98,X96] : (s(X98,'const.option.option_CASE_3'(s('type.option.option'(X96),X97),s(X98,X100),s(fun(X96,X98),X99))) = s(X98,happ(s(fun(X96,X98),X99),s(X96,sK6(sK6('const.option.SOME_1'(s('type.option.option'(X96),X97)),'type.option.option'(X96)),X96)))) | s('type.option.option'(X96),'const.option.NONE_0') = s('type.option.option'(X96),sK6('const.option.SOME_1'(s('type.option.option'(X96),X97)),'type.option.option'(X96)))) )),
  inference(superposition,[],[f559,f901])).
fof(f35053,plain,(
  ( ! [X94,X92,X90,X88,X95,X93,X91,X89] : (s(X93,happ(s(fun(X88,X93),X94),s(X88,sK6(happ(s(fun(X89,'type.option.option'(X88)),X90),s(X89,sK6(X91,X89))),X88)))) = s(X93,'const.option.option_CASE_3'(s('type.option.option'(X88),'const.option.option_CASE_3'(s('type.option.option'(X89),X91),s('type.option.option'(X88),X92),s(fun(X89,'type.option.option'(X88)),X90))),s(X93,X95),s(fun(X88,X93),X94))) | s('type.option.option'(X88),'const.option.NONE_0') = s('type.option.option'(X88),happ(s(fun(X89,'type.option.option'(X88)),X90),s(X89,sK6(X91,X89)))) | s('type.option.option'(X89),'const.option.NONE_0') = s('type.option.option'(X89),X91)) )),
  inference(superposition,[],[f559,f559])).
fof(f35671,plain,(
  ( ! [X80,X87,X85,X83,X81,X86,X84,X82] : (s('type.option.option'(X80),'const.option.NONE_0') = s('type.option.option'(X80),'const.option.option_CASE_3'(s('type.option.option'(X81),X82),s('type.option.option'(X80),X83),s(fun(X81,'type.option.option'(X80)),X84))) | s(X85,'const.option.option_CASE_3'(s('type.option.option'(X80),'const.option.option_CASE_3'(s('type.option.option'(X81),X82),s('type.option.option'(X80),X83),s(fun(X81,'type.option.option'(X80)),X84))),s(X85,X87),s(fun(X80,X85),X86))) = s(X85,happ(s(fun(X80,X85),X86),s(X80,sK6(happ(s(fun(fun(X81,'type.option.option'(X80)),'type.option.option'(X80)),happ(s(fun('type.option.option'(X80),fun(fun(X81,'type.option.option'(X80)),'type.option.option'(X80))),happ(s(fun('type.option.option'(X81),fun('type.option.option'(X80),fun(fun(X81,'type.option.option'(X80)),'type.option.option'(X80)))),'const.option.option_CASE_0'),s('type.option.option'(X81),X82))),s('type.option.option'(X80),X83))),s(fun(X81,'type.option.option'(X80)),X84)),X80))))) )),
  inference(forward_demodulation,[],[f35052,f169])).
fof(f35052,plain,(
  ( ! [X80,X87,X85,X83,X81,X86,X84,X82] : (s(X85,'const.option.option_CASE_3'(s('type.option.option'(X80),'const.option.option_CASE_3'(s('type.option.option'(X81),X82),s('type.option.option'(X80),X83),s(fun(X81,'type.option.option'(X80)),X84))),s(X85,X87),s(fun(X80,X85),X86))) = s(X85,happ(s(fun(X80,X85),X86),s(X80,sK6(happ(s(fun(fun(X81,'type.option.option'(X80)),'type.option.option'(X80)),happ(s(fun('type.option.option'(X80),fun(fun(X81,'type.option.option'(X80)),'type.option.option'(X80))),happ(s(fun('type.option.option'(X81),fun('type.option.option'(X80),fun(fun(X81,'type.option.option'(X80)),'type.option.option'(X80)))),'const.option.option_CASE_0'),s('type.option.option'(X81),X82))),s('type.option.option'(X80),X83))),s(fun(X81,'type.option.option'(X80)),X84)),X80)))) | s('type.option.option'(X80),'const.option.NONE_0') = s('type.option.option'(X80),happ(s(fun(fun(X81,'type.option.option'(X80)),'type.option.option'(X80)),happ(s(fun('type.option.option'(X80),fun(fun(X81,'type.option.option'(X80)),'type.option.option'(X80))),happ(s(fun('type.option.option'(X81),fun('type.option.option'(X80),fun(fun(X81,'type.option.option'(X80)),'type.option.option'(X80)))),'const.option.option_CASE_0'),s('type.option.option'(X81),X82))),s('type.option.option'(X80),X83))),s(fun(X81,'type.option.option'(X80)),X84)))) )),
  inference(superposition,[],[f559,f169])).
fof(f35051,plain,(
  ( ! [X78,X76,X74,X72,X79,X77,X75,X73] : (s(X77,'const.option.option_CASE_3'(s('type.option.option'(X72),happ(s(fun(X73,'type.option.option'(X72)),X76),s(X73,sK6(X74,X73)))),s(X77,X79),s(fun(X72,X77),X78))) = s(X77,happ(s(fun(X72,X77),X78),s(X72,sK6('const.option.option_CASE_3'(s('type.option.option'(X73),X74),s('type.option.option'(X72),X75),s(fun(X73,'type.option.option'(X72)),X76)),X72)))) | s('type.option.option'(X72),'const.option.NONE_0') = s('type.option.option'(X72),'const.option.option_CASE_3'(s('type.option.option'(X73),X74),s('type.option.option'(X72),X75),s(fun(X73,'type.option.option'(X72)),X76))) | s('type.option.option'(X73),'const.option.NONE_0') = s('type.option.option'(X73),X74)) )),
  inference(superposition,[],[f559,f559])).
fof(f35670,plain,(
  ( ! [X70,X68,X66,X64,X71,X69,X67,X65] : (s('type.option.option'(X64),'const.option.NONE_0') = s('type.option.option'(X64),happ(s(fun(X65,'type.option.option'(X64)),X68),s(X65,X66))) | s(X69,'const.option.option_CASE_3'(s('type.option.option'(X64),happ(s(fun(X65,'type.option.option'(X64)),X68),s(X65,X66))),s(X69,X71),s(fun(X64,X69),X70))) = s(X69,happ(s(fun(X64,X69),X70),s(X64,sK6('const.option.option_CASE_3'(s('type.option.option'(X65),'const.option.SOME_1'(s(X65,X66))),s('type.option.option'(X64),X67),s(fun(X65,'type.option.option'(X64)),X68)),X64))))) )),
  inference(forward_demodulation,[],[f35050,f168])).
fof(f35050,plain,(
  ( ! [X70,X68,X66,X64,X71,X69,X67,X65] : (s(X69,'const.option.option_CASE_3'(s('type.option.option'(X64),happ(s(fun(X65,'type.option.option'(X64)),X68),s(X65,X66))),s(X69,X71),s(fun(X64,X69),X70))) = s(X69,happ(s(fun(X64,X69),X70),s(X64,sK6('const.option.option_CASE_3'(s('type.option.option'(X65),'const.option.SOME_1'(s(X65,X66))),s('type.option.option'(X64),X67),s(fun(X65,'type.option.option'(X64)),X68)),X64)))) | s('type.option.option'(X64),'const.option.NONE_0') = s('type.option.option'(X64),'const.option.option_CASE_3'(s('type.option.option'(X65),'const.option.SOME_1'(s(X65,X66))),s('type.option.option'(X64),X67),s(fun(X65,'type.option.option'(X64)),X68)))) )),
  inference(superposition,[],[f559,f168])).
fof(f35669,plain,(
  ( ! [X61,X59,X57,X62,X60,X58,X63] : (s('type.option.option'(X57),'const.option.NONE_0') = s('type.option.option'(X57),X59) | s(X61,'const.option.option_CASE_3'(s('type.option.option'(X57),X59),s(X61,X63),s(fun(X57,X61),X62))) = s(X61,happ(s(fun(X57,X61),X62),s(X57,sK6('const.option.option_CASE_3'(s('type.option.option'(X58),'const.option.NONE_0'),s('type.option.option'(X57),X59),s(fun(X58,'type.option.option'(X57)),X60)),X57))))) )),
  inference(forward_demodulation,[],[f35049,f166])).
fof(f35049,plain,(
  ( ! [X61,X59,X57,X62,X60,X58,X63] : (s(X61,'const.option.option_CASE_3'(s('type.option.option'(X57),X59),s(X61,X63),s(fun(X57,X61),X62))) = s(X61,happ(s(fun(X57,X61),X62),s(X57,sK6('const.option.option_CASE_3'(s('type.option.option'(X58),'const.option.NONE_0'),s('type.option.option'(X57),X59),s(fun(X58,'type.option.option'(X57)),X60)),X57)))) | s('type.option.option'(X57),'const.option.NONE_0') = s('type.option.option'(X57),'const.option.option_CASE_3'(s('type.option.option'(X58),'const.option.NONE_0'),s('type.option.option'(X57),X59),s(fun(X58,'type.option.option'(X57)),X60)))) )),
  inference(superposition,[],[f559,f166])).
fof(f35648,plain,(
  ( ! [X12,X10,X11] : (s(bool,'T_0') = s(bool,X10) | s(X11,happ(s(fun(bool,X11),X12),s(bool,'F_0'))) = s(X11,happ(s(fun(bool,X11),X12),s(bool,X10)))) ) | $spl0),
  inference(forward_demodulation,[],[f35647,f901])).
fof(f35647,plain,(
  ( ! [X12,X10,X11] : (s(X11,happ(s(fun(bool,X11),X12),s(bool,'F_0'))) = s(X11,happ(s(fun(bool,X11),X12),s(bool,X10))) | s(bool,X10) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f35646,f901])).
fof(f35646,plain,(
  ( ! [X12,X10,X11] : (s(X11,happ(s(fun(bool,X11),X12),s(bool,'F_0'))) = s(X11,happ(s(fun(bool,X11),X12),s(bool,sK6('const.option.SOME_1'(s(bool,X10)),bool)))) | s(bool,X10) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f35645,f168])).
fof(f35645,plain,(
  ( ! [X12,X10,X13,X11] : (s(X11,happ(s(fun(bool,X11),X12),s(bool,sK6('const.option.SOME_1'(s(bool,X10)),bool)))) = s(X11,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s(X11,X13),s(fun(bool,X11),X12))) | s(bool,X10) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f35038,f153])).
fof(f35038,plain,(
  ( ! [X12,X10,X13,X11] : (s(X11,happ(s(fun(bool,X11),X12),s(bool,sK6('const.option.SOME_1'(s(bool,X10)),bool)))) = s(X11,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s(X11,X13),s(fun(bool,X11),X12))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X10))) | s(bool,X10) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f559,f8984])).
fof(f35644,plain,(
  ( ! [X6,X7,X5,X9] : (s(X6,happ(s(fun(bool,X6),X7),s(bool,'F_0'))) = s(X6,happ(s(fun(bool,X6),X7),s(bool,X5))) | s(bool,X5) = s(bool,X9) | s(bool,'F_0') = s(bool,X9)) ) | $spl0),
  inference(forward_demodulation,[],[f35643,f901])).
fof(f35643,plain,(
  ( ! [X6,X7,X5,X9] : (s(X6,happ(s(fun(bool,X6),X7),s(bool,'F_0'))) = s(X6,happ(s(fun(bool,X6),X7),s(bool,sK6('const.option.SOME_1'(s(bool,X5)),bool)))) | s(bool,X5) = s(bool,X9) | s(bool,'F_0') = s(bool,X9)) ) | $spl0),
  inference(forward_demodulation,[],[f35642,f168])).
fof(f35642,plain,(
  ( ! [X6,X8,X7,X5,X9] : (s(X6,happ(s(fun(bool,X6),X7),s(bool,sK6('const.option.SOME_1'(s(bool,X5)),bool)))) = s(X6,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s(X6,X8),s(fun(bool,X6),X7))) | s(bool,X5) = s(bool,X9) | s(bool,'F_0') = s(bool,X9)) ) | $spl0),
  inference(subsumption_resolution,[],[f35037,f153])).
fof(f35037,plain,(
  ( ! [X6,X8,X7,X5,X9] : (s(X6,happ(s(fun(bool,X6),X7),s(bool,sK6('const.option.SOME_1'(s(bool,X5)),bool)))) = s(X6,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s(X6,X8),s(fun(bool,X6),X7))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X5))) | s(bool,X5) = s(bool,X9) | s(bool,'F_0') = s(bool,X9)) ) | $spl0),
  inference(superposition,[],[f559,f3902])).
fof(f35641,plain,(
  ( ! [X4,X2,X0,X1] : (s(X1,happ(s(fun(bool,X1),X2),s(bool,'T_0'))) = s(X1,happ(s(fun(bool,X1),X2),s(bool,X0))) | s(bool,X0) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) ) | $spl0),
  inference(forward_demodulation,[],[f35640,f901])).
fof(f35640,plain,(
  ( ! [X4,X2,X0,X1] : (s(X1,happ(s(fun(bool,X1),X2),s(bool,'T_0'))) = s(X1,happ(s(fun(bool,X1),X2),s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool)))) | s(bool,X0) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) ) | $spl0),
  inference(forward_demodulation,[],[f35639,f168])).
fof(f35639,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(X1,happ(s(fun(bool,X1),X2),s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool)))) = s(X1,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s(X1,X3),s(fun(bool,X1),X2))) | s(bool,X0) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) ) | $spl0),
  inference(subsumption_resolution,[],[f35036,f153])).
fof(f35036,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(X1,happ(s(fun(bool,X1),X2),s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool)))) = s(X1,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s(X1,X3),s(fun(bool,X1),X2))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0))) | s(bool,X0) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) ) | $spl0),
  inference(superposition,[],[f559,f14030])).
fof(f35035,plain,(
  ( ! [X212,X213,X211,X214] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X211),X213),s('type.option.option'(bool),X214),s(fun(X211,'type.option.option'(bool)),X212))) | s('type.option.option'(X211),'const.option.NONE_0') = s('type.option.option'(X211),X213) | s(bool,'T_0') = s(bool,sK6(happ(s(fun(X211,'type.option.option'(bool)),X212),s(X211,sK6(X213,X211))),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),happ(s(fun(X211,'type.option.option'(bool)),X212),s(X211,sK6(X213,X211))))) )),
  inference(superposition,[],[f559,f458])).
fof(f35034,plain,(
  ( ! [X210,X208,X209,X207] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X207),X209),s('type.option.option'(bool),X210),s(fun(X207,'type.option.option'(bool)),X208))) | s('type.option.option'(X207),'const.option.NONE_0') = s('type.option.option'(X207),X209) | s(bool,'F_0') = s(bool,sK6(happ(s(fun(X207,'type.option.option'(bool)),X208),s(X207,sK6(X209,X207))),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),happ(s(fun(X207,'type.option.option'(bool)),X208),s(X207,sK6(X209,X207))))) ) | $spl0),
  inference(superposition,[],[f559,f1766])).
fof(f35032,plain,(
  ( ! [X198,X196,X200,X199,X197] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X196),X198),s(bool,X199),s(fun(X196,bool),X197))) | s('type.option.option'(X196),'const.option.NONE_0') = s('type.option.option'(X196),X198) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X200))) | s(bool,X200) = s(bool,happ(s(fun(X196,bool),X197),s(X196,sK6(X198,X196))))) ) | $spl0),
  inference(superposition,[],[f559,f14030])).
fof(f35031,plain,(
  ( ! [X191,X194,X192,X195,X193] : (s(bool,X194) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X191),X193),s(bool,X195),s(fun(X191,bool),X192))) | s('type.option.option'(X191),'const.option.NONE_0') = s('type.option.option'(X191),X193) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X191,bool),X192),s(X191,sK6(X193,X191)))))) | s(bool,'T_0') = s(bool,X194)) ) | $spl0),
  inference(superposition,[],[f559,f14030])).
fof(f35030,plain,(
  ( ! [X189,X187,X190,X188,X186] : (s(bool,X189) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X186),X188),s(bool,X190),s(fun(X186,bool),X187))) | s('type.option.option'(X186),'const.option.NONE_0') = s('type.option.option'(X186),X188) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X189))) | s(bool,'T_0') = s(bool,happ(s(fun(X186,bool),X187),s(X186,sK6(X188,X186))))) ) | $spl0),
  inference(superposition,[],[f559,f14030])).
fof(f35629,plain,(
  ( ! [X144,X142,X145,X143] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X142),X144),s(bool,X145),s(fun(X142,bool),X143))) | s('type.option.option'(X142),'const.option.NONE_0') = s('type.option.option'(X142),X144) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X142,bool),X143),s(X142,sK6(X144,X142))))))) ) | $spl0),
  inference(forward_demodulation,[],[f35021,f901])).
fof(f35021,plain,(
  ( ! [X144,X142,X145,X143] : (s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X142),X144),s(bool,X145),s(fun(X142,bool),X143))) | s('type.option.option'(X142),'const.option.NONE_0') = s('type.option.option'(X142),X144) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X142,bool),X143),s(X142,sK6(X144,X142))))))) ) | $spl0),
  inference(superposition,[],[f559,f8984])).
fof(f35628,plain,(
  ( ! [X140,X138,X141,X139] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X138),X140),s(bool,X141),s(fun(X138,bool),X139))) | s('type.option.option'(X138),'const.option.NONE_0') = s('type.option.option'(X138),X140) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X138,bool),X139),s(X138,sK6(X140,X138))))),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f35020,f901])).
fof(f35020,plain,(
  ( ! [X140,X138,X141,X139] : (s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X138),X140),s(bool,X141),s(fun(X138,bool),X139))) | s('type.option.option'(X138),'const.option.NONE_0') = s('type.option.option'(X138),X140) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X138,bool),X139),s(X138,sK6(X140,X138))))),bool))) ) | $spl0),
  inference(superposition,[],[f559,f7724])).
fof(f35015,plain,(
  ( ! [X121,X118,X120,X119,X117] : (s(bool,X120) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X117),X119),s(bool,X121),s(fun(X117,bool),X118))) | s('type.option.option'(X117),'const.option.NONE_0') = s('type.option.option'(X117),X119) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X120))) | s(bool,'F_0') = s(bool,happ(s(fun(X117,bool),X118),s(X117,sK6(X119,X117))))) ) | $spl0),
  inference(superposition,[],[f559,f3902])).
fof(f35014,plain,(
  ( ! [X116,X114,X112,X115,X113] : (s(bool,X115) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X112),X114),s(bool,X116),s(fun(X112,bool),X113))) | s('type.option.option'(X112),'const.option.NONE_0') = s('type.option.option'(X112),X114) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X112,bool),X113),s(X112,sK6(X114,X112)))))) | s(bool,'F_0') = s(bool,X115)) ) | $spl0),
  inference(superposition,[],[f559,f3902])).
fof(f35013,plain,(
  ( ! [X111,X109,X107,X110,X108] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X107),X109),s(bool,X110),s(fun(X107,bool),X108))) | s('type.option.option'(X107),'const.option.NONE_0') = s('type.option.option'(X107),X109) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X111))) | s(bool,X111) = s(bool,happ(s(fun(X107,bool),X108),s(X107,sK6(X109,X107))))) ) | $spl0),
  inference(superposition,[],[f559,f3902])).
fof(f35012,plain,(
  ( ! [X103,X101,X105,X102,X100,X106,X104] : (s(bool,X103) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X100),X102),s(bool,X104),s(fun(X100,bool),X101))) | s('type.option.option'(X100),'const.option.NONE_0') = s('type.option.option'(X100),X102) | s(bool,X103) = s(bool,'const.bool.IN_2'(s(X105,X106),s(fun(X105,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,happ(s(fun(X100,bool),X101),s(X100,sK6(X102,X100))))) ) | $spl0),
  inference(superposition,[],[f559,f2976])).
fof(f35010,plain,(
  ( ! [X92,X90,X88,X87,X91,X89,X86] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X86),X88),s(bool,X89),s(fun(X86,bool),X87))) | s('type.option.option'(X86),'const.option.NONE_0') = s('type.option.option'(X86),X88) | s(bool,X90) = s(bool,'const.bool.IN_2'(s(X91,X92),s(fun(X91,bool),'const.pred_set.EMPTY_0'))) | s(bool,X90) = s(bool,happ(s(fun(X86,bool),X87),s(X86,sK6(X88,X86))))) ) | $spl0),
  inference(superposition,[],[f559,f2976])).
fof(f35008,plain,(
  ( ! [X78,X76,X74,X77,X75] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X74),X76),s(bool,X77),s(fun(X74,bool),X75))) | s('type.option.option'(X74),'const.option.NONE_0') = s('type.option.option'(X74),X76) | s(bool,X78) = s(bool,happ(s(fun(X74,bool),X75),s(X74,sK6(X76,X74)))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X78)),bool))) ) | $spl0),
  inference(superposition,[],[f559,f1834])).
fof(f35007,plain,(
  ( ! [X70,X72,X71,X69,X73] : (s(bool,X72) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X69),X71),s(bool,X73),s(fun(X69,bool),X70))) | s('type.option.option'(X69),'const.option.NONE_0') = s('type.option.option'(X69),X71) | s(bool,'F_0') = s(bool,happ(s(fun(X69,bool),X70),s(X69,sK6(X71,X69)))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X72)),bool))) ) | $spl0),
  inference(superposition,[],[f559,f1834])).
fof(f35006,plain,(
  ( ! [X68,X66,X64,X67,X65] : (s(bool,X67) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X64),X66),s(bool,X68),s(fun(X64,bool),X65))) | s('type.option.option'(X64),'const.option.NONE_0') = s('type.option.option'(X64),X66) | s(bool,'F_0') = s(bool,X67) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X64,bool),X65),s(X64,sK6(X66,X64))))),bool))) ) | $spl0),
  inference(superposition,[],[f559,f1834])).
fof(f35003,plain,(
  ( ! [X52,X50,X53,X51,X49] : (s(bool,X52) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X49),X51),s(bool,X53),s(fun(X49,bool),X50))) | s('type.option.option'(X49),'const.option.NONE_0') = s('type.option.option'(X49),X51) | s(bool,'F_0') = s(bool,X52) | s(bool,'F_0') = s(bool,happ(s(fun(X49,bool),X50),s(X49,sK6(X51,X49))))) ) | $spl0),
  inference(superposition,[],[f559,f1632])).
fof(f35002,plain,(
  ( ! [X47,X45,X48,X46,X44] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X44),X46),s(bool,X47),s(fun(X44,bool),X45))) | s('type.option.option'(X44),'const.option.NONE_0') = s('type.option.option'(X44),X46) | s(bool,X48) = s(bool,happ(s(fun(X44,bool),X45),s(X44,sK6(X46,X44)))) | s(bool,'F_0') = s(bool,X48)) ) | $spl0),
  inference(superposition,[],[f559,f1632])).
fof(f34999,plain,(
  ( ! [X30,X33,X31,X29,X32] : (s(bool,X32) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X29),X31),s(bool,X33),s(fun(X29,bool),X30))) | s('type.option.option'(X29),'const.option.NONE_0') = s('type.option.option'(X29),X31) | s(bool,'T_0') = s(bool,X32) | s(bool,'T_0') = s(bool,happ(s(fun(X29,bool),X30),s(X29,sK6(X31,X29))))) )),
  inference(superposition,[],[f559,f208])).
fof(f34998,plain,(
  ( ! [X28,X26,X24,X27,X25] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X24),X26),s(bool,X27),s(fun(X24,bool),X25))) | s('type.option.option'(X24),'const.option.NONE_0') = s('type.option.option'(X24),X26) | s(bool,X28) = s(bool,happ(s(fun(X24,bool),X25),s(X24,sK6(X26,X24)))) | s(bool,'T_0') = s(bool,X28)) )),
  inference(superposition,[],[f559,f208])).
fof(f34997,plain,(
  ( ! [X23,X21,X22,X20] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X20),X22),s(bool,X23),s(fun(X20,bool),X21))) | s('type.option.option'(X20),'const.option.NONE_0') = s('type.option.option'(X20),X22) | s(bool,'T_0') = s(bool,happ(s(fun(X20,bool),X21),s(X20,sK6(X22,X20))))) )),
  inference(superposition,[],[f559,f121])).
fof(f34996,plain,(
  ( ! [X19,X17,X18,X16] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X16),X18),s(bool,X19),s(fun(X16,bool),X17))) | s('type.option.option'(X16),'const.option.NONE_0') = s('type.option.option'(X16),X18) | s(X16,sK6(X18,X16)) = s(X16,sK7(sK6(X18,X16),X17,X16))) ) | $spl0),
  inference(superposition,[],[f559,f1756])).
fof(f34995,plain,(
  ( ! [X14,X12,X15,X13] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X12),X14),s(bool,X15),s(fun(X12,bool),X13))) | s('type.option.option'(X12),'const.option.NONE_0') = s('type.option.option'(X12),X14) | s(X12,sK6(X14,X12)) = s(X12,sK7(sK6('const.option.SOME_1'(s(X12,sK6(X14,X12))),X12),X13,X12))) ) | $spl0),
  inference(superposition,[],[f559,f2781])).
fof(f35620,plain,(
  ( ! [X6,X10,X8,X7,X11,X9] : (s(X6,'const.option.option_CASE_3'(s('type.option.option'(X7),X9),s(X6,X10),s(fun(X7,X6),X8))) = s(X6,'const.option.option_CASE_3'(s('type.option.option'(X7),X9),s(X6,X11),s(fun(X7,X6),X8))) | s('type.option.option'(X7),'const.option.NONE_0') = s('type.option.option'(X7),X9)) )),
  inference(duplicate_literal_removal,[],[f34994])).
fof(f34994,plain,(
  ( ! [X6,X10,X8,X7,X11,X9] : (s(X6,'const.option.option_CASE_3'(s('type.option.option'(X7),X9),s(X6,X10),s(fun(X7,X6),X8))) = s(X6,'const.option.option_CASE_3'(s('type.option.option'(X7),X9),s(X6,X11),s(fun(X7,X6),X8))) | s('type.option.option'(X7),'const.option.NONE_0') = s('type.option.option'(X7),X9) | s('type.option.option'(X7),'const.option.NONE_0') = s('type.option.option'(X7),X9)) )),
  inference(superposition,[],[f559,f559])).
fof(f34993,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X0,'const.option.option_CASE_3'(s('type.option.option'(X1),X2),s(X0,X3),s(fun(X1,X0),sK6(X4,fun(X1,X0))))) = s(X0,'const.option.option_CASE_3'(s('type.option.option'(fun(X1,X0)),X4),s(X0,X5),s(fun(fun(X1,X0),X0),happ(s(fun(X0,fun(fun(X1,X0),X0)),happ(s(fun('type.option.option'(X1),fun(X0,fun(fun(X1,X0),X0))),'const.option.option_CASE_0'),s('type.option.option'(X1),X2))),s(X0,X3))))) | s('type.option.option'(fun(X1,X0)),'const.option.NONE_0') = s('type.option.option'(fun(X1,X0)),X4)) )),
  inference(superposition,[],[f559,f169])).
fof(f34479,plain,(
  ( ! [X271,X272] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun('type.option.option'(bool),bool),X272),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))),bool)) | s('type.option.option'(bool),X271) = s('type.option.option'(bool),sK7(X271,X272,'type.option.option'(bool))) | s(bool,'T_0') = s(bool,sK6(X271,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X271)) ) | $spl0),
  inference(superposition,[],[f33781,f458])).
fof(f34478,plain,(
  ( ! [X269,X270] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun('type.option.option'(bool),bool),X270),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0')))))),bool)) | s('type.option.option'(bool),X269) = s('type.option.option'(bool),sK7(X269,X270,'type.option.option'(bool))) | s(bool,'F_0') = s(bool,sK6(X269,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X269)) ) | $spl0),
  inference(superposition,[],[f33781,f1766])).
fof(f34477,plain,(
  ( ! [X267,X268,X266] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun('type.option.option'(X266),bool),X268),s('type.option.option'(X266),X267)))),bool)) | s('type.option.option'(X266),'const.option.SOME_1'(s(X266,sK6(X267,X266)))) = s('type.option.option'(X266),sK7('const.option.SOME_1'(s(X266,sK6(X267,X266))),X268,'type.option.option'(X266))) | s('type.option.option'(X266),'const.option.NONE_0') = s('type.option.option'(X266),X267)) ) | $spl0),
  inference(superposition,[],[f33781,f148])).
fof(f34637,plain,(
  ( ! [X265,X264] : (s(bool,'T_0') = s(bool,X264) | s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun('type.option.option'(bool),bool),X265),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X264)))))),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'F_0')),X265,'type.option.option'(bool)))) ) | $spl0),
  inference(forward_demodulation,[],[f34476,f901])).
fof(f34476,plain,(
  ( ! [X265,X264] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun('type.option.option'(bool),bool),X265),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X264)))))),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'F_0')),X265,'type.option.option'(bool))) | s(bool,X264) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f33781,f8984])).
fof(f34475,plain,(
  ( ! [X263,X262] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun('type.option.option'(bool),bool),X263),s('type.option.option'(bool),X262)))),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'F_0')),X263,'type.option.option'(bool))) | s(bool,'T_0') = s(bool,sK6(X262,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X262)) ) | $spl0),
  inference(superposition,[],[f33781,f458])).
fof(f34474,plain,(
  ( ! [X261,X259,X260] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun('type.option.option'(bool),bool),X260),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X259)))))),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'F_0')),X260,'type.option.option'(bool))) | s(bool,X259) = s(bool,X261) | s(bool,'F_0') = s(bool,X261)) ) | $spl0),
  inference(superposition,[],[f33781,f3902])).
fof(f34472,plain,(
  ( ! [X255,X254,X256] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun('type.option.option'(bool),bool),X255),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X254)))))),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'T_0')),X255,'type.option.option'(bool))) | s(bool,X254) = s(bool,X256) | s(bool,'T_0') = s(bool,X256)) ) | $spl0),
  inference(superposition,[],[f33781,f14030])).
fof(f34471,plain,(
  ( ! [X253,X252] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun('type.option.option'(bool),bool),X253),s('type.option.option'(bool),X252)))),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'T_0')),X253,'type.option.option'(bool))) | s(bool,'F_0') = s(bool,sK6(X252,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X252)) ) | $spl0),
  inference(superposition,[],[f33781,f1766])).
fof(f34634,plain,(
  ( ! [X249,X248] : (s(bool,'T_0') = s(bool,X248) | s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun('type.option.option'(bool),bool),X249),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X248))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,X248)),X249,'type.option.option'(bool)))) ) | $spl0),
  inference(forward_demodulation,[],[f34469,f901])).
fof(f34469,plain,(
  ( ! [X249,X248] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun('type.option.option'(bool),bool),X249),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X248))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,X248)),X249,'type.option.option'(bool))) | s(bool,X248) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f33781,f8984])).
fof(f34468,plain,(
  ( ! [X246,X247,X245] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun('type.option.option'(bool),bool),X246),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X245))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,X245)),X246,'type.option.option'(bool))) | s(bool,X245) = s(bool,X247) | s(bool,'F_0') = s(bool,X247)) ) | $spl0),
  inference(superposition,[],[f33781,f3902])).
fof(f34467,plain,(
  ( ! [X243,X244,X242] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun('type.option.option'(bool),bool),X243),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0')))))),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X242))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,X242)),X243,'type.option.option'(bool))) | s(bool,X242) = s(bool,X244) | s(bool,'T_0') = s(bool,X244)) ) | $spl0),
  inference(superposition,[],[f33781,f14030])).
fof(f34466,plain,(
  ( ! [X241,X240] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X241),s(bool,'T_0')))),bool)) | s(bool,sK6(X240,bool)) = s(bool,sK7(sK6(X240,bool),X241,bool)) | s('type.option.option'(bool),X240) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X240)) ) | $spl0),
  inference(superposition,[],[f33781,f458])).
fof(f34465,plain,(
  ( ! [X239,X238] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X239),s(bool,'F_0')))),bool)) | s(bool,sK6(X238,bool)) = s(bool,sK7(sK6(X238,bool),X239,bool)) | s('type.option.option'(bool),X238) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X238)) ) | $spl0),
  inference(superposition,[],[f33781,f1766])).
fof(f34625,plain,(
  ( ! [X222,X221] : (s(bool,'F_0') = s(bool,X221) | s(bool,'T_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X222,bool)) | s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X222),s(bool,X221)))),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f34624,f901])).
fof(f34624,plain,(
  ( ! [X222,X221] : (s(bool,'T_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X222,bool)) | s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X222),s(bool,X221)))),bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X221)),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f34458,f901])).
fof(f34458,plain,(
  ( ! [X222,X221] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X222),s(bool,X221)))),bool)) | s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X222,bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X221)),bool))) ) | $spl0),
  inference(superposition,[],[f33781,f7724])).
fof(f34623,plain,(
  ( ! [X218,X220,X219] : (s(bool,'T_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X219,bool)) | s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X219),s(bool,X218)))),bool)) | s(bool,X218) = s(bool,X220) | s(bool,'T_0') = s(bool,X220)) ) | $spl0),
  inference(forward_demodulation,[],[f34457,f901])).
fof(f34457,plain,(
  ( ! [X218,X220,X219] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X219),s(bool,X218)))),bool)) | s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X219,bool)) | s(bool,X218) = s(bool,X220) | s(bool,'T_0') = s(bool,X220)) ) | $spl0),
  inference(superposition,[],[f33781,f9397])).
fof(f34622,plain,(
  ( ! [X216,X217] : (s(bool,'T_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X217,bool)) | s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X217),s(bool,X216)))),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X216)))) ) | $spl0),
  inference(forward_demodulation,[],[f34456,f901])).
fof(f34456,plain,(
  ( ! [X216,X217] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X217),s(bool,X216)))),bool)) | s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X217,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X216)))) ) | $spl0),
  inference(superposition,[],[f33781,f8984])).
fof(f34618,plain,(
  ( ! [X210,X211,X209] : (s(bool,X209) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X209)),bool),X210,bool)) | s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X210),s(bool,'F_0')))),bool)) | s(bool,X209) = s(bool,X211) | s(bool,'F_0') = s(bool,X211)) ) | $spl0),
  inference(forward_demodulation,[],[f34453,f901])).
fof(f34453,plain,(
  ( ! [X210,X211,X209] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X210),s(bool,'F_0')))),bool)) | s(bool,sK6('const.option.SOME_1'(s(bool,X209)),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X209)),bool),X210,bool)) | s(bool,X209) = s(bool,X211) | s(bool,'F_0') = s(bool,X211)) ) | $spl0),
  inference(superposition,[],[f33781,f1834])).
fof(f34617,plain,(
  ( ! [X208,X207] : (s(bool,'T_0') = s(bool,X207) | s(bool,X207) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X207)),bool),X208,bool)) | s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X208),s(bool,'F_0')))),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f34616,f901])).
fof(f34616,plain,(
  ( ! [X208,X207] : (s(bool,X207) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X207)),bool),X208,bool)) | s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X208),s(bool,'F_0')))),bool)) | s(bool,X207) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f34452,f901])).
fof(f34452,plain,(
  ( ! [X208,X207] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X208),s(bool,'F_0')))),bool)) | s(bool,sK6('const.option.SOME_1'(s(bool,X207)),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X207)),bool),X208,bool)) | s(bool,X207) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f33781,f7724])).
fof(f34615,plain,(
  ( ! [X206,X205] : (s(bool,X205) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X205)),bool),X206,bool)) | s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X206),s(bool,'F_0')))),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X205)))) ) | $spl0),
  inference(forward_demodulation,[],[f34451,f901])).
fof(f34451,plain,(
  ( ! [X206,X205] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X206),s(bool,'F_0')))),bool)) | s(bool,sK6('const.option.SOME_1'(s(bool,X205)),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X205)),bool),X206,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X205)))) ) | $spl0),
  inference(superposition,[],[f33781,f9094])).
fof(f34449,plain,(
  ( ! [X198,X200,X199,X197] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X200),s(bool,'F_0')))),bool)) | s(bool,happ(s(fun(X197,bool),X198),s(X197,X199))) = s(bool,sK7(happ(s(fun(X197,bool),X198),s(X197,X199)),X200,bool)) | s(X197,X199) = s(X197,sK7(X199,X198,X197))) ) | $spl0),
  inference(superposition,[],[f33781,f1756])).
fof(f34448,plain,(
  ( ! [X196,X194,X195,X193] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X196),s(bool,'F_0')))),bool)) | s(bool,happ(s(fun(X193,bool),X194),s(X193,X195))) = s(bool,sK7(happ(s(fun(X193,bool),X194),s(X193,X195)),X196,bool)) | s(X193,X195) = s(X193,sK7(sK6('const.option.SOME_1'(s(X193,X195)),X193),X194,X193))) ) | $spl0),
  inference(superposition,[],[f33781,f2781])).
fof(f34613,plain,(
  ( ! [X191,X192,X190] : (s(bool,'F_0') = s(bool,sK7('const.bool.IN_2'(s(X190,X191),s(fun(X190,bool),'const.pred_set.EMPTY_0')),X192,bool)) | s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X192),s(bool,'F_0')))),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f34447,f191])).
fof(f34447,plain,(
  ( ! [X191,X192,X190] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X192),s(bool,'F_0')))),bool)) | s(bool,'const.bool.IN_2'(s(X190,X191),s(fun(X190,bool),'const.pred_set.EMPTY_0'))) = s(bool,sK7('const.bool.IN_2'(s(X190,X191),s(fun(X190,bool),'const.pred_set.EMPTY_0')),X192,bool))) ) | $spl0),
  inference(superposition,[],[f33781,f191])).
fof(f34612,plain,(
  ( ! [X189,X187,X185,X188,X186] : (s(bool,'F_0') = s(bool,sK7('const.bool.IN_2'(s(X185,X186),s(fun(X185,bool),'const.pred_set.EMPTY_0')),X188,bool)) | s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X188),s(bool,X187)))),bool)) | s(bool,X187) = s(bool,X189) | s(bool,'F_0') = s(bool,X189)) ) | $spl0),
  inference(forward_demodulation,[],[f34446,f191])).
fof(f34446,plain,(
  ( ! [X189,X187,X185,X188,X186] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X188),s(bool,X187)))),bool)) | s(bool,'const.bool.IN_2'(s(X185,X186),s(fun(X185,bool),'const.pred_set.EMPTY_0'))) = s(bool,sK7('const.bool.IN_2'(s(X185,X186),s(fun(X185,bool),'const.pred_set.EMPTY_0')),X188,bool)) | s(bool,X187) = s(bool,X189) | s(bool,'F_0') = s(bool,X189)) ) | $spl0),
  inference(superposition,[],[f33781,f2976])).
fof(f34440,plain,(
  ( ! [X167,X165,X166] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X166),s(bool,X165)))),bool)) | s(bool,'F_0') = s(bool,sK7('F_0',X166,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X167))) | s(bool,X165) = s(bool,X167)) ) | $spl0),
  inference(superposition,[],[f33781,f3902])).
fof(f34439,plain,(
  ( ! [X163,X161,X164,X162,X160] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X161),s(bool,X160)))),bool)) | s(bool,'F_0') = s(bool,sK7('F_0',X161,bool)) | s(bool,X162) = s(bool,'const.bool.IN_2'(s(X163,X164),s(fun(X163,bool),'const.pred_set.EMPTY_0'))) | s(bool,X160) = s(bool,X162)) ) | $spl0),
  inference(superposition,[],[f33781,f2976])).
fof(f34438,plain,(
  ( ! [X158,X159,X157] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X158),s(bool,X157)))),bool)) | s(bool,'F_0') = s(bool,sK7('F_0',X158,bool)) | s(bool,X157) = s(bool,X159) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X159)),bool))) ) | $spl0),
  inference(superposition,[],[f33781,f1834])).
fof(f34436,plain,(
  ( ! [X152,X151,X153] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X152),s(bool,X151)))),bool)) | s(bool,'F_0') = s(bool,sK7('F_0',X152,bool)) | s(bool,X151) = s(bool,X153) | s(bool,'F_0') = s(bool,X153)) ) | $spl0),
  inference(superposition,[],[f33781,f1632])).
fof(f34435,plain,(
  ( ! [X149,X150] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X150),s(bool,X149)))),bool)) | s(bool,'F_0') = s(bool,sK7('F_0',X150,bool)) | s(bool,'T_0') = s(bool,X149)) ) | $spl0),
  inference(superposition,[],[f33781,f121])).
fof(f34602,plain,(
  ( ! [X142,X140,X141] : (s(bool,'T_0') = s(bool,X142) | s(bool,X140) != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X141),s(bool,X140)))),bool)) | s(bool,'T_0') = s(bool,sK7('T_0',X141,bool)) | s(bool,X140) = s(bool,X142)) ) | $spl0),
  inference(forward_demodulation,[],[f34432,f901])).
fof(f34432,plain,(
  ( ! [X142,X140,X141] : (s(bool,X140) != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X141),s(bool,X140)))),bool)) | s(bool,'T_0') = s(bool,sK7('T_0',X141,bool)) | s(bool,X142) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X140) = s(bool,X142)) ) | $spl0),
  inference(superposition,[],[f33781,f9397])).
fof(f34431,plain,(
  ( ! [X138,X139,X137] : (s(bool,X137) != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X138),s(bool,X137)))),bool)) | s(bool,'T_0') = s(bool,sK7('T_0',X138,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X139))) | s(bool,X137) = s(bool,X139)) ) | $spl0),
  inference(superposition,[],[f33781,f14030])).
fof(f34429,plain,(
  ( ! [X132,X130,X131] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X131),s(bool,'T_0')))),bool)) | s(bool,X130) = s(bool,sK7(X130,X131,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X132))) | s(bool,X130) = s(bool,X132)) ) | $spl0),
  inference(superposition,[],[f33781,f14030])).
fof(f34428,plain,(
  ( ! [X127,X128,X129] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X129),s(bool,X128)))),bool)) | s(bool,X127) = s(bool,sK7(X127,X129,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X127))) | s(bool,'T_0') = s(bool,X128)) ) | $spl0),
  inference(superposition,[],[f33781,f14030])).
fof(f34427,plain,(
  ( ! [X125,X126,X124] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X126),s(bool,X125)))),bool)) | s(bool,X124) = s(bool,sK7(X124,X126,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X125))) | s(bool,'T_0') = s(bool,X124)) ) | $spl0),
  inference(superposition,[],[f33781,f14030])).
fof(f34592,plain,(
  ( ! [X99,X98] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X99),s(bool,'T_0')))),bool)) | s(bool,X98) = s(bool,sK7(X98,X99,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X98)))) ) | $spl0),
  inference(forward_demodulation,[],[f34418,f901])).
fof(f34418,plain,(
  ( ! [X99,X98] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X99),s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))))),bool)) | s(bool,X98) = s(bool,sK7(X98,X99,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X98)))) ) | $spl0),
  inference(superposition,[],[f33781,f8984])).
fof(f34591,plain,(
  ( ! [X97,X96] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X97),s(bool,'T_0')))),bool)) | s(bool,X96) = s(bool,sK7(X96,X97,bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X96)),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f34417,f901])).
fof(f34417,plain,(
  ( ! [X97,X96] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X97),s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))))),bool)) | s(bool,X96) = s(bool,sK7(X96,X97,bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X96)),bool))) ) | $spl0),
  inference(superposition,[],[f33781,f7724])).
fof(f34590,plain,(
  ( ! [X94,X95] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X95),s(bool,'T_0')))),bool)) | s(bool,X94) = s(bool,sK7(X94,X95,bool)) | s(bool,'F_0') = s(bool,X94)) ) | $spl0),
  inference(forward_demodulation,[],[f34416,f901])).
fof(f34416,plain,(
  ( ! [X94,X95] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X95),s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))))),bool)) | s(bool,X94) = s(bool,sK7(X94,X95,bool)) | s(bool,'F_0') = s(bool,X94)) ) | $spl0),
  inference(superposition,[],[f33781,f7478])).
fof(f34412,plain,(
  ( ! [X87,X85,X86] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X87),s(bool,X86)))),bool)) | s(bool,X85) = s(bool,sK7(X85,X87,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X86))) | s(bool,'F_0') = s(bool,X85)) ) | $spl0),
  inference(superposition,[],[f33781,f3902])).
fof(f34411,plain,(
  ( ! [X83,X84,X82] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X84),s(bool,X83)))),bool)) | s(bool,X82) = s(bool,sK7(X82,X84,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X82))) | s(bool,'F_0') = s(bool,X83)) ) | $spl0),
  inference(superposition,[],[f33781,f3902])).
fof(f34410,plain,(
  ( ! [X80,X81,X79] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X80),s(bool,'F_0')))),bool)) | s(bool,X79) = s(bool,sK7(X79,X80,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X81))) | s(bool,X79) = s(bool,X81)) ) | $spl0),
  inference(superposition,[],[f33781,f3902])).
fof(f34409,plain,(
  ( ! [X78,X76,X74,X77,X75] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X76),s(bool,X75)))),bool)) | s(bool,X74) = s(bool,sK7(X74,X76,bool)) | s(bool,X75) = s(bool,'const.bool.IN_2'(s(X77,X78),s(fun(X77,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X74)) ) | $spl0),
  inference(superposition,[],[f33781,f2976])).
fof(f34408,plain,(
  ( ! [X70,X72,X71,X69,X73] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X71),s(bool,X70)))),bool)) | s(bool,X69) = s(bool,sK7(X69,X71,bool)) | s(bool,X69) = s(bool,'const.bool.IN_2'(s(X72,X73),s(fun(X72,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X70)) ) | $spl0),
  inference(superposition,[],[f33781,f2976])).
fof(f34407,plain,(
  ( ! [X68,X66,X64,X67,X65] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X65),s(bool,'F_0')))),bool)) | s(bool,X64) = s(bool,sK7(X64,X65,bool)) | s(bool,X66) = s(bool,'const.bool.IN_2'(s(X67,X68),s(fun(X67,bool),'const.pred_set.EMPTY_0'))) | s(bool,X64) = s(bool,X66)) ) | $spl0),
  inference(superposition,[],[f33781,f2976])).
fof(f34405,plain,(
  ( ! [X57,X58,X56] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X57),s(bool,'F_0')))),bool)) | s(bool,X56) = s(bool,sK7(X56,X57,bool)) | s(bool,X56) = s(bool,X58) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X58)),bool))) ) | $spl0),
  inference(superposition,[],[f33781,f1834])).
fof(f34403,plain,(
  ( ! [X52,X50,X51] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X52),s(bool,X51)))),bool)) | s(bool,X50) = s(bool,sK7(X50,X52,bool)) | s(bool,'F_0') = s(bool,X51) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X50)),bool))) ) | $spl0),
  inference(superposition,[],[f33781,f1834])).
fof(f34400,plain,(
  ( ! [X43,X41,X42] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X43),s(bool,X42)))),bool)) | s(bool,X41) = s(bool,sK7(X41,X43,bool)) | s(bool,'F_0') = s(bool,X42) | s(bool,'F_0') = s(bool,X41)) ) | $spl0),
  inference(superposition,[],[f33781,f1632])).
fof(f34399,plain,(
  ( ! [X39,X38,X40] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X39),s(bool,'F_0')))),bool)) | s(bool,X38) = s(bool,sK7(X38,X39,bool)) | s(bool,X38) = s(bool,X40) | s(bool,'F_0') = s(bool,X40)) ) | $spl0),
  inference(superposition,[],[f33781,f1632])).
fof(f34396,plain,(
  ( ! [X30,X31,X29] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X31),s(bool,X30)))),bool)) | s(bool,X29) = s(bool,sK7(X29,X31,bool)) | s(bool,'T_0') = s(bool,X30) | s(bool,'T_0') = s(bool,X29)) ) | $spl0),
  inference(superposition,[],[f33781,f208])).
fof(f34395,plain,(
  ( ! [X28,X26,X27] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X27),s(bool,'T_0')))),bool)) | s(bool,X26) = s(bool,sK7(X26,X27,bool)) | s(bool,X26) = s(bool,X28) | s(bool,'T_0') = s(bool,X28)) ) | $spl0),
  inference(superposition,[],[f33781,f208])).
fof(f34394,plain,(
  ( ! [X24,X25] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X25),s(bool,'F_0')))),bool)) | s(bool,X24) = s(bool,sK7(X24,X25,bool)) | s(bool,'T_0') = s(bool,X24)) ) | $spl0),
  inference(superposition,[],[f33781,f121])).
fof(f34393,plain,(
  ( ! [X23,X21,X22,X20] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X20,bool),X23),s(X20,X21)))),bool)) | s(X20,sK7(sK6('const.option.SOME_1'(s(X20,X21)),X20),X22,X20)) = s(X20,sK7(sK7(sK6('const.option.SOME_1'(s(X20,X21)),X20),X22,X20),X23,X20)) | s(bool,'F_0') = s(bool,happ(s(fun(X20,bool),X22),s(X20,X21)))) ) | $spl0),
  inference(superposition,[],[f33781,f2781])).
fof(f34584,plain,(
  ( ! [X19,X17,X18] : (s(X17,X18) = s(X17,sK7(sK6('const.option.SOME_1'(s(X17,X18)),X17),X19,X17)) | s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X17,bool),X19),s(X17,X18)))),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f34392,f901])).
fof(f34392,plain,(
  ( ! [X19,X17,X18] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X17,bool),X19),s(X17,X18)))),bool)) | s(X17,sK6('const.option.SOME_1'(s(X17,X18)),X17)) = s(X17,sK7(sK6('const.option.SOME_1'(s(X17,X18)),X17),X19,X17))) ) | $spl0),
  inference(superposition,[],[f33781,f901])).
fof(f34581,plain,(
  ( ! [X6,X10,X8,X7,X5,X9] : (s(X5,happ(s(fun(X6,X5),X9),s(X6,X7))) = s(X5,sK7('const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(X5,X8),s(fun(X6,X5),X9)),X10,X5)) | s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X5,bool),X10),s(X5,happ(s(fun(X6,X5),X9),s(X6,X7)))))),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f34390,f168])).
fof(f34390,plain,(
  ( ! [X6,X10,X8,X7,X5,X9] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X5,bool),X10),s(X5,happ(s(fun(X6,X5),X9),s(X6,X7)))))),bool)) | s(X5,'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(X5,X8),s(fun(X6,X5),X9))) = s(X5,sK7('const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(X5,X8),s(fun(X6,X5),X9)),X10,X5))) ) | $spl0),
  inference(superposition,[],[f33781,f168])).
fof(f34387,plain,(
  ( ! [X19,X17,X18] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X17,bool),X18),s(X17,X19)))),bool)) | s(X17,X19) = s(X17,sK7(X19,sK6('const.option.SOME_1'(s(fun(X17,bool),X18)),fun(X17,bool)),X17))) ) | $spl0),
  inference(superposition,[],[f33781,f901])).
fof(f34385,plain,(
  ( ! [X6,X10,X8,X7,X5,X9] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X5,bool),happ(s(fun(X6,fun(X5,bool)),X9),s(X6,X7))),s(X5,X10)))),bool)) | s(X5,X10) = s(X5,sK7(X10,'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(fun(X5,bool),X8),s(fun(X6,fun(X5,bool)),X9)),X5))) ) | $spl0),
  inference(superposition,[],[f33781,f168])).
fof(f34287,plain,(
  ( ! [X239,X237,X235,X238,X236,X234] : (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X234),X235),s(bool,X236),s(fun(X234,bool),X237)))) | s(fun(X234,bool),X237) = s(fun(X234,bool),sK7(X237,'const.option.option_CASE_3'(s('type.option.option'(X238),'const.option.NONE_0'),s(fun(fun(X234,bool),bool),happ(s(fun(bool,fun(fun(X234,bool),bool)),happ(s(fun('type.option.option'(X234),fun(bool,fun(fun(X234,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X234),X235))),s(bool,X236))),s(fun(X238,fun(fun(X234,bool),bool)),X239)),fun(X234,bool)))) )),
  inference(superposition,[],[f434,f169])).
fof(f34382,plain,(
  ( ! [X222,X225,X223,X221,X226,X224] : (s(X221,X223) = s(X221,sK7(X223,'const.option.option_CASE_3'(s('type.option.option'(X224),'const.option.NONE_0'),s(fun(X221,bool),X222),s(fun(X224,fun(X221,bool)),X225)),X221)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X226))) | s(bool,X226) = s(bool,happ(s(fun(X221,bool),X222),s(X221,X223)))) ) | $spl0),
  inference(subsumption_resolution,[],[f34285,f114])).
fof(f34285,plain,(
  ( ! [X222,X225,X223,X221,X226,X224] : (~p(s(bool,'T_0')) | s(X221,X223) = s(X221,sK7(X223,'const.option.option_CASE_3'(s('type.option.option'(X224),'const.option.NONE_0'),s(fun(X221,bool),X222),s(fun(X224,fun(X221,bool)),X225)),X221)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X226))) | s(bool,X226) = s(bool,happ(s(fun(X221,bool),X222),s(X221,X223)))) ) | $spl0),
  inference(superposition,[],[f434,f14030])).
fof(f34374,plain,(
  ( ! [X158,X156,X159,X157,X160] : (s(X156,X158) = s(X156,sK7(X158,'const.option.option_CASE_3'(s('type.option.option'(X159),'const.option.NONE_0'),s(fun(X156,bool),X157),s(fun(X159,fun(X156,bool)),X160)),X156)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X156,bool),X157),s(X156,X158)))))) ) | $spl0),
  inference(subsumption_resolution,[],[f34373,f114])).
fof(f34373,plain,(
  ( ! [X158,X156,X159,X157,X160] : (~p(s(bool,'T_0')) | s(X156,X158) = s(X156,sK7(X158,'const.option.option_CASE_3'(s('type.option.option'(X159),'const.option.NONE_0'),s(fun(X156,bool),X157),s(fun(X159,fun(X156,bool)),X160)),X156)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X156,bool),X157),s(X156,X158)))))) ) | $spl0),
  inference(forward_demodulation,[],[f34274,f901])).
fof(f34274,plain,(
  ( ! [X158,X156,X159,X157,X160] : (~p(s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) | s(X156,X158) = s(X156,sK7(X158,'const.option.option_CASE_3'(s('type.option.option'(X159),'const.option.NONE_0'),s(fun(X156,bool),X157),s(fun(X159,fun(X156,bool)),X160)),X156)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X156,bool),X157),s(X156,X158)))))) ) | $spl0),
  inference(superposition,[],[f434,f8984])).
fof(f34356,plain,(
  ( ! [X19,X17,X15,X20,X18,X16] : (s(X15,X17) = s(X15,sK7(X17,'const.option.option_CASE_3'(s('type.option.option'(X18),'const.option.NONE_0'),s(fun(X15,bool),X16),s(fun(X18,fun(X15,bool)),X19)),X15)) | s(bool,X20) = s(bool,happ(s(fun(X15,bool),X16),s(X15,X17))) | s(bool,'T_0') = s(bool,X20)) )),
  inference(subsumption_resolution,[],[f34251,f114])).
fof(f34251,plain,(
  ( ! [X19,X17,X15,X20,X18,X16] : (~p(s(bool,'T_0')) | s(X15,X17) = s(X15,sK7(X17,'const.option.option_CASE_3'(s('type.option.option'(X18),'const.option.NONE_0'),s(fun(X15,bool),X16),s(fun(X18,fun(X15,bool)),X19)),X15)) | s(bool,X20) = s(bool,happ(s(fun(X15,bool),X16),s(X15,X17))) | s(bool,'T_0') = s(bool,X20)) )),
  inference(superposition,[],[f434,f208])).
fof(f34247,plain,(
  ( ! [X453,X451,X452,X454] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X452),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))) | s('type.option.option'(bool),X451) = s('type.option.option'(bool),sK7(X451,'const.option.option_CASE_3'(s('type.option.option'(X453),'const.option.NONE_0'),s(fun('type.option.option'(bool),bool),X452),s(fun(X453,fun('type.option.option'(bool),bool)),X454)),'type.option.option'(bool))) | s(bool,'T_0') = s(bool,sK6(X451,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X451)) )),
  inference(superposition,[],[f434,f458])).
fof(f34246,plain,(
  ( ! [X447,X449,X448,X450] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X448),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0')))))) | s('type.option.option'(bool),X447) = s('type.option.option'(bool),sK7(X447,'const.option.option_CASE_3'(s('type.option.option'(X449),'const.option.NONE_0'),s(fun('type.option.option'(bool),bool),X448),s(fun(X449,fun('type.option.option'(bool),bool)),X450)),'type.option.option'(bool))) | s(bool,'F_0') = s(bool,sK6(X447,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X447)) ) | $spl0),
  inference(superposition,[],[f434,f1766])).
fof(f34245,plain,(
  ( ! [X445,X443,X444,X446,X442] : (~p(s(bool,happ(s(fun('type.option.option'(X442),bool),X444),s('type.option.option'(X442),X443)))) | s('type.option.option'(X442),'const.option.SOME_1'(s(X442,sK6(X443,X442)))) = s('type.option.option'(X442),sK7('const.option.SOME_1'(s(X442,sK6(X443,X442))),'const.option.option_CASE_3'(s('type.option.option'(X445),'const.option.NONE_0'),s(fun('type.option.option'(X442),bool),X444),s(fun(X445,fun('type.option.option'(X442),bool)),X446)),'type.option.option'(X442))) | s('type.option.option'(X442),'const.option.NONE_0') = s('type.option.option'(X442),X443)) )),
  inference(superposition,[],[f434,f148])).
fof(f34355,plain,(
  ( ! [X441,X438,X440,X439] : (s(bool,'T_0') = s(bool,X438) | ~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X439),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X438)))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'F_0')),'const.option.option_CASE_3'(s('type.option.option'(X440),'const.option.NONE_0'),s(fun('type.option.option'(bool),bool),X439),s(fun(X440,fun('type.option.option'(bool),bool)),X441)),'type.option.option'(bool)))) ) | $spl0),
  inference(forward_demodulation,[],[f34244,f901])).
fof(f34244,plain,(
  ( ! [X441,X438,X440,X439] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X439),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X438)))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'F_0')),'const.option.option_CASE_3'(s('type.option.option'(X440),'const.option.NONE_0'),s(fun('type.option.option'(bool),bool),X439),s(fun(X440,fun('type.option.option'(bool),bool)),X441)),'type.option.option'(bool))) | s(bool,X438) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f434,f8984])).
fof(f34243,plain,(
  ( ! [X436,X434,X437,X435] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X435),s('type.option.option'(bool),X434)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'F_0')),'const.option.option_CASE_3'(s('type.option.option'(X436),'const.option.NONE_0'),s(fun('type.option.option'(bool),bool),X435),s(fun(X436,fun('type.option.option'(bool),bool)),X437)),'type.option.option'(bool))) | s(bool,'T_0') = s(bool,sK6(X434,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X434)) )),
  inference(superposition,[],[f434,f458])).
fof(f34242,plain,(
  ( ! [X430,X432,X429,X431,X433] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X430),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X429)))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'F_0')),'const.option.option_CASE_3'(s('type.option.option'(X431),'const.option.NONE_0'),s(fun('type.option.option'(bool),bool),X430),s(fun(X431,fun('type.option.option'(bool),bool)),X432)),'type.option.option'(bool))) | s(bool,X429) = s(bool,X433) | s(bool,'F_0') = s(bool,X433)) ) | $spl0),
  inference(superposition,[],[f434,f3902])).
fof(f34240,plain,(
  ( ! [X420,X422,X424,X421,X423] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X421),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X420)))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'T_0')),'const.option.option_CASE_3'(s('type.option.option'(X422),'const.option.NONE_0'),s(fun('type.option.option'(bool),bool),X421),s(fun(X422,fun('type.option.option'(bool),bool)),X423)),'type.option.option'(bool))) | s(bool,X420) = s(bool,X424) | s(bool,'T_0') = s(bool,X424)) ) | $spl0),
  inference(superposition,[],[f434,f14030])).
fof(f34239,plain,(
  ( ! [X416,X418,X417,X419] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X417),s('type.option.option'(bool),X416)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'T_0')),'const.option.option_CASE_3'(s('type.option.option'(X418),'const.option.NONE_0'),s(fun('type.option.option'(bool),bool),X417),s(fun(X418,fun('type.option.option'(bool),bool)),X419)),'type.option.option'(bool))) | s(bool,'F_0') = s(bool,sK6(X416,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X416)) ) | $spl0),
  inference(superposition,[],[f434,f1766])).
fof(f34352,plain,(
  ( ! [X408,X410,X409,X411] : (s(bool,'T_0') = s(bool,X408) | ~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X409),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X408))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,X408)),'const.option.option_CASE_3'(s('type.option.option'(X410),'const.option.NONE_0'),s(fun('type.option.option'(bool),bool),X409),s(fun(X410,fun('type.option.option'(bool),bool)),X411)),'type.option.option'(bool)))) ) | $spl0),
  inference(forward_demodulation,[],[f34237,f901])).
fof(f34237,plain,(
  ( ! [X408,X410,X409,X411] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X409),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X408))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,X408)),'const.option.option_CASE_3'(s('type.option.option'(X410),'const.option.NONE_0'),s(fun('type.option.option'(bool),bool),X409),s(fun(X410,fun('type.option.option'(bool),bool)),X411)),'type.option.option'(bool))) | s(bool,X408) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f434,f8984])).
fof(f34236,plain,(
  ( ! [X405,X407,X403,X404,X406] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X404),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X403))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,X403)),'const.option.option_CASE_3'(s('type.option.option'(X405),'const.option.NONE_0'),s(fun('type.option.option'(bool),bool),X404),s(fun(X405,fun('type.option.option'(bool),bool)),X406)),'type.option.option'(bool))) | s(bool,X403) = s(bool,X407) | s(bool,'F_0') = s(bool,X407)) ) | $spl0),
  inference(superposition,[],[f434,f3902])).
fof(f34235,plain,(
  ( ! [X399,X401,X398,X400,X402] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X399),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0')))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X398))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,X398)),'const.option.option_CASE_3'(s('type.option.option'(X400),'const.option.NONE_0'),s(fun('type.option.option'(bool),bool),X399),s(fun(X400,fun('type.option.option'(bool),bool)),X401)),'type.option.option'(bool))) | s(bool,X398) = s(bool,X402) | s(bool,'T_0') = s(bool,X402)) ) | $spl0),
  inference(superposition,[],[f434,f14030])).
fof(f34234,plain,(
  ( ! [X397,X395,X396,X394] : (~p(s(bool,happ(s(fun(bool,bool),X395),s(bool,'T_0')))) | s(bool,sK6(X394,bool)) = s(bool,sK7(sK6(X394,bool),'const.option.option_CASE_3'(s('type.option.option'(X396),'const.option.NONE_0'),s(fun(bool,bool),X395),s(fun(X396,fun(bool,bool)),X397)),bool)) | s('type.option.option'(bool),X394) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X394)) )),
  inference(superposition,[],[f434,f458])).
fof(f34233,plain,(
  ( ! [X391,X393,X390,X392] : (~p(s(bool,happ(s(fun(bool,bool),X391),s(bool,'F_0')))) | s(bool,sK6(X390,bool)) = s(bool,sK7(sK6(X390,bool),'const.option.option_CASE_3'(s('type.option.option'(X392),'const.option.NONE_0'),s(fun(bool,bool),X391),s(fun(X392,fun(bool,bool)),X393)),bool)) | s('type.option.option'(bool),X390) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X390)) ) | $spl0),
  inference(superposition,[],[f434,f1766])).
fof(f34351,plain,(
  ( ! [X389,X385,X387,X388,X384,X386] : (s(bool,happ(s(fun(X384,bool),X385),s(X384,X386))) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,happ(s(fun(X384,bool),X385),s(X384,X386)))),bool),'const.option.option_CASE_3'(s('type.option.option'(X388),'const.option.NONE_0'),s(fun(bool,bool),X387),s(fun(X388,fun(bool,bool)),X389)),bool)) | ~p(s(bool,happ(s(fun(bool,bool),X387),s(bool,'F_0')))) | s(X384,X386) = s(X384,sK7(X386,X385,X384))) ) | $spl0),
  inference(forward_demodulation,[],[f34232,f901])).
fof(f34232,plain,(
  ( ! [X389,X385,X387,X388,X384,X386] : (~p(s(bool,happ(s(fun(bool,bool),X387),s(bool,'F_0')))) | s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X384,bool),X385),s(X384,X386)))),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,happ(s(fun(X384,bool),X385),s(X384,X386)))),bool),'const.option.option_CASE_3'(s('type.option.option'(X388),'const.option.NONE_0'),s(fun(bool,bool),X387),s(fun(X388,fun(bool,bool)),X389)),bool)) | s(X384,X386) = s(X384,sK7(X386,X385,X384))) ) | $spl0),
  inference(superposition,[],[f434,f3724])).
fof(f34344,plain,(
  ( ! [X360,X362,X359,X361] : (s(bool,'F_0') = s(bool,X359) | s(bool,'T_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),'const.option.option_CASE_3'(s('type.option.option'(X361),'const.option.NONE_0'),s(fun(bool,bool),X360),s(fun(X361,fun(bool,bool)),X362)),bool)) | ~p(s(bool,happ(s(fun(bool,bool),X360),s(bool,X359))))) ) | $spl0),
  inference(forward_demodulation,[],[f34343,f901])).
fof(f34343,plain,(
  ( ! [X360,X362,X359,X361] : (s(bool,'T_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),'const.option.option_CASE_3'(s('type.option.option'(X361),'const.option.NONE_0'),s(fun(bool,bool),X360),s(fun(X361,fun(bool,bool)),X362)),bool)) | ~p(s(bool,happ(s(fun(bool,bool),X360),s(bool,X359)))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X359)),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f34226,f901])).
fof(f34226,plain,(
  ( ! [X360,X362,X359,X361] : (~p(s(bool,happ(s(fun(bool,bool),X360),s(bool,X359)))) | s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),'const.option.option_CASE_3'(s('type.option.option'(X361),'const.option.NONE_0'),s(fun(bool,bool),X360),s(fun(X361,fun(bool,bool)),X362)),bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X359)),bool))) ) | $spl0),
  inference(superposition,[],[f434,f7724])).
fof(f34342,plain,(
  ( ! [X356,X358,X354,X357,X355] : (s(bool,'T_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),'const.option.option_CASE_3'(s('type.option.option'(X356),'const.option.NONE_0'),s(fun(bool,bool),X355),s(fun(X356,fun(bool,bool)),X357)),bool)) | ~p(s(bool,happ(s(fun(bool,bool),X355),s(bool,X354)))) | s(bool,X354) = s(bool,X358) | s(bool,'T_0') = s(bool,X358)) ) | $spl0),
  inference(forward_demodulation,[],[f34225,f901])).
fof(f34225,plain,(
  ( ! [X356,X358,X354,X357,X355] : (~p(s(bool,happ(s(fun(bool,bool),X355),s(bool,X354)))) | s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),'const.option.option_CASE_3'(s('type.option.option'(X356),'const.option.NONE_0'),s(fun(bool,bool),X355),s(fun(X356,fun(bool,bool)),X357)),bool)) | s(bool,X354) = s(bool,X358) | s(bool,'T_0') = s(bool,X358)) ) | $spl0),
  inference(superposition,[],[f434,f9397])).
fof(f34341,plain,(
  ( ! [X350,X352,X351,X353] : (s(bool,'T_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),'const.option.option_CASE_3'(s('type.option.option'(X352),'const.option.NONE_0'),s(fun(bool,bool),X351),s(fun(X352,fun(bool,bool)),X353)),bool)) | ~p(s(bool,happ(s(fun(bool,bool),X351),s(bool,X350)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X350)))) ) | $spl0),
  inference(forward_demodulation,[],[f34224,f901])).
fof(f34224,plain,(
  ( ! [X350,X352,X351,X353] : (~p(s(bool,happ(s(fun(bool,bool),X351),s(bool,X350)))) | s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),'const.option.option_CASE_3'(s('type.option.option'(X352),'const.option.NONE_0'),s(fun(bool,bool),X351),s(fun(X352,fun(bool,bool)),X353)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X350)))) ) | $spl0),
  inference(superposition,[],[f434,f8984])).
fof(f34337,plain,(
  ( ! [X341,X337,X339,X340,X338] : (s(bool,X337) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X337)),bool),'const.option.option_CASE_3'(s('type.option.option'(X339),'const.option.NONE_0'),s(fun(bool,bool),X338),s(fun(X339,fun(bool,bool)),X340)),bool)) | ~p(s(bool,happ(s(fun(bool,bool),X338),s(bool,'F_0')))) | s(bool,X337) = s(bool,X341) | s(bool,'F_0') = s(bool,X341)) ) | $spl0),
  inference(forward_demodulation,[],[f34221,f901])).
fof(f34221,plain,(
  ( ! [X341,X337,X339,X340,X338] : (~p(s(bool,happ(s(fun(bool,bool),X338),s(bool,'F_0')))) | s(bool,sK6('const.option.SOME_1'(s(bool,X337)),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X337)),bool),'const.option.option_CASE_3'(s('type.option.option'(X339),'const.option.NONE_0'),s(fun(bool,bool),X338),s(fun(X339,fun(bool,bool)),X340)),bool)) | s(bool,X337) = s(bool,X341) | s(bool,'F_0') = s(bool,X341)) ) | $spl0),
  inference(superposition,[],[f434,f1834])).
fof(f34336,plain,(
  ( ! [X333,X335,X334,X336] : (s(bool,'T_0') = s(bool,X333) | s(bool,X333) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X333)),bool),'const.option.option_CASE_3'(s('type.option.option'(X335),'const.option.NONE_0'),s(fun(bool,bool),X334),s(fun(X335,fun(bool,bool)),X336)),bool)) | ~p(s(bool,happ(s(fun(bool,bool),X334),s(bool,'F_0'))))) ) | $spl0),
  inference(forward_demodulation,[],[f34335,f901])).
fof(f34335,plain,(
  ( ! [X333,X335,X334,X336] : (s(bool,X333) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X333)),bool),'const.option.option_CASE_3'(s('type.option.option'(X335),'const.option.NONE_0'),s(fun(bool,bool),X334),s(fun(X335,fun(bool,bool)),X336)),bool)) | ~p(s(bool,happ(s(fun(bool,bool),X334),s(bool,'F_0')))) | s(bool,X333) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f34220,f901])).
fof(f34220,plain,(
  ( ! [X333,X335,X334,X336] : (~p(s(bool,happ(s(fun(bool,bool),X334),s(bool,'F_0')))) | s(bool,sK6('const.option.SOME_1'(s(bool,X333)),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X333)),bool),'const.option.option_CASE_3'(s('type.option.option'(X335),'const.option.NONE_0'),s(fun(bool,bool),X334),s(fun(X335,fun(bool,bool)),X336)),bool)) | s(bool,X333) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f434,f7724])).
fof(f34334,plain,(
  ( ! [X329,X331,X332,X330] : (s(bool,X329) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X329)),bool),'const.option.option_CASE_3'(s('type.option.option'(X331),'const.option.NONE_0'),s(fun(bool,bool),X330),s(fun(X331,fun(bool,bool)),X332)),bool)) | ~p(s(bool,happ(s(fun(bool,bool),X330),s(bool,'F_0')))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X329)))) ) | $spl0),
  inference(forward_demodulation,[],[f34219,f901])).
fof(f34219,plain,(
  ( ! [X329,X331,X332,X330] : (~p(s(bool,happ(s(fun(bool,bool),X330),s(bool,'F_0')))) | s(bool,sK6('const.option.SOME_1'(s(bool,X329)),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X329)),bool),'const.option.option_CASE_3'(s('type.option.option'(X331),'const.option.NONE_0'),s(fun(bool,bool),X330),s(fun(X331,fun(bool,bool)),X332)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X329)))) ) | $spl0),
  inference(superposition,[],[f434,f9094])).
fof(f34217,plain,(
  ( ! [X321,X318,X320,X322,X317,X319] : (~p(s(bool,happ(s(fun(bool,bool),X320),s(bool,'F_0')))) | s(bool,happ(s(fun(X317,bool),X318),s(X317,X319))) = s(bool,sK7(happ(s(fun(X317,bool),X318),s(X317,X319)),'const.option.option_CASE_3'(s('type.option.option'(X321),'const.option.NONE_0'),s(fun(bool,bool),X320),s(fun(X321,fun(bool,bool)),X322)),bool)) | s(X317,X319) = s(X317,sK7(X319,X318,X317))) ) | $spl0),
  inference(superposition,[],[f434,f1756])).
fof(f34216,plain,(
  ( ! [X313,X315,X316,X312,X314,X311] : (~p(s(bool,happ(s(fun(bool,bool),X314),s(bool,'F_0')))) | s(bool,happ(s(fun(X311,bool),X312),s(X311,X313))) = s(bool,sK7(happ(s(fun(X311,bool),X312),s(X311,X313)),'const.option.option_CASE_3'(s('type.option.option'(X315),'const.option.NONE_0'),s(fun(bool,bool),X314),s(fun(X315,fun(bool,bool)),X316)),bool)) | s(X311,X313) = s(X311,sK7(sK6('const.option.SOME_1'(s(X311,X313)),X311),X312,X311))) ) | $spl0),
  inference(superposition,[],[f434,f2781])).
fof(f34331,plain,(
  ( ! [X308,X310,X306,X309,X307] : (s(bool,'F_0') = s(bool,sK7('const.bool.IN_2'(s(X306,X307),s(fun(X306,bool),'const.pred_set.EMPTY_0')),'const.option.option_CASE_3'(s('type.option.option'(X309),'const.option.NONE_0'),s(fun(bool,bool),X308),s(fun(X309,fun(bool,bool)),X310)),bool)) | ~p(s(bool,happ(s(fun(bool,bool),X308),s(bool,'F_0'))))) )),
  inference(forward_demodulation,[],[f34215,f191])).
fof(f34215,plain,(
  ( ! [X308,X310,X306,X309,X307] : (~p(s(bool,happ(s(fun(bool,bool),X308),s(bool,'F_0')))) | s(bool,'const.bool.IN_2'(s(X306,X307),s(fun(X306,bool),'const.pred_set.EMPTY_0'))) = s(bool,sK7('const.bool.IN_2'(s(X306,X307),s(fun(X306,bool),'const.pred_set.EMPTY_0')),'const.option.option_CASE_3'(s('type.option.option'(X309),'const.option.NONE_0'),s(fun(bool,bool),X308),s(fun(X309,fun(bool,bool)),X310)),bool))) )),
  inference(superposition,[],[f434,f191])).
fof(f34330,plain,(
  ( ! [X300,X302,X304,X301,X303,X299,X305] : (s(bool,'F_0') = s(bool,sK7('const.bool.IN_2'(s(X299,X300),s(fun(X299,bool),'const.pred_set.EMPTY_0')),'const.option.option_CASE_3'(s('type.option.option'(X303),'const.option.NONE_0'),s(fun(bool,bool),X302),s(fun(X303,fun(bool,bool)),X304)),bool)) | ~p(s(bool,happ(s(fun(bool,bool),X302),s(bool,X301)))) | s(bool,X301) = s(bool,X305) | s(bool,'F_0') = s(bool,X305)) ) | $spl0),
  inference(forward_demodulation,[],[f34214,f191])).
fof(f34214,plain,(
  ( ! [X300,X302,X304,X301,X303,X299,X305] : (~p(s(bool,happ(s(fun(bool,bool),X302),s(bool,X301)))) | s(bool,'const.bool.IN_2'(s(X299,X300),s(fun(X299,bool),'const.pred_set.EMPTY_0'))) = s(bool,sK7('const.bool.IN_2'(s(X299,X300),s(fun(X299,bool),'const.pred_set.EMPTY_0')),'const.option.option_CASE_3'(s('type.option.option'(X303),'const.option.NONE_0'),s(fun(bool,bool),X302),s(fun(X303,fun(bool,bool)),X304)),bool)) | s(bool,X301) = s(bool,X305) | s(bool,'F_0') = s(bool,X305)) ) | $spl0),
  inference(superposition,[],[f434,f2976])).
fof(f34327,plain,(
  ( ! [X292,X290,X291] : (s(bool,'T_0') = s(bool,sK7('const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3)))),'const.option.option_CASE_3'(s('type.option.option'(X291),'const.option.NONE_0'),s(fun(bool,bool),X290),s(fun(X291,fun(bool,bool)),X292)),bool)) | ~p(s(bool,happ(s(fun(bool,bool),X290),s(bool,'T_0'))))) ) | $spl0),
  inference(forward_demodulation,[],[f34212,f689])).
fof(f34212,plain,(
  ( ! [X292,X290,X291] : (~p(s(bool,happ(s(fun(bool,bool),X290),s(bool,'T_0')))) | s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3))))) = s(bool,sK7('const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3)))),'const.option.option_CASE_3'(s('type.option.option'(X291),'const.option.NONE_0'),s(fun(bool,bool),X290),s(fun(X291,fun(bool,bool)),X292)),bool))) ) | $spl0),
  inference(superposition,[],[f434,f689])).
fof(f34326,plain,(
  ( ! [X288,X285,X287,X283,X289,X284,X286] : (s(bool,happ(s(fun(X283,bool),X286),s(X283,X284))) = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X283),'const.option.SOME_1'(s(X283,X284))),s(bool,X285),s(fun(X283,bool),X286)),'const.option.option_CASE_3'(s('type.option.option'(X288),'const.option.NONE_0'),s(fun(bool,bool),X287),s(fun(X288,fun(bool,bool)),X289)),bool)) | ~p(s(bool,happ(s(fun(bool,bool),X287),s(bool,'T_0')))) | s(bool,'F_0') = s(bool,happ(s(fun(X283,bool),X286),s(X283,X284)))) )),
  inference(forward_demodulation,[],[f34211,f168])).
fof(f34211,plain,(
  ( ! [X288,X285,X287,X283,X289,X284,X286] : (~p(s(bool,happ(s(fun(bool,bool),X287),s(bool,'T_0')))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(X283),'const.option.SOME_1'(s(X283,X284))),s(bool,X285),s(fun(X283,bool),X286))) = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X283),'const.option.SOME_1'(s(X283,X284))),s(bool,X285),s(fun(X283,bool),X286)),'const.option.option_CASE_3'(s('type.option.option'(X288),'const.option.NONE_0'),s(fun(bool,bool),X287),s(fun(X288,fun(bool,bool)),X289)),bool)) | s(bool,'F_0') = s(bool,happ(s(fun(X283,bool),X286),s(X283,X284)))) )),
  inference(superposition,[],[f434,f572])).
fof(f34325,plain,(
  ( ! [X280,X282,X277,X279,X281,X278] : (s(bool,X278) = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X277),'const.option.NONE_0'),s(bool,X278),s(fun(X277,bool),X279)),'const.option.option_CASE_3'(s('type.option.option'(X281),'const.option.NONE_0'),s(fun(bool,bool),X280),s(fun(X281,fun(bool,bool)),X282)),bool)) | ~p(s(bool,happ(s(fun(bool,bool),X280),s(bool,'T_0')))) | s(bool,'F_0') = s(bool,X278)) )),
  inference(forward_demodulation,[],[f34210,f166])).
fof(f34210,plain,(
  ( ! [X280,X282,X277,X279,X281,X278] : (~p(s(bool,happ(s(fun(bool,bool),X280),s(bool,'T_0')))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(X277),'const.option.NONE_0'),s(bool,X278),s(fun(X277,bool),X279))) = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X277),'const.option.NONE_0'),s(bool,X278),s(fun(X277,bool),X279)),'const.option.option_CASE_3'(s('type.option.option'(X281),'const.option.NONE_0'),s(fun(bool,bool),X280),s(fun(X281,fun(bool,bool)),X282)),bool)) | s(bool,'F_0') = s(bool,X278)) )),
  inference(superposition,[],[f434,f298])).
fof(f34208,plain,(
  ( ! [X269,X271,X267,X268,X270] : (~p(s(bool,happ(s(fun(bool,bool),X268),s(bool,X267)))) | s(bool,'F_0') = s(bool,sK7('F_0','const.option.option_CASE_3'(s('type.option.option'(X269),'const.option.NONE_0'),s(fun(bool,bool),X268),s(fun(X269,fun(bool,bool)),X270)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X271))) | s(bool,X267) = s(bool,X271)) ) | $spl0),
  inference(superposition,[],[f434,f3902])).
fof(f34204,plain,(
  ( ! [X249,X246,X248,X247,X245] : (~p(s(bool,happ(s(fun(bool,bool),X246),s(bool,X245)))) | s(bool,'F_0') = s(bool,sK7('F_0','const.option.option_CASE_3'(s('type.option.option'(X247),'const.option.NONE_0'),s(fun(bool,bool),X246),s(fun(X247,fun(bool,bool)),X248)),bool)) | s(bool,X245) = s(bool,X249) | s(bool,'F_0') = s(bool,X249)) ) | $spl0),
  inference(superposition,[],[f434,f1632])).
fof(f34321,plain,(
  ( ! [X229,X227,X230,X228,X226] : (s(bool,'T_0') = s(bool,X230) | ~p(s(bool,happ(s(fun(bool,bool),X227),s(bool,X226)))) | s(bool,'T_0') = s(bool,sK7('T_0','const.option.option_CASE_3'(s('type.option.option'(X228),'const.option.NONE_0'),s(fun(bool,bool),X227),s(fun(X228,fun(bool,bool)),X229)),bool)) | s(bool,X226) = s(bool,X230)) ) | $spl0),
  inference(forward_demodulation,[],[f34200,f901])).
fof(f34200,plain,(
  ( ! [X229,X227,X230,X228,X226] : (~p(s(bool,happ(s(fun(bool,bool),X227),s(bool,X226)))) | s(bool,'T_0') = s(bool,sK7('T_0','const.option.option_CASE_3'(s('type.option.option'(X228),'const.option.NONE_0'),s(fun(bool,bool),X227),s(fun(X228,fun(bool,bool)),X229)),bool)) | s(bool,X230) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X226) = s(bool,X230)) ) | $spl0),
  inference(superposition,[],[f434,f9397])).
fof(f34199,plain,(
  ( ! [X222,X225,X223,X221,X224] : (~p(s(bool,happ(s(fun(bool,bool),X222),s(bool,X221)))) | s(bool,'T_0') = s(bool,sK7('T_0','const.option.option_CASE_3'(s('type.option.option'(X223),'const.option.NONE_0'),s(fun(bool,bool),X222),s(fun(X223,fun(bool,bool)),X224)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X225))) | s(bool,X221) = s(bool,X225)) ) | $spl0),
  inference(superposition,[],[f434,f14030])).
fof(f34197,plain,(
  ( ! [X212,X210,X213,X211,X214] : (~p(s(bool,happ(s(fun(bool,bool),X211),s(bool,'T_0')))) | s(bool,X210) = s(bool,sK7(X210,'const.option.option_CASE_3'(s('type.option.option'(X212),'const.option.NONE_0'),s(fun(bool,bool),X211),s(fun(X212,fun(bool,bool)),X213)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X214))) | s(bool,X210) = s(bool,X214)) ) | $spl0),
  inference(superposition,[],[f434,f14030])).
fof(f34196,plain,(
  ( ! [X208,X206,X209,X207,X205] : (~p(s(bool,happ(s(fun(bool,bool),X207),s(bool,X206)))) | s(bool,X205) = s(bool,sK7(X205,'const.option.option_CASE_3'(s('type.option.option'(X208),'const.option.NONE_0'),s(fun(bool,bool),X207),s(fun(X208,fun(bool,bool)),X209)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X205))) | s(bool,'T_0') = s(bool,X206)) ) | $spl0),
  inference(superposition,[],[f434,f14030])).
fof(f34195,plain,(
  ( ! [X204,X202,X200,X203,X201] : (~p(s(bool,happ(s(fun(bool,bool),X202),s(bool,X201)))) | s(bool,X200) = s(bool,sK7(X200,'const.option.option_CASE_3'(s('type.option.option'(X203),'const.option.NONE_0'),s(fun(bool,bool),X202),s(fun(X203,fun(bool,bool)),X204)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X201))) | s(bool,'T_0') = s(bool,X200)) ) | $spl0),
  inference(superposition,[],[f434,f14030])).
fof(f34310,plain,(
  ( ! [X158,X156,X159,X157] : (~p(s(bool,happ(s(fun(bool,bool),X157),s(bool,'T_0')))) | s(bool,X156) = s(bool,sK7(X156,'const.option.option_CASE_3'(s('type.option.option'(X158),'const.option.NONE_0'),s(fun(bool,bool),X157),s(fun(X158,fun(bool,bool)),X159)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X156)))) ) | $spl0),
  inference(forward_demodulation,[],[f34186,f901])).
fof(f34186,plain,(
  ( ! [X158,X156,X159,X157] : (~p(s(bool,happ(s(fun(bool,bool),X157),s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))))) | s(bool,X156) = s(bool,sK7(X156,'const.option.option_CASE_3'(s('type.option.option'(X158),'const.option.NONE_0'),s(fun(bool,bool),X157),s(fun(X158,fun(bool,bool)),X159)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X156)))) ) | $spl0),
  inference(superposition,[],[f434,f8984])).
fof(f34180,plain,(
  ( ! [X134,X132,X135,X133,X131] : (~p(s(bool,happ(s(fun(bool,bool),X133),s(bool,X132)))) | s(bool,X131) = s(bool,sK7(X131,'const.option.option_CASE_3'(s('type.option.option'(X134),'const.option.NONE_0'),s(fun(bool,bool),X133),s(fun(X134,fun(bool,bool)),X135)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X132))) | s(bool,'F_0') = s(bool,X131)) ) | $spl0),
  inference(superposition,[],[f434,f3902])).
fof(f34179,plain,(
  ( ! [X127,X130,X128,X126,X129] : (~p(s(bool,happ(s(fun(bool,bool),X128),s(bool,X127)))) | s(bool,X126) = s(bool,sK7(X126,'const.option.option_CASE_3'(s('type.option.option'(X129),'const.option.NONE_0'),s(fun(bool,bool),X128),s(fun(X129,fun(bool,bool)),X130)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X126))) | s(bool,'F_0') = s(bool,X127)) ) | $spl0),
  inference(superposition,[],[f434,f3902])).
fof(f34178,plain,(
  ( ! [X125,X123,X121,X124,X122] : (~p(s(bool,happ(s(fun(bool,bool),X122),s(bool,'F_0')))) | s(bool,X121) = s(bool,sK7(X121,'const.option.option_CASE_3'(s('type.option.option'(X123),'const.option.NONE_0'),s(fun(bool,bool),X122),s(fun(X123,fun(bool,bool)),X124)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X125))) | s(bool,X121) = s(bool,X125)) ) | $spl0),
  inference(superposition,[],[f434,f3902])).
fof(f34168,plain,(
  ( ! [X66,X64,X67,X65,X63] : (~p(s(bool,happ(s(fun(bool,bool),X65),s(bool,X64)))) | s(bool,X63) = s(bool,sK7(X63,'const.option.option_CASE_3'(s('type.option.option'(X66),'const.option.NONE_0'),s(fun(bool,bool),X65),s(fun(X66,fun(bool,bool)),X67)),bool)) | s(bool,'F_0') = s(bool,X64) | s(bool,'F_0') = s(bool,X63)) ) | $spl0),
  inference(superposition,[],[f434,f1632])).
fof(f34167,plain,(
  ( ! [X61,X59,X62,X60,X58] : (~p(s(bool,happ(s(fun(bool,bool),X59),s(bool,'F_0')))) | s(bool,X58) = s(bool,sK7(X58,'const.option.option_CASE_3'(s('type.option.option'(X60),'const.option.NONE_0'),s(fun(bool,bool),X59),s(fun(X60,fun(bool,bool)),X61)),bool)) | s(bool,X58) = s(bool,X62) | s(bool,'F_0') = s(bool,X62)) ) | $spl0),
  inference(superposition,[],[f434,f1632])).
fof(f34164,plain,(
  ( ! [X47,X45,X43,X46,X44] : (~p(s(bool,happ(s(fun(bool,bool),X45),s(bool,X44)))) | s(bool,X43) = s(bool,sK7(X43,'const.option.option_CASE_3'(s('type.option.option'(X46),'const.option.NONE_0'),s(fun(bool,bool),X45),s(fun(X46,fun(bool,bool)),X47)),bool)) | s(bool,'T_0') = s(bool,X44) | s(bool,'T_0') = s(bool,X43)) )),
  inference(superposition,[],[f434,f208])).
fof(f34163,plain,(
  ( ! [X39,X41,X38,X42,X40] : (~p(s(bool,happ(s(fun(bool,bool),X39),s(bool,'T_0')))) | s(bool,X38) = s(bool,sK7(X38,'const.option.option_CASE_3'(s('type.option.option'(X40),'const.option.NONE_0'),s(fun(bool,bool),X39),s(fun(X40,fun(bool,bool)),X41)),bool)) | s(bool,X38) = s(bool,X42) | s(bool,'T_0') = s(bool,X42)) )),
  inference(superposition,[],[f434,f208])).
fof(f34161,plain,(
  ( ! [X30,X28,X33,X31,X29,X32] : (~p(s(bool,happ(s(fun(X28,bool),X31),s(X28,X29)))) | s(X28,sK7(sK6('const.option.SOME_1'(s(X28,X29)),X28),X30,X28)) = s(X28,sK7(sK7(sK6('const.option.SOME_1'(s(X28,X29)),X28),X30,X28),'const.option.option_CASE_3'(s('type.option.option'(X32),'const.option.NONE_0'),s(fun(X28,bool),X31),s(fun(X32,fun(X28,bool)),X33)),X28)) | s(bool,'F_0') = s(bool,happ(s(fun(X28,bool),X30),s(X28,X29)))) ) | $spl0),
  inference(superposition,[],[f434,f2781])).
fof(f34295,plain,(
  ( ! [X26,X24,X23,X27,X25] : (s(X23,X24) = s(X23,sK7(sK6('const.option.SOME_1'(s(X23,X24)),X23),'const.option.option_CASE_3'(s('type.option.option'(X26),'const.option.NONE_0'),s(fun(X23,bool),X25),s(fun(X26,fun(X23,bool)),X27)),X23)) | ~p(s(bool,happ(s(fun(X23,bool),X25),s(X23,X24))))) )),
  inference(forward_demodulation,[],[f34160,f901])).
fof(f34160,plain,(
  ( ! [X26,X24,X23,X27,X25] : (~p(s(bool,happ(s(fun(X23,bool),X25),s(X23,X24)))) | s(X23,sK6('const.option.SOME_1'(s(X23,X24)),X23)) = s(X23,sK7(sK6('const.option.SOME_1'(s(X23,X24)),X23),'const.option.option_CASE_3'(s('type.option.option'(X26),'const.option.NONE_0'),s(fun(X23,bool),X25),s(fun(X26,fun(X23,bool)),X27)),X23))) )),
  inference(superposition,[],[f434,f901])).
fof(f34294,plain,(
  ( ! [X21,X19,X17,X15,X22,X20,X18,X16] : (s(X15,'const.option.option_CASE_3'(s('type.option.option'(X16),X17),s(X15,X18),s(fun(X16,X15),X19))) = s(X15,sK7(happ(s(fun(fun(X16,X15),X15),happ(s(fun(X15,fun(fun(X16,X15),X15)),happ(s(fun('type.option.option'(X16),fun(X15,fun(fun(X16,X15),X15))),'const.option.option_CASE_0'),s('type.option.option'(X16),X17))),s(X15,X18))),s(fun(X16,X15),X19)),'const.option.option_CASE_3'(s('type.option.option'(X21),'const.option.NONE_0'),s(fun(X15,bool),X20),s(fun(X21,fun(X15,bool)),X22)),X15)) | ~p(s(bool,happ(s(fun(X15,bool),X20),s(X15,'const.option.option_CASE_3'(s('type.option.option'(X16),X17),s(X15,X18),s(fun(X16,X15),X19))))))) )),
  inference(forward_demodulation,[],[f34159,f169])).
fof(f34159,plain,(
  ( ! [X21,X19,X17,X15,X22,X20,X18,X16] : (~p(s(bool,happ(s(fun(X15,bool),X20),s(X15,'const.option.option_CASE_3'(s('type.option.option'(X16),X17),s(X15,X18),s(fun(X16,X15),X19)))))) | s(X15,happ(s(fun(fun(X16,X15),X15),happ(s(fun(X15,fun(fun(X16,X15),X15)),happ(s(fun('type.option.option'(X16),fun(X15,fun(fun(X16,X15),X15))),'const.option.option_CASE_0'),s('type.option.option'(X16),X17))),s(X15,X18))),s(fun(X16,X15),X19))) = s(X15,sK7(happ(s(fun(fun(X16,X15),X15),happ(s(fun(X15,fun(fun(X16,X15),X15)),happ(s(fun('type.option.option'(X16),fun(X15,fun(fun(X16,X15),X15))),'const.option.option_CASE_0'),s('type.option.option'(X16),X17))),s(X15,X18))),s(fun(X16,X15),X19)),'const.option.option_CASE_3'(s('type.option.option'(X21),'const.option.NONE_0'),s(fun(X15,bool),X20),s(fun(X21,fun(X15,bool)),X22)),X15))) )),
  inference(superposition,[],[f434,f169])).
fof(f34293,plain,(
  ( ! [X14,X12,X10,X8,X7,X13,X11,X9] : (s(X7,happ(s(fun(X8,X7),X11),s(X8,X9))) = s(X7,sK7('const.option.option_CASE_3'(s('type.option.option'(X8),'const.option.SOME_1'(s(X8,X9))),s(X7,X10),s(fun(X8,X7),X11)),'const.option.option_CASE_3'(s('type.option.option'(X13),'const.option.NONE_0'),s(fun(X7,bool),X12),s(fun(X13,fun(X7,bool)),X14)),X7)) | ~p(s(bool,happ(s(fun(X7,bool),X12),s(X7,happ(s(fun(X8,X7),X11),s(X8,X9))))))) )),
  inference(forward_demodulation,[],[f34158,f168])).
fof(f34158,plain,(
  ( ! [X14,X12,X10,X8,X7,X13,X11,X9] : (~p(s(bool,happ(s(fun(X7,bool),X12),s(X7,happ(s(fun(X8,X7),X11),s(X8,X9)))))) | s(X7,'const.option.option_CASE_3'(s('type.option.option'(X8),'const.option.SOME_1'(s(X8,X9))),s(X7,X10),s(fun(X8,X7),X11))) = s(X7,sK7('const.option.option_CASE_3'(s('type.option.option'(X8),'const.option.SOME_1'(s(X8,X9))),s(X7,X10),s(fun(X8,X7),X11)),'const.option.option_CASE_3'(s('type.option.option'(X13),'const.option.NONE_0'),s(fun(X7,bool),X12),s(fun(X13,fun(X7,bool)),X14)),X7))) )),
  inference(superposition,[],[f434,f168])).
fof(f34156,plain,(
  ( ! [X30,X28,X33,X31,X29,X32] : (~p(s(bool,happ(s(fun(X28,bool),X29),s(X28,X31)))) | s(X28,X31) = s(X28,sK7(X31,'const.option.option_CASE_3'(s('type.option.option'(X32),'const.option.NONE_0'),s(fun(X28,bool),sK7(sK6('const.option.SOME_1'(s(fun(X28,bool),X29)),fun(X28,bool)),X30,fun(X28,bool))),s(fun(X32,fun(X28,bool)),X33)),X28)) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X28,bool),bool),X30),s(fun(X28,bool),X29)))) ) | $spl0),
  inference(superposition,[],[f434,f2781])).
fof(f33643,plain,(
  ( ! [X662,X664,X661,X663] : (~p(s(bool,happ(s(fun(bool,bool),X664),s(bool,'F_0')))) | s(bool,sK7(sK6('const.option.SOME_1'(s(bool,happ(s(fun(X661,bool),X662),s(X661,X663)))),bool),X664,bool)) = s(bool,sK7(sK7(sK6('const.option.SOME_1'(s(bool,happ(s(fun(X661,bool),X662),s(X661,X663)))),bool),X664,bool),X664,bool)) | s(X661,X663) = s(X661,sK7(X663,X662,X661))) ) | $spl0),
  inference(superposition,[],[f2788,f3724])).
fof(f33637,plain,(
  ( ! [X639,X640,X638,X637] : (~p(s(bool,happ(s(fun(bool,bool),X640),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X640),s(bool,sK7(sK6('const.option.SOME_1'(s(bool,happ(s(fun(X637,bool),X638),s(X637,X639)))),bool),X640,bool)))) | s(X637,X639) = s(X637,sK7(X639,X638,X637))) ) | $spl0),
  inference(superposition,[],[f535,f3724])).
fof(f33636,plain,(
  ( ! [X633,X635,X636,X634] : (s('type.option.option'(bool),X636) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,sK6(X636,bool)) = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X633,bool),X634),s(X633,X635)))),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X636) | s(X633,X635) = s(X633,sK7(X635,X634,X633))) ) | $spl0),
  inference(superposition,[],[f459,f3724])).
fof(f33634,plain,(
  ( ! [X625,X621,X623,X624,X626,X622] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X624))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(X625),'const.option.NONE_0'),s(bool,X624),s(fun(X625,bool),X626))) = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X621,bool),X622),s(X621,X623)))),bool)) | s(X621,X623) = s(X621,sK7(X623,X622,X621))) ) | $spl0),
  inference(superposition,[],[f363,f3724])).
fof(f33858,plain,(
  ( ! [X580,X582,X581,X579] : (s(bool,happ(s(fun(X579,bool),X580),s(X579,X581))) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,happ(s(fun(X579,bool),X580),s(X579,X581)))),bool),X582,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X582),s(bool,'F_0')))) | s(X579,X581) = s(X579,sK7(X581,X580,X579))) ) | $spl0),
  inference(forward_demodulation,[],[f33625,f901])).
fof(f33625,plain,(
  ( ! [X580,X582,X581,X579] : (~p(s(bool,happ(s(fun(bool,bool),X582),s(bool,'F_0')))) | s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X579,bool),X580),s(X579,X581)))),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,happ(s(fun(X579,bool),X580),s(X579,X581)))),bool),X582,bool)) | s(X579,X581) = s(X579,sK7(X581,X580,X579))) ) | $spl0),
  inference(superposition,[],[f160,f3724])).
fof(f33620,plain,(
  ( ! [X561,X559,X560,X558] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X561))) | s(bool,X561) = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X558,bool),X559),s(X558,X560)))),bool)) | s(X558,X560) = s(X558,sK7(X560,X559,X558))) ) | $spl0),
  inference(superposition,[],[f157,f3724])).
fof(f33583,plain,(
  ( ! [X408,X405,X407,X403,X404,X406] : (s(bool,'F_0') != s(bool,X406) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(X407),'const.option.NONE_0'),s(bool,X406),s(fun(X407,bool),X408))) = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X403,bool),X404),s(X403,X405)))),bool)) | s(X403,X405) = s(X403,sK7(X405,X404,X403))) ) | $spl0),
  inference(superposition,[],[f9763,f3724])).
fof(f33805,plain,(
  ( ! [X243,X246,X244,X248,X247,X245] : (s(bool,happ(s(fun(X246,bool),X247),s(X246,X248))) = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X243,bool),X244),s(X243,X245)))),bool)) | s(X246,X248) = s(X246,sK7(X248,X247,X246)) | s(X243,X245) = s(X243,sK7(X245,X244,X243))) ) | $spl0),
  inference(subsumption_resolution,[],[f33544,f179])).
fof(f33544,plain,(
  ( ! [X243,X246,X244,X248,X247,X245] : (p(s(bool,'F_0')) | s(bool,happ(s(fun(X246,bool),X247),s(X246,X248))) = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X243,bool),X244),s(X243,X245)))),bool)) | s(X246,X248) = s(X246,sK7(X248,X247,X246)) | s(X243,X245) = s(X243,sK7(X245,X244,X243))) ) | $spl0),
  inference(superposition,[],[f2790,f3724])).
fof(f33798,plain,(
  ( ! [X212,X210,X208,X211,X209] : (s(bool,X211) = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X208,bool),X209),s(X208,X210)))),bool)) | s(bool,X211) = s(bool,X212) | s(bool,'F_0') = s(bool,X212) | s(X208,X210) = s(X208,sK7(X210,X209,X208))) ) | $spl0),
  inference(subsumption_resolution,[],[f33536,f179])).
fof(f33536,plain,(
  ( ! [X212,X210,X208,X211,X209] : (p(s(bool,'F_0')) | s(bool,X211) = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X208,bool),X209),s(X208,X210)))),bool)) | s(bool,X211) = s(bool,X212) | s(bool,'F_0') = s(bool,X212) | s(X208,X210) = s(X208,sK7(X210,X209,X208))) ) | $spl0),
  inference(superposition,[],[f2416,f3724])).
fof(f33781,plain,(
  ( ! [X57,X58,X56] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X56,bool),X57),s(X56,X58)))),bool)) | s(X56,X58) = s(X56,sK7(X58,X57,X56))) ) | $spl0),
  inference(subsumption_resolution,[],[f33500,f179])).
fof(f33500,plain,(
  ( ! [X57,X58,X56] : (p(s(bool,'F_0')) | s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X56,bool),X57),s(X56,X58)))),bool)) | s(X56,X58) = s(X56,sK7(X58,X57,X56))) ) | $spl0),
  inference(superposition,[],[f123,f3724])).
fof(f33778,plain,(
  ( ! [X165,X163,X164,X162] : (s(X162,X164) = s(X162,sK7(X164,X163,X162)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X165))) | s(bool,X165) = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X162,bool),X163),s(X162,X164)))),bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f33486,f180])).
fof(f33486,plain,(
  ( ! [X165,X163,X164,X162] : (s(bool,'T_0') = s(bool,'F_0') | s(X162,X164) = s(X162,sK7(X164,X163,X162)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X165))) | s(bool,X165) = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X162,bool),X163),s(X162,X164)))),bool))) ) | $spl0),
  inference(superposition,[],[f3724,f14030])).
fof(f33414,plain,(
  ( ! [X271,X272] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun('type.option.option'(bool),bool),X272),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))),bool)) | s('type.option.option'(bool),X271) = s('type.option.option'(bool),sK7(X271,X272,'type.option.option'(bool))) | s(bool,'T_0') = s(bool,sK6(X271,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X271)) ) | $spl0),
  inference(superposition,[],[f3724,f458])).
fof(f33413,plain,(
  ( ! [X269,X270] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun('type.option.option'(bool),bool),X270),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0')))))),bool)) | s('type.option.option'(bool),X269) = s('type.option.option'(bool),sK7(X269,X270,'type.option.option'(bool))) | s(bool,'F_0') = s(bool,sK6(X269,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X269)) ) | $spl0),
  inference(superposition,[],[f3724,f1766])).
fof(f33412,plain,(
  ( ! [X267,X268,X266] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun('type.option.option'(X266),bool),X268),s('type.option.option'(X266),X267)))),bool)) | s('type.option.option'(X266),'const.option.SOME_1'(s(X266,sK6(X267,X266)))) = s('type.option.option'(X266),sK7('const.option.SOME_1'(s(X266,sK6(X267,X266))),X268,'type.option.option'(X266))) | s('type.option.option'(X266),'const.option.NONE_0') = s('type.option.option'(X266),X267)) ) | $spl0),
  inference(superposition,[],[f3724,f148])).
fof(f33740,plain,(
  ( ! [X265,X264] : (s(bool,'T_0') = s(bool,X264) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun('type.option.option'(bool),bool),X265),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X264)))))),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'F_0')),X265,'type.option.option'(bool)))) ) | $spl0),
  inference(forward_demodulation,[],[f33411,f901])).
fof(f33411,plain,(
  ( ! [X265,X264] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun('type.option.option'(bool),bool),X265),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X264)))))),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'F_0')),X265,'type.option.option'(bool))) | s(bool,X264) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f3724,f8984])).
fof(f33410,plain,(
  ( ! [X263,X262] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun('type.option.option'(bool),bool),X263),s('type.option.option'(bool),X262)))),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'F_0')),X263,'type.option.option'(bool))) | s(bool,'T_0') = s(bool,sK6(X262,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X262)) ) | $spl0),
  inference(superposition,[],[f3724,f458])).
fof(f33409,plain,(
  ( ! [X261,X259,X260] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun('type.option.option'(bool),bool),X260),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X259)))))),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'F_0')),X260,'type.option.option'(bool))) | s(bool,X259) = s(bool,X261) | s(bool,'F_0') = s(bool,X261)) ) | $spl0),
  inference(superposition,[],[f3724,f3902])).
fof(f33407,plain,(
  ( ! [X255,X254,X256] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun('type.option.option'(bool),bool),X255),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X254)))))),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'T_0')),X255,'type.option.option'(bool))) | s(bool,X254) = s(bool,X256) | s(bool,'T_0') = s(bool,X256)) ) | $spl0),
  inference(superposition,[],[f3724,f14030])).
fof(f33406,plain,(
  ( ! [X253,X252] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun('type.option.option'(bool),bool),X253),s('type.option.option'(bool),X252)))),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'T_0')),X253,'type.option.option'(bool))) | s(bool,'F_0') = s(bool,sK6(X252,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X252)) ) | $spl0),
  inference(superposition,[],[f3724,f1766])).
fof(f33737,plain,(
  ( ! [X249,X248] : (s(bool,'T_0') = s(bool,X248) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun('type.option.option'(bool),bool),X249),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X248))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,X248)),X249,'type.option.option'(bool)))) ) | $spl0),
  inference(forward_demodulation,[],[f33404,f901])).
fof(f33404,plain,(
  ( ! [X249,X248] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun('type.option.option'(bool),bool),X249),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X248))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,X248)),X249,'type.option.option'(bool))) | s(bool,X248) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f3724,f8984])).
fof(f33403,plain,(
  ( ! [X246,X247,X245] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun('type.option.option'(bool),bool),X246),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X245))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,X245)),X246,'type.option.option'(bool))) | s(bool,X245) = s(bool,X247) | s(bool,'F_0') = s(bool,X247)) ) | $spl0),
  inference(superposition,[],[f3724,f3902])).
fof(f33402,plain,(
  ( ! [X243,X244,X242] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun('type.option.option'(bool),bool),X243),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0')))))),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X242))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,X242)),X243,'type.option.option'(bool))) | s(bool,X242) = s(bool,X244) | s(bool,'T_0') = s(bool,X244)) ) | $spl0),
  inference(superposition,[],[f3724,f14030])).
fof(f33401,plain,(
  ( ! [X241,X240] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X241),s(bool,'T_0')))),bool)) | s(bool,sK6(X240,bool)) = s(bool,sK7(sK6(X240,bool),X241,bool)) | s('type.option.option'(bool),X240) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X240)) ) | $spl0),
  inference(superposition,[],[f3724,f458])).
fof(f33400,plain,(
  ( ! [X239,X238] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X239),s(bool,'F_0')))),bool)) | s(bool,sK6(X238,bool)) = s(bool,sK7(sK6(X238,bool),X239,bool)) | s('type.option.option'(bool),X238) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X238)) ) | $spl0),
  inference(superposition,[],[f3724,f1766])).
fof(f33728,plain,(
  ( ! [X222,X221] : (s(bool,'F_0') = s(bool,X221) | s(bool,'T_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X222,bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X222),s(bool,X221)))),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f33727,f901])).
fof(f33727,plain,(
  ( ! [X222,X221] : (s(bool,'T_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X222,bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X222),s(bool,X221)))),bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X221)),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f33393,f901])).
fof(f33393,plain,(
  ( ! [X222,X221] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X222),s(bool,X221)))),bool)) | s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X222,bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X221)),bool))) ) | $spl0),
  inference(superposition,[],[f3724,f7724])).
fof(f33726,plain,(
  ( ! [X218,X220,X219] : (s(bool,'T_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X219,bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X219),s(bool,X218)))),bool)) | s(bool,X218) = s(bool,X220) | s(bool,'T_0') = s(bool,X220)) ) | $spl0),
  inference(forward_demodulation,[],[f33392,f901])).
fof(f33392,plain,(
  ( ! [X218,X220,X219] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X219),s(bool,X218)))),bool)) | s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X219,bool)) | s(bool,X218) = s(bool,X220) | s(bool,'T_0') = s(bool,X220)) ) | $spl0),
  inference(superposition,[],[f3724,f9397])).
fof(f33725,plain,(
  ( ! [X216,X217] : (s(bool,'T_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X217,bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X217),s(bool,X216)))),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X216)))) ) | $spl0),
  inference(forward_demodulation,[],[f33391,f901])).
fof(f33391,plain,(
  ( ! [X216,X217] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X217),s(bool,X216)))),bool)) | s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X217,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X216)))) ) | $spl0),
  inference(superposition,[],[f3724,f8984])).
fof(f33721,plain,(
  ( ! [X210,X211,X209] : (s(bool,X209) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X209)),bool),X210,bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X210),s(bool,'F_0')))),bool)) | s(bool,X209) = s(bool,X211) | s(bool,'F_0') = s(bool,X211)) ) | $spl0),
  inference(forward_demodulation,[],[f33388,f901])).
fof(f33388,plain,(
  ( ! [X210,X211,X209] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X210),s(bool,'F_0')))),bool)) | s(bool,sK6('const.option.SOME_1'(s(bool,X209)),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X209)),bool),X210,bool)) | s(bool,X209) = s(bool,X211) | s(bool,'F_0') = s(bool,X211)) ) | $spl0),
  inference(superposition,[],[f3724,f1834])).
fof(f33720,plain,(
  ( ! [X208,X207] : (s(bool,'T_0') = s(bool,X207) | s(bool,X207) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X207)),bool),X208,bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X208),s(bool,'F_0')))),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f33719,f901])).
fof(f33719,plain,(
  ( ! [X208,X207] : (s(bool,X207) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X207)),bool),X208,bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X208),s(bool,'F_0')))),bool)) | s(bool,X207) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f33387,f901])).
fof(f33387,plain,(
  ( ! [X208,X207] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X208),s(bool,'F_0')))),bool)) | s(bool,sK6('const.option.SOME_1'(s(bool,X207)),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X207)),bool),X208,bool)) | s(bool,X207) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f3724,f7724])).
fof(f33718,plain,(
  ( ! [X206,X205] : (s(bool,X205) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X205)),bool),X206,bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X206),s(bool,'F_0')))),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X205)))) ) | $spl0),
  inference(forward_demodulation,[],[f33386,f901])).
fof(f33386,plain,(
  ( ! [X206,X205] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X206),s(bool,'F_0')))),bool)) | s(bool,sK6('const.option.SOME_1'(s(bool,X205)),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X205)),bool),X206,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X205)))) ) | $spl0),
  inference(superposition,[],[f3724,f9094])).
fof(f33384,plain,(
  ( ! [X198,X200,X199,X197] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X200),s(bool,'F_0')))),bool)) | s(bool,happ(s(fun(X197,bool),X198),s(X197,X199))) = s(bool,sK7(happ(s(fun(X197,bool),X198),s(X197,X199)),X200,bool)) | s(X197,X199) = s(X197,sK7(X199,X198,X197))) ) | $spl0),
  inference(superposition,[],[f3724,f1756])).
fof(f33383,plain,(
  ( ! [X196,X194,X195,X193] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X196),s(bool,'F_0')))),bool)) | s(bool,happ(s(fun(X193,bool),X194),s(X193,X195))) = s(bool,sK7(happ(s(fun(X193,bool),X194),s(X193,X195)),X196,bool)) | s(X193,X195) = s(X193,sK7(sK6('const.option.SOME_1'(s(X193,X195)),X193),X194,X193))) ) | $spl0),
  inference(superposition,[],[f3724,f2781])).
fof(f33716,plain,(
  ( ! [X191,X192,X190] : (s(bool,'F_0') = s(bool,sK7('const.bool.IN_2'(s(X190,X191),s(fun(X190,bool),'const.pred_set.EMPTY_0')),X192,bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X192),s(bool,'F_0')))),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f33382,f191])).
fof(f33382,plain,(
  ( ! [X191,X192,X190] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X192),s(bool,'F_0')))),bool)) | s(bool,'const.bool.IN_2'(s(X190,X191),s(fun(X190,bool),'const.pred_set.EMPTY_0'))) = s(bool,sK7('const.bool.IN_2'(s(X190,X191),s(fun(X190,bool),'const.pred_set.EMPTY_0')),X192,bool))) ) | $spl0),
  inference(superposition,[],[f3724,f191])).
fof(f33715,plain,(
  ( ! [X189,X187,X185,X188,X186] : (s(bool,'F_0') = s(bool,sK7('const.bool.IN_2'(s(X185,X186),s(fun(X185,bool),'const.pred_set.EMPTY_0')),X188,bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X188),s(bool,X187)))),bool)) | s(bool,X187) = s(bool,X189) | s(bool,'F_0') = s(bool,X189)) ) | $spl0),
  inference(forward_demodulation,[],[f33381,f191])).
fof(f33381,plain,(
  ( ! [X189,X187,X185,X188,X186] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X188),s(bool,X187)))),bool)) | s(bool,'const.bool.IN_2'(s(X185,X186),s(fun(X185,bool),'const.pred_set.EMPTY_0'))) = s(bool,sK7('const.bool.IN_2'(s(X185,X186),s(fun(X185,bool),'const.pred_set.EMPTY_0')),X188,bool)) | s(bool,X187) = s(bool,X189) | s(bool,'F_0') = s(bool,X189)) ) | $spl0),
  inference(superposition,[],[f3724,f2976])).
fof(f33375,plain,(
  ( ! [X167,X165,X166] : (s(bool,X165) = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X166),s(bool,X165)))),bool)) | s(bool,'F_0') = s(bool,sK7('F_0',X166,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X167))) | s(bool,X165) = s(bool,X167)) ) | $spl0),
  inference(superposition,[],[f3724,f3902])).
fof(f33374,plain,(
  ( ! [X163,X161,X164,X162,X160] : (s(bool,X160) = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X161),s(bool,X160)))),bool)) | s(bool,'F_0') = s(bool,sK7('F_0',X161,bool)) | s(bool,X162) = s(bool,'const.bool.IN_2'(s(X163,X164),s(fun(X163,bool),'const.pred_set.EMPTY_0'))) | s(bool,X160) = s(bool,X162)) ) | $spl0),
  inference(superposition,[],[f3724,f2976])).
fof(f33373,plain,(
  ( ! [X158,X159,X157] : (s(bool,X157) = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X158),s(bool,X157)))),bool)) | s(bool,'F_0') = s(bool,sK7('F_0',X158,bool)) | s(bool,X157) = s(bool,X159) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X159)),bool))) ) | $spl0),
  inference(superposition,[],[f3724,f1834])).
fof(f33371,plain,(
  ( ! [X152,X151,X153] : (s(bool,X151) = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X152),s(bool,X151)))),bool)) | s(bool,'F_0') = s(bool,sK7('F_0',X152,bool)) | s(bool,X151) = s(bool,X153) | s(bool,'F_0') = s(bool,X153)) ) | $spl0),
  inference(superposition,[],[f3724,f1632])).
fof(f33370,plain,(
  ( ! [X149,X150] : (s(bool,X149) = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X150),s(bool,X149)))),bool)) | s(bool,'F_0') = s(bool,sK7('F_0',X150,bool)) | s(bool,'T_0') = s(bool,X149)) ) | $spl0),
  inference(superposition,[],[f3724,f121])).
fof(f33705,plain,(
  ( ! [X142,X140,X141] : (s(bool,'T_0') = s(bool,X142) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X141),s(bool,X140)))),bool)) | s(bool,'T_0') = s(bool,sK7('T_0',X141,bool)) | s(bool,X140) = s(bool,X142)) ) | $spl0),
  inference(forward_demodulation,[],[f33367,f901])).
fof(f33367,plain,(
  ( ! [X142,X140,X141] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X141),s(bool,X140)))),bool)) | s(bool,'T_0') = s(bool,sK7('T_0',X141,bool)) | s(bool,X142) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X140) = s(bool,X142)) ) | $spl0),
  inference(superposition,[],[f3724,f9397])).
fof(f33366,plain,(
  ( ! [X138,X139,X137] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X138),s(bool,X137)))),bool)) | s(bool,'T_0') = s(bool,sK7('T_0',X138,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X139))) | s(bool,X137) = s(bool,X139)) ) | $spl0),
  inference(superposition,[],[f3724,f14030])).
fof(f33364,plain,(
  ( ! [X132,X130,X131] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X131),s(bool,'T_0')))),bool)) | s(bool,X130) = s(bool,sK7(X130,X131,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X132))) | s(bool,X130) = s(bool,X132)) ) | $spl0),
  inference(superposition,[],[f3724,f14030])).
fof(f33363,plain,(
  ( ! [X127,X128,X129] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X129),s(bool,X128)))),bool)) | s(bool,X127) = s(bool,sK7(X127,X129,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X127))) | s(bool,'T_0') = s(bool,X128)) ) | $spl0),
  inference(superposition,[],[f3724,f14030])).
fof(f33362,plain,(
  ( ! [X125,X126,X124] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X126),s(bool,X125)))),bool)) | s(bool,X124) = s(bool,sK7(X124,X126,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X125))) | s(bool,'T_0') = s(bool,X124)) ) | $spl0),
  inference(superposition,[],[f3724,f14030])).
fof(f33695,plain,(
  ( ! [X99,X98] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X99),s(bool,'T_0')))),bool)) | s(bool,X98) = s(bool,sK7(X98,X99,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X98)))) ) | $spl0),
  inference(forward_demodulation,[],[f33353,f901])).
fof(f33353,plain,(
  ( ! [X99,X98] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X99),s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))))),bool)) | s(bool,X98) = s(bool,sK7(X98,X99,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X98)))) ) | $spl0),
  inference(superposition,[],[f3724,f8984])).
fof(f33694,plain,(
  ( ! [X97,X96] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X97),s(bool,'T_0')))),bool)) | s(bool,X96) = s(bool,sK7(X96,X97,bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X96)),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f33352,f901])).
fof(f33352,plain,(
  ( ! [X97,X96] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X97),s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))))),bool)) | s(bool,X96) = s(bool,sK7(X96,X97,bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X96)),bool))) ) | $spl0),
  inference(superposition,[],[f3724,f7724])).
fof(f33347,plain,(
  ( ! [X87,X85,X86] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X87),s(bool,X86)))),bool)) | s(bool,X85) = s(bool,sK7(X85,X87,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X86))) | s(bool,'F_0') = s(bool,X85)) ) | $spl0),
  inference(superposition,[],[f3724,f3902])).
fof(f33346,plain,(
  ( ! [X83,X84,X82] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X84),s(bool,X83)))),bool)) | s(bool,X82) = s(bool,sK7(X82,X84,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X82))) | s(bool,'F_0') = s(bool,X83)) ) | $spl0),
  inference(superposition,[],[f3724,f3902])).
fof(f33345,plain,(
  ( ! [X80,X81,X79] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X80),s(bool,'F_0')))),bool)) | s(bool,X79) = s(bool,sK7(X79,X80,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X81))) | s(bool,X79) = s(bool,X81)) ) | $spl0),
  inference(superposition,[],[f3724,f3902])).
fof(f33344,plain,(
  ( ! [X78,X76,X74,X77,X75] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X76),s(bool,X75)))),bool)) | s(bool,X74) = s(bool,sK7(X74,X76,bool)) | s(bool,X75) = s(bool,'const.bool.IN_2'(s(X77,X78),s(fun(X77,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X74)) ) | $spl0),
  inference(superposition,[],[f3724,f2976])).
fof(f33343,plain,(
  ( ! [X70,X72,X71,X69,X73] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X71),s(bool,X70)))),bool)) | s(bool,X69) = s(bool,sK7(X69,X71,bool)) | s(bool,X69) = s(bool,'const.bool.IN_2'(s(X72,X73),s(fun(X72,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X70)) ) | $spl0),
  inference(superposition,[],[f3724,f2976])).
fof(f33342,plain,(
  ( ! [X68,X66,X64,X67,X65] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X65),s(bool,'F_0')))),bool)) | s(bool,X64) = s(bool,sK7(X64,X65,bool)) | s(bool,X66) = s(bool,'const.bool.IN_2'(s(X67,X68),s(fun(X67,bool),'const.pred_set.EMPTY_0'))) | s(bool,X64) = s(bool,X66)) ) | $spl0),
  inference(superposition,[],[f3724,f2976])).
fof(f33340,plain,(
  ( ! [X57,X58,X56] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X57),s(bool,'F_0')))),bool)) | s(bool,X56) = s(bool,sK7(X56,X57,bool)) | s(bool,X56) = s(bool,X58) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X58)),bool))) ) | $spl0),
  inference(superposition,[],[f3724,f1834])).
fof(f33338,plain,(
  ( ! [X52,X50,X51] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X52),s(bool,X51)))),bool)) | s(bool,X50) = s(bool,sK7(X50,X52,bool)) | s(bool,'F_0') = s(bool,X51) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X50)),bool))) ) | $spl0),
  inference(superposition,[],[f3724,f1834])).
fof(f33335,plain,(
  ( ! [X43,X41,X42] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X43),s(bool,X42)))),bool)) | s(bool,X41) = s(bool,sK7(X41,X43,bool)) | s(bool,'F_0') = s(bool,X42) | s(bool,'F_0') = s(bool,X41)) ) | $spl0),
  inference(superposition,[],[f3724,f1632])).
fof(f33334,plain,(
  ( ! [X39,X38,X40] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X39),s(bool,'F_0')))),bool)) | s(bool,X38) = s(bool,sK7(X38,X39,bool)) | s(bool,X38) = s(bool,X40) | s(bool,'F_0') = s(bool,X40)) ) | $spl0),
  inference(superposition,[],[f3724,f1632])).
fof(f33331,plain,(
  ( ! [X30,X31,X29] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X31),s(bool,X30)))),bool)) | s(bool,X29) = s(bool,sK7(X29,X31,bool)) | s(bool,'T_0') = s(bool,X30) | s(bool,'T_0') = s(bool,X29)) ) | $spl0),
  inference(superposition,[],[f3724,f208])).
fof(f33330,plain,(
  ( ! [X28,X26,X27] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X27),s(bool,'T_0')))),bool)) | s(bool,X26) = s(bool,sK7(X26,X27,bool)) | s(bool,X26) = s(bool,X28) | s(bool,'T_0') = s(bool,X28)) ) | $spl0),
  inference(superposition,[],[f3724,f208])).
fof(f33328,plain,(
  ( ! [X23,X21,X22,X20] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X20,bool),X23),s(X20,X21)))),bool)) | s(X20,sK7(sK6('const.option.SOME_1'(s(X20,X21)),X20),X22,X20)) = s(X20,sK7(sK7(sK6('const.option.SOME_1'(s(X20,X21)),X20),X22,X20),X23,X20)) | s(bool,'F_0') = s(bool,happ(s(fun(X20,bool),X22),s(X20,X21)))) ) | $spl0),
  inference(superposition,[],[f3724,f2781])).
fof(f33684,plain,(
  ( ! [X6,X10,X8,X7,X5,X9] : (s(X5,happ(s(fun(X6,X5),X9),s(X6,X7))) = s(X5,sK7('const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(X5,X8),s(fun(X6,X5),X9)),X10,X5)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X5,bool),X10),s(X5,happ(s(fun(X6,X5),X9),s(X6,X7)))))),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f33325,f168])).
fof(f33325,plain,(
  ( ! [X6,X10,X8,X7,X5,X9] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X5,bool),X10),s(X5,happ(s(fun(X6,X5),X9),s(X6,X7)))))),bool)) | s(X5,'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(X5,X8),s(fun(X6,X5),X9))) = s(X5,sK7('const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(X5,X8),s(fun(X6,X5),X9)),X10,X5))) ) | $spl0),
  inference(superposition,[],[f3724,f168])).
fof(f33322,plain,(
  ( ! [X19,X17,X18] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X17,bool),X18),s(X17,X19)))),bool)) | s(X17,X19) = s(X17,sK7(X19,sK6('const.option.SOME_1'(s(fun(X17,bool),X18)),fun(X17,bool)),X17))) ) | $spl0),
  inference(superposition,[],[f3724,f901])).
fof(f33320,plain,(
  ( ! [X6,X10,X8,X7,X5,X9] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X5,bool),happ(s(fun(X6,fun(X5,bool)),X9),s(X6,X7))),s(X5,X10)))),bool)) | s(X5,X10) = s(X5,sK7(X10,'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(fun(X5,bool),X8),s(fun(X6,fun(X5,bool)),X9)),X5))) ) | $spl0),
  inference(superposition,[],[f3724,f168])).
fof(f33317,plain,(
  ( ! [X753,X755,X756,X752,X754] : (s(bool,happ(s(fun(X752,bool),X755),s(X752,X753))) = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X752),'const.option.SOME_1'(s(X752,X753))),s(bool,X754),s(fun(X752,bool),X755)),X756,bool)) | s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X756),s(bool,'T_0'))) | s(bool,'F_0') = s(bool,happ(s(fun(X752,bool),X755),s(X752,X753)))) ) | $spl0),
  inference(forward_demodulation,[],[f33097,f168])).
fof(f33097,plain,(
  ( ! [X753,X755,X756,X752,X754] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X756),s(bool,'T_0'))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(X752),'const.option.SOME_1'(s(X752,X753))),s(bool,X754),s(fun(X752,bool),X755))) = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X752),'const.option.SOME_1'(s(X752,X753))),s(bool,X754),s(fun(X752,bool),X755)),X756,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(X752,bool),X755),s(X752,X753)))) ) | $spl0),
  inference(superposition,[],[f2789,f572])).
fof(f33096,plain,(
  ( ! [X749,X751,X747,X748,X750] : (~p(s(bool,happ(s(fun(bool,bool),X751),s(bool,'T_0')))) | s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X747),'const.option.SOME_1'(s(X747,X748))),s(bool,X749),s(fun(X747,bool),X750)),X751,bool)) = s(bool,sK7(sK7('const.option.option_CASE_3'(s('type.option.option'(X747),'const.option.SOME_1'(s(X747,X748))),s(bool,X749),s(fun(X747,bool),X750)),X751,bool),X751,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(X747,bool),X750),s(X747,X748)))) ) | $spl0),
  inference(superposition,[],[f2788,f572])).
fof(f33314,plain,(
  ( ! [X736,X732,X734,X733,X735] : (s(bool,happ(s(fun(X732,bool),X735),s(X732,X733))) = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X732),'const.option.SOME_1'(s(X732,X733))),s(bool,X734),s(fun(X732,bool),X735)),X736,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X736),s(bool,'T_0'))) | s(bool,'F_0') = s(bool,happ(s(fun(X732,bool),X735),s(X732,X733)))) ) | $spl0),
  inference(forward_demodulation,[],[f33093,f168])).
fof(f33093,plain,(
  ( ! [X736,X732,X734,X733,X735] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X736),s(bool,'T_0'))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(X732),'const.option.SOME_1'(s(X732,X733))),s(bool,X734),s(fun(X732,bool),X735))) = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X732),'const.option.SOME_1'(s(X732,X733))),s(bool,X734),s(fun(X732,bool),X735)),X736,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(X732,bool),X735),s(X732,X733)))) ) | $spl0),
  inference(superposition,[],[f1756,f572])).
fof(f33091,plain,(
  ( ! [X724,X726,X725,X727,X723] : (~p(s(bool,happ(s(fun(bool,bool),X727),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X727),s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X723),'const.option.SOME_1'(s(X723,X724))),s(bool,X725),s(fun(X723,bool),X726)),X727,bool)))) | s(bool,'F_0') = s(bool,happ(s(fun(X723,bool),X726),s(X723,X724)))) )),
  inference(superposition,[],[f535,f572])).
fof(f33090,plain,(
  ( ! [X720,X722,X718,X721,X719] : (s('type.option.option'(bool),X722) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,sK6(X722,bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X718),'const.option.SOME_1'(s(X718,X719))),s(bool,X720),s(fun(X718,bool),X721))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X722) | s(bool,'F_0') = s(bool,happ(s(fun(X718,bool),X721),s(X718,X719)))) )),
  inference(superposition,[],[f459,f572])).
fof(f33088,plain,(
  ( ! [X707,X708,X710,X704,X706,X709,X705] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X708))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(X709),'const.option.NONE_0'),s(bool,X708),s(fun(X709,bool),X710))) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X704),'const.option.SOME_1'(s(X704,X705))),s(bool,X706),s(fun(X704,bool),X707))) | s(bool,'F_0') = s(bool,happ(s(fun(X704,bool),X707),s(X704,X705)))) )),
  inference(superposition,[],[f363,f572])).
fof(f33311,plain,(
  ( ! [X656,X654,X657,X653,X655] : (s(bool,happ(s(fun(X653,bool),X656),s(X653,X654))) = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X653),'const.option.SOME_1'(s(X653,X654))),s(bool,X655),s(fun(X653,bool),X656)),X657,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X657),s(bool,'T_0')))) | s(bool,'F_0') = s(bool,happ(s(fun(X653,bool),X656),s(X653,X654)))) )),
  inference(forward_demodulation,[],[f33079,f168])).
fof(f33079,plain,(
  ( ! [X656,X654,X657,X653,X655] : (~p(s(bool,happ(s(fun(bool,bool),X657),s(bool,'T_0')))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(X653),'const.option.SOME_1'(s(X653,X654))),s(bool,X655),s(fun(X653,bool),X656))) = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X653),'const.option.SOME_1'(s(X653,X654))),s(bool,X655),s(fun(X653,bool),X656)),X657,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(X653,bool),X656),s(X653,X654)))) )),
  inference(superposition,[],[f160,f572])).
fof(f33074,plain,(
  ( ! [X629,X631,X627,X628,X630] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X631))) | s(bool,X631) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X627),'const.option.SOME_1'(s(X627,X628))),s(bool,X629),s(fun(X627,bool),X630))) | s(bool,'F_0') = s(bool,happ(s(fun(X627,bool),X630),s(X627,X628)))) )),
  inference(superposition,[],[f157,f572])).
fof(f33307,plain,(
  ( ! [X617,X615,X616,X618,X614] : (s(bool,X618) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X614),'const.option.SOME_1'(s(X614,X615))),s(bool,X616),s(fun(X614,bool),X617))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X618))) | s(bool,'F_0') = s(bool,happ(s(fun(X614,bool),X617),s(X614,X615)))) ) | $spl0),
  inference(subsumption_resolution,[],[f33071,f114])).
fof(f33071,plain,(
  ( ! [X617,X615,X616,X618,X614] : (~p(s(bool,'T_0')) | s(bool,X618) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X614),'const.option.SOME_1'(s(X614,X615))),s(bool,X616),s(fun(X614,bool),X617))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X618))) | s(bool,'F_0') = s(bool,happ(s(fun(X614,bool),X617),s(X614,X615)))) ) | $spl0),
  inference(superposition,[],[f29621,f572])).
fof(f33039,plain,(
  ( ! [X445,X441,X443,X444,X440,X442,X439] : (s(bool,'T_0') != s(bool,X443) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(X444),'const.option.NONE_0'),s(bool,X443),s(fun(X444,bool),X445))) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X439),'const.option.SOME_1'(s(X439,X440))),s(bool,X441),s(fun(X439,bool),X442))) | s(bool,'F_0') = s(bool,happ(s(fun(X439,bool),X442),s(X439,X440)))) ) | $spl0),
  inference(superposition,[],[f9763,f572])).
fof(f33257,plain,(
  ( ! [X182,X180,X178,X183,X181,X179] : (s(bool,X182) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X178),'const.option.SOME_1'(s(X178,X179))),s(bool,X180),s(fun(X178,bool),X181))) | s(bool,X182) = s(bool,X183) | s(bool,'F_0') = s(bool,X183) | s(bool,'F_0') = s(bool,happ(s(fun(X178,bool),X181),s(X178,X179)))) ) | $spl0),
  inference(subsumption_resolution,[],[f32988,f114])).
fof(f32988,plain,(
  ( ! [X182,X180,X178,X183,X181,X179] : (~p(s(bool,'T_0')) | s(bool,X182) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X178),'const.option.SOME_1'(s(X178,X179))),s(bool,X180),s(fun(X178,bool),X181))) | s(bool,X182) = s(bool,X183) | s(bool,'F_0') = s(bool,X183) | s(bool,'F_0') = s(bool,happ(s(fun(X178,bool),X181),s(X178,X179)))) ) | $spl0),
  inference(superposition,[],[f2033,f572])).
fof(f32973,plain,(
  ( ! [X107,X105,X108,X106,X104] : (~p(s(bool,happ(s(fun(bool,bool),X108),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X108),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X104),'const.option.SOME_1'(s(X104,X105))),s(bool,X106),s(fun(X104,bool),X107)),X108,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(X104,bool),X107),s(X104,X105)))) )),
  inference(superposition,[],[f532,f572])).
fof(f33247,plain,(
  ( ! [X57,X54,X56,X55,X53] : (s(bool,X57) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X53),'const.option.SOME_1'(s(X53,X54))),s(bool,X55),s(fun(X53,bool),X56))) | s(bool,'T_0') = s(bool,X57) | s(bool,'F_0') = s(bool,happ(s(fun(X53,bool),X56),s(X53,X54)))) )),
  inference(subsumption_resolution,[],[f32963,f114])).
fof(f32963,plain,(
  ( ! [X57,X54,X56,X55,X53] : (~p(s(bool,'T_0')) | s(bool,X57) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X53),'const.option.SOME_1'(s(X53,X54))),s(bool,X55),s(fun(X53,bool),X56))) | s(bool,'T_0') = s(bool,X57) | s(bool,'F_0') = s(bool,happ(s(fun(X53,bool),X56),s(X53,X54)))) )),
  inference(superposition,[],[f211,f572])).
fof(f32918,plain,(
  ( ! [X28,X26,X24,X27,X25] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X24),'const.option.SOME_1'(s(X24,X27))),s(bool,X28),s(fun(X24,bool),X25))) | s(bool,'F_0') = s(bool,happ(s(fun(X24,bool),sK7(sK6('const.option.SOME_1'(s(fun(X24,bool),X25)),fun(X24,bool)),X26,fun(X24,bool))),s(X24,X27))) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X24,bool),bool),X26),s(fun(X24,bool),X25)))) ) | $spl0),
  inference(superposition,[],[f572,f2781])).
fof(f33224,plain,(
  ( ! [X196,X194,X192,X195,X193] : (s(bool,'T_0') = s(bool,X196) | s(bool,X192) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X193),'const.option.SOME_1'(s(X193,X194))),s(bool,X192),s(fun(X193,bool),X195))) | s(bool,'F_0') = s(bool,happ(s(fun(X193,bool),X195),s(X193,X194))) | s(bool,X192) = s(bool,X196)) ) | $spl0),
  inference(forward_demodulation,[],[f32875,f901])).
fof(f32875,plain,(
  ( ! [X196,X194,X192,X195,X193] : (s(bool,X192) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X193),'const.option.SOME_1'(s(X193,X194))),s(bool,X192),s(fun(X193,bool),X195))) | s(bool,'F_0') = s(bool,happ(s(fun(X193,bool),X195),s(X193,X194))) | s(bool,X196) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X192) = s(bool,X196)) ) | $spl0),
  inference(superposition,[],[f572,f9397])).
fof(f32874,plain,(
  ( ! [X191,X189,X187,X190,X188] : (s(bool,X187) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X188),'const.option.SOME_1'(s(X188,X189))),s(bool,X187),s(fun(X188,bool),X190))) | s(bool,'F_0') = s(bool,happ(s(fun(X188,bool),X190),s(X188,X189))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X191))) | s(bool,X187) = s(bool,X191)) ) | $spl0),
  inference(superposition,[],[f572,f14030])).
fof(f32834,plain,(
  ( ! [X37,X35,X36,X34] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X34),X35),s(bool,X36),s(fun(X34,bool),X37))) | s(bool,'F_0') = s(bool,happ(s(fun(X34,bool),X37),s(X34,sK6(X35,X34)))) | s('type.option.option'(X34),'const.option.NONE_0') = s('type.option.option'(X34),X35)) )),
  inference(superposition,[],[f572,f148])).
fof(f32832,plain,(
  ( ! [X30,X28,X29] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),X28),s(bool,X29),s(fun(bool,bool),X30))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X30),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK6(X28,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X28)) )),
  inference(superposition,[],[f572,f458])).
fof(f32828,plain,(
  ( ! [X14,X15,X16] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),X14),s(bool,X15),s(fun(bool,bool),X16))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X16),s(bool,'T_0'))) | s(bool,'F_0') = s(bool,sK6(X14,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X14)) ) | $spl0),
  inference(superposition,[],[f572,f1766])).
fof(f32823,plain,(
  ( ! [X356,X358,X357] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))),s(bool,X357),s(fun('type.option.option'(bool),bool),X358))) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X358),s('type.option.option'(bool),X356))) | s(bool,'T_0') = s(bool,sK6(X356,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X356)) )),
  inference(superposition,[],[f572,f458])).
fof(f32822,plain,(
  ( ! [X354,X353,X355] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))),s(bool,X354),s(fun('type.option.option'(bool),bool),X355))) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X355),s('type.option.option'(bool),X353))) | s(bool,'F_0') = s(bool,sK6(X353,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X353)) ) | $spl0),
  inference(superposition,[],[f572,f1766])).
fof(f32821,plain,(
  ( ! [X350,X352,X349,X351] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'('type.option.option'(X349)),'const.option.SOME_1'(s('type.option.option'(X349),X350))),s(bool,X351),s(fun('type.option.option'(X349),bool),X352))) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(X349),bool),X352),s('type.option.option'(X349),'const.option.SOME_1'(s(X349,sK6(X350,X349)))))) | s('type.option.option'(X349),'const.option.NONE_0') = s('type.option.option'(X349),X350)) )),
  inference(superposition,[],[f572,f148])).
fof(f33215,plain,(
  ( ! [X346,X347,X348] : (s(bool,'T_0') = s(bool,X346) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X346))))),s(bool,X347),s(fun('type.option.option'(bool),bool),X348))) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X348),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))) ) | $spl0),
  inference(forward_demodulation,[],[f32820,f901])).
fof(f32820,plain,(
  ( ! [X346,X347,X348] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X346))))),s(bool,X347),s(fun('type.option.option'(bool),bool),X348))) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X348),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s(bool,X346) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f572,f8984])).
fof(f32819,plain,(
  ( ! [X344,X343,X345] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X343))),s(bool,X344),s(fun('type.option.option'(bool),bool),X345))) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X345),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s(bool,'T_0') = s(bool,sK6(X343,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X343)) )),
  inference(superposition,[],[f572,f458])).
fof(f32818,plain,(
  ( ! [X341,X339,X340,X342] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X339))))),s(bool,X340),s(fun('type.option.option'(bool),bool),X341))) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X341),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s(bool,X339) = s(bool,X342) | s(bool,'F_0') = s(bool,X342)) ) | $spl0),
  inference(superposition,[],[f572,f3902])).
fof(f32816,plain,(
  ( ! [X333,X335,X332,X334] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X332))))),s(bool,X333),s(fun('type.option.option'(bool),bool),X334))) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X334),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) | s(bool,X332) = s(bool,X335) | s(bool,'T_0') = s(bool,X335)) ) | $spl0),
  inference(superposition,[],[f572,f14030])).
fof(f32815,plain,(
  ( ! [X329,X331,X330] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X329))),s(bool,X330),s(fun('type.option.option'(bool),bool),X331))) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X331),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) | s(bool,'F_0') = s(bool,sK6(X329,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X329)) ) | $spl0),
  inference(superposition,[],[f572,f1766])).
fof(f33212,plain,(
  ( ! [X325,X323,X324] : (s(bool,'T_0') = s(bool,X323) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))),s(bool,X324),s(fun('type.option.option'(bool),bool),X325))) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X325),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X323)))))) ) | $spl0),
  inference(forward_demodulation,[],[f32813,f901])).
fof(f32813,plain,(
  ( ! [X325,X323,X324] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))),s(bool,X324),s(fun('type.option.option'(bool),bool),X325))) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X325),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X323))))) | s(bool,X323) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f572,f8984])).
fof(f32812,plain,(
  ( ! [X321,X320,X322,X319] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))),s(bool,X320),s(fun('type.option.option'(bool),bool),X321))) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X321),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X319))))) | s(bool,X319) = s(bool,X322) | s(bool,'F_0') = s(bool,X322)) ) | $spl0),
  inference(superposition,[],[f572,f3902])).
fof(f32811,plain,(
  ( ! [X315,X316,X318,X317] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))),s(bool,X316),s(fun('type.option.option'(bool),bool),X317))) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X317),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X315))))) | s(bool,X315) = s(bool,X318) | s(bool,'T_0') = s(bool,X318)) ) | $spl0),
  inference(superposition,[],[f572,f14030])).
fof(f32810,plain,(
  ( ! [X313,X312,X314] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s(bool,X313),s(fun(bool,bool),X314))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X314),s(bool,sK6(X312,bool)))) | s('type.option.option'(bool),X312) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X312)) )),
  inference(superposition,[],[f572,f458])).
fof(f32809,plain,(
  ( ! [X310,X309,X311] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s(bool,X310),s(fun(bool,bool),X311))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X311),s(bool,sK6(X309,bool)))) | s('type.option.option'(bool),X309) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X309)) ) | $spl0),
  inference(superposition,[],[f572,f1766])).
fof(f33210,plain,(
  ( ! [X304,X303,X305] : (s(bool,'F_0') = s(bool,X303) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X305),s(bool,'T_0'))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X303))),s(bool,X304),s(fun(bool,bool),X305)))) ) | $spl0),
  inference(forward_demodulation,[],[f33209,f901])).
fof(f33209,plain,(
  ( ! [X304,X303,X305] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X305),s(bool,'T_0'))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X303))),s(bool,X304),s(fun(bool,bool),X305))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X303)),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f32807,f901])).
fof(f32807,plain,(
  ( ! [X304,X303,X305] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X303))),s(bool,X304),s(fun(bool,bool),X305))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X305),s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X303)),bool))) ) | $spl0),
  inference(superposition,[],[f572,f7724])).
fof(f33208,plain,(
  ( ! [X300,X302,X301,X299] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X301),s(bool,'T_0'))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X299))),s(bool,X300),s(fun(bool,bool),X301))) | s(bool,X299) = s(bool,X302) | s(bool,'T_0') = s(bool,X302)) ) | $spl0),
  inference(forward_demodulation,[],[f32806,f901])).
fof(f32806,plain,(
  ( ! [X300,X302,X301,X299] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X299))),s(bool,X300),s(fun(bool,bool),X301))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X301),s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)))) | s(bool,X299) = s(bool,X302) | s(bool,'T_0') = s(bool,X302)) ) | $spl0),
  inference(superposition,[],[f572,f9397])).
fof(f33207,plain,(
  ( ! [X296,X298,X297] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X298),s(bool,'T_0'))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X296))),s(bool,X297),s(fun(bool,bool),X298))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X296)))) ) | $spl0),
  inference(forward_demodulation,[],[f32805,f901])).
fof(f32805,plain,(
  ( ! [X296,X298,X297] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X296))),s(bool,X297),s(fun(bool,bool),X298))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X298),s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X296)))) ) | $spl0),
  inference(superposition,[],[f572,f8984])).
fof(f32794,plain,(
  ( ! [X261,X257,X259,X260,X258] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s(bool,X260),s(fun(bool,bool),X261))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X261),s(bool,happ(s(fun(X257,bool),X258),s(X257,X259))))) | s(X257,X259) = s(X257,sK7(X259,X258,X257))) ) | $spl0),
  inference(superposition,[],[f572,f1756])).
fof(f32793,plain,(
  ( ! [X255,X253,X254,X256,X252] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s(bool,X255),s(fun(bool,bool),X256))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X256),s(bool,happ(s(fun(X252,bool),X253),s(X252,X254))))) | s(X252,X254) = s(X252,sK7(sK6('const.option.SOME_1'(s(X252,X254)),X252),X253,X252))) ) | $spl0),
  inference(superposition,[],[f572,f2781])).
fof(f32785,plain,(
  ( ! [X218,X216,X219,X217] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X216))),s(bool,X217),s(fun(bool,bool),X218))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X218),s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X219))) | s(bool,X216) = s(bool,X219)) ) | $spl0),
  inference(superposition,[],[f572,f3902])).
fof(f32784,plain,(
  ( ! [X212,X210,X215,X213,X211,X214] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X210))),s(bool,X211),s(fun(bool,bool),X212))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X212),s(bool,'F_0'))) | s(bool,X213) = s(bool,'const.bool.IN_2'(s(X214,X215),s(fun(X214,bool),'const.pred_set.EMPTY_0'))) | s(bool,X210) = s(bool,X213)) ) | $spl0),
  inference(superposition,[],[f572,f2976])).
fof(f32783,plain,(
  ( ! [X208,X206,X209,X207] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X206))),s(bool,X207),s(fun(bool,bool),X208))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X208),s(bool,'F_0'))) | s(bool,X206) = s(bool,X209) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X209)),bool))) ) | $spl0),
  inference(superposition,[],[f572,f1834])).
fof(f32781,plain,(
  ( ! [X198,X200,X199,X201] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X198))),s(bool,X199),s(fun(bool,bool),X200))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X200),s(bool,'F_0'))) | s(bool,X198) = s(bool,X201) | s(bool,'F_0') = s(bool,X201)) ) | $spl0),
  inference(superposition,[],[f572,f1632])).
fof(f32780,plain,(
  ( ! [X196,X197,X195] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X195))),s(bool,X196),s(fun(bool,bool),X197))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X197),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X195)) )),
  inference(superposition,[],[f572,f121])).
fof(f33185,plain,(
  ( ! [X185,X186,X184,X183] : (s(bool,'T_0') = s(bool,X186) | s(bool,X183) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X183))),s(bool,X184),s(fun(bool,bool),X185))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X185),s(bool,'T_0'))) | s(bool,X183) = s(bool,X186)) ) | $spl0),
  inference(forward_demodulation,[],[f32777,f901])).
fof(f32777,plain,(
  ( ! [X185,X186,X184,X183] : (s(bool,X183) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X183))),s(bool,X184),s(fun(bool,bool),X185))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X185),s(bool,'T_0'))) | s(bool,X186) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X183) = s(bool,X186)) ) | $spl0),
  inference(superposition,[],[f572,f9397])).
fof(f32776,plain,(
  ( ! [X182,X180,X181,X179] : (s(bool,X179) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X179))),s(bool,X180),s(fun(bool,bool),X181))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X181),s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X182))) | s(bool,X179) = s(bool,X182)) ) | $spl0),
  inference(superposition,[],[f572,f14030])).
fof(f32774,plain,(
  ( ! [X173,X171,X172,X170] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s(bool,X171),s(fun(bool,bool),X172))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X172),s(bool,X170))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X173))) | s(bool,X170) = s(bool,X173)) ) | $spl0),
  inference(superposition,[],[f572,f14030])).
fof(f32773,plain,(
  ( ! [X167,X169,X166,X168] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X167))),s(bool,X168),s(fun(bool,bool),X169))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X169),s(bool,X166))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X166))) | s(bool,'T_0') = s(bool,X167)) ) | $spl0),
  inference(superposition,[],[f572,f14030])).
fof(f32772,plain,(
  ( ! [X165,X163,X164,X162] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X163))),s(bool,X164),s(fun(bool,bool),X165))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X165),s(bool,X162))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X163))) | s(bool,'T_0') = s(bool,X162)) ) | $spl0),
  inference(superposition,[],[f572,f14030])).
fof(f33174,plain,(
  ( ! [X127,X128,X129] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s(bool,X128),s(fun(bool,bool),X129))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X129),s(bool,X127))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X127)))) ) | $spl0),
  inference(forward_demodulation,[],[f32763,f901])).
fof(f32763,plain,(
  ( ! [X127,X128,X129] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)))),s(bool,X128),s(fun(bool,bool),X129))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X129),s(bool,X127))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X127)))) ) | $spl0),
  inference(superposition,[],[f572,f8984])).
fof(f33171,plain,(
  ( ! [X123,X121,X122] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s(bool,X122),s(fun(bool,bool),X123))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X123),s(bool,X121))) | s(bool,'F_0') = s(bool,X121)) ) | $spl0),
  inference(forward_demodulation,[],[f32761,f901])).
fof(f32761,plain,(
  ( ! [X123,X121,X122] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)))),s(bool,X122),s(fun(bool,bool),X123))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X123),s(bool,X121))) | s(bool,'F_0') = s(bool,X121)) ) | $spl0),
  inference(superposition,[],[f572,f7478])).
fof(f32757,plain,(
  ( ! [X111,X109,X110,X108] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X109))),s(bool,X110),s(fun(bool,bool),X111))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X111),s(bool,X108))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X109))) | s(bool,'F_0') = s(bool,X108)) ) | $spl0),
  inference(superposition,[],[f572,f3902])).
fof(f32756,plain,(
  ( ! [X107,X105,X106,X104] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X105))),s(bool,X106),s(fun(bool,bool),X107))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X107),s(bool,X104))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X104))) | s(bool,'F_0') = s(bool,X105)) ) | $spl0),
  inference(superposition,[],[f572,f3902])).
fof(f32755,plain,(
  ( ! [X103,X101,X102,X100] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s(bool,X101),s(fun(bool,bool),X102))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X102),s(bool,X100))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X103))) | s(bool,X100) = s(bool,X103)) ) | $spl0),
  inference(superposition,[],[f572,f3902])).
fof(f32754,plain,(
  ( ! [X94,X99,X97,X95,X98,X96] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X95))),s(bool,X96),s(fun(bool,bool),X97))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X97),s(bool,X94))) | s(bool,X95) = s(bool,'const.bool.IN_2'(s(X98,X99),s(fun(X98,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X94)) ) | $spl0),
  inference(superposition,[],[f572,f2976])).
fof(f32753,plain,(
  ( ! [X92,X90,X88,X93,X91,X89] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X89))),s(bool,X90),s(fun(bool,bool),X91))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X91),s(bool,X88))) | s(bool,X88) = s(bool,'const.bool.IN_2'(s(X92,X93),s(fun(X92,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X89)) ) | $spl0),
  inference(superposition,[],[f572,f2976])).
fof(f32752,plain,(
  ( ! [X87,X85,X83,X86,X84,X82] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s(bool,X83),s(fun(bool,bool),X84))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X84),s(bool,X82))) | s(bool,X85) = s(bool,'const.bool.IN_2'(s(X86,X87),s(fun(X86,bool),'const.pred_set.EMPTY_0'))) | s(bool,X82) = s(bool,X85)) ) | $spl0),
  inference(superposition,[],[f572,f2976])).
fof(f32750,plain,(
  ( ! [X74,X72,X75,X73] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s(bool,X73),s(fun(bool,bool),X74))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X74),s(bool,X72))) | s(bool,X72) = s(bool,X75) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X75)),bool))) ) | $spl0),
  inference(superposition,[],[f572,f1834])).
fof(f32745,plain,(
  ( ! [X54,X52,X55,X53] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X53))),s(bool,X54),s(fun(bool,bool),X55))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X55),s(bool,X52))) | s(bool,'F_0') = s(bool,X53) | s(bool,'F_0') = s(bool,X52)) ) | $spl0),
  inference(superposition,[],[f572,f1632])).
fof(f32744,plain,(
  ( ! [X50,X48,X51,X49] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s(bool,X49),s(fun(bool,bool),X50))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X50),s(bool,X48))) | s(bool,X48) = s(bool,X51) | s(bool,'F_0') = s(bool,X51)) ) | $spl0),
  inference(superposition,[],[f572,f1632])).
fof(f32741,plain,(
  ( ! [X39,X37,X38,X36] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X37))),s(bool,X38),s(fun(bool,bool),X39))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X39),s(bool,X36))) | s(bool,'T_0') = s(bool,X37) | s(bool,'T_0') = s(bool,X36)) )),
  inference(superposition,[],[f572,f208])).
fof(f32740,plain,(
  ( ! [X35,X33,X34,X32] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s(bool,X33),s(fun(bool,bool),X34))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X34),s(bool,X32))) | s(bool,X32) = s(bool,X35) | s(bool,'T_0') = s(bool,X35)) )),
  inference(superposition,[],[f572,f208])).
fof(f32739,plain,(
  ( ! [X30,X31,X29] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s(bool,X30),s(fun(bool,bool),X31))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X31),s(bool,X29))) | s(bool,'T_0') = s(bool,X29)) )),
  inference(superposition,[],[f572,f121])).
fof(f32738,plain,(
  ( ! [X28,X26,X24,X27,X25] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X24),'const.option.SOME_1'(s(X24,X25))),s(bool,X27),s(fun(X24,bool),X28))) | s(bool,'F_0') = s(bool,happ(s(fun(X24,bool),X28),s(X24,sK7(sK6('const.option.SOME_1'(s(X24,X25)),X24),X26,X24)))) | s(bool,'F_0') = s(bool,happ(s(fun(X24,bool),X26),s(X24,X25)))) ) | $spl0),
  inference(superposition,[],[f572,f2781])).
fof(f32666,plain,(
  ( ! [X158,X156,X159,X157] : (s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X156),X157),s(bool,X158),s(fun(X156,bool),X159))) | s(fun(X156,bool),X159) = s(fun(X156,bool),sK7(sK6('const.option.SOME_1'(s(fun(X156,bool),X159)),fun(X156,bool)),happ(s(fun(bool,fun(fun(X156,bool),bool)),happ(s(fun('type.option.option'(X156),fun(bool,fun(fun(X156,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X156),X157))),s(bool,X158)),fun(X156,bool)))) ) | $spl0),
  inference(superposition,[],[f3093,f169])).
fof(f32626,plain,(
  ( ! [X263,X262] : (s(bool,'T_0') != s(bool,happ(s(fun('type.option.option'(bool),bool),X263),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s('type.option.option'(bool),X262) = s('type.option.option'(bool),sK7(sK6('const.option.SOME_1'(s('type.option.option'(bool),X262)),'type.option.option'(bool)),X263,'type.option.option'(bool))) | s(bool,'T_0') = s(bool,sK6(X262,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X262)) ) | $spl0),
  inference(superposition,[],[f3093,f458])).
fof(f32625,plain,(
  ( ! [X261,X260] : (s(bool,'T_0') != s(bool,happ(s(fun('type.option.option'(bool),bool),X261),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) | s('type.option.option'(bool),X260) = s('type.option.option'(bool),sK7(sK6('const.option.SOME_1'(s('type.option.option'(bool),X260)),'type.option.option'(bool)),X261,'type.option.option'(bool))) | s(bool,'F_0') = s(bool,sK6(X260,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X260)) ) | $spl0),
  inference(superposition,[],[f3093,f1766])).
fof(f32624,plain,(
  ( ! [X257,X259,X258] : (s(bool,'T_0') != s(bool,happ(s(fun('type.option.option'(X257),bool),X259),s('type.option.option'(X257),X258))) | s('type.option.option'(X257),'const.option.SOME_1'(s(X257,sK6(X258,X257)))) = s('type.option.option'(X257),sK7(sK6('const.option.SOME_1'(s('type.option.option'(X257),'const.option.SOME_1'(s(X257,sK6(X258,X257))))),'type.option.option'(X257)),X259,'type.option.option'(X257))) | s('type.option.option'(X257),'const.option.NONE_0') = s('type.option.option'(X257),X258)) ) | $spl0),
  inference(superposition,[],[f3093,f148])).
fof(f32726,plain,(
  ( ! [X255,X256] : (s(bool,'T_0') = s(bool,X255) | s(bool,'T_0') != s(bool,happ(s(fun('type.option.option'(bool),bool),X256),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X255))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK7(sK6('const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))),'type.option.option'(bool)),X256,'type.option.option'(bool)))) ) | $spl0),
  inference(forward_demodulation,[],[f32623,f901])).
fof(f32623,plain,(
  ( ! [X255,X256] : (s(bool,'T_0') != s(bool,happ(s(fun('type.option.option'(bool),bool),X256),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X255))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK7(sK6('const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))),'type.option.option'(bool)),X256,'type.option.option'(bool))) | s(bool,X255) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f3093,f8984])).
fof(f32622,plain,(
  ( ! [X253,X254] : (s(bool,'T_0') != s(bool,happ(s(fun('type.option.option'(bool),bool),X254),s('type.option.option'(bool),X253))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK7(sK6('const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))),'type.option.option'(bool)),X254,'type.option.option'(bool))) | s(bool,'T_0') = s(bool,sK6(X253,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X253)) ) | $spl0),
  inference(superposition,[],[f3093,f458])).
fof(f32621,plain,(
  ( ! [X251,X252,X250] : (s(bool,'T_0') != s(bool,happ(s(fun('type.option.option'(bool),bool),X251),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X250))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK7(sK6('const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))),'type.option.option'(bool)),X251,'type.option.option'(bool))) | s(bool,X250) = s(bool,X252) | s(bool,'F_0') = s(bool,X252)) ) | $spl0),
  inference(superposition,[],[f3093,f3902])).
fof(f32619,plain,(
  ( ! [X246,X247,X245] : (s(bool,'T_0') != s(bool,happ(s(fun('type.option.option'(bool),bool),X246),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X245))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),sK7(sK6('const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0')))),'type.option.option'(bool)),X246,'type.option.option'(bool))) | s(bool,X245) = s(bool,X247) | s(bool,'T_0') = s(bool,X247)) ) | $spl0),
  inference(superposition,[],[f3093,f14030])).
fof(f32618,plain,(
  ( ! [X243,X244] : (s(bool,'T_0') != s(bool,happ(s(fun('type.option.option'(bool),bool),X244),s('type.option.option'(bool),X243))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),sK7(sK6('const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0')))),'type.option.option'(bool)),X244,'type.option.option'(bool))) | s(bool,'F_0') = s(bool,sK6(X243,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X243)) ) | $spl0),
  inference(superposition,[],[f3093,f1766])).
fof(f32723,plain,(
  ( ! [X239,X240] : (s(bool,'T_0') = s(bool,X239) | s(bool,'T_0') != s(bool,happ(s(fun('type.option.option'(bool),bool),X240),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X239))) = s('type.option.option'(bool),sK7(sK6('const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X239)))),'type.option.option'(bool)),X240,'type.option.option'(bool)))) ) | $spl0),
  inference(forward_demodulation,[],[f32616,f901])).
fof(f32616,plain,(
  ( ! [X239,X240] : (s(bool,'T_0') != s(bool,happ(s(fun('type.option.option'(bool),bool),X240),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X239))) = s('type.option.option'(bool),sK7(sK6('const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X239)))),'type.option.option'(bool)),X240,'type.option.option'(bool))) | s(bool,X239) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f3093,f8984])).
fof(f32615,plain,(
  ( ! [X237,X238,X236] : (s(bool,'T_0') != s(bool,happ(s(fun('type.option.option'(bool),bool),X237),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X236))) = s('type.option.option'(bool),sK7(sK6('const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X236)))),'type.option.option'(bool)),X237,'type.option.option'(bool))) | s(bool,X236) = s(bool,X238) | s(bool,'F_0') = s(bool,X238)) ) | $spl0),
  inference(superposition,[],[f3093,f3902])).
fof(f32614,plain,(
  ( ! [X235,X233,X234] : (s(bool,'T_0') != s(bool,happ(s(fun('type.option.option'(bool),bool),X234),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X233))) = s('type.option.option'(bool),sK7(sK6('const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X233)))),'type.option.option'(bool)),X234,'type.option.option'(bool))) | s(bool,X233) = s(bool,X235) | s(bool,'T_0') = s(bool,X235)) ) | $spl0),
  inference(superposition,[],[f3093,f14030])).
fof(f32613,plain,(
  ( ! [X231,X232] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X232),s(bool,'T_0'))) | s(bool,sK6(X231,bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,sK6(X231,bool))),bool),X232,bool)) | s('type.option.option'(bool),X231) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X231)) ) | $spl0),
  inference(superposition,[],[f3093,f458])).
fof(f32612,plain,(
  ( ! [X229,X230] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X230),s(bool,'F_0'))) | s(bool,sK6(X229,bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,sK6(X229,bool))),bool),X230,bool)) | s('type.option.option'(bool),X229) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X229)) ) | $spl0),
  inference(superposition,[],[f3093,f1766])).
fof(f32597,plain,(
  ( ! [X194,X192,X195,X193] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X195),s(bool,'F_0'))) | s(bool,happ(s(fun(X192,bool),X193),s(X192,X194))) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,happ(s(fun(X192,bool),X193),s(X192,X194)))),bool),X195,bool)) | s(X192,X194) = s(X192,sK7(X194,X193,X192))) ) | $spl0),
  inference(superposition,[],[f3093,f1756])).
fof(f32596,plain,(
  ( ! [X191,X189,X190,X188] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X191),s(bool,'F_0'))) | s(bool,happ(s(fun(X188,bool),X189),s(X188,X190))) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,happ(s(fun(X188,bool),X189),s(X188,X190)))),bool),X191,bool)) | s(X188,X190) = s(X188,sK7(sK6('const.option.SOME_1'(s(X188,X190)),X188),X189,X188))) ) | $spl0),
  inference(superposition,[],[f3093,f2781])).
fof(f32589,plain,(
  ( ! [X167,X165,X166] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X166),s(bool,X165))) | s(bool,'F_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'F_0')),bool),X166,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X167))) | s(bool,X165) = s(bool,X167)) ) | $spl0),
  inference(superposition,[],[f3093,f3902])).
fof(f32588,plain,(
  ( ! [X163,X161,X164,X162,X160] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X161),s(bool,X160))) | s(bool,'F_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'F_0')),bool),X161,bool)) | s(bool,X162) = s(bool,'const.bool.IN_2'(s(X163,X164),s(fun(X163,bool),'const.pred_set.EMPTY_0'))) | s(bool,X160) = s(bool,X162)) ) | $spl0),
  inference(superposition,[],[f3093,f2976])).
fof(f32587,plain,(
  ( ! [X158,X159,X157] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X158),s(bool,X157))) | s(bool,'F_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'F_0')),bool),X158,bool)) | s(bool,X157) = s(bool,X159) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X159)),bool))) ) | $spl0),
  inference(superposition,[],[f3093,f1834])).
fof(f32697,plain,(
  ( ! [X142,X140,X141] : (s(bool,'T_0') = s(bool,X142) | s(bool,X140) != s(bool,happ(s(fun(bool,bool),X141),s(bool,X140))) | s(bool,'T_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X141,bool)) | s(bool,X140) = s(bool,X142)) ) | $spl0),
  inference(forward_demodulation,[],[f32581,f901])).
fof(f32581,plain,(
  ( ! [X142,X140,X141] : (s(bool,X140) != s(bool,happ(s(fun(bool,bool),X141),s(bool,X140))) | s(bool,'T_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X141,bool)) | s(bool,X142) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X140) = s(bool,X142)) ) | $spl0),
  inference(superposition,[],[f3093,f9397])).
fof(f32580,plain,(
  ( ! [X138,X139,X137] : (s(bool,X137) != s(bool,happ(s(fun(bool,bool),X138),s(bool,X137))) | s(bool,'T_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X138,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X139))) | s(bool,X137) = s(bool,X139)) ) | $spl0),
  inference(superposition,[],[f3093,f14030])).
fof(f32578,plain,(
  ( ! [X132,X130,X131] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X131),s(bool,'T_0'))) | s(bool,X130) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X130)),bool),X131,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X132))) | s(bool,X130) = s(bool,X132)) ) | $spl0),
  inference(superposition,[],[f3093,f14030])).
fof(f32577,plain,(
  ( ! [X127,X128,X129] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X129),s(bool,X128))) | s(bool,X127) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X127)),bool),X129,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X127))) | s(bool,'T_0') = s(bool,X128)) ) | $spl0),
  inference(superposition,[],[f3093,f14030])).
fof(f32576,plain,(
  ( ! [X125,X126,X124] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X126),s(bool,X125))) | s(bool,X124) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X124)),bool),X126,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X125))) | s(bool,'T_0') = s(bool,X124)) ) | $spl0),
  inference(superposition,[],[f3093,f14030])).
fof(f32686,plain,(
  ( ! [X99,X98] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X99),s(bool,'T_0'))) | s(bool,X98) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X98)),bool),X99,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X98)))) ) | $spl0),
  inference(forward_demodulation,[],[f32567,f901])).
fof(f32567,plain,(
  ( ! [X99,X98] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X99),s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)))) | s(bool,X98) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X98)),bool),X99,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X98)))) ) | $spl0),
  inference(superposition,[],[f3093,f8984])).
fof(f32561,plain,(
  ( ! [X87,X85,X86] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X87),s(bool,X86))) | s(bool,X85) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X85)),bool),X87,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X86))) | s(bool,'F_0') = s(bool,X85)) ) | $spl0),
  inference(superposition,[],[f3093,f3902])).
fof(f32560,plain,(
  ( ! [X83,X84,X82] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X84),s(bool,X83))) | s(bool,X82) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X82)),bool),X84,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X82))) | s(bool,'F_0') = s(bool,X83)) ) | $spl0),
  inference(superposition,[],[f3093,f3902])).
fof(f32559,plain,(
  ( ! [X80,X81,X79] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X80),s(bool,'F_0'))) | s(bool,X79) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X79)),bool),X80,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X81))) | s(bool,X79) = s(bool,X81)) ) | $spl0),
  inference(superposition,[],[f3093,f3902])).
fof(f32558,plain,(
  ( ! [X78,X76,X74,X77,X75] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X76),s(bool,X75))) | s(bool,X74) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X74)),bool),X76,bool)) | s(bool,X75) = s(bool,'const.bool.IN_2'(s(X77,X78),s(fun(X77,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X74)) ) | $spl0),
  inference(superposition,[],[f3093,f2976])).
fof(f32557,plain,(
  ( ! [X70,X72,X71,X69,X73] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X71),s(bool,X70))) | s(bool,X69) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X69)),bool),X71,bool)) | s(bool,X69) = s(bool,'const.bool.IN_2'(s(X72,X73),s(fun(X72,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X70)) ) | $spl0),
  inference(superposition,[],[f3093,f2976])).
fof(f32556,plain,(
  ( ! [X68,X66,X64,X67,X65] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X65),s(bool,'F_0'))) | s(bool,X64) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X64)),bool),X65,bool)) | s(bool,X66) = s(bool,'const.bool.IN_2'(s(X67,X68),s(fun(X67,bool),'const.pred_set.EMPTY_0'))) | s(bool,X64) = s(bool,X66)) ) | $spl0),
  inference(superposition,[],[f3093,f2976])).
fof(f32554,plain,(
  ( ! [X57,X58,X56] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X57),s(bool,'F_0'))) | s(bool,X56) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X56)),bool),X57,bool)) | s(bool,X56) = s(bool,X58) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X58)),bool))) ) | $spl0),
  inference(superposition,[],[f3093,f1834])).
fof(f32549,plain,(
  ( ! [X43,X41,X42] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X43),s(bool,X42))) | s(bool,X41) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X41)),bool),X43,bool)) | s(bool,'F_0') = s(bool,X42) | s(bool,'F_0') = s(bool,X41)) ) | $spl0),
  inference(superposition,[],[f3093,f1632])).
fof(f32545,plain,(
  ( ! [X30,X31,X29] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X31),s(bool,X30))) | s(bool,X29) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X29)),bool),X31,bool)) | s(bool,'T_0') = s(bool,X30) | s(bool,'T_0') = s(bool,X29)) ) | $spl0),
  inference(superposition,[],[f3093,f208])).
fof(f32544,plain,(
  ( ! [X28,X26,X27] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X27),s(bool,'T_0'))) | s(bool,X26) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X26)),bool),X27,bool)) | s(bool,X26) = s(bool,X28) | s(bool,'T_0') = s(bool,X28)) ) | $spl0),
  inference(superposition,[],[f3093,f208])).
fof(f32542,plain,(
  ( ! [X23,X21,X22,X20] : (s(bool,'T_0') != s(bool,happ(s(fun(X20,bool),X23),s(X20,X21))) | s(X20,sK7(sK6('const.option.SOME_1'(s(X20,X21)),X20),X22,X20)) = s(X20,sK7(sK6('const.option.SOME_1'(s(X20,sK7(sK6('const.option.SOME_1'(s(X20,X21)),X20),X22,X20))),X20),X23,X20)) | s(bool,'F_0') = s(bool,happ(s(fun(X20,bool),X22),s(X20,X21)))) ) | $spl0),
  inference(superposition,[],[f3093,f2781])).
fof(f32537,plain,(
  ( ! [X23,X21,X22,X20] : (s(bool,'T_0') != s(bool,happ(s(fun(X20,bool),X21),s(X20,X23))) | s(X20,X23) = s(X20,sK7(sK6('const.option.SOME_1'(s(X20,X23)),X20),sK7(sK6('const.option.SOME_1'(s(fun(X20,bool),X21)),fun(X20,bool)),X22,fun(X20,bool)),X20)) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X20,bool),bool),X22),s(fun(X20,bool),X21)))) ) | $spl0),
  inference(superposition,[],[f3093,f2781])).
fof(f32536,plain,(
  ( ! [X19,X17,X18] : (s(bool,'T_0') != s(bool,happ(s(fun(X17,bool),X18),s(X17,X19))) | s(X17,X19) = s(X17,sK7(sK6('const.option.SOME_1'(s(X17,X19)),X17),sK6('const.option.SOME_1'(s(fun(X17,bool),X18)),fun(X17,bool)),X17))) ) | $spl0),
  inference(superposition,[],[f3093,f901])).
fof(f32535,plain,(
  ( ! [X14,X12,X15,X13,X11,X16] : (s(bool,'T_0') != s(bool,happ(s(fun(X11,bool),'const.option.option_CASE_3'(s('type.option.option'(X12),X13),s(fun(X11,bool),X14),s(fun(X12,fun(X11,bool)),X15))),s(X11,X16))) | s(X11,X16) = s(X11,sK7(sK6('const.option.SOME_1'(s(X11,X16)),X11),happ(s(fun(fun(X12,fun(X11,bool)),fun(X11,bool)),happ(s(fun(fun(X11,bool),fun(fun(X12,fun(X11,bool)),fun(X11,bool))),happ(s(fun('type.option.option'(X12),fun(fun(X11,bool),fun(fun(X12,fun(X11,bool)),fun(X11,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X12),X13))),s(fun(X11,bool),X14))),s(fun(X12,fun(X11,bool)),X15)),X11))) ) | $spl0),
  inference(superposition,[],[f3093,f169])).
fof(f32534,plain,(
  ( ! [X6,X10,X8,X7,X5,X9] : (s(bool,'T_0') != s(bool,happ(s(fun(X5,bool),happ(s(fun(X6,fun(X5,bool)),X9),s(X6,X7))),s(X5,X10))) | s(X5,X10) = s(X5,sK7(sK6('const.option.SOME_1'(s(X5,X10)),X5),'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(fun(X5,bool),X8),s(fun(X6,fun(X5,bool)),X9)),X5))) ) | $spl0),
  inference(superposition,[],[f3093,f168])).
fof(f32533,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') != s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))) | s(X0,X4) = s(X0,sK7(sK6('const.option.SOME_1'(s(X0,X4)),X0),'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(fun(X0,bool),X2),s(fun(X1,fun(X0,bool)),X3)),X0))) ) | $spl0),
  inference(superposition,[],[f3093,f166])).
fof(f32368,plain,(
  ( ! [X30,X28,X26,X29,X27] : (s(X27,f(s(bool,X26))) != s(X27,g(s(bool,X26))) | s(fun(bool,X27),X28) = s(fun(bool,X27),X29) | s(bool,'T_0') = s(bool,sK8(X28,X29,X27,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X30))) | s(bool,X26) = s(bool,X30)) ) | $spl0),
  inference(superposition,[],[f769,f3902])).
fof(f32367,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20] : (s(X20,f(s(bool,X19))) != s(X20,g(s(bool,X19))) | s(fun(bool,X20),X21) = s(fun(bool,X20),X22) | s(bool,'T_0') = s(bool,sK8(X21,X22,X20,bool)) | s(bool,X23) = s(bool,'const.bool.IN_2'(s(X24,X25),s(fun(X24,bool),'const.pred_set.EMPTY_0'))) | s(bool,X19) = s(bool,X23)) ) | $spl0),
  inference(superposition,[],[f769,f2976])).
fof(f32366,plain,(
  ( ! [X14,X17,X15,X18,X16] : (s(X15,f(s(bool,X14))) != s(X15,g(s(bool,X14))) | s(fun(bool,X15),X16) = s(fun(bool,X15),X17) | s(bool,'T_0') = s(bool,sK8(X16,X17,X15,bool)) | s(bool,X14) = s(bool,X18) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X18)),bool))) ) | $spl0),
  inference(superposition,[],[f769,f1834])).
fof(f32364,plain,(
  ( ! [X6,X4,X8,X7,X5] : (s(X5,f(s(bool,X4))) != s(X5,g(s(bool,X4))) | s(fun(bool,X5),X6) = s(fun(bool,X5),X7) | s(bool,'T_0') = s(bool,sK8(X6,X7,X5,bool)) | s(bool,X4) = s(bool,X8) | s(bool,'F_0') = s(bool,X8)) ) | $spl0),
  inference(superposition,[],[f769,f1632])).
fof(f32098,plain,(
  ( ! [X629,X627,X628,X626] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X629),s(bool,'F_0'))) | s(bool,happ(s(fun(X626,bool),X627),s(X626,X628))) = s(bool,sK7(happ(s(fun(X626,bool),X627),s(X626,X628)),X629,bool)) | s(X626,X628) = s(X626,sK7(sK6('const.option.SOME_1'(s(X626,X628)),X626),X627,X626))) ) | $spl0),
  inference(superposition,[],[f2789,f2781])).
fof(f32097,plain,(
  ( ! [X625,X623,X624,X622] : (~p(s(bool,happ(s(fun(bool,bool),X625),s(bool,'F_0')))) | s(bool,sK7(happ(s(fun(X622,bool),X623),s(X622,X624)),X625,bool)) = s(bool,sK7(sK7(happ(s(fun(X622,bool),X623),s(X622,X624)),X625,bool),X625,bool)) | s(X622,X624) = s(X622,sK7(sK6('const.option.SOME_1'(s(X622,X624)),X622),X623,X622))) ) | $spl0),
  inference(superposition,[],[f2788,f2781])).
fof(f32096,plain,(
  ( ! [X621,X619,X620,X618] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X621),s(bool,'F_0'))) | s(bool,happ(s(fun(X618,bool),X619),s(X618,X620))) = s(bool,sK7(happ(s(fun(X618,bool),X619),s(X618,X620)),X621,bool)) | s(X618,X620) = s(X618,sK7(sK6('const.option.SOME_1'(s(X618,X620)),X618),X619,X618))) ) | $spl0),
  inference(superposition,[],[f1756,f2781])).
fof(f32094,plain,(
  ( ! [X613,X611,X612,X614] : (~p(s(bool,happ(s(fun(bool,bool),X614),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X614),s(bool,sK7(happ(s(fun(X611,bool),X612),s(X611,X613)),X614,bool)))) | s(X611,X613) = s(X611,sK7(sK6('const.option.SOME_1'(s(X611,X613)),X611),X612,X611))) ) | $spl0),
  inference(superposition,[],[f535,f2781])).
fof(f32093,plain,(
  ( ! [X609,X607,X608,X610] : (s('type.option.option'(bool),X610) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,sK6(X610,bool)) = s(bool,happ(s(fun(X607,bool),X608),s(X607,X609))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X610) | s(X607,X609) = s(X607,sK7(sK6('const.option.SOME_1'(s(X607,X609)),X607),X608,X607))) ) | $spl0),
  inference(superposition,[],[f459,f2781])).
fof(f32092,plain,(
  ( ! [X606,X602,X605,X601,X603,X604] : (~p(s(bool,happ(s(fun(bool,bool),X604),s(bool,'F_0')))) | s(bool,happ(s(fun(X601,bool),X602),s(X601,X603))) = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X605),'const.option.NONE_0'),s(bool,happ(s(fun(X601,bool),X602),s(X601,X603))),s(fun(X605,bool),X606)),X604,bool)) | s(X601,X603) = s(X601,sK7(sK6('const.option.SOME_1'(s(X601,X603)),X601),X602,X601))) ) | $spl0),
  inference(superposition,[],[f447,f2781])).
fof(f32091,plain,(
  ( ! [X600,X596,X598,X597,X599,X595] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X598))) | s(bool,happ(s(fun(X595,bool),X596),s(X595,X597))) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X599),'const.option.NONE_0'),s(bool,X598),s(fun(X599,bool),X600))) | s(X595,X597) = s(X595,sK7(sK6('const.option.SOME_1'(s(X595,X597)),X595),X596,X595))) ) | $spl0),
  inference(superposition,[],[f363,f2781])).
fof(f32090,plain,(
  ( ! [X592,X594,X590,X593,X589,X591] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X592))) | s(bool,X592) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X593),'const.option.NONE_0'),s(bool,happ(s(fun(X589,bool),X590),s(X589,X591))),s(fun(X593,bool),X594))) | s(X589,X591) = s(X589,sK7(sK6('const.option.SOME_1'(s(X589,X591)),X589),X590,X589))) ) | $spl0),
  inference(superposition,[],[f363,f2781])).
fof(f32082,plain,(
  ( ! [X553,X555,X556,X554] : (~p(s(bool,happ(s(fun(bool,bool),X556),s(bool,'F_0')))) | s(bool,happ(s(fun(X553,bool),X554),s(X553,X555))) = s(bool,sK7(happ(s(fun(X553,bool),X554),s(X553,X555)),X556,bool)) | s(X553,X555) = s(X553,sK7(sK6('const.option.SOME_1'(s(X553,X555)),X553),X554,X553))) ) | $spl0),
  inference(superposition,[],[f160,f2781])).
fof(f32081,plain,(
  ( ! [X549,X551,X552,X548,X550] : (~p(s(bool,happ(s(fun(bool,bool),X551),s(bool,'F_0')))) | p(s(bool,happ(s(fun(bool,bool),X551),s(bool,X552)))) | s(bool,X552) != s(bool,happ(s(fun(X548,bool),X549),s(X548,X550))) | s(X548,X550) = s(X548,sK7(sK6('const.option.SOME_1'(s(X548,X550)),X548),X549,X548))) ) | $spl0),
  inference(superposition,[],[f159,f2781])).
fof(f32079,plain,(
  ( ! [X540,X542,X541,X543] : (s(bool,'F_0') != s(bool,X543) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X543))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X540,bool),X541),s(X540,X542))))) | s(X540,X542) = s(X540,sK7(sK6('const.option.SOME_1'(s(X540,X542)),X540),X541,X540))) ) | $spl0),
  inference(superposition,[],[f158,f2781])).
fof(f32077,plain,(
  ( ! [X532,X534,X533,X535] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X535))) | s(bool,X535) = s(bool,happ(s(fun(X532,bool),X533),s(X532,X534))) | s(X532,X534) = s(X532,sK7(sK6('const.option.SOME_1'(s(X532,X534)),X532),X533,X532))) ) | $spl0),
  inference(superposition,[],[f157,f2781])).
fof(f32104,plain,(
  ( ! [X445,X443,X444,X446] : (s(bool,X446) = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X443,bool),X444),s(X443,X445)))),bool)) | s(bool,'T_0') = s(bool,X446) | s(X443,X445) = s(X443,sK7(sK6('const.option.SOME_1'(s(X443,X445)),X443),X444,X443))) ) | $spl0),
  inference(trivial_inequality_removal,[],[f32056])).
fof(f32056,plain,(
  ( ! [X445,X443,X444,X446] : (s(bool,'F_0') != s(bool,'F_0') | s(bool,X446) = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X443,bool),X444),s(X443,X445)))),bool)) | s(bool,'T_0') = s(bool,X446) | s(X443,X445) = s(X443,sK7(sK6('const.option.SOME_1'(s(X443,X445)),X443),X444,X443))) ) | $spl0),
  inference(superposition,[],[f14507,f2781])).
fof(f32041,plain,(
  ( ! [X383,X379,X380,X382,X384,X381] : (s(bool,'F_0') != s(bool,X382) | s(bool,happ(s(fun(X379,bool),X380),s(X379,X381))) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X383),'const.option.NONE_0'),s(bool,X382),s(fun(X383,bool),X384))) | s(X379,X381) = s(X379,sK7(sK6('const.option.SOME_1'(s(X379,X381)),X379),X380,X379))) ) | $spl0),
  inference(superposition,[],[f9763,f2781])).
fof(f32040,plain,(
  ( ! [X377,X374,X376,X378,X373,X375] : (s(bool,'F_0') != s(bool,X376) | s(bool,X376) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X377),'const.option.NONE_0'),s(bool,happ(s(fun(X373,bool),X374),s(X373,X375))),s(fun(X377,bool),X378))) | s(X373,X375) = s(X373,sK7(sK6('const.option.SOME_1'(s(X373,X375)),X373),X374,X373))) ) | $spl0),
  inference(superposition,[],[f9763,f2781])).
fof(f32108,plain,(
  ( ! [X300,X296,X298,X297,X299] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X299),'const.option.NONE_0'),s(bool,happ(s(fun(X296,bool),X297),s(X296,X298))),s(fun(X299,bool),X300))) | s(X296,X298) = s(X296,sK7(sK6('const.option.SOME_1'(s(X296,X298)),X296),X297,X296))) ) | $spl0),
  inference(trivial_inequality_removal,[],[f32018])).
fof(f32018,plain,(
  ( ! [X300,X296,X298,X297,X299] : (s(bool,'F_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X299),'const.option.NONE_0'),s(bool,happ(s(fun(X296,bool),X297),s(X296,X298))),s(fun(X299,bool),X300))) | s(X296,X298) = s(X296,sK7(sK6('const.option.SOME_1'(s(X296,X298)),X296),X297,X296))) ) | $spl0),
  inference(superposition,[],[f4508,f2781])).
fof(f32335,plain,(
  ( ! [X222,X220,X219,X223,X221,X224] : (s(bool,happ(s(fun(X219,bool),X220),s(X219,X221))) = s(bool,happ(s(fun(X222,bool),X223),s(X222,X224))) | s(X222,X224) = s(X222,sK7(X224,X223,X222)) | s(X219,X221) = s(X219,sK7(sK6('const.option.SOME_1'(s(X219,X221)),X219),X220,X219))) ) | $spl0),
  inference(subsumption_resolution,[],[f32002,f179])).
fof(f32002,plain,(
  ( ! [X222,X220,X219,X223,X221,X224] : (p(s(bool,'F_0')) | s(bool,happ(s(fun(X219,bool),X220),s(X219,X221))) = s(bool,happ(s(fun(X222,bool),X223),s(X222,X224))) | s(X222,X224) = s(X222,sK7(X224,X223,X222)) | s(X219,X221) = s(X219,sK7(sK6('const.option.SOME_1'(s(X219,X221)),X219),X220,X219))) ) | $spl0),
  inference(superposition,[],[f2790,f2781])).
fof(f32329,plain,(
  ( ! [X187,X185,X188,X186,X184] : (s(bool,X187) = s(bool,happ(s(fun(X184,bool),X185),s(X184,X186))) | s(bool,X187) = s(bool,X188) | s(bool,'F_0') = s(bool,X188) | s(X184,X186) = s(X184,sK7(sK6('const.option.SOME_1'(s(X184,X186)),X184),X185,X184))) ) | $spl0),
  inference(subsumption_resolution,[],[f31994,f179])).
fof(f31994,plain,(
  ( ! [X187,X185,X188,X186,X184] : (p(s(bool,'F_0')) | s(bool,X187) = s(bool,happ(s(fun(X184,bool),X185),s(X184,X186))) | s(bool,X187) = s(bool,X188) | s(bool,'F_0') = s(bool,X188) | s(X184,X186) = s(X184,sK7(sK6('const.option.SOME_1'(s(X184,X186)),X184),X185,X184))) ) | $spl0),
  inference(superposition,[],[f2416,f2781])).
fof(f32118,plain,(
  ( ! [X111,X114,X112,X113] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X114))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X111,bool),X112),s(X111,X113))))) | s(bool,'T_0') = s(bool,X114) | s(X111,X113) = s(X111,sK7(sK6('const.option.SOME_1'(s(X111,X113)),X111),X112,X111))) ) | $spl0),
  inference(trivial_inequality_removal,[],[f31978])).
fof(f31978,plain,(
  ( ! [X111,X114,X112,X113] : (s(bool,'F_0') != s(bool,'F_0') | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X114))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X111,bool),X112),s(X111,X113))))) | s(bool,'T_0') = s(bool,X114) | s(X111,X113) = s(X111,sK7(sK6('const.option.SOME_1'(s(X111,X113)),X111),X112,X111))) ) | $spl0),
  inference(superposition,[],[f404,f2781])).
fof(f32321,plain,(
  ( ! [X52,X50,X53,X51] : (p(s(bool,X53)) | s(bool,X53) = s(bool,happ(s(fun(X50,bool),X51),s(X50,X52))) | s(X50,X52) = s(X50,sK7(sK6('const.option.SOME_1'(s(X50,X52)),X50),X51,X50))) ) | $spl0),
  inference(subsumption_resolution,[],[f31963,f179])).
fof(f31963,plain,(
  ( ! [X52,X50,X53,X51] : (p(s(bool,'F_0')) | p(s(bool,X53)) | s(bool,X53) = s(bool,happ(s(fun(X50,bool),X51),s(X50,X52))) | s(X50,X52) = s(X50,sK7(sK6('const.option.SOME_1'(s(X50,X52)),X50),X51,X50))) ) | $spl0),
  inference(superposition,[],[f162,f2781])).
fof(f32320,plain,(
  ( ! [X26,X24,X25] : (~p(s(bool,happ(s(fun(X24,bool),X25),s(X24,X26)))) | s(X24,sK7(X26,X25,X24)) = s(X24,sK7(sK6('const.option.SOME_1'(s(X24,sK7(X26,X25,X24))),X24),X25,X24))) ) | $spl0),
  inference(subsumption_resolution,[],[f31954,f179])).
fof(f31954,plain,(
  ( ! [X26,X24,X25] : (p(s(bool,'F_0')) | ~p(s(bool,happ(s(fun(X24,bool),X25),s(X24,X26)))) | s(X24,sK7(X26,X25,X24)) = s(X24,sK7(sK6('const.option.SOME_1'(s(X24,sK7(X26,X25,X24))),X24),X25,X24))) ) | $spl0),
  inference(superposition,[],[f161,f2781])).
fof(f31945,plain,(
  ( ! [X569,X567,X568,X570] : (s('type.option.option'(X567),X568) != s('type.option.option'(X567),'const.option.SOME_1'(s(X567,X570))) | s(X567,X570) = s(X567,sK6(sK7(sK6('const.option.SOME_1'(s('type.option.option'(X567),X568)),'type.option.option'(X567)),X569,'type.option.option'(X567)),X567)) | s('type.option.option'(X567),'const.option.NONE_0') = s('type.option.option'(X567),sK7(sK6('const.option.SOME_1'(s('type.option.option'(X567),X568)),'type.option.option'(X567)),X569,'type.option.option'(X567))) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(X567),bool),X569),s('type.option.option'(X567),X568)))) ) | $spl0),
  inference(superposition,[],[f459,f2781])).
fof(f31939,plain,(
  ( ! [X542,X545,X543,X544] : (s(bool,'T_0') != s(bool,happ(s(fun(X542,bool),X543),s(X542,X545))) | s(X542,X545) = s(X542,sK7(X545,sK7(sK6('const.option.SOME_1'(s(fun(X542,bool),X543)),fun(X542,bool)),X544,fun(X542,bool)),X542)) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X542,bool),bool),X544),s(fun(X542,bool),X543)))) ) | $spl0),
  inference(superposition,[],[f2789,f2781])).
fof(f31938,plain,(
  ( ! [X540,X538,X541,X539] : (~p(s(bool,happ(s(fun(X538,bool),X539),s(X538,X541)))) | s(X538,sK7(X541,sK7(sK6('const.option.SOME_1'(s(fun(X538,bool),X539)),fun(X538,bool)),X540,fun(X538,bool)),X538)) = s(X538,sK7(sK7(X541,sK7(sK6('const.option.SOME_1'(s(fun(X538,bool),X539)),fun(X538,bool)),X540,fun(X538,bool)),X538),sK7(sK6('const.option.SOME_1'(s(fun(X538,bool),X539)),fun(X538,bool)),X540,fun(X538,bool)),X538)) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X538,bool),bool),X540),s(fun(X538,bool),X539)))) ) | $spl0),
  inference(superposition,[],[f2788,f2781])).
fof(f31937,plain,(
  ( ! [X536,X534,X537,X535] : (s(bool,'F_0') = s(bool,happ(s(fun(X534,bool),X535),s(X534,X537))) | s(X534,X537) = s(X534,sK7(X537,sK7(sK6('const.option.SOME_1'(s(fun(X534,bool),X535)),fun(X534,bool)),X536,fun(X534,bool)),X534)) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X534,bool),bool),X536),s(fun(X534,bool),X535)))) ) | $spl0),
  inference(superposition,[],[f1756,f2781])).
fof(f31936,plain,(
  ( ! [X532,X530,X533,X531] : (~p(s(bool,happ(s(fun(X530,bool),X531),s(X530,X533)))) | s(bool,'T_0') = s(bool,happ(s(fun(X530,bool),sK7(sK6('const.option.SOME_1'(s(fun(X530,bool),X531)),fun(X530,bool)),X532,fun(X530,bool))),s(X530,sK7(X533,sK7(sK6('const.option.SOME_1'(s(fun(X530,bool),X531)),fun(X530,bool)),X532,fun(X530,bool)),X530)))) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X530,bool),bool),X532),s(fun(X530,bool),X531)))) ) | $spl0),
  inference(superposition,[],[f535,f2781])).
fof(f31935,plain,(
  ( ! [X528,X524,X526,X529,X525,X527] : (~p(s(bool,happ(s(fun(X524,bool),X525),s(X524,X527)))) | s(X524,X527) = s(X524,sK7('const.option.option_CASE_3'(s('type.option.option'(X528),'const.option.NONE_0'),s(X524,X527),s(fun(X528,X524),X529)),sK7(sK6('const.option.SOME_1'(s(fun(X524,bool),X525)),fun(X524,bool)),X526,fun(X524,bool)),X524)) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X524,bool),bool),X526),s(fun(X524,bool),X525)))) ) | $spl0),
  inference(superposition,[],[f447,f2781])).
fof(f31933,plain,(
  ( ! [X516,X518,X517,X519] : (p(s(bool,happ(s(fun(X516,bool),X517),s(X516,sK7(X519,sK7(sK6('const.option.SOME_1'(s(fun(X516,bool),X517)),fun(X516,bool)),X518,fun(X516,bool)),X516))))) | ~p(s(bool,happ(s(fun(X516,bool),sK7(sK6('const.option.SOME_1'(s(fun(X516,bool),X517)),fun(X516,bool)),X518,fun(X516,bool))),s(X516,X519)))) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X516,bool),bool),X518),s(fun(X516,bool),X517)))) ) | $spl0),
  inference(superposition,[],[f161,f2781])).
fof(f31932,plain,(
  ( ! [X512,X514,X513,X515] : (~p(s(bool,happ(s(fun(X512,bool),X513),s(X512,X515)))) | s(X512,X515) = s(X512,sK7(X515,sK7(sK6('const.option.SOME_1'(s(fun(X512,bool),X513)),fun(X512,bool)),X514,fun(X512,bool)),X512)) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X512,bool),bool),X514),s(fun(X512,bool),X513)))) ) | $spl0),
  inference(superposition,[],[f160,f2781])).
fof(f31931,plain,(
  ( ! [X509,X511,X507,X508,X510] : (~p(s(bool,happ(s(fun(X507,bool),X508),s(X507,X510)))) | p(s(bool,happ(s(fun(X507,bool),sK7(sK6('const.option.SOME_1'(s(fun(X507,bool),X508)),fun(X507,bool)),X509,fun(X507,bool))),s(X507,X511)))) | s(X507,X510) != s(X507,X511) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X507,bool),bool),X509),s(fun(X507,bool),X508)))) ) | $spl0),
  inference(superposition,[],[f159,f2781])).
fof(f31930,plain,(
  ( ! [X505,X504,X506] : (~p(s(bool,happ(s(fun(bool,bool),X504),s(bool,'T_0')))) | s(bool,X506) = s(bool,sK7(X506,sK7(sK6('const.option.SOME_1'(s(fun(bool,bool),X504)),fun(bool,bool)),X505,fun(bool,bool)),bool)) | s(bool,'F_0') = s(bool,X506) | s(bool,'F_0') = s(bool,happ(s(fun(fun(bool,bool),bool),X505),s(fun(bool,bool),X504)))) ) | $spl0),
  inference(superposition,[],[f1761,f2781])).
fof(f31929,plain,(
  ( ! [X502,X501,X503] : (~p(s(bool,happ(s(fun(bool,bool),X501),s(bool,X503)))) | s(bool,'F_0') = s(bool,sK7('F_0',sK7(sK6('const.option.SOME_1'(s(fun(bool,bool),X501)),fun(bool,bool)),X502,fun(bool,bool)),bool)) | s(bool,'T_0') = s(bool,X503) | s(bool,'F_0') = s(bool,happ(s(fun(fun(bool,bool),bool),X502),s(fun(bool,bool),X501)))) ) | $spl0),
  inference(superposition,[],[f439,f2781])).
fof(f31928,plain,(
  ( ! [X499,X500,X498] : (~p(s(bool,happ(s(fun(bool,bool),X498),s(bool,'F_0')))) | s(bool,X500) = s(bool,sK7(X500,sK7(sK6('const.option.SOME_1'(s(fun(bool,bool),X498)),fun(bool,bool)),X499,fun(bool,bool)),bool)) | s(bool,'T_0') = s(bool,X500) | s(bool,'F_0') = s(bool,happ(s(fun(fun(bool,bool),bool),X499),s(fun(bool,bool),X498)))) ) | $spl0),
  inference(superposition,[],[f440,f2781])).
fof(f31927,plain,(
  ( ! [X496,X495,X497] : (~p(s(bool,happ(s(fun(bool,bool),X495),s(bool,X497)))) | p(s(bool,happ(s(fun(bool,bool),sK7(sK6('const.option.SOME_1'(s(fun(bool,bool),X495)),fun(bool,bool)),X496,fun(bool,bool))),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X497,sK7(sK6('const.option.SOME_1'(s(fun(bool,bool),X495)),fun(bool,bool)),X496,fun(bool,bool)),bool)) | s(bool,'F_0') = s(bool,happ(s(fun(fun(bool,bool),bool),X496),s(fun(bool,bool),X495)))) ) | $spl0),
  inference(superposition,[],[f532,f2781])).
fof(f31926,plain,(
  ( ! [X492,X494,X493] : (~p(s(bool,X492)) | s(bool,X494) != s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X492)),bool),X493,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X494))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X493),s(bool,X492)))) ) | $spl0),
  inference(superposition,[],[f29621,f2781])).
fof(f31925,plain,(
  ( ! [X490,X489,X491] : (s(bool,'T_0') != s(bool,X489) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X491))) | s(bool,X491) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X489)),bool),X490,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X490),s(bool,X489)))) ) | $spl0),
  inference(superposition,[],[f26480,f2781])).
fof(f31924,plain,(
  ( ! [X484,X486,X488,X485,X487] : (s(bool,X484) != s(bool,X486) | s(bool,'T_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X484)),bool),X485,bool)) | s(bool,X486) = s(bool,'const.bool.IN_2'(s(X487,X488),s(fun(X487,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X485),s(bool,X484)))) ) | $spl0),
  inference(superposition,[],[f23308,f2781])).
fof(f31918,plain,(
  ( ! [X461,X459,X460,X462] : (s(bool,X459) != s(bool,'const.bool.IN_2'(s(X461,X462),s(fun(X461,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X459)),bool),X460,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X460),s(bool,X459)))) ) | $spl0),
  inference(superposition,[],[f22550,f2781])).
fof(f31917,plain,(
  ( ! [X455,X457,X454,X456,X458] : (s(bool,'T_0') != s(bool,X454) | s(bool,X456) = s(bool,'const.bool.IN_2'(s(X457,X458),s(fun(X457,bool),'const.pred_set.EMPTY_0'))) | s(bool,X456) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X454)),bool),X455,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X455),s(bool,X454)))) ) | $spl0),
  inference(superposition,[],[f22072,f2781])).
fof(f31915,plain,(
  ( ! [X449,X450] : (p(s(bool,X449)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X449)),bool),X450,bool)))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X450),s(bool,X449)))) ) | $spl0),
  inference(superposition,[],[f17462,f2781])).
fof(f31914,plain,(
  ( ! [X447,X446,X448] : (~p(s(bool,X446)) | s(bool,X448) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X446)),bool),X447,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X448))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X447),s(bool,X446)))) ) | $spl0),
  inference(superposition,[],[f17344,f2781])).
fof(f31908,plain,(
  ( ! [X432,X434,X433] : (s(bool,'F_0') != s(bool,X432) | s(bool,X434) = s(bool,sK6('const.option.SOME_1'(s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X432)),bool),X433,bool))),bool)) | s(bool,'T_0') = s(bool,X434) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X433),s(bool,X432)))) ) | $spl0),
  inference(superposition,[],[f14507,f2781])).
fof(f31904,plain,(
  ( ! [X420,X422,X421] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X420))) | s(bool,X422) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X420)),bool),X421,bool)) | s(bool,'T_0') = s(bool,X422) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X421),s(bool,X420)))) ) | $spl0),
  inference(superposition,[],[f14030,f2781])).
fof(f31903,plain,(
  ( ! [X418,X417,X419] : (s(bool,'F_0') != s(bool,X417) | s(bool,X419) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X417)),bool),X418,bool)) | s(bool,'T_0') = s(bool,X419) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X418),s(bool,X417)))) ) | $spl0),
  inference(superposition,[],[f13980,f2781])).
fof(f31892,plain,(
  ( ! [X383,X385,X387,X384,X386] : (s(bool,X383) != s(bool,X385) | s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X383)),bool),X384,bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X386),'const.option.NONE_0'),s(bool,X385),s(fun(X386,bool),X387))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X384),s(bool,X383)))) ) | $spl0),
  inference(superposition,[],[f9763,f2781])).
fof(f31891,plain,(
  ( ! [X379,X380,X382,X378,X381] : (s(bool,X378) != s(bool,X380) | s(bool,X380) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X381),'const.option.NONE_0'),s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X378)),bool),X379,bool)),s(fun(X381,bool),X382))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X379),s(bool,X378)))) ) | $spl0),
  inference(superposition,[],[f9763,f2781])).
fof(f32294,plain,(
  ( ! [X358,X359] : (s(bool,'T_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X358)),bool),X359,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X358))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X359),s(bool,X358)))) ) | $spl0),
  inference(forward_demodulation,[],[f31883,f901])).
fof(f31883,plain,(
  ( ! [X358,X359] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X358))) | s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X358)),bool),X359,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X359),s(bool,X358)))) ) | $spl0),
  inference(superposition,[],[f8984,f2781])).
fof(f31873,plain,(
  ( ! [X337,X339,X336,X338] : (s(bool,'T_0') != s(bool,X336) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X338),'const.option.NONE_0'),s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X336)),bool),X337,bool)),s(fun(X338,bool),X339))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X337),s(bool,X336)))) ) | $spl0),
  inference(superposition,[],[f5098,f2781])).
fof(f31868,plain,(
  ( ! [X325,X327,X324,X326] : (s(bool,'F_0') != s(bool,X324) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X326),'const.option.NONE_0'),s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X324)),bool),X325,bool)),s(fun(X326,bool),X327))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X325),s(bool,X324)))) ) | $spl0),
  inference(superposition,[],[f4508,f2781])).
fof(f31867,plain,(
  ( ! [X321,X323,X322] : (s(bool,X321) != s(bool,sK6('const.option.SOME_1'(s(bool,X323)),bool)) | s(bool,'F_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X321)),bool),X322,bool)) | s(bool,'T_0') = s(bool,X323) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X322),s(bool,X321)))) ) | $spl0),
  inference(superposition,[],[f4477,f2781])).
fof(f31864,plain,(
  ( ! [X315,X314] : (s(bool,'F_0') != s(bool,X314) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X314)),bool),X315,bool))),bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X315),s(bool,X314)))) ) | $spl0),
  inference(superposition,[],[f3910,f2781])).
fof(f31860,plain,(
  ( ! [X302,X304,X303] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X302))) | s(bool,X304) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X302)),bool),X303,bool)) | s(bool,'F_0') = s(bool,X304) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X303),s(bool,X302)))) ) | $spl0),
  inference(superposition,[],[f3902,f2781])).
fof(f32273,plain,(
  ( ! [X292,X294,X293] : (s(bool,X292) != s(bool,X294) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X293),s(bool,X292))) | s(bool,X294) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X292)),bool),X293,bool))) ) | $spl0),
  inference(global_subsumption,[],[f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272])).
fof(f32272,plain,(
  ( ! [X292,X294,X293] : (s(bool,X292) != s(bool,X294) | s(bool,X294) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X292)),bool),X293,bool)) | s(bool,'F_0') = s(bool,X294) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X293),s(bool,X292)))) ) | $spl0),
  inference(forward_demodulation,[],[f31856,f901])).
fof(f31856,plain,(
  ( ! [X292,X294,X293] : (s(bool,X294) != s(bool,sK6('const.option.SOME_1'(s(bool,X292)),bool)) | s(bool,X294) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X292)),bool),X293,bool)) | s(bool,'F_0') = s(bool,X294) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X293),s(bool,X292)))) ) | $spl0),
  inference(superposition,[],[f3585,f2781])).
fof(f31855,plain,(
  ( ! [X290,X289,X291] : (s(bool,X289) != s(bool,sK6('const.option.SOME_1'(s(bool,X291)),bool)) | s(bool,X291) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X289)),bool),X290,bool)) | s(bool,'F_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X289)),bool),X290,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X290),s(bool,X289)))) ) | $spl0),
  inference(superposition,[],[f3585,f2781])).
fof(f31854,plain,(
  ( ! [X288,X287,X286] : (s(bool,'T_0') != s(bool,X286) | s(bool,X288) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X286)),bool),X287,bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X288)),bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X287),s(bool,X286)))) ) | $spl0),
  inference(superposition,[],[f3405,f2781])).
fof(f31849,plain,(
  ( ! [X261,X263,X265,X262,X264] : (p(s(bool,X261)) | s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X261)),bool),X262,bool)) = s(bool,happ(s(fun(X263,bool),X264),s(X263,X265))) | s(X263,X265) = s(X263,sK7(X265,X264,X263)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X262),s(bool,X261)))) ) | $spl0),
  inference(superposition,[],[f2790,f2781])).
fof(f31848,plain,(
  ( ! [X259,X260,X258] : (s(bool,'T_0') != s(bool,X258) | s(bool,X260) = s(bool,sK6('const.option.SOME_1'(s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X258)),bool),X259,bool))),bool)) | s(bool,'F_0') = s(bool,X260) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X259),s(bool,X258)))) ) | $spl0),
  inference(superposition,[],[f2660,f2781])).
fof(f31847,plain,(
  ( ! [X255,X257,X254,X256] : (s(bool,X254) != s(bool,X256) | s(bool,'F_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X254)),bool),X255,bool)) | s(bool,X256) = s(bool,X257) | s(bool,'F_0') = s(bool,X257) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X255),s(bool,X254)))) ) | $spl0),
  inference(superposition,[],[f2517,f2781])).
fof(f31846,plain,(
  ( ! [X253,X251,X252,X250] : (s(bool,X250) != s(bool,X252) | s(bool,'F_0') = s(bool,X252) | s(bool,X253) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X250)),bool),X251,bool)) | s(bool,'F_0') = s(bool,X253) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X251),s(bool,X250)))) ) | $spl0),
  inference(superposition,[],[f2517,f2781])).
fof(f31845,plain,(
  ( ! [X249,X248,X247] : (s(bool,X247) != s(bool,X249) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X249)),bool)) | s(bool,'F_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X247)),bool),X248,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X248),s(bool,X247)))) ) | $spl0),
  inference(superposition,[],[f2494,f2781])).
fof(f31844,plain,(
  ( ! [X246,X244,X245] : (s(bool,X244) != s(bool,X246) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X244)),bool),X245,bool))),bool)) | s(bool,'F_0') = s(bool,X246) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X245),s(bool,X244)))) ) | $spl0),
  inference(superposition,[],[f2494,f2781])).
fof(f31843,plain,(
  ( ! [X243,X241,X242] : (s(bool,X241) != s(bool,X243) | s(bool,'T_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X241)),bool),X242,bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X243)),bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X242),s(bool,X241)))) ) | $spl0),
  inference(superposition,[],[f2471,f2781])).
fof(f31842,plain,(
  ( ! [X239,X240,X238] : (s(bool,X238) != s(bool,X240) | s(bool,'T_0') = s(bool,X240) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X238)),bool),X239,bool))),bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X239),s(bool,X238)))) ) | $spl0),
  inference(superposition,[],[f2471,f2781])).
fof(f31841,plain,(
  ( ! [X237,X235,X236,X234] : (p(s(bool,X234)) | s(bool,X236) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X234)),bool),X235,bool)) | s(bool,X236) = s(bool,X237) | s(bool,'F_0') = s(bool,X237) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X235),s(bool,X234)))) ) | $spl0),
  inference(superposition,[],[f2416,f2781])).
fof(f31840,plain,(
  ( ! [X231,X233,X232] : (s(bool,'T_0') != s(bool,X231) | s(bool,X233) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X231)),bool),X232,bool)) | s(bool,'F_0') = s(bool,X233) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X232),s(bool,X231)))) ) | $spl0),
  inference(superposition,[],[f2035,f2781])).
fof(f31839,plain,(
  ( ! [X229,X227,X230,X228] : (~p(s(bool,X227)) | s(bool,X229) != s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X227)),bool),X228,bool)) | s(bool,X229) = s(bool,X230) | s(bool,'F_0') = s(bool,X230) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X228),s(bool,X227)))) ) | $spl0),
  inference(superposition,[],[f2033,f2781])).
fof(f31834,plain,(
  ( ! [X212,X213,X214] : (s(bool,X212) != s(bool,X214) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X214))) | s(bool,'F_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X212)),bool),X213,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X213),s(bool,X212)))) ) | $spl0),
  inference(superposition,[],[f1774,f2781])).
fof(f31833,plain,(
  ( ! [X210,X211,X209] : (s(bool,X209) != s(bool,X211) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X209)),bool),X210,bool)))) | s(bool,'F_0') = s(bool,X211) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X210),s(bool,X209)))) ) | $spl0),
  inference(superposition,[],[f1774,f2781])).
fof(f31832,plain,(
  ( ! [X208,X206,X207] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X206))) | s(bool,X208) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X206)),bool),X207,bool)) | s(bool,'F_0') = s(bool,X208) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X207),s(bool,X206)))) ) | $spl0),
  inference(superposition,[],[f1758,f2781])).
fof(f31831,plain,(
  ( ! [X204,X205,X203] : (s(bool,X203) != s(bool,X205) | s(bool,'T_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X203)),bool),X204,bool)) | s(bool,'F_0') = s(bool,X205) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X204),s(bool,X203)))) ) | $spl0),
  inference(superposition,[],[f1747,f2781])).
fof(f31830,plain,(
  ( ! [X202,X200,X201] : (s(bool,X200) != s(bool,X202) | s(bool,'T_0') = s(bool,X202) | s(bool,'F_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X200)),bool),X201,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X201),s(bool,X200)))) ) | $spl0),
  inference(superposition,[],[f1747,f2781])).
fof(f31825,plain,(
  ( ! [X187,X186] : (s(bool,X186) != s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3))))) | s(bool,'T_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X186)),bool),X187,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X187),s(bool,X186)))) ) | $spl0),
  inference(superposition,[],[f766,f2781])).
fof(f31824,plain,(
  ( ! [X185,X184,X183] : (~p(s(bool,happ(s(fun(bool,bool),X185),s(bool,X183)))) | p(s(bool,happ(s(fun(bool,bool),X185),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(sK7(sK6('const.option.SOME_1'(s(bool,X183)),bool),X184,bool),X185,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X184),s(bool,X183)))) ) | $spl0),
  inference(superposition,[],[f532,f2781])).
fof(f31823,plain,(
  ( ! [X182,X180,X181] : (~p(s(bool,happ(s(fun(bool,bool),X182),s(bool,X180)))) | s(bool,'F_0') = s(bool,sK7('F_0',X182,bool)) | s(bool,'T_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X180)),bool),X181,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X181),s(bool,X180)))) ) | $spl0),
  inference(superposition,[],[f439,f2781])).
fof(f31822,plain,(
  ( ! [X177,X178,X179] : (s(bool,'F_0') != s(bool,X177) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X179))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X177)),bool),X178,bool)))) | s(bool,'T_0') = s(bool,X179) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X178),s(bool,X177)))) ) | $spl0),
  inference(superposition,[],[f404,f2781])).
fof(f31821,plain,(
  ( ! [X175,X176,X174] : (s(bool,X174) != s(bool,X176) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X174)),bool),X175,bool)))) | s(bool,'T_0') = s(bool,X176) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X175),s(bool,X174)))) ) | $spl0),
  inference(superposition,[],[f403,f2781])).
fof(f31820,plain,(
  ( ! [X173,X171,X172] : (s(bool,X171) != s(bool,X173) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X173))) | s(bool,'T_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X171)),bool),X172,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X172),s(bool,X171)))) ) | $spl0),
  inference(superposition,[],[f403,f2781])).
fof(f31819,plain,(
  ( ! [X169,X170,X168] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X168))) | s(bool,X170) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X168)),bool),X169,bool)) | s(bool,'T_0') = s(bool,X170) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X169),s(bool,X168)))) ) | $spl0),
  inference(superposition,[],[f362,f2781])).
fof(f31818,plain,(
  ( ! [X167,X165,X166] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X165))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X167))) | s(bool,'F_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X165)),bool),X166,bool)) | s(bool,'T_0') = s(bool,X167) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X166),s(bool,X165)))) ) | $spl0),
  inference(superposition,[],[f361,f2781])).
fof(f31817,plain,(
  ( ! [X163,X164,X162] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X162))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X164))) | s(bool,'F_0') = s(bool,X164) | s(bool,'T_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X162)),bool),X163,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X163),s(bool,X162)))) ) | $spl0),
  inference(superposition,[],[f361,f2781])).
fof(f31816,plain,(
  ( ! [X158,X161,X159,X160] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X160),'const.option.NONE_0'),s(bool,X158),s(fun(X160,bool),X161))) | s(bool,'F_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X158)),bool),X159,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X159),s(bool,X158)))) ) | $spl0),
  inference(superposition,[],[f298,f2781])).
fof(f31815,plain,(
  ( ! [X156,X157,X155] : (p(s(bool,X155)) | s(bool,X157) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X155)),bool),X156,bool)) | s(bool,'T_0') = s(bool,X157) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X156),s(bool,X155)))) ) | $spl0),
  inference(superposition,[],[f243,f2781])).
fof(f31814,plain,(
  ( ! [X154,X152,X153] : (~p(s(bool,X152)) | s(bool,X154) != s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X152)),bool),X153,bool)) | s(bool,'T_0') = s(bool,X154) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X153),s(bool,X152)))) ) | $spl0),
  inference(superposition,[],[f211,f2781])).
fof(f31809,plain,(
  ( ! [X138,X139,X137] : (~p(s(bool,X137)) | ~p(s(bool,X139)) | s(bool,X139) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X137)),bool),X138,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X138),s(bool,X137)))) ) | $spl0),
  inference(superposition,[],[f165,f2781])).
fof(f31807,plain,(
  ( ! [X132,X133,X131] : (p(s(bool,X131)) | p(s(bool,X133)) | s(bool,X133) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X131)),bool),X132,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X132),s(bool,X131)))) ) | $spl0),
  inference(superposition,[],[f162,f2781])).
fof(f31806,plain,(
  ( ! [X130,X129] : (p(s(bool,X129)) | s(bool,'F_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X129)),bool),X130,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X130),s(bool,X129)))) ) | $spl0),
  inference(superposition,[],[f128,f2781])).
fof(f31805,plain,(
  ( ! [X127,X128] : (s(bool,'F_0') != s(bool,X127) | ~p(s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X127)),bool),X128,bool))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X128),s(bool,X127)))) ) | $spl0),
  inference(superposition,[],[f127,f2781])).
fof(f31804,plain,(
  ( ! [X125,X126] : (~p(s(bool,X125)) | s(bool,'T_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X125)),bool),X126,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X126),s(bool,X125)))) ) | $spl0),
  inference(superposition,[],[f124,f2781])).
fof(f31803,plain,(
  ( ! [X123,X124] : (p(s(bool,X123)) | s(bool,'T_0') != s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X123)),bool),X124,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X124),s(bool,X123)))) ) | $spl0),
  inference(superposition,[],[f123,f2781])).
fof(f31797,plain,(
  ( ! [X103,X101,X102,X100] : (s(bool,'T_0') != s(bool,happ(s(fun(X100,bool),X103),s(X100,X101))) | s(X100,sK7(sK6('const.option.SOME_1'(s(X100,X101)),X100),X102,X100)) = s(X100,sK7(sK7(sK6('const.option.SOME_1'(s(X100,X101)),X100),X102,X100),X103,X100)) | s(bool,'F_0') = s(bool,happ(s(fun(X100,bool),X102),s(X100,X101)))) ) | $spl0),
  inference(superposition,[],[f2789,f2781])).
fof(f31796,plain,(
  ( ! [X99,X97,X98,X96] : (~p(s(bool,happ(s(fun(X96,bool),X99),s(X96,X97)))) | s(X96,sK7(sK7(sK6('const.option.SOME_1'(s(X96,X97)),X96),X98,X96),X99,X96)) = s(X96,sK7(sK7(sK7(sK6('const.option.SOME_1'(s(X96,X97)),X96),X98,X96),X99,X96),X99,X96)) | s(bool,'F_0') = s(bool,happ(s(fun(X96,bool),X98),s(X96,X97)))) ) | $spl0),
  inference(superposition,[],[f2788,f2781])).
fof(f31795,plain,(
  ( ! [X94,X92,X95,X93] : (s(bool,'F_0') = s(bool,happ(s(fun(X92,bool),X95),s(X92,X93))) | s(X92,sK7(sK6('const.option.SOME_1'(s(X92,X93)),X92),X94,X92)) = s(X92,sK7(sK7(sK6('const.option.SOME_1'(s(X92,X93)),X92),X94,X92),X95,X92)) | s(bool,'F_0') = s(bool,happ(s(fun(X92,bool),X94),s(X92,X93)))) ) | $spl0),
  inference(superposition,[],[f1756,f2781])).
fof(f31793,plain,(
  ( ! [X88,X87,X85,X86] : (~p(s(bool,happ(s(fun(X85,bool),X88),s(X85,X86)))) | s(bool,'T_0') = s(bool,happ(s(fun(X85,bool),X88),s(X85,sK7(sK7(sK6('const.option.SOME_1'(s(X85,X86)),X85),X87,X85),X88,X85)))) | s(bool,'F_0') = s(bool,happ(s(fun(X85,bool),X87),s(X85,X86)))) ) | $spl0),
  inference(superposition,[],[f535,f2781])).
fof(f31792,plain,(
  ( ! [X83,X81,X84,X82] : (s('type.option.option'(X81),X84) != s('type.option.option'(X81),'const.option.SOME_1'(s(X81,X82))) | s(X81,sK6(X84,X81)) = s(X81,sK7(sK6('const.option.SOME_1'(s(X81,X82)),X81),X83,X81)) | s('type.option.option'(X81),'const.option.NONE_0') = s('type.option.option'(X81),X84) | s(bool,'F_0') = s(bool,happ(s(fun(X81,bool),X83),s(X81,X82)))) ) | $spl0),
  inference(superposition,[],[f459,f2781])).
fof(f31791,plain,(
  ( ! [X80,X78,X76,X79,X77,X75] : (~p(s(bool,happ(s(fun(X75,bool),X78),s(X75,X76)))) | s(X75,sK7(sK6('const.option.SOME_1'(s(X75,X76)),X75),X77,X75)) = s(X75,sK7('const.option.option_CASE_3'(s('type.option.option'(X79),'const.option.NONE_0'),s(X75,sK7(sK6('const.option.SOME_1'(s(X75,X76)),X75),X77,X75)),s(fun(X79,X75),X80)),X78,X75)) | s(bool,'F_0') = s(bool,happ(s(fun(X75,bool),X77),s(X75,X76)))) ) | $spl0),
  inference(superposition,[],[f447,f2781])).
fof(f31790,plain,(
  ( ! [X70,X74,X72,X71,X69,X73] : (s('type.option.option'(X69),'const.option.SOME_1'(s(X69,X70))) != s('type.option.option'(X69),'const.option.SOME_1'(s(X69,X72))) | s(X69,sK7(sK6('const.option.SOME_1'(s(X69,X70)),X69),X71,X69)) = s(X69,'const.option.option_CASE_3'(s('type.option.option'(X73),'const.option.NONE_0'),s(X69,X72),s(fun(X73,X69),X74))) | s(bool,'F_0') = s(bool,happ(s(fun(X69,bool),X71),s(X69,X70)))) ) | $spl0),
  inference(superposition,[],[f363,f2781])).
fof(f31789,plain,(
  ( ! [X68,X66,X64,X67,X65,X63] : (s('type.option.option'(X63),'const.option.SOME_1'(s(X63,X64))) != s('type.option.option'(X63),'const.option.SOME_1'(s(X63,X66))) | s(X63,X66) = s(X63,'const.option.option_CASE_3'(s('type.option.option'(X67),'const.option.NONE_0'),s(X63,sK7(sK6('const.option.SOME_1'(s(X63,X64)),X63),X65,X63)),s(fun(X67,X63),X68))) | s(bool,'F_0') = s(bool,happ(s(fun(X63,bool),X65),s(X63,X64)))) ) | $spl0),
  inference(superposition,[],[f363,f2781])).
fof(f31781,plain,(
  ( ! [X30,X28,X29,X27] : (~p(s(bool,happ(s(fun(X27,bool),X30),s(X27,X28)))) | s(X27,sK7(sK6('const.option.SOME_1'(s(X27,X28)),X27),X29,X27)) = s(X27,sK7(sK7(sK6('const.option.SOME_1'(s(X27,X28)),X27),X29,X27),X30,X27)) | s(bool,'F_0') = s(bool,happ(s(fun(X27,bool),X29),s(X27,X28)))) ) | $spl0),
  inference(superposition,[],[f160,f2781])).
fof(f31780,plain,(
  ( ! [X26,X24,X23,X25,X22] : (~p(s(bool,happ(s(fun(X22,bool),X25),s(X22,X23)))) | p(s(bool,happ(s(fun(X22,bool),X25),s(X22,X26)))) | s(X22,X26) != s(X22,sK7(sK6('const.option.SOME_1'(s(X22,X23)),X22),X24,X22)) | s(bool,'F_0') = s(bool,happ(s(fun(X22,bool),X24),s(X22,X23)))) ) | $spl0),
  inference(superposition,[],[f159,f2781])).
fof(f31778,plain,(
  ( ! [X14,X17,X15,X16] : (s(X14,X15) != s(X14,X17) | s('type.option.option'(X14),'const.option.SOME_1'(s(X14,X17))) = s('type.option.option'(X14),'const.option.SOME_1'(s(X14,sK7(sK6('const.option.SOME_1'(s(X14,X15)),X14),X16,X14)))) | s(bool,'F_0') = s(bool,happ(s(fun(X14,bool),X16),s(X14,X15)))) ) | $spl0),
  inference(superposition,[],[f158,f2781])).
fof(f31776,plain,(
  ( ! [X6,X8,X7,X9] : (s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))) != s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X9))) | s(X6,X9) = s(X6,sK7(sK6('const.option.SOME_1'(s(X6,X7)),X6),X8,X6)) | s(bool,'F_0') = s(bool,happ(s(fun(X6,bool),X8),s(X6,X7)))) ) | $spl0),
  inference(superposition,[],[f157,f2781])).
fof(f31773,plain,(
  ( ! [X151,X149,X150,X148] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X148),X149),s(bool,X150),s(fun(X148,bool),X151))) | s(fun(X148,bool),X151) = s(fun(X148,bool),sK7(sK6('const.option.SOME_1'(s(fun(X148,bool),X151)),fun(X148,bool)),happ(s(fun(bool,fun(fun(X148,bool),bool)),happ(s(fun('type.option.option'(X148),fun(bool,fun(fun(X148,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X148),X149))),s(bool,X150)),fun(X148,bool)))) ) | $spl0),
  inference(superposition,[],[f2781,f169])).
fof(f32269,plain,(
  ( ! [X142,X140,X141,X139] : (s(X139,X141) = s(X139,sK7(sK6('const.option.SOME_1'(s(X139,X141)),X139),X140,X139)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X142))) | s(bool,X142) = s(bool,happ(s(fun(X139,bool),X140),s(X139,X141)))) ) | $spl0),
  inference(subsumption_resolution,[],[f31771,f180])).
fof(f31771,plain,(
  ( ! [X142,X140,X141,X139] : (s(bool,'T_0') = s(bool,'F_0') | s(X139,X141) = s(X139,sK7(sK6('const.option.SOME_1'(s(X139,X141)),X139),X140,X139)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X142))) | s(bool,X142) = s(bool,happ(s(fun(X139,bool),X140),s(X139,X141)))) ) | $spl0),
  inference(superposition,[],[f2781,f14030])).
fof(f32262,plain,(
  ( ! [X99,X97,X98] : (s(X97,X99) = s(X97,sK7(sK6('const.option.SOME_1'(s(X97,X99)),X97),X98,X97)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X97,bool),X98),s(X97,X99)))))) ) | $spl0),
  inference(subsumption_resolution,[],[f32261,f180])).
fof(f32261,plain,(
  ( ! [X99,X97,X98] : (s(bool,'T_0') = s(bool,'F_0') | s(X97,X99) = s(X97,sK7(sK6('const.option.SOME_1'(s(X97,X99)),X97),X98,X97)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X97,bool),X98),s(X97,X99)))))) ) | $spl0),
  inference(forward_demodulation,[],[f31761,f901])).
fof(f31761,plain,(
  ( ! [X99,X97,X98] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(X97,X99) = s(X97,sK7(sK6('const.option.SOME_1'(s(X97,X99)),X97),X98,X97)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X97,bool),X98),s(X97,X99)))))) ) | $spl0),
  inference(superposition,[],[f2781,f8984])).
fof(f32125,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))),bool)) | s(X0,X2) = s(X0,sK7(sK6('const.option.SOME_1'(s(X0,X2)),X0),X1,X0))) ) | $spl0),
  inference(condensation,[],[f32124])).
fof(f32124,plain,(
  ( ! [X39,X41,X42,X40] : (s(bool,'F_0') = s(bool,X42) | s(X39,X41) = s(X39,sK7(sK6('const.option.SOME_1'(s(X39,X41)),X39),X40,X39)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X39,bool),X40),s(X39,X41)))),bool))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f31749])).
fof(f31749,plain,(
  ( ! [X39,X41,X42,X40] : (s(bool,'F_0') = s(bool,X42) | s(X39,X41) = s(X39,sK7(sK6('const.option.SOME_1'(s(X39,X41)),X39),X40,X39)) | s(bool,'F_0') = s(bool,X42) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X39,bool),X40),s(X39,X41)))),bool))) ) | $spl0),
  inference(superposition,[],[f2781,f1834])).
fof(f32255,plain,(
  ( ! [X12,X10,X11,X9] : (s(X9,X11) = s(X9,sK7(sK6('const.option.SOME_1'(s(X9,X11)),X9),X10,X9)) | s(bool,X12) = s(bool,happ(s(fun(X9,bool),X10),s(X9,X11))) | s(bool,'T_0') = s(bool,X12)) ) | $spl0),
  inference(subsumption_resolution,[],[f31743,f180])).
fof(f31743,plain,(
  ( ! [X12,X10,X11,X9] : (s(bool,'T_0') = s(bool,'F_0') | s(X9,X11) = s(X9,sK7(sK6('const.option.SOME_1'(s(X9,X11)),X9),X10,X9)) | s(bool,X12) = s(bool,happ(s(fun(X9,bool),X10),s(X9,X11))) | s(bool,'T_0') = s(bool,X12)) ) | $spl0),
  inference(superposition,[],[f2781,f208])).
fof(f31740,plain,(
  ( ! [X257,X259,X258] : (s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(X257),bool),X259),s('type.option.option'(X257),X258))) | s('type.option.option'(X257),'const.option.SOME_1'(s(X257,sK6(X258,X257)))) = s('type.option.option'(X257),sK7(sK6('const.option.SOME_1'(s('type.option.option'(X257),'const.option.SOME_1'(s(X257,sK6(X258,X257))))),'type.option.option'(X257)),X259,'type.option.option'(X257))) | s('type.option.option'(X257),'const.option.NONE_0') = s('type.option.option'(X257),X258)) ) | $spl0),
  inference(superposition,[],[f2781,f148])).
fof(f31729,plain,(
  ( ! [X231,X232] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X232),s(bool,'T_0'))) | s(bool,sK6(X231,bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,sK6(X231,bool))),bool),X232,bool)) | s('type.option.option'(bool),X231) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X231)) ) | $spl0),
  inference(superposition,[],[f2781,f458])).
fof(f31728,plain,(
  ( ! [X229,X230] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X230),s(bool,'F_0'))) | s(bool,sK6(X229,bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,sK6(X229,bool))),bool),X230,bool)) | s('type.option.option'(bool),X229) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X229)) ) | $spl0),
  inference(superposition,[],[f2781,f1766])).
fof(f31713,plain,(
  ( ! [X194,X192,X195,X193] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X195),s(bool,'F_0'))) | s(bool,happ(s(fun(X192,bool),X193),s(X192,X194))) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,happ(s(fun(X192,bool),X193),s(X192,X194)))),bool),X195,bool)) | s(X192,X194) = s(X192,sK7(X194,X193,X192))) ) | $spl0),
  inference(superposition,[],[f2781,f1756])).
fof(f31712,plain,(
  ( ! [X191,X189,X190,X188] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X191),s(bool,'F_0'))) | s(bool,happ(s(fun(X188,bool),X189),s(X188,X190))) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,happ(s(fun(X188,bool),X189),s(X188,X190)))),bool),X191,bool)) | s(X188,X190) = s(X188,sK7(sK6('const.option.SOME_1'(s(X188,X190)),X188),X189,X188))) ) | $spl0),
  inference(superposition,[],[f2781,f2781])).
fof(f31705,plain,(
  ( ! [X167,X165,X166] : (s(bool,X165) = s(bool,happ(s(fun(bool,bool),X166),s(bool,X165))) | s(bool,'F_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'F_0')),bool),X166,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X167))) | s(bool,X165) = s(bool,X167)) ) | $spl0),
  inference(superposition,[],[f2781,f3902])).
fof(f31704,plain,(
  ( ! [X163,X161,X164,X162,X160] : (s(bool,X160) = s(bool,happ(s(fun(bool,bool),X161),s(bool,X160))) | s(bool,'F_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'F_0')),bool),X161,bool)) | s(bool,X162) = s(bool,'const.bool.IN_2'(s(X163,X164),s(fun(X163,bool),'const.pred_set.EMPTY_0'))) | s(bool,X160) = s(bool,X162)) ) | $spl0),
  inference(superposition,[],[f2781,f2976])).
fof(f31703,plain,(
  ( ! [X158,X159,X157] : (s(bool,X157) = s(bool,happ(s(fun(bool,bool),X158),s(bool,X157))) | s(bool,'F_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'F_0')),bool),X158,bool)) | s(bool,X157) = s(bool,X159) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X159)),bool))) ) | $spl0),
  inference(superposition,[],[f2781,f1834])).
fof(f31701,plain,(
  ( ! [X152,X151,X153] : (s(bool,X151) = s(bool,happ(s(fun(bool,bool),X152),s(bool,X151))) | s(bool,'F_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'F_0')),bool),X152,bool)) | s(bool,X151) = s(bool,X153) | s(bool,'F_0') = s(bool,X153)) ) | $spl0),
  inference(superposition,[],[f2781,f1632])).
fof(f31700,plain,(
  ( ! [X149,X150] : (s(bool,X149) = s(bool,happ(s(fun(bool,bool),X150),s(bool,X149))) | s(bool,'F_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'F_0')),bool),X150,bool)) | s(bool,'T_0') = s(bool,X149)) ) | $spl0),
  inference(superposition,[],[f2781,f121])).
fof(f31658,plain,(
  ( ! [X23,X21,X22,X20] : (s(bool,'F_0') = s(bool,happ(s(fun(X20,bool),X23),s(X20,X21))) | s(X20,sK7(sK6('const.option.SOME_1'(s(X20,X21)),X20),X22,X20)) = s(X20,sK7(sK6('const.option.SOME_1'(s(X20,sK7(sK6('const.option.SOME_1'(s(X20,X21)),X20),X22,X20))),X20),X23,X20)) | s(bool,'F_0') = s(bool,happ(s(fun(X20,bool),X22),s(X20,X21)))) ) | $spl0),
  inference(superposition,[],[f2781,f2781])).
fof(f31653,plain,(
  ( ! [X23,X21,X22,X20] : (s(bool,'F_0') = s(bool,happ(s(fun(X20,bool),X21),s(X20,X23))) | s(X20,X23) = s(X20,sK7(sK6('const.option.SOME_1'(s(X20,X23)),X20),sK7(sK6('const.option.SOME_1'(s(fun(X20,bool),X21)),fun(X20,bool)),X22,fun(X20,bool)),X20)) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X20,bool),bool),X22),s(fun(X20,bool),X21)))) ) | $spl0),
  inference(superposition,[],[f2781,f2781])).
fof(f31652,plain,(
  ( ! [X19,X17,X18] : (s(bool,'F_0') = s(bool,happ(s(fun(X17,bool),X18),s(X17,X19))) | s(X17,X19) = s(X17,sK7(sK6('const.option.SOME_1'(s(X17,X19)),X17),sK6('const.option.SOME_1'(s(fun(X17,bool),X18)),fun(X17,bool)),X17))) ) | $spl0),
  inference(superposition,[],[f2781,f901])).
fof(f31651,plain,(
  ( ! [X14,X12,X15,X13,X11,X16] : (s(bool,'F_0') = s(bool,happ(s(fun(X11,bool),'const.option.option_CASE_3'(s('type.option.option'(X12),X13),s(fun(X11,bool),X14),s(fun(X12,fun(X11,bool)),X15))),s(X11,X16))) | s(X11,X16) = s(X11,sK7(sK6('const.option.SOME_1'(s(X11,X16)),X11),happ(s(fun(fun(X12,fun(X11,bool)),fun(X11,bool)),happ(s(fun(fun(X11,bool),fun(fun(X12,fun(X11,bool)),fun(X11,bool))),happ(s(fun('type.option.option'(X12),fun(fun(X11,bool),fun(fun(X12,fun(X11,bool)),fun(X11,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X12),X13))),s(fun(X11,bool),X14))),s(fun(X12,fun(X11,bool)),X15)),X11))) ) | $spl0),
  inference(superposition,[],[f2781,f169])).
fof(f31650,plain,(
  ( ! [X6,X10,X8,X7,X5,X9] : (s(bool,'F_0') = s(bool,happ(s(fun(X5,bool),happ(s(fun(X6,fun(X5,bool)),X9),s(X6,X7))),s(X5,X10))) | s(X5,X10) = s(X5,sK7(sK6('const.option.SOME_1'(s(X5,X10)),X5),'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(fun(X5,bool),X8),s(fun(X6,fun(X5,bool)),X9)),X5))) ) | $spl0),
  inference(superposition,[],[f2781,f168])).
fof(f31649,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))) | s(X0,X4) = s(X0,sK7(sK6('const.option.SOME_1'(s(X0,X4)),X0),'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(fun(X0,bool),X2),s(fun(X1,fun(X0,bool)),X3)),X0))) ) | $spl0),
  inference(superposition,[],[f2781,f166])).
fof(f31648,plain,(
  ( ! [X118,X119] : (s('type.option.option'(bool),X118) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X119),s('type.option.option'(bool),X118))) | s(bool,'T_0') = s(bool,sK6(sK7(sK6('const.option.SOME_1'(s('type.option.option'(bool),X118)),'type.option.option'(bool)),X119,'type.option.option'(bool)),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),sK7(sK6('const.option.SOME_1'(s('type.option.option'(bool),X118)),'type.option.option'(bool)),X119,'type.option.option'(bool)))) ) | $spl0),
  inference(superposition,[],[f2781,f458])).
fof(f31647,plain,(
  ( ! [X116,X117] : (s('type.option.option'(bool),X116) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X117),s('type.option.option'(bool),X116))) | s(bool,'F_0') = s(bool,sK6(sK7(sK6('const.option.SOME_1'(s('type.option.option'(bool),X116)),'type.option.option'(bool)),X117,'type.option.option'(bool)),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),sK7(sK6('const.option.SOME_1'(s('type.option.option'(bool),X116)),'type.option.option'(bool)),X117,'type.option.option'(bool)))) ) | $spl0),
  inference(superposition,[],[f2781,f1766])).
fof(f31645,plain,(
  ( ! [X111,X109,X110] : (s(bool,'T_0') = s(bool,X109) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X110),s(bool,X109))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X111))) | s(bool,X111) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X109)),bool),X110,bool))) ) | $spl0),
  inference(superposition,[],[f2781,f14030])).
fof(f31644,plain,(
  ( ! [X107,X108,X106] : (s(bool,X106) = s(bool,X108) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X107),s(bool,X106))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X106)),bool),X107,bool)))) | s(bool,'T_0') = s(bool,X108)) ) | $spl0),
  inference(superposition,[],[f2781,f14030])).
fof(f31643,plain,(
  ( ! [X103,X105,X104] : (s(bool,X103) = s(bool,X105) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X104),s(bool,X103))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X105))) | s(bool,'T_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X103)),bool),X104,bool))) ) | $spl0),
  inference(superposition,[],[f2781,f14030])).
fof(f32191,plain,(
  ( ! [X78,X77] : (s(bool,'T_0') = s(bool,X77) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X78),s(bool,X77))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X77)),bool),X78,bool))))) ) | $spl0),
  inference(forward_demodulation,[],[f31634,f901])).
fof(f31634,plain,(
  ( ! [X78,X77] : (s(bool,X77) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X78),s(bool,X77))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X77)),bool),X78,bool))))) ) | $spl0),
  inference(superposition,[],[f2781,f8984])).
fof(f32190,plain,(
  ( ! [X76,X75] : (s(bool,'T_0') = s(bool,X75) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X76),s(bool,X75))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X75)),bool),X76,bool))),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f31633,f901])).
fof(f31633,plain,(
  ( ! [X76,X75] : (s(bool,X75) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X76),s(bool,X75))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X75)),bool),X76,bool))),bool))) ) | $spl0),
  inference(superposition,[],[f2781,f7724])).
fof(f32189,plain,(
  ( ! [X74,X73] : (s(bool,'T_0') = s(bool,X73) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X74),s(bool,X73))) | s(bool,'F_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X73)),bool),X74,bool))) ) | $spl0),
  inference(forward_demodulation,[],[f31632,f901])).
fof(f31632,plain,(
  ( ! [X74,X73] : (s(bool,X73) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X74),s(bool,X73))) | s(bool,'F_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X73)),bool),X74,bool))) ) | $spl0),
  inference(superposition,[],[f2781,f7478])).
fof(f31628,plain,(
  ( ! [X66,X64,X65] : (s(bool,X64) = s(bool,X66) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X65),s(bool,X64))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X66))) | s(bool,'F_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X64)),bool),X65,bool))) ) | $spl0),
  inference(superposition,[],[f2781,f3902])).
fof(f31627,plain,(
  ( ! [X61,X62,X63] : (s(bool,X61) = s(bool,X63) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X62),s(bool,X61))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X61)),bool),X62,bool)))) | s(bool,'F_0') = s(bool,X63)) ) | $spl0),
  inference(superposition,[],[f2781,f3902])).
fof(f31626,plain,(
  ( ! [X59,X60,X58] : (s(bool,'F_0') = s(bool,X58) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X59),s(bool,X58))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X60))) | s(bool,X60) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X58)),bool),X59,bool))) ) | $spl0),
  inference(superposition,[],[f2781,f3902])).
fof(f31625,plain,(
  ( ! [X57,X54,X56,X55,X53] : (s(bool,X53) = s(bool,X55) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X54),s(bool,X53))) | s(bool,X55) = s(bool,'const.bool.IN_2'(s(X56,X57),s(fun(X56,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X53)),bool),X54,bool))) ) | $spl0),
  inference(superposition,[],[f2781,f2976])).
fof(f31623,plain,(
  ( ! [X47,X45,X43,X46,X44] : (s(bool,'F_0') = s(bool,X43) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X44),s(bool,X43))) | s(bool,X45) = s(bool,'const.bool.IN_2'(s(X46,X47),s(fun(X46,bool),'const.pred_set.EMPTY_0'))) | s(bool,X45) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X43)),bool),X44,bool))) ) | $spl0),
  inference(superposition,[],[f2781,f2976])).
fof(f31622,plain,(
  ( ! [X39,X41,X38,X42,X40] : (s(bool,X38) = s(bool,'const.bool.IN_2'(s(X40,X41),s(fun(X40,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X39),s(bool,X38))) | s(bool,X42) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X38)),bool),X39,bool)) | s(bool,'F_0') = s(bool,X42)) ) | $spl0),
  inference(superposition,[],[f2781,f2976])).
fof(f31621,plain,(
  ( ! [X37,X35,X36] : (s(bool,'F_0') = s(bool,X35) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X36),s(bool,X35))) | s(bool,X37) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X35)),bool),X36,bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X37)),bool))) ) | $spl0),
  inference(superposition,[],[f2781,f1834])).
fof(f31620,plain,(
  ( ! [X33,X34,X32] : (s(bool,X32) = s(bool,X34) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X33),s(bool,X32))) | s(bool,'F_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X32)),bool),X33,bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X34)),bool))) ) | $spl0),
  inference(superposition,[],[f2781,f1834])).
fof(f31619,plain,(
  ( ! [X30,X31,X29] : (s(bool,X29) = s(bool,X31) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X30),s(bool,X29))) | s(bool,'F_0') = s(bool,X31) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X29)),bool),X30,bool))),bool))) ) | $spl0),
  inference(superposition,[],[f2781,f1834])).
fof(f31616,plain,(
  ( ! [X21,X22,X20] : (s(bool,X20) = s(bool,X22) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X21),s(bool,X20))) | s(bool,'F_0') = s(bool,X22) | s(bool,'F_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X20)),bool),X21,bool))) ) | $spl0),
  inference(superposition,[],[f2781,f1632])).
fof(f31615,plain,(
  ( ! [X19,X17,X18] : (s(bool,'F_0') = s(bool,X17) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X18),s(bool,X17))) | s(bool,X19) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X17)),bool),X18,bool)) | s(bool,'F_0') = s(bool,X19)) ) | $spl0),
  inference(superposition,[],[f2781,f1632])).
fof(f31612,plain,(
  ( ! [X10,X8,X9] : (s(bool,X8) = s(bool,X10) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X9),s(bool,X8))) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X8)),bool),X9,bool))) ) | $spl0),
  inference(superposition,[],[f2781,f208])).
fof(f31611,plain,(
  ( ! [X6,X7,X5] : (s(bool,'T_0') = s(bool,X5) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X6),s(bool,X5))) | s(bool,X7) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X5)),bool),X6,bool)) | s(bool,'T_0') = s(bool,X7)) ) | $spl0),
  inference(superposition,[],[f2781,f208])).
fof(f31610,plain,(
  ( ! [X4,X3] : (s(bool,'F_0') = s(bool,X3) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X4),s(bool,X3))) | s(bool,'T_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X3)),bool),X4,bool))) ) | $spl0),
  inference(superposition,[],[f2781,f121])).
fof(f31609,plain,(
  ( ! [X263,X262] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK7(sK6('const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))),'type.option.option'(bool)),X263,'type.option.option'(bool))) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X263),s('type.option.option'(bool),X262))) | s(bool,'T_0') = s(bool,sK6(X262,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X262)) ) | $spl0),
  inference(superposition,[],[f2781,f458])).
fof(f31608,plain,(
  ( ! [X261,X260] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),sK7(sK6('const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0')))),'type.option.option'(bool)),X261,'type.option.option'(bool))) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X261),s('type.option.option'(bool),X260))) | s(bool,'F_0') = s(bool,sK6(X260,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X260)) ) | $spl0),
  inference(superposition,[],[f2781,f1766])).
fof(f31607,plain,(
  ( ! [X257,X259,X258] : (s('type.option.option'(X257),X258) = s('type.option.option'(X257),sK7(sK6('const.option.SOME_1'(s('type.option.option'(X257),X258)),'type.option.option'(X257)),X259,'type.option.option'(X257))) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(X257),bool),X259),s('type.option.option'(X257),'const.option.SOME_1'(s(X257,sK6(X258,X257)))))) | s('type.option.option'(X257),'const.option.NONE_0') = s('type.option.option'(X257),X258)) ) | $spl0),
  inference(superposition,[],[f2781,f148])).
fof(f32184,plain,(
  ( ! [X255,X256] : (s(bool,'T_0') = s(bool,X255) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X255))) = s('type.option.option'(bool),sK7(sK6('const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X255)))),'type.option.option'(bool)),X256,'type.option.option'(bool))) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X256),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))) ) | $spl0),
  inference(forward_demodulation,[],[f31606,f901])).
fof(f31606,plain,(
  ( ! [X255,X256] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X255))) = s('type.option.option'(bool),sK7(sK6('const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X255)))),'type.option.option'(bool)),X256,'type.option.option'(bool))) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X256),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s(bool,X255) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f2781,f8984])).
fof(f31605,plain,(
  ( ! [X253,X254] : (s('type.option.option'(bool),X253) = s('type.option.option'(bool),sK7(sK6('const.option.SOME_1'(s('type.option.option'(bool),X253)),'type.option.option'(bool)),X254,'type.option.option'(bool))) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X254),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s(bool,'T_0') = s(bool,sK6(X253,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X253)) ) | $spl0),
  inference(superposition,[],[f2781,f458])).
fof(f31604,plain,(
  ( ! [X251,X252,X250] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X250))) = s('type.option.option'(bool),sK7(sK6('const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X250)))),'type.option.option'(bool)),X251,'type.option.option'(bool))) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X251),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s(bool,X250) = s(bool,X252) | s(bool,'F_0') = s(bool,X252)) ) | $spl0),
  inference(superposition,[],[f2781,f3902])).
fof(f31602,plain,(
  ( ! [X246,X247,X245] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X245))) = s('type.option.option'(bool),sK7(sK6('const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X245)))),'type.option.option'(bool)),X246,'type.option.option'(bool))) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X246),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) | s(bool,X245) = s(bool,X247) | s(bool,'T_0') = s(bool,X247)) ) | $spl0),
  inference(superposition,[],[f2781,f14030])).
fof(f31601,plain,(
  ( ! [X243,X244] : (s('type.option.option'(bool),X243) = s('type.option.option'(bool),sK7(sK6('const.option.SOME_1'(s('type.option.option'(bool),X243)),'type.option.option'(bool)),X244,'type.option.option'(bool))) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X244),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) | s(bool,'F_0') = s(bool,sK6(X243,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X243)) ) | $spl0),
  inference(superposition,[],[f2781,f1766])).
fof(f32181,plain,(
  ( ! [X239,X240] : (s(bool,'T_0') = s(bool,X239) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK7(sK6('const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))),'type.option.option'(bool)),X240,'type.option.option'(bool))) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X240),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X239)))))) ) | $spl0),
  inference(forward_demodulation,[],[f31599,f901])).
fof(f31599,plain,(
  ( ! [X239,X240] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK7(sK6('const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))),'type.option.option'(bool)),X240,'type.option.option'(bool))) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X240),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X239))))) | s(bool,X239) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f2781,f8984])).
fof(f31598,plain,(
  ( ! [X237,X238,X236] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK7(sK6('const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))),'type.option.option'(bool)),X237,'type.option.option'(bool))) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X237),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X236))))) | s(bool,X236) = s(bool,X238) | s(bool,'F_0') = s(bool,X238)) ) | $spl0),
  inference(superposition,[],[f2781,f3902])).
fof(f31597,plain,(
  ( ! [X235,X233,X234] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),sK7(sK6('const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0')))),'type.option.option'(bool)),X234,'type.option.option'(bool))) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X234),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X233))))) | s(bool,X233) = s(bool,X235) | s(bool,'T_0') = s(bool,X235)) ) | $spl0),
  inference(superposition,[],[f2781,f14030])).
fof(f31596,plain,(
  ( ! [X231,X232] : (s(bool,'T_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X232,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X232),s(bool,sK6(X231,bool)))) | s('type.option.option'(bool),X231) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X231)) ) | $spl0),
  inference(superposition,[],[f2781,f458])).
fof(f31595,plain,(
  ( ! [X229,X230] : (s(bool,'F_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'F_0')),bool),X230,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X230),s(bool,sK6(X229,bool)))) | s('type.option.option'(bool),X229) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X229)) ) | $spl0),
  inference(superposition,[],[f2781,f1766])).
fof(f32176,plain,(
  ( ! [X220,X221] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X221),s(bool,'T_0'))) | s(bool,X220) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X220)),bool),X221,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X220)))) ) | $spl0),
  inference(forward_demodulation,[],[f31591,f901])).
fof(f31591,plain,(
  ( ! [X220,X221] : (s(bool,X220) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X220)),bool),X221,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X221),s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X220)))) ) | $spl0),
  inference(superposition,[],[f2781,f8984])).
fof(f31580,plain,(
  ( ! [X194,X192,X195,X193] : (s(bool,'F_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'F_0')),bool),X195,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X195),s(bool,happ(s(fun(X192,bool),X193),s(X192,X194))))) | s(X192,X194) = s(X192,sK7(X194,X193,X192))) ) | $spl0),
  inference(superposition,[],[f2781,f1756])).
fof(f31579,plain,(
  ( ! [X191,X189,X190,X188] : (s(bool,'F_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'F_0')),bool),X191,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X191),s(bool,happ(s(fun(X188,bool),X189),s(X188,X190))))) | s(X188,X190) = s(X188,sK7(sK6('const.option.SOME_1'(s(X188,X190)),X188),X189,X188))) ) | $spl0),
  inference(superposition,[],[f2781,f2781])).
fof(f31572,plain,(
  ( ! [X167,X165,X166] : (s(bool,X165) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X165)),bool),X166,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X166),s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X167))) | s(bool,X165) = s(bool,X167)) ) | $spl0),
  inference(superposition,[],[f2781,f3902])).
fof(f31571,plain,(
  ( ! [X163,X161,X164,X162,X160] : (s(bool,X160) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X160)),bool),X161,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X161),s(bool,'F_0'))) | s(bool,X162) = s(bool,'const.bool.IN_2'(s(X163,X164),s(fun(X163,bool),'const.pred_set.EMPTY_0'))) | s(bool,X160) = s(bool,X162)) ) | $spl0),
  inference(superposition,[],[f2781,f2976])).
fof(f31570,plain,(
  ( ! [X158,X159,X157] : (s(bool,X157) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X157)),bool),X158,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X158),s(bool,'F_0'))) | s(bool,X157) = s(bool,X159) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X159)),bool))) ) | $spl0),
  inference(superposition,[],[f2781,f1834])).
fof(f32155,plain,(
  ( ! [X142,X140,X141] : (s(bool,'T_0') = s(bool,X142) | s(bool,X140) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X140)),bool),X141,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X141),s(bool,'T_0'))) | s(bool,X140) = s(bool,X142)) ) | $spl0),
  inference(forward_demodulation,[],[f31564,f901])).
fof(f31564,plain,(
  ( ! [X142,X140,X141] : (s(bool,X140) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X140)),bool),X141,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X141),s(bool,'T_0'))) | s(bool,X142) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X140) = s(bool,X142)) ) | $spl0),
  inference(superposition,[],[f2781,f9397])).
fof(f31563,plain,(
  ( ! [X138,X139,X137] : (s(bool,X137) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X137)),bool),X138,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X138),s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X139))) | s(bool,X137) = s(bool,X139)) ) | $spl0),
  inference(superposition,[],[f2781,f14030])).
fof(f31561,plain,(
  ( ! [X132,X130,X131] : (s(bool,'T_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X131,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X131),s(bool,X130))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X132))) | s(bool,X130) = s(bool,X132)) ) | $spl0),
  inference(superposition,[],[f2781,f14030])).
fof(f31560,plain,(
  ( ! [X127,X128,X129] : (s(bool,X128) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X128)),bool),X129,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X129),s(bool,X127))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X127))) | s(bool,'T_0') = s(bool,X128)) ) | $spl0),
  inference(superposition,[],[f2781,f14030])).
fof(f31559,plain,(
  ( ! [X125,X126,X124] : (s(bool,X125) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X125)),bool),X126,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X126),s(bool,X124))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X125))) | s(bool,'T_0') = s(bool,X124)) ) | $spl0),
  inference(superposition,[],[f2781,f14030])).
fof(f31544,plain,(
  ( ! [X87,X85,X86] : (s(bool,X86) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X86)),bool),X87,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X87),s(bool,X85))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X86))) | s(bool,'F_0') = s(bool,X85)) ) | $spl0),
  inference(superposition,[],[f2781,f3902])).
fof(f31543,plain,(
  ( ! [X83,X84,X82] : (s(bool,X83) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X83)),bool),X84,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X84),s(bool,X82))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X82))) | s(bool,'F_0') = s(bool,X83)) ) | $spl0),
  inference(superposition,[],[f2781,f3902])).
fof(f31542,plain,(
  ( ! [X80,X81,X79] : (s(bool,'F_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'F_0')),bool),X80,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X80),s(bool,X79))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X81))) | s(bool,X79) = s(bool,X81)) ) | $spl0),
  inference(superposition,[],[f2781,f3902])).
fof(f31541,plain,(
  ( ! [X78,X76,X74,X77,X75] : (s(bool,X75) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X75)),bool),X76,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X76),s(bool,X74))) | s(bool,X75) = s(bool,'const.bool.IN_2'(s(X77,X78),s(fun(X77,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X74)) ) | $spl0),
  inference(superposition,[],[f2781,f2976])).
fof(f31540,plain,(
  ( ! [X70,X72,X71,X69,X73] : (s(bool,X70) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X70)),bool),X71,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X71),s(bool,X69))) | s(bool,X69) = s(bool,'const.bool.IN_2'(s(X72,X73),s(fun(X72,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X70)) ) | $spl0),
  inference(superposition,[],[f2781,f2976])).
fof(f31539,plain,(
  ( ! [X68,X66,X64,X67,X65] : (s(bool,'F_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'F_0')),bool),X65,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X65),s(bool,X64))) | s(bool,X66) = s(bool,'const.bool.IN_2'(s(X67,X68),s(fun(X67,bool),'const.pred_set.EMPTY_0'))) | s(bool,X64) = s(bool,X66)) ) | $spl0),
  inference(superposition,[],[f2781,f2976])).
fof(f31537,plain,(
  ( ! [X57,X58,X56] : (s(bool,'F_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'F_0')),bool),X57,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X57),s(bool,X56))) | s(bool,X56) = s(bool,X58) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X58)),bool))) ) | $spl0),
  inference(superposition,[],[f2781,f1834])).
fof(f31532,plain,(
  ( ! [X43,X41,X42] : (s(bool,X42) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X42)),bool),X43,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X43),s(bool,X41))) | s(bool,'F_0') = s(bool,X42) | s(bool,'F_0') = s(bool,X41)) ) | $spl0),
  inference(superposition,[],[f2781,f1632])).
fof(f31528,plain,(
  ( ! [X30,X31,X29] : (s(bool,X30) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X30)),bool),X31,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X31),s(bool,X29))) | s(bool,'T_0') = s(bool,X30) | s(bool,'T_0') = s(bool,X29)) ) | $spl0),
  inference(superposition,[],[f2781,f208])).
fof(f31525,plain,(
  ( ! [X23,X21,X22,X20] : (s(X20,X21) = s(X20,sK7(sK6('const.option.SOME_1'(s(X20,X21)),X20),X23,X20)) | s(bool,'F_0') = s(bool,happ(s(fun(X20,bool),X23),s(X20,sK7(sK6('const.option.SOME_1'(s(X20,X21)),X20),X22,X20)))) | s(bool,'F_0') = s(bool,happ(s(fun(X20,bool),X22),s(X20,X21)))) ) | $spl0),
  inference(superposition,[],[f2781,f2781])).
fof(f31432,plain,(
  ( ! [X109,X110,X108] : (p(s(bool,happ(s(fun(bool,bool),X108),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X109,X108,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X110))) | s(bool,X110) = s(bool,happ(s(fun(bool,bool),X108),s(bool,X109)))) ) | $spl0),
  inference(subsumption_resolution,[],[f31366,f114])).
fof(f31366,plain,(
  ( ! [X109,X110,X108] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),X108),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X109,X108,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X110))) | s(bool,X110) = s(bool,happ(s(fun(bool,bool),X108),s(bool,X109)))) ) | $spl0),
  inference(superposition,[],[f532,f14030])).
fof(f31425,plain,(
  ( ! [X76,X77] : (p(s(bool,happ(s(fun(bool,bool),X76),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X77,X76,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X76),s(bool,X77)))))) ) | $spl0),
  inference(subsumption_resolution,[],[f31424,f114])).
fof(f31424,plain,(
  ( ! [X76,X77] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),X76),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X77,X76,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X76),s(bool,X77)))))) ) | $spl0),
  inference(forward_demodulation,[],[f31355,f901])).
fof(f31355,plain,(
  ( ! [X76,X77] : (~p(s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) | p(s(bool,happ(s(fun(bool,bool),X76),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X77,X76,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X76),s(bool,X77)))))) ) | $spl0),
  inference(superposition,[],[f532,f8984])).
fof(f31412,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X0),s(bool,X1))) | p(s(bool,happ(s(fun(bool,bool),X0),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X1,X0,bool))) ) | $spl0),
  inference(condensation,[],[f31411])).
fof(f31411,plain,(
  ( ! [X33,X31,X32] : (s(bool,'F_0') = s(bool,X33) | p(s(bool,happ(s(fun(bool,bool),X31),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X32,X31,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X31),s(bool,X32)))) ) | $spl0),
  inference(subsumption_resolution,[],[f31410,f128])).
fof(f31410,plain,(
  ( ! [X33,X31,X32] : (s(bool,'F_0') = s(bool,X33) | ~p(s(bool,X33)) | p(s(bool,happ(s(fun(bool,bool),X31),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X32,X31,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X31),s(bool,X32)))) ) | $spl0),
  inference(forward_demodulation,[],[f31341,f901])).
fof(f31341,plain,(
  ( ! [X33,X31,X32] : (~p(s(bool,X33)) | p(s(bool,happ(s(fun(bool,bool),X31),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X32,X31,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X31),s(bool,X32))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X33)),bool))) ) | $spl0),
  inference(superposition,[],[f532,f1834])).
fof(f31404,plain,(
  ( ! [X6,X4,X5] : (p(s(bool,happ(s(fun(bool,bool),X4),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X5,X4,bool)) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X4),s(bool,X5))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f31332,f114])).
fof(f31332,plain,(
  ( ! [X6,X4,X5] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),X4),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X5,X4,bool)) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X4),s(bool,X5))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f532,f208])).
fof(f31329,plain,(
  ( ! [X220,X219] : (~p(s(bool,happ(s(fun(bool,bool),X220),s(bool,X219)))) | p(s(bool,happ(s(fun(bool,bool),X220),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X219)),bool),X220,bool))) )),
  inference(superposition,[],[f532,f901])).
fof(f31328,plain,(
  ( ! [X218,X216,X215,X217,X214] : (~p(s(bool,happ(s(fun(bool,bool),X218),s(bool,'const.option.option_CASE_3'(s('type.option.option'(X214),X215),s(bool,X216),s(fun(X214,bool),X217)))))) | p(s(bool,happ(s(fun(bool,bool),X218),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(happ(s(fun(fun(X214,bool),bool),happ(s(fun(bool,fun(fun(X214,bool),bool)),happ(s(fun('type.option.option'(X214),fun(bool,fun(fun(X214,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X214),X215))),s(bool,X216))),s(fun(X214,bool),X217)),X218,bool))) )),
  inference(superposition,[],[f532,f169])).
fof(f31327,plain,(
  ( ! [X212,X210,X213,X211,X209] : (~p(s(bool,happ(s(fun(bool,bool),X213),s(bool,happ(s(fun(X209,bool),X212),s(X209,X210)))))) | p(s(bool,happ(s(fun(bool,bool),X213),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X209),'const.option.SOME_1'(s(X209,X210))),s(bool,X211),s(fun(X209,bool),X212)),X213,bool))) )),
  inference(superposition,[],[f532,f168])).
fof(f31326,plain,(
  ( ! [X208,X206,X207,X205] : (~p(s(bool,happ(s(fun(bool,bool),X208),s(bool,X206)))) | p(s(bool,happ(s(fun(bool,bool),X208),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X205),'const.option.NONE_0'),s(bool,X206),s(fun(X205,bool),X207)),X208,bool))) )),
  inference(superposition,[],[f532,f166])).
fof(f31325,plain,(
  ( ! [X204,X203] : (~p(s(bool,happ(s(fun(bool,bool),X204),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X204),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(sK6(X203,bool),X204,bool)) | s('type.option.option'(bool),X203) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X203)) )),
  inference(superposition,[],[f532,f458])).
fof(f31403,plain,(
  ( ! [X200,X199] : (~p(s(bool,happ(s(fun(bool,bool),X200),s(bool,X199)))) | p(s(bool,happ(s(fun(bool,bool),X200),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X200,bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f31323,f159])).
fof(f31323,plain,(
  ( ! [X200,X199] : (~p(s(bool,happ(s(fun(bool,bool),X200),s(bool,X199)))) | p(s(bool,happ(s(fun(bool,bool),X200),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X200,bool)) | s(bool,'F_0') = s(bool,X199)) ) | $spl0),
  inference(superposition,[],[f532,f7478])).
fof(f31307,plain,(
  ( ! [X158,X156,X159,X157,X160] : (~p(s(bool,happ(s(fun(bool,bool),X159),s(bool,X158)))) | p(s(bool,happ(s(fun(bool,bool),X159),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7('const.bool.IN_2'(s(X156,X157),s(fun(X156,bool),'const.pred_set.EMPTY_0')),X159,bool)) | s(bool,X158) = s(bool,X160) | s(bool,'F_0') = s(bool,X160)) ) | $spl0),
  inference(superposition,[],[f532,f2976])).
fof(f31304,plain,(
  ( ! [X149,X147,X150,X148] : (~p(s(bool,happ(s(fun(bool,bool),X150),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X150),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X147),'const.option.NONE_0'),s(bool,X148),s(fun(X147,bool),X149)),X150,bool)) | s(bool,'F_0') = s(bool,X148)) )),
  inference(superposition,[],[f532,f298])).
fof(f31302,plain,(
  ( ! [X142,X143,X141] : (~p(s(bool,happ(s(fun(bool,bool),X142),s(bool,X141)))) | p(s(bool,happ(s(fun(bool,bool),X142),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7('F_0',X142,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X143))) | s(bool,X141) = s(bool,X143)) ) | $spl0),
  inference(superposition,[],[f532,f3902])).
fof(f31298,plain,(
  ( ! [X127,X128,X129] : (~p(s(bool,happ(s(fun(bool,bool),X128),s(bool,X127)))) | p(s(bool,happ(s(fun(bool,bool),X128),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7('F_0',X128,bool)) | s(bool,X127) = s(bool,X129) | s(bool,'F_0') = s(bool,X129)) ) | $spl0),
  inference(superposition,[],[f532,f1632])).
fof(f31297,plain,(
  ( ! [X125,X126] : (~p(s(bool,happ(s(fun(bool,bool),X126),s(bool,X125)))) | p(s(bool,happ(s(fun(bool,bool),X126),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7('F_0',X126,bool)) | s(bool,'T_0') = s(bool,X125)) )),
  inference(superposition,[],[f532,f121])).
fof(f31291,plain,(
  ( ! [X107,X108,X106] : (~p(s(bool,happ(s(fun(bool,bool),X107),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X107),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X106,X107,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X108))) | s(bool,X106) = s(bool,X108)) ) | $spl0),
  inference(superposition,[],[f532,f14030])).
fof(f31290,plain,(
  ( ! [X103,X105,X104] : (~p(s(bool,happ(s(fun(bool,bool),X105),s(bool,X104)))) | p(s(bool,happ(s(fun(bool,bool),X105),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X103,X105,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X103))) | s(bool,'T_0') = s(bool,X104)) ) | $spl0),
  inference(superposition,[],[f532,f14030])).
fof(f31392,plain,(
  ( ! [X101,X102,X100] : (~p(s(bool,happ(s(fun(bool,bool),X102),s(bool,X101)))) | p(s(bool,happ(s(fun(bool,bool),X102),s(bool,'F_0')))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X101))) | s(bool,'T_0') = s(bool,sK7(X100,X102,bool))) ) | $spl0),
  inference(global_subsumption,[],[f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289])).
fof(f31289,plain,(
  ( ! [X101,X102,X100] : (~p(s(bool,happ(s(fun(bool,bool),X102),s(bool,X101)))) | p(s(bool,happ(s(fun(bool,bool),X102),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X100,X102,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X101))) | s(bool,'T_0') = s(bool,X100)) ) | $spl0),
  inference(superposition,[],[f532,f14030])).
fof(f31379,plain,(
  ( ! [X59,X60,X58] : (~p(s(bool,happ(s(fun(bool,bool),X60),s(bool,X59)))) | p(s(bool,happ(s(fun(bool,bool),X60),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X58,X60,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X58)))) ) | $spl0),
  inference(subsumption_resolution,[],[f31273,f159])).
fof(f31273,plain,(
  ( ! [X59,X60,X58] : (~p(s(bool,happ(s(fun(bool,bool),X60),s(bool,X59)))) | p(s(bool,happ(s(fun(bool,bool),X60),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X58,X60,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X58))) | s(bool,'F_0') = s(bool,X59)) ) | $spl0),
  inference(superposition,[],[f532,f3902])).
fof(f31372,plain,(
  ( ! [X19,X17,X18] : (~p(s(bool,happ(s(fun(bool,bool),X19),s(bool,X18)))) | p(s(bool,happ(s(fun(bool,bool),X19),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X17,X19,bool)) | s(bool,'F_0') = s(bool,X17)) ) | $spl0),
  inference(subsumption_resolution,[],[f31262,f159])).
fof(f31262,plain,(
  ( ! [X19,X17,X18] : (~p(s(bool,happ(s(fun(bool,bool),X19),s(bool,X18)))) | p(s(bool,happ(s(fun(bool,bool),X19),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X17,X19,bool)) | s(bool,'F_0') = s(bool,X18) | s(bool,'F_0') = s(bool,X17)) ) | $spl0),
  inference(superposition,[],[f532,f1632])).
fof(f31258,plain,(
  ( ! [X6,X7,X5] : (~p(s(bool,happ(s(fun(bool,bool),X7),s(bool,X6)))) | p(s(bool,happ(s(fun(bool,bool),X7),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X5,X7,bool)) | s(bool,'T_0') = s(bool,X6) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f532,f208])).
fof(f31257,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,happ(s(fun(bool,bool),X3),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X2,X3,bool)) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f532,f208])).
fof(f31371,plain,(
  ( ! [X14,X15] : (p(s(bool,happ(s(fun(bool,bool),X14),s(bool,'F_0')))) | ~p(s(bool,happ(s(fun(bool,bool),X14),s(bool,X15)))) | s(bool,'T_0') = s(bool,sK7(X15,sK6('const.option.SOME_1'(s(fun(bool,bool),X14)),fun(bool,bool)),bool))) )),
  inference(forward_demodulation,[],[f31255,f901])).
fof(f31255,plain,(
  ( ! [X14,X15] : (~p(s(bool,happ(s(fun(bool,bool),X14),s(bool,X15)))) | p(s(bool,happ(s(fun(bool,bool),sK6('const.option.SOME_1'(s(fun(bool,bool),X14)),fun(bool,bool))),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X15,sK6('const.option.SOME_1'(s(fun(bool,bool),X14)),fun(bool,bool)),bool))) )),
  inference(superposition,[],[f532,f901])).
fof(f31370,plain,(
  ( ! [X12,X10,X13,X11,X9] : (p(s(bool,happ(s(fun(bool,bool),'const.option.option_CASE_3'(s('type.option.option'(X9),X10),s(fun(bool,bool),X11),s(fun(X9,fun(bool,bool)),X12))),s(bool,'F_0')))) | ~p(s(bool,happ(s(fun(bool,bool),'const.option.option_CASE_3'(s('type.option.option'(X9),X10),s(fun(bool,bool),X11),s(fun(X9,fun(bool,bool)),X12))),s(bool,X13)))) | s(bool,'T_0') = s(bool,sK7(X13,happ(s(fun(fun(X9,fun(bool,bool)),fun(bool,bool)),happ(s(fun(fun(bool,bool),fun(fun(X9,fun(bool,bool)),fun(bool,bool))),happ(s(fun('type.option.option'(X9),fun(fun(bool,bool),fun(fun(X9,fun(bool,bool)),fun(bool,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X9),X10))),s(fun(bool,bool),X11))),s(fun(X9,fun(bool,bool)),X12)),bool))) )),
  inference(forward_demodulation,[],[f31254,f169])).
fof(f31254,plain,(
  ( ! [X12,X10,X13,X11,X9] : (~p(s(bool,happ(s(fun(bool,bool),'const.option.option_CASE_3'(s('type.option.option'(X9),X10),s(fun(bool,bool),X11),s(fun(X9,fun(bool,bool)),X12))),s(bool,X13)))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(fun(X9,fun(bool,bool)),fun(bool,bool)),happ(s(fun(fun(bool,bool),fun(fun(X9,fun(bool,bool)),fun(bool,bool))),happ(s(fun('type.option.option'(X9),fun(fun(bool,bool),fun(fun(X9,fun(bool,bool)),fun(bool,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X9),X10))),s(fun(bool,bool),X11))),s(fun(X9,fun(bool,bool)),X12))),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X13,happ(s(fun(fun(X9,fun(bool,bool)),fun(bool,bool)),happ(s(fun(fun(bool,bool),fun(fun(X9,fun(bool,bool)),fun(bool,bool))),happ(s(fun('type.option.option'(X9),fun(fun(bool,bool),fun(fun(X9,fun(bool,bool)),fun(bool,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X9),X10))),s(fun(bool,bool),X11))),s(fun(X9,fun(bool,bool)),X12)),bool))) )),
  inference(superposition,[],[f532,f169])).
fof(f31369,plain,(
  ( ! [X6,X4,X8,X7,X5] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(X4,fun(bool,bool)),X7),s(X4,X5))),s(bool,'F_0')))) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(X4,fun(bool,bool)),X7),s(X4,X5))),s(bool,X8)))) | s(bool,'T_0') = s(bool,sK7(X8,'const.option.option_CASE_3'(s('type.option.option'(X4),'const.option.SOME_1'(s(X4,X5))),s(fun(bool,bool),X6),s(fun(X4,fun(bool,bool)),X7)),bool))) )),
  inference(forward_demodulation,[],[f31253,f168])).
fof(f31253,plain,(
  ( ! [X6,X4,X8,X7,X5] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(X4,fun(bool,bool)),X7),s(X4,X5))),s(bool,X8)))) | p(s(bool,happ(s(fun(bool,bool),'const.option.option_CASE_3'(s('type.option.option'(X4),'const.option.SOME_1'(s(X4,X5))),s(fun(bool,bool),X6),s(fun(X4,fun(bool,bool)),X7))),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X8,'const.option.option_CASE_3'(s('type.option.option'(X4),'const.option.SOME_1'(s(X4,X5))),s(fun(bool,bool),X6),s(fun(X4,fun(bool,bool)),X7)),bool))) )),
  inference(superposition,[],[f532,f168])).
fof(f31368,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun(bool,bool),X1),s(bool,'F_0')))) | ~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,X3)))) | s(bool,'T_0') = s(bool,sK7(X3,'const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(fun(bool,bool),X1),s(fun(X0,fun(bool,bool)),X2)),bool))) )),
  inference(forward_demodulation,[],[f31252,f166])).
fof(f31252,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,X3)))) | p(s(bool,happ(s(fun(bool,bool),'const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(fun(bool,bool),X1),s(fun(X0,fun(bool,bool)),X2))),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X3,'const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(fun(bool,bool),X1),s(fun(X0,fun(bool,bool)),X2)),bool))) )),
  inference(superposition,[],[f532,f166])).
fof(f31129,plain,(
  ( ! [X329,X330] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X330),s(bool,'F_0'))) | s(bool,sK6(X329,bool)) = s(bool,sK7(sK6(X329,bool),X330,bool)) | s('type.option.option'(bool),X329) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X329)) ) | $spl0),
  inference(superposition,[],[f2789,f1766])).
fof(f31128,plain,(
  ( ! [X327,X328] : (~p(s(bool,happ(s(fun(bool,bool),X328),s(bool,'F_0')))) | s(bool,sK7(sK6(X327,bool),X328,bool)) = s(bool,sK7(sK7(sK6(X327,bool),X328,bool),X328,bool)) | s('type.option.option'(bool),X327) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X327)) ) | $spl0),
  inference(superposition,[],[f2788,f1766])).
fof(f31127,plain,(
  ( ! [X325,X326] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X326),s(bool,'F_0'))) | s(bool,sK6(X325,bool)) = s(bool,sK7(sK6(X325,bool),X326,bool)) | s('type.option.option'(bool),X325) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X325)) ) | $spl0),
  inference(superposition,[],[f1756,f1766])).
fof(f31125,plain,(
  ( ! [X323,X322] : (~p(s(bool,happ(s(fun(bool,bool),X323),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X323),s(bool,sK7(sK6(X322,bool),X323,bool)))) | s('type.option.option'(bool),X322) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X322)) ) | $spl0),
  inference(superposition,[],[f535,f1766])).
fof(f31124,plain,(
  ( ! [X321,X320] : (s('type.option.option'(bool),X321) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,sK6(X320,bool)) = s(bool,sK6(X321,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X321) | s('type.option.option'(bool),X320) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X320)) ) | $spl0),
  inference(superposition,[],[f459,f1766])).
fof(f31123,plain,(
  ( ! [X316,X318,X317,X319] : (~p(s(bool,happ(s(fun(bool,bool),X317),s(bool,'F_0')))) | s(bool,sK6(X316,bool)) = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X318),'const.option.NONE_0'),s(bool,sK6(X316,bool)),s(fun(X318,bool),X319)),X317,bool)) | s('type.option.option'(bool),X316) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X316)) ) | $spl0),
  inference(superposition,[],[f447,f1766])).
fof(f31122,plain,(
  ( ! [X313,X315,X312,X314] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X313))) | s(bool,sK6(X312,bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X314),'const.option.NONE_0'),s(bool,X313),s(fun(X314,bool),X315))) | s('type.option.option'(bool),X312) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X312)) ) | $spl0),
  inference(superposition,[],[f363,f1766])).
fof(f31121,plain,(
  ( ! [X308,X310,X309,X311] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X309))) | s(bool,X309) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X310),'const.option.NONE_0'),s(bool,sK6(X308,bool)),s(fun(X310,bool),X311))) | s('type.option.option'(bool),X308) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X308)) ) | $spl0),
  inference(superposition,[],[f363,f1766])).
fof(f31113,plain,(
  ( ! [X288,X289] : (~p(s(bool,happ(s(fun(bool,bool),X289),s(bool,'F_0')))) | s(bool,sK6(X288,bool)) = s(bool,sK7(sK6(X288,bool),X289,bool)) | s('type.option.option'(bool),X288) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X288)) ) | $spl0),
  inference(superposition,[],[f160,f1766])).
fof(f31112,plain,(
  ( ! [X285,X287,X286] : (~p(s(bool,happ(s(fun(bool,bool),X286),s(bool,'F_0')))) | p(s(bool,happ(s(fun(bool,bool),X286),s(bool,X287)))) | s(bool,X287) != s(bool,sK6(X285,bool)) | s('type.option.option'(bool),X285) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X285)) ) | $spl0),
  inference(superposition,[],[f159,f1766])).
fof(f31110,plain,(
  ( ! [X282,X281] : (s(bool,'F_0') != s(bool,X282) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X282))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6(X281,bool)))) | s('type.option.option'(bool),X281) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X281)) ) | $spl0),
  inference(superposition,[],[f158,f1766])).
fof(f31108,plain,(
  ( ! [X277,X278] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X278))) | s(bool,X278) = s(bool,sK6(X277,bool)) | s('type.option.option'(bool),X277) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X277)) ) | $spl0),
  inference(superposition,[],[f157,f1766])).
fof(f31138,plain,(
  ( ! [X231,X230] : (s(bool,X231) = s(bool,sK6('const.option.SOME_1'(s(bool,sK6(X230,bool))),bool)) | s(bool,'T_0') = s(bool,X231) | s('type.option.option'(bool),X230) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X230)) ) | $spl0),
  inference(trivial_inequality_removal,[],[f31086])).
fof(f31086,plain,(
  ( ! [X231,X230] : (s(bool,'F_0') != s(bool,'F_0') | s(bool,X231) = s(bool,sK6('const.option.SOME_1'(s(bool,sK6(X230,bool))),bool)) | s(bool,'T_0') = s(bool,X231) | s('type.option.option'(bool),X230) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X230)) ) | $spl0),
  inference(superposition,[],[f14507,f1766])).
fof(f31071,plain,(
  ( ! [X198,X200,X199,X201] : (s(bool,'F_0') != s(bool,X199) | s(bool,sK6(X198,bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X200),'const.option.NONE_0'),s(bool,X199),s(fun(X200,bool),X201))) | s('type.option.option'(bool),X198) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X198)) ) | $spl0),
  inference(superposition,[],[f9763,f1766])).
fof(f31070,plain,(
  ( ! [X196,X194,X197,X195] : (s(bool,'F_0') != s(bool,X195) | s(bool,X195) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X196),'const.option.NONE_0'),s(bool,sK6(X194,bool)),s(fun(X196,bool),X197))) | s('type.option.option'(bool),X194) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X194)) ) | $spl0),
  inference(superposition,[],[f9763,f1766])).
fof(f31142,plain,(
  ( ! [X165,X163,X164] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X164),'const.option.NONE_0'),s(bool,sK6(X163,bool)),s(fun(X164,bool),X165))) | s('type.option.option'(bool),X163) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X163)) ) | $spl0),
  inference(trivial_inequality_removal,[],[f31048])).
fof(f31048,plain,(
  ( ! [X165,X163,X164] : (s(bool,'F_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X164),'const.option.NONE_0'),s(bool,sK6(X163,bool)),s(fun(X164,bool),X165))) | s('type.option.option'(bool),X163) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X163)) ) | $spl0),
  inference(superposition,[],[f4508,f1766])).
fof(f31220,plain,(
  ( ! [X127,X125,X126,X124] : (s(bool,sK6(X124,bool)) = s(bool,happ(s(fun(X125,bool),X126),s(X125,X127))) | s(X125,X127) = s(X125,sK7(X127,X126,X125)) | s('type.option.option'(bool),X124) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X124)) ) | $spl0),
  inference(subsumption_resolution,[],[f31032,f179])).
fof(f31032,plain,(
  ( ! [X127,X125,X126,X124] : (p(s(bool,'F_0')) | s(bool,sK6(X124,bool)) = s(bool,happ(s(fun(X125,bool),X126),s(X125,X127))) | s(X125,X127) = s(X125,sK7(X127,X126,X125)) | s('type.option.option'(bool),X124) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X124)) ) | $spl0),
  inference(superposition,[],[f2790,f1766])).
fof(f31216,plain,(
  ( ! [X107,X105,X106] : (s(bool,X106) = s(bool,sK6(X105,bool)) | s(bool,X106) = s(bool,X107) | s(bool,'F_0') = s(bool,X107) | s('type.option.option'(bool),X105) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X105)) ) | $spl0),
  inference(subsumption_resolution,[],[f31024,f179])).
fof(f31024,plain,(
  ( ! [X107,X105,X106] : (p(s(bool,'F_0')) | s(bool,X106) = s(bool,sK6(X105,bool)) | s(bool,X106) = s(bool,X107) | s(bool,'F_0') = s(bool,X107) | s('type.option.option'(bool),X105) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X105)) ) | $spl0),
  inference(superposition,[],[f2416,f1766])).
fof(f31152,plain,(
  ( ! [X72,X73] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X73))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6(X72,bool)))) | s(bool,'T_0') = s(bool,X73) | s('type.option.option'(bool),X72) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X72)) ) | $spl0),
  inference(trivial_inequality_removal,[],[f31009])).
fof(f31009,plain,(
  ( ! [X72,X73] : (s(bool,'F_0') != s(bool,'F_0') | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X73))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6(X72,bool)))) | s(bool,'T_0') = s(bool,X73) | s('type.option.option'(bool),X72) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X72)) ) | $spl0),
  inference(superposition,[],[f404,f1766])).
fof(f31210,plain,(
  ( ! [X41,X42] : (p(s(bool,X42)) | s(bool,X42) = s(bool,sK6(X41,bool)) | s('type.option.option'(bool),X41) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X41)) ) | $spl0),
  inference(subsumption_resolution,[],[f30994,f179])).
fof(f30994,plain,(
  ( ! [X41,X42] : (p(s(bool,'F_0')) | p(s(bool,X42)) | s(bool,X42) = s(bool,sK6(X41,bool)) | s('type.option.option'(bool),X41) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X41)) ) | $spl0),
  inference(superposition,[],[f162,f1766])).
fof(f31154,plain,(
  ( ! [X39] : (~p(s(bool,sK6(X39,bool))) | s('type.option.option'(bool),X39) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X39)) ) | $spl0),
  inference(trivial_inequality_removal,[],[f30992])).
fof(f30992,plain,(
  ( ! [X39] : (s(bool,'F_0') != s(bool,'F_0') | ~p(s(bool,sK6(X39,bool))) | s('type.option.option'(bool),X39) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X39)) ) | $spl0),
  inference(superposition,[],[f127,f1766])).
fof(f31209,plain,(
  ( ! [X37] : (s(bool,'T_0') != s(bool,sK6(X37,bool)) | s('type.option.option'(bool),X37) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X37)) ) | $spl0),
  inference(subsumption_resolution,[],[f30990,f179])).
fof(f30990,plain,(
  ( ! [X37] : (p(s(bool,'F_0')) | s(bool,'T_0') != s(bool,sK6(X37,bool)) | s('type.option.option'(bool),X37) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X37)) ) | $spl0),
  inference(superposition,[],[f123,f1766])).
fof(f30960,plain,(
  ( ! [X101,X100] : (s(bool,'T_0') != s(bool,happ(s(fun('type.option.option'(bool),bool),X101),s('type.option.option'(bool),X100))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'T_0')),X101,'type.option.option'(bool))) | s(bool,'F_0') = s(bool,sK6(X100,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X100)) ) | $spl0),
  inference(superposition,[],[f2789,f1766])).
fof(f30959,plain,(
  ( ! [X99,X98] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X99),s('type.option.option'(bool),X98)))) | s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'T_0')),X99,'type.option.option'(bool))) = s('type.option.option'(bool),sK7(sK7('const.option.SOME_1'(s(bool,'T_0')),X99,'type.option.option'(bool)),X99,'type.option.option'(bool))) | s(bool,'F_0') = s(bool,sK6(X98,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X98)) ) | $spl0),
  inference(superposition,[],[f2788,f1766])).
fof(f30958,plain,(
  ( ! [X97,X96] : (s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X97),s('type.option.option'(bool),X96))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'T_0')),X97,'type.option.option'(bool))) | s(bool,'F_0') = s(bool,sK6(X96,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X96)) ) | $spl0),
  inference(superposition,[],[f1756,f1766])).
fof(f30956,plain,(
  ( ! [X94,X93] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X94),s('type.option.option'(bool),X93)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X94),s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'T_0')),X94,'type.option.option'(bool))))) | s(bool,'F_0') = s(bool,sK6(X93,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X93)) ) | $spl0),
  inference(superposition,[],[f535,f1766])).
fof(f30955,plain,(
  ( ! [X92,X91] : (s('type.option.option'('type.option.option'(bool)),X92) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X91))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),sK6(X92,'type.option.option'(bool))) | s('type.option.option'('type.option.option'(bool)),'const.option.NONE_0') = s('type.option.option'('type.option.option'(bool)),X92) | s(bool,'F_0') = s(bool,sK6(X91,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X91)) ) | $spl0),
  inference(superposition,[],[f459,f1766])).
fof(f30954,plain,(
  ( ! [X90,X88,X87,X89] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X88),s('type.option.option'(bool),X87)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),sK7('const.option.option_CASE_3'(s('type.option.option'(X89),'const.option.NONE_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s(fun(X89,'type.option.option'(bool)),X90)),X88,'type.option.option'(bool))) | s(bool,'F_0') = s(bool,sK6(X87,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X87)) ) | $spl0),
  inference(superposition,[],[f447,f1766])).
fof(f30953,plain,(
  ( ! [X85,X83,X86,X84] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X83))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X84))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X85),'const.option.NONE_0'),s('type.option.option'(bool),X84),s(fun(X85,'type.option.option'(bool)),X86))) | s(bool,'F_0') = s(bool,sK6(X83,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X83)) ) | $spl0),
  inference(superposition,[],[f363,f1766])).
fof(f30952,plain,(
  ( ! [X80,X81,X79,X82] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X79))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X80))) | s('type.option.option'(bool),X80) = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X81),'const.option.NONE_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s(fun(X81,'type.option.option'(bool)),X82))) | s(bool,'F_0') = s(bool,sK6(X79,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X79)) ) | $spl0),
  inference(superposition,[],[f363,f1766])).
fof(f30944,plain,(
  ( ! [X59,X60] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X60),s('type.option.option'(bool),X59)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'T_0')),X60,'type.option.option'(bool))) | s(bool,'F_0') = s(bool,sK6(X59,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X59)) ) | $spl0),
  inference(superposition,[],[f160,f1766])).
fof(f30943,plain,(
  ( ! [X57,X58,X56] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X57),s('type.option.option'(bool),X56)))) | p(s(bool,happ(s(fun('type.option.option'(bool),bool),X57),s('type.option.option'(bool),X58)))) | s('type.option.option'(bool),X58) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,sK6(X56,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X56)) ) | $spl0),
  inference(superposition,[],[f159,f1766])).
fof(f30941,plain,(
  ( ! [X52,X53] : (s('type.option.option'(bool),X52) != s('type.option.option'(bool),X53) | s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X53))) = s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) | s(bool,'F_0') = s(bool,sK6(X52,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X52)) ) | $spl0),
  inference(superposition,[],[f158,f1766])).
fof(f30939,plain,(
  ( ! [X48,X49] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X48))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X49))) | s('type.option.option'(bool),X49) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,sK6(X48,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X48)) ) | $spl0),
  inference(superposition,[],[f157,f1766])).
fof(f30934,plain,(
  ( ! [X37,X35,X36,X34] : (s('type.option.option'(bool),X34) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X35))) | s(bool,X35) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X36),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X36,bool),X37))) | s(bool,'F_0') = s(bool,sK6(X34,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X34)) ) | $spl0),
  inference(superposition,[],[f363,f1766])).
fof(f30933,plain,(
  ( ! [X30,X33,X31,X32] : (s('type.option.option'(bool),X30) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X31))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X32),'const.option.NONE_0'),s(bool,X31),s(fun(X32,bool),X33))) | s(bool,'F_0') = s(bool,sK6(X30,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X30)) ) | $spl0),
  inference(superposition,[],[f363,f1766])).
fof(f30931,plain,(
  ( ! [X28,X26,X27,X25] : (s(X26,happ(s(fun(bool,X26),X27),s(bool,'T_0'))) = s(X26,'const.option.option_CASE_3'(s('type.option.option'(bool),X25),s(X26,X28),s(fun(bool,X26),X27))) | s(bool,'F_0') = s(bool,sK6(X25,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X25)) ) | $spl0),
  inference(superposition,[],[f168,f1766])).
fof(f30921,plain,(
  ( ! [X138,X139,X137] : (s(X139,f(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) != s(X139,g(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) | s(fun('type.option.option'(bool),X139),X137) = s(fun('type.option.option'(bool),X139),X138) | s(bool,'F_0') = s(bool,sK6(sK8(X137,X138,X139,'type.option.option'(bool)),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),sK8(X137,X138,X139,'type.option.option'(bool)))) ) | $spl0),
  inference(superposition,[],[f167,f1766])).
fof(f30920,plain,(
  ( ! [X136,X135] : (p(s(bool,happ(s(fun('type.option.option'(bool),bool),X136),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0')))))) | ~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X136),s('type.option.option'(bool),X135)))) | s(bool,'F_0') = s(bool,sK6(sK7(X135,X136,'type.option.option'(bool)),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),sK7(X135,X136,'type.option.option'(bool)))) ) | $spl0),
  inference(superposition,[],[f161,f1766])).
fof(f30918,plain,(
  ( ! [X133] : (s('type.option.option'('type.option.option'(bool)),X133) = s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) | s('type.option.option'('type.option.option'(bool)),'const.option.NONE_0') = s('type.option.option'('type.option.option'(bool)),X133) | s(bool,'F_0') = s(bool,sK6(sK6(X133,'type.option.option'(bool)),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),sK6(X133,'type.option.option'(bool)))) ) | $spl0),
  inference(superposition,[],[f148,f1766])).
fof(f30914,plain,(
  ( ! [X121,X120,X119] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),f(s(X119,sK8(X120,X121,'type.option.option'(bool),X119)))) | s(fun(X119,'type.option.option'(bool)),X120) = s(fun(X119,'type.option.option'(bool)),X121) | s(bool,'F_0') = s(bool,sK6(g(s(X119,sK8(X120,X121,'type.option.option'(bool),X119))),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),g(s(X119,sK8(X120,X121,'type.option.option'(bool),X119))))) ) | $spl0),
  inference(superposition,[],[f167,f1766])).
fof(f30909,plain,(
  ( ! [X105,X106] : (s(bool,'T_0') != s(bool,happ(s(fun('type.option.option'(bool),bool),X106),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) | s('type.option.option'(bool),X105) = s('type.option.option'(bool),sK7(X105,X106,'type.option.option'(bool))) | s(bool,'F_0') = s(bool,sK6(X105,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X105)) ) | $spl0),
  inference(superposition,[],[f2789,f1766])).
fof(f30908,plain,(
  ( ! [X103,X104] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X104),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0')))))) | s('type.option.option'(bool),sK7(X103,X104,'type.option.option'(bool))) = s('type.option.option'(bool),sK7(sK7(X103,X104,'type.option.option'(bool)),X104,'type.option.option'(bool))) | s(bool,'F_0') = s(bool,sK6(X103,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X103)) ) | $spl0),
  inference(superposition,[],[f2788,f1766])).
fof(f30907,plain,(
  ( ! [X101,X102] : (s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X102),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) | s('type.option.option'(bool),X101) = s('type.option.option'(bool),sK7(X101,X102,'type.option.option'(bool))) | s(bool,'F_0') = s(bool,sK6(X101,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X101)) ) | $spl0),
  inference(superposition,[],[f1756,f1766])).
fof(f30905,plain,(
  ( ! [X99,X98] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X99),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0')))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X99),s('type.option.option'(bool),sK7(X98,X99,'type.option.option'(bool))))) | s(bool,'F_0') = s(bool,sK6(X98,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X98)) ) | $spl0),
  inference(superposition,[],[f535,f1766])).
fof(f30904,plain,(
  ( ! [X97,X96] : (s('type.option.option'('type.option.option'(bool)),X97) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) | s('type.option.option'(bool),X96) = s('type.option.option'(bool),sK6(X97,'type.option.option'(bool))) | s('type.option.option'('type.option.option'(bool)),'const.option.NONE_0') = s('type.option.option'('type.option.option'(bool)),X97) | s(bool,'F_0') = s(bool,sK6(X96,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X96)) ) | $spl0),
  inference(superposition,[],[f459,f1766])).
fof(f30903,plain,(
  ( ! [X94,X92,X95,X93] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X93),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0')))))) | s('type.option.option'(bool),X92) = s('type.option.option'(bool),sK7('const.option.option_CASE_3'(s('type.option.option'(X94),'const.option.NONE_0'),s('type.option.option'(bool),X92),s(fun(X94,'type.option.option'(bool)),X95)),X93,'type.option.option'(bool))) | s(bool,'F_0') = s(bool,sK6(X92,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X92)) ) | $spl0),
  inference(superposition,[],[f447,f1766])).
fof(f30902,plain,(
  ( ! [X90,X88,X91,X89] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X89))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) | s('type.option.option'(bool),X88) = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X90),'const.option.NONE_0'),s('type.option.option'(bool),X89),s(fun(X90,'type.option.option'(bool)),X91))) | s(bool,'F_0') = s(bool,sK6(X88,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X88)) ) | $spl0),
  inference(superposition,[],[f363,f1766])).
fof(f30901,plain,(
  ( ! [X87,X85,X86,X84] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X85))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) | s('type.option.option'(bool),X85) = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X86),'const.option.NONE_0'),s('type.option.option'(bool),X84),s(fun(X86,'type.option.option'(bool)),X87))) | s(bool,'F_0') = s(bool,sK6(X84,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X84)) ) | $spl0),
  inference(superposition,[],[f363,f1766])).
fof(f30893,plain,(
  ( ! [X64,X65] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X65),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0')))))) | s('type.option.option'(bool),X64) = s('type.option.option'(bool),sK7(X64,X65,'type.option.option'(bool))) | s(bool,'F_0') = s(bool,sK6(X64,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X64)) ) | $spl0),
  inference(superposition,[],[f160,f1766])).
fof(f30892,plain,(
  ( ! [X61,X62,X63] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X62),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0')))))) | p(s(bool,happ(s(fun('type.option.option'(bool),bool),X62),s('type.option.option'(bool),X63)))) | s('type.option.option'(bool),X61) != s('type.option.option'(bool),X63) | s(bool,'F_0') = s(bool,sK6(X61,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X61)) ) | $spl0),
  inference(superposition,[],[f159,f1766])).
fof(f30890,plain,(
  ( ! [X57,X58] : (s('type.option.option'(bool),X58) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X57))) = s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X58))) | s(bool,'F_0') = s(bool,sK6(X57,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X57)) ) | $spl0),
  inference(superposition,[],[f158,f1766])).
fof(f30888,plain,(
  ( ! [X54,X53] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X54))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) | s('type.option.option'(bool),X53) = s('type.option.option'(bool),X54) | s(bool,'F_0') = s(bool,sK6(X53,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X53)) ) | $spl0),
  inference(superposition,[],[f157,f1766])).
fof(f30813,plain,(
  ( ! [X0,X1] : (s('type.option.option'(bool),X0) = s('type.option.option'(bool),X1) | s(bool,'F_0') = s(bool,sK6(X1,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X1) | s(bool,'F_0') = s(bool,sK6(X0,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X0)) ) | $spl0),
  inference(superposition,[],[f1766,f1766])).
fof(f30791,plain,(
  ( ! [X6,X8,X7] : (s('type.option.option'(bool),X7) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X6))) | s(bool,'F_0') = s(bool,sK6(X7,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X7) | s(bool,X6) = s(bool,X8) | s(bool,'T_0') = s(bool,X8)) ) | $spl0),
  inference(superposition,[],[f1766,f208])).
fof(f30790,plain,(
  ( ! [X4,X5,X3] : (s('type.option.option'(bool),X4) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X3))) | s(bool,'F_0') = s(bool,sK6(X4,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X4) | s(bool,X5) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X3) = s(bool,X5)) ) | $spl0),
  inference(superposition,[],[f1766,f9397])).
fof(f30789,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'(bool),X1) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0))) | s(bool,'F_0') = s(bool,sK6(X1,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X1) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X2))) | s(bool,X0) = s(bool,X2)) ) | $spl0),
  inference(superposition,[],[f1766,f14030])).
fof(f31182,plain,(
  ( ! [X26] : (s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X26) | s('type.option.option'(bool),X26) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,sK6(sK6('const.option.SOME_1'(s('type.option.option'(bool),X26)),'type.option.option'(bool)),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f30788,f901])).
fof(f30788,plain,(
  ( ! [X26] : (s('type.option.option'(bool),X26) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,sK6(sK6('const.option.SOME_1'(s('type.option.option'(bool),X26)),'type.option.option'(bool)),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),sK6('const.option.SOME_1'(s('type.option.option'(bool),X26)),'type.option.option'(bool)))) ) | $spl0),
  inference(superposition,[],[f1766,f901])).
fof(f31181,plain,(
  ( ! [X24,X23,X25,X22] : (s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X22),X23),s('type.option.option'(bool),X24),s(fun(X22,'type.option.option'(bool)),X25))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X22),X23),s('type.option.option'(bool),X24),s(fun(X22,'type.option.option'(bool)),X25))) | s(bool,'F_0') = s(bool,sK6(happ(s(fun(fun(X22,'type.option.option'(bool)),'type.option.option'(bool)),happ(s(fun('type.option.option'(bool),fun(fun(X22,'type.option.option'(bool)),'type.option.option'(bool))),happ(s(fun('type.option.option'(X22),fun('type.option.option'(bool),fun(fun(X22,'type.option.option'(bool)),'type.option.option'(bool)))),'const.option.option_CASE_0'),s('type.option.option'(X22),X23))),s('type.option.option'(bool),X24))),s(fun(X22,'type.option.option'(bool)),X25)),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f30787,f169])).
fof(f30787,plain,(
  ( ! [X24,X23,X25,X22] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X22),X23),s('type.option.option'(bool),X24),s(fun(X22,'type.option.option'(bool)),X25))) | s(bool,'F_0') = s(bool,sK6(happ(s(fun(fun(X22,'type.option.option'(bool)),'type.option.option'(bool)),happ(s(fun('type.option.option'(bool),fun(fun(X22,'type.option.option'(bool)),'type.option.option'(bool))),happ(s(fun('type.option.option'(X22),fun('type.option.option'(bool),fun(fun(X22,'type.option.option'(bool)),'type.option.option'(bool)))),'const.option.option_CASE_0'),s('type.option.option'(X22),X23))),s('type.option.option'(bool),X24))),s(fun(X22,'type.option.option'(bool)),X25)),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),happ(s(fun(fun(X22,'type.option.option'(bool)),'type.option.option'(bool)),happ(s(fun('type.option.option'(bool),fun(fun(X22,'type.option.option'(bool)),'type.option.option'(bool))),happ(s(fun('type.option.option'(X22),fun('type.option.option'(bool),fun(fun(X22,'type.option.option'(bool)),'type.option.option'(bool)))),'const.option.option_CASE_0'),s('type.option.option'(X22),X23))),s('type.option.option'(bool),X24))),s(fun(X22,'type.option.option'(bool)),X25)))) ) | $spl0),
  inference(superposition,[],[f1766,f169])).
fof(f31180,plain,(
  ( ! [X21,X19,X20,X18] : (s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),happ(s(fun(X18,'type.option.option'(bool)),X21),s(X18,X19))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),happ(s(fun(X18,'type.option.option'(bool)),X21),s(X18,X19))) | s(bool,'F_0') = s(bool,sK6('const.option.option_CASE_3'(s('type.option.option'(X18),'const.option.SOME_1'(s(X18,X19))),s('type.option.option'(bool),X20),s(fun(X18,'type.option.option'(bool)),X21)),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f30786,f168])).
fof(f30786,plain,(
  ( ! [X21,X19,X20,X18] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),happ(s(fun(X18,'type.option.option'(bool)),X21),s(X18,X19))) | s(bool,'F_0') = s(bool,sK6('const.option.option_CASE_3'(s('type.option.option'(X18),'const.option.SOME_1'(s(X18,X19))),s('type.option.option'(bool),X20),s(fun(X18,'type.option.option'(bool)),X21)),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X18),'const.option.SOME_1'(s(X18,X19))),s('type.option.option'(bool),X20),s(fun(X18,'type.option.option'(bool)),X21)))) ) | $spl0),
  inference(superposition,[],[f1766,f168])).
fof(f31179,plain,(
  ( ! [X17,X15,X16] : (s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X16) | s('type.option.option'(bool),X16) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,sK6('const.option.option_CASE_3'(s('type.option.option'(X15),'const.option.NONE_0'),s('type.option.option'(bool),X16),s(fun(X15,'type.option.option'(bool)),X17)),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f30785,f166])).
fof(f30785,plain,(
  ( ! [X17,X15,X16] : (s('type.option.option'(bool),X16) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,sK6('const.option.option_CASE_3'(s('type.option.option'(X15),'const.option.NONE_0'),s('type.option.option'(bool),X16),s(fun(X15,'type.option.option'(bool)),X17)),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X15),'const.option.NONE_0'),s('type.option.option'(bool),X16),s(fun(X15,'type.option.option'(bool)),X17)))) ) | $spl0),
  inference(superposition,[],[f1766,f166])).
fof(f30576,plain,(
  ( ! [X231,X229,X233,X230,X234,X232] : (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X229),X230),s(bool,X231),s(fun(X229,bool),X232)))) | s(fun(X229,bool),X232) = s(fun(X229,bool),sK7('const.option.option_CASE_3'(s('type.option.option'(X233),'const.option.NONE_0'),s(fun(X229,bool),X232),s(fun(X233,fun(X229,bool)),X234)),happ(s(fun(bool,fun(fun(X229,bool),bool)),happ(s(fun('type.option.option'(X229),fun(bool,fun(fun(X229,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X229),X230))),s(bool,X231)),fun(X229,bool)))) )),
  inference(superposition,[],[f447,f169])).
fof(f30665,plain,(
  ( ! [X218,X216,X220,X219,X217,X221] : (s(X216,X218) = s(X216,sK7('const.option.option_CASE_3'(s('type.option.option'(X219),'const.option.NONE_0'),s(X216,X218),s(fun(X219,X216),X220)),X217,X216)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X221))) | s(bool,X221) = s(bool,happ(s(fun(X216,bool),X217),s(X216,X218)))) ) | $spl0),
  inference(subsumption_resolution,[],[f30574,f114])).
fof(f30574,plain,(
  ( ! [X218,X216,X220,X219,X217,X221] : (~p(s(bool,'T_0')) | s(X216,X218) = s(X216,sK7('const.option.option_CASE_3'(s('type.option.option'(X219),'const.option.NONE_0'),s(X216,X218),s(fun(X219,X216),X220)),X217,X216)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X221))) | s(bool,X221) = s(bool,happ(s(fun(X216,bool),X217),s(X216,X218)))) ) | $spl0),
  inference(superposition,[],[f447,f14030])).
fof(f30657,plain,(
  ( ! [X154,X152,X151,X155,X153] : (s(X151,X153) = s(X151,sK7('const.option.option_CASE_3'(s('type.option.option'(X154),'const.option.NONE_0'),s(X151,X153),s(fun(X154,X151),X155)),X152,X151)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X151,bool),X152),s(X151,X153)))))) ) | $spl0),
  inference(subsumption_resolution,[],[f30656,f114])).
fof(f30656,plain,(
  ( ! [X154,X152,X151,X155,X153] : (~p(s(bool,'T_0')) | s(X151,X153) = s(X151,sK7('const.option.option_CASE_3'(s('type.option.option'(X154),'const.option.NONE_0'),s(X151,X153),s(fun(X154,X151),X155)),X152,X151)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X151,bool),X152),s(X151,X153)))))) ) | $spl0),
  inference(forward_demodulation,[],[f30563,f901])).
fof(f30563,plain,(
  ( ! [X154,X152,X151,X155,X153] : (~p(s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) | s(X151,X153) = s(X151,sK7('const.option.option_CASE_3'(s('type.option.option'(X154),'const.option.NONE_0'),s(X151,X153),s(fun(X154,X151),X155)),X152,X151)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X151,bool),X152),s(X151,X153)))))) ) | $spl0),
  inference(superposition,[],[f447,f8984])).
fof(f30639,plain,(
  ( ! [X14,X12,X10,X15,X13,X11] : (s(X10,X12) = s(X10,sK7('const.option.option_CASE_3'(s('type.option.option'(X13),'const.option.NONE_0'),s(X10,X12),s(fun(X13,X10),X14)),X11,X10)) | s(bool,X15) = s(bool,happ(s(fun(X10,bool),X11),s(X10,X12))) | s(bool,'T_0') = s(bool,X15)) )),
  inference(subsumption_resolution,[],[f30540,f114])).
fof(f30540,plain,(
  ( ! [X14,X12,X10,X15,X13,X11] : (~p(s(bool,'T_0')) | s(X10,X12) = s(X10,sK7('const.option.option_CASE_3'(s('type.option.option'(X13),'const.option.NONE_0'),s(X10,X12),s(fun(X13,X10),X14)),X11,X10)) | s(bool,X15) = s(bool,happ(s(fun(X10,bool),X11),s(X10,X12))) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f447,f208])).
fof(f30537,plain,(
  ( ! [X414,X416,X415,X417] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X415),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))) | s('type.option.option'(bool),X414) = s('type.option.option'(bool),sK7('const.option.option_CASE_3'(s('type.option.option'(X416),'const.option.NONE_0'),s('type.option.option'(bool),X414),s(fun(X416,'type.option.option'(bool)),X417)),X415,'type.option.option'(bool))) | s(bool,'T_0') = s(bool,sK6(X414,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X414)) )),
  inference(superposition,[],[f447,f458])).
fof(f30536,plain,(
  ( ! [X412,X410,X413,X409,X411] : (~p(s(bool,happ(s(fun('type.option.option'(X409),bool),X411),s('type.option.option'(X409),X410)))) | s('type.option.option'(X409),'const.option.SOME_1'(s(X409,sK6(X410,X409)))) = s('type.option.option'(X409),sK7('const.option.option_CASE_3'(s('type.option.option'(X412),'const.option.NONE_0'),s('type.option.option'(X409),'const.option.SOME_1'(s(X409,sK6(X410,X409)))),s(fun(X412,'type.option.option'(X409)),X413)),X411,'type.option.option'(X409))) | s('type.option.option'(X409),'const.option.NONE_0') = s('type.option.option'(X409),X410)) )),
  inference(superposition,[],[f447,f148])).
fof(f30638,plain,(
  ( ! [X408,X405,X407,X406] : (s(bool,'T_0') = s(bool,X405) | ~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X406),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X405)))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK7('const.option.option_CASE_3'(s('type.option.option'(X407),'const.option.NONE_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s(fun(X407,'type.option.option'(bool)),X408)),X406,'type.option.option'(bool)))) ) | $spl0),
  inference(forward_demodulation,[],[f30535,f901])).
fof(f30535,plain,(
  ( ! [X408,X405,X407,X406] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X406),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X405)))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK7('const.option.option_CASE_3'(s('type.option.option'(X407),'const.option.NONE_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s(fun(X407,'type.option.option'(bool)),X408)),X406,'type.option.option'(bool))) | s(bool,X405) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f447,f8984])).
fof(f30534,plain,(
  ( ! [X401,X403,X404,X402] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X402),s('type.option.option'(bool),X401)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK7('const.option.option_CASE_3'(s('type.option.option'(X403),'const.option.NONE_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s(fun(X403,'type.option.option'(bool)),X404)),X402,'type.option.option'(bool))) | s(bool,'T_0') = s(bool,sK6(X401,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X401)) )),
  inference(superposition,[],[f447,f458])).
fof(f30533,plain,(
  ( ! [X397,X399,X396,X398,X400] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X397),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X396)))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK7('const.option.option_CASE_3'(s('type.option.option'(X398),'const.option.NONE_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s(fun(X398,'type.option.option'(bool)),X399)),X397,'type.option.option'(bool))) | s(bool,X396) = s(bool,X400) | s(bool,'F_0') = s(bool,X400)) ) | $spl0),
  inference(superposition,[],[f447,f3902])).
fof(f30531,plain,(
  ( ! [X389,X391,X387,X388,X390] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X388),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X387)))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),sK7('const.option.option_CASE_3'(s('type.option.option'(X389),'const.option.NONE_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s(fun(X389,'type.option.option'(bool)),X390)),X388,'type.option.option'(bool))) | s(bool,X387) = s(bool,X391) | s(bool,'T_0') = s(bool,X391)) ) | $spl0),
  inference(superposition,[],[f447,f14030])).
fof(f30635,plain,(
  ( ! [X379,X380,X382,X381] : (s(bool,'T_0') = s(bool,X379) | ~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X380),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X379))) = s('type.option.option'(bool),sK7('const.option.option_CASE_3'(s('type.option.option'(X381),'const.option.NONE_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X379))),s(fun(X381,'type.option.option'(bool)),X382)),X380,'type.option.option'(bool)))) ) | $spl0),
  inference(forward_demodulation,[],[f30529,f901])).
fof(f30529,plain,(
  ( ! [X379,X380,X382,X381] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X380),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X379))) = s('type.option.option'(bool),sK7('const.option.option_CASE_3'(s('type.option.option'(X381),'const.option.NONE_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X379))),s(fun(X381,'type.option.option'(bool)),X382)),X380,'type.option.option'(bool))) | s(bool,X379) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f447,f8984])).
fof(f30528,plain,(
  ( ! [X377,X374,X376,X378,X375] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X375),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X374))) = s('type.option.option'(bool),sK7('const.option.option_CASE_3'(s('type.option.option'(X376),'const.option.NONE_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X374))),s(fun(X376,'type.option.option'(bool)),X377)),X375,'type.option.option'(bool))) | s(bool,X374) = s(bool,X378) | s(bool,'F_0') = s(bool,X378)) ) | $spl0),
  inference(superposition,[],[f447,f3902])).
fof(f30527,plain,(
  ( ! [X372,X370,X373,X369,X371] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X370),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0')))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X369))) = s('type.option.option'(bool),sK7('const.option.option_CASE_3'(s('type.option.option'(X371),'const.option.NONE_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X369))),s(fun(X371,'type.option.option'(bool)),X372)),X370,'type.option.option'(bool))) | s(bool,X369) = s(bool,X373) | s(bool,'T_0') = s(bool,X373)) ) | $spl0),
  inference(superposition,[],[f447,f14030])).
fof(f30526,plain,(
  ( ! [X366,X368,X365,X367] : (~p(s(bool,happ(s(fun(bool,bool),X366),s(bool,'T_0')))) | s(bool,sK6(X365,bool)) = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X367),'const.option.NONE_0'),s(bool,sK6(X365,bool)),s(fun(X367,bool),X368)),X366,bool)) | s('type.option.option'(bool),X365) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X365)) )),
  inference(superposition,[],[f447,f458])).
fof(f30633,plain,(
  ( ! [X358,X360,X357,X359] : (s(bool,'F_0') = s(bool,X357) | s(bool,'T_0') = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X359),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X359,bool),X360)),X358,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X358),s(bool,X357))))) ) | $spl0),
  inference(forward_demodulation,[],[f30632,f901])).
fof(f30632,plain,(
  ( ! [X358,X360,X357,X359] : (s(bool,'T_0') = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X359),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X359,bool),X360)),X358,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X358),s(bool,X357)))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X357)),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f30524,f901])).
fof(f30524,plain,(
  ( ! [X358,X360,X357,X359] : (~p(s(bool,happ(s(fun(bool,bool),X358),s(bool,X357)))) | s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X359),'const.option.NONE_0'),s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)),s(fun(X359,bool),X360)),X358,bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X357)),bool))) ) | $spl0),
  inference(superposition,[],[f447,f7724])).
fof(f30630,plain,(
  ( ! [X350,X349,X351,X348] : (s(bool,'T_0') = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X350),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X350,bool),X351)),X349,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X349),s(bool,X348)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X348)))) ) | $spl0),
  inference(forward_demodulation,[],[f30522,f901])).
fof(f30522,plain,(
  ( ! [X350,X349,X351,X348] : (~p(s(bool,happ(s(fun(bool,bool),X349),s(bool,X348)))) | s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X350),'const.option.NONE_0'),s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)),s(fun(X350,bool),X351)),X349,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X348)))) ) | $spl0),
  inference(superposition,[],[f447,f8984])).
fof(f30511,plain,(
  ( ! [X300,X302,X298,X301,X303,X299] : (~p(s(bool,happ(s(fun(bool,bool),X301),s(bool,'F_0')))) | s(bool,happ(s(fun(X298,bool),X299),s(X298,X300))) = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X302),'const.option.NONE_0'),s(bool,happ(s(fun(X298,bool),X299),s(X298,X300))),s(fun(X302,bool),X303)),X301,bool)) | s(X298,X300) = s(X298,sK7(X300,X299,X298))) ) | $spl0),
  inference(superposition,[],[f447,f1756])).
fof(f30504,plain,(
  ( ! [X261,X263,X265,X262,X264] : (~p(s(bool,happ(s(fun(bool,bool),X262),s(bool,X261)))) | s(bool,'F_0') = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X263),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X263,bool),X264)),X262,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X265))) | s(bool,X261) = s(bool,X265)) ) | $spl0),
  inference(superposition,[],[f447,f3902])).
fof(f30500,plain,(
  ( ! [X243,X241,X239,X242,X240] : (~p(s(bool,happ(s(fun(bool,bool),X240),s(bool,X239)))) | s(bool,'F_0') = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X241),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X241,bool),X242)),X240,bool)) | s(bool,X239) = s(bool,X243) | s(bool,'F_0') = s(bool,X243)) ) | $spl0),
  inference(superposition,[],[f447,f1632])).
fof(f30499,plain,(
  ( ! [X237,X235,X238,X236] : (~p(s(bool,happ(s(fun(bool,bool),X236),s(bool,X235)))) | s(bool,'F_0') = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X237),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X237,bool),X238)),X236,bool)) | s(bool,'T_0') = s(bool,X235)) )),
  inference(superposition,[],[f447,f121])).
fof(f30606,plain,(
  ( ! [X222,X220,X223,X221,X224] : (s(bool,'T_0') = s(bool,X224) | ~p(s(bool,happ(s(fun(bool,bool),X221),s(bool,X220)))) | s(bool,'T_0') = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X222),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X222,bool),X223)),X221,bool)) | s(bool,X220) = s(bool,X224)) ) | $spl0),
  inference(forward_demodulation,[],[f30496,f901])).
fof(f30496,plain,(
  ( ! [X222,X220,X223,X221,X224] : (~p(s(bool,happ(s(fun(bool,bool),X221),s(bool,X220)))) | s(bool,'T_0') = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X222),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X222,bool),X223)),X221,bool)) | s(bool,X224) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X220) = s(bool,X224)) ) | $spl0),
  inference(superposition,[],[f447,f9397])).
fof(f30495,plain,(
  ( ! [X218,X216,X215,X219,X217] : (~p(s(bool,happ(s(fun(bool,bool),X216),s(bool,X215)))) | s(bool,'T_0') = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X217),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X217,bool),X218)),X216,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X219))) | s(bool,X215) = s(bool,X219)) ) | $spl0),
  inference(superposition,[],[f447,f14030])).
fof(f30493,plain,(
  ( ! [X208,X206,X204,X207,X205] : (~p(s(bool,happ(s(fun(bool,bool),X205),s(bool,'T_0')))) | s(bool,X204) = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X206),'const.option.NONE_0'),s(bool,X204),s(fun(X206,bool),X207)),X205,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X208))) | s(bool,X204) = s(bool,X208)) ) | $spl0),
  inference(superposition,[],[f447,f14030])).
fof(f30492,plain,(
  ( ! [X202,X200,X199,X203,X201] : (~p(s(bool,happ(s(fun(bool,bool),X201),s(bool,X200)))) | s(bool,X199) = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X202),'const.option.NONE_0'),s(bool,X199),s(fun(X202,bool),X203)),X201,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X199))) | s(bool,'T_0') = s(bool,X200)) ) | $spl0),
  inference(superposition,[],[f447,f14030])).
fof(f30491,plain,(
  ( ! [X198,X196,X194,X197,X195] : (~p(s(bool,happ(s(fun(bool,bool),X196),s(bool,X195)))) | s(bool,X194) = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X197),'const.option.NONE_0'),s(bool,X194),s(fun(X197,bool),X198)),X196,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X195))) | s(bool,'T_0') = s(bool,X194)) ) | $spl0),
  inference(superposition,[],[f447,f14030])).
fof(f30595,plain,(
  ( ! [X152,X151,X153,X150] : (~p(s(bool,happ(s(fun(bool,bool),X151),s(bool,'T_0')))) | s(bool,X150) = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X152),'const.option.NONE_0'),s(bool,X150),s(fun(X152,bool),X153)),X151,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X150)))) ) | $spl0),
  inference(forward_demodulation,[],[f30482,f901])).
fof(f30482,plain,(
  ( ! [X152,X151,X153,X150] : (~p(s(bool,happ(s(fun(bool,bool),X151),s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))))) | s(bool,X150) = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X152),'const.option.NONE_0'),s(bool,X150),s(fun(X152,bool),X153)),X151,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X150)))) ) | $spl0),
  inference(superposition,[],[f447,f8984])).
fof(f30476,plain,(
  ( ! [X127,X125,X128,X126,X129] : (~p(s(bool,happ(s(fun(bool,bool),X127),s(bool,X126)))) | s(bool,X125) = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X128),'const.option.NONE_0'),s(bool,X125),s(fun(X128,bool),X129)),X127,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X126))) | s(bool,'F_0') = s(bool,X125)) ) | $spl0),
  inference(superposition,[],[f447,f3902])).
fof(f30475,plain,(
  ( ! [X123,X121,X124,X122,X120] : (~p(s(bool,happ(s(fun(bool,bool),X122),s(bool,X121)))) | s(bool,X120) = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X123),'const.option.NONE_0'),s(bool,X120),s(fun(X123,bool),X124)),X122,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X120))) | s(bool,'F_0') = s(bool,X121)) ) | $spl0),
  inference(superposition,[],[f447,f3902])).
fof(f30474,plain,(
  ( ! [X118,X116,X119,X117,X115] : (~p(s(bool,happ(s(fun(bool,bool),X116),s(bool,'F_0')))) | s(bool,X115) = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X117),'const.option.NONE_0'),s(bool,X115),s(fun(X117,bool),X118)),X116,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X119))) | s(bool,X115) = s(bool,X119)) ) | $spl0),
  inference(superposition,[],[f447,f3902])).
fof(f30464,plain,(
  ( ! [X61,X59,X57,X60,X58] : (~p(s(bool,happ(s(fun(bool,bool),X59),s(bool,X58)))) | s(bool,X57) = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X60),'const.option.NONE_0'),s(bool,X57),s(fun(X60,bool),X61)),X59,bool)) | s(bool,'F_0') = s(bool,X58) | s(bool,'F_0') = s(bool,X57)) ) | $spl0),
  inference(superposition,[],[f447,f1632])).
fof(f30463,plain,(
  ( ! [X54,X52,X56,X55,X53] : (~p(s(bool,happ(s(fun(bool,bool),X53),s(bool,'F_0')))) | s(bool,X52) = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X54),'const.option.NONE_0'),s(bool,X52),s(fun(X54,bool),X55)),X53,bool)) | s(bool,X52) = s(bool,X56) | s(bool,'F_0') = s(bool,X56)) ) | $spl0),
  inference(superposition,[],[f447,f1632])).
fof(f30460,plain,(
  ( ! [X39,X37,X41,X38,X40] : (~p(s(bool,happ(s(fun(bool,bool),X39),s(bool,X38)))) | s(bool,X37) = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X40),'const.option.NONE_0'),s(bool,X37),s(fun(X40,bool),X41)),X39,bool)) | s(bool,'T_0') = s(bool,X38) | s(bool,'T_0') = s(bool,X37)) )),
  inference(superposition,[],[f447,f208])).
fof(f30459,plain,(
  ( ! [X35,X33,X36,X34,X32] : (~p(s(bool,happ(s(fun(bool,bool),X33),s(bool,'T_0')))) | s(bool,X32) = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X34),'const.option.NONE_0'),s(bool,X32),s(fun(X34,bool),X35)),X33,bool)) | s(bool,X32) = s(bool,X36) | s(bool,'T_0') = s(bool,X36)) )),
  inference(superposition,[],[f447,f208])).
fof(f30458,plain,(
  ( ! [X30,X28,X31,X29] : (~p(s(bool,happ(s(fun(bool,bool),X29),s(bool,'F_0')))) | s(bool,X28) = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X30),'const.option.NONE_0'),s(bool,X28),s(fun(X30,bool),X31)),X29,bool)) | s(bool,'T_0') = s(bool,X28)) )),
  inference(superposition,[],[f447,f121])).
fof(f30453,plain,(
  ( ! [X26,X24,X23,X27,X25] : (~p(s(bool,happ(s(fun(X23,bool),X24),s(X23,X25)))) | s(X23,X25) = s(X23,sK7('const.option.option_CASE_3'(s('type.option.option'(X26),'const.option.NONE_0'),s(X23,X25),s(fun(X26,X23),X27)),sK6('const.option.SOME_1'(s(fun(X23,bool),X24)),fun(X23,bool)),X23))) )),
  inference(superposition,[],[f447,f901])).
fof(f30452,plain,(
  ( ! [X21,X19,X17,X15,X22,X20,X18,X16] : (~p(s(bool,happ(s(fun(X15,bool),'const.option.option_CASE_3'(s('type.option.option'(X16),X17),s(fun(X15,bool),X18),s(fun(X16,fun(X15,bool)),X19))),s(X15,X20)))) | s(X15,X20) = s(X15,sK7('const.option.option_CASE_3'(s('type.option.option'(X21),'const.option.NONE_0'),s(X15,X20),s(fun(X21,X15),X22)),happ(s(fun(fun(X16,fun(X15,bool)),fun(X15,bool)),happ(s(fun(fun(X15,bool),fun(fun(X16,fun(X15,bool)),fun(X15,bool))),happ(s(fun('type.option.option'(X16),fun(fun(X15,bool),fun(fun(X16,fun(X15,bool)),fun(X15,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X16),X17))),s(fun(X15,bool),X18))),s(fun(X16,fun(X15,bool)),X19)),X15))) )),
  inference(superposition,[],[f447,f169])).
fof(f30451,plain,(
  ( ! [X14,X12,X10,X8,X7,X13,X11,X9] : (~p(s(bool,happ(s(fun(X7,bool),happ(s(fun(X8,fun(X7,bool)),X11),s(X8,X9))),s(X7,X12)))) | s(X7,X12) = s(X7,sK7('const.option.option_CASE_3'(s('type.option.option'(X13),'const.option.NONE_0'),s(X7,X12),s(fun(X13,X7),X14)),'const.option.option_CASE_3'(s('type.option.option'(X8),'const.option.SOME_1'(s(X8,X9))),s(fun(X7,bool),X10),s(fun(X8,fun(X7,bool)),X11)),X7))) )),
  inference(superposition,[],[f447,f168])).
fof(f30450,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) | s(X0,X4) = s(X0,sK7('const.option.option_CASE_3'(s('type.option.option'(X5),'const.option.NONE_0'),s(X0,X4),s(fun(X5,X0),X6)),'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(fun(X0,bool),X2),s(fun(X1,fun(X0,bool)),X3)),X0))) )),
  inference(superposition,[],[f447,f166])).
fof(f30313,plain,(
  ( ! [X344,X346,X343,X345,X347,X342,X348] : (s(bool,X346) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X342),X343),s(bool,X344),s(fun(X342,bool),X345))) | s(bool,'T_0') = s(bool,happ(s(fun(fun(X342,bool),bool),happ(s(fun(bool,fun(fun(X342,bool),bool)),happ(s(fun('type.option.option'(X342),fun(bool,fun(fun(X342,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X342),X343))),s(bool,X344))),s(fun(X342,bool),X345))) | s(bool,X346) = s(bool,'const.bool.IN_2'(s(X347,X348),s(fun(X347,bool),'const.pred_set.EMPTY_0')))) ) | $spl0),
  inference(superposition,[],[f23308,f169])).
fof(f30312,plain,(
  ( ! [X335,X341,X337,X339,X340,X336,X338] : (s(bool,X339) != s(bool,happ(s(fun(X335,bool),X338),s(X335,X336))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X335),'const.option.SOME_1'(s(X335,X336))),s(bool,X337),s(fun(X335,bool),X338))) | s(bool,X339) = s(bool,'const.bool.IN_2'(s(X340,X341),s(fun(X340,bool),'const.pred_set.EMPTY_0')))) ) | $spl0),
  inference(superposition,[],[f23308,f168])).
fof(f30311,plain,(
  ( ! [X333,X329,X331,X332,X334,X330] : (s(bool,X330) != s(bool,X332) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X329),'const.option.NONE_0'),s(bool,X330),s(fun(X329,bool),X331))) | s(bool,X332) = s(bool,'const.bool.IN_2'(s(X333,X334),s(fun(X333,bool),'const.pred_set.EMPTY_0')))) ) | $spl0),
  inference(superposition,[],[f23308,f166])).
fof(f30149,plain,(
  ( ! [X202,X201] : (s(bool,X202) != s(bool,sK6(X201,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X202))) | s('type.option.option'(bool),X201) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X201)) ) | $spl0),
  inference(subsumption_resolution,[],[f30095,f114])).
fof(f30095,plain,(
  ( ! [X202,X201] : (~p(s(bool,'T_0')) | s(bool,X202) != s(bool,sK6(X201,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X202))) | s('type.option.option'(bool),X201) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X201)) ) | $spl0),
  inference(superposition,[],[f29621,f458])).
fof(f30140,plain,(
  ( ! [X149,X147,X150,X148] : (s(bool,X150) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X147),'const.option.NONE_0'),s(bool,X148),s(fun(X147,bool),X149))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X150))) | s(bool,'F_0') = s(bool,X148)) ) | $spl0),
  inference(subsumption_resolution,[],[f30075,f114])).
fof(f30075,plain,(
  ( ! [X149,X147,X150,X148] : (~p(s(bool,'T_0')) | s(bool,X150) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X147),'const.option.NONE_0'),s(bool,X148),s(fun(X147,bool),X149))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X150))) | s(bool,'F_0') = s(bool,X148)) ) | $spl0),
  inference(superposition,[],[f29621,f298])).
fof(f29922,plain,(
  ( ! [X35,X33,X34,X32] : (s('type.option.option'(bool),X32) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X33))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X34),'const.option.NONE_0'),s(bool,X33),s(fun(X34,bool),X35))) | s(bool,'T_0') = s(bool,sK6(X32,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X32)) )),
  inference(superposition,[],[f363,f458])).
fof(f29914,plain,(
  ( ! [X414,X416,X415,X417] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X415))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s('type.option.option'(bool),X414) = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X416),'const.option.NONE_0'),s('type.option.option'(bool),X415),s(fun(X416,'type.option.option'(bool)),X417))) | s(bool,'T_0') = s(bool,sK6(X414,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X414)) )),
  inference(superposition,[],[f363,f458])).
fof(f29913,plain,(
  ( ! [X412,X410,X413,X409,X411] : (s('type.option.option'('type.option.option'(X409)),'const.option.SOME_1'(s('type.option.option'(X409),X410))) != s('type.option.option'('type.option.option'(X409)),'const.option.SOME_1'(s('type.option.option'(X409),X411))) | s('type.option.option'(X409),'const.option.SOME_1'(s(X409,sK6(X410,X409)))) = s('type.option.option'(X409),'const.option.option_CASE_3'(s('type.option.option'(X412),'const.option.NONE_0'),s('type.option.option'(X409),X411),s(fun(X412,'type.option.option'(X409)),X413))) | s('type.option.option'(X409),'const.option.NONE_0') = s('type.option.option'(X409),X410)) )),
  inference(superposition,[],[f363,f148])).
fof(f30019,plain,(
  ( ! [X408,X405,X407,X406] : (s(bool,'T_0') = s(bool,X405) | s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X406))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X405))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X407),'const.option.NONE_0'),s('type.option.option'(bool),X406),s(fun(X407,'type.option.option'(bool)),X408)))) ) | $spl0),
  inference(forward_demodulation,[],[f29912,f901])).
fof(f29912,plain,(
  ( ! [X408,X405,X407,X406] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X406))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X405))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X407),'const.option.NONE_0'),s('type.option.option'(bool),X406),s(fun(X407,'type.option.option'(bool)),X408))) | s(bool,X405) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f363,f8984])).
fof(f29911,plain,(
  ( ! [X401,X403,X404,X402] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X401))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X402))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X403),'const.option.NONE_0'),s('type.option.option'(bool),X402),s(fun(X403,'type.option.option'(bool)),X404))) | s(bool,'T_0') = s(bool,sK6(X401,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X401)) )),
  inference(superposition,[],[f363,f458])).
fof(f29910,plain,(
  ( ! [X397,X399,X396,X398,X400] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X397))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X396))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X398),'const.option.NONE_0'),s('type.option.option'(bool),X397),s(fun(X398,'type.option.option'(bool)),X399))) | s(bool,X396) = s(bool,X400) | s(bool,'F_0') = s(bool,X400)) ) | $spl0),
  inference(superposition,[],[f363,f3902])).
fof(f29908,plain,(
  ( ! [X389,X391,X387,X388,X390] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X388))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X387))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X389),'const.option.NONE_0'),s('type.option.option'(bool),X388),s(fun(X389,'type.option.option'(bool)),X390))) | s(bool,X387) = s(bool,X391) | s(bool,'T_0') = s(bool,X391)) ) | $spl0),
  inference(superposition,[],[f363,f14030])).
fof(f30016,plain,(
  ( ! [X379,X380,X382,X381] : (s(bool,'T_0') = s(bool,X379) | s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X380))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X379))) = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X381),'const.option.NONE_0'),s('type.option.option'(bool),X380),s(fun(X381,'type.option.option'(bool)),X382)))) ) | $spl0),
  inference(forward_demodulation,[],[f29906,f901])).
fof(f29906,plain,(
  ( ! [X379,X380,X382,X381] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X380))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X379))) = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X381),'const.option.NONE_0'),s('type.option.option'(bool),X380),s(fun(X381,'type.option.option'(bool)),X382))) | s(bool,X379) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f363,f8984])).
fof(f29905,plain,(
  ( ! [X377,X374,X376,X378,X375] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X375))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X374))) = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X376),'const.option.NONE_0'),s('type.option.option'(bool),X375),s(fun(X376,'type.option.option'(bool)),X377))) | s(bool,X374) = s(bool,X378) | s(bool,'F_0') = s(bool,X378)) ) | $spl0),
  inference(superposition,[],[f363,f3902])).
fof(f29904,plain,(
  ( ! [X372,X370,X373,X369,X371] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X370))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X369))) = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X371),'const.option.NONE_0'),s('type.option.option'(bool),X370),s(fun(X371,'type.option.option'(bool)),X372))) | s(bool,X369) = s(bool,X373) | s(bool,'T_0') = s(bool,X373)) ) | $spl0),
  inference(superposition,[],[f363,f14030])).
fof(f29903,plain,(
  ( ! [X366,X368,X365,X367] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X366))) | s(bool,sK6(X365,bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X367),'const.option.NONE_0'),s(bool,X366),s(fun(X367,bool),X368))) | s('type.option.option'(bool),X365) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X365)) )),
  inference(superposition,[],[f363,f458])).
fof(f30014,plain,(
  ( ! [X358,X360,X357,X359] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X359),'const.option.NONE_0'),s(bool,X358),s(fun(X359,bool),X360))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X357))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X358))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X357)),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f29901,f901])).
fof(f29901,plain,(
  ( ! [X358,X360,X357,X359] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X357))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X358))) | s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X359),'const.option.NONE_0'),s(bool,X358),s(fun(X359,bool),X360))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X357)),bool))) ) | $spl0),
  inference(superposition,[],[f363,f7724])).
fof(f30012,plain,(
  ( ! [X350,X349,X351,X348] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X350),'const.option.NONE_0'),s(bool,X349),s(fun(X350,bool),X351))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X348))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X349))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X348)))) ) | $spl0),
  inference(forward_demodulation,[],[f29899,f901])).
fof(f29899,plain,(
  ( ! [X350,X349,X351,X348] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X348))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X349))) | s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X350),'const.option.NONE_0'),s(bool,X349),s(fun(X350,bool),X351))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X348)))) ) | $spl0),
  inference(superposition,[],[f363,f8984])).
fof(f29892,plain,(
  ( ! [X321,X318,X320,X322,X319] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X319))) | s(bool,sK6('const.option.SOME_1'(s(bool,X318)),bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X320),'const.option.NONE_0'),s(bool,X319),s(fun(X320,bool),X321))) | s(bool,X318) = s(bool,X322) | s(bool,'F_0') = s(bool,X322)) ) | $spl0),
  inference(superposition,[],[f363,f1834])).
fof(f30006,plain,(
  ( ! [X315,X316,X314,X317] : (s(bool,'T_0') = s(bool,X314) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X315))) | s(bool,sK6('const.option.SOME_1'(s(bool,X314)),bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X316),'const.option.NONE_0'),s(bool,X315),s(fun(X316,bool),X317)))) ) | $spl0),
  inference(forward_demodulation,[],[f29891,f901])).
fof(f29891,plain,(
  ( ! [X315,X316,X314,X317] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X315))) | s(bool,sK6('const.option.SOME_1'(s(bool,X314)),bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X316),'const.option.NONE_0'),s(bool,X315),s(fun(X316,bool),X317))) | s(bool,X314) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f363,f7724])).
fof(f29890,plain,(
  ( ! [X313,X310,X312,X311] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X311))) | s(bool,sK6('const.option.SOME_1'(s(bool,X310)),bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X312),'const.option.NONE_0'),s(bool,X311),s(fun(X312,bool),X313))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X310)))) ) | $spl0),
  inference(superposition,[],[f363,f9094])).
fof(f29888,plain,(
  ( ! [X300,X302,X298,X301,X303,X299] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X301))) | s(bool,happ(s(fun(X298,bool),X299),s(X298,X300))) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X302),'const.option.NONE_0'),s(bool,X301),s(fun(X302,bool),X303))) | s(X298,X300) = s(X298,sK7(X300,X299,X298))) ) | $spl0),
  inference(superposition,[],[f363,f1756])).
fof(f29883,plain,(
  ( ! [X271,X273,X275,X276,X272,X274] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X274))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(X271),'const.option.NONE_0'),s(bool,X272),s(fun(X271,bool),X273))) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X275),'const.option.NONE_0'),s(bool,X274),s(fun(X275,bool),X276))) | s(bool,'F_0') = s(bool,X272)) )),
  inference(superposition,[],[f363,f298])).
fof(f29881,plain,(
  ( ! [X261,X263,X265,X262,X264] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X261))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X262))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X263),'const.option.NONE_0'),s(bool,X262),s(fun(X263,bool),X264))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X265))) | s(bool,X261) = s(bool,X265)) ) | $spl0),
  inference(superposition,[],[f363,f3902])).
fof(f29880,plain,(
  ( ! [X255,X257,X259,X260,X254,X256,X258] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X254))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X255))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X256),'const.option.NONE_0'),s(bool,X255),s(fun(X256,bool),X257))) | s(bool,X258) = s(bool,'const.bool.IN_2'(s(X259,X260),s(fun(X259,bool),'const.pred_set.EMPTY_0'))) | s(bool,X254) = s(bool,X258)) ) | $spl0),
  inference(superposition,[],[f363,f2976])).
fof(f29879,plain,(
  ( ! [X253,X251,X249,X252,X250] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X249))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X250))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X251),'const.option.NONE_0'),s(bool,X250),s(fun(X251,bool),X252))) | s(bool,X249) = s(bool,X253) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X253)),bool))) ) | $spl0),
  inference(superposition,[],[f363,f1834])).
fof(f29877,plain,(
  ( ! [X243,X241,X239,X242,X240] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X239))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X240))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X241),'const.option.NONE_0'),s(bool,X240),s(fun(X241,bool),X242))) | s(bool,X239) = s(bool,X243) | s(bool,'F_0') = s(bool,X243)) ) | $spl0),
  inference(superposition,[],[f363,f1632])).
fof(f30000,plain,(
  ( ! [X222,X220,X223,X221,X224] : (s(bool,'T_0') = s(bool,X224) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X220))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X221))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X222),'const.option.NONE_0'),s(bool,X221),s(fun(X222,bool),X223))) | s(bool,X220) = s(bool,X224)) ) | $spl0),
  inference(forward_demodulation,[],[f29873,f901])).
fof(f29873,plain,(
  ( ! [X222,X220,X223,X221,X224] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X220))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X221))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X222),'const.option.NONE_0'),s(bool,X221),s(fun(X222,bool),X223))) | s(bool,X224) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X220) = s(bool,X224)) ) | $spl0),
  inference(superposition,[],[f363,f9397])).
fof(f29872,plain,(
  ( ! [X218,X216,X215,X219,X217] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X215))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X216))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X217),'const.option.NONE_0'),s(bool,X216),s(fun(X217,bool),X218))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X219))) | s(bool,X215) = s(bool,X219)) ) | $spl0),
  inference(superposition,[],[f363,f14030])).
fof(f29870,plain,(
  ( ! [X208,X206,X204,X207,X205] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X205))) | s(bool,X204) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X206),'const.option.NONE_0'),s(bool,X205),s(fun(X206,bool),X207))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X208))) | s(bool,X204) = s(bool,X208)) ) | $spl0),
  inference(superposition,[],[f363,f14030])).
fof(f29869,plain,(
  ( ! [X202,X200,X199,X203,X201] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X200))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X201))) | s(bool,X199) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X202),'const.option.NONE_0'),s(bool,X201),s(fun(X202,bool),X203))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X199))) | s(bool,'T_0') = s(bool,X200)) ) | $spl0),
  inference(superposition,[],[f363,f14030])).
fof(f29868,plain,(
  ( ! [X198,X196,X194,X197,X195] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X195))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X196))) | s(bool,X194) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X197),'const.option.NONE_0'),s(bool,X196),s(fun(X197,bool),X198))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X195))) | s(bool,'T_0') = s(bool,X194)) ) | $spl0),
  inference(superposition,[],[f363,f14030])).
fof(f29990,plain,(
  ( ! [X152,X151,X153,X150] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X151))) | s(bool,X150) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X152),'const.option.NONE_0'),s(bool,X151),s(fun(X152,bool),X153))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X150)))) ) | $spl0),
  inference(forward_demodulation,[],[f29859,f901])).
fof(f29859,plain,(
  ( ! [X152,X151,X153,X150] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X151))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)))) | s(bool,X150) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X152),'const.option.NONE_0'),s(bool,X151),s(fun(X152,bool),X153))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X150)))) ) | $spl0),
  inference(superposition,[],[f363,f8984])).
fof(f29989,plain,(
  ( ! [X146,X149,X147,X148] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X147))) | s(bool,X146) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X148),'const.option.NONE_0'),s(bool,X147),s(fun(X148,bool),X149))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X146)),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f29858,f901])).
fof(f29858,plain,(
  ( ! [X146,X149,X147,X148] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X147))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)))) | s(bool,X146) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X148),'const.option.NONE_0'),s(bool,X147),s(fun(X148,bool),X149))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X146)),bool))) ) | $spl0),
  inference(superposition,[],[f363,f7724])).
fof(f29853,plain,(
  ( ! [X127,X125,X128,X126,X129] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X126))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X127))) | s(bool,X125) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X128),'const.option.NONE_0'),s(bool,X127),s(fun(X128,bool),X129))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X126))) | s(bool,'F_0') = s(bool,X125)) ) | $spl0),
  inference(superposition,[],[f363,f3902])).
fof(f29852,plain,(
  ( ! [X123,X121,X124,X122,X120] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X121))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X122))) | s(bool,X120) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X123),'const.option.NONE_0'),s(bool,X122),s(fun(X123,bool),X124))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X120))) | s(bool,'F_0') = s(bool,X121)) ) | $spl0),
  inference(superposition,[],[f363,f3902])).
fof(f29851,plain,(
  ( ! [X118,X116,X119,X117,X115] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X116))) | s(bool,X115) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X117),'const.option.NONE_0'),s(bool,X116),s(fun(X117,bool),X118))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X119))) | s(bool,X115) = s(bool,X119)) ) | $spl0),
  inference(superposition,[],[f363,f3902])).
fof(f29850,plain,(
  ( ! [X111,X109,X114,X112,X110,X108,X113] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X109))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X110))) | s(bool,X108) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X111),'const.option.NONE_0'),s(bool,X110),s(fun(X111,bool),X112))) | s(bool,X109) = s(bool,'const.bool.IN_2'(s(X113,X114),s(fun(X113,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X108)) ) | $spl0),
  inference(superposition,[],[f363,f2976])).
fof(f29849,plain,(
  ( ! [X103,X101,X107,X105,X102,X106,X104] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X102))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X103))) | s(bool,X101) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X104),'const.option.NONE_0'),s(bool,X103),s(fun(X104,bool),X105))) | s(bool,X101) = s(bool,'const.bool.IN_2'(s(X106,X107),s(fun(X106,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X102)) ) | $spl0),
  inference(superposition,[],[f363,f2976])).
fof(f29848,plain,(
  ( ! [X94,X99,X97,X95,X100,X98,X96] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X95))) | s(bool,X94) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X96),'const.option.NONE_0'),s(bool,X95),s(fun(X96,bool),X97))) | s(bool,X98) = s(bool,'const.bool.IN_2'(s(X99,X100),s(fun(X99,bool),'const.pred_set.EMPTY_0'))) | s(bool,X94) = s(bool,X98)) ) | $spl0),
  inference(superposition,[],[f363,f2976])).
fof(f29846,plain,(
  ( ! [X85,X83,X86,X84,X82] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X83))) | s(bool,X82) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X84),'const.option.NONE_0'),s(bool,X83),s(fun(X84,bool),X85))) | s(bool,X82) = s(bool,X86) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X86)),bool))) ) | $spl0),
  inference(superposition,[],[f363,f1834])).
fof(f29845,plain,(
  ( ! [X80,X78,X81,X79,X77] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X78))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X79))) | s(bool,X77) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X80),'const.option.NONE_0'),s(bool,X79),s(fun(X80,bool),X81))) | s(bool,'F_0') = s(bool,X77) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X78)),bool))) ) | $spl0),
  inference(superposition,[],[f363,f1834])).
fof(f29844,plain,(
  ( ! [X76,X74,X72,X75,X73] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X73))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X74))) | s(bool,X72) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X75),'const.option.NONE_0'),s(bool,X74),s(fun(X75,bool),X76))) | s(bool,'F_0') = s(bool,X73) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X72)),bool))) ) | $spl0),
  inference(superposition,[],[f363,f1834])).
fof(f29841,plain,(
  ( ! [X61,X59,X57,X60,X58] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X58))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X59))) | s(bool,X57) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X60),'const.option.NONE_0'),s(bool,X59),s(fun(X60,bool),X61))) | s(bool,'F_0') = s(bool,X58) | s(bool,'F_0') = s(bool,X57)) ) | $spl0),
  inference(superposition,[],[f363,f1632])).
fof(f29840,plain,(
  ( ! [X54,X52,X56,X55,X53] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X53))) | s(bool,X52) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X54),'const.option.NONE_0'),s(bool,X53),s(fun(X54,bool),X55))) | s(bool,X52) = s(bool,X56) | s(bool,'F_0') = s(bool,X56)) ) | $spl0),
  inference(superposition,[],[f363,f1632])).
fof(f29837,plain,(
  ( ! [X39,X37,X41,X38,X40] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X38))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X39))) | s(bool,X37) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X40),'const.option.NONE_0'),s(bool,X39),s(fun(X40,bool),X41))) | s(bool,'T_0') = s(bool,X38) | s(bool,'T_0') = s(bool,X37)) )),
  inference(superposition,[],[f363,f208])).
fof(f29836,plain,(
  ( ! [X35,X33,X36,X34,X32] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X33))) | s(bool,X32) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X34),'const.option.NONE_0'),s(bool,X33),s(fun(X34,bool),X35))) | s(bool,X32) = s(bool,X36) | s(bool,'T_0') = s(bool,X36)) )),
  inference(superposition,[],[f363,f208])).
fof(f29834,plain,(
  ( ! [X26,X24,X23,X27,X25] : (s('type.option.option'(X23),'const.option.SOME_1'(s(X23,X24))) != s('type.option.option'(X23),'const.option.SOME_1'(s(X23,X25))) | s(X23,sK6('const.option.SOME_1'(s(X23,X24)),X23)) = s(X23,'const.option.option_CASE_3'(s('type.option.option'(X26),'const.option.NONE_0'),s(X23,X25),s(fun(X26,X23),X27)))) )),
  inference(superposition,[],[f363,f901])).
fof(f29833,plain,(
  ( ! [X21,X19,X17,X15,X22,X20,X18,X16] : (s('type.option.option'(X15),'const.option.SOME_1'(s(X15,X20))) != s('type.option.option'(X15),'const.option.SOME_1'(s(X15,'const.option.option_CASE_3'(s('type.option.option'(X16),X17),s(X15,X18),s(fun(X16,X15),X19))))) | s(X15,'const.option.option_CASE_3'(s('type.option.option'(X21),'const.option.NONE_0'),s(X15,X20),s(fun(X21,X15),X22))) = s(X15,happ(s(fun(fun(X16,X15),X15),happ(s(fun(X15,fun(fun(X16,X15),X15)),happ(s(fun('type.option.option'(X16),fun(X15,fun(fun(X16,X15),X15))),'const.option.option_CASE_0'),s('type.option.option'(X16),X17))),s(X15,X18))),s(fun(X16,X15),X19)))) )),
  inference(superposition,[],[f363,f169])).
fof(f29832,plain,(
  ( ! [X14,X12,X10,X8,X7,X13,X11,X9] : (s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X12))) != s('type.option.option'(X7),'const.option.SOME_1'(s(X7,happ(s(fun(X8,X7),X11),s(X8,X9))))) | s(X7,'const.option.option_CASE_3'(s('type.option.option'(X13),'const.option.NONE_0'),s(X7,X12),s(fun(X13,X7),X14))) = s(X7,'const.option.option_CASE_3'(s('type.option.option'(X8),'const.option.SOME_1'(s(X8,X9))),s(X7,X10),s(fun(X8,X7),X11)))) )),
  inference(superposition,[],[f363,f168])).
fof(f29831,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X4))) | s(X0,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(X0,X2),s(fun(X1,X0),X3))) = s(X0,'const.option.option_CASE_3'(s('type.option.option'(X5),'const.option.NONE_0'),s(X0,X4),s(fun(X5,X0),X6)))) )),
  inference(superposition,[],[f363,f166])).
fof(f29829,plain,(
  ( ! [X43,X41,X44,X42,X40] : (s('type.option.option'(X40),X41) != s('type.option.option'(X40),'const.option.SOME_1'(s(X40,X42))) | s(X40,X42) = s(X40,'const.option.option_CASE_3'(s('type.option.option'(X43),'const.option.NONE_0'),s(X40,sK6(X41,X40)),s(fun(X43,X40),X44))) | s('type.option.option'(X40),'const.option.NONE_0') = s('type.option.option'(X40),X41)) )),
  inference(superposition,[],[f363,f148])).
fof(f29827,plain,(
  ( ! [X35,X33,X34,X32] : (s('type.option.option'(bool),X32) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X33))) | s(bool,X33) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X34),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X34,bool),X35))) | s(bool,'T_0') = s(bool,sK6(X32,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X32)) )),
  inference(superposition,[],[f363,f458])).
fof(f29819,plain,(
  ( ! [X414,X416,X415,X417] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X415))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s('type.option.option'(bool),X415) = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X416),'const.option.NONE_0'),s('type.option.option'(bool),X414),s(fun(X416,'type.option.option'(bool)),X417))) | s(bool,'T_0') = s(bool,sK6(X414,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X414)) )),
  inference(superposition,[],[f363,f458])).
fof(f29818,plain,(
  ( ! [X412,X410,X413,X409,X411] : (s('type.option.option'('type.option.option'(X409)),'const.option.SOME_1'(s('type.option.option'(X409),X410))) != s('type.option.option'('type.option.option'(X409)),'const.option.SOME_1'(s('type.option.option'(X409),X411))) | s('type.option.option'(X409),X411) = s('type.option.option'(X409),'const.option.option_CASE_3'(s('type.option.option'(X412),'const.option.NONE_0'),s('type.option.option'(X409),'const.option.SOME_1'(s(X409,sK6(X410,X409)))),s(fun(X412,'type.option.option'(X409)),X413))) | s('type.option.option'(X409),'const.option.NONE_0') = s('type.option.option'(X409),X410)) )),
  inference(superposition,[],[f363,f148])).
fof(f29977,plain,(
  ( ! [X408,X405,X407,X406] : (s(bool,'T_0') = s(bool,X405) | s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X406))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X405))))) | s('type.option.option'(bool),X406) = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X407),'const.option.NONE_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s(fun(X407,'type.option.option'(bool)),X408)))) ) | $spl0),
  inference(forward_demodulation,[],[f29817,f901])).
fof(f29817,plain,(
  ( ! [X408,X405,X407,X406] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X406))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X405))))) | s('type.option.option'(bool),X406) = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X407),'const.option.NONE_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s(fun(X407,'type.option.option'(bool)),X408))) | s(bool,X405) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f363,f8984])).
fof(f29816,plain,(
  ( ! [X401,X403,X404,X402] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X401))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X402))) | s('type.option.option'(bool),X402) = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X403),'const.option.NONE_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s(fun(X403,'type.option.option'(bool)),X404))) | s(bool,'T_0') = s(bool,sK6(X401,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X401)) )),
  inference(superposition,[],[f363,f458])).
fof(f29815,plain,(
  ( ! [X397,X399,X396,X398,X400] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X397))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X396))))) | s('type.option.option'(bool),X397) = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X398),'const.option.NONE_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s(fun(X398,'type.option.option'(bool)),X399))) | s(bool,X396) = s(bool,X400) | s(bool,'F_0') = s(bool,X400)) ) | $spl0),
  inference(superposition,[],[f363,f3902])).
fof(f29813,plain,(
  ( ! [X389,X391,X387,X388,X390] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X388))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X387))))) | s('type.option.option'(bool),X388) = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X389),'const.option.NONE_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s(fun(X389,'type.option.option'(bool)),X390))) | s(bool,X387) = s(bool,X391) | s(bool,'T_0') = s(bool,X391)) ) | $spl0),
  inference(superposition,[],[f363,f14030])).
fof(f29974,plain,(
  ( ! [X379,X380,X382,X381] : (s(bool,'T_0') = s(bool,X379) | s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X380))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s('type.option.option'(bool),X380) = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X381),'const.option.NONE_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X379))),s(fun(X381,'type.option.option'(bool)),X382)))) ) | $spl0),
  inference(forward_demodulation,[],[f29811,f901])).
fof(f29811,plain,(
  ( ! [X379,X380,X382,X381] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X380))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s('type.option.option'(bool),X380) = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X381),'const.option.NONE_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X379))),s(fun(X381,'type.option.option'(bool)),X382))) | s(bool,X379) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f363,f8984])).
fof(f29810,plain,(
  ( ! [X377,X374,X376,X378,X375] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X375))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s('type.option.option'(bool),X375) = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X376),'const.option.NONE_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X374))),s(fun(X376,'type.option.option'(bool)),X377))) | s(bool,X374) = s(bool,X378) | s(bool,'F_0') = s(bool,X378)) ) | $spl0),
  inference(superposition,[],[f363,f3902])).
fof(f29809,plain,(
  ( ! [X372,X370,X373,X369,X371] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X370))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) | s('type.option.option'(bool),X370) = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X371),'const.option.NONE_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X369))),s(fun(X371,'type.option.option'(bool)),X372))) | s(bool,X369) = s(bool,X373) | s(bool,'T_0') = s(bool,X373)) ) | $spl0),
  inference(superposition,[],[f363,f14030])).
fof(f29808,plain,(
  ( ! [X366,X368,X365,X367] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X366))) | s(bool,X366) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X367),'const.option.NONE_0'),s(bool,sK6(X365,bool)),s(fun(X367,bool),X368))) | s('type.option.option'(bool),X365) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X365)) )),
  inference(superposition,[],[f363,f458])).
fof(f29973,plain,(
  ( ! [X364,X362,X361,X363] : (s(bool,X362) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X363),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X363,bool),X364))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X361))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X362))) | s(bool,'F_0') = s(bool,X361)) ) | $spl0),
  inference(forward_demodulation,[],[f29807,f901])).
fof(f29807,plain,(
  ( ! [X364,X362,X361,X363] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X361))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X362))) | s(bool,X362) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X363),'const.option.NONE_0'),s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)),s(fun(X363,bool),X364))) | s(bool,'F_0') = s(bool,X361)) ) | $spl0),
  inference(superposition,[],[f363,f7478])).
fof(f29972,plain,(
  ( ! [X358,X360,X357,X359] : (s(bool,X358) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X359),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X359,bool),X360))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X357))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X358))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X357)),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f29806,f901])).
fof(f29806,plain,(
  ( ! [X358,X360,X357,X359] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X357))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X358))) | s(bool,X358) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X359),'const.option.NONE_0'),s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)),s(fun(X359,bool),X360))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X357)),bool))) ) | $spl0),
  inference(superposition,[],[f363,f7724])).
fof(f29970,plain,(
  ( ! [X350,X349,X351,X348] : (s(bool,X349) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X350),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X350,bool),X351))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X348))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X349))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X348)))) ) | $spl0),
  inference(forward_demodulation,[],[f29804,f901])).
fof(f29804,plain,(
  ( ! [X350,X349,X351,X348] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X348))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X349))) | s(bool,X349) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X350),'const.option.NONE_0'),s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)),s(fun(X350,bool),X351))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X348)))) ) | $spl0),
  inference(superposition,[],[f363,f8984])).
fof(f29793,plain,(
  ( ! [X300,X302,X298,X301,X303,X299] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X301))) | s(bool,X301) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X302),'const.option.NONE_0'),s(bool,happ(s(fun(X298,bool),X299),s(X298,X300))),s(fun(X302,bool),X303))) | s(X298,X300) = s(X298,sK7(X300,X299,X298))) ) | $spl0),
  inference(superposition,[],[f363,f1756])).
fof(f29786,plain,(
  ( ! [X261,X263,X265,X262,X264] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X261))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X262))) | s(bool,X262) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X263),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X263,bool),X264))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X265))) | s(bool,X261) = s(bool,X265)) ) | $spl0),
  inference(superposition,[],[f363,f3902])).
fof(f29785,plain,(
  ( ! [X255,X257,X259,X260,X254,X256,X258] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X254))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X255))) | s(bool,X255) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X256),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X256,bool),X257))) | s(bool,X258) = s(bool,'const.bool.IN_2'(s(X259,X260),s(fun(X259,bool),'const.pred_set.EMPTY_0'))) | s(bool,X254) = s(bool,X258)) ) | $spl0),
  inference(superposition,[],[f363,f2976])).
fof(f29784,plain,(
  ( ! [X253,X251,X249,X252,X250] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X249))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X250))) | s(bool,X250) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X251),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X251,bool),X252))) | s(bool,X249) = s(bool,X253) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X253)),bool))) ) | $spl0),
  inference(superposition,[],[f363,f1834])).
fof(f29782,plain,(
  ( ! [X243,X241,X239,X242,X240] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X239))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X240))) | s(bool,X240) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X241),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X241,bool),X242))) | s(bool,X239) = s(bool,X243) | s(bool,'F_0') = s(bool,X243)) ) | $spl0),
  inference(superposition,[],[f363,f1632])).
fof(f29781,plain,(
  ( ! [X237,X235,X238,X236] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X235))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X236))) | s(bool,X236) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X237),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X237,bool),X238))) | s(bool,'T_0') = s(bool,X235)) )),
  inference(superposition,[],[f363,f121])).
fof(f29951,plain,(
  ( ! [X222,X220,X223,X221,X224] : (s(bool,'T_0') = s(bool,X224) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X220))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X221))) | s(bool,X221) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X222),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X222,bool),X223))) | s(bool,X220) = s(bool,X224)) ) | $spl0),
  inference(forward_demodulation,[],[f29778,f901])).
fof(f29778,plain,(
  ( ! [X222,X220,X223,X221,X224] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X220))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X221))) | s(bool,X221) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X222),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X222,bool),X223))) | s(bool,X224) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X220) = s(bool,X224)) ) | $spl0),
  inference(superposition,[],[f363,f9397])).
fof(f29777,plain,(
  ( ! [X218,X216,X215,X219,X217] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X215))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X216))) | s(bool,X216) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X217),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X217,bool),X218))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X219))) | s(bool,X215) = s(bool,X219)) ) | $spl0),
  inference(superposition,[],[f363,f14030])).
fof(f29775,plain,(
  ( ! [X208,X206,X204,X207,X205] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X205))) | s(bool,X205) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X206),'const.option.NONE_0'),s(bool,X204),s(fun(X206,bool),X207))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X208))) | s(bool,X204) = s(bool,X208)) ) | $spl0),
  inference(superposition,[],[f363,f14030])).
fof(f29774,plain,(
  ( ! [X202,X200,X199,X203,X201] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X200))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X201))) | s(bool,X201) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X202),'const.option.NONE_0'),s(bool,X199),s(fun(X202,bool),X203))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X199))) | s(bool,'T_0') = s(bool,X200)) ) | $spl0),
  inference(superposition,[],[f363,f14030])).
fof(f29773,plain,(
  ( ! [X198,X196,X194,X197,X195] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X195))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X196))) | s(bool,X196) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X197),'const.option.NONE_0'),s(bool,X194),s(fun(X197,bool),X198))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X195))) | s(bool,'T_0') = s(bool,X194)) ) | $spl0),
  inference(superposition,[],[f363,f14030])).
fof(f29940,plain,(
  ( ! [X152,X151,X153,X150] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X151))) | s(bool,X151) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X152),'const.option.NONE_0'),s(bool,X150),s(fun(X152,bool),X153))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X150)))) ) | $spl0),
  inference(forward_demodulation,[],[f29764,f901])).
fof(f29764,plain,(
  ( ! [X152,X151,X153,X150] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X151))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)))) | s(bool,X151) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X152),'const.option.NONE_0'),s(bool,X150),s(fun(X152,bool),X153))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X150)))) ) | $spl0),
  inference(superposition,[],[f363,f8984])).
fof(f29758,plain,(
  ( ! [X127,X125,X128,X126,X129] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X126))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X127))) | s(bool,X127) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X128),'const.option.NONE_0'),s(bool,X125),s(fun(X128,bool),X129))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X126))) | s(bool,'F_0') = s(bool,X125)) ) | $spl0),
  inference(superposition,[],[f363,f3902])).
fof(f29757,plain,(
  ( ! [X123,X121,X124,X122,X120] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X121))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X122))) | s(bool,X122) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X123),'const.option.NONE_0'),s(bool,X120),s(fun(X123,bool),X124))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X120))) | s(bool,'F_0') = s(bool,X121)) ) | $spl0),
  inference(superposition,[],[f363,f3902])).
fof(f29756,plain,(
  ( ! [X118,X116,X119,X117,X115] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X116))) | s(bool,X116) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X117),'const.option.NONE_0'),s(bool,X115),s(fun(X117,bool),X118))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X119))) | s(bool,X115) = s(bool,X119)) ) | $spl0),
  inference(superposition,[],[f363,f3902])).
fof(f29755,plain,(
  ( ! [X111,X109,X114,X112,X110,X108,X113] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X109))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X110))) | s(bool,X110) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X111),'const.option.NONE_0'),s(bool,X108),s(fun(X111,bool),X112))) | s(bool,X109) = s(bool,'const.bool.IN_2'(s(X113,X114),s(fun(X113,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X108)) ) | $spl0),
  inference(superposition,[],[f363,f2976])).
fof(f29754,plain,(
  ( ! [X103,X101,X107,X105,X102,X106,X104] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X102))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X103))) | s(bool,X103) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X104),'const.option.NONE_0'),s(bool,X101),s(fun(X104,bool),X105))) | s(bool,X101) = s(bool,'const.bool.IN_2'(s(X106,X107),s(fun(X106,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X102)) ) | $spl0),
  inference(superposition,[],[f363,f2976])).
fof(f29753,plain,(
  ( ! [X94,X99,X97,X95,X100,X98,X96] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X95))) | s(bool,X95) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X96),'const.option.NONE_0'),s(bool,X94),s(fun(X96,bool),X97))) | s(bool,X98) = s(bool,'const.bool.IN_2'(s(X99,X100),s(fun(X99,bool),'const.pred_set.EMPTY_0'))) | s(bool,X94) = s(bool,X98)) ) | $spl0),
  inference(superposition,[],[f363,f2976])).
fof(f29751,plain,(
  ( ! [X85,X83,X86,X84,X82] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X83))) | s(bool,X83) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X84),'const.option.NONE_0'),s(bool,X82),s(fun(X84,bool),X85))) | s(bool,X82) = s(bool,X86) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X86)),bool))) ) | $spl0),
  inference(superposition,[],[f363,f1834])).
fof(f29750,plain,(
  ( ! [X80,X78,X81,X79,X77] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X78))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X79))) | s(bool,X79) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X80),'const.option.NONE_0'),s(bool,X77),s(fun(X80,bool),X81))) | s(bool,'F_0') = s(bool,X77) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X78)),bool))) ) | $spl0),
  inference(superposition,[],[f363,f1834])).
fof(f29746,plain,(
  ( ! [X61,X59,X57,X60,X58] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X58))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X59))) | s(bool,X59) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X60),'const.option.NONE_0'),s(bool,X57),s(fun(X60,bool),X61))) | s(bool,'F_0') = s(bool,X58) | s(bool,'F_0') = s(bool,X57)) ) | $spl0),
  inference(superposition,[],[f363,f1632])).
fof(f29745,plain,(
  ( ! [X54,X52,X56,X55,X53] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X53))) | s(bool,X53) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X54),'const.option.NONE_0'),s(bool,X52),s(fun(X54,bool),X55))) | s(bool,X52) = s(bool,X56) | s(bool,'F_0') = s(bool,X56)) ) | $spl0),
  inference(superposition,[],[f363,f1632])).
fof(f29742,plain,(
  ( ! [X39,X37,X41,X38,X40] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X38))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X39))) | s(bool,X39) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X40),'const.option.NONE_0'),s(bool,X37),s(fun(X40,bool),X41))) | s(bool,'T_0') = s(bool,X38) | s(bool,'T_0') = s(bool,X37)) )),
  inference(superposition,[],[f363,f208])).
fof(f29741,plain,(
  ( ! [X35,X33,X36,X34,X32] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X33))) | s(bool,X33) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X34),'const.option.NONE_0'),s(bool,X32),s(fun(X34,bool),X35))) | s(bool,X32) = s(bool,X36) | s(bool,'T_0') = s(bool,X36)) )),
  inference(superposition,[],[f363,f208])).
fof(f29740,plain,(
  ( ! [X30,X28,X31,X29] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X29))) | s(bool,X29) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X30),'const.option.NONE_0'),s(bool,X28),s(fun(X30,bool),X31))) | s(bool,'T_0') = s(bool,X28)) )),
  inference(superposition,[],[f363,f121])).
fof(f29149,plain,(
  ( ! [X724,X722,X721,X723] : (s(X723,f(s(bool,'T_0'))) != s(X723,g(s(bool,'T_0'))) | s(fun(bool,X723),X721) = s(fun(bool,X723),X722) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X724))) | s(bool,X724) = s(bool,sK8(X721,X722,X723,bool))) ) | $spl0),
  inference(superposition,[],[f167,f14030])).
fof(f29148,plain,(
  ( ! [X720,X718,X719] : (p(s(bool,happ(s(fun(bool,bool),X719),s(bool,'T_0')))) | ~p(s(bool,happ(s(fun(bool,bool),X719),s(bool,X718)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X720))) | s(bool,X720) = s(bool,sK7(X718,X719,bool))) ) | $spl0),
  inference(superposition,[],[f161,f14030])).
fof(f29146,plain,(
  ( ! [X714,X715] : (s('type.option.option'(bool),X714) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X714) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X715))) | s(bool,X715) = s(bool,sK6(X714,bool))) ) | $spl0),
  inference(superposition,[],[f148,f14030])).
fof(f29142,plain,(
  ( ! [X697,X699,X696,X698] : (s(bool,'T_0') != s(bool,f(s(X696,sK8(X697,X698,bool,X696)))) | s(fun(X696,bool),X697) = s(fun(X696,bool),X698) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X699))) | s(bool,X699) = s(bool,g(s(X696,sK8(X697,X698,bool,X696))))) ) | $spl0),
  inference(superposition,[],[f167,f14030])).
fof(f29137,plain,(
  ( ! [X677,X679,X678] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X678),s(bool,'T_0'))) | s(bool,X677) = s(bool,sK7(X677,X678,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X679))) | s(bool,X677) = s(bool,X679)) ) | $spl0),
  inference(superposition,[],[f2789,f14030])).
fof(f29136,plain,(
  ( ! [X675,X676,X674] : (~p(s(bool,happ(s(fun(bool,bool),X675),s(bool,'T_0')))) | s(bool,sK7(X674,X675,bool)) = s(bool,sK7(sK7(X674,X675,bool),X675,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X676))) | s(bool,X674) = s(bool,X676)) ) | $spl0),
  inference(superposition,[],[f2788,f14030])).
fof(f29135,plain,(
  ( ! [X673,X671,X672] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X672),s(bool,'T_0'))) | s(bool,X671) = s(bool,sK7(X671,X672,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X673))) | s(bool,X671) = s(bool,X673)) ) | $spl0),
  inference(superposition,[],[f1756,f14030])).
fof(f29133,plain,(
  ( ! [X666,X668,X667] : (~p(s(bool,happ(s(fun(bool,bool),X667),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X667),s(bool,sK7(X666,X667,bool)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X668))) | s(bool,X666) = s(bool,X668)) ) | $spl0),
  inference(superposition,[],[f535,f14030])).
fof(f29132,plain,(
  ( ! [X664,X663,X665] : (s('type.option.option'(bool),X664) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,X663) = s(bool,sK6(X664,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X664) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X665))) | s(bool,X663) = s(bool,X665)) ) | $spl0),
  inference(superposition,[],[f459,f14030])).
fof(f29124,plain,(
  ( ! [X635,X636,X637] : (~p(s(bool,happ(s(fun(bool,bool),X636),s(bool,'T_0')))) | s(bool,X635) = s(bool,sK7(X635,X636,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X637))) | s(bool,X635) = s(bool,X637)) ) | $spl0),
  inference(superposition,[],[f160,f14030])).
fof(f29123,plain,(
  ( ! [X633,X631,X632,X634] : (~p(s(bool,happ(s(fun(bool,bool),X632),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X632),s(bool,X633)))) | s(bool,X631) != s(bool,X633) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X634))) | s(bool,X631) = s(bool,X634)) ) | $spl0),
  inference(superposition,[],[f159,f14030])).
fof(f29121,plain,(
  ( ! [X625,X627,X626] : (s(bool,'T_0') != s(bool,X626) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X625))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X626))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X627))) | s(bool,X625) = s(bool,X627)) ) | $spl0),
  inference(superposition,[],[f158,f14030])).
fof(f29119,plain,(
  ( ! [X621,X619,X620] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X620))) | s(bool,X619) = s(bool,X620) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X621))) | s(bool,X619) = s(bool,X621)) ) | $spl0),
  inference(superposition,[],[f157,f14030])).
fof(f29728,plain,(
  ( ! [X553,X555,X554] : (s(bool,X554) = s(bool,sK7(X554,X553,bool)) | s(bool,'T_0') = s(bool,X554) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X555))) | s(bool,X555) = s(bool,happ(s(fun(bool,bool),X553),s(bool,'F_0')))) ) | $spl0),
  inference(subsumption_resolution,[],[f29091,f114])).
fof(f29091,plain,(
  ( ! [X553,X555,X554] : (~p(s(bool,'T_0')) | s(bool,X554) = s(bool,sK7(X554,X553,bool)) | s(bool,'T_0') = s(bool,X554) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X555))) | s(bool,X555) = s(bool,happ(s(fun(bool,bool),X553),s(bool,'F_0')))) ) | $spl0),
  inference(superposition,[],[f440,f14030])).
fof(f29727,plain,(
  ( ! [X551,X552,X550] : (s(bool,'F_0') = s(bool,sK7('F_0',X550,bool)) | s(bool,'T_0') = s(bool,X551) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X552))) | s(bool,X552) = s(bool,happ(s(fun(bool,bool),X550),s(bool,X551)))) ) | $spl0),
  inference(subsumption_resolution,[],[f29090,f114])).
fof(f29090,plain,(
  ( ! [X551,X552,X550] : (~p(s(bool,'T_0')) | s(bool,'F_0') = s(bool,sK7('F_0',X550,bool)) | s(bool,'T_0') = s(bool,X551) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X552))) | s(bool,X552) = s(bool,happ(s(fun(bool,bool),X550),s(bool,X551)))) ) | $spl0),
  inference(superposition,[],[f439,f14030])).
fof(f29726,plain,(
  ( ! [X549,X547,X548] : (s(bool,X548) = s(bool,sK7(X548,X547,bool)) | s(bool,'F_0') = s(bool,X548) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X549))) | s(bool,X549) = s(bool,happ(s(fun(bool,bool),X547),s(bool,'T_0')))) ) | $spl0),
  inference(subsumption_resolution,[],[f29089,f114])).
fof(f29089,plain,(
  ( ! [X549,X547,X548] : (~p(s(bool,'T_0')) | s(bool,X548) = s(bool,sK7(X548,X547,bool)) | s(bool,'F_0') = s(bool,X548) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X549))) | s(bool,X549) = s(bool,happ(s(fun(bool,bool),X547),s(bool,'T_0')))) ) | $spl0),
  inference(superposition,[],[f1761,f14030])).
fof(f29725,plain,(
  ( ! [X528,X530,X529,X527] : (s(X527,sK7(X529,X528,X527)) = s(X527,sK7(sK7(X529,X528,X527),X528,X527)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X530))) | s(bool,X530) = s(bool,happ(s(fun(X527,bool),X528),s(X527,X529)))) ) | $spl0),
  inference(subsumption_resolution,[],[f29084,f114])).
fof(f29084,plain,(
  ( ! [X528,X530,X529,X527] : (~p(s(bool,'T_0')) | s(X527,sK7(X529,X528,X527)) = s(X527,sK7(sK7(X529,X528,X527),X528,X527)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X530))) | s(bool,X530) = s(bool,happ(s(fun(X527,bool),X528),s(X527,X529)))) ) | $spl0),
  inference(superposition,[],[f2788,f14030])).
fof(f29724,plain,(
  ( ! [X524,X526,X522,X525,X523] : (p(s(bool,happ(s(fun(X522,bool),X523),s(X522,X525)))) | s(X522,X524) != s(X522,X525) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X526))) | s(bool,X526) = s(bool,happ(s(fun(X522,bool),X523),s(X522,X524)))) ) | $spl0),
  inference(subsumption_resolution,[],[f29083,f114])).
fof(f29083,plain,(
  ( ! [X524,X526,X522,X525,X523] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X522,bool),X523),s(X522,X525)))) | s(X522,X524) != s(X522,X525) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X526))) | s(bool,X526) = s(bool,happ(s(fun(X522,bool),X523),s(X522,X524)))) ) | $spl0),
  inference(superposition,[],[f159,f14030])).
fof(f29723,plain,(
  ( ! [X520,X518,X521,X519] : (s(bool,'T_0') = s(bool,happ(s(fun(X518,bool),X519),s(X518,sK7(X520,X519,X518)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X521))) | s(bool,X521) = s(bool,happ(s(fun(X518,bool),X519),s(X518,X520)))) ) | $spl0),
  inference(subsumption_resolution,[],[f29082,f114])).
fof(f29082,plain,(
  ( ! [X520,X518,X521,X519] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,happ(s(fun(X518,bool),X519),s(X518,sK7(X520,X519,X518)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X521))) | s(bool,X521) = s(bool,happ(s(fun(X518,bool),X519),s(X518,X520)))) ) | $spl0),
  inference(superposition,[],[f535,f14030])).
fof(f28992,plain,(
  ( ! [X255,X253,X254,X252,X256] : (s(bool,'T_0') != s(bool,X253) | s(bool,X252) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X254),'const.option.NONE_0'),s(bool,X253),s(fun(X254,bool),X255))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X256))) | s(bool,X252) = s(bool,X256)) ) | $spl0),
  inference(superposition,[],[f9763,f14030])).
fof(f28991,plain,(
  ( ! [X251,X249,X250,X248,X247] : (s(bool,'T_0') != s(bool,X248) | s(bool,X248) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X249),'const.option.NONE_0'),s(bool,X247),s(fun(X249,bool),X250))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X251))) | s(bool,X247) = s(bool,X251)) ) | $spl0),
  inference(superposition,[],[f9763,f14030])).
fof(f29659,plain,(
  ( ! [X28,X29,X27] : (s(bool,X27) != s(bool,X28) | s(bool,'T_0') = s(bool,X28) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X29))) | s(bool,X27) = s(bool,X29)) ) | $spl0),
  inference(subsumption_resolution,[],[f28917,f114])).
fof(f28917,plain,(
  ( ! [X28,X29,X27] : (~p(s(bool,'T_0')) | s(bool,X27) != s(bool,X28) | s(bool,'T_0') = s(bool,X28) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X29))) | s(bool,X27) = s(bool,X29)) ) | $spl0),
  inference(superposition,[],[f211,f14030])).
fof(f29658,plain,(
  ( ! [X17,X18,X16] : (~p(s(bool,X17)) | s(bool,X16) = s(bool,X17) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X18))) | s(bool,X16) = s(bool,X18)) ) | $spl0),
  inference(subsumption_resolution,[],[f28914,f114])).
fof(f28914,plain,(
  ( ! [X17,X18,X16] : (~p(s(bool,'T_0')) | ~p(s(bool,X17)) | s(bool,X16) = s(bool,X17) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X18))) | s(bool,X16) = s(bool,X18)) ) | $spl0),
  inference(superposition,[],[f165,f14030])).
fof(f28902,plain,(
  ( ! [X436,X434,X435] : (s(bool,X434) != s(bool,happ(s(fun(bool,bool),X435),s(bool,X434))) | s(bool,'T_0') = s(bool,sK7('T_0',X435,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X436))) | s(bool,X434) = s(bool,X436)) ) | $spl0),
  inference(superposition,[],[f2789,f14030])).
fof(f28901,plain,(
  ( ! [X432,X431,X433] : (~p(s(bool,happ(s(fun(bool,bool),X432),s(bool,X431)))) | s(bool,sK7('T_0',X432,bool)) = s(bool,sK7(sK7('T_0',X432,bool),X432,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X433))) | s(bool,X431) = s(bool,X433)) ) | $spl0),
  inference(superposition,[],[f2788,f14030])).
fof(f28900,plain,(
  ( ! [X428,X430,X429] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X429),s(bool,X428))) | s(bool,'T_0') = s(bool,sK7('T_0',X429,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X430))) | s(bool,X428) = s(bool,X430)) ) | $spl0),
  inference(superposition,[],[f1756,f14030])).
fof(f28898,plain,(
  ( ! [X424,X423,X425] : (~p(s(bool,happ(s(fun(bool,bool),X424),s(bool,X423)))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X424),s(bool,sK7('T_0',X424,bool)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X425))) | s(bool,X423) = s(bool,X425)) ) | $spl0),
  inference(superposition,[],[f535,f14030])).
fof(f28897,plain,(
  ( ! [X420,X422,X421] : (s('type.option.option'(bool),X421) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X420))) | s(bool,'T_0') = s(bool,sK6(X421,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X421) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X422))) | s(bool,X420) = s(bool,X422)) ) | $spl0),
  inference(superposition,[],[f459,f14030])).
fof(f28895,plain,(
  ( ! [X416,X417] : (s(bool,X416) != s(bool,'const.bool.IN_2'(s(bool,X416),s(fun(bool,bool),'const.pred_set.EMPTY_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X417))) | s(bool,X416) = s(bool,X417)) ) | $spl0),
  inference(superposition,[],[f192,f14030])).
fof(f28889,plain,(
  ( ! [X393,X392,X394] : (~p(s(bool,happ(s(fun(bool,bool),X393),s(bool,X392)))) | s(bool,'T_0') = s(bool,sK7('T_0',X393,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X394))) | s(bool,X392) = s(bool,X394)) ) | $spl0),
  inference(superposition,[],[f160,f14030])).
fof(f28888,plain,(
  ( ! [X389,X391,X388,X390] : (~p(s(bool,happ(s(fun(bool,bool),X389),s(bool,X388)))) | p(s(bool,happ(s(fun(bool,bool),X389),s(bool,X390)))) | s(bool,'T_0') != s(bool,X390) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X391))) | s(bool,X388) = s(bool,X391)) ) | $spl0),
  inference(superposition,[],[f159,f14030])).
fof(f28864,plain,(
  ( ! [X302,X304,X306,X303,X305] : (s(bool,X302) != s(bool,X303) | s(bool,X303) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X304),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X304,bool),X305))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X306))) | s(bool,X302) = s(bool,X306)) ) | $spl0),
  inference(superposition,[],[f9763,f14030])).
fof(f29650,plain,(
  ( ! [X171,X172,X170] : (s(bool,X170) != s(bool,X171) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X171))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X172))) | s(bool,X170) = s(bool,X172)) ) | $spl0),
  inference(subsumption_resolution,[],[f28824,f180])).
fof(f28824,plain,(
  ( ! [X171,X172,X170] : (s(bool,X170) != s(bool,X171) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X171))) | s(bool,'T_0') = s(bool,'F_0') | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X172))) | s(bool,X170) = s(bool,X172)) ) | $spl0),
  inference(superposition,[],[f1774,f14030])).
fof(f28801,plain,(
  ( ! [X103,X101,X102,X104] : (s(bool,X101) != s(bool,X102) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X103))) | s(bool,X102) = s(bool,X103) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X104))) | s(bool,X101) = s(bool,X104)) ) | $spl0),
  inference(superposition,[],[f26480,f14030])).
fof(f28800,plain,(
  ( ! [X99,X97,X95,X100,X98,X96] : (s(bool,X95) != s(bool,X96) | s(bool,X97) = s(bool,'const.bool.IN_2'(s(X98,X99),s(fun(X98,bool),'const.pred_set.EMPTY_0'))) | s(bool,X96) = s(bool,X97) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X100))) | s(bool,X95) = s(bool,X100)) ) | $spl0),
  inference(superposition,[],[f22072,f14030])).
fof(f28799,plain,(
  ( ! [X94,X92,X93,X91] : (s(bool,X92) != s(bool,sK6('const.option.SOME_1'(s(bool,X91)),bool)) | s(bool,X92) = s(bool,X93) | s(bool,'F_0') = s(bool,X93) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X94))) | s(bool,X91) = s(bool,X94)) ) | $spl0),
  inference(superposition,[],[f17475,f14030])).
fof(f28795,plain,(
  ( ! [X76,X74,X77,X75] : (s(bool,X75) = s(bool,sK6('const.option.SOME_1'(s(bool,X74)),bool)) | s(bool,X75) = s(bool,X76) | s(bool,'T_0') = s(bool,X76) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X77))) | s(bool,X74) = s(bool,X77)) ) | $spl0),
  inference(superposition,[],[f9397,f14030])).
fof(f28794,plain,(
  ( ! [X72,X71,X73] : (s(bool,X71) != s(bool,X72) | s(bool,X72) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X73))) | s(bool,X71) = s(bool,X73)) ) | $spl0),
  inference(superposition,[],[f9392,f14030])).
fof(f28793,plain,(
  ( ! [X70,X68,X69] : (s(bool,X69) = s(bool,sK6('const.option.SOME_1'(s(bool,X68)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X69))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X70))) | s(bool,X68) = s(bool,X70)) ) | $spl0),
  inference(superposition,[],[f8984,f14030])).
fof(f28790,plain,(
  ( ! [X59,X57,X58] : (s(bool,X58) = s(bool,sK6('const.option.SOME_1'(s(bool,X57)),bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X58)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X59))) | s(bool,X57) = s(bool,X59)) ) | $spl0),
  inference(superposition,[],[f7724,f14030])).
fof(f28789,plain,(
  ( ! [X54,X56,X55] : (s(bool,X55) = s(bool,sK6('const.option.SOME_1'(s(bool,X54)),bool)) | s(bool,'F_0') = s(bool,X55) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X56))) | s(bool,X54) = s(bool,X56)) ) | $spl0),
  inference(superposition,[],[f7478,f14030])).
fof(f28786,plain,(
  ( ! [X47,X45,X43,X46,X44] : (s(bool,X43) != s(bool,X44) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X45),'const.option.NONE_0'),s(bool,X44),s(fun(X45,bool),X46))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X47))) | s(bool,X43) = s(bool,X47)) ) | $spl0),
  inference(superposition,[],[f5098,f14030])).
fof(f28785,plain,(
  ( ! [X37,X35,X36,X34] : (s(bool,X34) != s(bool,X35) | s(bool,X35) = s(bool,X36) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X36)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X37))) | s(bool,X34) = s(bool,X37)) ) | $spl0),
  inference(superposition,[],[f3405,f14030])).
fof(f28784,plain,(
  ( ! [X28,X26,X29,X27] : (s(bool,X26) != s(bool,X27) | s(bool,X28) = s(bool,sK6('const.option.SOME_1'(s(bool,X27)),bool)) | s(bool,'F_0') = s(bool,X28) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X29))) | s(bool,X26) = s(bool,X29)) ) | $spl0),
  inference(superposition,[],[f2660,f14030])).
fof(f28783,plain,(
  ( ! [X24,X23,X25,X22] : (s(bool,X22) != s(bool,X23) | s(bool,X23) = s(bool,X24) | s(bool,'F_0') = s(bool,X24) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X25))) | s(bool,X22) = s(bool,X25)) ) | $spl0),
  inference(superposition,[],[f2035,f14030])).
fof(f28782,plain,(
  ( ! [X21,X19,X20,X18] : (~p(s(bool,happ(s(fun(bool,bool),X19),s(bool,X18)))) | s(bool,X20) = s(bool,sK7(X20,X19,bool)) | s(bool,'F_0') = s(bool,X20) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X21))) | s(bool,X18) = s(bool,X21)) ) | $spl0),
  inference(superposition,[],[f1761,f14030])).
fof(f28781,plain,(
  ( ! [X14,X17,X15,X16] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X14))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X15))) | s(bool,X15) = s(bool,X16) | s(bool,'F_0') = s(bool,X16) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X17))) | s(bool,X14) = s(bool,X17)) ) | $spl0),
  inference(superposition,[],[f1758,f14030])).
fof(f28777,plain,(
  ( ! [X745,X747,X744,X746] : (s(X746,f(s(bool,X747))) != s(X746,g(s(bool,X747))) | s(fun(bool,X746),X744) = s(fun(bool,X746),X745) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X747))) | s(bool,'T_0') = s(bool,sK8(X744,X745,X746,bool))) ) | $spl0),
  inference(superposition,[],[f167,f14030])).
fof(f28776,plain,(
  ( ! [X741,X743,X742] : (p(s(bool,happ(s(fun(bool,bool),X742),s(bool,X743)))) | ~p(s(bool,happ(s(fun(bool,bool),X742),s(bool,X741)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X743))) | s(bool,'T_0') = s(bool,sK7(X741,X742,bool))) ) | $spl0),
  inference(superposition,[],[f161,f14030])).
fof(f28770,plain,(
  ( ! [X720,X722,X721,X719] : (s(bool,X722) != s(bool,f(s(X719,sK8(X720,X721,bool,X719)))) | s(fun(X719,bool),X720) = s(fun(X719,bool),X721) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X722))) | s(bool,'T_0') = s(bool,g(s(X719,sK8(X720,X721,bool,X719))))) ) | $spl0),
  inference(superposition,[],[f167,f14030])).
fof(f28765,plain,(
  ( ! [X699,X700,X701] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X701),s(bool,X700))) | s(bool,X699) = s(bool,sK7(X699,X701,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X700))) | s(bool,'T_0') = s(bool,X699)) ) | $spl0),
  inference(superposition,[],[f2789,f14030])).
fof(f28764,plain,(
  ( ! [X697,X696,X698] : (~p(s(bool,happ(s(fun(bool,bool),X698),s(bool,X697)))) | s(bool,sK7(X696,X698,bool)) = s(bool,sK7(sK7(X696,X698,bool),X698,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X697))) | s(bool,'T_0') = s(bool,X696)) ) | $spl0),
  inference(superposition,[],[f2788,f14030])).
fof(f28763,plain,(
  ( ! [X693,X695,X694] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X695),s(bool,X694))) | s(bool,X693) = s(bool,sK7(X693,X695,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X694))) | s(bool,'T_0') = s(bool,X693)) ) | $spl0),
  inference(superposition,[],[f1756,f14030])).
fof(f28761,plain,(
  ( ! [X689,X688,X690] : (~p(s(bool,happ(s(fun(bool,bool),X690),s(bool,X689)))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X690),s(bool,sK7(X688,X690,bool)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X689))) | s(bool,'T_0') = s(bool,X688)) ) | $spl0),
  inference(superposition,[],[f535,f14030])).
fof(f28760,plain,(
  ( ! [X685,X687,X686] : (s('type.option.option'(bool),X687) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X686))) | s(bool,X685) = s(bool,sK6(X687,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X687) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X686))) | s(bool,'T_0') = s(bool,X685)) ) | $spl0),
  inference(superposition,[],[f459,f14030])).
fof(f28751,plain,(
  ( ! [X656,X654,X653,X655] : (~p(s(bool,happ(s(fun(bool,bool),X655),s(bool,X654)))) | p(s(bool,happ(s(fun(bool,bool),X655),s(bool,X656)))) | s(bool,X653) != s(bool,X656) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X654))) | s(bool,'T_0') = s(bool,X653)) ) | $spl0),
  inference(superposition,[],[f159,f14030])).
fof(f29630,plain,(
  ( ! [X494,X496,X495] : (s(bool,X494) != s(bool,X495) | s(bool,X496) = s(bool,sK6('const.option.SOME_1'(s(bool,X495)),bool)) | s(bool,'T_0') = s(bool,X496) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X494)))) ) | $spl0),
  inference(subsumption_resolution,[],[f28694,f180])).
fof(f28694,plain,(
  ( ! [X494,X496,X495] : (s(bool,X494) != s(bool,X495) | s(bool,X496) = s(bool,sK6('const.option.SOME_1'(s(bool,X495)),bool)) | s(bool,'T_0') = s(bool,X496) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X494))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl0),
  inference(superposition,[],[f14507,f14030])).
fof(f29629,plain,(
  ( ! [X482,X481] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X481))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X482))) | s(bool,X482) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X481)))) ) | $spl0),
  inference(subsumption_resolution,[],[f28689,f180])).
fof(f28689,plain,(
  ( ! [X482,X481] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X481))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X482))) | s(bool,X482) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X481))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl0),
  inference(superposition,[],[f8984,f14030])).
fof(f29627,plain,(
  ( ! [X469,X470] : (s(bool,X470) != s(bool,sK6('const.option.SOME_1'(s(bool,X469)),bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X470)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X469)))) ) | $spl0),
  inference(subsumption_resolution,[],[f28684,f180])).
fof(f28684,plain,(
  ( ! [X469,X470] : (s(bool,X470) != s(bool,sK6('const.option.SOME_1'(s(bool,X469)),bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X470)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X469))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl0),
  inference(superposition,[],[f4474,f14030])).
fof(f29626,plain,(
  ( ! [X461,X460,X462] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X460))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X461))) | s(bool,X461) = s(bool,X462) | s(bool,'F_0') = s(bool,X462) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X460)))) ) | $spl0),
  inference(subsumption_resolution,[],[f28680,f180])).
fof(f28680,plain,(
  ( ! [X461,X460,X462] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X460))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X461))) | s(bool,X461) = s(bool,X462) | s(bool,'F_0') = s(bool,X462) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X460))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl0),
  inference(superposition,[],[f3902,f14030])).
fof(f29625,plain,(
  ( ! [X443,X442] : (s('type.option.option'(bool),X443) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X442))) | s(bool,'T_0') = s(bool,sK6(X443,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X443) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X442)))) ) | $spl0),
  inference(subsumption_resolution,[],[f28674,f180])).
fof(f28674,plain,(
  ( ! [X443,X442] : (s('type.option.option'(bool),X443) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X442))) | s(bool,'T_0') = s(bool,sK6(X443,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X443) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X442))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl0),
  inference(superposition,[],[f458,f14030])).
fof(f29624,plain,(
  ( ! [X441,X440,X439] : (~p(s(bool,happ(s(fun(bool,bool),X440),s(bool,X439)))) | s(bool,X441) = s(bool,sK7(X441,X440,bool)) | s(bool,'T_0') = s(bool,X441) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X439)))) ) | $spl0),
  inference(subsumption_resolution,[],[f28673,f180])).
fof(f28673,plain,(
  ( ! [X441,X440,X439] : (~p(s(bool,happ(s(fun(bool,bool),X440),s(bool,X439)))) | s(bool,X441) = s(bool,sK7(X441,X440,bool)) | s(bool,'T_0') = s(bool,X441) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X439))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl0),
  inference(superposition,[],[f440,f14030])).
fof(f29623,plain,(
  ( ! [X436,X438,X437] : (s(bool,X436) != s(bool,X437) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X437))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X438))) | s(bool,'T_0') = s(bool,X438) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X436)))) ) | $spl0),
  inference(subsumption_resolution,[],[f28672,f180])).
fof(f28672,plain,(
  ( ! [X436,X438,X437] : (s(bool,X436) != s(bool,X437) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X437))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X438))) | s(bool,'T_0') = s(bool,X438) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X436))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl0),
  inference(superposition,[],[f404,f14030])).
fof(f29622,plain,(
  ( ! [X434,X433,X435] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X433))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X434))) | s(bool,X434) = s(bool,X435) | s(bool,'T_0') = s(bool,X435) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X433)))) ) | $spl0),
  inference(subsumption_resolution,[],[f28671,f180])).
fof(f28671,plain,(
  ( ! [X434,X433,X435] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X433))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X434))) | s(bool,X434) = s(bool,X435) | s(bool,'T_0') = s(bool,X435) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X433))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl0),
  inference(superposition,[],[f362,f14030])).
fof(f29621,plain,(
  ( ! [X430,X429] : (~p(s(bool,X430)) | s(bool,X429) != s(bool,X430) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X429)))) ) | $spl0),
  inference(subsumption_resolution,[],[f28668,f180])).
fof(f28668,plain,(
  ( ! [X430,X429] : (s(bool,X429) != s(bool,X430) | ~p(s(bool,X430)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X429))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl0),
  inference(superposition,[],[f127,f14030])).
fof(f28615,plain,(
  ( ! [X261,X263,X259,X260,X262] : (s(bool,X260) != s(bool,X261) | s(bool,X259) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X262),'const.option.NONE_0'),s(bool,X261),s(fun(X262,bool),X263))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X260))) | s(bool,'T_0') = s(bool,X259)) ) | $spl0),
  inference(superposition,[],[f9763,f14030])).
fof(f28614,plain,(
  ( ! [X255,X257,X254,X256,X258] : (s(bool,X255) != s(bool,X256) | s(bool,X256) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X257),'const.option.NONE_0'),s(bool,X254),s(fun(X257,bool),X258))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X255))) | s(bool,'T_0') = s(bool,X254)) ) | $spl0),
  inference(superposition,[],[f9763,f14030])).
fof(f29550,plain,(
  ( ! [X63] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X63))) | s(bool,X63) != s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3)))))) ) | $spl0),
  inference(global_subsumption,[],[f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209])).
fof(f29209,plain,(
  ( ! [X62,X63] : (s(bool,X63) != s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3))))) | s(bool,'T_0') = s(bool,X62) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X63)))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f28548])).
fof(f28548,plain,(
  ( ! [X62,X63] : (s(bool,X63) != s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3))))) | s(bool,'T_0') = s(bool,X62) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X63))) | s(bool,'T_0') = s(bool,X62)) ) | $spl0),
  inference(superposition,[],[f766,f14030])).
fof(f28525,plain,(
  ( ! [X745,X747,X744,X746] : (s(X746,f(s(bool,X747))) != s(X746,g(s(bool,X747))) | s(fun(bool,X746),X744) = s(fun(bool,X746),X745) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK8(X744,X745,X746,bool)))) | s(bool,'T_0') = s(bool,X747)) ) | $spl0),
  inference(superposition,[],[f167,f14030])).
fof(f28524,plain,(
  ( ! [X741,X743,X742] : (p(s(bool,happ(s(fun(bool,bool),X742),s(bool,X743)))) | ~p(s(bool,happ(s(fun(bool,bool),X742),s(bool,X741)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK7(X741,X742,bool)))) | s(bool,'T_0') = s(bool,X743)) ) | $spl0),
  inference(superposition,[],[f161,f14030])).
fof(f28522,plain,(
  ( ! [X738,X737] : (s('type.option.option'(bool),X737) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X738))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X737) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6(X737,bool)))) | s(bool,'T_0') = s(bool,X738)) ) | $spl0),
  inference(superposition,[],[f148,f14030])).
fof(f28518,plain,(
  ( ! [X720,X722,X721,X719] : (s(bool,X722) != s(bool,f(s(X719,sK8(X720,X721,bool,X719)))) | s(fun(X719,bool),X720) = s(fun(X719,bool),X721) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,g(s(X719,sK8(X720,X721,bool,X719)))))) | s(bool,'T_0') = s(bool,X722)) ) | $spl0),
  inference(superposition,[],[f167,f14030])).
fof(f28513,plain,(
  ( ! [X699,X700,X701] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X701),s(bool,X700))) | s(bool,X699) = s(bool,sK7(X699,X701,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X699))) | s(bool,'T_0') = s(bool,X700)) ) | $spl0),
  inference(superposition,[],[f2789,f14030])).
fof(f28512,plain,(
  ( ! [X697,X696,X698] : (~p(s(bool,happ(s(fun(bool,bool),X698),s(bool,X697)))) | s(bool,sK7(X696,X698,bool)) = s(bool,sK7(sK7(X696,X698,bool),X698,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X696))) | s(bool,'T_0') = s(bool,X697)) ) | $spl0),
  inference(superposition,[],[f2788,f14030])).
fof(f28511,plain,(
  ( ! [X693,X695,X694] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X695),s(bool,X694))) | s(bool,X693) = s(bool,sK7(X693,X695,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X693))) | s(bool,'T_0') = s(bool,X694)) ) | $spl0),
  inference(superposition,[],[f1756,f14030])).
fof(f28509,plain,(
  ( ! [X689,X688,X690] : (~p(s(bool,happ(s(fun(bool,bool),X690),s(bool,X689)))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X690),s(bool,sK7(X688,X690,bool)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X688))) | s(bool,'T_0') = s(bool,X689)) ) | $spl0),
  inference(superposition,[],[f535,f14030])).
fof(f28508,plain,(
  ( ! [X685,X687,X686] : (s('type.option.option'(bool),X687) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X686))) | s(bool,X685) = s(bool,sK6(X687,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X687) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X685))) | s(bool,'T_0') = s(bool,X686)) ) | $spl0),
  inference(superposition,[],[f459,f14030])).
fof(f28500,plain,(
  ( ! [X658,X657,X659] : (~p(s(bool,happ(s(fun(bool,bool),X659),s(bool,X658)))) | s(bool,X657) = s(bool,sK7(X657,X659,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X657))) | s(bool,'T_0') = s(bool,X658)) ) | $spl0),
  inference(superposition,[],[f160,f14030])).
fof(f28499,plain,(
  ( ! [X656,X654,X653,X655] : (~p(s(bool,happ(s(fun(bool,bool),X655),s(bool,X654)))) | p(s(bool,happ(s(fun(bool,bool),X655),s(bool,X656)))) | s(bool,X653) != s(bool,X656) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X653))) | s(bool,'T_0') = s(bool,X654)) ) | $spl0),
  inference(superposition,[],[f159,f14030])).
fof(f28497,plain,(
  ( ! [X648,X649,X647] : (s(bool,X648) != s(bool,X649) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X647))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X649))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X647))) | s(bool,'T_0') = s(bool,X648)) ) | $spl0),
  inference(superposition,[],[f158,f14030])).
fof(f28495,plain,(
  ( ! [X642,X641,X643] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X642))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X643))) | s(bool,X641) = s(bool,X643) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X641))) | s(bool,'T_0') = s(bool,X642)) ) | $spl0),
  inference(superposition,[],[f157,f14030])).
fof(f28363,plain,(
  ( ! [X261,X263,X259,X260,X262] : (s(bool,X260) != s(bool,X261) | s(bool,X259) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X262),'const.option.NONE_0'),s(bool,X261),s(fun(X262,bool),X263))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X259))) | s(bool,'T_0') = s(bool,X260)) ) | $spl0),
  inference(superposition,[],[f9763,f14030])).
fof(f28362,plain,(
  ( ! [X255,X257,X254,X256,X258] : (s(bool,X255) != s(bool,X256) | s(bool,X256) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X257),'const.option.NONE_0'),s(bool,X254),s(fun(X257,bool),X258))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X254))) | s(bool,'T_0') = s(bool,X255)) ) | $spl0),
  inference(superposition,[],[f9763,f14030])).
fof(f28269,plain,(
  ( ! [X125,X123,X124] : (s(bool,'T_0') != s(bool,happ(s(fun('type.option.option'(bool),bool),X124),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X123))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,X123)),X124,'type.option.option'(bool))) | s(bool,X123) = s(bool,X125) | s(bool,'T_0') = s(bool,X125)) ) | $spl0),
  inference(superposition,[],[f2789,f14030])).
fof(f28268,plain,(
  ( ! [X121,X122,X120] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X121),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0')))))) | s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,X120)),X121,'type.option.option'(bool))) = s('type.option.option'(bool),sK7(sK7('const.option.SOME_1'(s(bool,X120)),X121,'type.option.option'(bool)),X121,'type.option.option'(bool))) | s(bool,X120) = s(bool,X122) | s(bool,'T_0') = s(bool,X122)) ) | $spl0),
  inference(superposition,[],[f2788,f14030])).
fof(f28267,plain,(
  ( ! [X118,X119,X117] : (s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X118),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X117))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,X117)),X118,'type.option.option'(bool))) | s(bool,X117) = s(bool,X119) | s(bool,'T_0') = s(bool,X119)) ) | $spl0),
  inference(superposition,[],[f1756,f14030])).
fof(f28265,plain,(
  ( ! [X114,X112,X113] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X113),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0')))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X113),s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,X112)),X113,'type.option.option'(bool))))) | s(bool,X112) = s(bool,X114) | s(bool,'T_0') = s(bool,X114)) ) | $spl0),
  inference(superposition,[],[f535,f14030])).
fof(f28264,plain,(
  ( ! [X111,X109,X110] : (s('type.option.option'('type.option.option'(bool)),X110) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X109))) = s('type.option.option'(bool),sK6(X110,'type.option.option'(bool))) | s('type.option.option'('type.option.option'(bool)),'const.option.NONE_0') = s('type.option.option'('type.option.option'(bool)),X110) | s(bool,X109) = s(bool,X111) | s(bool,'T_0') = s(bool,X111)) ) | $spl0),
  inference(superposition,[],[f459,f14030])).
fof(f28256,plain,(
  ( ! [X83,X81,X82] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X82),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0')))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X81))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,X81)),X82,'type.option.option'(bool))) | s(bool,X81) = s(bool,X83) | s(bool,'T_0') = s(bool,X83)) ) | $spl0),
  inference(superposition,[],[f160,f14030])).
fof(f28255,plain,(
  ( ! [X80,X78,X79,X77] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X78),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0')))))) | p(s(bool,happ(s(fun('type.option.option'(bool),bool),X78),s('type.option.option'(bool),X79)))) | s('type.option.option'(bool),X79) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X77))) | s(bool,X77) = s(bool,X80) | s(bool,'T_0') = s(bool,X80)) ) | $spl0),
  inference(superposition,[],[f159,f14030])).
fof(f28253,plain,(
  ( ! [X72,X71,X73] : (s('type.option.option'(bool),X72) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X72))) = s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X71))))) | s(bool,X71) = s(bool,X73) | s(bool,'T_0') = s(bool,X73)) ) | $spl0),
  inference(superposition,[],[f158,f14030])).
fof(f28251,plain,(
  ( ! [X66,X67,X65] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X66))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) | s('type.option.option'(bool),X66) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X65))) | s(bool,X65) = s(bool,X67) | s(bool,'T_0') = s(bool,X67)) ) | $spl0),
  inference(superposition,[],[f157,f14030])).
fof(f29447,plain,(
  ( ! [X57,X56,X55] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X56))) | s(bool,X56) = s(bool,sK6('const.option.SOME_1'(s(bool,X55)),bool)) | s(bool,X55) = s(bool,X57) | s(bool,'T_0') = s(bool,X57)) ) | $spl0),
  inference(subsumption_resolution,[],[f28248,f153])).
fof(f28248,plain,(
  ( ! [X57,X56,X55] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X56))) | s(bool,X56) = s(bool,sK6('const.option.SOME_1'(s(bool,X55)),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X55))) | s(bool,X55) = s(bool,X57) | s(bool,'T_0') = s(bool,X57)) ) | $spl0),
  inference(superposition,[],[f459,f14030])).
fof(f28242,plain,(
  ( ! [X39,X41,X38,X42,X40] : (s(X39,happ(s(fun(bool,X39),X40),s(bool,X38))) = s(X39,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s(X39,X41),s(fun(bool,X39),X40))) | s(bool,X38) = s(bool,X42) | s(bool,'T_0') = s(bool,X42)) ) | $spl0),
  inference(superposition,[],[f168,f14030])).
fof(f28223,plain,(
  ( ! [X107,X108,X106] : (s(bool,'T_0') != s(bool,happ(s(fun('type.option.option'(bool),bool),X107),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X106))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'T_0')),X107,'type.option.option'(bool))) | s(bool,X106) = s(bool,X108) | s(bool,'T_0') = s(bool,X108)) ) | $spl0),
  inference(superposition,[],[f2789,f14030])).
fof(f28222,plain,(
  ( ! [X103,X105,X104] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X104),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X103)))))) | s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'T_0')),X104,'type.option.option'(bool))) = s('type.option.option'(bool),sK7(sK7('const.option.SOME_1'(s(bool,'T_0')),X104,'type.option.option'(bool)),X104,'type.option.option'(bool))) | s(bool,X103) = s(bool,X105) | s(bool,'T_0') = s(bool,X105)) ) | $spl0),
  inference(superposition,[],[f2788,f14030])).
fof(f28221,plain,(
  ( ! [X101,X102,X100] : (s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X101),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X100))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'T_0')),X101,'type.option.option'(bool))) | s(bool,X100) = s(bool,X102) | s(bool,'T_0') = s(bool,X102)) ) | $spl0),
  inference(superposition,[],[f1756,f14030])).
fof(f28219,plain,(
  ( ! [X97,X95,X96] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X96),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X95)))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X96),s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'T_0')),X96,'type.option.option'(bool))))) | s(bool,X95) = s(bool,X97) | s(bool,'T_0') = s(bool,X97)) ) | $spl0),
  inference(superposition,[],[f535,f14030])).
fof(f28218,plain,(
  ( ! [X94,X92,X93] : (s('type.option.option'('type.option.option'(bool)),X93) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X92))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),sK6(X93,'type.option.option'(bool))) | s('type.option.option'('type.option.option'(bool)),'const.option.NONE_0') = s('type.option.option'('type.option.option'(bool)),X93) | s(bool,X92) = s(bool,X94) | s(bool,'T_0') = s(bool,X94)) ) | $spl0),
  inference(superposition,[],[f459,f14030])).
fof(f28210,plain,(
  ( ! [X66,X64,X65] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X65),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X64)))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'T_0')),X65,'type.option.option'(bool))) | s(bool,X64) = s(bool,X66) | s(bool,'T_0') = s(bool,X66)) ) | $spl0),
  inference(superposition,[],[f160,f14030])).
fof(f28209,plain,(
  ( ! [X61,X62,X60,X63] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X61),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X60)))))) | p(s(bool,happ(s(fun('type.option.option'(bool),bool),X61),s('type.option.option'(bool),X62)))) | s('type.option.option'(bool),X62) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,X60) = s(bool,X63) | s(bool,'T_0') = s(bool,X63)) ) | $spl0),
  inference(superposition,[],[f159,f14030])).
fof(f28207,plain,(
  ( ! [X54,X56,X55] : (s('type.option.option'(bool),X55) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X54))) | s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X55))) = s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) | s(bool,X54) = s(bool,X56) | s(bool,'T_0') = s(bool,X56)) ) | $spl0),
  inference(superposition,[],[f158,f14030])).
fof(f28205,plain,(
  ( ! [X50,X48,X49] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X49))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X48))))) | s('type.option.option'(bool),X49) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,X48) = s(bool,X50) | s(bool,'T_0') = s(bool,X50)) ) | $spl0),
  inference(superposition,[],[f157,f14030])).
fof(f28198,plain,(
  ( ! [X28,X26,X24,X27,X25] : (s(X25,happ(s(fun(bool,X25),X26),s(bool,'T_0'))) = s(X25,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X24))),s(X25,X27),s(fun(bool,X25),X26))) | s(bool,X24) = s(bool,X28) | s(bool,'T_0') = s(bool,X28)) ) | $spl0),
  inference(superposition,[],[f168,f14030])).
fof(f28189,plain,(
  ( ! [X191,X189,X192,X190,X193] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X189),X190),s(bool,X191),s(fun(X189,bool),X192))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X193))) | s(bool,X193) = s(bool,happ(s(fun(fun(X189,bool),bool),happ(s(fun(bool,fun(fun(X189,bool),bool)),happ(s(fun('type.option.option'(X189),fun(bool,fun(fun(X189,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X189),X190))),s(bool,X191))),s(fun(X189,bool),X192)))) ) | $spl0),
  inference(superposition,[],[f14030,f169])).
fof(f28188,plain,(
  ( ! [X187,X185,X188,X186,X184] : (s(bool,'T_0') = s(bool,happ(s(fun(X184,bool),X187),s(X184,X185))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X188))) | s(bool,X188) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X184),'const.option.SOME_1'(s(X184,X185))),s(bool,X186),s(fun(X184,bool),X187)))) ) | $spl0),
  inference(superposition,[],[f14030,f168])).
fof(f28187,plain,(
  ( ! [X182,X180,X183,X181] : (s(bool,'T_0') = s(bool,X181) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X183))) | s(bool,X183) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X180),'const.option.NONE_0'),s(bool,X181),s(fun(X180,bool),X182)))) ) | $spl0),
  inference(superposition,[],[f14030,f166])).
fof(f28109,plain,(
  ( ! [X10,X8,X11,X9] : (s(bool,X8) = s(bool,X9) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X10))) | s(bool,X9) = s(bool,X10) | s(bool,X8) = s(bool,X11) | s(bool,'T_0') = s(bool,X11)) ) | $spl0),
  inference(superposition,[],[f14030,f208])).
fof(f28108,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,X4) = s(bool,X5) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X6))) | s(bool,X5) = s(bool,X6) | s(bool,X7) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X4) = s(bool,X7)) ) | $spl0),
  inference(superposition,[],[f14030,f9397])).
fof(f28107,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X2))) | s(bool,X1) = s(bool,X2) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X3))) | s(bool,X0) = s(bool,X3)) ) | $spl0),
  inference(superposition,[],[f14030,f14030])).
fof(f28105,plain,(
  ( ! [X212,X210,X208,X211,X209] : (s(bool,X212) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X208),X209),s(bool,X210),s(fun(X208,bool),X211))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X212))) | s(bool,'T_0') = s(bool,happ(s(fun(fun(X208,bool),bool),happ(s(fun(bool,fun(fun(X208,bool),bool)),happ(s(fun('type.option.option'(X208),fun(bool,fun(fun(X208,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X208),X209))),s(bool,X210))),s(fun(X208,bool),X211)))) ) | $spl0),
  inference(superposition,[],[f14030,f169])).
fof(f28104,plain,(
  ( ! [X206,X204,X207,X205,X203] : (s(bool,X207) = s(bool,happ(s(fun(X203,bool),X206),s(X203,X204))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X207))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X203),'const.option.SOME_1'(s(X203,X204))),s(bool,X205),s(fun(X203,bool),X206)))) ) | $spl0),
  inference(superposition,[],[f14030,f168])).
fof(f28103,plain,(
  ( ! [X202,X200,X199,X201] : (s(bool,X200) = s(bool,X202) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X202))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X199),'const.option.NONE_0'),s(bool,X200),s(fun(X199,bool),X201)))) ) | $spl0),
  inference(superposition,[],[f14030,f166])).
fof(f27952,plain,(
  ( ! [X191,X189,X192,X190,X193] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X189),X190),s(bool,X191),s(fun(X189,bool),X192))))) | s(bool,X193) = s(bool,happ(s(fun(fun(X189,bool),bool),happ(s(fun(bool,fun(fun(X189,bool),bool)),happ(s(fun('type.option.option'(X189),fun(bool,fun(fun(X189,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X189),X190))),s(bool,X191))),s(fun(X189,bool),X192))) | s(bool,'T_0') = s(bool,X193)) ) | $spl0),
  inference(superposition,[],[f14030,f169])).
fof(f27951,plain,(
  ( ! [X187,X185,X188,X186,X184] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X184,bool),X187),s(X184,X185))))) | s(bool,X188) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X184),'const.option.SOME_1'(s(X184,X185))),s(bool,X186),s(fun(X184,bool),X187))) | s(bool,'T_0') = s(bool,X188)) ) | $spl0),
  inference(superposition,[],[f14030,f168])).
fof(f27950,plain,(
  ( ! [X182,X180,X183,X181] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X181))) | s(bool,X183) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X180),'const.option.NONE_0'),s(bool,X181),s(fun(X180,bool),X182))) | s(bool,'T_0') = s(bool,X183)) ) | $spl0),
  inference(superposition,[],[f14030,f166])).
fof(f29314,plain,(
  ( ! [X57,X56,X55] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X55))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X56))) | s(bool,X56) = s(bool,X57) | s(bool,'T_0') = s(bool,X57) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X55)))) ) | $spl0),
  inference(subsumption_resolution,[],[f27881,f180])).
fof(f27881,plain,(
  ( ! [X57,X56,X55] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X55))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X56))) | s(bool,X56) = s(bool,X57) | s(bool,'T_0') = s(bool,X57) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X55))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl0),
  inference(superposition,[],[f14030,f3902])).
fof(f29313,plain,(
  ( ! [X47,X50,X48,X51,X49] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X47))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X48))) | s(bool,X48) = s(bool,X49) | s(bool,'T_0') = s(bool,X49) | s(bool,X47) = s(bool,'const.bool.IN_2'(s(X50,X51),s(fun(X50,bool),'const.pred_set.EMPTY_0')))) ) | $spl0),
  inference(subsumption_resolution,[],[f27879,f180])).
fof(f27879,plain,(
  ( ! [X47,X50,X48,X51,X49] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X47))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X48))) | s(bool,X48) = s(bool,X49) | s(bool,'T_0') = s(bool,X49) | s(bool,X47) = s(bool,'const.bool.IN_2'(s(X50,X51),s(fun(X50,bool),'const.pred_set.EMPTY_0'))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl0),
  inference(superposition,[],[f14030,f2976])).
fof(f29312,plain,(
  ( ! [X43,X44,X42] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X42))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X43))) | s(bool,X43) = s(bool,X44) | s(bool,'T_0') = s(bool,X44) | s(bool,'F_0') = s(bool,X42)) ) | $spl0),
  inference(subsumption_resolution,[],[f27878,f192])).
fof(f27878,plain,(
  ( ! [X45,X43,X46,X44,X42] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X42))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X43))) | s(bool,X43) = s(bool,X44) | s(bool,'T_0') = s(bool,X44) | s(bool,'T_0') = s(bool,'const.bool.IN_2'(s(X45,X46),s(fun(X45,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X42)) ) | $spl0),
  inference(superposition,[],[f14030,f2976])).
fof(f29311,plain,(
  ( ! [X39,X37,X38] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X37))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X38))) | s(bool,X38) = s(bool,X39) | s(bool,'T_0') = s(bool,X39) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X37)),bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f27877,f180])).
fof(f27877,plain,(
  ( ! [X39,X37,X38] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X37))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X38))) | s(bool,X38) = s(bool,X39) | s(bool,'T_0') = s(bool,X39) | s(bool,'T_0') = s(bool,'F_0') | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X37)),bool))) ) | $spl0),
  inference(superposition,[],[f14030,f1834])).
fof(f27868,plain,(
  ( ! [X10,X8,X11,X9] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X8))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X9))) | s(bool,X9) = s(bool,X10) | s(bool,'T_0') = s(bool,X10) | s(bool,X8) = s(bool,X11) | s(bool,'T_0') = s(bool,X11)) ) | $spl0),
  inference(superposition,[],[f14030,f208])).
fof(f27867,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X4))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X5))) | s(bool,X5) = s(bool,X6) | s(bool,'T_0') = s(bool,X6) | s(bool,X7) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X4) = s(bool,X7)) ) | $spl0),
  inference(superposition,[],[f14030,f9397])).
fof(f27866,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1))) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X3))) | s(bool,X0) = s(bool,X3)) ) | $spl0),
  inference(superposition,[],[f14030,f14030])).
fof(f27829,plain,(
  ( ! [X206,X205] : (s(bool,'T_0') != s(bool,X205) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X206))) | s(bool,X206) = s(bool,sK6('const.option.SOME_1'(s(bool,X205)),bool))) ) | $spl0),
  inference(superposition,[],[f26480,f901])).
fof(f27828,plain,(
  ( ! [X204,X202,X200,X203,X201] : (s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X200),X201),s(bool,X202),s(fun(X200,bool),X203))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X204))) | s(bool,X204) = s(bool,happ(s(fun(fun(X200,bool),bool),happ(s(fun(bool,fun(fun(X200,bool),bool)),happ(s(fun('type.option.option'(X200),fun(bool,fun(fun(X200,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X200),X201))),s(bool,X202))),s(fun(X200,bool),X203)))) ) | $spl0),
  inference(superposition,[],[f26480,f169])).
fof(f27827,plain,(
  ( ! [X198,X196,X199,X197,X195] : (s(bool,'T_0') != s(bool,happ(s(fun(X195,bool),X198),s(X195,X196))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X199))) | s(bool,X199) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X195),'const.option.SOME_1'(s(X195,X196))),s(bool,X197),s(fun(X195,bool),X198)))) ) | $spl0),
  inference(superposition,[],[f26480,f168])).
fof(f27741,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) != s(bool,X1) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X2))) | s(bool,X1) = s(bool,X2) | s(bool,X3) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X0) = s(bool,X3)) ) | $spl0),
  inference(superposition,[],[f26480,f9397])).
fof(f27639,plain,(
  ( ! [X222,X220,X221] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X221),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X220)))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X221),s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'F_0')),X221,'type.option.option'(bool))))) | s(bool,X220) = s(bool,X222) | s(bool,'F_0') = s(bool,X222)) ) | $spl0),
  inference(superposition,[],[f535,f3902])).
fof(f27635,plain,(
  ( ! [X212,X213,X211] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X212),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X212),s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,X211)),X212,'type.option.option'(bool))))) | s(bool,X211) = s(bool,X213) | s(bool,'F_0') = s(bool,X213)) ) | $spl0),
  inference(superposition,[],[f535,f3902])).
fof(f27617,plain,(
  ( ! [X167,X165,X166,X164,X168] : (~p(s(bool,happ(s(fun(bool,bool),X167),s(bool,X166)))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X167),s(bool,sK7('const.bool.IN_2'(s(X164,X165),s(fun(X164,bool),'const.pred_set.EMPTY_0')),X167,bool)))) | s(bool,X166) = s(bool,X168) | s(bool,'F_0') = s(bool,X168)) ) | $spl0),
  inference(superposition,[],[f535,f2976])).
fof(f27612,plain,(
  ( ! [X151,X149,X150] : (~p(s(bool,happ(s(fun(bool,bool),X150),s(bool,X149)))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X150),s(bool,sK7('F_0',X150,bool)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X151))) | s(bool,X149) = s(bool,X151)) ) | $spl0),
  inference(superposition,[],[f535,f3902])).
fof(f27588,plain,(
  ( ! [X83,X81,X82] : (~p(s(bool,happ(s(fun(bool,bool),X83),s(bool,X82)))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X83),s(bool,sK7(X81,X83,bool)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X82))) | s(bool,'F_0') = s(bool,X81)) ) | $spl0),
  inference(superposition,[],[f535,f3902])).
fof(f27587,plain,(
  ( ! [X80,X78,X79] : (~p(s(bool,happ(s(fun(bool,bool),X80),s(bool,X79)))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X80),s(bool,sK7(X78,X80,bool)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X78))) | s(bool,'F_0') = s(bool,X79)) ) | $spl0),
  inference(superposition,[],[f535,f3902])).
fof(f27586,plain,(
  ( ! [X76,X77,X75] : (~p(s(bool,happ(s(fun(bool,bool),X76),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X76),s(bool,sK7(X75,X76,bool)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X77))) | s(bool,X75) = s(bool,X77)) ) | $spl0),
  inference(superposition,[],[f535,f3902])).
fof(f27509,plain,(
  ( ! [X344,X341,X343,X342] : (s(bool,'T_0') != s(bool,X341) | s(bool,X342) = s(bool,'const.bool.IN_2'(s(X343,X344),s(fun(X343,bool),'const.pred_set.EMPTY_0'))) | s(bool,X342) = s(bool,sK6('const.option.SOME_1'(s(bool,X341)),bool))) ) | $spl0),
  inference(superposition,[],[f22072,f901])).
fof(f27508,plain,(
  ( ! [X335,X337,X339,X334,X340,X336,X338] : (s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X334),X335),s(bool,X336),s(fun(X334,bool),X337))) | s(bool,X338) = s(bool,'const.bool.IN_2'(s(X339,X340),s(fun(X339,bool),'const.pred_set.EMPTY_0'))) | s(bool,X338) = s(bool,happ(s(fun(fun(X334,bool),bool),happ(s(fun(bool,fun(fun(X334,bool),bool)),happ(s(fun('type.option.option'(X334),fun(bool,fun(fun(X334,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X334),X335))),s(bool,X336))),s(fun(X334,bool),X337)))) ) | $spl0),
  inference(superposition,[],[f22072,f169])).
fof(f27507,plain,(
  ( ! [X327,X333,X329,X331,X332,X328,X330] : (s(bool,'T_0') != s(bool,happ(s(fun(X327,bool),X330),s(X327,X328))) | s(bool,X331) = s(bool,'const.bool.IN_2'(s(X332,X333),s(fun(X332,bool),'const.pred_set.EMPTY_0'))) | s(bool,X331) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X327),'const.option.SOME_1'(s(X327,X328))),s(bool,X329),s(fun(X327,bool),X330)))) ) | $spl0),
  inference(superposition,[],[f22072,f168])).
fof(f27506,plain,(
  ( ! [X325,X321,X323,X324,X326,X322] : (s(bool,'T_0') != s(bool,X322) | s(bool,X324) = s(bool,'const.bool.IN_2'(s(X325,X326),s(fun(X325,bool),'const.pred_set.EMPTY_0'))) | s(bool,X324) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X321),'const.option.NONE_0'),s(bool,X322),s(fun(X321,bool),X323)))) ) | $spl0),
  inference(superposition,[],[f22072,f166])).
fof(f26821,plain,(
  ( ! [X609,X611,X608,X610] : (s(X610,f(s(bool,'F_0'))) != s(X610,g(s(bool,'F_0'))) | s(fun(bool,X610),X608) = s(fun(bool,X610),X609) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X611))) | s(bool,X611) = s(bool,sK8(X608,X609,X610,bool))) ) | $spl0),
  inference(superposition,[],[f167,f3902])).
fof(f26820,plain,(
  ( ! [X606,X605,X607] : (p(s(bool,happ(s(fun(bool,bool),X606),s(bool,'F_0')))) | ~p(s(bool,happ(s(fun(bool,bool),X606),s(bool,X605)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X607))) | s(bool,X607) = s(bool,sK7(X605,X606,bool))) ) | $spl0),
  inference(superposition,[],[f161,f3902])).
fof(f26814,plain,(
  ( ! [X584,X586,X585,X583] : (s(bool,'F_0') != s(bool,f(s(X583,sK8(X584,X585,bool,X583)))) | s(fun(X583,bool),X584) = s(fun(X583,bool),X585) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X586))) | s(bool,X586) = s(bool,g(s(X583,sK8(X584,X585,bool,X583))))) ) | $spl0),
  inference(superposition,[],[f167,f3902])).
fof(f26809,plain,(
  ( ! [X565,X564,X566] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X565),s(bool,'F_0'))) | s(bool,X564) = s(bool,sK7(X564,X565,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X566))) | s(bool,X564) = s(bool,X566)) ) | $spl0),
  inference(superposition,[],[f2789,f3902])).
fof(f26808,plain,(
  ( ! [X561,X563,X562] : (~p(s(bool,happ(s(fun(bool,bool),X562),s(bool,'F_0')))) | s(bool,sK7(X561,X562,bool)) = s(bool,sK7(sK7(X561,X562,bool),X562,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X563))) | s(bool,X561) = s(bool,X563)) ) | $spl0),
  inference(superposition,[],[f2788,f3902])).
fof(f26807,plain,(
  ( ! [X559,X560,X558] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X559),s(bool,'F_0'))) | s(bool,X558) = s(bool,sK7(X558,X559,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X560))) | s(bool,X558) = s(bool,X560)) ) | $spl0),
  inference(superposition,[],[f1756,f3902])).
fof(f26805,plain,(
  ( ! [X553,X555,X554] : (s('type.option.option'(bool),X554) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,X553) = s(bool,sK6(X554,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X554) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X555))) | s(bool,X553) = s(bool,X555)) ) | $spl0),
  inference(superposition,[],[f459,f3902])).
fof(f26797,plain,(
  ( ! [X526,X525,X527] : (~p(s(bool,happ(s(fun(bool,bool),X526),s(bool,'F_0')))) | s(bool,X525) = s(bool,sK7(X525,X526,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X527))) | s(bool,X525) = s(bool,X527)) ) | $spl0),
  inference(superposition,[],[f160,f3902])).
fof(f26796,plain,(
  ( ! [X524,X522,X521,X523] : (~p(s(bool,happ(s(fun(bool,bool),X522),s(bool,'F_0')))) | p(s(bool,happ(s(fun(bool,bool),X522),s(bool,X523)))) | s(bool,X521) != s(bool,X523) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X524))) | s(bool,X521) = s(bool,X524)) ) | $spl0),
  inference(superposition,[],[f159,f3902])).
fof(f26794,plain,(
  ( ! [X516,X517,X515] : (s(bool,'F_0') != s(bool,X516) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X515))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X516))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X517))) | s(bool,X515) = s(bool,X517)) ) | $spl0),
  inference(superposition,[],[f158,f3902])).
fof(f26792,plain,(
  ( ! [X509,X511,X510] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X510))) | s(bool,X509) = s(bool,X510) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X511))) | s(bool,X509) = s(bool,X511)) ) | $spl0),
  inference(superposition,[],[f157,f3902])).
fof(f27405,plain,(
  ( ! [X436,X434,X433,X435] : (~p(s(bool,happ(s(fun(X433,bool),X434),s(X433,X435)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X436))) | s(bool,X436) = s(bool,happ(s(fun(X433,bool),X434),s(X433,sK7(X435,X434,X433))))) ) | $spl0),
  inference(subsumption_resolution,[],[f26762,f179])).
fof(f26762,plain,(
  ( ! [X436,X434,X433,X435] : (p(s(bool,'F_0')) | ~p(s(bool,happ(s(fun(X433,bool),X434),s(X433,X435)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X436))) | s(bool,X436) = s(bool,happ(s(fun(X433,bool),X434),s(X433,sK7(X435,X434,X433))))) ) | $spl0),
  inference(superposition,[],[f161,f3902])).
fof(f26696,plain,(
  ( ! [X239,X237,X235,X238,X236] : (s(bool,'F_0') != s(bool,X236) | s(bool,X235) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X237),'const.option.NONE_0'),s(bool,X236),s(fun(X237,bool),X238))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X239))) | s(bool,X235) = s(bool,X239)) ) | $spl0),
  inference(superposition,[],[f9763,f3902])).
fof(f26695,plain,(
  ( ! [X231,X233,X230,X234,X232] : (s(bool,'F_0') != s(bool,X231) | s(bool,X231) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X232),'const.option.NONE_0'),s(bool,X230),s(fun(X232,bool),X233))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X234))) | s(bool,X230) = s(bool,X234)) ) | $spl0),
  inference(superposition,[],[f9763,f3902])).
fof(f27378,plain,(
  ( ! [X134,X132,X130,X133,X131] : (s(bool,X130) = s(bool,happ(s(fun(X131,bool),X132),s(X131,X133))) | s(X131,X133) = s(X131,sK7(X133,X132,X131)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X134))) | s(bool,X130) = s(bool,X134)) ) | $spl0),
  inference(subsumption_resolution,[],[f26659,f179])).
fof(f26659,plain,(
  ( ! [X134,X132,X130,X133,X131] : (p(s(bool,'F_0')) | s(bool,X130) = s(bool,happ(s(fun(X131,bool),X132),s(X131,X133))) | s(X131,X133) = s(X131,sK7(X133,X132,X131)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X134))) | s(bool,X130) = s(bool,X134)) ) | $spl0),
  inference(superposition,[],[f2790,f3902])).
fof(f26847,plain,(
  ( ! [X57,X56,X55] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X55))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X56))) | s(bool,'T_0') = s(bool,X56) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X57))) | s(bool,X55) = s(bool,X57)) ) | $spl0),
  inference(trivial_inequality_removal,[],[f26636])).
fof(f26636,plain,(
  ( ! [X57,X56,X55] : (s(bool,'F_0') != s(bool,'F_0') | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X55))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X56))) | s(bool,'T_0') = s(bool,X56) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X57))) | s(bool,X55) = s(bool,X57)) ) | $spl0),
  inference(superposition,[],[f404,f3902])).
fof(f27365,plain,(
  ( ! [X10,X11,X9] : (p(s(bool,X10)) | s(bool,X9) = s(bool,X10) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X11))) | s(bool,X9) = s(bool,X11)) ) | $spl0),
  inference(subsumption_resolution,[],[f26621,f179])).
fof(f26621,plain,(
  ( ! [X10,X11,X9] : (p(s(bool,'F_0')) | p(s(bool,X10)) | s(bool,X9) = s(bool,X10) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X11))) | s(bool,X9) = s(bool,X11)) ) | $spl0),
  inference(superposition,[],[f162,f3902])).
fof(f26612,plain,(
  ( ! [X432,X431,X433] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X432),s(bool,X431))) | s(bool,'F_0') = s(bool,sK7('F_0',X432,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X433))) | s(bool,X431) = s(bool,X433)) ) | $spl0),
  inference(superposition,[],[f2789,f3902])).
fof(f26611,plain,(
  ( ! [X428,X430,X429] : (~p(s(bool,happ(s(fun(bool,bool),X429),s(bool,X428)))) | s(bool,sK7('F_0',X429,bool)) = s(bool,sK7(sK7('F_0',X429,bool),X429,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X430))) | s(bool,X428) = s(bool,X430)) ) | $spl0),
  inference(superposition,[],[f2788,f3902])).
fof(f26610,plain,(
  ( ! [X426,X425,X427] : (s(bool,X425) = s(bool,happ(s(fun(bool,bool),X426),s(bool,X425))) | s(bool,'F_0') = s(bool,sK7('F_0',X426,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X427))) | s(bool,X425) = s(bool,X427)) ) | $spl0),
  inference(superposition,[],[f1756,f3902])).
fof(f26608,plain,(
  ( ! [X420,X422,X421] : (s('type.option.option'(bool),X421) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X420))) | s(bool,'F_0') = s(bool,sK6(X421,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X421) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X422))) | s(bool,X420) = s(bool,X422)) ) | $spl0),
  inference(superposition,[],[f459,f3902])).
fof(f26600,plain,(
  ( ! [X393,X392,X394] : (~p(s(bool,happ(s(fun(bool,bool),X393),s(bool,X392)))) | s(bool,'F_0') = s(bool,sK7('F_0',X393,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X394))) | s(bool,X392) = s(bool,X394)) ) | $spl0),
  inference(superposition,[],[f160,f3902])).
fof(f26599,plain,(
  ( ! [X389,X391,X388,X390] : (~p(s(bool,happ(s(fun(bool,bool),X389),s(bool,X388)))) | p(s(bool,happ(s(fun(bool,bool),X389),s(bool,X390)))) | s(bool,'F_0') != s(bool,X390) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X391))) | s(bool,X388) = s(bool,X391)) ) | $spl0),
  inference(superposition,[],[f159,f3902])).
fof(f26597,plain,(
  ( ! [X383,X382,X384] : (s(bool,X382) != s(bool,X383) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X383))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X384))) | s(bool,X382) = s(bool,X384)) ) | $spl0),
  inference(superposition,[],[f158,f3902])).
fof(f26573,plain,(
  ( ! [X302,X304,X306,X303,X305] : (s(bool,X302) != s(bool,X303) | s(bool,X303) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X304),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X304,bool),X305))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X306))) | s(bool,X302) = s(bool,X306)) ) | $spl0),
  inference(superposition,[],[f9763,f3902])).
fof(f27348,plain,(
  ( ! [X171,X172,X170] : (s(bool,X170) != s(bool,X171) | s(bool,'F_0') = s(bool,X171) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X172))) | s(bool,X170) = s(bool,X172)) ) | $spl0),
  inference(subsumption_resolution,[],[f26531,f347])).
fof(f26531,plain,(
  ( ! [X171,X172,X170] : (s(bool,X170) != s(bool,X171) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X171) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X172))) | s(bool,X170) = s(bool,X172)) ) | $spl0),
  inference(superposition,[],[f1774,f3902])).
fof(f26504,plain,(
  ( ! [X94,X97,X95,X93,X96] : (s(bool,X93) != s(bool,X94) | s(bool,X94) = s(bool,'const.bool.IN_2'(s(X95,X96),s(fun(X95,bool),'const.pred_set.EMPTY_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X97))) | s(bool,X93) = s(bool,X97)) ) | $spl0),
  inference(superposition,[],[f23265,f3902])).
fof(f26502,plain,(
  ( ! [X88,X87,X89,X86] : (s(bool,X86) != s(bool,X87) | s(bool,X88) = s(bool,sK6('const.option.SOME_1'(s(bool,X87)),bool)) | s(bool,'T_0') = s(bool,X88) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X89))) | s(bool,X86) = s(bool,X89)) ) | $spl0),
  inference(superposition,[],[f14507,f3902])).
fof(f26501,plain,(
  ( ! [X85,X83,X84,X82] : (s(bool,X82) != s(bool,X83) | s(bool,X83) = s(bool,X84) | s(bool,'T_0') = s(bool,X84) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X85))) | s(bool,X82) = s(bool,X85)) ) | $spl0),
  inference(superposition,[],[f13980,f3902])).
fof(f26497,plain,(
  ( ! [X70,X68,X69] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X68))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X69))) | s(bool,X69) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X70))) | s(bool,X68) = s(bool,X70)) ) | $spl0),
  inference(superposition,[],[f8984,f3902])).
fof(f26493,plain,(
  ( ! [X57,X54,X58,X56,X55] : (s(bool,X54) != s(bool,X55) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X56),'const.option.NONE_0'),s(bool,X55),s(fun(X56,bool),X57))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X58))) | s(bool,X54) = s(bool,X58)) ) | $spl0),
  inference(superposition,[],[f4508,f3902])).
fof(f26492,plain,(
  ( ! [X52,X53,X51] : (s(bool,X52) != s(bool,sK6('const.option.SOME_1'(s(bool,X51)),bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X52)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X53))) | s(bool,X51) = s(bool,X53)) ) | $spl0),
  inference(superposition,[],[f4474,f3902])).
fof(f26490,plain,(
  ( ! [X47,X48,X46] : (s(bool,X46) != s(bool,X47) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X47)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X48))) | s(bool,X46) = s(bool,X48)) ) | $spl0),
  inference(superposition,[],[f3910,f3902])).
fof(f26489,plain,(
  ( ! [X45,X43,X44] : (s(bool,X44) != s(bool,sK6('const.option.SOME_1'(s(bool,X43)),bool)) | s(bool,'F_0') = s(bool,X44) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X45))) | s(bool,X43) = s(bool,X45)) ) | $spl0),
  inference(superposition,[],[f3597,f3902])).
fof(f26484,plain,(
  ( ! [X24,X23,X22] : (s('type.option.option'(bool),X23) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X22))) | s(bool,'T_0') = s(bool,sK6(X23,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X23) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X24))) | s(bool,X22) = s(bool,X24)) ) | $spl0),
  inference(superposition,[],[f458,f3902])).
fof(f26483,plain,(
  ( ! [X21,X19,X20,X18] : (~p(s(bool,happ(s(fun(bool,bool),X19),s(bool,X18)))) | s(bool,X20) = s(bool,sK7(X20,X19,bool)) | s(bool,'T_0') = s(bool,X20) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X21))) | s(bool,X18) = s(bool,X21)) ) | $spl0),
  inference(superposition,[],[f440,f3902])).
fof(f26482,plain,(
  ( ! [X14,X17,X15,X16] : (s(bool,X14) != s(bool,X15) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X15))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X16))) | s(bool,'T_0') = s(bool,X16) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X17))) | s(bool,X14) = s(bool,X17)) ) | $spl0),
  inference(superposition,[],[f404,f3902])).
fof(f26481,plain,(
  ( ! [X12,X10,X13,X11] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X10))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X11))) | s(bool,X11) = s(bool,X12) | s(bool,'T_0') = s(bool,X12) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X13))) | s(bool,X10) = s(bool,X13)) ) | $spl0),
  inference(superposition,[],[f362,f3902])).
fof(f26480,plain,(
  ( ! [X8,X9] : (s(bool,'T_0') != s(bool,X8) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X9))) | s(bool,X8) = s(bool,X9)) ) | $spl0),
  inference(superposition,[],[f180,f3902])).
fof(f26478,plain,(
  ( ! [X4,X5,X3] : (s(bool,X3) != s(bool,X4) | ~p(s(bool,X4)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X5))) | s(bool,X3) = s(bool,X5)) ) | $spl0),
  inference(superposition,[],[f127,f3902])).
fof(f26476,plain,(
  ( ! [X703,X704,X706,X705] : (s(X705,f(s(bool,X706))) != s(X705,g(s(bool,X706))) | s(fun(bool,X705),X703) = s(fun(bool,X705),X704) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X706))) | s(bool,'F_0') = s(bool,sK8(X703,X704,X705,bool))) ) | $spl0),
  inference(superposition,[],[f167,f3902])).
fof(f26475,plain,(
  ( ! [X700,X702,X701] : (p(s(bool,happ(s(fun(bool,bool),X701),s(bool,X702)))) | ~p(s(bool,happ(s(fun(bool,bool),X701),s(bool,X700)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X702))) | s(bool,'F_0') = s(bool,sK7(X700,X701,bool))) ) | $spl0),
  inference(superposition,[],[f161,f3902])).
fof(f26473,plain,(
  ( ! [X697,X696] : (s('type.option.option'(bool),X696) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X697))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X696) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X697))) | s(bool,'F_0') = s(bool,sK6(X696,bool))) ) | $spl0),
  inference(superposition,[],[f148,f3902])).
fof(f26469,plain,(
  ( ! [X681,X679,X680,X678] : (s(bool,X681) != s(bool,f(s(X678,sK8(X679,X680,bool,X678)))) | s(fun(X678,bool),X679) = s(fun(X678,bool),X680) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X681))) | s(bool,'F_0') = s(bool,g(s(X678,sK8(X679,X680,bool,X678))))) ) | $spl0),
  inference(superposition,[],[f167,f3902])).
fof(f26464,plain,(
  ( ! [X660,X658,X659] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X660),s(bool,X659))) | s(bool,X658) = s(bool,sK7(X658,X660,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X659))) | s(bool,'F_0') = s(bool,X658)) ) | $spl0),
  inference(superposition,[],[f2789,f3902])).
fof(f26463,plain,(
  ( ! [X656,X657,X655] : (~p(s(bool,happ(s(fun(bool,bool),X657),s(bool,X656)))) | s(bool,sK7(X655,X657,bool)) = s(bool,sK7(sK7(X655,X657,bool),X657,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X656))) | s(bool,'F_0') = s(bool,X655)) ) | $spl0),
  inference(superposition,[],[f2788,f3902])).
fof(f26462,plain,(
  ( ! [X652,X654,X653] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X654),s(bool,X653))) | s(bool,X652) = s(bool,sK7(X652,X654,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X653))) | s(bool,'F_0') = s(bool,X652)) ) | $spl0),
  inference(superposition,[],[f1756,f3902])).
fof(f26460,plain,(
  ( ! [X648,X649,X647] : (s('type.option.option'(bool),X649) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X648))) | s(bool,X647) = s(bool,sK6(X649,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X649) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X648))) | s(bool,'F_0') = s(bool,X647)) ) | $spl0),
  inference(superposition,[],[f459,f3902])).
fof(f26451,plain,(
  ( ! [X617,X615,X616,X618] : (~p(s(bool,happ(s(fun(bool,bool),X617),s(bool,X616)))) | p(s(bool,happ(s(fun(bool,bool),X617),s(bool,X618)))) | s(bool,X615) != s(bool,X618) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X616))) | s(bool,'F_0') = s(bool,X615)) ) | $spl0),
  inference(superposition,[],[f159,f3902])).
fof(f26449,plain,(
  ( ! [X609,X611,X610] : (s(bool,X610) != s(bool,X611) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X609))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X611))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X610))) | s(bool,'F_0') = s(bool,X609)) ) | $spl0),
  inference(superposition,[],[f158,f3902])).
fof(f27317,plain,(
  ( ! [X397,X396,X398] : (s(bool,X397) != s(bool,sK6('const.option.SOME_1'(s(bool,X396)),bool)) | s(bool,X397) = s(bool,X398) | s(bool,'F_0') = s(bool,X398) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X396)))) ) | $spl0),
  inference(subsumption_resolution,[],[f26369,f180])).
fof(f26369,plain,(
  ( ! [X397,X396,X398] : (s(bool,X397) != s(bool,sK6('const.option.SOME_1'(s(bool,X396)),bool)) | s(bool,X397) = s(bool,X398) | s(bool,'F_0') = s(bool,X398) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X396))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl0),
  inference(superposition,[],[f17475,f3902])).
fof(f27315,plain,(
  ( ! [X383,X385,X384] : (s(bool,X384) = s(bool,sK6('const.option.SOME_1'(s(bool,X383)),bool)) | s(bool,X384) = s(bool,X385) | s(bool,'T_0') = s(bool,X385) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X383)))) ) | $spl0),
  inference(subsumption_resolution,[],[f26365,f180])).
fof(f26365,plain,(
  ( ! [X383,X385,X384] : (s(bool,X384) = s(bool,sK6('const.option.SOME_1'(s(bool,X383)),bool)) | s(bool,X384) = s(bool,X385) | s(bool,'T_0') = s(bool,X385) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X383))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl0),
  inference(superposition,[],[f9397,f3902])).
fof(f27314,plain,(
  ( ! [X379,X380] : (s(bool,X380) = s(bool,sK6('const.option.SOME_1'(s(bool,X379)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X380))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X379)))) ) | $spl0),
  inference(subsumption_resolution,[],[f26363,f180])).
fof(f26363,plain,(
  ( ! [X379,X380] : (s(bool,X380) = s(bool,sK6('const.option.SOME_1'(s(bool,X379)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X380))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X379))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl0),
  inference(superposition,[],[f8984,f3902])).
fof(f27311,plain,(
  ( ! [X372,X371] : (s(bool,X372) = s(bool,sK6('const.option.SOME_1'(s(bool,X371)),bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X372)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X371)))) ) | $spl0),
  inference(subsumption_resolution,[],[f26360,f180])).
fof(f26360,plain,(
  ( ! [X372,X371] : (s(bool,X372) = s(bool,sK6('const.option.SOME_1'(s(bool,X371)),bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X372)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X371))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl0),
  inference(superposition,[],[f7724,f3902])).
fof(f27309,plain,(
  ( ! [X346,X347,X348] : (s(bool,X346) != s(bool,X347) | s(bool,X348) = s(bool,sK6('const.option.SOME_1'(s(bool,X347)),bool)) | s(bool,'F_0') = s(bool,X348) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X346)))) ) | $spl0),
  inference(subsumption_resolution,[],[f26354,f180])).
fof(f26354,plain,(
  ( ! [X346,X347,X348] : (s(bool,X346) != s(bool,X347) | s(bool,X348) = s(bool,sK6('const.option.SOME_1'(s(bool,X347)),bool)) | s(bool,'F_0') = s(bool,X348) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X346))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl0),
  inference(superposition,[],[f2660,f3902])).
fof(f27308,plain,(
  ( ! [X341,X340,X342] : (~p(s(bool,happ(s(fun(bool,bool),X341),s(bool,X340)))) | s(bool,X342) = s(bool,sK7(X342,X341,bool)) | s(bool,'F_0') = s(bool,X342) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X340)))) ) | $spl0),
  inference(subsumption_resolution,[],[f26352,f180])).
fof(f26352,plain,(
  ( ! [X341,X340,X342] : (~p(s(bool,happ(s(fun(bool,bool),X341),s(bool,X340)))) | s(bool,X342) = s(bool,sK7(X342,X341,bool)) | s(bool,'F_0') = s(bool,X342) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X340))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl0),
  inference(superposition,[],[f1761,f3902])).
fof(f27307,plain,(
  ( ! [X337,X339,X338] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X337))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X338))) | s(bool,X338) = s(bool,X339) | s(bool,'F_0') = s(bool,X339) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X337)))) ) | $spl0),
  inference(subsumption_resolution,[],[f26351,f180])).
fof(f26351,plain,(
  ( ! [X337,X339,X338] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X337))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X338))) | s(bool,X338) = s(bool,X339) | s(bool,'F_0') = s(bool,X339) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X337))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl0),
  inference(superposition,[],[f1758,f3902])).
fof(f26322,plain,(
  ( ! [X251,X249,X250,X248,X247] : (s(bool,X248) != s(bool,X249) | s(bool,X247) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X250),'const.option.NONE_0'),s(bool,X249),s(fun(X250,bool),X251))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X248))) | s(bool,'F_0') = s(bool,X247)) ) | $spl0),
  inference(superposition,[],[f9763,f3902])).
fof(f26321,plain,(
  ( ! [X243,X246,X244,X242,X245] : (s(bool,X243) != s(bool,X244) | s(bool,X244) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X245),'const.option.NONE_0'),s(bool,X242),s(fun(X245,bool),X246))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X243))) | s(bool,'F_0') = s(bool,X242)) ) | $spl0),
  inference(superposition,[],[f9763,f3902])).
fof(f26236,plain,(
  ( ! [X703,X704,X706,X705] : (s(X705,f(s(bool,X706))) != s(X705,g(s(bool,X706))) | s(fun(bool,X705),X703) = s(fun(bool,X705),X704) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK8(X703,X704,X705,bool)))) | s(bool,'F_0') = s(bool,X706)) ) | $spl0),
  inference(superposition,[],[f167,f3902])).
fof(f26235,plain,(
  ( ! [X700,X702,X701] : (p(s(bool,happ(s(fun(bool,bool),X701),s(bool,X702)))) | ~p(s(bool,happ(s(fun(bool,bool),X701),s(bool,X700)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK7(X700,X701,bool)))) | s(bool,'F_0') = s(bool,X702)) ) | $spl0),
  inference(superposition,[],[f161,f3902])).
fof(f26233,plain,(
  ( ! [X697,X696] : (s('type.option.option'(bool),X696) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X697))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X696) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6(X696,bool)))) | s(bool,'F_0') = s(bool,X697)) ) | $spl0),
  inference(superposition,[],[f148,f3902])).
fof(f26229,plain,(
  ( ! [X681,X679,X680,X678] : (s(bool,X681) != s(bool,f(s(X678,sK8(X679,X680,bool,X678)))) | s(fun(X678,bool),X679) = s(fun(X678,bool),X680) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,g(s(X678,sK8(X679,X680,bool,X678)))))) | s(bool,'F_0') = s(bool,X681)) ) | $spl0),
  inference(superposition,[],[f167,f3902])).
fof(f26224,plain,(
  ( ! [X660,X658,X659] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X660),s(bool,X659))) | s(bool,X658) = s(bool,sK7(X658,X660,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X658))) | s(bool,'F_0') = s(bool,X659)) ) | $spl0),
  inference(superposition,[],[f2789,f3902])).
fof(f26223,plain,(
  ( ! [X656,X657,X655] : (~p(s(bool,happ(s(fun(bool,bool),X657),s(bool,X656)))) | s(bool,sK7(X655,X657,bool)) = s(bool,sK7(sK7(X655,X657,bool),X657,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X655))) | s(bool,'F_0') = s(bool,X656)) ) | $spl0),
  inference(superposition,[],[f2788,f3902])).
fof(f26222,plain,(
  ( ! [X652,X654,X653] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X654),s(bool,X653))) | s(bool,X652) = s(bool,sK7(X652,X654,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X652))) | s(bool,'F_0') = s(bool,X653)) ) | $spl0),
  inference(superposition,[],[f1756,f3902])).
fof(f26220,plain,(
  ( ! [X648,X649,X647] : (s('type.option.option'(bool),X649) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X648))) | s(bool,X647) = s(bool,sK6(X649,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X649) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X647))) | s(bool,'F_0') = s(bool,X648)) ) | $spl0),
  inference(superposition,[],[f459,f3902])).
fof(f26212,plain,(
  ( ! [X621,X619,X620] : (~p(s(bool,happ(s(fun(bool,bool),X621),s(bool,X620)))) | s(bool,X619) = s(bool,sK7(X619,X621,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X619))) | s(bool,'F_0') = s(bool,X620)) ) | $spl0),
  inference(superposition,[],[f160,f3902])).
fof(f26211,plain,(
  ( ! [X617,X615,X616,X618] : (~p(s(bool,happ(s(fun(bool,bool),X617),s(bool,X616)))) | p(s(bool,happ(s(fun(bool,bool),X617),s(bool,X618)))) | s(bool,X615) != s(bool,X618) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X615))) | s(bool,'F_0') = s(bool,X616)) ) | $spl0),
  inference(superposition,[],[f159,f3902])).
fof(f26209,plain,(
  ( ! [X609,X611,X610] : (s(bool,X610) != s(bool,X611) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X609))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X611))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X609))) | s(bool,'F_0') = s(bool,X610)) ) | $spl0),
  inference(superposition,[],[f158,f3902])).
fof(f26207,plain,(
  ( ! [X605,X603,X604] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X604))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X605))) | s(bool,X603) = s(bool,X605) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X603))) | s(bool,'F_0') = s(bool,X604)) ) | $spl0),
  inference(superposition,[],[f157,f3902])).
fof(f26082,plain,(
  ( ! [X251,X249,X250,X248,X247] : (s(bool,X248) != s(bool,X249) | s(bool,X247) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X250),'const.option.NONE_0'),s(bool,X249),s(fun(X250,bool),X251))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X247))) | s(bool,'F_0') = s(bool,X248)) ) | $spl0),
  inference(superposition,[],[f9763,f3902])).
fof(f26081,plain,(
  ( ! [X243,X246,X244,X242,X245] : (s(bool,X243) != s(bool,X244) | s(bool,X244) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X245),'const.option.NONE_0'),s(bool,X242),s(fun(X245,bool),X246))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X242))) | s(bool,'F_0') = s(bool,X243)) ) | $spl0),
  inference(superposition,[],[f9763,f3902])).
fof(f25992,plain,(
  ( ! [X109,X110,X108] : (s(bool,'T_0') != s(bool,happ(s(fun('type.option.option'(bool),bool),X109),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X108))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,X108)),X109,'type.option.option'(bool))) | s(bool,X108) = s(bool,X110) | s(bool,'F_0') = s(bool,X110)) ) | $spl0),
  inference(superposition,[],[f2789,f3902])).
fof(f25991,plain,(
  ( ! [X107,X105,X106] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X106),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))) | s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,X105)),X106,'type.option.option'(bool))) = s('type.option.option'(bool),sK7(sK7('const.option.SOME_1'(s(bool,X105)),X106,'type.option.option'(bool)),X106,'type.option.option'(bool))) | s(bool,X105) = s(bool,X107) | s(bool,'F_0') = s(bool,X107)) ) | $spl0),
  inference(superposition,[],[f2788,f3902])).
fof(f25990,plain,(
  ( ! [X103,X102,X104] : (s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X103),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X102))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,X102)),X103,'type.option.option'(bool))) | s(bool,X102) = s(bool,X104) | s(bool,'F_0') = s(bool,X104)) ) | $spl0),
  inference(superposition,[],[f1756,f3902])).
fof(f25988,plain,(
  ( ! [X99,X97,X98] : (s('type.option.option'('type.option.option'(bool)),X98) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X97))) = s('type.option.option'(bool),sK6(X98,'type.option.option'(bool))) | s('type.option.option'('type.option.option'(bool)),'const.option.NONE_0') = s('type.option.option'('type.option.option'(bool)),X98) | s(bool,X97) = s(bool,X99) | s(bool,'F_0') = s(bool,X99)) ) | $spl0),
  inference(superposition,[],[f459,f3902])).
fof(f25980,plain,(
  ( ! [X70,X71,X69] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X70),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X69))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,X69)),X70,'type.option.option'(bool))) | s(bool,X69) = s(bool,X71) | s(bool,'F_0') = s(bool,X71)) ) | $spl0),
  inference(superposition,[],[f160,f3902])).
fof(f25979,plain,(
  ( ! [X68,X66,X67,X65] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X66),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))) | p(s(bool,happ(s(fun('type.option.option'(bool),bool),X66),s('type.option.option'(bool),X67)))) | s('type.option.option'(bool),X67) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X65))) | s(bool,X65) = s(bool,X68) | s(bool,'F_0') = s(bool,X68)) ) | $spl0),
  inference(superposition,[],[f159,f3902])).
fof(f25977,plain,(
  ( ! [X61,X59,X60] : (s('type.option.option'(bool),X60) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X60))) = s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X59))))) | s(bool,X59) = s(bool,X61) | s(bool,'F_0') = s(bool,X61)) ) | $spl0),
  inference(superposition,[],[f158,f3902])).
fof(f25975,plain,(
  ( ! [X54,X55,X53] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X54))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s('type.option.option'(bool),X54) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X53))) | s(bool,X53) = s(bool,X55) | s(bool,'F_0') = s(bool,X55)) ) | $spl0),
  inference(superposition,[],[f157,f3902])).
fof(f25967,plain,(
  ( ! [X30,X28,X31,X29,X27] : (s(X28,happ(s(fun(bool,X28),X29),s(bool,X27))) = s(X28,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s(X28,X30),s(fun(bool,X28),X29))) | s(bool,X27) = s(bool,X31) | s(bool,'F_0') = s(bool,X31)) ) | $spl0),
  inference(superposition,[],[f168,f3902])).
fof(f25952,plain,(
  ( ! [X109,X110,X108] : (s(bool,'T_0') != s(bool,happ(s(fun('type.option.option'(bool),bool),X109),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X108))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'F_0')),X109,'type.option.option'(bool))) | s(bool,X108) = s(bool,X110) | s(bool,'F_0') = s(bool,X110)) ) | $spl0),
  inference(superposition,[],[f2789,f3902])).
fof(f25951,plain,(
  ( ! [X107,X105,X106] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X106),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X105)))))) | s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'F_0')),X106,'type.option.option'(bool))) = s('type.option.option'(bool),sK7(sK7('const.option.SOME_1'(s(bool,'F_0')),X106,'type.option.option'(bool)),X106,'type.option.option'(bool))) | s(bool,X105) = s(bool,X107) | s(bool,'F_0') = s(bool,X107)) ) | $spl0),
  inference(superposition,[],[f2788,f3902])).
fof(f25950,plain,(
  ( ! [X103,X102,X104] : (s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X103),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X102))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'F_0')),X103,'type.option.option'(bool))) | s(bool,X102) = s(bool,X104) | s(bool,'F_0') = s(bool,X104)) ) | $spl0),
  inference(superposition,[],[f1756,f3902])).
fof(f25948,plain,(
  ( ! [X99,X97,X98] : (s('type.option.option'('type.option.option'(bool)),X98) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X97))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK6(X98,'type.option.option'(bool))) | s('type.option.option'('type.option.option'(bool)),'const.option.NONE_0') = s('type.option.option'('type.option.option'(bool)),X98) | s(bool,X97) = s(bool,X99) | s(bool,'F_0') = s(bool,X99)) ) | $spl0),
  inference(superposition,[],[f459,f3902])).
fof(f25940,plain,(
  ( ! [X70,X71,X69] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X70),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X69)))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'F_0')),X70,'type.option.option'(bool))) | s(bool,X69) = s(bool,X71) | s(bool,'F_0') = s(bool,X71)) ) | $spl0),
  inference(superposition,[],[f160,f3902])).
fof(f25939,plain,(
  ( ! [X68,X66,X67,X65] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X66),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X65)))))) | p(s(bool,happ(s(fun('type.option.option'(bool),bool),X66),s('type.option.option'(bool),X67)))) | s('type.option.option'(bool),X67) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,X65) = s(bool,X68) | s(bool,'F_0') = s(bool,X68)) ) | $spl0),
  inference(superposition,[],[f159,f3902])).
fof(f25937,plain,(
  ( ! [X61,X59,X60] : (s('type.option.option'(bool),X60) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X59))) | s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X60))) = s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s(bool,X59) = s(bool,X61) | s(bool,'F_0') = s(bool,X61)) ) | $spl0),
  inference(superposition,[],[f158,f3902])).
fof(f25935,plain,(
  ( ! [X54,X55,X53] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X54))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X53))))) | s('type.option.option'(bool),X54) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,X53) = s(bool,X55) | s(bool,'F_0') = s(bool,X55)) ) | $spl0),
  inference(superposition,[],[f157,f3902])).
fof(f25928,plain,(
  ( ! [X30,X33,X31,X29,X32] : (s(X30,happ(s(fun(bool,X30),X31),s(bool,'F_0'))) = s(X30,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X29))),s(X30,X32),s(fun(bool,X30),X31))) | s(bool,X29) = s(bool,X33) | s(bool,'F_0') = s(bool,X33)) ) | $spl0),
  inference(superposition,[],[f168,f3902])).
fof(f25916,plain,(
  ( ! [X158,X161,X159,X157,X160] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X157),X158),s(bool,X159),s(fun(X157,bool),X160))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X161))) | s(bool,X161) = s(bool,happ(s(fun(fun(X157,bool),bool),happ(s(fun(bool,fun(fun(X157,bool),bool)),happ(s(fun('type.option.option'(X157),fun(bool,fun(fun(X157,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X157),X158))),s(bool,X159))),s(fun(X157,bool),X160)))) ) | $spl0),
  inference(superposition,[],[f3902,f169])).
fof(f25915,plain,(
  ( ! [X156,X154,X152,X155,X153] : (s(bool,'F_0') = s(bool,happ(s(fun(X152,bool),X155),s(X152,X153))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X156))) | s(bool,X156) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X152),'const.option.SOME_1'(s(X152,X153))),s(bool,X154),s(fun(X152,bool),X155)))) ) | $spl0),
  inference(superposition,[],[f3902,f168])).
fof(f25846,plain,(
  ( ! [X24,X23,X21,X22] : (s(bool,X21) = s(bool,X22) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X23))) | s(bool,X22) = s(bool,X23) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X24))) | s(bool,X21) = s(bool,X24)) ) | $spl0),
  inference(superposition,[],[f3902,f3902])).
fof(f25845,plain,(
  ( ! [X19,X17,X15,X20,X18,X16] : (s(bool,X15) = s(bool,X16) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X17))) | s(bool,X16) = s(bool,X17) | s(bool,X18) = s(bool,'const.bool.IN_2'(s(X19,X20),s(fun(X19,bool),'const.pred_set.EMPTY_0'))) | s(bool,X15) = s(bool,X18)) ) | $spl0),
  inference(superposition,[],[f3902,f2976])).
fof(f25844,plain,(
  ( ! [X14,X12,X13,X11] : (s(bool,X11) = s(bool,X12) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X13))) | s(bool,X12) = s(bool,X13) | s(bool,X11) = s(bool,X14) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X14)),bool))) ) | $spl0),
  inference(superposition,[],[f3902,f1834])).
fof(f25842,plain,(
  ( ! [X6,X4,X5,X3] : (s(bool,X3) = s(bool,X4) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X5))) | s(bool,X4) = s(bool,X5) | s(bool,X3) = s(bool,X6) | s(bool,'F_0') = s(bool,X6)) ) | $spl0),
  inference(superposition,[],[f3902,f1632])).
fof(f25839,plain,(
  ( ! [X196,X194,X192,X195,X193] : (s(bool,X196) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X192),X193),s(bool,X194),s(fun(X192,bool),X195))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X196))) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X192,bool),bool),happ(s(fun(bool,fun(fun(X192,bool),bool)),happ(s(fun('type.option.option'(X192),fun(bool,fun(fun(X192,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X192),X193))),s(bool,X194))),s(fun(X192,bool),X195)))) ) | $spl0),
  inference(superposition,[],[f3902,f169])).
fof(f25838,plain,(
  ( ! [X191,X189,X187,X190,X188] : (s(bool,X191) = s(bool,happ(s(fun(X187,bool),X190),s(X187,X188))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X191))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X187),'const.option.SOME_1'(s(X187,X188))),s(bool,X189),s(fun(X187,bool),X190)))) ) | $spl0),
  inference(superposition,[],[f3902,f168])).
fof(f25837,plain,(
  ( ! [X185,X186,X184,X183] : (s(bool,X184) = s(bool,X186) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X186))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X183),'const.option.NONE_0'),s(bool,X184),s(fun(X183,bool),X185)))) ) | $spl0),
  inference(superposition,[],[f3902,f166])).
fof(f25699,plain,(
  ( ! [X158,X161,X159,X157,X160] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X157),X158),s(bool,X159),s(fun(X157,bool),X160))))) | s(bool,X161) = s(bool,happ(s(fun(fun(X157,bool),bool),happ(s(fun(bool,fun(fun(X157,bool),bool)),happ(s(fun('type.option.option'(X157),fun(bool,fun(fun(X157,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X157),X158))),s(bool,X159))),s(fun(X157,bool),X160))) | s(bool,'F_0') = s(bool,X161)) ) | $spl0),
  inference(superposition,[],[f3902,f169])).
fof(f25698,plain,(
  ( ! [X156,X154,X152,X155,X153] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X152,bool),X155),s(X152,X153))))) | s(bool,X156) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X152),'const.option.SOME_1'(s(X152,X153))),s(bool,X154),s(fun(X152,bool),X155))) | s(bool,'F_0') = s(bool,X156)) ) | $spl0),
  inference(superposition,[],[f3902,f168])).
fof(f25697,plain,(
  ( ! [X151,X149,X150,X148] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X149))) | s(bool,X151) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X148),'const.option.NONE_0'),s(bool,X149),s(fun(X148,bool),X150))) | s(bool,'F_0') = s(bool,X151)) ) | $spl0),
  inference(superposition,[],[f3902,f166])).
fof(f25622,plain,(
  ( ! [X24,X23,X21,X22] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X21))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X22))) | s(bool,X22) = s(bool,X23) | s(bool,'F_0') = s(bool,X23) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X24))) | s(bool,X21) = s(bool,X24)) ) | $spl0),
  inference(superposition,[],[f3902,f3902])).
fof(f25621,plain,(
  ( ! [X19,X17,X15,X20,X18,X16] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X15))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X16))) | s(bool,X16) = s(bool,X17) | s(bool,'F_0') = s(bool,X17) | s(bool,X18) = s(bool,'const.bool.IN_2'(s(X19,X20),s(fun(X19,bool),'const.pred_set.EMPTY_0'))) | s(bool,X15) = s(bool,X18)) ) | $spl0),
  inference(superposition,[],[f3902,f2976])).
fof(f25620,plain,(
  ( ! [X14,X12,X13,X11] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X11))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X12))) | s(bool,X12) = s(bool,X13) | s(bool,'F_0') = s(bool,X13) | s(bool,X11) = s(bool,X14) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X14)),bool))) ) | $spl0),
  inference(superposition,[],[f3902,f1834])).
fof(f25618,plain,(
  ( ! [X6,X4,X5,X3] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X3))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X4))) | s(bool,X4) = s(bool,X5) | s(bool,'F_0') = s(bool,X5) | s(bool,X3) = s(bool,X6) | s(bool,'F_0') = s(bool,X6)) ) | $spl0),
  inference(superposition,[],[f3902,f1632])).
fof(f23727,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s(bool,X0) != s(bool,X1) | s(bool,X1) = s(bool,'const.bool.IN_2'(s(X2,X3),s(fun(X2,bool),'const.pred_set.EMPTY_0'))) | s(bool,X4) = s(bool,'const.bool.IN_2'(s(X5,X6),s(fun(X5,bool),'const.pred_set.EMPTY_0'))) | s(bool,X0) = s(bool,X4)) ) | $spl0),
  inference(superposition,[],[f23265,f2976])).
fof(f23530,plain,(
  ( ! [X216,X215,X213,X217,X214] : (s(bool,X214) != s(bool,'const.bool.IN_2'(s(X216,X217),s(fun(X216,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X213),'const.option.NONE_0'),s(bool,X214),s(fun(X213,bool),X215)))) ) | $spl0),
  inference(superposition,[],[f22550,f166])).
fof(f22377,plain,(
  ( ! [X878,X876,X880,X875,X879,X877] : (s(X877,f(s(bool,'F_0'))) != s(X877,g(s(bool,'F_0'))) | s(fun(bool,X877),X875) = s(fun(bool,X877),X876) | s(bool,X878) = s(bool,'const.bool.IN_2'(s(X879,X880),s(fun(X879,bool),'const.pred_set.EMPTY_0'))) | s(bool,X878) = s(bool,sK8(X875,X876,X877,bool))) ) | $spl0),
  inference(superposition,[],[f167,f2976])).
fof(f22370,plain,(
  ( ! [X841,X839,X837,X840,X838,X836] : (s(bool,'F_0') != s(bool,f(s(X836,sK8(X837,X838,bool,X836)))) | s(fun(X836,bool),X837) = s(fun(X836,bool),X838) | s(bool,X839) = s(bool,'const.bool.IN_2'(s(X840,X841),s(fun(X840,bool),'const.pred_set.EMPTY_0'))) | s(bool,X839) = s(bool,g(s(X836,sK8(X837,X838,bool,X836))))) ) | $spl0),
  inference(superposition,[],[f167,f2976])).
fof(f22369,plain,(
  ( ! [X831,X829,X830,X828,X832] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X829),s(bool,'F_0'))) | s(bool,X828) = s(bool,sK7(X828,X829,bool)) | s(bool,X830) = s(bool,'const.bool.IN_2'(s(X831,X832),s(fun(X831,bool),'const.pred_set.EMPTY_0'))) | s(bool,X828) = s(bool,X830)) ) | $spl0),
  inference(superposition,[],[f2789,f2976])).
fof(f22367,plain,(
  ( ! [X819,X821,X818,X822,X820] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X819),s(bool,'F_0'))) | s(bool,X818) = s(bool,sK7(X818,X819,bool)) | s(bool,X820) = s(bool,'const.bool.IN_2'(s(X821,X822),s(fun(X821,bool),'const.pred_set.EMPTY_0'))) | s(bool,X818) = s(bool,X820)) ) | $spl0),
  inference(superposition,[],[f1756,f2976])).
fof(f22365,plain,(
  ( ! [X810,X812,X811,X809,X813] : (s('type.option.option'(bool),X810) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,X809) = s(bool,sK6(X810,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X810) | s(bool,X811) = s(bool,'const.bool.IN_2'(s(X812,X813),s(fun(X812,bool),'const.pred_set.EMPTY_0'))) | s(bool,X809) = s(bool,X811)) ) | $spl0),
  inference(superposition,[],[f459,f2976])).
fof(f22354,plain,(
  ( ! [X753,X749,X751,X752,X750] : (s(bool,'F_0') != s(bool,X750) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X749))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X750))) | s(bool,X751) = s(bool,'const.bool.IN_2'(s(X752,X753),s(fun(X752,bool),'const.pred_set.EMPTY_0'))) | s(bool,X749) = s(bool,X751)) ) | $spl0),
  inference(superposition,[],[f158,f2976])).
fof(f22352,plain,(
  ( ! [X741,X743,X739,X740,X742] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X740))) | s(bool,X739) = s(bool,X740) | s(bool,X741) = s(bool,'const.bool.IN_2'(s(X742,X743),s(fun(X742,bool),'const.pred_set.EMPTY_0'))) | s(bool,X739) = s(bool,X741)) ) | $spl0),
  inference(superposition,[],[f157,f2976])).
fof(f22272,plain,(
  ( ! [X366,X372,X368,X370,X367,X369,X371] : (s(bool,'F_0') != s(bool,X367) | s(bool,X366) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X368),'const.option.NONE_0'),s(bool,X367),s(fun(X368,bool),X369))) | s(bool,X370) = s(bool,'const.bool.IN_2'(s(X371,X372),s(fun(X371,bool),'const.pred_set.EMPTY_0'))) | s(bool,X366) = s(bool,X370)) ) | $spl0),
  inference(superposition,[],[f9763,f2976])).
fof(f22271,plain,(
  ( ! [X364,X360,X362,X359,X365,X361,X363] : (s(bool,'F_0') != s(bool,X360) | s(bool,X360) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X361),'const.option.NONE_0'),s(bool,X359),s(fun(X361,bool),X362))) | s(bool,X363) = s(bool,'const.bool.IN_2'(s(X364,X365),s(fun(X364,bool),'const.pred_set.EMPTY_0'))) | s(bool,X359) = s(bool,X363)) ) | $spl0),
  inference(superposition,[],[f9763,f2976])).
fof(f23386,plain,(
  ( ! [X212,X210,X215,X213,X211,X209,X214] : (s(bool,X209) = s(bool,happ(s(fun(X210,bool),X211),s(X210,X212))) | s(X210,X212) = s(X210,sK7(X212,X211,X210)) | s(bool,X213) = s(bool,'const.bool.IN_2'(s(X214,X215),s(fun(X214,bool),'const.pred_set.EMPTY_0'))) | s(bool,X209) = s(bool,X213)) ) | $spl0),
  inference(subsumption_resolution,[],[f22238,f179])).
fof(f22238,plain,(
  ( ! [X212,X210,X215,X213,X211,X209,X214] : (p(s(bool,'F_0')) | s(bool,X209) = s(bool,happ(s(fun(X210,bool),X211),s(X210,X212))) | s(X210,X212) = s(X210,sK7(X212,X211,X210)) | s(bool,X213) = s(bool,'const.bool.IN_2'(s(X214,X215),s(fun(X214,bool),'const.pred_set.EMPTY_0'))) | s(bool,X209) = s(bool,X213)) ) | $spl0),
  inference(superposition,[],[f2790,f2976])).
fof(f22196,plain,(
  ( ! [X606,X609,X605,X607,X608] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X606),s(bool,X605))) | s(bool,'F_0') = s(bool,sK7('F_0',X606,bool)) | s(bool,X607) = s(bool,'const.bool.IN_2'(s(X608,X609),s(fun(X608,bool),'const.pred_set.EMPTY_0'))) | s(bool,X605) = s(bool,X607)) ) | $spl0),
  inference(superposition,[],[f2789,f2976])).
fof(f22194,plain,(
  ( ! [X596,X598,X597,X599,X595] : (s(bool,X595) = s(bool,happ(s(fun(bool,bool),X596),s(bool,X595))) | s(bool,'F_0') = s(bool,sK7('F_0',X596,bool)) | s(bool,X597) = s(bool,'const.bool.IN_2'(s(X598,X599),s(fun(X598,bool),'const.pred_set.EMPTY_0'))) | s(bool,X595) = s(bool,X597)) ) | $spl0),
  inference(superposition,[],[f1756,f2976])).
fof(f22192,plain,(
  ( ! [X588,X590,X586,X589,X587] : (s('type.option.option'(bool),X587) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X586))) | s(bool,'F_0') = s(bool,sK6(X587,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X587) | s(bool,X588) = s(bool,'const.bool.IN_2'(s(X589,X590),s(fun(X589,bool),'const.pred_set.EMPTY_0'))) | s(bool,X586) = s(bool,X588)) ) | $spl0),
  inference(superposition,[],[f459,f2976])).
fof(f22189,plain,(
  ( ! [X575,X576,X574,X577] : (s(bool,X574) = s(bool,'const.bool.IN_2'(s(bool,X574),s(fun(bool,bool),'const.pred_set.EMPTY_0'))) | s(bool,X575) = s(bool,'const.bool.IN_2'(s(X576,X577),s(fun(X576,bool),'const.pred_set.EMPTY_0'))) | s(bool,X574) = s(bool,X575)) ) | $spl0),
  inference(superposition,[],[f191,f2976])).
fof(f22181,plain,(
  ( ! [X528,X530,X526,X529,X527] : (s(bool,X526) != s(bool,X527) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X527))) | s(bool,X528) = s(bool,'const.bool.IN_2'(s(X529,X530),s(fun(X529,bool),'const.pred_set.EMPTY_0'))) | s(bool,X526) = s(bool,X528)) ) | $spl0),
  inference(superposition,[],[f158,f2976])).
fof(f22159,plain,(
  ( ! [X428,X430,X432,X429,X431,X427,X433] : (s(bool,X427) != s(bool,X428) | s(bool,X428) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X429),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X429,bool),X430))) | s(bool,X431) = s(bool,'const.bool.IN_2'(s(X432,X433),s(fun(X432,bool),'const.pred_set.EMPTY_0'))) | s(bool,X427) = s(bool,X431)) ) | $spl0),
  inference(superposition,[],[f9763,f2976])).
fof(f22092,plain,(
  ( ! [X127,X125,X123,X126,X124,X122] : (s(bool,X122) != s(bool,X123) | s(bool,X124) = s(bool,sK6('const.option.SOME_1'(s(bool,X123)),bool)) | s(bool,'T_0') = s(bool,X124) | s(bool,X125) = s(bool,'const.bool.IN_2'(s(X126,X127),s(fun(X126,bool),'const.pred_set.EMPTY_0'))) | s(bool,X122) = s(bool,X125)) ) | $spl0),
  inference(superposition,[],[f14507,f2976])).
fof(f22091,plain,(
  ( ! [X121,X118,X116,X120,X119,X117] : (s(bool,X116) != s(bool,X117) | s(bool,X117) = s(bool,X118) | s(bool,'T_0') = s(bool,X118) | s(bool,X119) = s(bool,'const.bool.IN_2'(s(X120,X121),s(fun(X120,bool),'const.pred_set.EMPTY_0'))) | s(bool,X116) = s(bool,X119)) ) | $spl0),
  inference(superposition,[],[f13980,f2976])).
fof(f23346,plain,(
  ( ! [X94,X97,X95,X98,X96] : (s(bool,'T_0') = s(bool,X95) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X94))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X95))) | s(bool,X96) = s(bool,'const.bool.IN_2'(s(X97,X98),s(fun(X97,bool),'const.pred_set.EMPTY_0'))) | s(bool,X94) = s(bool,X96)) ) | $spl0),
  inference(forward_demodulation,[],[f22087,f901])).
fof(f22087,plain,(
  ( ! [X94,X97,X95,X98,X96] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X94))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X95))) | s(bool,X95) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X96) = s(bool,'const.bool.IN_2'(s(X97,X98),s(fun(X97,bool),'const.pred_set.EMPTY_0'))) | s(bool,X94) = s(bool,X96)) ) | $spl0),
  inference(superposition,[],[f8984,f2976])).
fof(f22083,plain,(
  ( ! [X78,X76,X74,X72,X77,X75,X73] : (s(bool,X72) != s(bool,X73) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X74),'const.option.NONE_0'),s(bool,X73),s(fun(X74,bool),X75))) | s(bool,X76) = s(bool,'const.bool.IN_2'(s(X77,X78),s(fun(X77,bool),'const.pred_set.EMPTY_0'))) | s(bool,X72) = s(bool,X76)) ) | $spl0),
  inference(superposition,[],[f4508,f2976])).
fof(f22082,plain,(
  ( ! [X70,X68,X71,X69,X67] : (s(bool,X68) != s(bool,sK6('const.option.SOME_1'(s(bool,X67)),bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X68)),bool)) | s(bool,X69) = s(bool,'const.bool.IN_2'(s(X70,X71),s(fun(X70,bool),'const.pred_set.EMPTY_0'))) | s(bool,X67) = s(bool,X69)) ) | $spl0),
  inference(superposition,[],[f4474,f2976])).
fof(f22081,plain,(
  ( ! [X66,X64,X65,X63] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,X63)),bool)) | s(bool,X64) = s(bool,'const.bool.IN_2'(s(X65,X66),s(fun(X65,bool),'const.pred_set.EMPTY_0'))) | s(bool,X63) = s(bool,X64)) ) | $spl0),
  inference(superposition,[],[f4454,f2976])).
fof(f22080,plain,(
  ( ! [X61,X59,X62,X60,X58] : (s(bool,X58) != s(bool,X59) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X59)),bool)) | s(bool,X60) = s(bool,'const.bool.IN_2'(s(X61,X62),s(fun(X61,bool),'const.pred_set.EMPTY_0'))) | s(bool,X58) = s(bool,X60)) ) | $spl0),
  inference(superposition,[],[f3910,f2976])).
fof(f22079,plain,(
  ( ! [X57,X54,X56,X55,X53] : (s(bool,X54) != s(bool,sK6('const.option.SOME_1'(s(bool,X53)),bool)) | s(bool,'F_0') = s(bool,X54) | s(bool,X55) = s(bool,'const.bool.IN_2'(s(X56,X57),s(fun(X56,bool),'const.pred_set.EMPTY_0'))) | s(bool,X53) = s(bool,X55)) ) | $spl0),
  inference(superposition,[],[f3597,f2976])).
fof(f22075,plain,(
  ( ! [X30,X33,X31,X34,X32] : (s('type.option.option'(bool),X31) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X30))) | s(bool,'T_0') = s(bool,sK6(X31,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X31) | s(bool,X32) = s(bool,'const.bool.IN_2'(s(X33,X34),s(fun(X33,bool),'const.pred_set.EMPTY_0'))) | s(bool,X30) = s(bool,X32)) ) | $spl0),
  inference(superposition,[],[f458,f2976])).
fof(f22074,plain,(
  ( ! [X28,X26,X24,X29,X27,X25] : (s(bool,X24) != s(bool,X25) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X25))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X26))) | s(bool,'T_0') = s(bool,X26) | s(bool,X27) = s(bool,'const.bool.IN_2'(s(X28,X29),s(fun(X28,bool),'const.pred_set.EMPTY_0'))) | s(bool,X24) = s(bool,X27)) ) | $spl0),
  inference(superposition,[],[f404,f2976])).
fof(f22073,plain,(
  ( ! [X23,X21,X19,X22,X20,X18] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X18))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X19))) | s(bool,X19) = s(bool,X20) | s(bool,'T_0') = s(bool,X20) | s(bool,X21) = s(bool,'const.bool.IN_2'(s(X22,X23),s(fun(X22,bool),'const.pred_set.EMPTY_0'))) | s(bool,X18) = s(bool,X21)) ) | $spl0),
  inference(superposition,[],[f362,f2976])).
fof(f22072,plain,(
  ( ! [X14,X17,X15,X16] : (s(bool,'T_0') != s(bool,X14) | s(bool,X15) = s(bool,'const.bool.IN_2'(s(X16,X17),s(fun(X16,bool),'const.pred_set.EMPTY_0'))) | s(bool,X14) = s(bool,X15)) ) | $spl0),
  inference(superposition,[],[f180,f2976])).
fof(f22068,plain,(
  ( ! [X1035,X1039,X1037,X1034,X1038,X1036] : (s(X1036,f(s(bool,X1037))) != s(X1036,g(s(bool,X1037))) | s(fun(bool,X1036),X1034) = s(fun(bool,X1036),X1035) | s(bool,X1037) = s(bool,'const.bool.IN_2'(s(X1038,X1039),s(fun(X1038,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,sK8(X1034,X1035,X1036,bool))) ) | $spl0),
  inference(superposition,[],[f167,f2976])).
fof(f22065,plain,(
  ( ! [X1023,X1021,X1022,X1024] : (s('type.option.option'(bool),X1021) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1022))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X1021) | s(bool,X1022) = s(bool,'const.bool.IN_2'(s(X1023,X1024),s(fun(X1023,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,sK6(X1021,bool))) ) | $spl0),
  inference(superposition,[],[f148,f2976])).
fof(f22061,plain,(
  ( ! [X1000,X998,X996,X995,X999,X997] : (s(bool,X998) != s(bool,f(s(X995,sK8(X996,X997,bool,X995)))) | s(fun(X995,bool),X996) = s(fun(X995,bool),X997) | s(bool,X998) = s(bool,'const.bool.IN_2'(s(X999,X1000),s(fun(X999,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,g(s(X995,sK8(X996,X997,bool,X995))))) ) | $spl0),
  inference(superposition,[],[f167,f2976])).
fof(f22060,plain,(
  ( ! [X990,X988,X987,X989,X986] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X988),s(bool,X987))) | s(bool,X986) = s(bool,sK7(X986,X988,bool)) | s(bool,X987) = s(bool,'const.bool.IN_2'(s(X989,X990),s(fun(X989,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X986)) ) | $spl0),
  inference(superposition,[],[f2789,f2976])).
fof(f22058,plain,(
  ( ! [X978,X976,X980,X979,X977] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X978),s(bool,X977))) | s(bool,X976) = s(bool,sK7(X976,X978,bool)) | s(bool,X977) = s(bool,'const.bool.IN_2'(s(X979,X980),s(fun(X979,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X976)) ) | $spl0),
  inference(superposition,[],[f1756,f2976])).
fof(f22056,plain,(
  ( ! [X971,X969,X967,X970,X968] : (s('type.option.option'(bool),X969) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X968))) | s(bool,X967) = s(bool,sK6(X969,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X969) | s(bool,X968) = s(bool,'const.bool.IN_2'(s(X970,X971),s(fun(X970,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X967)) ) | $spl0),
  inference(superposition,[],[f459,f2976])).
fof(f22045,plain,(
  ( ! [X907,X911,X909,X910,X908] : (s(bool,X908) != s(bool,X909) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X907))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X909))) | s(bool,X908) = s(bool,'const.bool.IN_2'(s(X910,X911),s(fun(X910,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X907)) ) | $spl0),
  inference(superposition,[],[f158,f2976])).
fof(f23315,plain,(
  ( ! [X600,X598,X601,X597,X599] : (s(bool,X598) != s(bool,sK6('const.option.SOME_1'(s(bool,X597)),bool)) | s(bool,X598) = s(bool,X599) | s(bool,'F_0') = s(bool,X599) | s(bool,X597) = s(bool,'const.bool.IN_2'(s(X600,X601),s(fun(X600,bool),'const.pred_set.EMPTY_0')))) ) | $spl0),
  inference(subsumption_resolution,[],[f21976,f180])).
fof(f21976,plain,(
  ( ! [X600,X598,X601,X597,X599] : (s(bool,X598) != s(bool,sK6('const.option.SOME_1'(s(bool,X597)),bool)) | s(bool,X598) = s(bool,X599) | s(bool,'F_0') = s(bool,X599) | s(bool,X597) = s(bool,'const.bool.IN_2'(s(X600,X601),s(fun(X600,bool),'const.pred_set.EMPTY_0'))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl0),
  inference(superposition,[],[f17475,f2976])).
fof(f23309,plain,(
  ( ! [X580,X576,X578,X577,X579] : (s(bool,X577) = s(bool,sK6('const.option.SOME_1'(s(bool,X576)),bool)) | s(bool,X577) = s(bool,X578) | s(bool,'T_0') = s(bool,X578) | s(bool,X576) = s(bool,'const.bool.IN_2'(s(X579,X580),s(fun(X579,bool),'const.pred_set.EMPTY_0')))) ) | $spl0),
  inference(subsumption_resolution,[],[f21972,f180])).
fof(f21972,plain,(
  ( ! [X580,X576,X578,X577,X579] : (s(bool,X577) = s(bool,sK6('const.option.SOME_1'(s(bool,X576)),bool)) | s(bool,X577) = s(bool,X578) | s(bool,'T_0') = s(bool,X578) | s(bool,X576) = s(bool,'const.bool.IN_2'(s(X579,X580),s(fun(X579,bool),'const.pred_set.EMPTY_0'))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl0),
  inference(superposition,[],[f9397,f2976])).
fof(f23308,plain,(
  ( ! [X573,X575,X572,X574] : (s(bool,X572) != s(bool,X573) | s(bool,'T_0') = s(bool,X573) | s(bool,X572) = s(bool,'const.bool.IN_2'(s(X574,X575),s(fun(X574,bool),'const.pred_set.EMPTY_0')))) ) | $spl0),
  inference(forward_demodulation,[],[f23307,f901])).
fof(f23307,plain,(
  ( ! [X573,X575,X572,X574] : (s(bool,X572) != s(bool,X573) | s(bool,X573) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X572) = s(bool,'const.bool.IN_2'(s(X574,X575),s(fun(X574,bool),'const.pred_set.EMPTY_0')))) ) | $spl0),
  inference(subsumption_resolution,[],[f21971,f180])).
fof(f21971,plain,(
  ( ! [X573,X575,X572,X574] : (s(bool,X572) != s(bool,X573) | s(bool,X573) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X572) = s(bool,'const.bool.IN_2'(s(X574,X575),s(fun(X574,bool),'const.pred_set.EMPTY_0'))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl0),
  inference(superposition,[],[f9392,f2976])).
fof(f23306,plain,(
  ( ! [X569,X571,X568,X570] : (s(bool,X569) = s(bool,sK6('const.option.SOME_1'(s(bool,X568)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X569))) | s(bool,X568) = s(bool,'const.bool.IN_2'(s(X570,X571),s(fun(X570,bool),'const.pred_set.EMPTY_0')))) ) | $spl0),
  inference(subsumption_resolution,[],[f21970,f180])).
fof(f21970,plain,(
  ( ! [X569,X571,X568,X570] : (s(bool,X569) = s(bool,sK6('const.option.SOME_1'(s(bool,X568)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X569))) | s(bool,X568) = s(bool,'const.bool.IN_2'(s(X570,X571),s(fun(X570,bool),'const.pred_set.EMPTY_0'))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl0),
  inference(superposition,[],[f8984,f2976])).
fof(f23303,plain,(
  ( ! [X557,X555,X556,X554] : (s(bool,X555) = s(bool,sK6('const.option.SOME_1'(s(bool,X554)),bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X555)),bool)) | s(bool,X554) = s(bool,'const.bool.IN_2'(s(X556,X557),s(fun(X556,bool),'const.pred_set.EMPTY_0')))) ) | $spl0),
  inference(subsumption_resolution,[],[f21967,f180])).
fof(f21967,plain,(
  ( ! [X557,X555,X556,X554] : (s(bool,X555) = s(bool,sK6('const.option.SOME_1'(s(bool,X554)),bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X555)),bool)) | s(bool,X554) = s(bool,'const.bool.IN_2'(s(X556,X557),s(fun(X556,bool),'const.pred_set.EMPTY_0'))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl0),
  inference(superposition,[],[f7724,f2976])).
fof(f23300,plain,(
  ( ! [X528,X530,X526,X529,X527] : (s(bool,X526) != s(bool,X527) | s(bool,X527) = s(bool,X528) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X528)),bool)) | s(bool,X526) = s(bool,'const.bool.IN_2'(s(X529,X530),s(fun(X529,bool),'const.pred_set.EMPTY_0')))) ) | $spl0),
  inference(subsumption_resolution,[],[f21962,f180])).
fof(f21962,plain,(
  ( ! [X528,X530,X526,X529,X527] : (s(bool,X526) != s(bool,X527) | s(bool,X527) = s(bool,X528) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X528)),bool)) | s(bool,X526) = s(bool,'const.bool.IN_2'(s(X529,X530),s(fun(X529,bool),'const.pred_set.EMPTY_0'))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl0),
  inference(superposition,[],[f3405,f2976])).
fof(f23299,plain,(
  ( ! [X520,X518,X521,X517,X519] : (s(bool,X517) != s(bool,X518) | s(bool,X519) = s(bool,sK6('const.option.SOME_1'(s(bool,X518)),bool)) | s(bool,'F_0') = s(bool,X519) | s(bool,X517) = s(bool,'const.bool.IN_2'(s(X520,X521),s(fun(X520,bool),'const.pred_set.EMPTY_0')))) ) | $spl0),
  inference(subsumption_resolution,[],[f21961,f180])).
fof(f21961,plain,(
  ( ! [X520,X518,X521,X517,X519] : (s(bool,X517) != s(bool,X518) | s(bool,X519) = s(bool,sK6('const.option.SOME_1'(s(bool,X518)),bool)) | s(bool,'F_0') = s(bool,X519) | s(bool,X517) = s(bool,'const.bool.IN_2'(s(X520,X521),s(fun(X520,bool),'const.pred_set.EMPTY_0'))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl0),
  inference(superposition,[],[f2660,f2976])).
fof(f21934,plain,(
  ( ! [X389,X385,X387,X388,X390,X384,X386] : (s(bool,X385) != s(bool,X386) | s(bool,X384) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X387),'const.option.NONE_0'),s(bool,X386),s(fun(X387,bool),X388))) | s(bool,X385) = s(bool,'const.bool.IN_2'(s(X389,X390),s(fun(X389,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X384)) ) | $spl0),
  inference(superposition,[],[f9763,f2976])).
fof(f21933,plain,(
  ( ! [X383,X377,X379,X380,X382,X378,X381] : (s(bool,X378) != s(bool,X379) | s(bool,X379) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X380),'const.option.NONE_0'),s(bool,X377),s(fun(X380,bool),X381))) | s(bool,X378) = s(bool,'const.bool.IN_2'(s(X382,X383),s(fun(X382,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X377)) ) | $spl0),
  inference(superposition,[],[f9763,f2976])).
fof(f23265,plain,(
  ( ! [X282,X281,X278] : (s(bool,'F_0') != s(bool,X278) | s(bool,X278) = s(bool,'const.bool.IN_2'(s(X281,X282),s(fun(X281,bool),'const.pred_set.EMPTY_0')))) ) | $spl0),
  inference(global_subsumption,[],[f23264,f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f782,f828,f901,f914,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1188,f1191,f1256,f1265,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1783,f3994,f3951,f3948,f3019,f3018,f3015,f2847,f2846,f2843,f2821,f2820,f2817,f2616,f2583,f2542,f1615,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f15303,f16647,f17793,f17794,f17795,f17796,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17768,f17750,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18107,f18108,f18112,f18114,f15749,f18105,f18101,f17816,f17752,f17623,f17617,f17588,f18085,f18769,f17591,f18768,f736,f469,f18766,f17628,f17627,f17608,f17590,f16590,f15637,f16589,f15636,f18747,f18711,f16591,f16588,f446,f440,f18762,f18745,f18712,f17755,f2622,f1300,f1071,f18744,f18713,f17754,f15638,f15635,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f18800,f615,f593,f18799,f607,f18708,f862,f18709,f18832,f18801,f18798,f18710,f18707,f3949,f2543,f1580,f1123,f1093,f1062,f1018,f1005,f989,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f3950,f2544,f1124,f1094,f1063,f864,f863,f840,f826,f1309,f1184,f770,f3016,f2844,f2818,f3017,f2845,f2819])).
fof(f23264,plain,(
  ( ! [X280,X282,X277,X279,X281,X278] : (s(bool,'F_0') != s(bool,X278) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X279),'const.option.NONE_0'),s(bool,X277),s(fun(X279,bool),X280))) | s(bool,X278) = s(bool,'const.bool.IN_2'(s(X281,X282),s(fun(X281,bool),'const.pred_set.EMPTY_0')))) ) | $spl0),
  inference(subsumption_resolution,[],[f21910,f4508])).
fof(f21910,plain,(
  ( ! [X280,X282,X277,X279,X281,X278] : (s(bool,'F_0') != s(bool,X278) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X279),'const.option.NONE_0'),s(bool,X277),s(fun(X279,bool),X280))) | s(bool,X278) = s(bool,'const.bool.IN_2'(s(X281,X282),s(fun(X281,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X277)) ) | $spl0),
  inference(superposition,[],[f4508,f2976])).
fof(f22467,plain,(
  ( ! [X239,X237,X240,X238,X236] : (s(bool,X237) != s(bool,sK6('const.option.SOME_1'(s(bool,X238)),bool)) | s(bool,X236) = s(bool,X238) | s(bool,'F_0') = s(bool,X236) | s(bool,X237) = s(bool,'const.bool.IN_2'(s(X239,X240),s(fun(X239,bool),'const.pred_set.EMPTY_0')))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f21901])).
fof(f21901,plain,(
  ( ! [X239,X237,X240,X238,X236] : (s(bool,X237) != s(bool,sK6('const.option.SOME_1'(s(bool,X238)),bool)) | s(bool,X236) = s(bool,X238) | s(bool,'F_0') = s(bool,X236) | s(bool,X237) = s(bool,'const.bool.IN_2'(s(X239,X240),s(fun(X239,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X236)) ) | $spl0),
  inference(superposition,[],[f3585,f2976])).
fof(f22469,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,X0) | s(bool,X1) != s(bool,X2) | s(bool,X0) = s(bool,X2) | s(bool,X1) = s(bool,'const.bool.IN_2'(s(X3,X4),s(fun(X3,bool),'const.pred_set.EMPTY_0')))) ) | $spl0),
  inference(condensation,[],[f22468])).
fof(f22468,plain,(
  ( ! [X218,X216,X215,X213,X217,X214] : (s(bool,X214) != s(bool,X215) | s(bool,'F_0') = s(bool,X213) | s(bool,X215) = s(bool,X216) | s(bool,'F_0') = s(bool,X216) | s(bool,X214) = s(bool,'const.bool.IN_2'(s(X217,X218),s(fun(X217,bool),'const.pred_set.EMPTY_0')))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f21897])).
fof(f21897,plain,(
  ( ! [X218,X216,X215,X213,X217,X214] : (s(bool,X214) != s(bool,X215) | s(bool,'F_0') = s(bool,X213) | s(bool,X215) = s(bool,X216) | s(bool,'F_0') = s(bool,X216) | s(bool,X214) = s(bool,'const.bool.IN_2'(s(X217,X218),s(fun(X217,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X213)) ) | $spl0),
  inference(superposition,[],[f2517,f2976])).
fof(f21845,plain,(
  ( ! [X990,X988,X987,X989,X986] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X988),s(bool,X987))) | s(bool,X986) = s(bool,sK7(X986,X988,bool)) | s(bool,X986) = s(bool,'const.bool.IN_2'(s(X989,X990),s(fun(X989,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X987)) ) | $spl0),
  inference(superposition,[],[f2789,f2976])).
fof(f21843,plain,(
  ( ! [X978,X976,X980,X979,X977] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X978),s(bool,X977))) | s(bool,X976) = s(bool,sK7(X976,X978,bool)) | s(bool,X976) = s(bool,'const.bool.IN_2'(s(X979,X980),s(fun(X979,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X977)) ) | $spl0),
  inference(superposition,[],[f1756,f2976])).
fof(f21841,plain,(
  ( ! [X971,X969,X967,X970,X968] : (s('type.option.option'(bool),X969) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X968))) | s(bool,X967) = s(bool,sK6(X969,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X969) | s(bool,X967) = s(bool,'const.bool.IN_2'(s(X970,X971),s(fun(X970,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X968)) ) | $spl0),
  inference(superposition,[],[f459,f2976])).
fof(f21830,plain,(
  ( ! [X907,X911,X909,X910,X908] : (s(bool,X908) != s(bool,X909) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X907))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X909))) | s(bool,X907) = s(bool,'const.bool.IN_2'(s(X910,X911),s(fun(X910,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X908)) ) | $spl0),
  inference(superposition,[],[f158,f2976])).
fof(f21828,plain,(
  ( ! [X899,X897,X901,X898,X900] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X898))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X899))) | s(bool,X897) = s(bool,X899) | s(bool,X897) = s(bool,'const.bool.IN_2'(s(X900,X901),s(fun(X900,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X898)) ) | $spl0),
  inference(superposition,[],[f157,f2976])).
fof(f21719,plain,(
  ( ! [X389,X385,X387,X388,X390,X384,X386] : (s(bool,X385) != s(bool,X386) | s(bool,X384) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X387),'const.option.NONE_0'),s(bool,X386),s(fun(X387,bool),X388))) | s(bool,X384) = s(bool,'const.bool.IN_2'(s(X389,X390),s(fun(X389,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X385)) ) | $spl0),
  inference(superposition,[],[f9763,f2976])).
fof(f21718,plain,(
  ( ! [X383,X377,X379,X380,X382,X378,X381] : (s(bool,X378) != s(bool,X379) | s(bool,X379) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X380),'const.option.NONE_0'),s(bool,X377),s(fun(X380,bool),X381))) | s(bool,X377) = s(bool,'const.bool.IN_2'(s(X382,X383),s(fun(X382,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X378)) ) | $spl0),
  inference(superposition,[],[f9763,f2976])).
fof(f23039,plain,(
  ( ! [X588,X590,X586,X589,X587] : (s(bool,'F_0') = s(bool,sK7('const.bool.IN_2'(s(X586,X587),s(fun(X586,bool),'const.pred_set.EMPTY_0')),X589,bool)) | s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X589),s(bool,X588))) | s(bool,X588) = s(bool,X590) | s(bool,'F_0') = s(bool,X590)) ) | $spl0),
  inference(forward_demodulation,[],[f21638,f191])).
fof(f21638,plain,(
  ( ! [X588,X590,X586,X589,X587] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X589),s(bool,X588))) | s(bool,'const.bool.IN_2'(s(X586,X587),s(fun(X586,bool),'const.pred_set.EMPTY_0'))) = s(bool,sK7('const.bool.IN_2'(s(X586,X587),s(fun(X586,bool),'const.pred_set.EMPTY_0')),X589,bool)) | s(bool,X588) = s(bool,X590) | s(bool,'F_0') = s(bool,X590)) ) | $spl0),
  inference(superposition,[],[f2789,f2976])).
fof(f21637,plain,(
  ( ! [X584,X582,X585,X581,X583] : (~p(s(bool,happ(s(fun(bool,bool),X584),s(bool,X583)))) | s(bool,sK7('const.bool.IN_2'(s(X581,X582),s(fun(X581,bool),'const.pred_set.EMPTY_0')),X584,bool)) = s(bool,sK7(sK7('const.bool.IN_2'(s(X581,X582),s(fun(X581,bool),'const.pred_set.EMPTY_0')),X584,bool),X584,bool)) | s(bool,X583) = s(bool,X585) | s(bool,'F_0') = s(bool,X585)) ) | $spl0),
  inference(superposition,[],[f2788,f2976])).
fof(f23038,plain,(
  ( ! [X580,X576,X578,X577,X579] : (s(bool,'F_0') = s(bool,sK7('const.bool.IN_2'(s(X576,X577),s(fun(X576,bool),'const.pred_set.EMPTY_0')),X579,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X579),s(bool,X578))) | s(bool,X578) = s(bool,X580) | s(bool,'F_0') = s(bool,X580)) ) | $spl0),
  inference(forward_demodulation,[],[f21636,f191])).
fof(f21636,plain,(
  ( ! [X580,X576,X578,X577,X579] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X579),s(bool,X578))) | s(bool,'const.bool.IN_2'(s(X576,X577),s(fun(X576,bool),'const.pred_set.EMPTY_0'))) = s(bool,sK7('const.bool.IN_2'(s(X576,X577),s(fun(X576,bool),'const.pred_set.EMPTY_0')),X579,bool)) | s(bool,X578) = s(bool,X580) | s(bool,'F_0') = s(bool,X580)) ) | $spl0),
  inference(superposition,[],[f1756,f2976])).
fof(f23036,plain,(
  ( ! [X524,X526,X525,X527,X523] : (s(bool,'F_0') = s(bool,sK7('const.bool.IN_2'(s(X523,X524),s(fun(X523,bool),'const.pred_set.EMPTY_0')),X526,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X526),s(bool,X525)))) | s(bool,X525) = s(bool,X527) | s(bool,'F_0') = s(bool,X527)) ) | $spl0),
  inference(forward_demodulation,[],[f21626,f191])).
fof(f21626,plain,(
  ( ! [X524,X526,X525,X527,X523] : (~p(s(bool,happ(s(fun(bool,bool),X526),s(bool,X525)))) | s(bool,'const.bool.IN_2'(s(X523,X524),s(fun(X523,bool),'const.pred_set.EMPTY_0'))) = s(bool,sK7('const.bool.IN_2'(s(X523,X524),s(fun(X523,bool),'const.pred_set.EMPTY_0')),X526,bool)) | s(bool,X525) = s(bool,X527) | s(bool,'F_0') = s(bool,X527)) ) | $spl0),
  inference(superposition,[],[f160,f2976])).
fof(f21621,plain,(
  ( ! [X499,X500,X498,X501,X497] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X499))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X500))) | s(bool,X500) = s(bool,'const.bool.IN_2'(s(X497,X498),s(fun(X497,bool),'const.pred_set.EMPTY_0'))) | s(bool,X499) = s(bool,X501) | s(bool,'F_0') = s(bool,X501)) ) | $spl0),
  inference(superposition,[],[f157,f2976])).
fof(f21493,plain,(
  ( ! [X761,X759,X760,X762,X758] : (s(bool,X761) != s(bool,'const.bool.IN_2'(s(X759,X760),s(fun(X759,bool),'const.pred_set.EMPTY_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X758))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X761))) | s(bool,X758) = s(bool,X762) | s(bool,'F_0') = s(bool,X762)) ) | $spl0),
  inference(superposition,[],[f158,f2976])).
fof(f21445,plain,(
  ( ! [X389,X385,X387,X388,X390,X384,X386] : (s(bool,X387) != s(bool,'const.bool.IN_2'(s(X385,X386),s(fun(X385,bool),'const.pred_set.EMPTY_0'))) | s(bool,X384) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X388),'const.option.NONE_0'),s(bool,X387),s(fun(X388,bool),X389))) | s(bool,X384) = s(bool,X390) | s(bool,'F_0') = s(bool,X390)) ) | $spl0),
  inference(superposition,[],[f9763,f2976])).
fof(f21444,plain,(
  ( ! [X383,X377,X379,X380,X382,X378,X381] : (s(bool,X380) != s(bool,'const.bool.IN_2'(s(X378,X379),s(fun(X378,bool),'const.pred_set.EMPTY_0'))) | s(bool,X380) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X381),'const.option.NONE_0'),s(bool,X377),s(fun(X381,bool),X382))) | s(bool,X377) = s(bool,X383) | s(bool,'F_0') = s(bool,X383)) ) | $spl0),
  inference(superposition,[],[f9763,f2976])).
fof(f22550,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) != s(bool,'const.bool.IN_2'(s(X1,X2),s(fun(X1,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X0)) ) | $spl0),
  inference(condensation,[],[f22549])).
fof(f22549,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,X0) | s(bool,X0) != s(bool,'const.bool.IN_2'(s(X1,X2),s(fun(X1,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X3)) ) | $spl0),
  inference(duplicate_literal_removal,[],[f22548])).
fof(f22548,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,X0) | s(bool,X0) != s(bool,'const.bool.IN_2'(s(X1,X2),s(fun(X1,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X3) | s(bool,'F_0') = s(bool,X3)) ) | $spl0),
  inference(condensation,[],[f21407])).
fof(f21407,plain,(
  ( ! [X212,X210,X208,X211,X209,X207] : (s(bool,X210) != s(bool,'const.bool.IN_2'(s(X208,X209),s(fun(X208,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X210) | s(bool,X207) = s(bool,X211) | s(bool,'F_0') = s(bool,X211) | s(bool,X207) = s(bool,X212) | s(bool,'F_0') = s(bool,X212)) ) | $spl0),
  inference(superposition,[],[f2517,f2976])).
fof(f21363,plain,(
  ( ! [X218,X216,X220,X215,X219,X217,X221] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X215),X216),s(bool,X217),s(fun(X215,bool),X218))) | s(bool,X219) = s(bool,'const.bool.IN_2'(s(X220,X221),s(fun(X220,bool),'const.pred_set.EMPTY_0'))) | s(bool,X219) = s(bool,happ(s(fun(fun(X215,bool),bool),happ(s(fun(bool,fun(fun(X215,bool),bool)),happ(s(fun('type.option.option'(X215),fun(bool,fun(fun(X215,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X215),X216))),s(bool,X217))),s(fun(X215,bool),X218)))) ) | $spl0),
  inference(superposition,[],[f2976,f169])).
fof(f21362,plain,(
  ( ! [X212,X210,X208,X213,X211,X209,X214] : (s(bool,'F_0') = s(bool,happ(s(fun(X208,bool),X211),s(X208,X209))) | s(bool,X212) = s(bool,'const.bool.IN_2'(s(X213,X214),s(fun(X213,bool),'const.pred_set.EMPTY_0'))) | s(bool,X212) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X208),'const.option.SOME_1'(s(X208,X209))),s(bool,X210),s(fun(X208,bool),X211)))) ) | $spl0),
  inference(superposition,[],[f2976,f168])).
fof(f22816,plain,(
  ( ! [X198,X200,X199,X201] : (s(bool,X199) = s(bool,'const.bool.IN_2'(s(X200,X201),s(fun(X200,bool),'const.pred_set.EMPTY_0'))) | s(bool,X199) = s(bool,sK6(X198,bool)) | s('type.option.option'(bool),X198) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X198)) ) | $spl0),
  inference(subsumption_resolution,[],[f21360,f180])).
fof(f21360,plain,(
  ( ! [X198,X200,X199,X201] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X199) = s(bool,'const.bool.IN_2'(s(X200,X201),s(fun(X200,bool),'const.pred_set.EMPTY_0'))) | s(bool,X199) = s(bool,sK6(X198,bool)) | s('type.option.option'(bool),X198) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X198)) ) | $spl0),
  inference(superposition,[],[f2976,f458])).
fof(f22805,plain,(
  ( ! [X142,X143,X141] : (s(bool,X141) = s(bool,'const.bool.IN_2'(s(X142,X143),s(fun(X142,bool),'const.pred_set.EMPTY_0'))) | s(bool,X141) = s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3)))))) ) | $spl0),
  inference(subsumption_resolution,[],[f21349,f180])).
fof(f21349,plain,(
  ( ! [X142,X143,X141] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X141) = s(bool,'const.bool.IN_2'(s(X142,X143),s(fun(X142,bool),'const.pred_set.EMPTY_0'))) | s(bool,X141) = s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3)))))) ) | $spl0),
  inference(superposition,[],[f2976,f689])).
fof(f22804,plain,(
  ( ! [X140,X138,X136,X135,X139,X137] : (s(bool,X138) = s(bool,'const.bool.IN_2'(s(X139,X140),s(fun(X139,bool),'const.pred_set.EMPTY_0'))) | s(bool,X138) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X135),'const.option.NONE_0'),s(bool,X136),s(fun(X135,bool),X137))) | s(bool,'F_0') = s(bool,X136)) ) | $spl0),
  inference(subsumption_resolution,[],[f21348,f180])).
fof(f21348,plain,(
  ( ! [X140,X138,X136,X135,X139,X137] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X138) = s(bool,'const.bool.IN_2'(s(X139,X140),s(fun(X139,bool),'const.pred_set.EMPTY_0'))) | s(bool,X138) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X135),'const.option.NONE_0'),s(bool,X136),s(fun(X135,bool),X137))) | s(bool,'F_0') = s(bool,X136)) ) | $spl0),
  inference(superposition,[],[f2976,f298])).
fof(f21299,plain,(
  ( ! [X14,X19,X17,X15,X18,X16] : (s(bool,X14) = s(bool,X15) | s(bool,X16) = s(bool,'const.bool.IN_2'(s(X17,X18),s(fun(X17,bool),'const.pred_set.EMPTY_0'))) | s(bool,X15) = s(bool,X16) | s(bool,X14) = s(bool,X19) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X19)),bool))) ) | $spl0),
  inference(superposition,[],[f2976,f1834])).
fof(f21297,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X2) = s(bool,'const.bool.IN_2'(s(X3,X4),s(fun(X3,bool),'const.pred_set.EMPTY_0'))) | s(bool,X1) = s(bool,X2) | s(bool,X5) = s(bool,'const.bool.IN_2'(s(X6,X7),s(fun(X6,bool),'const.pred_set.EMPTY_0'))) | s(bool,X0) = s(bool,X5)) ) | $spl0),
  inference(superposition,[],[f2976,f2976])).
fof(f21295,plain,(
  ( ! [X292,X294,X290,X293,X295,X289,X291] : (s(bool,X293) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X289),X290),s(bool,X291),s(fun(X289,bool),X292))) | s(bool,X293) = s(bool,'const.bool.IN_2'(s(X294,X295),s(fun(X294,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X289,bool),bool),happ(s(fun(bool,fun(fun(X289,bool),bool)),happ(s(fun('type.option.option'(X289),fun(bool,fun(fun(X289,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X289),X290))),s(bool,X291))),s(fun(X289,bool),X292)))) ) | $spl0),
  inference(superposition,[],[f2976,f169])).
fof(f21294,plain,(
  ( ! [X282,X288,X285,X287,X283,X284,X286] : (s(bool,X286) = s(bool,happ(s(fun(X282,bool),X285),s(X282,X283))) | s(bool,X286) = s(bool,'const.bool.IN_2'(s(X287,X288),s(fun(X287,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X282),'const.option.SOME_1'(s(X282,X283))),s(bool,X284),s(fun(X282,bool),X285)))) ) | $spl0),
  inference(superposition,[],[f2976,f168])).
fof(f21293,plain,(
  ( ! [X280,X277,X279,X281,X276,X278] : (s(bool,X277) = s(bool,X279) | s(bool,X279) = s(bool,'const.bool.IN_2'(s(X280,X281),s(fun(X280,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X276),'const.option.NONE_0'),s(bool,X277),s(fun(X276,bool),X278)))) ) | $spl0),
  inference(superposition,[],[f2976,f166])).
fof(f22796,plain,(
  ( ! [X255,X257,X256,X258] : (s(bool,X255) = s(bool,X256) | s(bool,X256) = s(bool,'const.bool.IN_2'(s(X257,X258),s(fun(X257,bool),'const.pred_set.EMPTY_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X255)))) ) | $spl0),
  inference(subsumption_resolution,[],[f22795,f180])).
fof(f22795,plain,(
  ( ! [X255,X257,X256,X258] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X255) = s(bool,X256) | s(bool,X256) = s(bool,'const.bool.IN_2'(s(X257,X258),s(fun(X257,bool),'const.pred_set.EMPTY_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X255)))) ) | $spl0),
  inference(forward_demodulation,[],[f21288,f901])).
fof(f21288,plain,(
  ( ! [X255,X257,X256,X258] : (s(bool,X255) = s(bool,X256) | s(bool,X256) = s(bool,'const.bool.IN_2'(s(X257,X258),s(fun(X257,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X255)))) ) | $spl0),
  inference(superposition,[],[f2976,f8984])).
fof(f22794,plain,(
  ( ! [X154,X152,X151,X155,X153] : (s(bool,'T_0') = s(bool,X155) | s(bool,X151) = s(bool,X152) | s(bool,X152) = s(bool,'const.bool.IN_2'(s(X153,X154),s(fun(X153,bool),'const.pred_set.EMPTY_0'))) | s(bool,X151) = s(bool,X155)) ) | $spl0),
  inference(forward_demodulation,[],[f22793,f901])).
fof(f22793,plain,(
  ( ! [X154,X152,X151,X155,X153] : (s(bool,X151) = s(bool,X152) | s(bool,X152) = s(bool,'const.bool.IN_2'(s(X153,X154),s(fun(X153,bool),'const.pred_set.EMPTY_0'))) | s(bool,X155) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X151) = s(bool,X155)) ) | $spl0),
  inference(subsumption_resolution,[],[f21265,f180])).
fof(f21265,plain,(
  ( ! [X154,X152,X151,X155,X153] : (s(bool,X151) = s(bool,X152) | s(bool,X152) = s(bool,'const.bool.IN_2'(s(X153,X154),s(fun(X153,bool),'const.pred_set.EMPTY_0'))) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X155) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X151) = s(bool,X155)) ) | $spl0),
  inference(superposition,[],[f2976,f9397])).
fof(f22613,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool)) | s(bool,X1) = s(bool,'const.bool.IN_2'(s(X2,X3),s(fun(X2,bool),'const.pred_set.EMPTY_0'))) | s(bool,X0) = s(bool,X1)) ) | $spl0),
  inference(condensation,[],[f22612])).
fof(f22612,plain,(
  ( ! [X57,X54,X58,X56,X55] : (s(bool,'F_0') = s(bool,X55) | s(bool,X54) = s(bool,'const.bool.IN_2'(s(X56,X57),s(fun(X56,bool),'const.pred_set.EMPTY_0'))) | s(bool,X54) = s(bool,X58) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X58)),bool))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f21184])).
fof(f21184,plain,(
  ( ! [X57,X54,X58,X56,X55] : (s(bool,'F_0') = s(bool,X55) | s(bool,X54) = s(bool,'const.bool.IN_2'(s(X56,X57),s(fun(X56,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X55) | s(bool,X54) = s(bool,X58) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X58)),bool))) ) | $spl0),
  inference(superposition,[],[f2976,f1834])).
fof(f21071,plain,(
  ( ! [X277,X275,X276,X274] : (s(bool,X274) = s(bool,'const.bool.IN_2'(s(X275,X276),s(fun(X275,bool),'const.pred_set.EMPTY_0'))) | s(bool,X277) = s(bool,sK6('const.option.SOME_1'(s(bool,X274)),bool)) | s(bool,'F_0') = s(bool,X277)) ) | $spl0),
  inference(superposition,[],[f2976,f901])).
fof(f21068,plain,(
  ( ! [X255,X257,X259,X254,X256,X258] : (s(bool,X255) = s(bool,'const.bool.IN_2'(s(X257,X258),s(fun(X257,bool),'const.pred_set.EMPTY_0'))) | s(bool,X259) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X254),'const.option.NONE_0'),s(bool,X255),s(fun(X254,bool),X256))) | s(bool,'F_0') = s(bool,X259)) ) | $spl0),
  inference(superposition,[],[f2976,f166])).
fof(f21003,plain,(
  ( ! [X191,X194,X192,X190,X193] : (s(bool,sK6('const.option.SOME_1'(s(bool,X190)),bool)) = s(bool,happ(s(fun(X191,bool),X192),s(X191,X193))) | s(X191,X193) = s(X191,sK7(X193,X192,X191)) | s(bool,X190) = s(bool,X194) | s(bool,'F_0') = s(bool,X194)) ) | $spl0),
  inference(subsumption_resolution,[],[f20956,f179])).
fof(f20956,plain,(
  ( ! [X191,X194,X192,X190,X193] : (p(s(bool,'F_0')) | s(bool,sK6('const.option.SOME_1'(s(bool,X190)),bool)) = s(bool,happ(s(fun(X191,bool),X192),s(X191,X193))) | s(X191,X193) = s(X191,sK7(X193,X192,X191)) | s(bool,X190) = s(bool,X194) | s(bool,'F_0') = s(bool,X194)) ) | $spl0),
  inference(superposition,[],[f2790,f1834])).
fof(f21002,plain,(
  ( ! [X189,X187,X188,X186] : (s(bool,'T_0') = s(bool,X186) | s(bool,sK6('const.option.SOME_1'(s(bool,X186)),bool)) = s(bool,happ(s(fun(X187,bool),X188),s(X187,X189))) | s(X187,X189) = s(X187,sK7(X189,X188,X187))) ) | $spl0),
  inference(forward_demodulation,[],[f21001,f901])).
fof(f21001,plain,(
  ( ! [X189,X187,X188,X186] : (s(bool,sK6('const.option.SOME_1'(s(bool,X186)),bool)) = s(bool,happ(s(fun(X187,bool),X188),s(X187,X189))) | s(X187,X189) = s(X187,sK7(X189,X188,X187)) | s(bool,X186) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f20955,f179])).
fof(f20955,plain,(
  ( ! [X189,X187,X188,X186] : (p(s(bool,'F_0')) | s(bool,sK6('const.option.SOME_1'(s(bool,X186)),bool)) = s(bool,happ(s(fun(X187,bool),X188),s(X187,X189))) | s(X187,X189) = s(X187,sK7(X189,X188,X187)) | s(bool,X186) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f2790,f7724])).
fof(f21000,plain,(
  ( ! [X185,X182,X184,X183] : (s(bool,sK6('const.option.SOME_1'(s(bool,X182)),bool)) = s(bool,happ(s(fun(X183,bool),X184),s(X183,X185))) | s(X183,X185) = s(X183,sK7(X185,X184,X183)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X182)))) ) | $spl0),
  inference(subsumption_resolution,[],[f20954,f179])).
fof(f20954,plain,(
  ( ! [X185,X182,X184,X183] : (p(s(bool,'F_0')) | s(bool,sK6('const.option.SOME_1'(s(bool,X182)),bool)) = s(bool,happ(s(fun(X183,bool),X184),s(X183,X185))) | s(X183,X185) = s(X183,sK7(X185,X184,X183)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X182)))) ) | $spl0),
  inference(superposition,[],[f2790,f9094])).
fof(f20999,plain,(
  ( ! [X177,X180,X178,X176,X181,X179] : (s(bool,happ(s(fun(X176,bool),X177),s(X176,X178))) = s(bool,happ(s(fun(X179,bool),X180),s(X179,X181))) | s(X179,X181) = s(X179,sK7(X181,X180,X179)) | s(X176,X178) = s(X176,sK7(X178,X177,X176))) ) | $spl0),
  inference(subsumption_resolution,[],[f20953,f179])).
fof(f20953,plain,(
  ( ! [X177,X180,X178,X176,X181,X179] : (p(s(bool,'F_0')) | s(bool,happ(s(fun(X176,bool),X177),s(X176,X178))) = s(bool,happ(s(fun(X179,bool),X180),s(X179,X181))) | s(X179,X181) = s(X179,sK7(X181,X180,X179)) | s(X176,X178) = s(X176,sK7(X178,X177,X176))) ) | $spl0),
  inference(superposition,[],[f2790,f1756])).
fof(f20975,plain,(
  ( ! [X57,X54,X58,X56,X55] : (s(bool,X54) = s(bool,happ(s(fun(X55,bool),X56),s(X55,X57))) | s(X55,X57) = s(X55,sK7(X57,X56,X55)) | s(bool,X54) = s(bool,X58) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X58)),bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f20927,f179])).
fof(f20927,plain,(
  ( ! [X57,X54,X58,X56,X55] : (p(s(bool,'F_0')) | s(bool,X54) = s(bool,happ(s(fun(X55,bool),X56),s(X55,X57))) | s(X55,X57) = s(X55,sK7(X57,X56,X55)) | s(bool,X54) = s(bool,X58) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X58)),bool))) ) | $spl0),
  inference(superposition,[],[f2790,f1834])).
fof(f20640,plain,(
  ( ! [X146,X144,X142,X145,X143] : (s(bool,X146) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X142),X143),s(bool,X144),s(fun(X142,bool),X145))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X146))) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X142,bool),bool),happ(s(fun(bool,fun(fun(X142,bool),bool)),happ(s(fun('type.option.option'(X142),fun(bool,fun(fun(X142,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X142),X143))),s(bool,X144))),s(fun(X142,bool),X145)))) ) | $spl0),
  inference(superposition,[],[f1774,f169])).
fof(f20639,plain,(
  ( ! [X140,X138,X141,X139,X137] : (s(bool,X141) != s(bool,happ(s(fun(X137,bool),X140),s(X137,X138))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X141))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X137),'const.option.SOME_1'(s(X137,X138))),s(bool,X139),s(fun(X137,bool),X140)))) ) | $spl0),
  inference(superposition,[],[f1774,f168])).
fof(f20575,plain,(
  ( ! [X47,X48] : (s(bool,X48) = s(bool,sK7(X48,X47,bool)) | s(bool,'F_0') = s(bool,X48) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X47),s(bool,'T_0')))))) ) | $spl0),
  inference(subsumption_resolution,[],[f20574,f114])).
fof(f20574,plain,(
  ( ! [X47,X48] : (~p(s(bool,'T_0')) | s(bool,X48) = s(bool,sK7(X48,X47,bool)) | s(bool,'F_0') = s(bool,X48) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X47),s(bool,'T_0')))))) ) | $spl0),
  inference(forward_demodulation,[],[f20547,f901])).
fof(f20547,plain,(
  ( ! [X47,X48] : (~p(s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) | s(bool,X48) = s(bool,sK7(X48,X47,bool)) | s(bool,'F_0') = s(bool,X48) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X47),s(bool,'T_0')))))) ) | $spl0),
  inference(superposition,[],[f1761,f8984])).
fof(f20573,plain,(
  ( ! [X45,X46] : (s(bool,X46) = s(bool,sK7(X46,X45,bool)) | s(bool,'F_0') = s(bool,X46) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X45),s(bool,'T_0')))),bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f20572,f114])).
fof(f20572,plain,(
  ( ! [X45,X46] : (~p(s(bool,'T_0')) | s(bool,X46) = s(bool,sK7(X46,X45,bool)) | s(bool,'F_0') = s(bool,X46) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X45),s(bool,'T_0')))),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f20546,f901])).
fof(f20546,plain,(
  ( ! [X45,X46] : (~p(s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) | s(bool,X46) = s(bool,sK7(X46,X45,bool)) | s(bool,'F_0') = s(bool,X46) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X45),s(bool,'T_0')))),bool))) ) | $spl0),
  inference(superposition,[],[f1761,f7724])).
fof(f20563,plain,(
  ( ! [X6,X4,X5] : (s(bool,X5) = s(bool,sK7(X5,X4,bool)) | s(bool,'F_0') = s(bool,X5) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X4),s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X6)) ) | $spl0),
  inference(subsumption_resolution,[],[f20531,f114])).
fof(f20531,plain,(
  ( ! [X6,X4,X5] : (~p(s(bool,'T_0')) | s(bool,X5) = s(bool,sK7(X5,X4,bool)) | s(bool,'F_0') = s(bool,X5) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X4),s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X6)) ) | $spl0),
  inference(superposition,[],[f1761,f208])).
fof(f20558,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X3) | ~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,X0)))) | s(bool,X2) = s(bool,sK7(X2,X1,bool)) | s(bool,'F_0') = s(bool,X2) | s(bool,X0) = s(bool,X3)) ) | $spl0),
  inference(forward_demodulation,[],[f20513,f901])).
fof(f20513,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,X0)))) | s(bool,X2) = s(bool,sK7(X2,X1,bool)) | s(bool,'F_0') = s(bool,X2) | s(bool,X3) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X0) = s(bool,X3)) ) | $spl0),
  inference(superposition,[],[f1761,f9397])).
fof(f20512,plain,(
  ( ! [X14,X15] : (~p(s(bool,happ(s(fun(bool,bool),X14),s(bool,'T_0')))) | s(bool,X15) = s(bool,sK7(X15,sK6('const.option.SOME_1'(s(fun(bool,bool),X14)),fun(bool,bool)),bool)) | s(bool,'F_0') = s(bool,X15)) ) | $spl0),
  inference(superposition,[],[f1761,f901])).
fof(f20511,plain,(
  ( ! [X12,X10,X13,X11,X9] : (~p(s(bool,happ(s(fun(bool,bool),'const.option.option_CASE_3'(s('type.option.option'(X9),X10),s(fun(bool,bool),X11),s(fun(X9,fun(bool,bool)),X12))),s(bool,'T_0')))) | s(bool,X13) = s(bool,sK7(X13,happ(s(fun(fun(X9,fun(bool,bool)),fun(bool,bool)),happ(s(fun(fun(bool,bool),fun(fun(X9,fun(bool,bool)),fun(bool,bool))),happ(s(fun('type.option.option'(X9),fun(fun(bool,bool),fun(fun(X9,fun(bool,bool)),fun(bool,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X9),X10))),s(fun(bool,bool),X11))),s(fun(X9,fun(bool,bool)),X12)),bool)) | s(bool,'F_0') = s(bool,X13)) ) | $spl0),
  inference(superposition,[],[f1761,f169])).
fof(f20510,plain,(
  ( ! [X6,X4,X8,X7,X5] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(X4,fun(bool,bool)),X7),s(X4,X5))),s(bool,'T_0')))) | s(bool,X8) = s(bool,sK7(X8,'const.option.option_CASE_3'(s('type.option.option'(X4),'const.option.SOME_1'(s(X4,X5))),s(fun(bool,bool),X6),s(fun(X4,fun(bool,bool)),X7)),bool)) | s(bool,'F_0') = s(bool,X8)) ) | $spl0),
  inference(superposition,[],[f1761,f168])).
fof(f20509,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,'T_0')))) | s(bool,X3) = s(bool,sK7(X3,'const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(fun(bool,bool),X1),s(fun(X0,fun(bool,bool)),X2)),bool)) | s(bool,'F_0') = s(bool,X3)) ) | $spl0),
  inference(superposition,[],[f1761,f166])).
fof(f20348,plain,(
  ( ! [X152,X151] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X151))) | s(bool,X152) = s(bool,sK6('const.option.SOME_1'(s(bool,X151)),bool)) | s(bool,'F_0') = s(bool,X152)) ) | $spl0),
  inference(superposition,[],[f1758,f901])).
fof(f20347,plain,(
  ( ! [X146,X149,X147,X150,X148] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X146),X147),s(bool,X148),s(fun(X146,bool),X149))))) | s(bool,X150) = s(bool,happ(s(fun(fun(X146,bool),bool),happ(s(fun(bool,fun(fun(X146,bool),bool)),happ(s(fun('type.option.option'(X146),fun(bool,fun(fun(X146,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X146),X147))),s(bool,X148))),s(fun(X146,bool),X149))) | s(bool,'F_0') = s(bool,X150)) ) | $spl0),
  inference(superposition,[],[f1758,f169])).
fof(f20346,plain,(
  ( ! [X144,X142,X145,X143,X141] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X141,bool),X144),s(X141,X142))))) | s(bool,X145) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X141),'const.option.SOME_1'(s(X141,X142))),s(bool,X143),s(fun(X141,bool),X144))) | s(bool,'F_0') = s(bool,X145)) ) | $spl0),
  inference(superposition,[],[f1758,f168])).
fof(f20345,plain,(
  ( ! [X140,X138,X139,X137] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X138))) | s(bool,X140) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X137),'const.option.NONE_0'),s(bool,X138),s(fun(X137,bool),X139))) | s(bool,'F_0') = s(bool,X140)) ) | $spl0),
  inference(superposition,[],[f1758,f166])).
fof(f20275,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1))) | s(bool,X1) = s(bool,X2) | s(bool,'F_0') = s(bool,X2) | s(bool,X3) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X0) = s(bool,X3)) ) | $spl0),
  inference(superposition,[],[f1758,f9397])).
fof(f20219,plain,(
  ( ! [X103,X101,X102,X100] : (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X100),X101),s(bool,X102),s(fun(X100,bool),X103)))) | s(fun(X100,bool),sK7(X103,happ(s(fun(bool,fun(fun(X100,bool),bool)),happ(s(fun('type.option.option'(X100),fun(bool,fun(fun(X100,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X100),X101))),s(bool,X102)),fun(X100,bool))) = s(fun(X100,bool),sK7(sK7(X103,happ(s(fun(bool,fun(fun(X100,bool),bool)),happ(s(fun('type.option.option'(X100),fun(bool,fun(fun(X100,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X100),X101))),s(bool,X102)),fun(X100,bool)),happ(s(fun(bool,fun(fun(X100,bool),bool)),happ(s(fun('type.option.option'(X100),fun(bool,fun(fun(X100,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X100),X101))),s(bool,X102)),fun(X100,bool)))) ) | $spl0),
  inference(superposition,[],[f2788,f169])).
fof(f20265,plain,(
  ( ! [X66,X67,X65] : (s(X65,sK7(X67,X66,X65)) = s(X65,sK7(sK7(X67,X66,X65),X66,X65)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X65,bool),X66),s(X65,X67)))))) ) | $spl0),
  inference(subsumption_resolution,[],[f20264,f114])).
fof(f20264,plain,(
  ( ! [X66,X67,X65] : (~p(s(bool,'T_0')) | s(X65,sK7(X67,X66,X65)) = s(X65,sK7(sK7(X67,X66,X65),X66,X65)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X65,bool),X66),s(X65,X67)))))) ) | $spl0),
  inference(forward_demodulation,[],[f20210,f901])).
fof(f20210,plain,(
  ( ! [X66,X67,X65] : (~p(s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) | s(X65,sK7(X67,X66,X65)) = s(X65,sK7(sK7(X67,X66,X65),X66,X65)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X65,bool),X66),s(X65,X67)))))) ) | $spl0),
  inference(superposition,[],[f2788,f8984])).
fof(f20263,plain,(
  ( ! [X64,X62,X63] : (s(X62,sK7(X64,X63,X62)) = s(X62,sK7(sK7(X64,X63,X62),X63,X62)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X62,bool),X63),s(X62,X64)))),bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f20262,f114])).
fof(f20262,plain,(
  ( ! [X64,X62,X63] : (~p(s(bool,'T_0')) | s(X62,sK7(X64,X63,X62)) = s(X62,sK7(sK7(X64,X63,X62),X63,X62)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X62,bool),X63),s(X62,X64)))),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f20209,f901])).
fof(f20209,plain,(
  ( ! [X64,X62,X63] : (~p(s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) | s(X62,sK7(X64,X63,X62)) = s(X62,sK7(sK7(X64,X63,X62),X63,X62)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X62,bool),X63),s(X62,X64)))),bool))) ) | $spl0),
  inference(superposition,[],[f2788,f7724])).
fof(f20258,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))) | s(X0,sK7(X2,X1,X0)) = s(X0,sK7(sK7(X2,X1,X0),X1,X0))) ) | $spl0),
  inference(condensation,[],[f20257])).
fof(f20257,plain,(
  ( ! [X45,X43,X44,X42] : (s(bool,'F_0') = s(bool,X45) | s(X42,sK7(X44,X43,X42)) = s(X42,sK7(sK7(X44,X43,X42),X43,X42)) | s(bool,'F_0') = s(bool,happ(s(fun(X42,bool),X43),s(X42,X44)))) ) | $spl0),
  inference(subsumption_resolution,[],[f20256,f128])).
fof(f20256,plain,(
  ( ! [X45,X43,X44,X42] : (s(bool,'F_0') = s(bool,X45) | ~p(s(bool,X45)) | s(X42,sK7(X44,X43,X42)) = s(X42,sK7(sK7(X44,X43,X42),X43,X42)) | s(bool,'F_0') = s(bool,happ(s(fun(X42,bool),X43),s(X42,X44)))) ) | $spl0),
  inference(forward_demodulation,[],[f20203,f901])).
fof(f20203,plain,(
  ( ! [X45,X43,X44,X42] : (~p(s(bool,X45)) | s(X42,sK7(X44,X43,X42)) = s(X42,sK7(sK7(X44,X43,X42),X43,X42)) | s(bool,'F_0') = s(bool,happ(s(fun(X42,bool),X43),s(X42,X44))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X45)),bool))) ) | $spl0),
  inference(superposition,[],[f2788,f1834])).
fof(f20250,plain,(
  ( ! [X6,X8,X7,X9] : (s(X6,sK7(X8,X7,X6)) = s(X6,sK7(sK7(X8,X7,X6),X7,X6)) | s(bool,X9) = s(bool,happ(s(fun(X6,bool),X7),s(X6,X8))) | s(bool,'T_0') = s(bool,X9)) ) | $spl0),
  inference(subsumption_resolution,[],[f20194,f114])).
fof(f20194,plain,(
  ( ! [X6,X8,X7,X9] : (~p(s(bool,'T_0')) | s(X6,sK7(X8,X7,X6)) = s(X6,sK7(sK7(X8,X7,X6),X7,X6)) | s(bool,X9) = s(bool,happ(s(fun(X6,bool),X7),s(X6,X8))) | s(bool,'T_0') = s(bool,X9)) ) | $spl0),
  inference(superposition,[],[f2788,f208])).
fof(f20191,plain,(
  ( ! [X171,X170] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X171),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))) | s('type.option.option'(bool),sK7(X170,X171,'type.option.option'(bool))) = s('type.option.option'(bool),sK7(sK7(X170,X171,'type.option.option'(bool)),X171,'type.option.option'(bool))) | s(bool,'T_0') = s(bool,sK6(X170,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X170)) ) | $spl0),
  inference(superposition,[],[f2788,f458])).
fof(f20190,plain,(
  ( ! [X167,X169,X168] : (~p(s(bool,happ(s(fun('type.option.option'(X167),bool),X169),s('type.option.option'(X167),X168)))) | s('type.option.option'(X167),sK7('const.option.SOME_1'(s(X167,sK6(X168,X167))),X169,'type.option.option'(X167))) = s('type.option.option'(X167),sK7(sK7('const.option.SOME_1'(s(X167,sK6(X168,X167))),X169,'type.option.option'(X167)),X169,'type.option.option'(X167))) | s('type.option.option'(X167),'const.option.NONE_0') = s('type.option.option'(X167),X168)) ) | $spl0),
  inference(superposition,[],[f2788,f148])).
fof(f20249,plain,(
  ( ! [X165,X166] : (s(bool,'T_0') = s(bool,X165) | ~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X166),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X165)))))) | s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'F_0')),X166,'type.option.option'(bool))) = s('type.option.option'(bool),sK7(sK7('const.option.SOME_1'(s(bool,'F_0')),X166,'type.option.option'(bool)),X166,'type.option.option'(bool)))) ) | $spl0),
  inference(forward_demodulation,[],[f20189,f901])).
fof(f20189,plain,(
  ( ! [X165,X166] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X166),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X165)))))) | s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'F_0')),X166,'type.option.option'(bool))) = s('type.option.option'(bool),sK7(sK7('const.option.SOME_1'(s(bool,'F_0')),X166,'type.option.option'(bool)),X166,'type.option.option'(bool))) | s(bool,X165) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f2788,f8984])).
fof(f20188,plain,(
  ( ! [X163,X164] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X164),s('type.option.option'(bool),X163)))) | s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'F_0')),X164,'type.option.option'(bool))) = s('type.option.option'(bool),sK7(sK7('const.option.SOME_1'(s(bool,'F_0')),X164,'type.option.option'(bool)),X164,'type.option.option'(bool))) | s(bool,'T_0') = s(bool,sK6(X163,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X163)) ) | $spl0),
  inference(superposition,[],[f2788,f458])).
fof(f20246,plain,(
  ( ! [X158,X157] : (s(bool,'T_0') = s(bool,X157) | ~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X158),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))) | s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,X157)),X158,'type.option.option'(bool))) = s('type.option.option'(bool),sK7(sK7('const.option.SOME_1'(s(bool,X157)),X158,'type.option.option'(bool)),X158,'type.option.option'(bool)))) ) | $spl0),
  inference(forward_demodulation,[],[f20185,f901])).
fof(f20185,plain,(
  ( ! [X158,X157] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X158),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))) | s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,X157)),X158,'type.option.option'(bool))) = s('type.option.option'(bool),sK7(sK7('const.option.SOME_1'(s(bool,X157)),X158,'type.option.option'(bool)),X158,'type.option.option'(bool))) | s(bool,X157) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f2788,f8984])).
fof(f20184,plain,(
  ( ! [X156,X155] : (~p(s(bool,happ(s(fun(bool,bool),X156),s(bool,'T_0')))) | s(bool,sK7(sK6(X155,bool),X156,bool)) = s(bool,sK7(sK7(sK6(X155,bool),X156,bool),X156,bool)) | s('type.option.option'(bool),X155) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X155)) ) | $spl0),
  inference(superposition,[],[f2788,f458])).
fof(f20245,plain,(
  ( ! [X152,X151] : (s(bool,'F_0') = s(bool,X151) | ~p(s(bool,happ(s(fun(bool,bool),X152),s(bool,X151)))) | s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X152,bool)) = s(bool,sK7(sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X152,bool),X152,bool))) ) | $spl0),
  inference(forward_demodulation,[],[f20182,f901])).
fof(f20182,plain,(
  ( ! [X152,X151] : (~p(s(bool,happ(s(fun(bool,bool),X152),s(bool,X151)))) | s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X152,bool)) = s(bool,sK7(sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X152,bool),X152,bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X151)),bool))) ) | $spl0),
  inference(superposition,[],[f2788,f7724])).
fof(f20181,plain,(
  ( ! [X149,X150,X148] : (~p(s(bool,happ(s(fun(bool,bool),X149),s(bool,X148)))) | s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X149,bool)) = s(bool,sK7(sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X149,bool),X149,bool)) | s(bool,X148) = s(bool,X150) | s(bool,'T_0') = s(bool,X150)) ) | $spl0),
  inference(superposition,[],[f2788,f9397])).
fof(f20180,plain,(
  ( ! [X146,X147] : (~p(s(bool,happ(s(fun(bool,bool),X147),s(bool,X146)))) | s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X147,bool)) = s(bool,sK7(sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X147,bool),X147,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X146)))) ) | $spl0),
  inference(superposition,[],[f2788,f8984])).
fof(f20173,plain,(
  ( ! [X132,X130,X131] : (~p(s(bool,happ(s(fun(bool,bool),X131),s(bool,'F_0')))) | s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X130)),bool),X131,bool)) = s(bool,sK7(sK7(sK6('const.option.SOME_1'(s(bool,X130)),bool),X131,bool),X131,bool)) | s(bool,X130) = s(bool,X132) | s(bool,'F_0') = s(bool,X132)) ) | $spl0),
  inference(superposition,[],[f2788,f1834])).
fof(f20242,plain,(
  ( ! [X128,X129] : (s(bool,'T_0') = s(bool,X128) | ~p(s(bool,happ(s(fun(bool,bool),X129),s(bool,'F_0')))) | s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X128)),bool),X129,bool)) = s(bool,sK7(sK7(sK6('const.option.SOME_1'(s(bool,X128)),bool),X129,bool),X129,bool))) ) | $spl0),
  inference(forward_demodulation,[],[f20172,f901])).
fof(f20172,plain,(
  ( ! [X128,X129] : (~p(s(bool,happ(s(fun(bool,bool),X129),s(bool,'F_0')))) | s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X128)),bool),X129,bool)) = s(bool,sK7(sK7(sK6('const.option.SOME_1'(s(bool,X128)),bool),X129,bool),X129,bool)) | s(bool,X128) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f2788,f7724])).
fof(f20171,plain,(
  ( ! [X127,X126] : (~p(s(bool,happ(s(fun(bool,bool),X127),s(bool,'F_0')))) | s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X126)),bool),X127,bool)) = s(bool,sK7(sK7(sK6('const.option.SOME_1'(s(bool,X126)),bool),X127,bool),X127,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X126)))) ) | $spl0),
  inference(superposition,[],[f2788,f9094])).
fof(f20170,plain,(
  ( ! [X125,X123,X124,X122] : (~p(s(bool,happ(s(fun(bool,bool),X125),s(bool,'F_0')))) | s(bool,sK7(happ(s(fun(X122,bool),X123),s(X122,X124)),X125,bool)) = s(bool,sK7(sK7(happ(s(fun(X122,bool),X123),s(X122,X124)),X125,bool),X125,bool)) | s(X122,X124) = s(X122,sK7(X124,X123,X122))) ) | $spl0),
  inference(superposition,[],[f2788,f1756])).
fof(f20169,plain,(
  ( ! [X121,X120,X119] : (~p(s(bool,happ(s(fun(bool,bool),X121),s(bool,'F_0')))) | s(bool,sK7('const.bool.IN_2'(s(X119,X120),s(fun(X119,bool),'const.pred_set.EMPTY_0')),X121,bool)) = s(bool,sK7(sK7('const.bool.IN_2'(s(X119,X120),s(fun(X119,bool),'const.pred_set.EMPTY_0')),X121,bool),X121,bool))) ) | $spl0),
  inference(superposition,[],[f2788,f191])).
fof(f20168,plain,(
  ( ! [X118] : (~p(s(bool,happ(s(fun(bool,bool),X118),s(bool,'T_0')))) | s(bool,sK7('const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3)))),X118,bool)) = s(bool,sK7(sK7('const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3)))),X118,bool),X118,bool))) ) | $spl0),
  inference(superposition,[],[f2788,f689])).
fof(f20167,plain,(
  ( ! [X116,X114,X117,X115] : (~p(s(bool,happ(s(fun(bool,bool),X117),s(bool,'T_0')))) | s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X114),'const.option.NONE_0'),s(bool,X115),s(fun(X114,bool),X116)),X117,bool)) = s(bool,sK7(sK7('const.option.option_CASE_3'(s('type.option.option'(X114),'const.option.NONE_0'),s(bool,X115),s(fun(X114,bool),X116)),X117,bool),X117,bool)) | s(bool,'F_0') = s(bool,X115)) ) | $spl0),
  inference(superposition,[],[f2788,f298])).
fof(f20166,plain,(
  ( ! [X112,X113] : (~p(s(bool,happ(s(fun(bool,bool),X113),s(bool,X112)))) | s(bool,sK7('F_0',X113,bool)) = s(bool,sK7(sK7('F_0',X113,bool),X113,bool)) | s(bool,'T_0') = s(bool,X112)) ) | $spl0),
  inference(superposition,[],[f2788,f121])).
fof(f20239,plain,(
  ( ! [X92,X93,X91] : (s(bool,'T_0') = s(bool,X93) | ~p(s(bool,happ(s(fun(bool,bool),X92),s(bool,X91)))) | s(bool,sK7('T_0',X92,bool)) = s(bool,sK7(sK7('T_0',X92,bool),X92,bool)) | s(bool,X91) = s(bool,X93)) ) | $spl0),
  inference(forward_demodulation,[],[f20159,f901])).
fof(f20159,plain,(
  ( ! [X92,X93,X91] : (~p(s(bool,happ(s(fun(bool,bool),X92),s(bool,X91)))) | s(bool,sK7('T_0',X92,bool)) = s(bool,sK7(sK7('T_0',X92,bool),X92,bool)) | s(bool,X93) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X91) = s(bool,X93)) ) | $spl0),
  inference(superposition,[],[f2788,f9397])).
fof(f20230,plain,(
  ( ! [X66,X65] : (~p(s(bool,happ(s(fun(bool,bool),X66),s(bool,'T_0')))) | s(bool,sK7(X65,X66,bool)) = s(bool,sK7(sK7(X65,X66,bool),X66,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X65)))) ) | $spl0),
  inference(forward_demodulation,[],[f20150,f901])).
fof(f20150,plain,(
  ( ! [X66,X65] : (~p(s(bool,happ(s(fun(bool,bool),X66),s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))))) | s(bool,sK7(X65,X66,bool)) = s(bool,sK7(sK7(X65,X66,bool),X66,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X65)))) ) | $spl0),
  inference(superposition,[],[f2788,f8984])).
fof(f20227,plain,(
  ( ! [X61,X62] : (~p(s(bool,happ(s(fun(bool,bool),X62),s(bool,'T_0')))) | s(bool,sK7(X61,X62,bool)) = s(bool,sK7(sK7(X61,X62,bool),X62,bool)) | s(bool,'F_0') = s(bool,X61)) ) | $spl0),
  inference(forward_demodulation,[],[f20148,f901])).
fof(f20148,plain,(
  ( ! [X61,X62] : (~p(s(bool,happ(s(fun(bool,bool),X62),s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))))) | s(bool,sK7(X61,X62,bool)) = s(bool,sK7(sK7(X61,X62,bool),X62,bool)) | s(bool,'F_0') = s(bool,X61)) ) | $spl0),
  inference(superposition,[],[f2788,f7478])).
fof(f20139,plain,(
  ( ! [X39,X37,X38] : (~p(s(bool,happ(s(fun(bool,bool),X39),s(bool,X38)))) | s(bool,sK7(X37,X39,bool)) = s(bool,sK7(sK7(X37,X39,bool),X39,bool)) | s(bool,'F_0') = s(bool,X38) | s(bool,'F_0') = s(bool,X37)) ) | $spl0),
  inference(superposition,[],[f2788,f1632])).
fof(f20138,plain,(
  ( ! [X35,X36,X34] : (~p(s(bool,happ(s(fun(bool,bool),X35),s(bool,'F_0')))) | s(bool,sK7(X34,X35,bool)) = s(bool,sK7(sK7(X34,X35,bool),X35,bool)) | s(bool,X34) = s(bool,X36) | s(bool,'F_0') = s(bool,X36)) ) | $spl0),
  inference(superposition,[],[f2788,f1632])).
fof(f20135,plain,(
  ( ! [X26,X27,X25] : (~p(s(bool,happ(s(fun(bool,bool),X27),s(bool,X26)))) | s(bool,sK7(X25,X27,bool)) = s(bool,sK7(sK7(X25,X27,bool),X27,bool)) | s(bool,'T_0') = s(bool,X26) | s(bool,'T_0') = s(bool,X25)) ) | $spl0),
  inference(superposition,[],[f2788,f208])).
fof(f20134,plain,(
  ( ! [X24,X23,X22] : (~p(s(bool,happ(s(fun(bool,bool),X23),s(bool,'T_0')))) | s(bool,sK7(X22,X23,bool)) = s(bool,sK7(sK7(X22,X23,bool),X23,bool)) | s(bool,X22) = s(bool,X24) | s(bool,'T_0') = s(bool,X24)) ) | $spl0),
  inference(superposition,[],[f2788,f208])).
fof(f20133,plain,(
  ( ! [X21,X20] : (~p(s(bool,happ(s(fun(bool,bool),X21),s(bool,'F_0')))) | s(bool,sK7(X20,X21,bool)) = s(bool,sK7(sK7(X20,X21,bool),X21,bool)) | s(bool,'T_0') = s(bool,X20)) ) | $spl0),
  inference(superposition,[],[f2788,f121])).
fof(f20132,plain,(
  ( ! [X19,X17,X18] : (~p(s(bool,happ(s(fun(X17,bool),X19),s(X17,X18)))) | s(X17,sK7(sK6('const.option.SOME_1'(s(X17,X18)),X17),X19,X17)) = s(X17,sK7(sK7(sK6('const.option.SOME_1'(s(X17,X18)),X17),X19,X17),X19,X17))) ) | $spl0),
  inference(superposition,[],[f2788,f901])).
fof(f20131,plain,(
  ( ! [X14,X12,X15,X13,X11,X16] : (~p(s(bool,happ(s(fun(X11,bool),X16),s(X11,'const.option.option_CASE_3'(s('type.option.option'(X12),X13),s(X11,X14),s(fun(X12,X11),X15)))))) | s(X11,sK7(happ(s(fun(fun(X12,X11),X11),happ(s(fun(X11,fun(fun(X12,X11),X11)),happ(s(fun('type.option.option'(X12),fun(X11,fun(fun(X12,X11),X11))),'const.option.option_CASE_0'),s('type.option.option'(X12),X13))),s(X11,X14))),s(fun(X12,X11),X15)),X16,X11)) = s(X11,sK7(sK7(happ(s(fun(fun(X12,X11),X11),happ(s(fun(X11,fun(fun(X12,X11),X11)),happ(s(fun('type.option.option'(X12),fun(X11,fun(fun(X12,X11),X11))),'const.option.option_CASE_0'),s('type.option.option'(X12),X13))),s(X11,X14))),s(fun(X12,X11),X15)),X16,X11),X16,X11))) ) | $spl0),
  inference(superposition,[],[f2788,f169])).
fof(f20130,plain,(
  ( ! [X6,X10,X8,X7,X5,X9] : (~p(s(bool,happ(s(fun(X5,bool),X10),s(X5,happ(s(fun(X6,X5),X9),s(X6,X7)))))) | s(X5,sK7('const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(X5,X8),s(fun(X6,X5),X9)),X10,X5)) = s(X5,sK7(sK7('const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(X5,X8),s(fun(X6,X5),X9)),X10,X5),X10,X5))) ) | $spl0),
  inference(superposition,[],[f2788,f168])).
fof(f20129,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(X0,bool),X4),s(X0,X2)))) | s(X0,sK7('const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(X0,X2),s(fun(X1,X0),X3)),X4,X0)) = s(X0,sK7(sK7('const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(X0,X2),s(fun(X1,X0),X3)),X4,X0),X4,X0))) ) | $spl0),
  inference(superposition,[],[f2788,f166])).
fof(f20128,plain,(
  ( ! [X19,X17,X18] : (~p(s(bool,happ(s(fun(X17,bool),X18),s(X17,X19)))) | s(X17,sK7(X19,sK6('const.option.SOME_1'(s(fun(X17,bool),X18)),fun(X17,bool)),X17)) = s(X17,sK7(sK7(X19,sK6('const.option.SOME_1'(s(fun(X17,bool),X18)),fun(X17,bool)),X17),sK6('const.option.SOME_1'(s(fun(X17,bool),X18)),fun(X17,bool)),X17))) ) | $spl0),
  inference(superposition,[],[f2788,f901])).
fof(f20127,plain,(
  ( ! [X14,X12,X15,X13,X11,X16] : (~p(s(bool,happ(s(fun(X11,bool),'const.option.option_CASE_3'(s('type.option.option'(X12),X13),s(fun(X11,bool),X14),s(fun(X12,fun(X11,bool)),X15))),s(X11,X16)))) | s(X11,sK7(X16,happ(s(fun(fun(X12,fun(X11,bool)),fun(X11,bool)),happ(s(fun(fun(X11,bool),fun(fun(X12,fun(X11,bool)),fun(X11,bool))),happ(s(fun('type.option.option'(X12),fun(fun(X11,bool),fun(fun(X12,fun(X11,bool)),fun(X11,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X12),X13))),s(fun(X11,bool),X14))),s(fun(X12,fun(X11,bool)),X15)),X11)) = s(X11,sK7(sK7(X16,happ(s(fun(fun(X12,fun(X11,bool)),fun(X11,bool)),happ(s(fun(fun(X11,bool),fun(fun(X12,fun(X11,bool)),fun(X11,bool))),happ(s(fun('type.option.option'(X12),fun(fun(X11,bool),fun(fun(X12,fun(X11,bool)),fun(X11,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X12),X13))),s(fun(X11,bool),X14))),s(fun(X12,fun(X11,bool)),X15)),X11),happ(s(fun(fun(X12,fun(X11,bool)),fun(X11,bool)),happ(s(fun(fun(X11,bool),fun(fun(X12,fun(X11,bool)),fun(X11,bool))),happ(s(fun('type.option.option'(X12),fun(fun(X11,bool),fun(fun(X12,fun(X11,bool)),fun(X11,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X12),X13))),s(fun(X11,bool),X14))),s(fun(X12,fun(X11,bool)),X15)),X11))) ) | $spl0),
  inference(superposition,[],[f2788,f169])).
fof(f20126,plain,(
  ( ! [X6,X10,X8,X7,X5,X9] : (~p(s(bool,happ(s(fun(X5,bool),happ(s(fun(X6,fun(X5,bool)),X9),s(X6,X7))),s(X5,X10)))) | s(X5,sK7(X10,'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(fun(X5,bool),X8),s(fun(X6,fun(X5,bool)),X9)),X5)) = s(X5,sK7(sK7(X10,'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(fun(X5,bool),X8),s(fun(X6,fun(X5,bool)),X9)),X5),'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(fun(X5,bool),X8),s(fun(X6,fun(X5,bool)),X9)),X5))) ) | $spl0),
  inference(superposition,[],[f2788,f168])).
fof(f20125,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) | s(X0,sK7(X4,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(fun(X0,bool),X2),s(fun(X1,fun(X0,bool)),X3)),X0)) = s(X0,sK7(sK7(X4,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(fun(X0,bool),X2),s(fun(X1,fun(X0,bool)),X3)),X0),'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(fun(X0,bool),X2),s(fun(X1,fun(X0,bool)),X3)),X0))) ) | $spl0),
  inference(superposition,[],[f2788,f166])).
fof(f19838,plain,(
  ( ! [X191,X196,X194,X192,X195,X193] : (s(bool,X195) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X191),X192),s(bool,X193),s(fun(X191,bool),X194))) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X191,bool),bool),happ(s(fun(bool,fun(fun(X191,bool),bool)),happ(s(fun('type.option.option'(X191),fun(bool,fun(fun(X191,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X191),X192))),s(bool,X193))),s(fun(X191,bool),X194))) | s(bool,X195) = s(bool,X196) | s(bool,'F_0') = s(bool,X196)) ) | $spl0),
  inference(superposition,[],[f2517,f169])).
fof(f19837,plain,(
  ( ! [X189,X187,X185,X190,X188,X186] : (s(bool,X189) != s(bool,happ(s(fun(X185,bool),X188),s(X185,X186))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X185),'const.option.SOME_1'(s(X185,X186))),s(bool,X187),s(fun(X185,bool),X188))) | s(bool,X189) = s(bool,X190) | s(bool,'F_0') = s(bool,X190)) ) | $spl0),
  inference(superposition,[],[f2517,f168])).
fof(f19782,plain,(
  ( ! [X204,X202,X200,X205,X203,X201] : (s(bool,X204) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X200),X201),s(bool,X202),s(fun(X200,bool),X203))) | s(bool,'F_0') = s(bool,X204) | s(bool,X205) = s(bool,happ(s(fun(fun(X200,bool),bool),happ(s(fun(bool,fun(fun(X200,bool),bool)),happ(s(fun('type.option.option'(X200),fun(bool,fun(fun(X200,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X200),X201))),s(bool,X202))),s(fun(X200,bool),X203))) | s(bool,'F_0') = s(bool,X205)) ) | $spl0),
  inference(superposition,[],[f2517,f169])).
fof(f19781,plain,(
  ( ! [X198,X196,X194,X199,X197,X195] : (s(bool,X198) != s(bool,happ(s(fun(X194,bool),X197),s(X194,X195))) | s(bool,'F_0') = s(bool,X198) | s(bool,X199) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X194),'const.option.SOME_1'(s(X194,X195))),s(bool,X196),s(fun(X194,bool),X197))) | s(bool,'F_0') = s(bool,X199)) ) | $spl0),
  inference(superposition,[],[f2517,f168])).
fof(f17262,plain,(
  ( ! [X80,X78,X79,X77] : (s(bool,'T_0') = s(bool,happ(s(fun(fun(X77,bool),bool),happ(s(fun(bool,fun(fun(X77,bool),bool)),happ(s(fun('type.option.option'(X77),fun(bool,fun(fun(X77,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X77),X78))),s(bool,X79))),s(fun(X77,bool),X80))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X77),X78),s(bool,X79),s(fun(X77,bool),X80)))))) ) | $spl0),
  inference(forward_demodulation,[],[f16817,f901])).
fof(f16817,plain,(
  ( ! [X80,X78,X79,X77] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X77),X78),s(bool,X79),s(fun(X77,bool),X80))))) | s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) = s(bool,happ(s(fun(fun(X77,bool),bool),happ(s(fun(bool,fun(fun(X77,bool),bool)),happ(s(fun('type.option.option'(X77),fun(bool,fun(fun(X77,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X77),X78))),s(bool,X79))),s(fun(X77,bool),X80)))) ) | $spl0),
  inference(superposition,[],[f8984,f169])).
fof(f2819,plain,(
  ( ! [X68,X66,X69,X67,X65] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X69))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X65),X66),s(bool,X67),s(fun(X65,bool),X68))))) | s(bool,'F_0') = s(bool,X69) | s(bool,'T_0') = s(bool,happ(s(fun(fun(X65,bool),bool),happ(s(fun(bool,fun(fun(X65,bool),bool)),happ(s(fun('type.option.option'(X65),fun(bool,fun(fun(X65,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X65),X66))),s(bool,X67))),s(fun(X65,bool),X68)))) )),
  inference(superposition,[],[f361,f169])).
fof(f2845,plain,(
  ( ! [X68,X66,X69,X67,X65] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X69))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X65),X66),s(bool,X67),s(fun(X65,bool),X68))))) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X65,bool),bool),happ(s(fun(bool,fun(fun(X65,bool),bool)),happ(s(fun('type.option.option'(X65),fun(bool,fun(fun(X65,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X65),X66))),s(bool,X67))),s(fun(X65,bool),X68))) | s(bool,'T_0') = s(bool,X69)) )),
  inference(superposition,[],[f361,f169])).
fof(f3017,plain,(
  ( ! [X66,X64,X67,X65,X63] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X63),X64),s(bool,X65),s(fun(X63,bool),X66))))) | s(bool,X67) = s(bool,happ(s(fun(fun(X63,bool),bool),happ(s(fun(bool,fun(fun(X63,bool),bool)),happ(s(fun('type.option.option'(X63),fun(bool,fun(fun(X63,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X63),X64))),s(bool,X65))),s(fun(X63,bool),X66))) | s(bool,'T_0') = s(bool,X67)) )),
  inference(superposition,[],[f362,f169])).
fof(f2766,plain,(
  ( ! [X177,X175,X173,X176,X174] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X176),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X173,bool),X174),s(X173,X175))))),s(bool,X177),s(fun(bool,bool),X176))) | s(X173,X175) = s(X173,sK7(X175,X174,X173))) ) | $spl0),
  inference(superposition,[],[f806,f1756])).
fof(f2818,plain,(
  ( ! [X61,X64,X62,X60,X63] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X64))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X60,bool),X63),s(X60,X61))))) | s(bool,'F_0') = s(bool,X64) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X60),'const.option.SOME_1'(s(X60,X61))),s(bool,X62),s(fun(X60,bool),X63)))) )),
  inference(superposition,[],[f361,f168])).
fof(f2844,plain,(
  ( ! [X61,X64,X62,X60,X63] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X64))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X60,bool),X63),s(X60,X61))))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X60),'const.option.SOME_1'(s(X60,X61))),s(bool,X62),s(fun(X60,bool),X63))) | s(bool,'T_0') = s(bool,X64)) )),
  inference(superposition,[],[f361,f168])).
fof(f3016,plain,(
  ( ! [X61,X59,X62,X60,X58] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X58,bool),X61),s(X58,X59))))) | s(bool,X62) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X58),'const.option.SOME_1'(s(X58,X59))),s(bool,X60),s(fun(X58,bool),X61))) | s(bool,'T_0') = s(bool,X62)) )),
  inference(superposition,[],[f362,f168])).
fof(f17261,plain,(
  ( ! [X76,X74,X75,X73] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X73),'const.option.SOME_1'(s(X73,X74))),s(bool,X75),s(fun(X73,bool),X76))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X73,bool),X76),s(X73,X74)))))) ) | $spl0),
  inference(forward_demodulation,[],[f16816,f901])).
fof(f16816,plain,(
  ( ! [X76,X74,X75,X73] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X73,bool),X76),s(X73,X74))))) | s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X73),'const.option.SOME_1'(s(X73,X74))),s(bool,X75),s(fun(X73,bool),X76)))) ) | $spl0),
  inference(superposition,[],[f8984,f168])).
fof(f17406,plain,(
  ( ! [X167,X169,X166,X168] : (p(s(bool,happ(s(fun(X166,bool),X167),s(X166,X169)))) | s(X166,X168) != s(X166,X169) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X166,bool),X167),s(X166,X168)))))) ) | $spl0),
  inference(subsumption_resolution,[],[f17405,f114])).
fof(f17405,plain,(
  ( ! [X167,X169,X166,X168] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X166,bool),X167),s(X166,X169)))) | s(X166,X168) != s(X166,X169) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X166,bool),X167),s(X166,X168)))))) ) | $spl0),
  inference(forward_demodulation,[],[f17057,f901])).
fof(f17057,plain,(
  ( ! [X167,X169,X166,X168] : (~p(s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) | p(s(bool,happ(s(fun(X166,bool),X167),s(X166,X169)))) | s(X166,X168) != s(X166,X169) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X166,bool),X167),s(X166,X168)))))) ) | $spl0),
  inference(superposition,[],[f159,f8984])).
fof(f17459,plain,(
  ( ! [X269,X270] : (p(s(bool,happ(s(fun(bool,bool),X270),s(bool,'T_0')))) | ~p(s(bool,happ(s(fun(bool,bool),X270),s(bool,X269)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK7(X269,X270,bool))))) ) | $spl0),
  inference(forward_demodulation,[],[f17109,f901])).
fof(f17109,plain,(
  ( ! [X269,X270] : (p(s(bool,happ(s(fun(bool,bool),X270),s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))))) | ~p(s(bool,happ(s(fun(bool,bool),X270),s(bool,X269)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK7(X269,X270,bool))))) ) | $spl0),
  inference(superposition,[],[f161,f8984])).
fof(f10388,plain,(
  ( ! [X167,X165,X169,X166,X164,X170,X168] : (s(bool,X168) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X164),X165),s(bool,X166),s(fun(X164,bool),X167))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(X169),'const.option.NONE_0'),s(bool,X168),s(fun(X169,bool),X170))) = s(bool,happ(s(fun(fun(X164,bool),bool),happ(s(fun(bool,fun(fun(X164,bool),bool)),happ(s(fun('type.option.option'(X164),fun(bool,fun(fun(X164,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X164),X165))),s(bool,X166))),s(fun(X164,bool),X167)))) ) | $spl0),
  inference(superposition,[],[f9763,f169])).
fof(f10387,plain,(
  ( ! [X158,X163,X161,X159,X157,X162,X160] : (s(bool,X161) != s(bool,happ(s(fun(X157,bool),X160),s(X157,X158))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(X162),'const.option.NONE_0'),s(bool,X161),s(fun(X162,bool),X163))) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X157),'const.option.SOME_1'(s(X157,X158))),s(bool,X159),s(fun(X157,bool),X160)))) ) | $spl0),
  inference(superposition,[],[f9763,f168])).
fof(f770,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') != s(bool,f(s(X0,sK8(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,'T_0') = s(bool,g(s(X0,sK8(X1,X2,bool,X0))))) )),
  inference(superposition,[],[f167,f121])).
fof(f1184,plain,(
  ( ! [X134,X132,X133,X131] : (s(bool,X134) != s(bool,f(s(X131,sK8(X132,X133,bool,X131)))) | s(fun(X131,bool),X132) = s(fun(X131,bool),X133) | s(bool,'T_0') = s(bool,X134) | s(bool,'T_0') = s(bool,g(s(X131,sK8(X132,X133,bool,X131))))) )),
  inference(superposition,[],[f167,f208])).
fof(f1309,plain,(
  ( ! [X127,X125,X126,X124] : (s(bool,'T_0') != s(bool,f(s(X124,sK8(X125,X126,bool,X124)))) | s(fun(X124,bool),X125) = s(fun(X124,bool),X126) | s(bool,X127) = s(bool,g(s(X124,sK8(X125,X126,bool,X124)))) | s(bool,'T_0') = s(bool,X127)) )),
  inference(superposition,[],[f167,f208])).
fof(f1763,plain,(
  ( ! [X88,X87,X86] : (s(bool,'T_0') != s(bool,f(s(X86,sK8(X87,X88,bool,X86)))) | s(fun(X86,bool),X87) = s(fun(X86,bool),X88) | s(bool,'F_0') = s(bool,g(s(X86,sK8(X87,X88,bool,X86))))) ) | $spl0),
  inference(forward_demodulation,[],[f1682,f689])).
fof(f1682,plain,(
  ( ! [X88,X87,X86] : (s(bool,f(s(X86,sK8(X87,X88,bool,X86)))) != s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3))))) | s(fun(X86,bool),X87) = s(fun(X86,bool),X88) | s(bool,'F_0') = s(bool,g(s(X86,sK8(X87,X88,bool,X86))))) ) | $spl0),
  inference(superposition,[],[f167,f1614])).
fof(f1963,plain,(
  ( ! [X158,X161,X159,X160] : (s(bool,X161) != s(bool,f(s(X158,sK8(X159,X160,bool,X158)))) | s(fun(X158,bool),X159) = s(fun(X158,bool),X160) | s(bool,'F_0') = s(bool,X161) | s(bool,'F_0') = s(bool,g(s(X158,sK8(X159,X160,bool,X158))))) ) | $spl0),
  inference(superposition,[],[f167,f1632])).
fof(f2116,plain,(
  ( ! [X142,X140,X141,X139] : (s(bool,'F_0') != s(bool,f(s(X139,sK8(X140,X141,bool,X139)))) | s(fun(X139,bool),X140) = s(fun(X139,bool),X141) | s(bool,X142) = s(bool,g(s(X139,sK8(X140,X141,bool,X139)))) | s(bool,'F_0') = s(bool,X142)) ) | $spl0),
  inference(superposition,[],[f167,f1632])).
fof(f3311,plain,(
  ( ! [X237,X235,X236,X234] : (s(bool,X237) != s(bool,f(s(X234,sK8(X235,X236,bool,X234)))) | s(fun(X234,bool),X235) = s(fun(X234,bool),X236) | s(bool,'F_0') = s(bool,X237) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,g(s(X234,sK8(X235,X236,bool,X234))))),bool))) ) | $spl0),
  inference(superposition,[],[f167,f1834])).
fof(f3394,plain,(
  ( ! [X237,X235,X236,X234] : (s(bool,X237) != s(bool,f(s(X234,sK8(X235,X236,bool,X234)))) | s(fun(X234,bool),X235) = s(fun(X234,bool),X236) | s(bool,'F_0') = s(bool,g(s(X234,sK8(X235,X236,bool,X234)))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X237)),bool))) ) | $spl0),
  inference(superposition,[],[f167,f1834])).
fof(f3520,plain,(
  ( ! [X206,X204,X205,X203] : (s(bool,'F_0') != s(bool,f(s(X203,sK8(X204,X205,bool,X203)))) | s(fun(X203,bool),X204) = s(fun(X203,bool),X205) | s(bool,X206) = s(bool,g(s(X203,sK8(X204,X205,bool,X203)))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X206)),bool))) ) | $spl0),
  inference(superposition,[],[f167,f1834])).
fof(f9051,plain,(
  ( ! [X132,X130,X131] : (s(bool,'T_0') != s(bool,f(s(X130,sK8(X131,X132,bool,X130)))) | s(fun(X130,bool),X131) = s(fun(X130,bool),X132) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,g(s(X130,sK8(X131,X132,bool,X130))))),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f8810,f901])).
fof(f8810,plain,(
  ( ! [X132,X130,X131] : (s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) != s(bool,f(s(X130,sK8(X131,X132,bool,X130)))) | s(fun(X130,bool),X131) = s(fun(X130,bool),X132) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,g(s(X130,sK8(X131,X132,bool,X130))))),bool))) ) | $spl0),
  inference(superposition,[],[f167,f7724])).
fof(f17449,plain,(
  ( ! [X255,X253,X254] : (s(bool,'T_0') != s(bool,f(s(X253,sK8(X254,X255,bool,X253)))) | s(fun(X253,bool),X254) = s(fun(X253,bool),X255) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,g(s(X253,sK8(X254,X255,bool,X253))))))) ) | $spl0),
  inference(forward_demodulation,[],[f17103,f901])).
fof(f17103,plain,(
  ( ! [X255,X253,X254] : (s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) != s(bool,f(s(X253,sK8(X254,X255,bool,X253)))) | s(fun(X253,bool),X254) = s(fun(X253,bool),X255) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,g(s(X253,sK8(X254,X255,bool,X253))))))) ) | $spl0),
  inference(superposition,[],[f167,f8984])).
fof(f10377,plain,(
  ( ! [X116,X114,X112,X117,X115,X113] : (s(bool,'F_0') != s(bool,X115) | s(bool,happ(s(fun(X112,bool),X113),s(X112,X114))) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X116),'const.option.NONE_0'),s(bool,X115),s(fun(X116,bool),X117))) | s(X112,X114) = s(X112,sK7(X114,X113,X112))) ) | $spl0),
  inference(superposition,[],[f9763,f1756])).
fof(f10386,plain,(
  ( ! [X156,X154,X152,X151,X155,X153] : (s(bool,X152) != s(bool,X154) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(X151),'const.option.NONE_0'),s(bool,X152),s(fun(X151,bool),X153))) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X155),'const.option.NONE_0'),s(bool,X154),s(fun(X155,bool),X156)))) ) | $spl0),
  inference(superposition,[],[f9763,f166])).
fof(f10551,plain,(
  ( ! [X212,X210,X213,X211,X209,X214] : (s(bool,'T_0') != s(bool,X212) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(X209),'const.option.NONE_0'),s(bool,X210),s(fun(X209,bool),X211))) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X213),'const.option.NONE_0'),s(bool,X212),s(fun(X213,bool),X214))) | s(bool,'F_0') = s(bool,X210)) ) | $spl0),
  inference(superposition,[],[f9763,f298])).
fof(f826,plain,(
  ( ! [X6,X8,X7,X5] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X5),X6),s(bool,X7),s(fun(X5,bool),X8))) | s(bool,'T_0') = s(bool,happ(s(fun(fun(X5,bool),bool),happ(s(fun(bool,fun(fun(X5,bool),bool)),happ(s(fun('type.option.option'(X5),fun(bool,fun(fun(X5,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X5),X6))),s(bool,X7))),s(fun(X5,bool),X8)))) )),
  inference(superposition,[],[f169,f121])).
fof(f840,plain,(
  ( ! [X80,X83,X81,X82] : (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X80),X81),s(bool,X82),s(fun(X80,bool),X83)))) | s(fun(X80,bool),X83) = s(fun(X80,bool),sK7(X83,happ(s(fun(bool,fun(fun(X80,bool),bool)),happ(s(fun('type.option.option'(X80),fun(bool,fun(fun(X80,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X80),X81))),s(bool,X82)),fun(X80,bool)))) )),
  inference(superposition,[],[f160,f169])).
fof(f863,plain,(
  ( ! [X78,X76,X79,X77,X75] : (p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X75),X76),s(bool,X77),s(fun(X75,bool),X79)))) | ~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X75),X76),s(bool,X77),s(fun(X75,bool),X78)))) | s(fun(X75,bool),X78) != s(fun(X75,bool),X79)) )),
  inference(forward_demodulation,[],[f839,f169])).
fof(f839,plain,(
  ( ! [X78,X76,X79,X77,X75] : (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X75),X76),s(bool,X77),s(fun(X75,bool),X78)))) | p(s(bool,happ(s(fun(fun(X75,bool),bool),happ(s(fun(bool,fun(fun(X75,bool),bool)),happ(s(fun('type.option.option'(X75),fun(bool,fun(fun(X75,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X75),X76))),s(bool,X77))),s(fun(X75,bool),X79)))) | s(fun(X75,bool),X78) != s(fun(X75,bool),X79)) )),
  inference(superposition,[],[f159,f169])).
fof(f864,plain,(
  ( ! [X87,X85,X86,X84] : (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X84),X85),s(bool,X86),s(fun(X84,bool),X87)))) | p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X84),X85),s(bool,X86),s(fun(X84,bool),sK7(X87,happ(s(fun(bool,fun(fun(X84,bool),bool)),happ(s(fun('type.option.option'(X84),fun(bool,fun(fun(X84,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X84),X85))),s(bool,X86)),fun(X84,bool))))))) )),
  inference(forward_demodulation,[],[f841,f169])).
fof(f841,plain,(
  ( ! [X87,X85,X86,X84] : (p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X84),X85),s(bool,X86),s(fun(X84,bool),sK7(X87,happ(s(fun(bool,fun(fun(X84,bool),bool)),happ(s(fun('type.option.option'(X84),fun(bool,fun(fun(X84,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X84),X85))),s(bool,X86)),fun(X84,bool)))))) | ~p(s(bool,happ(s(fun(fun(X84,bool),bool),happ(s(fun(bool,fun(fun(X84,bool),bool)),happ(s(fun('type.option.option'(X84),fun(bool,fun(fun(X84,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X84),X85))),s(bool,X86))),s(fun(X84,bool),X87))))) )),
  inference(superposition,[],[f161,f169])).
fof(f874,plain,(
  ( ! [X134,X136,X135,X133] : (s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X133),X134),s(bool,X135),s(fun(X133,bool),X136))) | s(bool,'T_0') = s(bool,happ(s(fun(fun(X133,bool),bool),happ(s(fun(bool,fun(fun(X133,bool),bool)),happ(s(fun('type.option.option'(X133),fun(bool,fun(fun(X133,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X133),X134))),s(bool,X135))),s(fun(X133,bool),X136)))) ) | $spl0),
  inference(forward_demodulation,[],[f852,f689])).
fof(f852,plain,(
  ( ! [X134,X136,X135,X133] : (s(bool,'const.option.option_CASE_3'(s('type.option.option'(X133),X134),s(bool,X135),s(fun(X133,bool),X136))) != s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3))))) | s(bool,'T_0') = s(bool,happ(s(fun(fun(X133,bool),bool),happ(s(fun(bool,fun(fun(X133,bool),bool)),happ(s(fun('type.option.option'(X133),fun(bool,fun(fun(X133,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X133),X134))),s(bool,X135))),s(fun(X133,bool),X136)))) ) | $spl0),
  inference(superposition,[],[f766,f169])).
fof(f890,plain,(
  ( ! [X6,X4,X8,X7,X5] : (s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X4),X5),s(bool,X6),s(fun(X4,bool),X7))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(fun(X4,bool)),'const.option.SOME_1'(s(fun(X4,bool),X7))),s(bool,X8),s(fun(fun(X4,bool),bool),happ(s(fun(bool,fun(fun(X4,bool),bool)),happ(s(fun('type.option.option'(X4),fun(bool,fun(fun(X4,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X4),X5))),s(bool,X6)))))) ) | $spl0),
  inference(superposition,[],[f806,f169])).
fof(f1063,plain,(
  ( ! [X14,X12,X15,X13] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X12),X13),s(bool,X14),s(fun(X12,bool),X15))) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X12,bool),bool),happ(s(fun(bool,fun(fun(X12,bool),bool)),happ(s(fun('type.option.option'(X12),fun(bool,fun(fun(X12,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X12),X13))),s(bool,X14))),s(fun(X12,bool),X15)))) )),
  inference(forward_demodulation,[],[f1028,f901])).
fof(f1028,plain,(
  ( ! [X14,X12,X15,X13] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X12),X13),s(bool,X14),s(fun(X12,bool),X15)))),bool)) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X12,bool),bool),happ(s(fun(bool,fun(fun(X12,bool),bool)),happ(s(fun('type.option.option'(X12),fun(bool,fun(fun(X12,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X12),X13))),s(bool,X14))),s(fun(X12,bool),X15)))) )),
  inference(superposition,[],[f960,f169])).
fof(f1094,plain,(
  ( ! [X39,X37,X35,X38,X36] : (s(bool,X39) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X35),X36),s(bool,X37),s(fun(X35,bool),X38))) | s(bool,'T_0') = s(bool,X39) | s(bool,'T_0') = s(bool,happ(s(fun(fun(X35,bool),bool),happ(s(fun(bool,fun(fun(X35,bool),bool)),happ(s(fun('type.option.option'(X35),fun(bool,fun(fun(X35,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X35),X36))),s(bool,X37))),s(fun(X35,bool),X38)))) )),
  inference(superposition,[],[f208,f169])).
fof(f1124,plain,(
  ( ! [X30,X28,X31,X29,X27] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X27),X28),s(bool,X29),s(fun(X27,bool),X30))) | s(bool,X31) = s(bool,happ(s(fun(fun(X27,bool),bool),happ(s(fun(bool,fun(fun(X27,bool),bool)),happ(s(fun('type.option.option'(X27),fun(bool,fun(fun(X27,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X27),X28))),s(bool,X29))),s(fun(X27,bool),X30))) | s(bool,'T_0') = s(bool,X31)) )),
  inference(superposition,[],[f208,f169])).
fof(f1833,plain,(
  ( ! [X61,X59,X57,X60,X58] : (s(bool,X61) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X57),X58),s(bool,X59),s(fun(X57,bool),X60))) | s(bool,'F_0') = s(bool,X61) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X57,bool),bool),happ(s(fun(bool,fun(fun(X57,bool),bool)),happ(s(fun('type.option.option'(X57),fun(bool,fun(fun(X57,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X57),X58))),s(bool,X59))),s(fun(X57,bool),X60)))) ) | $spl0),
  inference(superposition,[],[f1632,f169])).
fof(f1882,plain,(
  ( ! [X47,X45,X48,X46,X44] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X44),X45),s(bool,X46),s(fun(X44,bool),X47))) | s(bool,X48) = s(bool,happ(s(fun(fun(X44,bool),bool),happ(s(fun(bool,fun(fun(X44,bool),bool)),happ(s(fun('type.option.option'(X44),fun(bool,fun(fun(X44,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X44),X45))),s(bool,X46))),s(fun(X44,bool),X47))) | s(bool,'F_0') = s(bool,X48)) ) | $spl0),
  inference(superposition,[],[f1632,f169])).
fof(f2470,plain,(
  ( ! [X61,X59,X57,X60,X58] : (s(bool,X61) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X57),X58),s(bool,X59),s(fun(X57,bool),X60))) | s(bool,'T_0') = s(bool,X61) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X57,bool),bool),happ(s(fun(bool,fun(fun(X57,bool),bool)),happ(s(fun('type.option.option'(X57),fun(bool,fun(fun(X57,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X57),X58))),s(bool,X59))),s(fun(X57,bool),X60)))) ) | $spl0),
  inference(superposition,[],[f1747,f169])).
fof(f2493,plain,(
  ( ! [X61,X59,X57,X60,X58] : (s(bool,X61) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X57),X58),s(bool,X59),s(fun(X57,bool),X60))) | s(bool,'T_0') = s(bool,happ(s(fun(fun(X57,bool),bool),happ(s(fun(bool,fun(fun(X57,bool),bool)),happ(s(fun('type.option.option'(X57),fun(bool,fun(fun(X57,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X57),X58))),s(bool,X59))),s(fun(X57,bool),X60))) | s(bool,'F_0') = s(bool,X61)) ) | $spl0),
  inference(superposition,[],[f1747,f169])).
fof(f2544,plain,(
  ( ! [X88,X87,X85,X83,X86,X84] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X87),'const.option.NONE_0'),s(bool,'const.option.option_CASE_3'(s('type.option.option'(X83),X84),s(bool,X85),s(fun(X83,bool),X86))),s(fun(X87,bool),X88))) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X83,bool),bool),happ(s(fun(bool,fun(fun(X83,bool),bool)),happ(s(fun('type.option.option'(X83),fun(bool,fun(fun(X83,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X83),X84))),s(bool,X85))),s(fun(X83,bool),X86)))) )),
  inference(superposition,[],[f298,f169])).
fof(f2659,plain,(
  ( ! [X66,X64,X67,X65,X63] : (s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X63),X64),s(bool,X65),s(fun(X63,bool),X66))) | s(bool,X67) = s(bool,happ(s(fun(fun(X63,bool),bool),happ(s(fun(bool,fun(fun(X63,bool),bool)),happ(s(fun('type.option.option'(X63),fun(bool,fun(fun(X63,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X63),X64))),s(bool,X65))),s(fun(X63,bool),X66))) | s(bool,'F_0') = s(bool,X67)) ) | $spl0),
  inference(superposition,[],[f2035,f169])).
fof(f2723,plain,(
  ( ! [X39,X41,X42,X40] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X39),X40),s(bool,X41),s(fun(X39,bool),X42))) | s(fun(X39,bool),X42) = s(fun(X39,bool),sK7(X42,happ(s(fun(bool,fun(fun(X39,bool),bool)),happ(s(fun('type.option.option'(X39),fun(bool,fun(fun(X39,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X39),X40))),s(bool,X41)),fun(X39,bool)))) ) | $spl0),
  inference(superposition,[],[f1756,f169])).
fof(f3086,plain,(
  ( ! [X43,X41,X44,X42] : (s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X41),X42),s(bool,X43),s(fun(X41,bool),X44))) | s(fun(X41,bool),X44) = s(fun(X41,bool),sK7(X44,happ(s(fun(bool,fun(fun(X41,bool),bool)),happ(s(fun('type.option.option'(X41),fun(bool,fun(fun(X41,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X41),X42))),s(bool,X43)),fun(X41,bool)))) ) | $spl0),
  inference(superposition,[],[f2789,f169])).
fof(f3160,plain,(
  ( ! [X80,X83,X81,X79,X82] : (s(bool,X83) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X79),X80),s(bool,X81),s(fun(X79,bool),X82))) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X79,bool),bool),happ(s(fun(bool,fun(fun(X79,bool),bool)),happ(s(fun('type.option.option'(X79),fun(bool,fun(fun(X79,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X79),X80))),s(bool,X81))),s(fun(X79,bool),X82))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X83)),bool))) ) | $spl0),
  inference(superposition,[],[f1834,f169])).
fof(f3193,plain,(
  ( ! [X61,X64,X62,X60,X63] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X60),X61),s(bool,X62),s(fun(X60,bool),X63))) | s(bool,X64) = s(bool,happ(s(fun(fun(X60,bool),bool),happ(s(fun(bool,fun(fun(X60,bool),bool)),happ(s(fun('type.option.option'(X60),fun(bool,fun(fun(X60,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X60),X61))),s(bool,X62))),s(fun(X60,bool),X63))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X64)),bool))) ) | $spl0),
  inference(superposition,[],[f1834,f169])).
fof(f3950,plain,(
  ( ! [X80,X83,X81,X84,X82] : (s(bool,X84) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X80),X81),s(bool,X82),s(fun(X80,bool),X83))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X84))) | s(bool,'T_0') = s(bool,happ(s(fun(fun(X80,bool),bool),happ(s(fun(bool,fun(fun(X80,bool),bool)),happ(s(fun('type.option.option'(X80),fun(bool,fun(fun(X80,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X80),X81))),s(bool,X82))),s(fun(X80,bool),X83)))) )),
  inference(superposition,[],[f403,f169])).
fof(f4510,plain,(
  ( ! [X30,X31,X29,X32] : (s(bool,'F_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X29),X30),s(bool,X31),s(fun(X29,bool),X32))) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X29,bool),bool),happ(s(fun(bool,fun(fun(X29,bool),bool)),happ(s(fun('type.option.option'(X29),fun(bool,fun(fun(X29,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X29),X30))),s(bool,X31))),s(fun(X29,bool),X32)))) ) | $spl0),
  inference(forward_demodulation,[],[f4473,f901])).
fof(f4473,plain,(
  ( ! [X30,X31,X29,X32] : (s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X29),X30),s(bool,X31),s(fun(X29,bool),X32))) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X29,bool),bool),happ(s(fun(bool,fun(fun(X29,bool),bool)),happ(s(fun('type.option.option'(X29),fun(bool,fun(fun(X29,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X29),X30))),s(bool,X31))),s(fun(X29,bool),X32)))) ) | $spl0),
  inference(superposition,[],[f3597,f169])).
fof(f7218,plain,(
  ( ! [X85,X83,X86,X84,X82] : (s(bool,X86) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X82),X83),s(bool,X84),s(fun(X82,bool),X85))) | s(bool,'T_0') = s(bool,happ(s(fun(fun(X82,bool),bool),happ(s(fun(bool,fun(fun(X82,bool),bool)),happ(s(fun('type.option.option'(X82),fun(bool,fun(fun(X82,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X82),X83))),s(bool,X84))),s(fun(X82,bool),X85))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X86)),bool))) ) | $spl0),
  inference(superposition,[],[f2471,f169])).
fof(f7357,plain,(
  ( ! [X85,X83,X81,X84,X82] : (s(bool,X85) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X81),X82),s(bool,X83),s(fun(X81,bool),X84))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X85)),bool)) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X81,bool),bool),happ(s(fun(bool,fun(fun(X81,bool),bool)),happ(s(fun('type.option.option'(X81),fun(bool,fun(fun(X81,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X81),X82))),s(bool,X83))),s(fun(X81,bool),X84)))) ) | $spl0),
  inference(superposition,[],[f2494,f169])).
fof(f9600,plain,(
  ( ! [X94,X97,X95,X98,X96] : (s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X94),X95),s(bool,X96),s(fun(X94,bool),X97))) | s(bool,X98) = s(bool,happ(s(fun(fun(X94,bool),bool),happ(s(fun(bool,fun(fun(X94,bool),bool)),happ(s(fun('type.option.option'(X94),fun(bool,fun(fun(X94,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X94),X95))),s(bool,X96))),s(fun(X94,bool),X97))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X98)),bool))) ) | $spl0),
  inference(superposition,[],[f3405,f169])).
fof(f9651,plain,(
  ( ! [X92,X90,X93,X91,X89] : (s(bool,sK6('const.option.SOME_1'(s(bool,X93)),bool)) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X89),X90),s(bool,X91),s(fun(X89,bool),X92))) | s(bool,X93) = s(bool,happ(s(fun(fun(X89,bool),bool),happ(s(fun(bool,fun(fun(X89,bool),bool)),happ(s(fun('type.option.option'(X89),fun(bool,fun(fun(X89,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X89),X90))),s(bool,X91))),s(fun(X89,bool),X92))) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X89,bool),bool),happ(s(fun(bool,fun(fun(X89,bool),bool)),happ(s(fun('type.option.option'(X89),fun(bool,fun(fun(X89,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X89),X90))),s(bool,X91))),s(fun(X89,bool),X92)))) ) | $spl0),
  inference(superposition,[],[f3585,f169])).
fof(f9765,plain,(
  ( ! [X94,X97,X95,X98,X96] : (s(bool,X98) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X94),X95),s(bool,X96),s(fun(X94,bool),X97))) | s(bool,X98) = s(bool,happ(s(fun(fun(X94,bool),bool),happ(s(fun(bool,fun(fun(X94,bool),bool)),happ(s(fun('type.option.option'(X94),fun(bool,fun(fun(X94,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X94),X95))),s(bool,X96))),s(fun(X94,bool),X97))) | s(bool,'F_0') = s(bool,X98)) ) | $spl0),
  inference(forward_demodulation,[],[f9688,f901])).
fof(f9688,plain,(
  ( ! [X94,X97,X95,X98,X96] : (s(bool,X98) != s(bool,sK6('const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X94),X95),s(bool,X96),s(fun(X94,bool),X97)))),bool)) | s(bool,X98) = s(bool,happ(s(fun(fun(X94,bool),bool),happ(s(fun(bool,fun(fun(X94,bool),bool)),happ(s(fun('type.option.option'(X94),fun(bool,fun(fun(X94,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X94),X95))),s(bool,X96))),s(fun(X94,bool),X97))) | s(bool,'F_0') = s(bool,X98)) ) | $spl0),
  inference(superposition,[],[f3585,f169])).
fof(f10038,plain,(
  ( ! [X92,X90,X93,X91,X89] : (s(bool,sK6('const.option.SOME_1'(s(bool,X93)),bool)) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X89),X90),s(bool,X91),s(fun(X89,bool),X92))) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X89,bool),bool),happ(s(fun(bool,fun(fun(X89,bool),bool)),happ(s(fun('type.option.option'(X89),fun(bool,fun(fun(X89,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X89),X90))),s(bool,X91))),s(fun(X89,bool),X92))) | s(bool,'T_0') = s(bool,X93)) ) | $spl0),
  inference(superposition,[],[f4477,f169])).
fof(f14506,plain,(
  ( ! [X132,X130,X128,X131,X129] : (s(bool,'F_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X128),X129),s(bool,X130),s(fun(X128,bool),X131))) | s(bool,X132) = s(bool,happ(s(fun(fun(X128,bool),bool),happ(s(fun(bool,fun(fun(X128,bool),bool)),happ(s(fun('type.option.option'(X128),fun(bool,fun(fun(X128,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X128),X129))),s(bool,X130))),s(fun(X128,bool),X131))) | s(bool,'T_0') = s(bool,X132)) ) | $spl0),
  inference(superposition,[],[f13980,f169])).
fof(f18854,plain,(
  ( ! [X103,X101,X102,X100] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X100),X101),s(bool,X102),s(fun(X100,bool),sK7(X103,happ(s(fun(bool,fun(fun(X100,bool),bool)),happ(s(fun('type.option.option'(X100),fun(bool,fun(fun(X100,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X100),X101))),s(bool,X102)),fun(X100,bool))))) | ~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X100),X101),s(bool,X102),s(fun(X100,bool),X103))))) )),
  inference(forward_demodulation,[],[f18797,f169])).
fof(f18797,plain,(
  ( ! [X103,X101,X102,X100] : (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X100),X101),s(bool,X102),s(fun(X100,bool),X103)))) | s(bool,'T_0') = s(bool,happ(s(fun(fun(X100,bool),bool),happ(s(fun(bool,fun(fun(X100,bool),bool)),happ(s(fun('type.option.option'(X100),fun(bool,fun(fun(X100,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X100),X101))),s(bool,X102))),s(fun(X100,bool),sK7(X103,happ(s(fun(bool,fun(fun(X100,bool),bool)),happ(s(fun('type.option.option'(X100),fun(bool,fun(fun(X100,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X100),X101))),s(bool,X102)),fun(X100,bool)))))) )),
  inference(superposition,[],[f535,f169])).
fof(f159,plain,(
  ( ! [X4,X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | s(X0,X2) != s(X0,X4)) )),
  inference(cnf_transformation,[],[f109])).
fof(f109,plain,(
  ! [X0,X1,X2] : ((! [X4] : (s(X0,X2) != s(X0,X4) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | (s(X0,X2) = s(X0,sK7(X2,X1,X0)) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK7(X2,X1,X0))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK7])],[f108])).
fof(f108,plain,(
  ! [X0,X1,X2] : ((! [X4] : (s(X0,X2) != s(X0,X4) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | ? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))))))),
  inference(rectify,[],[f107])).
fof(f107,plain,(
  ! [X0,X1,X2] : ((! [X3] : (s(X0,X2) != s(X0,X3) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | ? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))))))),
  inference(nnf_transformation,[],[f66])).
fof(f66,plain,(
  ! [X0,X1,X2] : (? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) <=> p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))))),
  inference(flattening,[],[f65])).
fof(f65,plain,(
  ! [X0] : ! [X1,X2] : (? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) <=> p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))))),
  inference(rectify,[],[f25])).
fof(f25,axiom,(
  ! [X6] : ! [X15,X16] : (? [X8] : (s(X6,X8) = s(X6,X16) & p(s(bool,happ(s(fun(X6,bool),X15),s(X6,X8))))) <=> p(s(bool,happ(s(fun(X6,bool),X15),s(X6,X16)))))),
  file('thm.misc.IN_option_rwt2','thm.bool.UNWIND_THM2')).
fof(f160,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | s(X0,X2) = s(X0,sK7(X2,X1,X0))) )),
  inference(cnf_transformation,[],[f109])).
fof(f161,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK7(X2,X1,X0))))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) )),
  inference(cnf_transformation,[],[f109])).
fof(f434,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) | s(X0,X4) = s(X0,sK7(X4,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(fun(X0,bool),X2),s(fun(X1,fun(X0,bool)),X3)),X0))) )),
  inference(superposition,[],[f160,f166])).
fof(f447,plain,(
  ( ! [X14,X12,X10,X13,X11] : (~p(s(bool,happ(s(fun(X10,bool),X14),s(X10,X12)))) | s(X10,X12) = s(X10,sK7('const.option.option_CASE_3'(s('type.option.option'(X11),'const.option.NONE_0'),s(X10,X12),s(fun(X11,X10),X13)),X14,X10))) )),
  inference(forward_demodulation,[],[f441,f166])).
fof(f441,plain,(
  ( ! [X14,X12,X10,X13,X11] : (~p(s(bool,happ(s(fun(X10,bool),X14),s(X10,X12)))) | s(X10,'const.option.option_CASE_3'(s('type.option.option'(X11),'const.option.NONE_0'),s(X10,X12),s(fun(X11,X10),X13))) = s(X10,sK7('const.option.option_CASE_3'(s('type.option.option'(X11),'const.option.NONE_0'),s(X10,X12),s(fun(X11,X10),X13)),X14,X10))) )),
  inference(superposition,[],[f160,f166])).
fof(f534,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK7(X4,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(fun(X0,bool),X2),s(fun(X1,fun(X0,bool)),X3)),X0)))))) )),
  inference(forward_demodulation,[],[f531,f166])).
fof(f531,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK7(X4,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(fun(X0,bool),X2),s(fun(X1,fun(X0,bool)),X3)),X0))))) | ~p(s(bool,happ(s(fun(X0,bool),'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(fun(X0,bool),X2),s(fun(X1,fun(X0,bool)),X3))),s(X0,X4))))) )),
  inference(superposition,[],[f161,f166])).
fof(f535,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),X1),s(X0,sK7(X2,X1,X0))))) )),
  inference(subsumption_resolution,[],[f533,f179])).
fof(f533,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'F_0')) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),X1),s(X0,sK7(X2,X1,X0))))) )),
  inference(superposition,[],[f161,f121])).
fof(f572,plain,(
  ( ! [X6,X8,X7,X5] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X5),'const.option.SOME_1'(s(X5,X6))),s(bool,X7),s(fun(X5,bool),X8))) | s(bool,'F_0') = s(bool,happ(s(fun(X5,bool),X8),s(X5,X6)))) )),
  inference(superposition,[],[f168,f121])).
fof(f806,plain,(
  ( ! [X10,X8,X7,X9] : (s(bool,'T_0') != s(bool,happ(s(fun(X7,bool),X10),s(X7,X8))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X8))),s(bool,X9),s(fun(X7,bool),X10)))) ) | $spl0),
  inference(forward_demodulation,[],[f794,f689])).
fof(f794,plain,(
  ( ! [X10,X8,X7,X9] : (s(bool,happ(s(fun(X7,bool),X10),s(X7,X8))) != s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3))))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X8))),s(bool,X9),s(fun(X7,bool),X10)))) ) | $spl0),
  inference(superposition,[],[f766,f168])).
fof(f989,plain,(
  ( ! [X78,X79,X77] : (~p(s(bool,happ(s(fun(X77,bool),X78),s(X77,X79)))) | s(X77,X79) = s(X77,sK7(X79,sK6('const.option.SOME_1'(s(fun(X77,bool),X78)),fun(X77,bool)),X77))) )),
  inference(superposition,[],[f160,f901])).
fof(f1005,plain,(
  ( ! [X21,X22,X20] : (s(X20,X21) = s(X20,sK7(sK6('const.option.SOME_1'(s(X20,X21)),X20),X22,X20)) | ~p(s(bool,happ(s(fun(X20,bool),X22),s(X20,X21))))) )),
  inference(forward_demodulation,[],[f967,f901])).
fof(f967,plain,(
  ( ! [X21,X22,X20] : (~p(s(bool,happ(s(fun(X20,bool),X22),s(X20,X21)))) | s(X20,sK6('const.option.SOME_1'(s(X20,X21)),X20)) = s(X20,sK7(sK6('const.option.SOME_1'(s(X20,X21)),X20),X22,X20))) )),
  inference(superposition,[],[f160,f901])).
fof(f1018,plain,(
  ( ! [X76,X74,X75] : (~p(s(bool,happ(s(fun(X74,bool),X75),s(X74,X76)))) | p(s(bool,happ(s(fun(X74,bool),X75),s(X74,sK7(X76,sK6('const.option.SOME_1'(s(fun(X74,bool),X75)),fun(X74,bool)),X74)))))) )),
  inference(forward_demodulation,[],[f988,f901])).
fof(f988,plain,(
  ( ! [X76,X74,X75] : (p(s(bool,happ(s(fun(X74,bool),X75),s(X74,sK7(X76,sK6('const.option.SOME_1'(s(fun(X74,bool),X75)),fun(X74,bool)),X74))))) | ~p(s(bool,happ(s(fun(X74,bool),sK6('const.option.SOME_1'(s(fun(X74,bool),X75)),fun(X74,bool))),s(X74,X76))))) )),
  inference(superposition,[],[f161,f901])).
fof(f1062,plain,(
  ( ! [X10,X8,X11,X9] : (s(bool,'T_0') = s(bool,happ(s(fun(X8,bool),X11),s(X8,X9))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X8),'const.option.SOME_1'(s(X8,X9))),s(bool,X10),s(fun(X8,bool),X11)))) )),
  inference(forward_demodulation,[],[f1027,f901])).
fof(f1027,plain,(
  ( ! [X10,X8,X11,X9] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X8,bool),X11),s(X8,X9)))),bool)) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X8),'const.option.SOME_1'(s(X8,X9))),s(bool,X10),s(fun(X8,bool),X11)))) )),
  inference(superposition,[],[f960,f168])).
fof(f1093,plain,(
  ( ! [X30,X33,X31,X34,X32] : (s(bool,X34) = s(bool,happ(s(fun(X30,bool),X33),s(X30,X31))) | s(bool,'T_0') = s(bool,X34) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X30),'const.option.SOME_1'(s(X30,X31))),s(bool,X32),s(fun(X30,bool),X33)))) )),
  inference(superposition,[],[f208,f168])).
fof(f1123,plain,(
  ( ! [X26,X24,X23,X25,X22] : (s(bool,'T_0') = s(bool,happ(s(fun(X22,bool),X25),s(X22,X23))) | s(bool,X26) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X22),'const.option.SOME_1'(s(X22,X23))),s(bool,X24),s(fun(X22,bool),X25))) | s(bool,'T_0') = s(bool,X26)) )),
  inference(superposition,[],[f208,f168])).
fof(f1580,plain,(
  ( ! [X61,X59,X57,X60,X58] : (p(s(bool,happ(s(fun(X57,bool),X58),s(X57,X60)))) | s(X57,X59) != s(X57,X60) | s(bool,X61) = s(bool,happ(s(fun(X57,bool),X58),s(X57,X59))) | s(bool,'T_0') = s(bool,X61)) )),
  inference(subsumption_resolution,[],[f1291,f114])).
fof(f1291,plain,(
  ( ! [X61,X59,X57,X60,X58] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X57,bool),X58),s(X57,X60)))) | s(X57,X59) != s(X57,X60) | s(bool,X61) = s(bool,happ(s(fun(X57,bool),X58),s(X57,X59))) | s(bool,'T_0') = s(bool,X61)) )),
  inference(superposition,[],[f159,f208])).
fof(f1754,plain,(
  ( ! [X39,X37,X38,X40] : (p(s(bool,happ(s(fun(X37,bool),X38),s(X37,X40)))) | s(X37,X39) != s(X37,X40) | s(bool,'F_0') = s(bool,happ(s(fun(X37,bool),X38),s(X37,X39)))) ) | $spl0),
  inference(subsumption_resolution,[],[f1753,f114])).
fof(f1753,plain,(
  ( ! [X39,X37,X38,X40] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X37,bool),X38),s(X37,X40)))) | s(X37,X39) != s(X37,X40) | s(bool,'F_0') = s(bool,happ(s(fun(X37,bool),X38),s(X37,X39)))) ) | $spl0),
  inference(forward_demodulation,[],[f1663,f689])).
fof(f1663,plain,(
  ( ! [X39,X37,X38,X40] : (~p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3)))))) | p(s(bool,happ(s(fun(X37,bool),X38),s(X37,X40)))) | s(X37,X39) != s(X37,X40) | s(bool,'F_0') = s(bool,happ(s(fun(X37,bool),X38),s(X37,X39)))) ) | $spl0),
  inference(superposition,[],[f159,f1614])).
fof(f1832,plain,(
  ( ! [X54,X52,X56,X55,X53] : (s(bool,X56) = s(bool,happ(s(fun(X52,bool),X55),s(X52,X53))) | s(bool,'F_0') = s(bool,X56) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X52),'const.option.SOME_1'(s(X52,X53))),s(bool,X54),s(fun(X52,bool),X55)))) ) | $spl0),
  inference(superposition,[],[f1632,f168])).
fof(f1881,plain,(
  ( ! [X39,X43,X41,X42,X40] : (s(bool,'F_0') = s(bool,happ(s(fun(X39,bool),X42),s(X39,X40))) | s(bool,X43) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X39),'const.option.SOME_1'(s(X39,X40))),s(bool,X41),s(fun(X39,bool),X42))) | s(bool,'F_0') = s(bool,X43)) ) | $spl0),
  inference(superposition,[],[f1632,f168])).
fof(f2427,plain,(
  ( ! [X80,X78,X81,X79] : (~p(s(bool,happ(s(fun(X78,bool),X79),s(X78,X80)))) | s(bool,X81) = s(bool,happ(s(fun(X78,bool),X79),s(X78,sK7(X80,X79,X78)))) | s(bool,'F_0') = s(bool,X81)) ) | $spl0),
  inference(subsumption_resolution,[],[f2098,f179])).
fof(f2098,plain,(
  ( ! [X80,X78,X81,X79] : (p(s(bool,'F_0')) | ~p(s(bool,happ(s(fun(X78,bool),X79),s(X78,X80)))) | s(bool,X81) = s(bool,happ(s(fun(X78,bool),X79),s(X78,sK7(X80,X79,X78)))) | s(bool,'F_0') = s(bool,X81)) ) | $spl0),
  inference(superposition,[],[f161,f1632])).
fof(f2469,plain,(
  ( ! [X54,X52,X56,X55,X53] : (s(bool,X56) != s(bool,happ(s(fun(X52,bool),X55),s(X52,X53))) | s(bool,'T_0') = s(bool,X56) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X52),'const.option.SOME_1'(s(X52,X53))),s(bool,X54),s(fun(X52,bool),X55)))) ) | $spl0),
  inference(superposition,[],[f1747,f168])).
fof(f2492,plain,(
  ( ! [X54,X52,X56,X55,X53] : (s(bool,X56) != s(bool,happ(s(fun(X52,bool),X55),s(X52,X53))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X52),'const.option.SOME_1'(s(X52,X53))),s(bool,X54),s(fun(X52,bool),X55))) | s(bool,'F_0') = s(bool,X56)) ) | $spl0),
  inference(superposition,[],[f1747,f168])).
fof(f2543,plain,(
  ( ! [X80,X78,X81,X79,X77,X82] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X81),'const.option.NONE_0'),s(bool,happ(s(fun(X77,bool),X80),s(X77,X78))),s(fun(X81,bool),X82))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X77),'const.option.SOME_1'(s(X77,X78))),s(bool,X79),s(fun(X77,bool),X80)))) )),
  inference(superposition,[],[f298,f168])).
fof(f2658,plain,(
  ( ! [X61,X59,X62,X60,X58] : (s(bool,'T_0') != s(bool,happ(s(fun(X58,bool),X61),s(X58,X59))) | s(bool,X62) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X58),'const.option.SOME_1'(s(X58,X59))),s(bool,X60),s(fun(X58,bool),X61))) | s(bool,'F_0') = s(bool,X62)) ) | $spl0),
  inference(superposition,[],[f2035,f168])).
fof(f2686,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))) | s(X0,X4) = s(X0,sK7(X4,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(fun(X0,bool),X2),s(fun(X1,fun(X0,bool)),X3)),X0))) ) | $spl0),
  inference(superposition,[],[f1756,f166])).
fof(f2689,plain,(
  ( ! [X19,X17,X18] : (s(bool,'F_0') = s(bool,happ(s(fun(X17,bool),X18),s(X17,X19))) | s(X17,X19) = s(X17,sK7(X19,sK6('const.option.SOME_1'(s(fun(X17,bool),X18)),fun(X17,bool)),X17))) ) | $spl0),
  inference(superposition,[],[f1756,f901])).
fof(f2713,plain,(
  ( ! [X74,X72,X75,X73] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X75),s(bool,'F_0'))) | s(bool,happ(s(fun(X72,bool),X73),s(X72,X74))) = s(bool,sK7(happ(s(fun(X72,bool),X73),s(X72,X74)),X75,bool)) | s(X72,X74) = s(X72,sK7(X74,X73,X72))) ) | $spl0),
  inference(superposition,[],[f1756,f1756])).
fof(f2755,plain,(
  ( ! [X127,X125,X126,X124] : (s(bool,'F_0') != s(bool,X127) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X127))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X124,bool),X125),s(X124,X126))))) | s(X124,X126) = s(X124,sK7(X126,X125,X124))) ) | $spl0),
  inference(superposition,[],[f158,f1756])).
fof(f2757,plain,(
  ( ! [X134,X132,X136,X135,X133] : (~p(s(bool,happ(s(fun(bool,bool),X135),s(bool,'F_0')))) | p(s(bool,happ(s(fun(bool,bool),X135),s(bool,X136)))) | s(bool,X136) != s(bool,happ(s(fun(X132,bool),X133),s(X132,X134))) | s(X132,X134) = s(X132,sK7(X134,X133,X132))) ) | $spl0),
  inference(superposition,[],[f159,f1756])).
fof(f2758,plain,(
  ( ! [X140,X138,X139,X137] : (~p(s(bool,happ(s(fun(bool,bool),X140),s(bool,'F_0')))) | s(bool,happ(s(fun(X137,bool),X138),s(X137,X139))) = s(bool,sK7(happ(s(fun(X137,bool),X138),s(X137,X139)),X140,bool)) | s(X137,X139) = s(X137,sK7(X139,X138,X137))) ) | $spl0),
  inference(superposition,[],[f160,f1756])).
fof(f2778,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(X0,X2) = s(X0,sK7('const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(X0,X2),s(fun(X1,X0),X3)),X4,X0)) | s(bool,'F_0') = s(bool,happ(s(fun(X0,bool),X4),s(X0,X2)))) ) | $spl0),
  inference(forward_demodulation,[],[f2690,f166])).
fof(f2690,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,happ(s(fun(X0,bool),X4),s(X0,X2))) | s(X0,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(X0,X2),s(fun(X1,X0),X3))) = s(X0,sK7('const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(X0,X2),s(fun(X1,X0),X3)),X4,X0))) ) | $spl0),
  inference(superposition,[],[f1756,f166])).
fof(f2788,plain,(
  ( ! [X12,X13,X11] : (~p(s(bool,happ(s(fun(X11,bool),X12),s(X11,X13)))) | s(X11,sK7(X13,X12,X11)) = s(X11,sK7(sK7(X13,X12,X11),X12,X11))) ) | $spl0),
  inference(subsumption_resolution,[],[f2727,f179])).
fof(f2727,plain,(
  ( ! [X12,X13,X11] : (p(s(bool,'F_0')) | ~p(s(bool,happ(s(fun(X11,bool),X12),s(X11,X13)))) | s(X11,sK7(X13,X12,X11)) = s(X11,sK7(sK7(X13,X12,X11),X12,X11))) ) | $spl0),
  inference(superposition,[],[f161,f1756])).
fof(f2790,plain,(
  ( ! [X30,X31,X29,X32] : (p(s(bool,X32)) | s(bool,X32) = s(bool,happ(s(fun(X29,bool),X30),s(X29,X31))) | s(X29,X31) = s(X29,sK7(X31,X30,X29))) ) | $spl0),
  inference(subsumption_resolution,[],[f2732,f179])).
fof(f2732,plain,(
  ( ! [X30,X31,X29,X32] : (p(s(bool,'F_0')) | p(s(bool,X32)) | s(bool,X32) = s(bool,happ(s(fun(X29,bool),X30),s(X29,X31))) | s(X29,X31) = s(X29,sK7(X31,X30,X29))) ) | $spl0),
  inference(superposition,[],[f162,f1756])).
fof(f3045,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') != s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))) | s(X0,X4) = s(X0,sK7(X4,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(fun(X0,bool),X2),s(fun(X1,fun(X0,bool)),X3)),X0))) ) | $spl0),
  inference(superposition,[],[f2789,f166])).
fof(f3048,plain,(
  ( ! [X19,X17,X18] : (s(bool,'T_0') != s(bool,happ(s(fun(X17,bool),X18),s(X17,X19))) | s(X17,X19) = s(X17,sK7(X19,sK6('const.option.SOME_1'(s(fun(X17,bool),X18)),fun(X17,bool)),X17))) ) | $spl0),
  inference(superposition,[],[f2789,f901])).
fof(f3072,plain,(
  ( ! [X74,X72,X75,X73] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X75),s(bool,'F_0'))) | s(bool,happ(s(fun(X72,bool),X73),s(X72,X74))) = s(bool,sK7(happ(s(fun(X72,bool),X73),s(X72,X74)),X75,bool)) | s(X72,X74) = s(X72,sK7(X74,X73,X72))) ) | $spl0),
  inference(superposition,[],[f2789,f1756])).
fof(f3090,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(X0,X2) = s(X0,sK7('const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(X0,X2),s(fun(X1,X0),X3)),X4,X0)) | s(bool,'T_0') != s(bool,happ(s(fun(X0,bool),X4),s(X0,X2)))) ) | $spl0),
  inference(forward_demodulation,[],[f3049,f166])).
fof(f3049,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') != s(bool,happ(s(fun(X0,bool),X4),s(X0,X2))) | s(X0,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(X0,X2),s(fun(X1,X0),X3))) = s(X0,sK7('const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(X0,X2),s(fun(X1,X0),X3)),X4,X0))) ) | $spl0),
  inference(superposition,[],[f2789,f166])).
fof(f3159,plain,(
  ( ! [X78,X76,X74,X77,X75] : (s(bool,X78) = s(bool,happ(s(fun(X74,bool),X77),s(X74,X75))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X74),'const.option.SOME_1'(s(X74,X75))),s(bool,X76),s(fun(X74,bool),X77))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X78)),bool))) ) | $spl0),
  inference(superposition,[],[f1834,f168])).
fof(f3192,plain,(
  ( ! [X59,X57,X58,X56,X55] : (s(bool,'F_0') = s(bool,happ(s(fun(X55,bool),X58),s(X55,X56))) | s(bool,X59) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X55),'const.option.SOME_1'(s(X55,X56))),s(bool,X57),s(fun(X55,bool),X58))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X59)),bool))) ) | $spl0),
  inference(superposition,[],[f1834,f168])).
fof(f3724,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))),bool)) | s(X0,X2) = s(X0,sK7(X2,X1,X0))) ) | $spl0),
  inference(condensation,[],[f3723])).
fof(f3723,plain,(
  ( ! [X66,X64,X67,X65] : (s(bool,'F_0') = s(bool,X67) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X64,bool),X65),s(X64,X66)))),bool)) | s(X64,X66) = s(X64,sK7(X66,X65,X64))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f3125])).
fof(f3125,plain,(
  ( ! [X66,X64,X67,X65] : (s(bool,'F_0') = s(bool,X67) | s(bool,'F_0') = s(bool,X67) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X64,bool),X65),s(X64,X66)))),bool)) | s(X64,X66) = s(X64,sK7(X66,X65,X64))) ) | $spl0),
  inference(superposition,[],[f1834,f1756])).
fof(f3949,plain,(
  ( ! [X78,X76,X79,X77,X75] : (s(bool,X79) != s(bool,happ(s(fun(X75,bool),X78),s(X75,X76))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X79))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X75),'const.option.SOME_1'(s(X75,X76))),s(bool,X77),s(fun(X75,bool),X78)))) )),
  inference(superposition,[],[f403,f168])).
fof(f4509,plain,(
  ( ! [X28,X26,X27,X25] : (s(bool,'F_0') != s(bool,happ(s(fun(X25,bool),X28),s(X25,X26))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X25),'const.option.SOME_1'(s(X25,X26))),s(bool,X27),s(fun(X25,bool),X28)))) ) | $spl0),
  inference(forward_demodulation,[],[f4472,f901])).
fof(f4472,plain,(
  ( ! [X28,X26,X27,X25] : (s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) != s(bool,happ(s(fun(X25,bool),X28),s(X25,X26))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X25),'const.option.SOME_1'(s(X25,X26))),s(bool,X27),s(fun(X25,bool),X28)))) ) | $spl0),
  inference(superposition,[],[f3597,f168])).
fof(f7217,plain,(
  ( ! [X80,X78,X81,X79,X77] : (s(bool,X81) != s(bool,happ(s(fun(X77,bool),X80),s(X77,X78))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X77),'const.option.SOME_1'(s(X77,X78))),s(bool,X79),s(fun(X77,bool),X80))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X81)),bool))) ) | $spl0),
  inference(superposition,[],[f2471,f168])).
fof(f7356,plain,(
  ( ! [X80,X78,X76,X79,X77] : (s(bool,X80) != s(bool,happ(s(fun(X76,bool),X79),s(X76,X77))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X80)),bool)) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X76),'const.option.SOME_1'(s(X76,X77))),s(bool,X78),s(fun(X76,bool),X79)))) ) | $spl0),
  inference(superposition,[],[f2494,f168])).
fof(f9599,plain,(
  ( ! [X92,X90,X93,X91,X89] : (s(bool,'T_0') != s(bool,happ(s(fun(X89,bool),X92),s(X89,X90))) | s(bool,X93) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X89),'const.option.SOME_1'(s(X89,X90))),s(bool,X91),s(fun(X89,bool),X92))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X93)),bool))) ) | $spl0),
  inference(superposition,[],[f3405,f168])).
fof(f9650,plain,(
  ( ! [X88,X87,X85,X86,X84] : (s(bool,sK6('const.option.SOME_1'(s(bool,X88)),bool)) != s(bool,happ(s(fun(X84,bool),X87),s(X84,X85))) | s(bool,X88) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X84),'const.option.SOME_1'(s(X84,X85))),s(bool,X86),s(fun(X84,bool),X87))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X84),'const.option.SOME_1'(s(X84,X85))),s(bool,X86),s(fun(X84,bool),X87)))) ) | $spl0),
  inference(superposition,[],[f3585,f168])).
fof(f9764,plain,(
  ( ! [X92,X90,X93,X91,X89] : (s(bool,X93) != s(bool,happ(s(fun(X89,bool),X92),s(X89,X90))) | s(bool,X93) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X89),'const.option.SOME_1'(s(X89,X90))),s(bool,X91),s(fun(X89,bool),X92))) | s(bool,'F_0') = s(bool,X93)) ) | $spl0),
  inference(forward_demodulation,[],[f9687,f901])).
fof(f9687,plain,(
  ( ! [X92,X90,X93,X91,X89] : (s(bool,X93) != s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X89,bool),X92),s(X89,X90)))),bool)) | s(bool,X93) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X89),'const.option.SOME_1'(s(X89,X90))),s(bool,X91),s(fun(X89,bool),X92))) | s(bool,'F_0') = s(bool,X93)) ) | $spl0),
  inference(superposition,[],[f3585,f168])).
fof(f10037,plain,(
  ( ! [X88,X87,X85,X86,X84] : (s(bool,sK6('const.option.SOME_1'(s(bool,X88)),bool)) != s(bool,happ(s(fun(X84,bool),X87),s(X84,X85))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X84),'const.option.SOME_1'(s(X84,X85))),s(bool,X86),s(fun(X84,bool),X87))) | s(bool,'T_0') = s(bool,X88)) ) | $spl0),
  inference(superposition,[],[f4477,f168])).
fof(f10262,plain,(
  ( ! [X85,X83,X86,X84,X82] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X85),'const.option.NONE_0'),s(bool,happ(s(fun(X82,bool),X83),s(X82,X84))),s(fun(X85,bool),X86))) | s(X82,X84) = s(X82,sK7(X84,X83,X82))) ) | $spl0),
  inference(trivial_inequality_removal,[],[f10245])).
fof(f10245,plain,(
  ( ! [X85,X83,X86,X84,X82] : (s(bool,'F_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X85),'const.option.NONE_0'),s(bool,happ(s(fun(X82,bool),X83),s(X82,X84))),s(fun(X85,bool),X86))) | s(X82,X84) = s(X82,sK7(X84,X83,X82))) ) | $spl0),
  inference(superposition,[],[f4508,f1756])).
fof(f10340,plain,(
  ( ! [X116,X114,X112,X117,X115,X113] : (s(bool,'F_0') != s(bool,X115) | s(bool,X115) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X116),'const.option.NONE_0'),s(bool,happ(s(fun(X112,bool),X113),s(X112,X114))),s(fun(X116,bool),X117))) | s(X112,X114) = s(X112,sK7(X114,X113,X112))) ) | $spl0),
  inference(superposition,[],[f9763,f1756])).
fof(f14505,plain,(
  ( ! [X127,X125,X123,X126,X124] : (s(bool,'F_0') != s(bool,happ(s(fun(X123,bool),X126),s(X123,X124))) | s(bool,X127) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X123),'const.option.SOME_1'(s(X123,X124))),s(bool,X125),s(fun(X123,bool),X126))) | s(bool,'T_0') = s(bool,X127)) ) | $spl0),
  inference(superposition,[],[f13980,f168])).
fof(f15288,plain,(
  ( ! [X94,X92,X95,X93] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X95))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X92,bool),X93),s(X92,X94))))) | s(bool,'T_0') = s(bool,X95) | s(X92,X94) = s(X92,sK7(X94,X93,X92))) ) | $spl0),
  inference(trivial_inequality_removal,[],[f15269])).
fof(f15269,plain,(
  ( ! [X94,X92,X95,X93] : (s(bool,'F_0') != s(bool,'F_0') | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X95))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X92,bool),X93),s(X92,X94))))) | s(bool,'T_0') = s(bool,X95) | s(X92,X94) = s(X92,sK7(X94,X93,X92))) ) | $spl0),
  inference(superposition,[],[f404,f1756])).
fof(f15422,plain,(
  ( ! [X94,X92,X95,X93] : (s(bool,X95) = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X92,bool),X93),s(X92,X94)))),bool)) | s(bool,'T_0') = s(bool,X95) | s(X92,X94) = s(X92,sK7(X94,X93,X92))) ) | $spl0),
  inference(trivial_inequality_removal,[],[f15403])).
fof(f15403,plain,(
  ( ! [X94,X92,X95,X93] : (s(bool,'F_0') != s(bool,'F_0') | s(bool,X95) = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X92,bool),X93),s(X92,X94)))),bool)) | s(bool,'T_0') = s(bool,X95) | s(X92,X94) = s(X92,sK7(X94,X93,X92))) ) | $spl0),
  inference(superposition,[],[f14507,f1756])).
fof(f18707,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(X0,bool),X4),s(X0,X2)))) | s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),X4),s(X0,sK7('const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(X0,X2),s(fun(X1,X0),X3)),X4,X0))))) )),
  inference(superposition,[],[f535,f166])).
fof(f18710,plain,(
  ( ! [X19,X17,X18] : (~p(s(bool,happ(s(fun(X17,bool),X19),s(X17,X18)))) | s(bool,'T_0') = s(bool,happ(s(fun(X17,bool),X19),s(X17,sK7(sK6('const.option.SOME_1'(s(X17,X18)),X17),X19,X17))))) )),
  inference(superposition,[],[f535,f901])).
fof(f18798,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),X2),s(X0,sK7(X4,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(fun(X0,bool),X2),s(fun(X1,fun(X0,bool)),X3)),X0)))) | ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))) )),
  inference(forward_demodulation,[],[f18703,f166])).
fof(f18703,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) | s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(fun(X0,bool),X2),s(fun(X1,fun(X0,bool)),X3))),s(X0,sK7(X4,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(fun(X0,bool),X2),s(fun(X1,fun(X0,bool)),X3)),X0))))) )),
  inference(superposition,[],[f535,f166])).
fof(f18801,plain,(
  ( ! [X19,X17,X18] : (s(bool,'T_0') = s(bool,happ(s(fun(X17,bool),X18),s(X17,sK7(X19,sK6('const.option.SOME_1'(s(fun(X17,bool),X18)),fun(X17,bool)),X17)))) | ~p(s(bool,happ(s(fun(X17,bool),X18),s(X17,X19))))) )),
  inference(forward_demodulation,[],[f18706,f901])).
fof(f18706,plain,(
  ( ! [X19,X17,X18] : (~p(s(bool,happ(s(fun(X17,bool),X18),s(X17,X19)))) | s(bool,'T_0') = s(bool,happ(s(fun(X17,bool),sK6('const.option.SOME_1'(s(fun(X17,bool),X18)),fun(X17,bool))),s(X17,sK7(X19,sK6('const.option.SOME_1'(s(fun(X17,bool),X18)),fun(X17,bool)),X17))))) )),
  inference(superposition,[],[f535,f901])).
fof(f18832,plain,(
  ( ! [X6,X8,X7,X9] : (s(bool,'T_0') = s(bool,happ(s(fun(X6,bool),X7),s(X6,sK7(X8,X7,X6)))) | s(bool,X9) = s(bool,happ(s(fun(X6,bool),X7),s(X6,X8))) | s(bool,'T_0') = s(bool,X9)) )),
  inference(subsumption_resolution,[],[f18772,f114])).
fof(f18772,plain,(
  ( ! [X6,X8,X7,X9] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,happ(s(fun(X6,bool),X7),s(X6,sK7(X8,X7,X6)))) | s(bool,X9) = s(bool,happ(s(fun(X6,bool),X7),s(X6,X8))) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f535,f208])).
fof(f18840,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))) | s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),X1),s(X0,sK7(X2,X1,X0))))) ) | $spl0),
  inference(condensation,[],[f18839])).
fof(f18839,plain,(
  ( ! [X45,X43,X44,X42] : (s(bool,'F_0') = s(bool,X45) | s(bool,'T_0') = s(bool,happ(s(fun(X42,bool),X43),s(X42,sK7(X44,X43,X42)))) | s(bool,'F_0') = s(bool,happ(s(fun(X42,bool),X43),s(X42,X44)))) ) | $spl0),
  inference(subsumption_resolution,[],[f18838,f128])).
fof(f18838,plain,(
  ( ! [X45,X43,X44,X42] : (s(bool,'F_0') = s(bool,X45) | ~p(s(bool,X45)) | s(bool,'T_0') = s(bool,happ(s(fun(X42,bool),X43),s(X42,sK7(X44,X43,X42)))) | s(bool,'F_0') = s(bool,happ(s(fun(X42,bool),X43),s(X42,X44)))) ) | $spl0),
  inference(forward_demodulation,[],[f18781,f901])).
fof(f18781,plain,(
  ( ! [X45,X43,X44,X42] : (~p(s(bool,X45)) | s(bool,'T_0') = s(bool,happ(s(fun(X42,bool),X43),s(X42,sK7(X44,X43,X42)))) | s(bool,'F_0') = s(bool,happ(s(fun(X42,bool),X43),s(X42,X44))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X45)),bool))) ) | $spl0),
  inference(superposition,[],[f535,f1834])).
fof(f18845,plain,(
  ( ! [X64,X62,X63] : (s(bool,'T_0') = s(bool,happ(s(fun(X62,bool),X63),s(X62,sK7(X64,X63,X62)))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X62,bool),X63),s(X62,X64)))),bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f18844,f114])).
fof(f18844,plain,(
  ( ! [X64,X62,X63] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,happ(s(fun(X62,bool),X63),s(X62,sK7(X64,X63,X62)))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X62,bool),X63),s(X62,X64)))),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f18787,f901])).
fof(f18787,plain,(
  ( ! [X64,X62,X63] : (~p(s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) | s(bool,'T_0') = s(bool,happ(s(fun(X62,bool),X63),s(X62,sK7(X64,X63,X62)))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X62,bool),X63),s(X62,X64)))),bool))) ) | $spl0),
  inference(superposition,[],[f535,f7724])).
fof(f18847,plain,(
  ( ! [X66,X67,X65] : (s(bool,'T_0') = s(bool,happ(s(fun(X65,bool),X66),s(X65,sK7(X67,X66,X65)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X65,bool),X66),s(X65,X67)))))) ) | $spl0),
  inference(subsumption_resolution,[],[f18846,f114])).
fof(f18846,plain,(
  ( ! [X66,X67,X65] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,happ(s(fun(X65,bool),X66),s(X65,sK7(X67,X66,X65)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X65,bool),X66),s(X65,X67)))))) ) | $spl0),
  inference(forward_demodulation,[],[f18788,f901])).
fof(f18788,plain,(
  ( ! [X66,X67,X65] : (~p(s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) | s(bool,'T_0') = s(bool,happ(s(fun(X65,bool),X66),s(X65,sK7(X67,X66,X65)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X65,bool),X66),s(X65,X67)))))) ) | $spl0),
  inference(superposition,[],[f535,f8984])).
fof(f18709,plain,(
  ( ! [X14,X12,X15,X13,X11,X16] : (~p(s(bool,happ(s(fun(X11,bool),X16),s(X11,'const.option.option_CASE_3'(s('type.option.option'(X12),X13),s(X11,X14),s(fun(X12,X11),X15)))))) | s(bool,'T_0') = s(bool,happ(s(fun(X11,bool),X16),s(X11,sK7(happ(s(fun(fun(X12,X11),X11),happ(s(fun(X11,fun(fun(X12,X11),X11)),happ(s(fun('type.option.option'(X12),fun(X11,fun(fun(X12,X11),X11))),'const.option.option_CASE_0'),s('type.option.option'(X12),X13))),s(X11,X14))),s(fun(X12,X11),X15)),X16,X11))))) )),
  inference(superposition,[],[f535,f169])).
fof(f2780,plain,(
  ( ! [X14,X12,X15,X13,X11,X16] : (s(X11,'const.option.option_CASE_3'(s('type.option.option'(X12),X13),s(X11,X14),s(fun(X12,X11),X15))) = s(X11,sK7(happ(s(fun(fun(X12,X11),X11),happ(s(fun(X11,fun(fun(X12,X11),X11)),happ(s(fun('type.option.option'(X12),fun(X11,fun(fun(X12,X11),X11))),'const.option.option_CASE_0'),s('type.option.option'(X12),X13))),s(X11,X14))),s(fun(X12,X11),X15)),X16,X11)) | s(bool,'F_0') = s(bool,happ(s(fun(X11,bool),X16),s(X11,'const.option.option_CASE_3'(s('type.option.option'(X12),X13),s(X11,X14),s(fun(X12,X11),X15)))))) ) | $spl0),
  inference(forward_demodulation,[],[f2692,f169])).
fof(f2692,plain,(
  ( ! [X14,X12,X15,X13,X11,X16] : (s(bool,'F_0') = s(bool,happ(s(fun(X11,bool),X16),s(X11,'const.option.option_CASE_3'(s('type.option.option'(X12),X13),s(X11,X14),s(fun(X12,X11),X15))))) | s(X11,happ(s(fun(fun(X12,X11),X11),happ(s(fun(X11,fun(fun(X12,X11),X11)),happ(s(fun('type.option.option'(X12),fun(X11,fun(fun(X12,X11),X11))),'const.option.option_CASE_0'),s('type.option.option'(X12),X13))),s(X11,X14))),s(fun(X12,X11),X15))) = s(X11,sK7(happ(s(fun(fun(X12,X11),X11),happ(s(fun(X11,fun(fun(X12,X11),X11)),happ(s(fun('type.option.option'(X12),fun(X11,fun(fun(X12,X11),X11))),'const.option.option_CASE_0'),s('type.option.option'(X12),X13))),s(X11,X14))),s(fun(X12,X11),X15)),X16,X11))) ) | $spl0),
  inference(superposition,[],[f1756,f169])).
fof(f3092,plain,(
  ( ! [X14,X12,X15,X13,X11,X16] : (s(X11,'const.option.option_CASE_3'(s('type.option.option'(X12),X13),s(X11,X14),s(fun(X12,X11),X15))) = s(X11,sK7(happ(s(fun(fun(X12,X11),X11),happ(s(fun(X11,fun(fun(X12,X11),X11)),happ(s(fun('type.option.option'(X12),fun(X11,fun(fun(X12,X11),X11))),'const.option.option_CASE_0'),s('type.option.option'(X12),X13))),s(X11,X14))),s(fun(X12,X11),X15)),X16,X11)) | s(bool,'T_0') != s(bool,happ(s(fun(X11,bool),X16),s(X11,'const.option.option_CASE_3'(s('type.option.option'(X12),X13),s(X11,X14),s(fun(X12,X11),X15)))))) ) | $spl0),
  inference(forward_demodulation,[],[f3051,f169])).
fof(f3051,plain,(
  ( ! [X14,X12,X15,X13,X11,X16] : (s(bool,'T_0') != s(bool,happ(s(fun(X11,bool),X16),s(X11,'const.option.option_CASE_3'(s('type.option.option'(X12),X13),s(X11,X14),s(fun(X12,X11),X15))))) | s(X11,happ(s(fun(fun(X12,X11),X11),happ(s(fun(X11,fun(fun(X12,X11),X11)),happ(s(fun('type.option.option'(X12),fun(X11,fun(fun(X12,X11),X11))),'const.option.option_CASE_0'),s('type.option.option'(X12),X13))),s(X11,X14))),s(fun(X12,X11),X15))) = s(X11,sK7(happ(s(fun(fun(X12,X11),X11),happ(s(fun(X11,fun(fun(X12,X11),X11)),happ(s(fun('type.option.option'(X12),fun(X11,fun(fun(X12,X11),X11))),'const.option.option_CASE_0'),s('type.option.option'(X12),X13))),s(X11,X14))),s(fun(X12,X11),X15)),X16,X11))) ) | $spl0),
  inference(superposition,[],[f2789,f169])).
fof(f862,plain,(
  ( ! [X39,X37,X41,X38,X36,X40] : (s(X36,'const.option.option_CASE_3'(s('type.option.option'(X37),X38),s(X36,X39),s(fun(X37,X36),X40))) = s(X36,sK7(happ(s(fun(fun(X37,X36),X36),happ(s(fun(X36,fun(fun(X37,X36),X36)),happ(s(fun('type.option.option'(X37),fun(X36,fun(fun(X37,X36),X36))),'const.option.option_CASE_0'),s('type.option.option'(X37),X38))),s(X36,X39))),s(fun(X37,X36),X40)),X41,X36)) | ~p(s(bool,happ(s(fun(X36,bool),X41),s(X36,'const.option.option_CASE_3'(s('type.option.option'(X37),X38),s(X36,X39),s(fun(X37,X36),X40))))))) )),
  inference(forward_demodulation,[],[f833,f169])).
fof(f833,plain,(
  ( ! [X39,X37,X41,X38,X36,X40] : (~p(s(bool,happ(s(fun(X36,bool),X41),s(X36,'const.option.option_CASE_3'(s('type.option.option'(X37),X38),s(X36,X39),s(fun(X37,X36),X40)))))) | s(X36,happ(s(fun(fun(X37,X36),X36),happ(s(fun(X36,fun(fun(X37,X36),X36)),happ(s(fun('type.option.option'(X37),fun(X36,fun(fun(X37,X36),X36))),'const.option.option_CASE_0'),s('type.option.option'(X37),X38))),s(X36,X39))),s(fun(X37,X36),X40))) = s(X36,sK7(happ(s(fun(fun(X37,X36),X36),happ(s(fun(X36,fun(fun(X37,X36),X36)),happ(s(fun('type.option.option'(X37),fun(X36,fun(fun(X37,X36),X36))),'const.option.option_CASE_0'),s('type.option.option'(X37),X38))),s(X36,X39))),s(fun(X37,X36),X40)),X41,X36))) )),
  inference(superposition,[],[f160,f169])).
fof(f18708,plain,(
  ( ! [X6,X10,X8,X7,X5,X9] : (~p(s(bool,happ(s(fun(X5,bool),X10),s(X5,happ(s(fun(X6,X5),X9),s(X6,X7)))))) | s(bool,'T_0') = s(bool,happ(s(fun(X5,bool),X10),s(X5,sK7('const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(X5,X8),s(fun(X6,X5),X9)),X10,X5))))) )),
  inference(superposition,[],[f535,f168])).
fof(f2779,plain,(
  ( ! [X6,X10,X8,X7,X5,X9] : (s(X5,happ(s(fun(X6,X5),X9),s(X6,X7))) = s(X5,sK7('const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(X5,X8),s(fun(X6,X5),X9)),X10,X5)) | s(bool,'F_0') = s(bool,happ(s(fun(X5,bool),X10),s(X5,happ(s(fun(X6,X5),X9),s(X6,X7)))))) ) | $spl0),
  inference(forward_demodulation,[],[f2691,f168])).
fof(f2691,plain,(
  ( ! [X6,X10,X8,X7,X5,X9] : (s(bool,'F_0') = s(bool,happ(s(fun(X5,bool),X10),s(X5,happ(s(fun(X6,X5),X9),s(X6,X7))))) | s(X5,'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(X5,X8),s(fun(X6,X5),X9))) = s(X5,sK7('const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(X5,X8),s(fun(X6,X5),X9)),X10,X5))) ) | $spl0),
  inference(superposition,[],[f1756,f168])).
fof(f3091,plain,(
  ( ! [X6,X10,X8,X7,X5,X9] : (s(X5,happ(s(fun(X6,X5),X9),s(X6,X7))) = s(X5,sK7('const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(X5,X8),s(fun(X6,X5),X9)),X10,X5)) | s(bool,'T_0') != s(bool,happ(s(fun(X5,bool),X10),s(X5,happ(s(fun(X6,X5),X9),s(X6,X7)))))) ) | $spl0),
  inference(forward_demodulation,[],[f3050,f168])).
fof(f3050,plain,(
  ( ! [X6,X10,X8,X7,X5,X9] : (s(bool,'T_0') != s(bool,happ(s(fun(X5,bool),X10),s(X5,happ(s(fun(X6,X5),X9),s(X6,X7))))) | s(X5,'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(X5,X8),s(fun(X6,X5),X9))) = s(X5,sK7('const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(X5,X8),s(fun(X6,X5),X9)),X10,X5))) ) | $spl0),
  inference(superposition,[],[f2789,f168])).
fof(f607,plain,(
  ( ! [X30,X33,X31,X29,X34,X32] : (s(X29,happ(s(fun(X30,X29),X33),s(X30,X31))) = s(X29,sK7('const.option.option_CASE_3'(s('type.option.option'(X30),'const.option.SOME_1'(s(X30,X31))),s(X29,X32),s(fun(X30,X29),X33)),X34,X29)) | ~p(s(bool,happ(s(fun(X29,bool),X34),s(X29,happ(s(fun(X30,X29),X33),s(X30,X31))))))) )),
  inference(forward_demodulation,[],[f578,f168])).
fof(f578,plain,(
  ( ! [X30,X33,X31,X29,X34,X32] : (~p(s(bool,happ(s(fun(X29,bool),X34),s(X29,happ(s(fun(X30,X29),X33),s(X30,X31)))))) | s(X29,'const.option.option_CASE_3'(s('type.option.option'(X30),'const.option.SOME_1'(s(X30,X31))),s(X29,X32),s(fun(X30,X29),X33))) = s(X29,sK7('const.option.option_CASE_3'(s('type.option.option'(X30),'const.option.SOME_1'(s(X30,X31))),s(X29,X32),s(fun(X30,X29),X33)),X34,X29))) )),
  inference(superposition,[],[f160,f168])).
fof(f18799,plain,(
  ( ! [X6,X10,X8,X7,X5,X9] : (s(bool,'T_0') = s(bool,happ(s(fun(X5,bool),happ(s(fun(X6,fun(X5,bool)),X9),s(X6,X7))),s(X5,sK7(X10,'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(fun(X5,bool),X8),s(fun(X6,fun(X5,bool)),X9)),X5)))) | ~p(s(bool,happ(s(fun(X5,bool),happ(s(fun(X6,fun(X5,bool)),X9),s(X6,X7))),s(X5,X10))))) )),
  inference(forward_demodulation,[],[f18704,f168])).
fof(f18704,plain,(
  ( ! [X6,X10,X8,X7,X5,X9] : (~p(s(bool,happ(s(fun(X5,bool),happ(s(fun(X6,fun(X5,bool)),X9),s(X6,X7))),s(X5,X10)))) | s(bool,'T_0') = s(bool,happ(s(fun(X5,bool),'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(fun(X5,bool),X8),s(fun(X6,fun(X5,bool)),X9))),s(X5,sK7(X10,'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(fun(X5,bool),X8),s(fun(X6,fun(X5,bool)),X9)),X5))))) )),
  inference(superposition,[],[f535,f168])).
fof(f2687,plain,(
  ( ! [X6,X10,X8,X7,X5,X9] : (s(bool,'F_0') = s(bool,happ(s(fun(X5,bool),happ(s(fun(X6,fun(X5,bool)),X9),s(X6,X7))),s(X5,X10))) | s(X5,X10) = s(X5,sK7(X10,'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(fun(X5,bool),X8),s(fun(X6,fun(X5,bool)),X9)),X5))) ) | $spl0),
  inference(superposition,[],[f1756,f168])).
fof(f3046,plain,(
  ( ! [X6,X10,X8,X7,X5,X9] : (s(bool,'T_0') != s(bool,happ(s(fun(X5,bool),happ(s(fun(X6,fun(X5,bool)),X9),s(X6,X7))),s(X5,X10))) | s(X5,X10) = s(X5,sK7(X10,'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(fun(X5,bool),X8),s(fun(X6,fun(X5,bool)),X9)),X5))) ) | $spl0),
  inference(superposition,[],[f2789,f168])).
fof(f593,plain,(
  ( ! [X103,X101,X105,X102,X106,X104] : (~p(s(bool,happ(s(fun(X101,bool),happ(s(fun(X102,fun(X101,bool)),X105),s(X102,X103))),s(X101,X106)))) | s(X101,X106) = s(X101,sK7(X106,'const.option.option_CASE_3'(s('type.option.option'(X102),'const.option.SOME_1'(s(X102,X103))),s(fun(X101,bool),X104),s(fun(X102,fun(X101,bool)),X105)),X101))) )),
  inference(superposition,[],[f160,f168])).
fof(f615,plain,(
  ( ! [X99,X97,X95,X100,X98,X96] : (~p(s(bool,happ(s(fun(X95,bool),happ(s(fun(X96,fun(X95,bool)),X99),s(X96,X97))),s(X95,X100)))) | p(s(bool,happ(s(fun(X95,bool),happ(s(fun(X96,fun(X95,bool)),X99),s(X96,X97))),s(X95,sK7(X100,'const.option.option_CASE_3'(s('type.option.option'(X96),'const.option.SOME_1'(s(X96,X97))),s(fun(X95,bool),X98),s(fun(X96,fun(X95,bool)),X99)),X95)))))) )),
  inference(forward_demodulation,[],[f592,f168])).
fof(f592,plain,(
  ( ! [X99,X97,X95,X100,X98,X96] : (p(s(bool,happ(s(fun(X95,bool),happ(s(fun(X96,fun(X95,bool)),X99),s(X96,X97))),s(X95,sK7(X100,'const.option.option_CASE_3'(s('type.option.option'(X96),'const.option.SOME_1'(s(X96,X97))),s(fun(X95,bool),X98),s(fun(X96,fun(X95,bool)),X99)),X95))))) | ~p(s(bool,happ(s(fun(X95,bool),'const.option.option_CASE_3'(s('type.option.option'(X96),'const.option.SOME_1'(s(X96,X97))),s(fun(X95,bool),X98),s(fun(X96,fun(X95,bool)),X99))),s(X95,X100))))) )),
  inference(superposition,[],[f161,f168])).
fof(f18800,plain,(
  ( ! [X14,X12,X15,X13,X11,X16] : (s(bool,'T_0') = s(bool,happ(s(fun(X11,bool),'const.option.option_CASE_3'(s('type.option.option'(X12),X13),s(fun(X11,bool),X14),s(fun(X12,fun(X11,bool)),X15))),s(X11,sK7(X16,happ(s(fun(fun(X12,fun(X11,bool)),fun(X11,bool)),happ(s(fun(fun(X11,bool),fun(fun(X12,fun(X11,bool)),fun(X11,bool))),happ(s(fun('type.option.option'(X12),fun(fun(X11,bool),fun(fun(X12,fun(X11,bool)),fun(X11,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X12),X13))),s(fun(X11,bool),X14))),s(fun(X12,fun(X11,bool)),X15)),X11)))) | ~p(s(bool,happ(s(fun(X11,bool),'const.option.option_CASE_3'(s('type.option.option'(X12),X13),s(fun(X11,bool),X14),s(fun(X12,fun(X11,bool)),X15))),s(X11,X16))))) )),
  inference(forward_demodulation,[],[f18705,f169])).
fof(f18705,plain,(
  ( ! [X14,X12,X15,X13,X11,X16] : (~p(s(bool,happ(s(fun(X11,bool),'const.option.option_CASE_3'(s('type.option.option'(X12),X13),s(fun(X11,bool),X14),s(fun(X12,fun(X11,bool)),X15))),s(X11,X16)))) | s(bool,'T_0') = s(bool,happ(s(fun(X11,bool),happ(s(fun(fun(X12,fun(X11,bool)),fun(X11,bool)),happ(s(fun(fun(X11,bool),fun(fun(X12,fun(X11,bool)),fun(X11,bool))),happ(s(fun('type.option.option'(X12),fun(fun(X11,bool),fun(fun(X12,fun(X11,bool)),fun(X11,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X12),X13))),s(fun(X11,bool),X14))),s(fun(X12,fun(X11,bool)),X15))),s(X11,sK7(X16,happ(s(fun(fun(X12,fun(X11,bool)),fun(X11,bool)),happ(s(fun(fun(X11,bool),fun(fun(X12,fun(X11,bool)),fun(X11,bool))),happ(s(fun('type.option.option'(X12),fun(fun(X11,bool),fun(fun(X12,fun(X11,bool)),fun(X11,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X12),X13))),s(fun(X11,bool),X14))),s(fun(X12,fun(X11,bool)),X15)),X11))))) )),
  inference(superposition,[],[f535,f169])).
fof(f2688,plain,(
  ( ! [X14,X12,X15,X13,X11,X16] : (s(bool,'F_0') = s(bool,happ(s(fun(X11,bool),'const.option.option_CASE_3'(s('type.option.option'(X12),X13),s(fun(X11,bool),X14),s(fun(X12,fun(X11,bool)),X15))),s(X11,X16))) | s(X11,X16) = s(X11,sK7(X16,happ(s(fun(fun(X12,fun(X11,bool)),fun(X11,bool)),happ(s(fun(fun(X11,bool),fun(fun(X12,fun(X11,bool)),fun(X11,bool))),happ(s(fun('type.option.option'(X12),fun(fun(X11,bool),fun(fun(X12,fun(X11,bool)),fun(X11,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X12),X13))),s(fun(X11,bool),X14))),s(fun(X12,fun(X11,bool)),X15)),X11))) ) | $spl0),
  inference(superposition,[],[f1756,f169])).
fof(f3047,plain,(
  ( ! [X14,X12,X15,X13,X11,X16] : (s(bool,'T_0') != s(bool,happ(s(fun(X11,bool),'const.option.option_CASE_3'(s('type.option.option'(X12),X13),s(fun(X11,bool),X14),s(fun(X12,fun(X11,bool)),X15))),s(X11,X16))) | s(X11,X16) = s(X11,sK7(X16,happ(s(fun(fun(X12,fun(X11,bool)),fun(X11,bool)),happ(s(fun(fun(X11,bool),fun(fun(X12,fun(X11,bool)),fun(X11,bool))),happ(s(fun('type.option.option'(X12),fun(fun(X11,bool),fun(fun(X12,fun(X11,bool)),fun(X11,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X12),X13))),s(fun(X11,bool),X14))),s(fun(X12,fun(X11,bool)),X15)),X11))) ) | $spl0),
  inference(superposition,[],[f2789,f169])).
fof(f855,plain,(
  ( ! [X154,X152,X151,X155,X153,X150] : (~p(s(bool,happ(s(fun(X150,bool),'const.option.option_CASE_3'(s('type.option.option'(X151),X152),s(fun(X150,bool),X153),s(fun(X151,fun(X150,bool)),X154))),s(X150,X155)))) | s(X150,X155) = s(X150,sK7(X155,happ(s(fun(fun(X151,fun(X150,bool)),fun(X150,bool)),happ(s(fun(fun(X150,bool),fun(fun(X151,fun(X150,bool)),fun(X150,bool))),happ(s(fun('type.option.option'(X151),fun(fun(X150,bool),fun(fun(X151,fun(X150,bool)),fun(X150,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X151),X152))),s(fun(X150,bool),X153))),s(fun(X151,fun(X150,bool)),X154)),X150))) )),
  inference(superposition,[],[f160,f169])).
fof(f876,plain,(
  ( ! [X146,X144,X149,X147,X145,X148] : (~p(s(bool,happ(s(fun(X144,bool),'const.option.option_CASE_3'(s('type.option.option'(X145),X146),s(fun(X144,bool),X147),s(fun(X145,fun(X144,bool)),X148))),s(X144,X149)))) | p(s(bool,happ(s(fun(X144,bool),'const.option.option_CASE_3'(s('type.option.option'(X145),X146),s(fun(X144,bool),X147),s(fun(X145,fun(X144,bool)),X148))),s(X144,sK7(X149,happ(s(fun(fun(X145,fun(X144,bool)),fun(X144,bool)),happ(s(fun(fun(X144,bool),fun(fun(X145,fun(X144,bool)),fun(X144,bool))),happ(s(fun('type.option.option'(X145),fun(fun(X144,bool),fun(fun(X145,fun(X144,bool)),fun(X144,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X145),X146))),s(fun(X144,bool),X147))),s(fun(X145,fun(X144,bool)),X148)),X144)))))) )),
  inference(forward_demodulation,[],[f854,f169])).
fof(f854,plain,(
  ( ! [X146,X144,X149,X147,X145,X148] : (p(s(bool,happ(s(fun(X144,bool),'const.option.option_CASE_3'(s('type.option.option'(X145),X146),s(fun(X144,bool),X147),s(fun(X145,fun(X144,bool)),X148))),s(X144,sK7(X149,happ(s(fun(fun(X145,fun(X144,bool)),fun(X144,bool)),happ(s(fun(fun(X144,bool),fun(fun(X145,fun(X144,bool)),fun(X144,bool))),happ(s(fun('type.option.option'(X145),fun(fun(X144,bool),fun(fun(X145,fun(X144,bool)),fun(X144,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X145),X146))),s(fun(X144,bool),X147))),s(fun(X145,fun(X144,bool)),X148)),X144))))) | ~p(s(bool,happ(s(fun(X144,bool),happ(s(fun(fun(X145,fun(X144,bool)),fun(X144,bool)),happ(s(fun(fun(X144,bool),fun(fun(X145,fun(X144,bool)),fun(X144,bool))),happ(s(fun('type.option.option'(X145),fun(fun(X144,bool),fun(fun(X145,fun(X144,bool)),fun(X144,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X145),X146))),s(fun(X144,bool),X147))),s(fun(X145,fun(X144,bool)),X148))),s(X144,X149))))) )),
  inference(superposition,[],[f161,f169])).
fof(f439,plain,(
  ( ! [X6,X7] : (~p(s(bool,happ(s(fun(bool,bool),X7),s(bool,X6)))) | s(bool,'F_0') = s(bool,sK7('F_0',X7,bool)) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f160,f121])).
fof(f532,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,X0)))) | p(s(bool,happ(s(fun(bool,bool),X1),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X0,X1,bool))) )),
  inference(superposition,[],[f161,f121])).
fof(f734,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,happ(s(fun(bool,bool),X20),s(bool,X19)))) | p(s(bool,happ(s(fun(bool,bool),X20),s(bool,X21)))) | s(bool,'F_0') != s(bool,X21) | s(bool,'T_0') = s(bool,X19)) )),
  inference(superposition,[],[f159,f121])).
fof(f735,plain,(
  ( ! [X24,X23,X22] : (~p(s(bool,happ(s(fun(bool,bool),X23),s(bool,'F_0')))) | p(s(bool,happ(s(fun(bool,bool),X23),s(bool,X24)))) | s(bool,X22) != s(bool,X24) | s(bool,'T_0') = s(bool,X22)) )),
  inference(superposition,[],[f159,f121])).
fof(f1070,plain,(
  ( ! [X28,X29,X27] : (s(bool,X27) != s(bool,X29) | ~p(s(bool,happ(s(fun(bool,bool),X28),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X28),s(bool,X29)))) | s(bool,'F_0') = s(bool,X27)) )),
  inference(forward_demodulation,[],[f1050,f901])).
fof(f1050,plain,(
  ( ! [X28,X29,X27] : (~p(s(bool,happ(s(fun(bool,bool),X28),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X28),s(bool,X29)))) | s(bool,X29) != s(bool,sK6('const.option.SOME_1'(s(bool,X27)),bool)) | s(bool,'F_0') = s(bool,X27)) )),
  inference(superposition,[],[f159,f960])).
fof(f1174,plain,(
  ( ! [X94,X92,X93,X91] : (~p(s(bool,happ(s(fun(bool,bool),X93),s(bool,X92)))) | p(s(bool,happ(s(fun(bool,bool),X93),s(bool,X94)))) | s(bool,X91) != s(bool,X94) | s(bool,'T_0') = s(bool,X92) | s(bool,'T_0') = s(bool,X91)) )),
  inference(superposition,[],[f159,f208])).
fof(f1175,plain,(
  ( ! [X97,X95,X96] : (~p(s(bool,happ(s(fun(bool,bool),X97),s(bool,X96)))) | s(bool,X95) = s(bool,sK7(X95,X97,bool)) | s(bool,'T_0') = s(bool,X96) | s(bool,'T_0') = s(bool,X95)) )),
  inference(superposition,[],[f160,f208])).
fof(f1190,plain,(
  ( ! [X154,X155,X153] : (p(s(bool,happ(s(fun(bool,bool),X154),s(bool,X155)))) | ~p(s(bool,happ(s(fun(bool,bool),X154),s(bool,X153)))) | s(bool,'T_0') = s(bool,X155) | s(bool,'T_0') = s(bool,sK7(X153,X154,bool))) )),
  inference(superposition,[],[f161,f208])).
fof(f1258,plain,(
  ( ! [X52,X50,X53,X51] : (~p(s(bool,happ(s(fun(bool,bool),X51),s(bool,X50)))) | p(s(bool,happ(s(fun(bool,bool),X51),s(bool,X52)))) | s(bool,'T_0') != s(bool,X52) | s(bool,X50) = s(bool,X53) | s(bool,'T_0') = s(bool,X53)) )),
  inference(superposition,[],[f159,f208])).
fof(f1259,plain,(
  ( ! [X54,X56,X55] : (~p(s(bool,happ(s(fun(bool,bool),X55),s(bool,X54)))) | s(bool,'T_0') = s(bool,sK7('T_0',X55,bool)) | s(bool,X54) = s(bool,X56) | s(bool,'T_0') = s(bool,X56)) )),
  inference(superposition,[],[f160,f208])).
fof(f1299,plain,(
  ( ! [X88,X87,X85,X86] : (~p(s(bool,happ(s(fun(bool,bool),X86),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X86),s(bool,X87)))) | s(bool,X85) != s(bool,X87) | s(bool,X85) = s(bool,X88) | s(bool,'T_0') = s(bool,X88)) )),
  inference(superposition,[],[f159,f208])).
fof(f1315,plain,(
  ( ! [X146,X147,X148] : (p(s(bool,happ(s(fun(bool,bool),X147),s(bool,'T_0')))) | ~p(s(bool,happ(s(fun(bool,bool),X147),s(bool,X146)))) | s(bool,X148) = s(bool,sK7(X146,X147,bool)) | s(bool,'T_0') = s(bool,X148)) )),
  inference(superposition,[],[f161,f208])).
fof(f1767,plain,(
  ( ! [X103,X102] : (p(s(bool,happ(s(fun(bool,bool),X103),s(bool,'T_0')))) | ~p(s(bool,happ(s(fun(bool,bool),X103),s(bool,X102)))) | s(bool,'F_0') = s(bool,sK7(X102,X103,bool))) ) | $spl0),
  inference(forward_demodulation,[],[f1688,f689])).
fof(f1688,plain,(
  ( ! [X103,X102] : (p(s(bool,happ(s(fun(bool,bool),X103),s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3)))))))) | ~p(s(bool,happ(s(fun(bool,bool),X103),s(bool,X102)))) | s(bool,'F_0') = s(bool,sK7(X102,X103,bool))) ) | $spl0),
  inference(superposition,[],[f161,f1614])).
fof(f1776,plain,(
  ( ! [X39,X41,X40] : (s(bool,'T_0') != s(bool,X41) | ~p(s(bool,happ(s(fun(bool,bool),X40),s(bool,X39)))) | p(s(bool,happ(s(fun(bool,bool),X40),s(bool,X41)))) | s(bool,'F_0') = s(bool,X39)) ) | $spl0),
  inference(forward_demodulation,[],[f1714,f689])).
fof(f1714,plain,(
  ( ! [X39,X41,X40] : (~p(s(bool,happ(s(fun(bool,bool),X40),s(bool,X39)))) | p(s(bool,happ(s(fun(bool,bool),X40),s(bool,X41)))) | s(bool,X41) != s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3))))) | s(bool,'F_0') = s(bool,X39)) ) | $spl0),
  inference(superposition,[],[f159,f1614])).
fof(f1777,plain,(
  ( ! [X43,X42] : (s(bool,'T_0') = s(bool,sK7('const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3)))),X43,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X43),s(bool,X42)))) | s(bool,'F_0') = s(bool,X42)) ) | $spl0),
  inference(forward_demodulation,[],[f1715,f689])).
fof(f1715,plain,(
  ( ! [X43,X42] : (~p(s(bool,happ(s(fun(bool,bool),X43),s(bool,X42)))) | s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3))))) = s(bool,sK7('const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3)))),X43,bool)) | s(bool,'F_0') = s(bool,X42)) ) | $spl0),
  inference(superposition,[],[f160,f1614])).
fof(f1952,plain,(
  ( ! [X118,X116,X119,X117] : (~p(s(bool,happ(s(fun(bool,bool),X118),s(bool,X117)))) | p(s(bool,happ(s(fun(bool,bool),X118),s(bool,X119)))) | s(bool,X116) != s(bool,X119) | s(bool,'F_0') = s(bool,X117) | s(bool,'F_0') = s(bool,X116)) ) | $spl0),
  inference(superposition,[],[f159,f1632])).
fof(f1953,plain,(
  ( ! [X121,X122,X120] : (~p(s(bool,happ(s(fun(bool,bool),X122),s(bool,X121)))) | s(bool,X120) = s(bool,sK7(X120,X122,bool)) | s(bool,'F_0') = s(bool,X121) | s(bool,'F_0') = s(bool,X120)) ) | $spl0),
  inference(superposition,[],[f160,f1632])).
fof(f1969,plain,(
  ( ! [X182,X180,X181] : (p(s(bool,happ(s(fun(bool,bool),X181),s(bool,X182)))) | ~p(s(bool,happ(s(fun(bool,bool),X181),s(bool,X180)))) | s(bool,'F_0') = s(bool,X182) | s(bool,'F_0') = s(bool,sK7(X180,X181,bool))) ) | $spl0),
  inference(superposition,[],[f161,f1632])).
fof(f2057,plain,(
  ( ! [X70,X68,X69,X67] : (~p(s(bool,happ(s(fun(bool,bool),X68),s(bool,X67)))) | p(s(bool,happ(s(fun(bool,bool),X68),s(bool,X69)))) | s(bool,'F_0') != s(bool,X69) | s(bool,X67) = s(bool,X70) | s(bool,'F_0') = s(bool,X70)) ) | $spl0),
  inference(superposition,[],[f159,f1632])).
fof(f2058,plain,(
  ( ! [X72,X71,X73] : (~p(s(bool,happ(s(fun(bool,bool),X72),s(bool,X71)))) | s(bool,'F_0') = s(bool,sK7('F_0',X72,bool)) | s(bool,X71) = s(bool,X73) | s(bool,'F_0') = s(bool,X73)) ) | $spl0),
  inference(superposition,[],[f160,f1632])).
fof(f2105,plain,(
  ( ! [X101,X99,X100,X98] : (~p(s(bool,happ(s(fun(bool,bool),X99),s(bool,'F_0')))) | p(s(bool,happ(s(fun(bool,bool),X99),s(bool,X100)))) | s(bool,X98) != s(bool,X100) | s(bool,X98) = s(bool,X101) | s(bool,'F_0') = s(bool,X101)) ) | $spl0),
  inference(superposition,[],[f159,f1632])).
fof(f2122,plain,(
  ( ! [X163,X161,X162] : (p(s(bool,happ(s(fun(bool,bool),X162),s(bool,'F_0')))) | ~p(s(bool,happ(s(fun(bool,bool),X162),s(bool,X161)))) | s(bool,X163) = s(bool,sK7(X161,X162,bool)) | s(bool,'F_0') = s(bool,X163)) ) | $spl0),
  inference(superposition,[],[f161,f1632])).
fof(f7799,plain,(
  ( ! [X90,X91] : (s(bool,'T_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X91,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X91),s(bool,X90)))) | s(bool,'F_0') = s(bool,X90)) ) | $spl0),
  inference(forward_demodulation,[],[f7676,f901])).
fof(f7676,plain,(
  ( ! [X90,X91] : (~p(s(bool,happ(s(fun(bool,bool),X91),s(bool,X90)))) | s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X91,bool)) | s(bool,'F_0') = s(bool,X90)) ) | $spl0),
  inference(superposition,[],[f160,f7478])).
fof(f14034,plain,(
  ( ! [X229,X230,X228] : (s(bool,'T_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X229,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X229),s(bool,X228)))) | s(bool,X228) = s(bool,X230) | s(bool,'T_0') = s(bool,X230)) ) | $spl0),
  inference(forward_demodulation,[],[f13015,f901])).
fof(f13015,plain,(
  ( ! [X229,X230,X228] : (~p(s(bool,happ(s(fun(bool,bool),X229),s(bool,X228)))) | s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X229,bool)) | s(bool,X228) = s(bool,X230) | s(bool,'T_0') = s(bool,X230)) ) | $spl0),
  inference(superposition,[],[f160,f9397])).
fof(f15635,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,X3)))) | s(bool,'F_0') = s(bool,sK7('F_0','const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(fun(bool,bool),X1),s(fun(X0,fun(bool,bool)),X2)),bool)) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f439,f166])).
fof(f15638,plain,(
  ( ! [X14,X15] : (~p(s(bool,happ(s(fun(bool,bool),X14),s(bool,X15)))) | s(bool,'F_0') = s(bool,sK7('F_0',sK6('const.option.SOME_1'(s(fun(bool,bool),X14)),fun(bool,bool)),bool)) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f439,f901])).
fof(f15763,plain,(
  ( ! [X43,X44] : (s(bool,'F_0') = s(bool,sK7('F_0',X43,bool)) | s(bool,'T_0') = s(bool,X44) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X43),s(bool,X44)))),bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f15762,f114])).
fof(f15762,plain,(
  ( ! [X43,X44] : (~p(s(bool,'T_0')) | s(bool,'F_0') = s(bool,sK7('F_0',X43,bool)) | s(bool,'T_0') = s(bool,X44) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X43),s(bool,X44)))),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f15705,f901])).
fof(f15705,plain,(
  ( ! [X43,X44] : (~p(s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) | s(bool,'F_0') = s(bool,sK7('F_0',X43,bool)) | s(bool,'T_0') = s(bool,X44) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X43),s(bool,X44)))),bool))) ) | $spl0),
  inference(superposition,[],[f439,f7724])).
fof(f17409,plain,(
  ( ! [X182,X183] : (s(bool,'F_0') = s(bool,sK7('F_0',X182,bool)) | s(bool,'T_0') = s(bool,X183) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X182),s(bool,X183)))))) ) | $spl0),
  inference(subsumption_resolution,[],[f17408,f114])).
fof(f17408,plain,(
  ( ! [X182,X183] : (~p(s(bool,'T_0')) | s(bool,'F_0') = s(bool,sK7('F_0',X182,bool)) | s(bool,'T_0') = s(bool,X183) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X182),s(bool,X183)))))) ) | $spl0),
  inference(forward_demodulation,[],[f17062,f901])).
fof(f17062,plain,(
  ( ! [X182,X183] : (~p(s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) | s(bool,'F_0') = s(bool,sK7('F_0',X182,bool)) | s(bool,'T_0') = s(bool,X183) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X182),s(bool,X183)))))) ) | $spl0),
  inference(superposition,[],[f439,f8984])).
fof(f17445,plain,(
  ( ! [X222,X223,X224] : (~p(s(bool,happ(s(fun(bool,bool),X223),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X223),s(bool,X224)))) | s(bool,X222) != s(bool,X224) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X222)))) ) | $spl0),
  inference(forward_demodulation,[],[f17091,f901])).
fof(f17091,plain,(
  ( ! [X222,X223,X224] : (~p(s(bool,happ(s(fun(bool,bool),X223),s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))))) | p(s(bool,happ(s(fun(bool,bool),X223),s(bool,X224)))) | s(bool,X222) != s(bool,X224) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X222)))) ) | $spl0),
  inference(superposition,[],[f159,f8984])).
fof(f17498,plain,(
  ( ! [X191,X192,X193] : (s(bool,'T_0') != s(bool,X193) | ~p(s(bool,happ(s(fun(bool,bool),X192),s(bool,X191)))) | p(s(bool,happ(s(fun(bool,bool),X192),s(bool,X193)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X191)))) ) | $spl0),
  inference(forward_demodulation,[],[f17209,f901])).
fof(f17209,plain,(
  ( ! [X191,X192,X193] : (~p(s(bool,happ(s(fun(bool,bool),X192),s(bool,X191)))) | p(s(bool,happ(s(fun(bool,bool),X192),s(bool,X193)))) | s(bool,X193) != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X191)))) ) | $spl0),
  inference(superposition,[],[f159,f8984])).
fof(f17499,plain,(
  ( ! [X194,X195] : (s(bool,'T_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X195,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X195),s(bool,X194)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X194)))) ) | $spl0),
  inference(forward_demodulation,[],[f17210,f901])).
fof(f17210,plain,(
  ( ! [X194,X195] : (~p(s(bool,happ(s(fun(bool,bool),X195),s(bool,X194)))) | s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X195,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X194)))) ) | $spl0),
  inference(superposition,[],[f160,f8984])).
fof(f17754,plain,(
  ( ! [X198,X196,X197] : (~p(s(bool,happ(s(fun(bool,bool),X197),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X197),s(bool,X198)))) | s(bool,X198) != s(bool,sK6(X196,bool)) | s('type.option.option'(bool),X196) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X196)) )),
  inference(superposition,[],[f159,f458])).
fof(f18713,plain,(
  ( ! [X26,X27,X25] : (~p(s(bool,happ(s(fun(bool,bool),X27),s(bool,X26)))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X27),s(bool,sK7(X25,X27,bool)))) | s(bool,'T_0') = s(bool,X26) | s(bool,'T_0') = s(bool,X25)) )),
  inference(superposition,[],[f535,f208])).
fof(f18717,plain,(
  ( ! [X39,X37,X38] : (~p(s(bool,happ(s(fun(bool,bool),X39),s(bool,X38)))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X39),s(bool,sK7(X37,X39,bool)))) | s(bool,'F_0') = s(bool,X38) | s(bool,'F_0') = s(bool,X37)) ) | $spl0),
  inference(superposition,[],[f535,f1632])).
fof(f18744,plain,(
  ( ! [X112,X113] : (~p(s(bool,happ(s(fun(bool,bool),X113),s(bool,X112)))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X113),s(bool,sK7('F_0',X113,bool)))) | s(bool,'T_0') = s(bool,X112)) )),
  inference(superposition,[],[f535,f121])).
fof(f18758,plain,(
  ( ! [X146,X147] : (~p(s(bool,happ(s(fun(bool,bool),X147),s(bool,X146)))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X147),s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X147,bool)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X146)))) ) | $spl0),
  inference(superposition,[],[f535,f8984])).
fof(f18759,plain,(
  ( ! [X149,X150,X148] : (~p(s(bool,happ(s(fun(bool,bool),X149),s(bool,X148)))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X149),s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X149,bool)))) | s(bool,X148) = s(bool,X150) | s(bool,'T_0') = s(bool,X150)) ) | $spl0),
  inference(superposition,[],[f535,f9397])).
fof(f18821,plain,(
  ( ! [X92,X93,X91] : (s(bool,'T_0') = s(bool,X93) | ~p(s(bool,happ(s(fun(bool,bool),X92),s(bool,X91)))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X92),s(bool,sK7('T_0',X92,bool)))) | s(bool,X91) = s(bool,X93)) ) | $spl0),
  inference(forward_demodulation,[],[f18737,f901])).
fof(f18737,plain,(
  ( ! [X92,X93,X91] : (~p(s(bool,happ(s(fun(bool,bool),X92),s(bool,X91)))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X92),s(bool,sK7('T_0',X92,bool)))) | s(bool,X93) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X91) = s(bool,X93)) ) | $spl0),
  inference(superposition,[],[f535,f9397])).
fof(f18827,plain,(
  ( ! [X152,X151] : (s(bool,'F_0') = s(bool,X151) | ~p(s(bool,happ(s(fun(bool,bool),X152),s(bool,X151)))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X152),s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X152,bool))))) ) | $spl0),
  inference(forward_demodulation,[],[f18760,f901])).
fof(f18760,plain,(
  ( ! [X152,X151] : (~p(s(bool,happ(s(fun(bool,bool),X152),s(bool,X151)))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X152),s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X152,bool)))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X151)),bool))) ) | $spl0),
  inference(superposition,[],[f535,f7724])).
fof(f727,plain,(
  ( ! [X7] : (s(bool,'T_0') = s(bool,sK7('const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3)))),X7,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X7),s(bool,'T_0'))))) ) | $spl0),
  inference(forward_demodulation,[],[f716,f689])).
fof(f716,plain,(
  ( ! [X7] : (~p(s(bool,happ(s(fun(bool,bool),X7),s(bool,'T_0')))) | s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3))))) = s(bool,sK7('const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3)))),X7,bool))) ) | $spl0),
  inference(superposition,[],[f160,f689])).
fof(f1071,plain,(
  ( ! [X30,X31] : (s(bool,X30) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X30)),bool),X31,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X31),s(bool,'T_0')))) | s(bool,'F_0') = s(bool,X30)) )),
  inference(forward_demodulation,[],[f1051,f901])).
fof(f1051,plain,(
  ( ! [X30,X31] : (~p(s(bool,happ(s(fun(bool,bool),X31),s(bool,'T_0')))) | s(bool,sK6('const.option.SOME_1'(s(bool,X30)),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X30)),bool),X31,bool)) | s(bool,'F_0') = s(bool,X30)) )),
  inference(superposition,[],[f160,f960])).
fof(f1072,plain,(
  ( ! [X50,X51,X49] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X49))),s(bool,X51),s(fun(bool,bool),X50))) | s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X50),s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X49)) ) | $spl0),
  inference(forward_demodulation,[],[f1058,f901])).
fof(f1058,plain,(
  ( ! [X50,X51,X49] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X50),s(bool,'T_0'))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,X49)),bool)))),s(bool,X51),s(fun(bool,bool),X50))) | s(bool,'F_0') = s(bool,X49)) ) | $spl0),
  inference(superposition,[],[f806,f960])).
fof(f1300,plain,(
  ( ! [X90,X91,X89] : (~p(s(bool,happ(s(fun(bool,bool),X90),s(bool,'T_0')))) | s(bool,X89) = s(bool,sK7(X89,X90,bool)) | s(bool,X89) = s(bool,X91) | s(bool,'T_0') = s(bool,X91)) )),
  inference(superposition,[],[f160,f208])).
fof(f1307,plain,(
  ( ! [X118,X116,X117,X115] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X116),s(bool,'T_0'))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X115))),s(bool,X117),s(fun(bool,bool),X116))) | s(bool,X115) = s(bool,X118) | s(bool,'T_0') = s(bool,X118)) ) | $spl0),
  inference(superposition,[],[f806,f208])).
fof(f1761,plain,(
  ( ! [X61,X60] : (~p(s(bool,happ(s(fun(bool,bool),X61),s(bool,'T_0')))) | s(bool,X60) = s(bool,sK7(X60,X61,bool)) | s(bool,'F_0') = s(bool,X60)) ) | $spl0),
  inference(forward_demodulation,[],[f1673,f689])).
fof(f1673,plain,(
  ( ! [X61,X60] : (~p(s(bool,happ(s(fun(bool,bool),X61),s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3)))))))) | s(bool,X60) = s(bool,sK7(X60,X61,bool)) | s(bool,'F_0') = s(bool,X60)) ) | $spl0),
  inference(superposition,[],[f160,f1614])).
fof(f2622,plain,(
  ( ! [X116,X114,X115,X113] : (s(bool,X114) = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X113),'const.option.NONE_0'),s(bool,X114),s(fun(X113,bool),X115)),X116,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X116),s(bool,'T_0')))) | s(bool,'F_0') = s(bool,X114)) )),
  inference(forward_demodulation,[],[f2588,f166])).
fof(f2588,plain,(
  ( ! [X116,X114,X115,X113] : (~p(s(bool,happ(s(fun(bool,bool),X116),s(bool,'T_0')))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(X113),'const.option.NONE_0'),s(bool,X114),s(fun(X113,bool),X115))) = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X113),'const.option.NONE_0'),s(bool,X114),s(fun(X113,bool),X115)),X116,bool)) | s(bool,'F_0') = s(bool,X114)) )),
  inference(superposition,[],[f160,f298])).
fof(f2783,plain,(
  ( ! [X64,X62,X65,X63] : (s(bool,X63) = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X62),'const.option.NONE_0'),s(bool,X63),s(fun(X62,bool),X64)),X65,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X65),s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X63)) ) | $spl0),
  inference(forward_demodulation,[],[f2709,f166])).
fof(f2709,plain,(
  ( ! [X64,X62,X65,X63] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X65),s(bool,'T_0'))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(X62),'const.option.NONE_0'),s(bool,X63),s(fun(X62,bool),X64))) = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X62),'const.option.NONE_0'),s(bool,X63),s(fun(X62,bool),X64)),X65,bool)) | s(bool,'F_0') = s(bool,X63)) ) | $spl0),
  inference(superposition,[],[f1756,f298])).
fof(f2786,plain,(
  ( ! [X71] : (s(bool,'T_0') = s(bool,sK7('const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3)))),X71,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X71),s(bool,'T_0')))) ) | $spl0),
  inference(forward_demodulation,[],[f2712,f689])).
fof(f2712,plain,(
  ( ! [X71] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X71),s(bool,'T_0'))) | s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3))))) = s(bool,sK7('const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3)))),X71,bool))) ) | $spl0),
  inference(superposition,[],[f1756,f689])).
fof(f2787,plain,(
  ( ! [X76,X77] : (s(bool,X76) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X76)),bool),X77,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X77),s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X76)) ) | $spl0),
  inference(forward_demodulation,[],[f2714,f901])).
fof(f2714,plain,(
  ( ! [X76,X77] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X77),s(bool,'T_0'))) | s(bool,sK6('const.option.SOME_1'(s(bool,X76)),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X76)),bool),X77,bool)) | s(bool,'F_0') = s(bool,X76)) ) | $spl0),
  inference(superposition,[],[f1756,f960])).
fof(f3095,plain,(
  ( ! [X64,X62,X65,X63] : (s(bool,X63) = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X62),'const.option.NONE_0'),s(bool,X63),s(fun(X62,bool),X64)),X65,bool)) | s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X65),s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X63)) ) | $spl0),
  inference(forward_demodulation,[],[f3068,f166])).
fof(f3068,plain,(
  ( ! [X64,X62,X65,X63] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X65),s(bool,'T_0'))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(X62),'const.option.NONE_0'),s(bool,X63),s(fun(X62,bool),X64))) = s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X62),'const.option.NONE_0'),s(bool,X63),s(fun(X62,bool),X64)),X65,bool)) | s(bool,'F_0') = s(bool,X63)) ) | $spl0),
  inference(superposition,[],[f2789,f298])).
fof(f3098,plain,(
  ( ! [X71] : (s(bool,'T_0') = s(bool,sK7('const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3)))),X71,bool)) | s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X71),s(bool,'T_0')))) ) | $spl0),
  inference(forward_demodulation,[],[f3071,f689])).
fof(f3071,plain,(
  ( ! [X71] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X71),s(bool,'T_0'))) | s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3))))) = s(bool,sK7('const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3)))),X71,bool))) ) | $spl0),
  inference(superposition,[],[f2789,f689])).
fof(f3099,plain,(
  ( ! [X76,X77] : (s(bool,X76) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X76)),bool),X77,bool)) | s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X77),s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X76)) ) | $spl0),
  inference(forward_demodulation,[],[f3073,f901])).
fof(f3073,plain,(
  ( ! [X76,X77] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X77),s(bool,'T_0'))) | s(bool,sK6('const.option.SOME_1'(s(bool,X76)),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X76)),bool),X77,bool)) | s(bool,'F_0') = s(bool,X76)) ) | $spl0),
  inference(superposition,[],[f2789,f960])).
fof(f17446,plain,(
  ( ! [X225,X226] : (~p(s(bool,happ(s(fun(bool,bool),X226),s(bool,'T_0')))) | s(bool,X225) = s(bool,sK7(X225,X226,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X225)))) ) | $spl0),
  inference(forward_demodulation,[],[f17092,f901])).
fof(f17092,plain,(
  ( ! [X225,X226] : (~p(s(bool,happ(s(fun(bool,bool),X226),s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))))) | s(bool,X225) = s(bool,sK7(X225,X226,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X225)))) ) | $spl0),
  inference(superposition,[],[f160,f8984])).
fof(f17755,plain,(
  ( ! [X200,X199] : (~p(s(bool,happ(s(fun(bool,bool),X200),s(bool,'T_0')))) | s(bool,sK6(X199,bool)) = s(bool,sK7(sK6(X199,bool),X200,bool)) | s('type.option.option'(bool),X199) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X199)) )),
  inference(superposition,[],[f160,f458])).
fof(f18712,plain,(
  ( ! [X24,X23,X22] : (~p(s(bool,happ(s(fun(bool,bool),X23),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X23),s(bool,sK7(X22,X23,bool)))) | s(bool,X22) = s(bool,X24) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f535,f208])).
fof(f18745,plain,(
  ( ! [X116,X114,X117,X115] : (~p(s(bool,happ(s(fun(bool,bool),X117),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X117),s(bool,sK7('const.option.option_CASE_3'(s('type.option.option'(X114),'const.option.NONE_0'),s(bool,X115),s(fun(X114,bool),X116)),X117,bool)))) | s(bool,'F_0') = s(bool,X115)) )),
  inference(superposition,[],[f535,f298])).
fof(f18746,plain,(
  ( ! [X118] : (~p(s(bool,happ(s(fun(bool,bool),X118),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X118),s(bool,sK7('const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3)))),X118,bool))))) ) | $spl0),
  inference(superposition,[],[f535,f689])).
fof(f18762,plain,(
  ( ! [X156,X155] : (~p(s(bool,happ(s(fun(bool,bool),X156),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X156),s(bool,sK7(sK6(X155,bool),X156,bool)))) | s('type.option.option'(bool),X155) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X155)) )),
  inference(superposition,[],[f535,f458])).
fof(f18809,plain,(
  ( ! [X61,X62] : (~p(s(bool,happ(s(fun(bool,bool),X62),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X62),s(bool,sK7(X61,X62,bool)))) | s(bool,'F_0') = s(bool,X61)) ) | $spl0),
  inference(forward_demodulation,[],[f18726,f901])).
fof(f18726,plain,(
  ( ! [X61,X62] : (~p(s(bool,happ(s(fun(bool,bool),X62),s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X62),s(bool,sK7(X61,X62,bool)))) | s(bool,'F_0') = s(bool,X61)) ) | $spl0),
  inference(superposition,[],[f535,f7478])).
fof(f18812,plain,(
  ( ! [X66,X65] : (~p(s(bool,happ(s(fun(bool,bool),X66),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X66),s(bool,sK7(X65,X66,bool)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X65)))) ) | $spl0),
  inference(forward_demodulation,[],[f18728,f901])).
fof(f18728,plain,(
  ( ! [X66,X65] : (~p(s(bool,happ(s(fun(bool,bool),X66),s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X66),s(bool,sK7(X65,X66,bool)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X65)))) ) | $spl0),
  inference(superposition,[],[f535,f8984])).
fof(f440,plain,(
  ( ! [X8,X9] : (~p(s(bool,happ(s(fun(bool,bool),X9),s(bool,'F_0')))) | s(bool,X8) = s(bool,sK7(X8,X9,bool)) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f160,f121])).
fof(f446,plain,(
  ( ! [X4,X5,X3] : (s(bool,'F_0') = s(bool,sK7('const.bool.IN_2'(s(X3,X4),s(fun(X3,bool),'const.pred_set.EMPTY_0')),X5,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X5),s(bool,'F_0'))))) )),
  inference(forward_demodulation,[],[f438,f191])).
fof(f438,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,happ(s(fun(bool,bool),X5),s(bool,'F_0')))) | s(bool,'const.bool.IN_2'(s(X3,X4),s(fun(X3,bool),'const.pred_set.EMPTY_0'))) = s(bool,sK7('const.bool.IN_2'(s(X3,X4),s(fun(X3,bool),'const.pred_set.EMPTY_0')),X5,bool))) )),
  inference(superposition,[],[f160,f191])).
fof(f887,plain,(
  ( ! [X30,X31,X29] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X30),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X29))),s(bool,X31),s(fun(bool,bool),X30))) | s(bool,'T_0') = s(bool,X29)) ) | $spl0),
  inference(superposition,[],[f806,f121])).
fof(f2106,plain,(
  ( ! [X103,X102,X104] : (~p(s(bool,happ(s(fun(bool,bool),X103),s(bool,'F_0')))) | s(bool,X102) = s(bool,sK7(X102,X103,bool)) | s(bool,X102) = s(bool,X104) | s(bool,'F_0') = s(bool,X104)) ) | $spl0),
  inference(superposition,[],[f160,f1632])).
fof(f2114,plain,(
  ( ! [X132,X130,X133,X131] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X131),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X130))),s(bool,X132),s(fun(bool,bool),X131))) | s(bool,X130) = s(bool,X133) | s(bool,'F_0') = s(bool,X133)) ) | $spl0),
  inference(superposition,[],[f806,f1632])).
fof(f2784,plain,(
  ( ! [X68,X66,X67] : (s(bool,'F_0') = s(bool,sK7('const.bool.IN_2'(s(X66,X67),s(fun(X66,bool),'const.pred_set.EMPTY_0')),X68,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X68),s(bool,'F_0')))) ) | $spl0),
  inference(forward_demodulation,[],[f2710,f191])).
fof(f2710,plain,(
  ( ! [X68,X66,X67] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X68),s(bool,'F_0'))) | s(bool,'const.bool.IN_2'(s(X66,X67),s(fun(X66,bool),'const.pred_set.EMPTY_0'))) = s(bool,sK7('const.bool.IN_2'(s(X66,X67),s(fun(X66,bool),'const.pred_set.EMPTY_0')),X68,bool))) ) | $spl0),
  inference(superposition,[],[f1756,f191])).
fof(f3096,plain,(
  ( ! [X68,X66,X67] : (s(bool,'F_0') = s(bool,sK7('const.bool.IN_2'(s(X66,X67),s(fun(X66,bool),'const.pred_set.EMPTY_0')),X68,bool)) | s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X68),s(bool,'F_0')))) ) | $spl0),
  inference(forward_demodulation,[],[f3069,f191])).
fof(f3069,plain,(
  ( ! [X68,X66,X67] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X68),s(bool,'F_0'))) | s(bool,'const.bool.IN_2'(s(X66,X67),s(fun(X66,bool),'const.pred_set.EMPTY_0'))) = s(bool,sK7('const.bool.IN_2'(s(X66,X67),s(fun(X66,bool),'const.pred_set.EMPTY_0')),X68,bool))) ) | $spl0),
  inference(superposition,[],[f2789,f191])).
fof(f3516,plain,(
  ( ! [X191,X189,X190,X188] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X189),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X188))),s(bool,X190),s(fun(bool,bool),X189))) | s(bool,X188) = s(bool,X191) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X191)),bool))) ) | $spl0),
  inference(superposition,[],[f806,f1834])).
fof(f3906,plain,(
  ( ! [X109,X107,X108] : (s(bool,X107) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X107)),bool),X108,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X108),s(bool,'F_0')))) | s(bool,X107) = s(bool,X109) | s(bool,'F_0') = s(bool,X109)) ) | $spl0),
  inference(forward_demodulation,[],[f3565,f901])).
fof(f3565,plain,(
  ( ! [X109,X107,X108] : (~p(s(bool,happ(s(fun(bool,bool),X108),s(bool,'F_0')))) | s(bool,sK6('const.option.SOME_1'(s(bool,X107)),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X107)),bool),X108,bool)) | s(bool,X107) = s(bool,X109) | s(bool,'F_0') = s(bool,X109)) ) | $spl0),
  inference(superposition,[],[f160,f1834])).
fof(f3908,plain,(
  ( ! [X142,X143,X141] : (s(bool,X141) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X141)),bool),X142,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X142),s(bool,'F_0'))) | s(bool,X141) = s(bool,X143) | s(bool,'F_0') = s(bool,X143)) ) | $spl0),
  inference(forward_demodulation,[],[f3575,f901])).
fof(f3575,plain,(
  ( ! [X142,X143,X141] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X142),s(bool,'F_0'))) | s(bool,sK6('const.option.SOME_1'(s(bool,X141)),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X141)),bool),X142,bool)) | s(bool,X141) = s(bool,X143) | s(bool,'F_0') = s(bool,X143)) ) | $spl0),
  inference(superposition,[],[f1756,f1834])).
fof(f3909,plain,(
  ( ! [X146,X144,X145] : (s(bool,X144) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X144)),bool),X145,bool)) | s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X145),s(bool,'F_0'))) | s(bool,X144) = s(bool,X146) | s(bool,'F_0') = s(bool,X146)) ) | $spl0),
  inference(forward_demodulation,[],[f3576,f901])).
fof(f3576,plain,(
  ( ! [X146,X144,X145] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X145),s(bool,'F_0'))) | s(bool,sK6('const.option.SOME_1'(s(bool,X144)),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X144)),bool),X145,bool)) | s(bool,X144) = s(bool,X146) | s(bool,'F_0') = s(bool,X146)) ) | $spl0),
  inference(superposition,[],[f2789,f1834])).
fof(f4731,plain,(
  ( ! [X66,X67] : (s(bool,X66) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X66)),bool),X67,bool)) | s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X67),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X66)) ) | $spl0),
  inference(forward_demodulation,[],[f4700,f901])).
fof(f4700,plain,(
  ( ! [X66,X67] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X67),s(bool,'F_0'))) | s(bool,sK6('const.option.SOME_1'(s(bool,X66)),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X66)),bool),X67,bool)) | s(bool,'T_0') = s(bool,X66)) ) | $spl0),
  inference(superposition,[],[f2789,f3743])).
fof(f5230,plain,(
  ( ! [X64,X63] : (s(bool,X63) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X63)),bool),X64,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X64),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,X63)) ) | $spl0),
  inference(forward_demodulation,[],[f5210,f901])).
fof(f5210,plain,(
  ( ! [X64,X63] : (~p(s(bool,happ(s(fun(bool,bool),X64),s(bool,'F_0')))) | s(bool,sK6('const.option.SOME_1'(s(bool,X63)),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X63)),bool),X64,bool)) | s(bool,'T_0') = s(bool,X63)) ) | $spl0),
  inference(superposition,[],[f160,f3743])).
fof(f5859,plain,(
  ( ! [X72,X71] : (s(bool,X71) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X71)),bool),X72,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X72),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X71)) ) | $spl0),
  inference(forward_demodulation,[],[f5779,f901])).
fof(f5779,plain,(
  ( ! [X72,X71] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X72),s(bool,'F_0'))) | s(bool,sK6('const.option.SOME_1'(s(bool,X71)),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X71)),bool),X72,bool)) | s(bool,'T_0') = s(bool,X71)) ) | $spl0),
  inference(superposition,[],[f1756,f3743])).
fof(f16588,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,'F_0')))) | s(bool,X3) = s(bool,sK7(X3,'const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(fun(bool,bool),X1),s(fun(X0,fun(bool,bool)),X2)),bool)) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f440,f166])).
fof(f16591,plain,(
  ( ! [X14,X15] : (~p(s(bool,happ(s(fun(bool,bool),X14),s(bool,'F_0')))) | s(bool,X15) = s(bool,sK7(X15,sK6('const.option.SOME_1'(s(fun(bool,bool),X14)),fun(bool,bool)),bool)) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f440,f901])).
fof(f16657,plain,(
  ( ! [X45,X46] : (s(bool,X46) = s(bool,sK7(X46,X45,bool)) | s(bool,'T_0') = s(bool,X46) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X45),s(bool,'F_0')))),bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f16656,f114])).
fof(f16656,plain,(
  ( ! [X45,X46] : (~p(s(bool,'T_0')) | s(bool,X46) = s(bool,sK7(X46,X45,bool)) | s(bool,'T_0') = s(bool,X46) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X45),s(bool,'F_0')))),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f16632,f901])).
fof(f16632,plain,(
  ( ! [X45,X46] : (~p(s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) | s(bool,X46) = s(bool,sK7(X46,X45,bool)) | s(bool,'T_0') = s(bool,X46) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X45),s(bool,'F_0')))),bool))) ) | $spl0),
  inference(superposition,[],[f440,f7724])).
fof(f17411,plain,(
  ( ! [X185,X184] : (s(bool,X185) = s(bool,sK7(X185,X184,bool)) | s(bool,'T_0') = s(bool,X185) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X184),s(bool,'F_0')))))) ) | $spl0),
  inference(subsumption_resolution,[],[f17410,f114])).
fof(f17410,plain,(
  ( ! [X185,X184] : (~p(s(bool,'T_0')) | s(bool,X185) = s(bool,sK7(X185,X184,bool)) | s(bool,'T_0') = s(bool,X185) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X184),s(bool,'F_0')))))) ) | $spl0),
  inference(forward_demodulation,[],[f17063,f901])).
fof(f17063,plain,(
  ( ! [X185,X184] : (~p(s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) | s(bool,X185) = s(bool,sK7(X185,X184,bool)) | s(bool,'T_0') = s(bool,X185) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X184),s(bool,'F_0')))))) ) | $spl0),
  inference(superposition,[],[f440,f8984])).
fof(f18700,plain,(
  ( ! [X206,X205] : (s(bool,X205) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X205)),bool),X206,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X206),s(bool,'F_0')))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X205)))) ) | $spl0),
  inference(forward_demodulation,[],[f18557,f901])).
fof(f18557,plain,(
  ( ! [X206,X205] : (~p(s(bool,happ(s(fun(bool,bool),X206),s(bool,'F_0')))) | s(bool,sK6('const.option.SOME_1'(s(bool,X205)),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X205)),bool),X206,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X205)))) ) | $spl0),
  inference(superposition,[],[f160,f9094])).
fof(f18701,plain,(
  ( ! [X229,X228] : (s(bool,X228) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X228)),bool),X229,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X229),s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X228)))) ) | $spl0),
  inference(forward_demodulation,[],[f18567,f901])).
fof(f18567,plain,(
  ( ! [X229,X228] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X229),s(bool,'F_0'))) | s(bool,sK6('const.option.SOME_1'(s(bool,X228)),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X228)),bool),X229,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X228)))) ) | $spl0),
  inference(superposition,[],[f1756,f9094])).
fof(f18702,plain,(
  ( ! [X231,X230] : (s(bool,X230) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X230)),bool),X231,bool)) | s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X231),s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X230)))) ) | $spl0),
  inference(forward_demodulation,[],[f18568,f901])).
fof(f18568,plain,(
  ( ! [X231,X230] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X231),s(bool,'F_0'))) | s(bool,sK6('const.option.SOME_1'(s(bool,X230)),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X230)),bool),X231,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X230)))) ) | $spl0),
  inference(superposition,[],[f2789,f9094])).
fof(f18711,plain,(
  ( ! [X21,X20] : (~p(s(bool,happ(s(fun(bool,bool),X21),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X21),s(bool,sK7(X20,X21,bool)))) | s(bool,'T_0') = s(bool,X20)) )),
  inference(superposition,[],[f535,f121])).
fof(f18716,plain,(
  ( ! [X35,X36,X34] : (~p(s(bool,happ(s(fun(bool,bool),X35),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X35),s(bool,sK7(X34,X35,bool)))) | s(bool,X34) = s(bool,X36) | s(bool,'F_0') = s(bool,X36)) ) | $spl0),
  inference(superposition,[],[f535,f1632])).
fof(f18747,plain,(
  ( ! [X121,X120,X119] : (~p(s(bool,happ(s(fun(bool,bool),X121),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X121),s(bool,sK7('const.bool.IN_2'(s(X119,X120),s(fun(X119,bool),'const.pred_set.EMPTY_0')),X121,bool))))) )),
  inference(superposition,[],[f535,f191])).
fof(f18748,plain,(
  ( ! [X125,X123,X124,X122] : (~p(s(bool,happ(s(fun(bool,bool),X125),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X125),s(bool,sK7(happ(s(fun(X122,bool),X123),s(X122,X124)),X125,bool)))) | s(X122,X124) = s(X122,sK7(X124,X123,X122))) ) | $spl0),
  inference(superposition,[],[f535,f1756])).
fof(f18749,plain,(
  ( ! [X127,X126] : (~p(s(bool,happ(s(fun(bool,bool),X127),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X127),s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X126)),bool),X127,bool)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X126)))) ) | $spl0),
  inference(superposition,[],[f535,f9094])).
fof(f18751,plain,(
  ( ! [X132,X130,X131] : (~p(s(bool,happ(s(fun(bool,bool),X131),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X131),s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X130)),bool),X131,bool)))) | s(bool,X130) = s(bool,X132) | s(bool,'F_0') = s(bool,X132)) ) | $spl0),
  inference(superposition,[],[f535,f1834])).
fof(f18824,plain,(
  ( ! [X128,X129] : (s(bool,'T_0') = s(bool,X128) | ~p(s(bool,happ(s(fun(bool,bool),X129),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X129),s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X128)),bool),X129,bool))))) ) | $spl0),
  inference(forward_demodulation,[],[f18750,f901])).
fof(f18750,plain,(
  ( ! [X128,X129] : (~p(s(bool,happ(s(fun(bool,bool),X129),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X129),s(bool,sK7(sK6('const.option.SOME_1'(s(bool,X128)),bool),X129,bool)))) | s(bool,X128) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f535,f7724])).
fof(f15636,plain,(
  ( ! [X6,X4,X8,X7,X5] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(X4,fun(bool,bool)),X7),s(X4,X5))),s(bool,X8)))) | s(bool,'F_0') = s(bool,sK7('F_0','const.option.option_CASE_3'(s('type.option.option'(X4),'const.option.SOME_1'(s(X4,X5))),s(fun(bool,bool),X6),s(fun(X4,fun(bool,bool)),X7)),bool)) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f439,f168])).
fof(f16589,plain,(
  ( ! [X6,X4,X8,X7,X5] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(X4,fun(bool,bool)),X7),s(X4,X5))),s(bool,'F_0')))) | s(bool,X8) = s(bool,sK7(X8,'const.option.option_CASE_3'(s('type.option.option'(X4),'const.option.SOME_1'(s(X4,X5))),s(fun(bool,bool),X6),s(fun(X4,fun(bool,bool)),X7)),bool)) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f440,f168])).
fof(f15637,plain,(
  ( ! [X12,X10,X13,X11,X9] : (~p(s(bool,happ(s(fun(bool,bool),'const.option.option_CASE_3'(s('type.option.option'(X9),X10),s(fun(bool,bool),X11),s(fun(X9,fun(bool,bool)),X12))),s(bool,X13)))) | s(bool,'F_0') = s(bool,sK7('F_0',happ(s(fun(fun(X9,fun(bool,bool)),fun(bool,bool)),happ(s(fun(fun(bool,bool),fun(fun(X9,fun(bool,bool)),fun(bool,bool))),happ(s(fun('type.option.option'(X9),fun(fun(bool,bool),fun(fun(X9,fun(bool,bool)),fun(bool,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X9),X10))),s(fun(bool,bool),X11))),s(fun(X9,fun(bool,bool)),X12)),bool)) | s(bool,'T_0') = s(bool,X13)) )),
  inference(superposition,[],[f439,f169])).
fof(f16590,plain,(
  ( ! [X12,X10,X13,X11,X9] : (~p(s(bool,happ(s(fun(bool,bool),'const.option.option_CASE_3'(s('type.option.option'(X9),X10),s(fun(bool,bool),X11),s(fun(X9,fun(bool,bool)),X12))),s(bool,'F_0')))) | s(bool,X13) = s(bool,sK7(X13,happ(s(fun(fun(X9,fun(bool,bool)),fun(bool,bool)),happ(s(fun(fun(bool,bool),fun(fun(X9,fun(bool,bool)),fun(bool,bool))),happ(s(fun('type.option.option'(X9),fun(fun(bool,bool),fun(fun(X9,fun(bool,bool)),fun(bool,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X9),X10))),s(fun(bool,bool),X11))),s(fun(X9,fun(bool,bool)),X12)),bool)) | s(bool,'T_0') = s(bool,X13)) )),
  inference(superposition,[],[f440,f169])).
fof(f17320,plain,(
  ( ! [X35,X33,X34] : (s(bool,'T_0') = s(bool,X33) | ~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X34),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X33)))))) | p(s(bool,happ(s(fun('type.option.option'(bool),bool),X34),s('type.option.option'(bool),X35)))) | s('type.option.option'(bool),X35) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))) ) | $spl0),
  inference(forward_demodulation,[],[f16925,f901])).
fof(f16925,plain,(
  ( ! [X35,X33,X34] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X34),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X33)))))) | p(s(bool,happ(s(fun('type.option.option'(bool),bool),X34),s('type.option.option'(bool),X35)))) | s('type.option.option'(bool),X35) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,X33) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f159,f8984])).
fof(f17332,plain,(
  ( ! [X35,X33,X34] : (s(bool,'T_0') = s(bool,X33) | ~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X34),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))) | p(s(bool,happ(s(fun('type.option.option'(bool),bool),X34),s('type.option.option'(bool),X35)))) | s('type.option.option'(bool),X35) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X33)))) ) | $spl0),
  inference(forward_demodulation,[],[f16954,f901])).
fof(f16954,plain,(
  ( ! [X35,X33,X34] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X34),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))) | p(s(bool,happ(s(fun('type.option.option'(bool),bool),X34),s('type.option.option'(bool),X35)))) | s('type.option.option'(bool),X35) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X33))) | s(bool,X33) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f159,f8984])).
fof(f17590,plain,(
  ( ! [X37,X35,X36] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X36),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))) | p(s(bool,happ(s(fun('type.option.option'(bool),bool),X36),s('type.option.option'(bool),X37)))) | s('type.option.option'(bool),X35) != s('type.option.option'(bool),X37) | s(bool,'T_0') = s(bool,sK6(X35,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X35)) )),
  inference(superposition,[],[f159,f458])).
fof(f17608,plain,(
  ( ! [X83,X82] : (p(s(bool,happ(s(fun('type.option.option'(bool),bool),X83),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))) | ~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X83),s('type.option.option'(bool),X82)))) | s(bool,'T_0') = s(bool,sK6(sK7(X82,X83,'type.option.option'(bool)),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),sK7(X82,X83,'type.option.option'(bool)))) )),
  inference(superposition,[],[f161,f458])).
fof(f17627,plain,(
  ( ! [X37,X38,X36] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X37),s('type.option.option'(bool),X36)))) | p(s(bool,happ(s(fun('type.option.option'(bool),bool),X37),s('type.option.option'(bool),X38)))) | s('type.option.option'(bool),X38) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK6(X36,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X36)) )),
  inference(superposition,[],[f159,f458])).
fof(f17628,plain,(
  ( ! [X39,X40] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X40),s('type.option.option'(bool),X39)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'F_0')),X40,'type.option.option'(bool))) | s(bool,'T_0') = s(bool,sK6(X39,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X39)) )),
  inference(superposition,[],[f160,f458])).
fof(f18766,plain,(
  ( ! [X163,X164] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X164),s('type.option.option'(bool),X163)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X164),s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'F_0')),X164,'type.option.option'(bool))))) | s(bool,'T_0') = s(bool,sK6(X163,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X163)) )),
  inference(superposition,[],[f535,f458])).
fof(f469,plain,(
  ( ! [X28,X26,X27] : (~p(s(bool,happ(s(fun('type.option.option'(X26),bool),X28),s('type.option.option'(X26),X27)))) | s('type.option.option'(X26),'const.option.SOME_1'(s(X26,sK6(X27,X26)))) = s('type.option.option'(X26),sK7('const.option.SOME_1'(s(X26,sK6(X27,X26))),X28,'type.option.option'(X26))) | s('type.option.option'(X26),'const.option.NONE_0') = s('type.option.option'(X26),X27)) )),
  inference(superposition,[],[f160,f148])).
fof(f736,plain,(
  ( ! [X28,X26,X27,X25] : (~p(s(bool,happ(s(fun('type.option.option'(X25),bool),X27),s('type.option.option'(X25),X26)))) | p(s(bool,happ(s(fun('type.option.option'(X25),bool),X27),s('type.option.option'(X25),X28)))) | s('type.option.option'(X25),X28) != s('type.option.option'(X25),'const.option.SOME_1'(s(X25,sK6(X26,X25)))) | s('type.option.option'(X25),'const.option.NONE_0') = s('type.option.option'(X25),X26)) )),
  inference(superposition,[],[f159,f148])).
fof(f888,plain,(
  ( ! [X35,X33,X34,X32] : (s(bool,'T_0') != s(bool,happ(s(fun('type.option.option'(X32),bool),X34),s('type.option.option'(X32),X33))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'('type.option.option'(X32)),'const.option.SOME_1'(s('type.option.option'(X32),'const.option.SOME_1'(s(X32,sK6(X33,X32)))))),s(bool,X35),s(fun('type.option.option'(X32),bool),X34))) | s('type.option.option'(X32),'const.option.NONE_0') = s('type.option.option'(X32),X33)) ) | $spl0),
  inference(superposition,[],[f806,f148])).
fof(f2715,plain,(
  ( ! [X80,X78,X79] : (s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(X78),bool),X80),s('type.option.option'(X78),X79))) | s('type.option.option'(X78),'const.option.SOME_1'(s(X78,sK6(X79,X78)))) = s('type.option.option'(X78),sK7('const.option.SOME_1'(s(X78,sK6(X79,X78))),X80,'type.option.option'(X78))) | s('type.option.option'(X78),'const.option.NONE_0') = s('type.option.option'(X78),X79)) ) | $spl0),
  inference(superposition,[],[f1756,f148])).
fof(f3074,plain,(
  ( ! [X80,X78,X79] : (s(bool,'T_0') != s(bool,happ(s(fun('type.option.option'(X78),bool),X80),s('type.option.option'(X78),X79))) | s('type.option.option'(X78),'const.option.SOME_1'(s(X78,sK6(X79,X78)))) = s('type.option.option'(X78),sK7('const.option.SOME_1'(s(X78,sK6(X79,X78))),X80,'type.option.option'(X78))) | s('type.option.option'(X78),'const.option.NONE_0') = s('type.option.option'(X78),X79)) ) | $spl0),
  inference(superposition,[],[f2789,f148])).
fof(f18768,plain,(
  ( ! [X167,X169,X168] : (~p(s(bool,happ(s(fun('type.option.option'(X167),bool),X169),s('type.option.option'(X167),X168)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.option.option'(X167),bool),X169),s('type.option.option'(X167),sK7('const.option.SOME_1'(s(X167,sK6(X168,X167))),X169,'type.option.option'(X167))))) | s('type.option.option'(X167),'const.option.NONE_0') = s('type.option.option'(X167),X168)) )),
  inference(superposition,[],[f535,f148])).
fof(f17321,plain,(
  ( ! [X37,X36] : (s(bool,'T_0') = s(bool,X36) | ~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X37),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X36)))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'F_0')),X37,'type.option.option'(bool)))) ) | $spl0),
  inference(forward_demodulation,[],[f16926,f901])).
fof(f16926,plain,(
  ( ! [X37,X36] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X37),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X36)))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'F_0')),X37,'type.option.option'(bool))) | s(bool,X36) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f160,f8984])).
fof(f18831,plain,(
  ( ! [X165,X166] : (s(bool,'T_0') = s(bool,X165) | ~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X166),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X165)))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X166),s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'F_0')),X166,'type.option.option'(bool)))))) ) | $spl0),
  inference(forward_demodulation,[],[f18767,f901])).
fof(f18767,plain,(
  ( ! [X165,X166] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X166),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X165)))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X166),s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'F_0')),X166,'type.option.option'(bool))))) | s(bool,X165) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f535,f8984])).
fof(f17333,plain,(
  ( ! [X37,X36] : (s(bool,'T_0') = s(bool,X36) | ~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X37),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X36))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,X36)),X37,'type.option.option'(bool)))) ) | $spl0),
  inference(forward_demodulation,[],[f16955,f901])).
fof(f16955,plain,(
  ( ! [X37,X36] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X37),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X36))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,X36)),X37,'type.option.option'(bool))) | s(bool,X36) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f160,f8984])).
fof(f17591,plain,(
  ( ! [X39,X38] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X39),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))) | s('type.option.option'(bool),X38) = s('type.option.option'(bool),sK7(X38,X39,'type.option.option'(bool))) | s(bool,'T_0') = s(bool,sK6(X38,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X38)) )),
  inference(superposition,[],[f160,f458])).
fof(f18769,plain,(
  ( ! [X171,X170] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X171),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X171),s('type.option.option'(bool),sK7(X170,X171,'type.option.option'(bool))))) | s(bool,'T_0') = s(bool,sK6(X170,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X170)) )),
  inference(superposition,[],[f535,f458])).
fof(f18828,plain,(
  ( ! [X158,X157] : (s(bool,'T_0') = s(bool,X157) | ~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X158),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X158),s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,X157)),X158,'type.option.option'(bool)))))) ) | $spl0),
  inference(forward_demodulation,[],[f18763,f901])).
fof(f18763,plain,(
  ( ! [X158,X157] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X158),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X158),s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,X157)),X158,'type.option.option'(bool))))) | s(bool,X157) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f535,f8984])).
fof(f10379,plain,(
  ( ! [X125,X123,X126,X124,X122] : (s(bool,'F_0') != s(bool,X123) | s(bool,sK6('const.option.SOME_1'(s(bool,X122)),bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X124),'const.option.NONE_0'),s(bool,X123),s(fun(X124,bool),X125))) | s(bool,X122) = s(bool,X126) | s(bool,'F_0') = s(bool,X126)) ) | $spl0),
  inference(superposition,[],[f9763,f1834])).
fof(f10389,plain,(
  ( ! [X173,X171,X174,X172] : (s(bool,X171) != s(bool,X172) | s(bool,sK6('const.option.SOME_1'(s(bool,X171)),bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X173),'const.option.NONE_0'),s(bool,X172),s(fun(X173,bool),X174)))) ) | $spl0),
  inference(superposition,[],[f9763,f901])).
fof(f10432,plain,(
  ( ! [X121,X118,X120,X119] : (s(bool,'T_0') = s(bool,X118) | s(bool,'F_0') != s(bool,X119) | s(bool,sK6('const.option.SOME_1'(s(bool,X118)),bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X120),'const.option.NONE_0'),s(bool,X119),s(fun(X120,bool),X121)))) ) | $spl0),
  inference(forward_demodulation,[],[f10378,f901])).
fof(f10378,plain,(
  ( ! [X121,X118,X120,X119] : (s(bool,'F_0') != s(bool,X119) | s(bool,sK6('const.option.SOME_1'(s(bool,X118)),bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X120),'const.option.NONE_0'),s(bool,X119),s(fun(X120,bool),X121))) | s(bool,X118) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f9763,f7724])).
fof(f17731,plain,(
  ( ! [X156,X154,X157,X155] : (s(bool,'T_0') != s(bool,X155) | s(bool,sK6(X154,bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X156),'const.option.NONE_0'),s(bool,X155),s(fun(X156,bool),X157))) | s('type.option.option'(bool),X154) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X154)) ) | $spl0),
  inference(superposition,[],[f9763,f458])).
fof(f18085,plain,(
  ( ! [X116,X114,X117,X115] : (s('type.option.option'(bool),X117) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,sK6(X117,bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X114),'const.option.NONE_0'),s(bool,X115),s(fun(X114,bool),X116))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X117) | s(bool,'F_0') = s(bool,X115)) )),
  inference(superposition,[],[f459,f298])).
fof(f18531,plain,(
  ( ! [X158,X156,X159,X157] : (s(bool,'F_0') != s(bool,X157) | s(bool,sK6('const.option.SOME_1'(s(bool,X156)),bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X158),'const.option.NONE_0'),s(bool,X157),s(fun(X158,bool),X159))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X156)))) ) | $spl0),
  inference(superposition,[],[f9763,f9094])).
fof(f18088,plain,(
  ( ! [X125,X123,X124,X122] : (s('type.option.option'(bool),X125) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,sK6(X125,bool)) = s(bool,happ(s(fun(X122,bool),X123),s(X122,X124))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X125) | s(X122,X124) = s(X122,sK7(X124,X123,X122))) ) | $spl0),
  inference(superposition,[],[f459,f1756])).
fof(f3315,plain,(
  ( ! [X253,X252] : (s('type.option.option'(bool),X252) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X253))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X252) | s(bool,'F_0') = s(bool,X253) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,sK6(X252,bool))),bool))) ) | $spl0),
  inference(superposition,[],[f148,f1834])).
fof(f9058,plain,(
  ( ! [X144] : (s('type.option.option'(bool),X144) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X144) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,sK6(X144,bool))),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f8814,f901])).
fof(f8814,plain,(
  ( ! [X144] : (s('type.option.option'(bool),X144) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X144) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,sK6(X144,bool))),bool))) ) | $spl0),
  inference(superposition,[],[f148,f7724])).
fof(f17456,plain,(
  ( ! [X267] : (s('type.option.option'(bool),X267) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X267) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6(X267,bool))))) ) | $spl0),
  inference(forward_demodulation,[],[f17107,f901])).
fof(f17107,plain,(
  ( ! [X267] : (s('type.option.option'(bool),X267) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X267) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6(X267,bool))))) ) | $spl0),
  inference(superposition,[],[f148,f8984])).
fof(f17588,plain,(
  ( ! [X31,X32] : (s('type.option.option'(bool),X32) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X31))) = s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X32))) | s(bool,'T_0') = s(bool,sK6(X31,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X31)) )),
  inference(superposition,[],[f158,f458])).
fof(f17600,plain,(
  ( ! [X59,X60] : (s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X60),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s('type.option.option'(bool),X59) = s('type.option.option'(bool),sK7(X59,X60,'type.option.option'(bool))) | s(bool,'T_0') = s(bool,sK6(X59,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X59)) ) | $spl0),
  inference(superposition,[],[f1756,f458])).
fof(f17601,plain,(
  ( ! [X61,X62] : (s(bool,'T_0') != s(bool,happ(s(fun('type.option.option'(bool),bool),X62),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s('type.option.option'(bool),X61) = s('type.option.option'(bool),sK7(X61,X62,'type.option.option'(bool))) | s(bool,'T_0') = s(bool,sK6(X61,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X61)) ) | $spl0),
  inference(superposition,[],[f2789,f458])).
fof(f17617,plain,(
  ( ! [X14,X17,X15,X16] : (s(X15,happ(s(fun(bool,X15),X16),s(bool,'F_0'))) = s(X15,'const.option.option_CASE_3'(s('type.option.option'(bool),X14),s(X15,X17),s(fun(bool,X15),X16))) | s(bool,'T_0') = s(bool,sK6(X14,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X14)) )),
  inference(superposition,[],[f168,f458])).
fof(f17623,plain,(
  ( ! [X28,X29] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X28))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X29))) | s('type.option.option'(bool),X29) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK6(X28,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X28)) )),
  inference(superposition,[],[f157,f458])).
fof(f17637,plain,(
  ( ! [X61,X60] : (s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X61),s('type.option.option'(bool),X60))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'F_0')),X61,'type.option.option'(bool))) | s(bool,'T_0') = s(bool,sK6(X60,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X60)) ) | $spl0),
  inference(superposition,[],[f1756,f458])).
fof(f17638,plain,(
  ( ! [X62,X63] : (s(bool,'T_0') != s(bool,happ(s(fun('type.option.option'(bool),bool),X63),s('type.option.option'(bool),X62))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'F_0')),X63,'type.option.option'(bool))) | s(bool,'T_0') = s(bool,sK6(X62,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X62)) ) | $spl0),
  inference(superposition,[],[f2789,f458])).
fof(f17730,plain,(
  ( ! [X152,X151,X153,X150] : (s(bool,'T_0') != s(bool,X151) | s(bool,X151) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X152),'const.option.NONE_0'),s(bool,sK6(X150,bool)),s(fun(X152,bool),X153))) | s('type.option.option'(bool),X150) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X150)) ) | $spl0),
  inference(superposition,[],[f9763,f458])).
fof(f17752,plain,(
  ( ! [X192,X193] : (s(bool,'T_0') != s(bool,X193) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X193))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6(X192,bool)))) | s('type.option.option'(bool),X192) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X192)) )),
  inference(superposition,[],[f158,f458])).
fof(f17764,plain,(
  ( ! [X220,X221] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X221),s(bool,'T_0'))) | s(bool,sK6(X220,bool)) = s(bool,sK7(sK6(X220,bool),X221,bool)) | s('type.option.option'(bool),X220) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X220)) ) | $spl0),
  inference(superposition,[],[f1756,f458])).
fof(f17765,plain,(
  ( ! [X222,X223] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X223),s(bool,'T_0'))) | s(bool,sK6(X222,bool)) = s(bool,sK7(sK6(X222,bool),X223,bool)) | s('type.option.option'(bool),X222) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X222)) ) | $spl0),
  inference(superposition,[],[f2789,f458])).
fof(f17773,plain,(
  ( ! [X130,X128,X129] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X129),'const.option.NONE_0'),s(bool,sK6(X128,bool)),s(fun(X129,bool),X130))) | s('type.option.option'(bool),X128) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X128)) ) | $spl0),
  inference(trivial_inequality_removal,[],[f17715])).
fof(f17715,plain,(
  ( ! [X130,X128,X129] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X129),'const.option.NONE_0'),s(bool,sK6(X128,bool)),s(fun(X129,bool),X130))) | s('type.option.option'(bool),X128) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X128)) ) | $spl0),
  inference(superposition,[],[f5098,f458])).
fof(f17775,plain,(
  ( ! [X103,X104] : (s(bool,X104) = s(bool,sK6('const.option.SOME_1'(s(bool,sK6(X103,bool))),bool)) | s(bool,'F_0') = s(bool,X104) | s('type.option.option'(bool),X103) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X103)) ) | $spl0),
  inference(trivial_inequality_removal,[],[f17699])).
fof(f17699,plain,(
  ( ! [X103,X104] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X104) = s(bool,sK6('const.option.SOME_1'(s(bool,sK6(X103,bool))),bool)) | s(bool,'F_0') = s(bool,X104) | s('type.option.option'(bool),X103) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X103)) ) | $spl0),
  inference(superposition,[],[f2660,f458])).
fof(f17816,plain,(
  ( ! [X37,X38] : (~p(s(bool,X38)) | s(bool,X38) = s(bool,sK6(X37,bool)) | s('type.option.option'(bool),X37) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X37)) )),
  inference(subsumption_resolution,[],[f17668,f114])).
fof(f17668,plain,(
  ( ! [X37,X38] : (~p(s(bool,'T_0')) | ~p(s(bool,X38)) | s(bool,X38) = s(bool,sK6(X37,bool)) | s('type.option.option'(bool),X37) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X37)) )),
  inference(superposition,[],[f165,f458])).
fof(f18089,plain,(
  ( ! [X127,X126] : (s('type.option.option'(bool),X127) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,sK6(X127,bool)) = s(bool,sK6('const.option.SOME_1'(s(bool,X126)),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X127) | s(bool,X126) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f459,f7724])).
fof(f18090,plain,(
  ( ! [X130,X128,X129] : (s('type.option.option'(bool),X129) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,sK6(X129,bool)) = s(bool,sK6('const.option.SOME_1'(s(bool,X128)),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X129) | s(bool,X128) = s(bool,X130) | s(bool,'F_0') = s(bool,X130)) ) | $spl0),
  inference(superposition,[],[f459,f1834])).
fof(f18092,plain,(
  ( ! [X134,X133] : (s('type.option.option'(bool),X134) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,sK6(X134,bool)) = s(bool,sK6('const.option.SOME_1'(s(bool,X133)),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X134) | s(bool,'T_0') = s(bool,X133)) ) | $spl0),
  inference(superposition,[],[f459,f3743])).
fof(f18101,plain,(
  ( ! [X154,X153] : (s('type.option.option'(bool),X154) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,sK6(X153,bool)) = s(bool,sK6(X154,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X154) | s('type.option.option'(bool),X153) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X153)) )),
  inference(superposition,[],[f459,f458])).
fof(f18105,plain,(
  ( ! [X161,X162] : (s('type.option.option'('type.option.option'(bool)),X162) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X161))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK6(X162,'type.option.option'(bool))) | s('type.option.option'('type.option.option'(bool)),'const.option.NONE_0') = s('type.option.option'('type.option.option'(bool)),X162) | s(bool,'T_0') = s(bool,sK6(X161,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X161)) )),
  inference(superposition,[],[f459,f458])).
fof(f18565,plain,(
  ( ! [X225,X226] : (s('type.option.option'(bool),X226) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,sK6(X226,bool)) = s(bool,sK6('const.option.SOME_1'(s(bool,X225)),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X226) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X225)))) ) | $spl0),
  inference(superposition,[],[f459,f9094])).
fof(f2704,plain,(
  ( ! [X50,X48,X49] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X49),s(bool,X48))) | s(bool,'T_0') = s(bool,sK7('T_0',X49,bool)) | s(bool,X48) = s(bool,X50) | s(bool,'T_0') = s(bool,X50)) ) | $spl0),
  inference(superposition,[],[f1756,f208])).
fof(f3063,plain,(
  ( ! [X50,X48,X49] : (s(bool,X48) != s(bool,happ(s(fun(bool,bool),X49),s(bool,X48))) | s(bool,'T_0') = s(bool,sK7('T_0',X49,bool)) | s(bool,X48) = s(bool,X50) | s(bool,'T_0') = s(bool,X50)) ) | $spl0),
  inference(superposition,[],[f2789,f208])).
fof(f2706,plain,(
  ( ! [X54,X56,X55] : (s(bool,X54) = s(bool,happ(s(fun(bool,bool),X55),s(bool,X54))) | s(bool,'F_0') = s(bool,sK7('F_0',X55,bool)) | s(bool,X54) = s(bool,X56) | s(bool,'F_0') = s(bool,X56)) ) | $spl0),
  inference(superposition,[],[f1756,f1632])).
fof(f2708,plain,(
  ( ! [X61,X60] : (s(bool,X60) = s(bool,happ(s(fun(bool,bool),X61),s(bool,X60))) | s(bool,'F_0') = s(bool,sK7('F_0',X61,bool)) | s(bool,'T_0') = s(bool,X60)) ) | $spl0),
  inference(superposition,[],[f1756,f121])).
fof(f3065,plain,(
  ( ! [X54,X56,X55] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X55),s(bool,X54))) | s(bool,'F_0') = s(bool,sK7('F_0',X55,bool)) | s(bool,X54) = s(bool,X56) | s(bool,'F_0') = s(bool,X56)) ) | $spl0),
  inference(superposition,[],[f2789,f1632])).
fof(f3067,plain,(
  ( ! [X61,X60] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X61),s(bool,X60))) | s(bool,'F_0') = s(bool,sK7('F_0',X61,bool)) | s(bool,'T_0') = s(bool,X60)) ) | $spl0),
  inference(superposition,[],[f2789,f121])).
fof(f3452,plain,(
  ( ! [X152,X151,X150] : (s(bool,X150) = s(bool,happ(s(fun(bool,bool),X151),s(bool,X150))) | s(bool,'F_0') = s(bool,sK7('F_0',X151,bool)) | s(bool,X150) = s(bool,X152) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X152)),bool))) ) | $spl0),
  inference(superposition,[],[f1756,f1834])).
fof(f3453,plain,(
  ( ! [X154,X155,X153] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X154),s(bool,X153))) | s(bool,'F_0') = s(bool,sK7('F_0',X154,bool)) | s(bool,X153) = s(bool,X155) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X155)),bool))) ) | $spl0),
  inference(superposition,[],[f2789,f1834])).
fof(f15749,plain,(
  ( ! [X6,X4,X5] : (s(bool,'F_0') = s(bool,sK7('F_0',X4,bool)) | s(bool,'T_0') = s(bool,X5) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X4),s(bool,X5))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f15691,f114])).
fof(f15691,plain,(
  ( ! [X6,X4,X5] : (~p(s(bool,'T_0')) | s(bool,'F_0') = s(bool,sK7('F_0',X4,bool)) | s(bool,'T_0') = s(bool,X5) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X4),s(bool,X5))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f439,f208])).
fof(f15758,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,sK7('F_0',X0,bool)) | s(bool,'T_0') = s(bool,X1) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X0),s(bool,X1)))) ) | $spl0),
  inference(condensation,[],[f15757])).
fof(f15757,plain,(
  ( ! [X33,X31,X32] : (s(bool,'F_0') = s(bool,X33) | s(bool,'F_0') = s(bool,sK7('F_0',X31,bool)) | s(bool,'T_0') = s(bool,X32) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X31),s(bool,X32)))) ) | $spl0),
  inference(subsumption_resolution,[],[f15756,f128])).
fof(f15756,plain,(
  ( ! [X33,X31,X32] : (s(bool,'F_0') = s(bool,X33) | ~p(s(bool,X33)) | s(bool,'F_0') = s(bool,sK7('F_0',X31,bool)) | s(bool,'T_0') = s(bool,X32) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X31),s(bool,X32)))) ) | $spl0),
  inference(forward_demodulation,[],[f15700,f901])).
fof(f15700,plain,(
  ( ! [X33,X31,X32] : (~p(s(bool,X33)) | s(bool,'F_0') = s(bool,sK7('F_0',X31,bool)) | s(bool,'T_0') = s(bool,X32) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X31),s(bool,X32))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X33)),bool))) ) | $spl0),
  inference(superposition,[],[f439,f1834])).
fof(f3318,plain,(
  ( ! [X261,X259,X260,X262] : (s(X261,f(s(bool,X262))) != s(X261,g(s(bool,X262))) | s(fun(bool,X261),X259) = s(fun(bool,X261),X260) | s(bool,'F_0') = s(bool,X262) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,sK8(X259,X260,X261,bool))),bool))) ) | $spl0),
  inference(superposition,[],[f167,f1834])).
fof(f9061,plain,(
  ( ! [X146,X147,X148] : (s(X148,f(s(bool,'T_0'))) != s(X148,g(s(bool,'T_0'))) | s(fun(bool,X148),X146) = s(fun(bool,X148),X147) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,sK8(X146,X147,X148,bool))),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f8816,f901])).
fof(f8816,plain,(
  ( ! [X146,X147,X148] : (s(X148,f(s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)))) != s(X148,g(s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)))) | s(fun(bool,X148),X146) = s(fun(bool,X148),X147) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,sK8(X146,X147,X148,bool))),bool))) ) | $spl0),
  inference(superposition,[],[f167,f7724])).
fof(f17460,plain,(
  ( ! [X271,X273,X272] : (s(X273,f(s(bool,'T_0'))) != s(X273,g(s(bool,'T_0'))) | s(fun(bool,X273),X271) = s(fun(bool,X273),X272) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK8(X271,X272,X273,bool))))) ) | $spl0),
  inference(forward_demodulation,[],[f17110,f901])).
fof(f17110,plain,(
  ( ! [X271,X273,X272] : (s(X273,f(s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)))) != s(X273,g(s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)))) | s(fun(bool,X273),X271) = s(fun(bool,X273),X272) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK8(X271,X272,X273,bool))))) ) | $spl0),
  inference(superposition,[],[f167,f8984])).
fof(f18697,plain,(
  ( ! [X198,X199] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X198))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X199))) | s(bool,'F_0') != s(bool,X199) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X198)))) ) | $spl0),
  inference(forward_demodulation,[],[f18554,f901])).
fof(f18554,plain,(
  ( ! [X198,X199] : (s(bool,'F_0') != s(bool,X199) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X199))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,X198)),bool)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X198)))) ) | $spl0),
  inference(superposition,[],[f158,f9094])).
fof(f18552,plain,(
  ( ! [X194,X195] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X195))) | s(bool,X195) = s(bool,sK6('const.option.SOME_1'(s(bool,X194)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X194)))) ) | $spl0),
  inference(superposition,[],[f157,f9094])).
fof(f18658,plain,(
  ( ! [X94,X95,X93] : (s(bool,X94) = s(bool,sK6('const.option.SOME_1'(s(bool,X93)),bool)) | s(bool,X94) = s(bool,X95) | s(bool,'F_0') = s(bool,X95) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X93)))) ) | $spl0),
  inference(subsumption_resolution,[],[f18493,f179])).
fof(f18493,plain,(
  ( ! [X94,X95,X93] : (p(s(bool,'F_0')) | s(bool,X94) = s(bool,sK6('const.option.SOME_1'(s(bool,X93)),bool)) | s(bool,X94) = s(bool,X95) | s(bool,'F_0') = s(bool,X95) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X93)))) ) | $spl0),
  inference(superposition,[],[f2416,f9094])).
fof(f18638,plain,(
  ( ! [X43,X44] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X43))) | s(bool,X44) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X44) = s(bool,sK6('const.option.SOME_1'(s(bool,X43)),bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f18433,f180])).
fof(f18433,plain,(
  ( ! [X43,X44] : (s(bool,'T_0') = s(bool,'F_0') | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X43))) | s(bool,X44) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X44) = s(bool,sK6('const.option.SOME_1'(s(bool,X43)),bool))) ) | $spl0),
  inference(superposition,[],[f9094,f9397])).
fof(f18210,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,X5) != s(bool,sK6('const.option.SOME_1'(s(bool,X4)),bool)) | s(bool,X5) = s(bool,X6) | s(bool,'F_0') = s(bool,X6) | s(bool,X4) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) ) | $spl0),
  inference(superposition,[],[f17475,f208])).
fof(f18209,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X1) != s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool)) | s(bool,X1) = s(bool,X2) | s(bool,'F_0') = s(bool,X2) | s(bool,X3) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X0) = s(bool,X3)) ) | $spl0),
  inference(superposition,[],[f17475,f9397])).
fof(f18208,plain,(
  ( ! [X140,X141] : (s(bool,X140) != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X141) = s(bool,sK6('const.option.SOME_1'(s(bool,X140)),bool)) | s(bool,'F_0') = s(bool,X141)) ) | $spl0),
  inference(superposition,[],[f17475,f901])).
fof(f18114,plain,(
  ( ! [X12,X10,X11] : (s('type.option.option'(X10),X11) != s('type.option.option'(X10),X12) | s(X10,sK6(X11,X10)) = s(X10,sK6(X12,X10)) | s('type.option.option'(X10),'const.option.NONE_0') = s('type.option.option'(X10),X12) | s('type.option.option'(X10),'const.option.NONE_0') = s('type.option.option'(X10),X11)) )),
  inference(superposition,[],[f459,f148])).
fof(f18113,plain,(
  ( ! [X8,X9] : (s('type.option.option'(bool),X9) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X8))) | s(bool,'F_0') = s(bool,sK6(X9,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X9) | s(bool,X8) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f459,f8984])).
fof(f18112,plain,(
  ( ! [X6,X7] : (s('type.option.option'(bool),X6) != s('type.option.option'(bool),X7) | s(bool,'F_0') = s(bool,sK6(X7,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X7) | s(bool,'T_0') = s(bool,sK6(X6,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X6)) )),
  inference(superposition,[],[f459,f458])).
fof(f18109,plain,(
  ( ! [X0,X1] : (s('type.option.option'(bool),X1) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,X0) = s(bool,sK6(X1,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X1) | s(bool,X0) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f459,f8984])).
fof(f18108,plain,(
  ( ! [X169,X168] : (s('type.option.option'('type.option.option'(bool)),X169) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s('type.option.option'(bool),X168) = s('type.option.option'(bool),sK6(X169,'type.option.option'(bool))) | s('type.option.option'('type.option.option'(bool)),'const.option.NONE_0') = s('type.option.option'('type.option.option'(bool)),X169) | s(bool,'T_0') = s(bool,sK6(X168,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X168)) )),
  inference(superposition,[],[f459,f458])).
fof(f18107,plain,(
  ( ! [X167,X165,X166] : (s('type.option.option'('type.option.option'(X165)),X167) != s('type.option.option'('type.option.option'(X165)),'const.option.SOME_1'(s('type.option.option'(X165),X166))) | s('type.option.option'(X165),sK6(X167,'type.option.option'(X165))) = s('type.option.option'(X165),'const.option.SOME_1'(s(X165,sK6(X166,X165)))) | s('type.option.option'('type.option.option'(X165)),'const.option.NONE_0') = s('type.option.option'('type.option.option'(X165)),X167) | s('type.option.option'(X165),'const.option.NONE_0') = s('type.option.option'(X165),X166)) )),
  inference(superposition,[],[f459,f148])).
fof(f18149,plain,(
  ( ! [X163,X164] : (s(bool,'T_0') = s(bool,X163) | s('type.option.option'('type.option.option'(bool)),X164) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X163))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK6(X164,'type.option.option'(bool))) | s('type.option.option'('type.option.option'(bool)),'const.option.NONE_0') = s('type.option.option'('type.option.option'(bool)),X164)) ) | $spl0),
  inference(forward_demodulation,[],[f18106,f901])).
fof(f18106,plain,(
  ( ! [X163,X164] : (s('type.option.option'('type.option.option'(bool)),X164) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X163))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK6(X164,'type.option.option'(bool))) | s('type.option.option'('type.option.option'(bool)),'const.option.NONE_0') = s('type.option.option'('type.option.option'(bool)),X164) | s(bool,X163) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f459,f8984])).
fof(f18146,plain,(
  ( ! [X156,X155] : (s(bool,'T_0') = s(bool,X155) | s('type.option.option'('type.option.option'(bool)),X156) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X155))) = s('type.option.option'(bool),sK6(X156,'type.option.option'(bool))) | s('type.option.option'('type.option.option'(bool)),'const.option.NONE_0') = s('type.option.option'('type.option.option'(bool)),X156)) ) | $spl0),
  inference(forward_demodulation,[],[f18102,f901])).
fof(f18102,plain,(
  ( ! [X156,X155] : (s('type.option.option'('type.option.option'(bool)),X156) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X155))) = s('type.option.option'(bool),sK6(X156,'type.option.option'(bool))) | s('type.option.option'('type.option.option'(bool)),'const.option.NONE_0') = s('type.option.option'('type.option.option'(bool)),X156) | s(bool,X155) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f459,f8984])).
fof(f18144,plain,(
  ( ! [X149,X150] : (s(bool,'T_0') = s(bool,sK6(X150,bool)) | s('type.option.option'(bool),X150) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X149))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X150) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X149)),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f18099,f901])).
fof(f18099,plain,(
  ( ! [X149,X150] : (s('type.option.option'(bool),X150) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X149))) | s(bool,sK6(X150,bool)) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X150) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X149)),bool))) ) | $spl0),
  inference(superposition,[],[f459,f7724])).
fof(f18142,plain,(
  ( ! [X144,X145] : (s(bool,'T_0') = s(bool,sK6(X145,bool)) | s('type.option.option'(bool),X145) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X144))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X145) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X144)))) ) | $spl0),
  inference(forward_demodulation,[],[f18097,f901])).
fof(f18097,plain,(
  ( ! [X144,X145] : (s('type.option.option'(bool),X145) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X144))) | s(bool,sK6(X145,bool)) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X145) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X144)))) ) | $spl0),
  inference(superposition,[],[f459,f8984])).
fof(f18082,plain,(
  ( ! [X107,X108,X106] : (s('type.option.option'(bool),X107) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X106))) | s(bool,'F_0') = s(bool,sK6(X107,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X107) | s(bool,X106) = s(bool,X108) | s(bool,'F_0') = s(bool,X108)) ) | $spl0),
  inference(superposition,[],[f459,f1632])).
fof(f18081,plain,(
  ( ! [X103,X105,X104] : (s('type.option.option'(bool),X104) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X103))) | s(bool,'F_0') = s(bool,sK6(X104,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X104) | s(bool,X103) = s(bool,X105) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X105)),bool))) ) | $spl0),
  inference(superposition,[],[f459,f1834])).
fof(f18077,plain,(
  ( ! [X92,X93,X91] : (s('type.option.option'(bool),X92) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X91))) | s(bool,'T_0') = s(bool,sK6(X92,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X92) | s(bool,X93) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X91) = s(bool,X93)) ) | $spl0),
  inference(superposition,[],[f459,f9397])).
fof(f18072,plain,(
  ( ! [X78,X76,X77] : (s('type.option.option'(bool),X78) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X77))) | s(bool,X76) = s(bool,sK6(X78,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X78) | s(bool,X77) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,X76)) ) | $spl0),
  inference(superposition,[],[f459,f9397])).
fof(f18071,plain,(
  ( ! [X74,X75,X73] : (s('type.option.option'(bool),X75) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X74))) | s(bool,X73) = s(bool,sK6(X75,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X75) | s(bool,X73) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,X74)) ) | $spl0),
  inference(superposition,[],[f459,f9397])).
fof(f18070,plain,(
  ( ! [X70,X72,X71] : (s('type.option.option'(bool),X71) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,X70) = s(bool,sK6(X71,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X71) | s(bool,X72) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X70) = s(bool,X72)) ) | $spl0),
  inference(superposition,[],[f459,f9397])).
fof(f18133,plain,(
  ( ! [X66,X65] : (s('type.option.option'(bool),X66) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,X65) = s(bool,sK6(X66,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X66) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X65)))) ) | $spl0),
  inference(forward_demodulation,[],[f18068,f901])).
fof(f18068,plain,(
  ( ! [X66,X65] : (s('type.option.option'(bool),X66) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)))) | s(bool,X65) = s(bool,sK6(X66,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X66) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X65)))) ) | $spl0),
  inference(superposition,[],[f459,f8984])).
fof(f18132,plain,(
  ( ! [X64,X63] : (s('type.option.option'(bool),X64) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,X63) = s(bool,sK6(X64,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X64) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X63)),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f18067,f901])).
fof(f18067,plain,(
  ( ! [X64,X63] : (s('type.option.option'(bool),X64) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)))) | s(bool,X63) = s(bool,sK6(X64,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X64) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X63)),bool))) ) | $spl0),
  inference(superposition,[],[f459,f7724])).
fof(f18131,plain,(
  ( ! [X61,X62] : (s('type.option.option'(bool),X62) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,X61) = s(bool,sK6(X62,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X62) | s(bool,'F_0') = s(bool,X61)) ) | $spl0),
  inference(forward_demodulation,[],[f18066,f901])).
fof(f18066,plain,(
  ( ! [X61,X62] : (s('type.option.option'(bool),X62) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)))) | s(bool,X61) = s(bool,sK6(X62,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X62) | s(bool,'F_0') = s(bool,X61)) ) | $spl0),
  inference(superposition,[],[f459,f7478])).
fof(f18062,plain,(
  ( ! [X54,X52,X53] : (s('type.option.option'(bool),X53) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,X52) = s(bool,sK6(X53,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X53) | s(bool,X52) = s(bool,X54) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X54)),bool))) ) | $spl0),
  inference(superposition,[],[f459,f1834])).
fof(f18061,plain,(
  ( ! [X50,X51,X49] : (s('type.option.option'(bool),X51) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X50))) | s(bool,X49) = s(bool,sK6(X51,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X51) | s(bool,'F_0') = s(bool,X49) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X50)),bool))) ) | $spl0),
  inference(superposition,[],[f459,f1834])).
fof(f18060,plain,(
  ( ! [X47,X48,X46] : (s('type.option.option'(bool),X48) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X47))) | s(bool,X46) = s(bool,sK6(X48,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X48) | s(bool,'F_0') = s(bool,X47) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X46)),bool))) ) | $spl0),
  inference(superposition,[],[f459,f1834])).
fof(f18057,plain,(
  ( ! [X39,X37,X38] : (s('type.option.option'(bool),X39) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X38))) | s(bool,X37) = s(bool,sK6(X39,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X39) | s(bool,'F_0') = s(bool,X38) | s(bool,'F_0') = s(bool,X37)) ) | $spl0),
  inference(superposition,[],[f459,f1632])).
fof(f18056,plain,(
  ( ! [X35,X36,X34] : (s('type.option.option'(bool),X35) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,X34) = s(bool,sK6(X35,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X35) | s(bool,X34) = s(bool,X36) | s(bool,'F_0') = s(bool,X36)) ) | $spl0),
  inference(superposition,[],[f459,f1632])).
fof(f18053,plain,(
  ( ! [X26,X27,X25] : (s('type.option.option'(bool),X27) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X26))) | s(bool,X25) = s(bool,sK6(X27,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X27) | s(bool,'T_0') = s(bool,X26) | s(bool,'T_0') = s(bool,X25)) )),
  inference(superposition,[],[f459,f208])).
fof(f18052,plain,(
  ( ! [X24,X23,X22] : (s('type.option.option'(bool),X23) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,X22) = s(bool,sK6(X23,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X23) | s(bool,X22) = s(bool,X24) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f459,f208])).
fof(f18050,plain,(
  ( ! [X19,X17,X18] : (s('type.option.option'(X17),X19) != s('type.option.option'(X17),'const.option.SOME_1'(s(X17,X18))) | s(X17,sK6(X19,X17)) = s(X17,sK6('const.option.SOME_1'(s(X17,X18)),X17)) | s('type.option.option'(X17),'const.option.NONE_0') = s('type.option.option'(X17),X19)) )),
  inference(superposition,[],[f459,f901])).
fof(f18049,plain,(
  ( ! [X14,X12,X15,X13,X11,X16] : (s('type.option.option'(X11),X16) != s('type.option.option'(X11),'const.option.SOME_1'(s(X11,'const.option.option_CASE_3'(s('type.option.option'(X12),X13),s(X11,X14),s(fun(X12,X11),X15))))) | s(X11,sK6(X16,X11)) = s(X11,happ(s(fun(fun(X12,X11),X11),happ(s(fun(X11,fun(fun(X12,X11),X11)),happ(s(fun('type.option.option'(X12),fun(X11,fun(fun(X12,X11),X11))),'const.option.option_CASE_0'),s('type.option.option'(X12),X13))),s(X11,X14))),s(fun(X12,X11),X15))) | s('type.option.option'(X11),'const.option.NONE_0') = s('type.option.option'(X11),X16)) )),
  inference(superposition,[],[f459,f169])).
fof(f18048,plain,(
  ( ! [X6,X10,X8,X7,X5,X9] : (s('type.option.option'(X5),X10) != s('type.option.option'(X5),'const.option.SOME_1'(s(X5,happ(s(fun(X6,X5),X9),s(X6,X7))))) | s(X5,sK6(X10,X5)) = s(X5,'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(X5,X8),s(fun(X6,X5),X9))) | s('type.option.option'(X5),'const.option.NONE_0') = s('type.option.option'(X5),X10)) )),
  inference(superposition,[],[f459,f168])).
fof(f18047,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.option.option'(X0),X4) != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) | s(X0,sK6(X4,X0)) = s(X0,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(X0,X2),s(fun(X1,X0),X3))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X4)) )),
  inference(superposition,[],[f459,f166])).
fof(f18127,plain,(
  ( ! [X33,X34,X32] : (s('type.option.option'(X32),'const.option.NONE_0') = s('type.option.option'(X32),X33) | s('type.option.option'(X32),X33) != s('type.option.option'(X32),'const.option.SOME_1'(s(X32,X34))) | s(X32,X34) = s(X32,sK6(sK6('const.option.SOME_1'(s('type.option.option'(X32),X33)),'type.option.option'(X32)),X32))) )),
  inference(forward_demodulation,[],[f18046,f901])).
fof(f18046,plain,(
  ( ! [X33,X34,X32] : (s('type.option.option'(X32),X33) != s('type.option.option'(X32),'const.option.SOME_1'(s(X32,X34))) | s(X32,X34) = s(X32,sK6(sK6('const.option.SOME_1'(s('type.option.option'(X32),X33)),'type.option.option'(X32)),X32)) | s('type.option.option'(X32),'const.option.NONE_0') = s('type.option.option'(X32),sK6('const.option.SOME_1'(s('type.option.option'(X32),X33)),'type.option.option'(X32)))) )),
  inference(superposition,[],[f459,f901])).
fof(f18126,plain,(
  ( ! [X30,X28,X26,X31,X29,X27] : (s('type.option.option'(X26),'const.option.NONE_0') = s('type.option.option'(X26),'const.option.option_CASE_3'(s('type.option.option'(X27),X28),s('type.option.option'(X26),X29),s(fun(X27,'type.option.option'(X26)),X30))) | s('type.option.option'(X26),'const.option.SOME_1'(s(X26,X31))) != s('type.option.option'(X26),'const.option.option_CASE_3'(s('type.option.option'(X27),X28),s('type.option.option'(X26),X29),s(fun(X27,'type.option.option'(X26)),X30))) | s(X26,X31) = s(X26,sK6(happ(s(fun(fun(X27,'type.option.option'(X26)),'type.option.option'(X26)),happ(s(fun('type.option.option'(X26),fun(fun(X27,'type.option.option'(X26)),'type.option.option'(X26))),happ(s(fun('type.option.option'(X27),fun('type.option.option'(X26),fun(fun(X27,'type.option.option'(X26)),'type.option.option'(X26)))),'const.option.option_CASE_0'),s('type.option.option'(X27),X28))),s('type.option.option'(X26),X29))),s(fun(X27,'type.option.option'(X26)),X30)),X26))) )),
  inference(forward_demodulation,[],[f18045,f169])).
fof(f18045,plain,(
  ( ! [X30,X28,X26,X31,X29,X27] : (s('type.option.option'(X26),'const.option.SOME_1'(s(X26,X31))) != s('type.option.option'(X26),'const.option.option_CASE_3'(s('type.option.option'(X27),X28),s('type.option.option'(X26),X29),s(fun(X27,'type.option.option'(X26)),X30))) | s(X26,X31) = s(X26,sK6(happ(s(fun(fun(X27,'type.option.option'(X26)),'type.option.option'(X26)),happ(s(fun('type.option.option'(X26),fun(fun(X27,'type.option.option'(X26)),'type.option.option'(X26))),happ(s(fun('type.option.option'(X27),fun('type.option.option'(X26),fun(fun(X27,'type.option.option'(X26)),'type.option.option'(X26)))),'const.option.option_CASE_0'),s('type.option.option'(X27),X28))),s('type.option.option'(X26),X29))),s(fun(X27,'type.option.option'(X26)),X30)),X26)) | s('type.option.option'(X26),'const.option.NONE_0') = s('type.option.option'(X26),happ(s(fun(fun(X27,'type.option.option'(X26)),'type.option.option'(X26)),happ(s(fun('type.option.option'(X26),fun(fun(X27,'type.option.option'(X26)),'type.option.option'(X26))),happ(s(fun('type.option.option'(X27),fun('type.option.option'(X26),fun(fun(X27,'type.option.option'(X26)),'type.option.option'(X26)))),'const.option.option_CASE_0'),s('type.option.option'(X27),X28))),s('type.option.option'(X26),X29))),s(fun(X27,'type.option.option'(X26)),X30)))) )),
  inference(superposition,[],[f459,f169])).
fof(f18125,plain,(
  ( ! [X24,X23,X21,X25,X22,X20] : (s('type.option.option'(X20),'const.option.NONE_0') = s('type.option.option'(X20),happ(s(fun(X21,'type.option.option'(X20)),X24),s(X21,X22))) | s('type.option.option'(X20),'const.option.SOME_1'(s(X20,X25))) != s('type.option.option'(X20),happ(s(fun(X21,'type.option.option'(X20)),X24),s(X21,X22))) | s(X20,X25) = s(X20,sK6('const.option.option_CASE_3'(s('type.option.option'(X21),'const.option.SOME_1'(s(X21,X22))),s('type.option.option'(X20),X23),s(fun(X21,'type.option.option'(X20)),X24)),X20))) )),
  inference(forward_demodulation,[],[f18044,f168])).
fof(f18044,plain,(
  ( ! [X24,X23,X21,X25,X22,X20] : (s('type.option.option'(X20),'const.option.SOME_1'(s(X20,X25))) != s('type.option.option'(X20),happ(s(fun(X21,'type.option.option'(X20)),X24),s(X21,X22))) | s(X20,X25) = s(X20,sK6('const.option.option_CASE_3'(s('type.option.option'(X21),'const.option.SOME_1'(s(X21,X22))),s('type.option.option'(X20),X23),s(fun(X21,'type.option.option'(X20)),X24)),X20)) | s('type.option.option'(X20),'const.option.NONE_0') = s('type.option.option'(X20),'const.option.option_CASE_3'(s('type.option.option'(X21),'const.option.SOME_1'(s(X21,X22))),s('type.option.option'(X20),X23),s(fun(X21,'type.option.option'(X20)),X24)))) )),
  inference(superposition,[],[f459,f168])).
fof(f18124,plain,(
  ( ! [X19,X17,X15,X18,X16] : (s('type.option.option'(X15),'const.option.NONE_0') = s('type.option.option'(X15),X17) | s('type.option.option'(X15),X17) != s('type.option.option'(X15),'const.option.SOME_1'(s(X15,X19))) | s(X15,X19) = s(X15,sK6('const.option.option_CASE_3'(s('type.option.option'(X16),'const.option.NONE_0'),s('type.option.option'(X15),X17),s(fun(X16,'type.option.option'(X15)),X18)),X15))) )),
  inference(forward_demodulation,[],[f18043,f166])).
fof(f18043,plain,(
  ( ! [X19,X17,X15,X18,X16] : (s('type.option.option'(X15),X17) != s('type.option.option'(X15),'const.option.SOME_1'(s(X15,X19))) | s(X15,X19) = s(X15,sK6('const.option.option_CASE_3'(s('type.option.option'(X16),'const.option.NONE_0'),s('type.option.option'(X15),X17),s(fun(X16,'type.option.option'(X15)),X18)),X15)) | s('type.option.option'(X15),'const.option.NONE_0') = s('type.option.option'(X15),'const.option.option_CASE_3'(s('type.option.option'(X16),'const.option.NONE_0'),s('type.option.option'(X15),X17),s(fun(X16,'type.option.option'(X15)),X18)))) )),
  inference(superposition,[],[f459,f166])).
fof(f18123,plain,(
  ( ! [X12,X10,X11] : (s('type.option.option'(X10),X11) != s('type.option.option'(X10),'const.option.SOME_1'(s(X10,X12))) | s(X10,X12) = s(X10,sK6('const.option.SOME_1'(s(X10,sK6(X11,X10))),X10)) | s('type.option.option'(X10),'const.option.NONE_0') = s('type.option.option'(X10),X11)) )),
  inference(subsumption_resolution,[],[f18041,f153])).
fof(f18041,plain,(
  ( ! [X12,X10,X11] : (s('type.option.option'(X10),X11) != s('type.option.option'(X10),'const.option.SOME_1'(s(X10,X12))) | s(X10,X12) = s(X10,sK6('const.option.SOME_1'(s(X10,sK6(X11,X10))),X10)) | s('type.option.option'(X10),'const.option.NONE_0') = s('type.option.option'(X10),'const.option.SOME_1'(s(X10,sK6(X11,X10)))) | s('type.option.option'(X10),'const.option.NONE_0') = s('type.option.option'(X10),X11)) )),
  inference(superposition,[],[f459,f148])).
fof(f18120,plain,(
  ( ! [X6,X7] : (s('type.option.option'(bool),X6) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X7))) | s(bool,X7) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,sK6(X6,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X6)) )),
  inference(subsumption_resolution,[],[f18039,f153])).
fof(f18039,plain,(
  ( ! [X6,X7] : (s('type.option.option'(bool),X6) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X7))) | s(bool,X7) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK6(X6,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X6)) )),
  inference(superposition,[],[f459,f458])).
fof(f18030,plain,(
  ( ! [X134,X133] : (s(bool,X134) = s(bool,sK6(X133,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X134))) | s('type.option.option'(bool),X133) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X133)) ) | $spl0),
  inference(subsumption_resolution,[],[f17988,f114])).
fof(f17988,plain,(
  ( ! [X134,X133] : (~p(s(bool,'T_0')) | s(bool,X134) = s(bool,sK6(X133,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X134))) | s('type.option.option'(bool),X133) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X133)) ) | $spl0),
  inference(superposition,[],[f17344,f458])).
fof(f18023,plain,(
  ( ! [X98] : (s(bool,X98) = s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X98)))) ) | $spl0),
  inference(subsumption_resolution,[],[f17973,f114])).
fof(f17973,plain,(
  ( ! [X98] : (~p(s(bool,'T_0')) | s(bool,X98) = s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X98)))) ) | $spl0),
  inference(superposition,[],[f17344,f689])).
fof(f18022,plain,(
  ( ! [X94,X97,X95,X96] : (s(bool,X97) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X94),'const.option.NONE_0'),s(bool,X95),s(fun(X94,bool),X96))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X97))) | s(bool,'F_0') = s(bool,X95)) ) | $spl0),
  inference(subsumption_resolution,[],[f17972,f114])).
fof(f17972,plain,(
  ( ! [X94,X97,X95,X96] : (~p(s(bool,'T_0')) | s(bool,X97) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X94),'const.option.NONE_0'),s(bool,X95),s(fun(X94,bool),X96))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X97))) | s(bool,'F_0') = s(bool,X95)) ) | $spl0),
  inference(superposition,[],[f17344,f298])).
fof(f18003,plain,(
  ( ! [X52,X50,X51] : (s(bool,X50) = s(bool,X51) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X51))) | s(bool,X52) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X50) = s(bool,X52)) ) | $spl0),
  inference(subsumption_resolution,[],[f17957,f114])).
fof(f17957,plain,(
  ( ! [X52,X50,X51] : (~p(s(bool,'T_0')) | s(bool,X50) = s(bool,X51) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X51))) | s(bool,X52) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X50) = s(bool,X52)) ) | $spl0),
  inference(superposition,[],[f17344,f9397])).
fof(f17750,plain,(
  ( ! [X189,X188] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X189))) | s(bool,X189) = s(bool,sK6(X188,bool)) | s('type.option.option'(bool),X188) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X188)) )),
  inference(superposition,[],[f157,f458])).
fof(f17768,plain,(
  ( ! [X185] : (s('type.option.option'(bool),X185) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X185) | s('type.option.option'(bool),X185) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))) )),
  inference(duplicate_literal_removal,[],[f17747])).
fof(f17747,plain,(
  ( ! [X185] : (s('type.option.option'(bool),X185) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X185) | s('type.option.option'(bool),X185) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X185)) )),
  inference(superposition,[],[f148,f458])).
fof(f17822,plain,(
  ( ! [X88,X87,X89] : (s(bool,X88) != s(bool,sK6(X87,bool)) | s(bool,X88) = s(bool,X89) | s(bool,'F_0') = s(bool,X89) | s('type.option.option'(bool),X87) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X87)) ) | $spl0),
  inference(subsumption_resolution,[],[f17692,f114])).
fof(f17692,plain,(
  ( ! [X88,X87,X89] : (~p(s(bool,'T_0')) | s(bool,X88) != s(bool,sK6(X87,bool)) | s(bool,X88) = s(bool,X89) | s(bool,'F_0') = s(bool,X89) | s('type.option.option'(bool),X87) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X87)) ) | $spl0),
  inference(superposition,[],[f2033,f458])).
fof(f17817,plain,(
  ( ! [X45,X46] : (s(bool,X46) != s(bool,sK6(X45,bool)) | s(bool,'T_0') = s(bool,X46) | s('type.option.option'(bool),X45) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X45)) )),
  inference(subsumption_resolution,[],[f17671,f114])).
fof(f17671,plain,(
  ( ! [X45,X46] : (~p(s(bool,'T_0')) | s(bool,X46) != s(bool,sK6(X45,bool)) | s(bool,'T_0') = s(bool,X46) | s('type.option.option'(bool),X45) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X45)) )),
  inference(superposition,[],[f211,f458])).
fof(f17625,plain,(
  ( ! [X33,X32] : (s('type.option.option'(bool),X32) != s('type.option.option'(bool),X33) | s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X33))) = s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s(bool,'T_0') = s(bool,sK6(X32,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X32)) )),
  inference(superposition,[],[f158,f458])).
fof(f17611,plain,(
  ( ! [X4,X2,X3] : (s('type.option.option'(bool),X2) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X3))) | s(bool,X3) = s(bool,X4) | s(bool,'T_0') = s(bool,X4) | s(bool,'T_0') = s(bool,sK6(X2,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X2)) )),
  inference(superposition,[],[f362,f458])).
fof(f17609,plain,(
  ( ! [X85,X86,X84] : (s(X86,f(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) != s(X86,g(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s(fun('type.option.option'(bool),X86),X84) = s(fun('type.option.option'(bool),X86),X85) | s(bool,'T_0') = s(bool,sK6(sK8(X84,X85,X86,'type.option.option'(bool)),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),sK8(X84,X85,X86,'type.option.option'(bool)))) )),
  inference(superposition,[],[f167,f458])).
fof(f17606,plain,(
  ( ! [X80] : (s('type.option.option'('type.option.option'(bool)),X80) = s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s('type.option.option'('type.option.option'(bool)),'const.option.NONE_0') = s('type.option.option'('type.option.option'(bool)),X80) | s(bool,'T_0') = s(bool,sK6(sK6(X80,'type.option.option'(bool)),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),sK6(X80,'type.option.option'(bool)))) )),
  inference(superposition,[],[f148,f458])).
fof(f17602,plain,(
  ( ! [X68,X66,X67] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),f(s(X66,sK8(X67,X68,'type.option.option'(bool),X66)))) | s(fun(X66,'type.option.option'(bool)),X67) = s(fun(X66,'type.option.option'(bool)),X68) | s(bool,'T_0') = s(bool,sK6(g(s(X66,sK8(X67,X68,'type.option.option'(bool),X66))),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),g(s(X66,sK8(X67,X68,'type.option.option'(bool),X66))))) )),
  inference(superposition,[],[f167,f458])).
fof(f17586,plain,(
  ( ! [X28,X27] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X28))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s('type.option.option'(bool),X27) = s('type.option.option'(bool),X28) | s(bool,'T_0') = s(bool,sK6(X27,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X27)) )),
  inference(superposition,[],[f157,f458])).
fof(f17532,plain,(
  ( ! [X0,X1] : (s('type.option.option'(bool),X0) = s('type.option.option'(bool),X1) | s(bool,'T_0') = s(bool,sK6(X1,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X1) | s(bool,'T_0') = s(bool,sK6(X0,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X0)) )),
  inference(superposition,[],[f458,f458])).
fof(f17511,plain,(
  ( ! [X6,X8,X7] : (s('type.option.option'(bool),X7) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X6))) | s(bool,'T_0') = s(bool,sK6(X7,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X7) | s(bool,X6) = s(bool,X8) | s(bool,'F_0') = s(bool,X8)) ) | $spl0),
  inference(superposition,[],[f458,f1632])).
fof(f17510,plain,(
  ( ! [X4,X5,X3] : (s('type.option.option'(bool),X4) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X3))) | s(bool,'T_0') = s(bool,sK6(X4,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X4) | s(bool,X3) = s(bool,X5) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X5)),bool))) ) | $spl0),
  inference(superposition,[],[f458,f1834])).
fof(f17796,plain,(
  ( ! [X18] : (s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X18) | s('type.option.option'(bool),X18) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK6(sK6('const.option.SOME_1'(s('type.option.option'(bool),X18)),'type.option.option'(bool)),bool))) )),
  inference(forward_demodulation,[],[f17508,f901])).
fof(f17508,plain,(
  ( ! [X18] : (s('type.option.option'(bool),X18) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK6(sK6('const.option.SOME_1'(s('type.option.option'(bool),X18)),'type.option.option'(bool)),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),sK6('const.option.SOME_1'(s('type.option.option'(bool),X18)),'type.option.option'(bool)))) )),
  inference(superposition,[],[f458,f901])).
fof(f17795,plain,(
  ( ! [X14,X17,X15,X16] : (s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X14),X15),s('type.option.option'(bool),X16),s(fun(X14,'type.option.option'(bool)),X17))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X14),X15),s('type.option.option'(bool),X16),s(fun(X14,'type.option.option'(bool)),X17))) | s(bool,'T_0') = s(bool,sK6(happ(s(fun(fun(X14,'type.option.option'(bool)),'type.option.option'(bool)),happ(s(fun('type.option.option'(bool),fun(fun(X14,'type.option.option'(bool)),'type.option.option'(bool))),happ(s(fun('type.option.option'(X14),fun('type.option.option'(bool),fun(fun(X14,'type.option.option'(bool)),'type.option.option'(bool)))),'const.option.option_CASE_0'),s('type.option.option'(X14),X15))),s('type.option.option'(bool),X16))),s(fun(X14,'type.option.option'(bool)),X17)),bool))) )),
  inference(forward_demodulation,[],[f17507,f169])).
fof(f17507,plain,(
  ( ! [X14,X17,X15,X16] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X14),X15),s('type.option.option'(bool),X16),s(fun(X14,'type.option.option'(bool)),X17))) | s(bool,'T_0') = s(bool,sK6(happ(s(fun(fun(X14,'type.option.option'(bool)),'type.option.option'(bool)),happ(s(fun('type.option.option'(bool),fun(fun(X14,'type.option.option'(bool)),'type.option.option'(bool))),happ(s(fun('type.option.option'(X14),fun('type.option.option'(bool),fun(fun(X14,'type.option.option'(bool)),'type.option.option'(bool)))),'const.option.option_CASE_0'),s('type.option.option'(X14),X15))),s('type.option.option'(bool),X16))),s(fun(X14,'type.option.option'(bool)),X17)),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),happ(s(fun(fun(X14,'type.option.option'(bool)),'type.option.option'(bool)),happ(s(fun('type.option.option'(bool),fun(fun(X14,'type.option.option'(bool)),'type.option.option'(bool))),happ(s(fun('type.option.option'(X14),fun('type.option.option'(bool),fun(fun(X14,'type.option.option'(bool)),'type.option.option'(bool)))),'const.option.option_CASE_0'),s('type.option.option'(X14),X15))),s('type.option.option'(bool),X16))),s(fun(X14,'type.option.option'(bool)),X17)))) )),
  inference(superposition,[],[f458,f169])).
fof(f17794,plain,(
  ( ! [X12,X10,X13,X11] : (s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),happ(s(fun(X10,'type.option.option'(bool)),X13),s(X10,X11))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),happ(s(fun(X10,'type.option.option'(bool)),X13),s(X10,X11))) | s(bool,'T_0') = s(bool,sK6('const.option.option_CASE_3'(s('type.option.option'(X10),'const.option.SOME_1'(s(X10,X11))),s('type.option.option'(bool),X12),s(fun(X10,'type.option.option'(bool)),X13)),bool))) )),
  inference(forward_demodulation,[],[f17506,f168])).
fof(f17506,plain,(
  ( ! [X12,X10,X13,X11] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),happ(s(fun(X10,'type.option.option'(bool)),X13),s(X10,X11))) | s(bool,'T_0') = s(bool,sK6('const.option.option_CASE_3'(s('type.option.option'(X10),'const.option.SOME_1'(s(X10,X11))),s('type.option.option'(bool),X12),s(fun(X10,'type.option.option'(bool)),X13)),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X10),'const.option.SOME_1'(s(X10,X11))),s('type.option.option'(bool),X12),s(fun(X10,'type.option.option'(bool)),X13)))) )),
  inference(superposition,[],[f458,f168])).
fof(f17793,plain,(
  ( ! [X8,X7,X9] : (s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X8) | s('type.option.option'(bool),X8) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK6('const.option.option_CASE_3'(s('type.option.option'(X7),'const.option.NONE_0'),s('type.option.option'(bool),X8),s(fun(X7,'type.option.option'(bool)),X9)),bool))) )),
  inference(forward_demodulation,[],[f17505,f166])).
fof(f17505,plain,(
  ( ! [X8,X7,X9] : (s('type.option.option'(bool),X8) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK6('const.option.option_CASE_3'(s('type.option.option'(X7),'const.option.NONE_0'),s('type.option.option'(bool),X8),s(fun(X7,'type.option.option'(bool)),X9)),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X7),'const.option.NONE_0'),s('type.option.option'(bool),X8),s(fun(X7,'type.option.option'(bool)),X9)))) )),
  inference(superposition,[],[f458,f166])).
fof(f17501,plain,(
  ( ! [X218,X217] : (s(bool,'T_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X218,bool)) | s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X218),s(bool,X217))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X217)))) ) | $spl0),
  inference(forward_demodulation,[],[f17220,f901])).
fof(f17220,plain,(
  ( ! [X218,X217] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X218),s(bool,X217))) | s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X218,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X217)))) ) | $spl0),
  inference(superposition,[],[f2789,f8984])).
fof(f17500,plain,(
  ( ! [X216,X215] : (s(bool,'T_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X216,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X216),s(bool,X215))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X215)))) ) | $spl0),
  inference(forward_demodulation,[],[f17219,f901])).
fof(f17219,plain,(
  ( ! [X216,X215] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X216),s(bool,X215))) | s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X216,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X215)))) ) | $spl0),
  inference(superposition,[],[f1756,f8984])).
fof(f17205,plain,(
  ( ! [X184,X183] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X183))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X184))) | s(bool,X184) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X183)))) ) | $spl0),
  inference(superposition,[],[f157,f8984])).
fof(f17487,plain,(
  ( ! [X146,X149,X147,X148] : (s(bool,X147) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X148),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X148,bool),X149))) | s(bool,X146) != s(bool,X147) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X146)))) ) | $spl0),
  inference(forward_demodulation,[],[f17187,f901])).
fof(f17187,plain,(
  ( ! [X146,X149,X147,X148] : (s(bool,X146) != s(bool,X147) | s(bool,X147) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X148),'const.option.NONE_0'),s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)),s(fun(X148,bool),X149))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X146)))) ) | $spl0),
  inference(superposition,[],[f9763,f8984])).
fof(f17475,plain,(
  ( ! [X87,X86] : (s(bool,X86) != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X86) = s(bool,X87) | s(bool,'F_0') = s(bool,X87)) ) | $spl0),
  inference(global_subsumption,[],[f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f3318,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f3315,f469,f736,f888,f3074,f2715,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f615,f593,f3046,f2687,f876,f855,f3047,f2688,f607,f3091,f2779,f862,f3092,f2780,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f3016,f2844,f2818,f2790,f2788,f2778,f2766,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f3017,f2845,f2819,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9051,f9058,f9061,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9599,f9600,f9601,f9649,f9650,f9651,f9652,f9762,f9763,f9764,f9765,f10036,f10037,f10038,f10207,f10208,f10262,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10340,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f10377,f10432,f10379,f10386,f10387,f10388,f10389,f10551,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14034,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14505,f14506,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15288,f15349,f15350,f15352,f15453,f15422,f15635,f15636,f15637,f15638,f15749,f15750,f15753,f15755,f15758,f15763,f16588,f16589,f16590,f16591,f16647,f16657,f16758,f16759,f17241,f17260,f17261,f17262,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17320,f17321,f17322,f17323,f17326,f16944,f17328,f17330,f17332,f17333,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17406,f17409,f17411,f17443,f17089,f17445,f17446,f17447,f17448,f17449,f17456,f17459,f17460,f17462,f17473,f17474])).
fof(f17474,plain,(
  ( ! [X87,X85,X86] : (s(bool,X86) != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X86) = s(bool,X87) | s(bool,'F_0') = s(bool,X87) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X85)))) ) | $spl0),
  inference(subsumption_resolution,[],[f17157,f17462])).
fof(f17157,plain,(
  ( ! [X87,X85,X86] : (~p(s(bool,X85)) | s(bool,X86) != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X86) = s(bool,X87) | s(bool,'F_0') = s(bool,X87) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X85)))) ) | $spl0),
  inference(superposition,[],[f2033,f8984])).
fof(f17473,plain,(
  ( ! [X52,X53] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X52))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X53))) | s(bool,'T_0') = s(bool,X53) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X52)))) ) | $spl0),
  inference(subsumption_resolution,[],[f17472,f180])).
fof(f17472,plain,(
  ( ! [X52,X53] : (s(bool,'T_0') = s(bool,'F_0') | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X52))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X53))) | s(bool,'T_0') = s(bool,X53) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X52)))) ) | $spl0),
  inference(forward_demodulation,[],[f17141,f901])).
fof(f17141,plain,(
  ( ! [X52,X53] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X52))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X53))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,X53) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X52)))) ) | $spl0),
  inference(superposition,[],[f361,f8984])).
fof(f17462,plain,(
  ( ! [X25] : (p(s(bool,X25)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X25)))) ) | $spl0),
  inference(subsumption_resolution,[],[f17126,f901])).
fof(f17126,plain,(
  ( ! [X25] : (p(s(bool,X25)) | s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X25)))) ) | $spl0),
  inference(superposition,[],[f123,f8984])).
fof(f17448,plain,(
  ( ! [X249,X248] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X249),s(bool,'T_0'))) | s(bool,X248) = s(bool,sK7(X248,X249,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X248)))) ) | $spl0),
  inference(forward_demodulation,[],[f17102,f901])).
fof(f17102,plain,(
  ( ! [X249,X248] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X249),s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)))) | s(bool,X248) = s(bool,sK7(X248,X249,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X248)))) ) | $spl0),
  inference(superposition,[],[f2789,f8984])).
fof(f17447,plain,(
  ( ! [X246,X247] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X247),s(bool,'T_0'))) | s(bool,X246) = s(bool,sK7(X246,X247,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X246)))) ) | $spl0),
  inference(forward_demodulation,[],[f17101,f901])).
fof(f17101,plain,(
  ( ! [X246,X247] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X247),s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)))) | s(bool,X246) = s(bool,sK7(X246,X247,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X246)))) ) | $spl0),
  inference(superposition,[],[f1756,f8984])).
fof(f17089,plain,(
  ( ! [X218,X219] : (s(bool,X219) != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X218))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X219))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X218)))) ) | $spl0),
  inference(superposition,[],[f158,f8984])).
fof(f17443,plain,(
  ( ! [X215,X214] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X215))) | s(bool,X214) = s(bool,X215) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X214)))) ) | $spl0),
  inference(forward_demodulation,[],[f17087,f901])).
fof(f17087,plain,(
  ( ! [X215,X214] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X215))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)))) | s(bool,X214) = s(bool,X215) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X214)))) ) | $spl0),
  inference(superposition,[],[f157,f8984])).
fof(f17385,plain,(
  ( ! [X127,X128,X126,X129] : (s(bool,'T_0') != s(bool,X127) | s(bool,X126) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X128),'const.option.NONE_0'),s(bool,X127),s(fun(X128,bool),X129))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X126)))) ) | $spl0),
  inference(forward_demodulation,[],[f17035,f901])).
fof(f17035,plain,(
  ( ! [X127,X128,X126,X129] : (s(bool,X127) != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X126) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X128),'const.option.NONE_0'),s(bool,X127),s(fun(X128,bool),X129))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X126)))) ) | $spl0),
  inference(superposition,[],[f9763,f8984])).
fof(f17384,plain,(
  ( ! [X125,X123,X124,X122] : (s(bool,'T_0') != s(bool,X123) | s(bool,X123) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X124),'const.option.NONE_0'),s(bool,X122),s(fun(X124,bool),X125))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X122)))) ) | $spl0),
  inference(forward_demodulation,[],[f17034,f901])).
fof(f17034,plain,(
  ( ! [X125,X123,X124,X122] : (s(bool,X123) != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X123) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X124),'const.option.NONE_0'),s(bool,X122),s(fun(X124,bool),X125))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X122)))) ) | $spl0),
  inference(superposition,[],[f9763,f8984])).
fof(f17369,plain,(
  ( ! [X81,X82] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,X82)),bool)) | s(bool,X81) = s(bool,X82) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X81)))) ) | $spl0),
  inference(forward_demodulation,[],[f17368,f901])).
fof(f17368,plain,(
  ( ! [X81,X82] : (s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) != s(bool,sK6('const.option.SOME_1'(s(bool,X82)),bool)) | s(bool,X81) = s(bool,X82) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X81)))) ) | $spl0),
  inference(subsumption_resolution,[],[f17008,f158])).
fof(f17008,plain,(
  ( ! [X81,X82] : (s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) != s(bool,sK6('const.option.SOME_1'(s(bool,X82)),bool)) | s(bool,X81) = s(bool,X82) | s(bool,'F_0') = s(bool,X81) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X81)))) ) | $spl0),
  inference(superposition,[],[f3585,f8984])).
fof(f17367,plain,(
  ( ! [X78,X77] : (s(bool,X78) = s(bool,sK6('const.option.SOME_1'(s(bool,X77)),bool)) | s(bool,'F_0') = s(bool,X78) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X77)))) ) | $spl0),
  inference(subsumption_resolution,[],[f17006,f901])).
fof(f17006,plain,(
  ( ! [X78,X77] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X78) = s(bool,sK6('const.option.SOME_1'(s(bool,X77)),bool)) | s(bool,'F_0') = s(bool,X78) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X77)))) ) | $spl0),
  inference(superposition,[],[f2660,f8984])).
fof(f17344,plain,(
  ( ! [X10,X9] : (~p(s(bool,X10)) | s(bool,X9) = s(bool,X10) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X9)))) ) | $spl0),
  inference(subsumption_resolution,[],[f17343,f114])).
fof(f17343,plain,(
  ( ! [X10,X9] : (~p(s(bool,'T_0')) | ~p(s(bool,X10)) | s(bool,X9) = s(bool,X10) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X9)))) ) | $spl0),
  inference(forward_demodulation,[],[f16973,f901])).
fof(f16973,plain,(
  ( ! [X10,X9] : (~p(s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) | ~p(s(bool,X10)) | s(bool,X9) = s(bool,X10) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X9)))) ) | $spl0),
  inference(superposition,[],[f165,f8984])).
fof(f17335,plain,(
  ( ! [X59,X60] : (s(bool,'T_0') = s(bool,X59) | s(bool,'T_0') != s(bool,happ(s(fun('type.option.option'(bool),bool),X60),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X59))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,X59)),X60,'type.option.option'(bool)))) ) | $spl0),
  inference(forward_demodulation,[],[f16965,f901])).
fof(f16965,plain,(
  ( ! [X59,X60] : (s(bool,'T_0') != s(bool,happ(s(fun('type.option.option'(bool),bool),X60),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X59))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,X59)),X60,'type.option.option'(bool))) | s(bool,X59) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f2789,f8984])).
fof(f17334,plain,(
  ( ! [X57,X58] : (s(bool,'T_0') = s(bool,X57) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X58),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X57))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,X57)),X58,'type.option.option'(bool)))) ) | $spl0),
  inference(forward_demodulation,[],[f16964,f901])).
fof(f16964,plain,(
  ( ! [X57,X58] : (s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X58),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X57))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,X57)),X58,'type.option.option'(bool))) | s(bool,X57) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f1756,f8984])).
fof(f17330,plain,(
  ( ! [X30,X29] : (s(bool,'T_0') = s(bool,X29) | s('type.option.option'(bool),X30) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X30))) = s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X29)))))) ) | $spl0),
  inference(forward_demodulation,[],[f16952,f901])).
fof(f16952,plain,(
  ( ! [X30,X29] : (s('type.option.option'(bool),X30) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X30))) = s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X29))))) | s(bool,X29) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f158,f8984])).
fof(f17328,plain,(
  ( ! [X26,X25] : (s(bool,'T_0') = s(bool,X25) | s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X26))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s('type.option.option'(bool),X26) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X25)))) ) | $spl0),
  inference(forward_demodulation,[],[f16950,f901])).
fof(f16950,plain,(
  ( ! [X26,X25] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X26))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s('type.option.option'(bool),X26) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X25))) | s(bool,X25) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f157,f8984])).
fof(f16944,plain,(
  ( ! [X14,X15] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X15))) | s(bool,X14) = s(bool,X15) | s(bool,X14) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f157,f8984])).
fof(f17326,plain,(
  ( ! [X12,X10,X13,X11] : (s(bool,'T_0') = s(bool,X10) | s(X11,happ(s(fun(bool,X11),X12),s(bool,X10))) = s(X11,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s(X11,X13),s(fun(bool,X11),X12)))) ) | $spl0),
  inference(forward_demodulation,[],[f16943,f901])).
fof(f16943,plain,(
  ( ! [X12,X10,X13,X11] : (s(X11,happ(s(fun(bool,X11),X12),s(bool,X10))) = s(X11,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s(X11,X13),s(fun(bool,X11),X12))) | s(bool,X10) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f168,f8984])).
fof(f17323,plain,(
  ( ! [X59,X60] : (s(bool,'T_0') = s(bool,X59) | s(bool,'T_0') != s(bool,happ(s(fun('type.option.option'(bool),bool),X60),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X59))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'F_0')),X60,'type.option.option'(bool)))) ) | $spl0),
  inference(forward_demodulation,[],[f16936,f901])).
fof(f16936,plain,(
  ( ! [X59,X60] : (s(bool,'T_0') != s(bool,happ(s(fun('type.option.option'(bool),bool),X60),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X59))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'F_0')),X60,'type.option.option'(bool))) | s(bool,X59) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f2789,f8984])).
fof(f17322,plain,(
  ( ! [X57,X58] : (s(bool,'T_0') = s(bool,X57) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X58),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X57))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'F_0')),X58,'type.option.option'(bool)))) ) | $spl0),
  inference(forward_demodulation,[],[f16935,f901])).
fof(f16935,plain,(
  ( ! [X57,X58] : (s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X58),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X57))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK7('const.option.SOME_1'(s(bool,'F_0')),X58,'type.option.option'(bool))) | s(bool,X57) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f1756,f8984])).
fof(f17318,plain,(
  ( ! [X30,X29] : (s(bool,'T_0') = s(bool,X29) | s('type.option.option'(bool),X30) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X29))) | s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X30))) = s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))) ) | $spl0),
  inference(forward_demodulation,[],[f16923,f901])).
fof(f16923,plain,(
  ( ! [X30,X29] : (s('type.option.option'(bool),X30) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X29))) | s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X30))) = s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s(bool,X29) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f158,f8984])).
fof(f17316,plain,(
  ( ! [X26,X25] : (s(bool,'T_0') = s(bool,X25) | s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X26))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X25))))) | s('type.option.option'(bool),X26) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))) ) | $spl0),
  inference(forward_demodulation,[],[f16921,f901])).
fof(f16921,plain,(
  ( ! [X26,X25] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X26))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X25))))) | s('type.option.option'(bool),X26) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,X25) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f157,f8984])).
fof(f17315,plain,(
  ( ! [X14,X12,X13,X11] : (s(bool,'T_0') = s(bool,X11) | s(X12,happ(s(fun(bool,X12),X13),s(bool,'F_0'))) = s(X12,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X11))),s(X12,X14),s(fun(bool,X12),X13)))) ) | $spl0),
  inference(forward_demodulation,[],[f16915,f901])).
fof(f16915,plain,(
  ( ! [X14,X12,X13,X11] : (s(X12,happ(s(fun(bool,X12),X13),s(bool,'F_0'))) = s(X12,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X11))),s(X12,X14),s(fun(bool,X12),X13))) | s(bool,X11) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f168,f8984])).
fof(f16879,plain,(
  ( ! [X4,X2,X3] : (s(bool,X2) = s(bool,X3) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X3))) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) ) | $spl0),
  inference(superposition,[],[f8984,f9397])).
fof(f16878,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0)))) ) | $spl0),
  inference(superposition,[],[f8984,f8984])).
fof(f16863,plain,(
  ( ! [X4,X5,X3] : (s(bool,X4) = s(bool,sK6('const.option.SOME_1'(s(bool,X3)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X4))) | s(bool,X3) = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) ) | $spl0),
  inference(superposition,[],[f8984,f208])).
fof(f16862,plain,(
  ( ! [X2,X0,X1] : (s(bool,X1) = s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1))) | s(bool,X2) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X0) = s(bool,X2)) ) | $spl0),
  inference(superposition,[],[f8984,f9397])).
fof(f17260,plain,(
  ( ! [X70,X72,X71] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X70),'const.option.NONE_0'),s(bool,X71),s(fun(X70,bool),X72))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X71)))) ) | $spl0),
  inference(forward_demodulation,[],[f16815,f901])).
fof(f16815,plain,(
  ( ! [X70,X72,X71] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X71))) | s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X70),'const.option.NONE_0'),s(bool,X71),s(fun(X70,bool),X72)))) ) | $spl0),
  inference(superposition,[],[f8984,f166])).
fof(f17241,plain,(
  ( ! [X41,X42] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X41))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X42))) | s(bool,X42) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X41) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f16776,f180])).
fof(f16776,plain,(
  ( ! [X41,X42] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X41))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X42))) | s(bool,X42) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X41) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl0),
  inference(superposition,[],[f8984,f9397])).
fof(f16759,plain,(
  ( ! [X6,X8,X7] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X6))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X7))) | s(bool,X7) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X6) = s(bool,X8) | s(bool,'F_0') = s(bool,X8)) ) | $spl0),
  inference(superposition,[],[f8984,f1632])).
fof(f16758,plain,(
  ( ! [X4,X5,X3] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X3))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X4))) | s(bool,X4) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X3) = s(bool,X5) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X5)),bool))) ) | $spl0),
  inference(superposition,[],[f8984,f1834])).
fof(f16647,plain,(
  ( ! [X6,X4,X5] : (s(bool,X5) = s(bool,sK7(X5,X4,bool)) | s(bool,'T_0') = s(bool,X5) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X4),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f16617,f114])).
fof(f16617,plain,(
  ( ! [X6,X4,X5] : (~p(s(bool,'T_0')) | s(bool,X5) = s(bool,sK7(X5,X4,bool)) | s(bool,'T_0') = s(bool,X5) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X4),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f440,f208])).
fof(f15453,plain,(
  ( ! [X61,X62,X60] : (s(bool,X60) != s(bool,X61) | s(bool,X62) = s(bool,sK6('const.option.SOME_1'(s(bool,X61)),bool)) | s(bool,'T_0') = s(bool,X62) | s(bool,X60) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f15367,f180])).
fof(f15367,plain,(
  ( ! [X61,X62,X60] : (s(bool,X60) != s(bool,X61) | s(bool,X62) = s(bool,sK6('const.option.SOME_1'(s(bool,X61)),bool)) | s(bool,'T_0') = s(bool,X62) | s(bool,X60) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl0),
  inference(superposition,[],[f14507,f9397])).
fof(f15352,plain,(
  ( ! [X17,X18,X16] : (s(bool,X16) != s(bool,X17) | s(bool,X18) = s(bool,sK6('const.option.SOME_1'(s(bool,X17)),bool)) | s(bool,'T_0') = s(bool,X18) | s(bool,'T_0') = s(bool,X16)) ) | $spl0),
  inference(superposition,[],[f14507,f121])).
fof(f15350,plain,(
  ( ! [X10,X8,X11,X9] : (s(bool,X8) != s(bool,X9) | s(bool,X10) = s(bool,sK6('const.option.SOME_1'(s(bool,X9)),bool)) | s(bool,'T_0') = s(bool,X10) | s(bool,X8) = s(bool,X11) | s(bool,'F_0') = s(bool,X11)) ) | $spl0),
  inference(superposition,[],[f14507,f1632])).
fof(f15349,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,X4) != s(bool,X5) | s(bool,X6) = s(bool,sK6('const.option.SOME_1'(s(bool,X5)),bool)) | s(bool,'T_0') = s(bool,X6) | s(bool,X4) = s(bool,X7) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X7)),bool))) ) | $spl0),
  inference(superposition,[],[f14507,f1834])).
fof(f15321,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1))) | s(bool,X1) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(condensation,[],[f15320])).
fof(f15320,plain,(
  ( ! [X50,X51,X49] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X49))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X51))) | s(bool,'T_0') = s(bool,X51) | s(bool,X49) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,X50)) ) | $spl0),
  inference(subsumption_resolution,[],[f15255,f121])).
fof(f15255,plain,(
  ( ! [X50,X51,X49] : (s(bool,'F_0') != s(bool,X50) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X49))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X51))) | s(bool,'T_0') = s(bool,X51) | s(bool,X49) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,X50)) ) | $spl0),
  inference(superposition,[],[f404,f9397])).
fof(f15300,plain,(
  ( ! [X33,X34,X32] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X32))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X33))) | s(bool,'T_0') = s(bool,X33) | s(bool,X32) = s(bool,X34) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X34)),bool))) ) | $spl0),
  inference(trivial_inequality_removal,[],[f15248])).
fof(f15248,plain,(
  ( ! [X33,X34,X32] : (s(bool,'F_0') != s(bool,'F_0') | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X32))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X33))) | s(bool,'T_0') = s(bool,X33) | s(bool,X32) = s(bool,X34) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X34)),bool))) ) | $spl0),
  inference(superposition,[],[f404,f1834])).
fof(f15302,plain,(
  ( ! [X14,X15,X16] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X14))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X15))) | s(bool,'T_0') = s(bool,X15) | s(bool,X14) = s(bool,X16) | s(bool,'F_0') = s(bool,X16)) ) | $spl0),
  inference(trivial_inequality_removal,[],[f15242])).
fof(f15242,plain,(
  ( ! [X14,X15,X16] : (s(bool,'F_0') != s(bool,'F_0') | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X14))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X15))) | s(bool,'T_0') = s(bool,X15) | s(bool,X14) = s(bool,X16) | s(bool,'F_0') = s(bool,X16)) ) | $spl0),
  inference(superposition,[],[f404,f1632])).
fof(f15303,plain,(
  ( ! [X0,X1] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1))) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(trivial_inequality_removal,[],[f15237])).
fof(f15237,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') != s(bool,'F_0') | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1))) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f404,f121])).
fof(f15216,plain,(
  ( ! [X10,X8,X11,X9] : (s(bool,X8) != s(bool,X9) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X9))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X10))) | s(bool,'T_0') = s(bool,X10) | s(bool,X8) = s(bool,X11) | s(bool,'F_0') = s(bool,X11)) ) | $spl0),
  inference(superposition,[],[f404,f1632])).
fof(f15215,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,X4) != s(bool,X5) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X5))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X6))) | s(bool,'T_0') = s(bool,X6) | s(bool,X4) = s(bool,X7) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X7)),bool))) ) | $spl0),
  inference(superposition,[],[f404,f1834])).
fof(f14507,plain,(
  ( ! [X134,X133] : (s(bool,'F_0') != s(bool,X133) | s(bool,X134) = s(bool,sK6('const.option.SOME_1'(s(bool,X133)),bool)) | s(bool,'T_0') = s(bool,X134)) ) | $spl0),
  inference(superposition,[],[f13980,f901])).
fof(f13554,plain,(
  ( ! [X420,X418,X421,X419] : (s(X420,f(s(bool,'T_0'))) != s(X420,g(s(bool,'T_0'))) | s(fun(bool,X420),X418) = s(fun(bool,X420),X419) | s(bool,X421) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X421) = s(bool,sK8(X418,X419,X420,bool))) ) | $spl0),
  inference(superposition,[],[f167,f9397])).
fof(f13551,plain,(
  ( ! [X412,X411] : (s('type.option.option'(bool),X411) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X411) | s(bool,X412) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X412) = s(bool,sK6(X411,bool))) ) | $spl0),
  inference(superposition,[],[f148,f9397])).
fof(f13533,plain,(
  ( ! [X344,X346,X345] : (s(bool,'T_0') != s(bool,X345) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X344))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X345))) | s(bool,X346) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X344) = s(bool,X346)) ) | $spl0),
  inference(superposition,[],[f158,f9397])).
fof(f13531,plain,(
  ( ! [X339,X340,X338] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X339))) | s(bool,X338) = s(bool,X339) | s(bool,X340) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X338) = s(bool,X340)) ) | $spl0),
  inference(superposition,[],[f157,f9397])).
fof(f14255,plain,(
  ( ! [X156,X155] : (s(bool,X155) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X156) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X155) = s(bool,X156)) ) | $spl0),
  inference(subsumption_resolution,[],[f13464,f901])).
fof(f13464,plain,(
  ( ! [X156,X155] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X155) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X156) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X155) = s(bool,X156)) ) | $spl0),
  inference(superposition,[],[f8961,f9397])).
fof(f14247,plain,(
  ( ! [X28,X29,X27] : (s(bool,X27) != s(bool,X28) | s(bool,'T_0') = s(bool,X28) | s(bool,X29) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X27) = s(bool,X29)) ) | $spl0),
  inference(subsumption_resolution,[],[f13418,f114])).
fof(f13418,plain,(
  ( ! [X28,X29,X27] : (~p(s(bool,'T_0')) | s(bool,X27) != s(bool,X28) | s(bool,'T_0') = s(bool,X28) | s(bool,X29) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X27) = s(bool,X29)) ) | $spl0),
  inference(superposition,[],[f211,f9397])).
fof(f13394,plain,(
  ( ! [X218,X219,X217] : (s(bool,X217) != s(bool,X218) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X218))) | s(bool,X219) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X217) = s(bool,X219)) ) | $spl0),
  inference(superposition,[],[f158,f9397])).
fof(f13342,plain,(
  ( ! [X59,X57,X58] : (s(bool,X57) != s(bool,X58) | s(bool,X58) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X59) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X57) = s(bool,X59)) ) | $spl0),
  inference(superposition,[],[f9392,f9397])).
fof(f13339,plain,(
  ( ! [X47,X48,X46] : (s(bool,X47) = s(bool,sK6('const.option.SOME_1'(s(bool,X46)),bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X47)),bool)) | s(bool,X48) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X46) = s(bool,X48)) ) | $spl0),
  inference(superposition,[],[f7724,f9397])).
fof(f13338,plain,(
  ( ! [X45,X43,X44] : (s(bool,X44) = s(bool,sK6('const.option.SOME_1'(s(bool,X43)),bool)) | s(bool,'F_0') = s(bool,X44) | s(bool,X45) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X43) = s(bool,X45)) ) | $spl0),
  inference(superposition,[],[f7478,f9397])).
fof(f13335,plain,(
  ( ! [X28,X26,X29,X27] : (s(bool,X26) != s(bool,X27) | s(bool,X27) = s(bool,X28) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X28)),bool)) | s(bool,X29) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X26) = s(bool,X29)) ) | $spl0),
  inference(superposition,[],[f3405,f9397])).
fof(f13334,plain,(
  ( ! [X21,X19,X20,X18] : (s(bool,X18) != s(bool,X19) | s(bool,X20) = s(bool,sK6('const.option.SOME_1'(s(bool,X19)),bool)) | s(bool,'F_0') = s(bool,X20) | s(bool,X21) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X18) = s(bool,X21)) ) | $spl0),
  inference(superposition,[],[f2660,f9397])).
fof(f13333,plain,(
  ( ! [X14,X17,X15,X16] : (s(bool,X14) != s(bool,X15) | s(bool,X15) = s(bool,X16) | s(bool,'F_0') = s(bool,X16) | s(bool,X17) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X14) = s(bool,X17)) ) | $spl0),
  inference(superposition,[],[f2035,f9397])).
fof(f13329,plain,(
  ( ! [X436,X434,X433,X435] : (s(X435,f(s(bool,X436))) != s(X435,g(s(bool,X436))) | s(fun(bool,X435),X433) = s(fun(bool,X435),X434) | s(bool,X436) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,sK8(X433,X434,X435,bool))) ) | $spl0),
  inference(superposition,[],[f167,f9397])).
fof(f13326,plain,(
  ( ! [X426,X427] : (s('type.option.option'(bool),X426) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X427))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X426) | s(bool,X427) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,sK6(X426,bool))) ) | $spl0),
  inference(superposition,[],[f148,f9397])).
fof(f13308,plain,(
  ( ! [X358,X360,X359] : (s(bool,X359) != s(bool,X360) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X358))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X360))) | s(bool,X359) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,X358)) ) | $spl0),
  inference(superposition,[],[f158,f9397])).
fof(f14181,plain,(
  ( ! [X255,X254] : (s(bool,X255) != s(bool,sK6('const.option.SOME_1'(s(bool,X254)),bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X255)),bool)) | s(bool,X254) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f13268,f180])).
fof(f13268,plain,(
  ( ! [X255,X254] : (s(bool,X255) != s(bool,sK6('const.option.SOME_1'(s(bool,X254)),bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X255)),bool)) | s(bool,X254) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl0),
  inference(superposition,[],[f4474,f9397])).
fof(f14165,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X0) | s(bool,X0) != s(bool,sK6('const.option.SOME_1'(s(bool,X1)),bool)) | s(bool,X1) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(condensation,[],[f14164])).
fof(f14164,plain,(
  ( ! [X111,X112,X113] : (s(bool,X113) != s(bool,sK6('const.option.SOME_1'(s(bool,X112)),bool)) | s(bool,X111) = s(bool,X113) | s(bool,'F_0') = s(bool,X113) | s(bool,X112) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f13216,f2035])).
fof(f13216,plain,(
  ( ! [X111,X112,X113] : (s(bool,X113) != s(bool,sK6('const.option.SOME_1'(s(bool,X112)),bool)) | s(bool,X111) = s(bool,X113) | s(bool,'F_0') = s(bool,X113) | s(bool,X112) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,X111)) ) | $spl0),
  inference(superposition,[],[f3585,f9397])).
fof(f13156,plain,(
  ( ! [X358,X360,X359] : (s(bool,X359) != s(bool,X360) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X358))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X360))) | s(bool,X358) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,X359)) ) | $spl0),
  inference(superposition,[],[f158,f9397])).
fof(f13154,plain,(
  ( ! [X352,X354,X353] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X353))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X354))) | s(bool,X352) = s(bool,X354) | s(bool,X352) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,X353)) ) | $spl0),
  inference(superposition,[],[f157,f9397])).
fof(f14036,plain,(
  ( ! [X261,X263,X262] : (s(bool,'T_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X262,bool)) | s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X262),s(bool,X261))) | s(bool,X261) = s(bool,X263) | s(bool,'T_0') = s(bool,X263)) ) | $spl0),
  inference(forward_demodulation,[],[f13025,f901])).
fof(f13025,plain,(
  ( ! [X261,X263,X262] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X262),s(bool,X261))) | s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X262,bool)) | s(bool,X261) = s(bool,X263) | s(bool,'T_0') = s(bool,X263)) ) | $spl0),
  inference(superposition,[],[f2789,f9397])).
fof(f14035,plain,(
  ( ! [X259,X260,X258] : (s(bool,'T_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X259,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X259),s(bool,X258))) | s(bool,X258) = s(bool,X260) | s(bool,'T_0') = s(bool,X260)) ) | $spl0),
  inference(forward_demodulation,[],[f13024,f901])).
fof(f13024,plain,(
  ( ! [X259,X260,X258] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X259),s(bool,X258))) | s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X259,bool)) | s(bool,X258) = s(bool,X260) | s(bool,'T_0') = s(bool,X260)) ) | $spl0),
  inference(superposition,[],[f1756,f9397])).
fof(f13010,plain,(
  ( ! [X212,X213,X214] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X212))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X213))) | s(bool,X213) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X212) = s(bool,X214) | s(bool,'T_0') = s(bool,X214)) ) | $spl0),
  inference(superposition,[],[f157,f9397])).
fof(f14030,plain,(
  ( ! [X208,X209] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X208))) | s(bool,X208) = s(bool,X209) | s(bool,'T_0') = s(bool,X209)) ) | $spl0),
  inference(subsumption_resolution,[],[f13008,f153])).
fof(f13008,plain,(
  ( ! [X208,X209] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X208))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,X208) = s(bool,X209) | s(bool,'T_0') = s(bool,X209)) ) | $spl0),
  inference(superposition,[],[f148,f9397])).
fof(f14009,plain,(
  ( ! [X140,X138,X139] : (s(bool,'T_0') = s(bool,X139) | s(bool,X138) != s(bool,sK6('const.option.SOME_1'(s(bool,X139)),bool)) | s(bool,X138) = s(bool,X140) | s(bool,'T_0') = s(bool,X140)) ) | $spl0),
  inference(subsumption_resolution,[],[f14008,f180])).
fof(f14008,plain,(
  ( ! [X140,X138,X139] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,X139) | s(bool,X138) != s(bool,sK6('const.option.SOME_1'(s(bool,X139)),bool)) | s(bool,X138) = s(bool,X140) | s(bool,'T_0') = s(bool,X140)) ) | $spl0),
  inference(forward_demodulation,[],[f14007,f901])).
fof(f14007,plain,(
  ( ! [X140,X138,X139] : (s(bool,'T_0') = s(bool,X139) | s(bool,X138) != s(bool,sK6('const.option.SOME_1'(s(bool,X139)),bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X138) = s(bool,X140) | s(bool,'T_0') = s(bool,X140)) ) | $spl0),
  inference(forward_demodulation,[],[f12984,f901])).
fof(f12984,plain,(
  ( ! [X140,X138,X139] : (s(bool,X138) != s(bool,sK6('const.option.SOME_1'(s(bool,X139)),bool)) | s(bool,X139) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X138) = s(bool,X140) | s(bool,'T_0') = s(bool,X140)) ) | $spl0),
  inference(superposition,[],[f3585,f9397])).
fof(f13980,plain,(
  ( ! [X37,X38] : (s(bool,'F_0') != s(bool,X37) | s(bool,X37) = s(bool,X38) | s(bool,'T_0') = s(bool,X38)) ) | $spl0),
  inference(subsumption_resolution,[],[f13979,f114])).
fof(f13979,plain,(
  ( ! [X37,X38] : (~p(s(bool,'T_0')) | s(bool,'F_0') != s(bool,X37) | s(bool,X37) = s(bool,X38) | s(bool,'T_0') = s(bool,X38)) ) | $spl0),
  inference(forward_demodulation,[],[f12951,f901])).
fof(f12951,plain,(
  ( ! [X37,X38] : (s(bool,'F_0') != s(bool,X37) | ~p(s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) | s(bool,X37) = s(bool,X38) | s(bool,'T_0') = s(bool,X38)) ) | $spl0),
  inference(superposition,[],[f127,f9397])).
fof(f12913,plain,(
  ( ! [X271,X273,X272] : (s(bool,X272) != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X271))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X272))) | s(bool,X271) = s(bool,X273) | s(bool,'T_0') = s(bool,X273)) ) | $spl0),
  inference(superposition,[],[f158,f9397])).
fof(f12814,plain,(
  ( ! [X125,X124] : (s(bool,'T_0') = s(bool,X124) | s(bool,X125) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X125) = s(bool,sK6('const.option.SOME_1'(s(bool,X124)),bool))) ) | $spl0),
  inference(superposition,[],[f9397,f901])).
fof(f13870,plain,(
  ( ! [X92,X90,X91] : (s(bool,X91) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X91) = s(bool,sK6('const.option.SOME_1'(s(bool,X90)),bool)) | s(bool,X90) = s(bool,X92) | s(bool,'F_0') = s(bool,X92)) ) | $spl0),
  inference(subsumption_resolution,[],[f12803,f180])).
fof(f12803,plain,(
  ( ! [X92,X90,X91] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X91) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X91) = s(bool,sK6('const.option.SOME_1'(s(bool,X90)),bool)) | s(bool,X90) = s(bool,X92) | s(bool,'F_0') = s(bool,X92)) ) | $spl0),
  inference(superposition,[],[f9397,f1834])).
fof(f13869,plain,(
  ( ! [X88,X89] : (s(bool,X89) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X89) = s(bool,sK6('const.option.SOME_1'(s(bool,X88)),bool)) | s(bool,X88) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f12802,f180])).
fof(f12802,plain,(
  ( ! [X88,X89] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X89) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X89) = s(bool,sK6('const.option.SOME_1'(s(bool,X88)),bool)) | s(bool,X88) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f9397,f7724])).
fof(f12759,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,X4) = s(bool,X5) | s(bool,X6) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X5) = s(bool,X6) | s(bool,X4) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) ) | $spl0),
  inference(superposition,[],[f9397,f208])).
fof(f12758,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X2) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X1) = s(bool,X2) | s(bool,X3) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X0) = s(bool,X3)) ) | $spl0),
  inference(superposition,[],[f9397,f9397])).
fof(f13845,plain,(
  ( ! [X80,X81,X79] : (s(bool,X79) = s(bool,X80) | s(bool,X80) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X79) = s(bool,X81) | s(bool,'F_0') = s(bool,X81)) ) | $spl0),
  inference(subsumption_resolution,[],[f12737,f180])).
fof(f12737,plain,(
  ( ! [X80,X81,X79] : (s(bool,X79) = s(bool,X80) | s(bool,X80) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X79) = s(bool,X81) | s(bool,'F_0') = s(bool,X81)) ) | $spl0),
  inference(superposition,[],[f9397,f1632])).
fof(f13844,plain,(
  ( ! [X78,X76,X77] : (s(bool,X76) = s(bool,X77) | s(bool,X77) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X76) = s(bool,X78) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X78)),bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f12736,f180])).
fof(f12736,plain,(
  ( ! [X78,X76,X77] : (s(bool,X76) = s(bool,X77) | s(bool,X77) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X76) = s(bool,X78) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X78)),bool))) ) | $spl0),
  inference(superposition,[],[f9397,f1834])).
fof(f12614,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,X5) = s(bool,sK6('const.option.SOME_1'(s(bool,X4)),bool)) | s(bool,X5) = s(bool,X6) | s(bool,'T_0') = s(bool,X6) | s(bool,X4) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) ) | $spl0),
  inference(superposition,[],[f9397,f208])).
fof(f12613,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X1) = s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool)) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,X3) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X0) = s(bool,X3)) ) | $spl0),
  inference(superposition,[],[f9397,f9397])).
fof(f10369,plain,(
  ( ! [X78,X76,X79,X77,X75] : (s(bool,X75) != s(bool,X76) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X77),'const.option.NONE_0'),s(bool,X76),s(fun(X77,bool),X78))) | s(bool,X75) = s(bool,X79) | s(bool,'T_0') = s(bool,X79)) ) | $spl0),
  inference(superposition,[],[f9763,f208])).
fof(f10364,plain,(
  ( ! [X57,X54,X58,X56,X55] : (s(bool,'F_0') != s(bool,X55) | s(bool,X54) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X56),'const.option.NONE_0'),s(bool,X55),s(fun(X56,bool),X57))) | s(bool,X54) = s(bool,X58) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X58)),bool))) ) | $spl0),
  inference(superposition,[],[f9763,f1834])).
fof(f10363,plain,(
  ( ! [X52,X50,X53,X51,X49] : (s(bool,X50) != s(bool,X51) | s(bool,X49) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X52),'const.option.NONE_0'),s(bool,X51),s(fun(X52,bool),X53))) | s(bool,'F_0') = s(bool,X49) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X50)),bool))) ) | $spl0),
  inference(superposition,[],[f9763,f1834])).
fof(f10362,plain,(
  ( ! [X47,X45,X48,X46,X44] : (s(bool,X45) != s(bool,X46) | s(bool,X44) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X47),'const.option.NONE_0'),s(bool,X46),s(fun(X47,bool),X48))) | s(bool,'F_0') = s(bool,X45) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X44)),bool))) ) | $spl0),
  inference(superposition,[],[f9763,f1834])).
fof(f10359,plain,(
  ( ! [X30,X33,X31,X29,X32] : (s(bool,X30) != s(bool,X31) | s(bool,X29) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X32),'const.option.NONE_0'),s(bool,X31),s(fun(X32,bool),X33))) | s(bool,'F_0') = s(bool,X30) | s(bool,'F_0') = s(bool,X29)) ) | $spl0),
  inference(superposition,[],[f9763,f1632])).
fof(f10358,plain,(
  ( ! [X28,X26,X24,X27,X25] : (s(bool,'F_0') != s(bool,X25) | s(bool,X24) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X26),'const.option.NONE_0'),s(bool,X25),s(fun(X26,bool),X27))) | s(bool,X24) = s(bool,X28) | s(bool,'F_0') = s(bool,X28)) ) | $spl0),
  inference(superposition,[],[f9763,f1632])).
fof(f10355,plain,(
  ( ! [X12,X10,X13,X11,X9] : (s(bool,X10) != s(bool,X11) | s(bool,X9) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X12),'const.option.NONE_0'),s(bool,X11),s(fun(X12,bool),X13))) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,X9)) ) | $spl0),
  inference(superposition,[],[f9763,f208])).
fof(f10354,plain,(
  ( ! [X6,X4,X8,X7,X5] : (s(bool,'T_0') != s(bool,X5) | s(bool,X4) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.NONE_0'),s(bool,X5),s(fun(X6,bool),X7))) | s(bool,X4) = s(bool,X8) | s(bool,'T_0') = s(bool,X8)) ) | $spl0),
  inference(superposition,[],[f9763,f208])).
fof(f10353,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') != s(bool,X1) | s(bool,X0) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X2),'const.option.NONE_0'),s(bool,X1),s(fun(X2,bool),X3))) | s(bool,'T_0') = s(bool,X0)) ) | $spl0),
  inference(superposition,[],[f9763,f121])).
fof(f10421,plain,(
  ( ! [X149,X147,X150,X148] : (s(bool,X148) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X149),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X149,bool),X150))) | s(bool,X147) != s(bool,X148) | s(bool,'F_0') = s(bool,X147)) ) | $spl0),
  inference(forward_demodulation,[],[f10348,f901])).
fof(f10348,plain,(
  ( ! [X149,X147,X150,X148] : (s(bool,X147) != s(bool,X148) | s(bool,X148) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X149),'const.option.NONE_0'),s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)),s(fun(X149,bool),X150))) | s(bool,'F_0') = s(bool,X147)) ) | $spl0),
  inference(superposition,[],[f9763,f7478])).
fof(f10420,plain,(
  ( ! [X146,X144,X145,X143] : (s(bool,X144) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X145),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X145,bool),X146))) | s(bool,X143) != s(bool,X144) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X143)),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f10347,f901])).
fof(f10347,plain,(
  ( ! [X146,X144,X145,X143] : (s(bool,X143) != s(bool,X144) | s(bool,X144) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X145),'const.option.NONE_0'),s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)),s(fun(X145,bool),X146))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X143)),bool))) ) | $spl0),
  inference(superposition,[],[f9763,f7724])).
fof(f10337,plain,(
  ( ! [X103,X101,X102,X100] : (s(bool,X100) != s(bool,X101) | s(bool,X101) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X102),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X102,bool),X103))) | s(bool,'T_0') = s(bool,X100)) ) | $spl0),
  inference(superposition,[],[f9763,f121])).
fof(f10335,plain,(
  ( ! [X94,X92,X90,X93,X91] : (s(bool,X90) != s(bool,X91) | s(bool,X91) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X92),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X92,bool),X93))) | s(bool,X90) = s(bool,X94) | s(bool,'F_0') = s(bool,X94)) ) | $spl0),
  inference(superposition,[],[f9763,f1632])).
fof(f10334,plain,(
  ( ! [X88,X87,X85,X89,X86] : (s(bool,X85) != s(bool,X86) | s(bool,X86) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X87),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X87,bool),X88))) | s(bool,X85) = s(bool,X89) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X89)),bool))) ) | $spl0),
  inference(superposition,[],[f9763,f1834])).
fof(f10332,plain,(
  ( ! [X78,X76,X79,X77,X75] : (s(bool,X75) != s(bool,X76) | s(bool,X76) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X77),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X77,bool),X78))) | s(bool,X75) = s(bool,X79) | s(bool,'T_0') = s(bool,X79)) ) | $spl0),
  inference(superposition,[],[f9763,f208])).
fof(f10407,plain,(
  ( ! [X70,X68,X69,X67] : (s(bool,'T_0') != s(bool,X68) | s(bool,X68) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X69),'const.option.NONE_0'),s(bool,X67),s(fun(X69,bool),X70))) | s(bool,'F_0') = s(bool,X67)) ) | $spl0),
  inference(forward_demodulation,[],[f10330,f901])).
fof(f10330,plain,(
  ( ! [X70,X68,X69,X67] : (s(bool,X68) != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X68) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X69),'const.option.NONE_0'),s(bool,X67),s(fun(X69,bool),X70))) | s(bool,'F_0') = s(bool,X67)) ) | $spl0),
  inference(superposition,[],[f9763,f7478])).
fof(f10327,plain,(
  ( ! [X57,X54,X58,X56,X55] : (s(bool,'F_0') != s(bool,X55) | s(bool,X55) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X56),'const.option.NONE_0'),s(bool,X54),s(fun(X56,bool),X57))) | s(bool,X54) = s(bool,X58) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X58)),bool))) ) | $spl0),
  inference(superposition,[],[f9763,f1834])).
fof(f10326,plain,(
  ( ! [X52,X50,X53,X51,X49] : (s(bool,X50) != s(bool,X51) | s(bool,X51) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X52),'const.option.NONE_0'),s(bool,X49),s(fun(X52,bool),X53))) | s(bool,'F_0') = s(bool,X49) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X50)),bool))) ) | $spl0),
  inference(superposition,[],[f9763,f1834])).
fof(f10322,plain,(
  ( ! [X30,X33,X31,X29,X32] : (s(bool,X30) != s(bool,X31) | s(bool,X31) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X32),'const.option.NONE_0'),s(bool,X29),s(fun(X32,bool),X33))) | s(bool,'F_0') = s(bool,X30) | s(bool,'F_0') = s(bool,X29)) ) | $spl0),
  inference(superposition,[],[f9763,f1632])).
fof(f10321,plain,(
  ( ! [X28,X26,X24,X27,X25] : (s(bool,'F_0') != s(bool,X25) | s(bool,X25) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X26),'const.option.NONE_0'),s(bool,X24),s(fun(X26,bool),X27))) | s(bool,X24) = s(bool,X28) | s(bool,'F_0') = s(bool,X28)) ) | $spl0),
  inference(superposition,[],[f9763,f1632])).
fof(f10318,plain,(
  ( ! [X12,X10,X13,X11,X9] : (s(bool,X10) != s(bool,X11) | s(bool,X11) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X12),'const.option.NONE_0'),s(bool,X9),s(fun(X12,bool),X13))) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,X9)) ) | $spl0),
  inference(superposition,[],[f9763,f208])).
fof(f10317,plain,(
  ( ! [X6,X4,X8,X7,X5] : (s(bool,'T_0') != s(bool,X5) | s(bool,X5) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.NONE_0'),s(bool,X4),s(fun(X6,bool),X7))) | s(bool,X4) = s(bool,X8) | s(bool,'T_0') = s(bool,X8)) ) | $spl0),
  inference(superposition,[],[f9763,f208])).
fof(f10316,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') != s(bool,X1) | s(bool,X1) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X2),'const.option.NONE_0'),s(bool,X0),s(fun(X2,bool),X3))) | s(bool,'T_0') = s(bool,X0)) ) | $spl0),
  inference(superposition,[],[f9763,f121])).
fof(f10208,plain,(
  ( ! [X6,X8,X7,X5,X9] : (s(bool,X5) != s(bool,X6) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X7),'const.option.NONE_0'),s(bool,X6),s(fun(X7,bool),X8))) | s(bool,X5) = s(bool,X9) | s(bool,'F_0') = s(bool,X9)) ) | $spl0),
  inference(superposition,[],[f4508,f1632])).
fof(f10207,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,X0) != s(bool,X1) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X2),'const.option.NONE_0'),s(bool,X1),s(fun(X2,bool),X3))) | s(bool,X0) = s(bool,X4) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X4)),bool))) ) | $spl0),
  inference(superposition,[],[f4508,f1834])).
fof(f10036,plain,(
  ( ! [X80,X83,X81,X82] : (s(bool,X81) != s(bool,sK6('const.option.SOME_1'(s(bool,X83)),bool)) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X80),'const.option.NONE_0'),s(bool,X81),s(fun(X80,bool),X82))) | s(bool,'T_0') = s(bool,X83)) ) | $spl0),
  inference(superposition,[],[f4477,f166])).
fof(f9763,plain,(
  ( ! [X88,X87,X85,X86] : (s(bool,X86) != s(bool,X88) | s(bool,X88) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X85),'const.option.NONE_0'),s(bool,X86),s(fun(X85,bool),X87)))) ) | $spl0),
  inference(global_subsumption,[],[f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f3318,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f3315,f469,f736,f888,f3074,f2715,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f615,f593,f3046,f2687,f876,f855,f3047,f2688,f607,f3091,f2779,f862,f3092,f2780,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f3016,f2844,f2818,f2790,f2788,f2778,f2766,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f3017,f2845,f2819,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9051,f9058,f9061,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9599,f9600,f9601,f9649,f9650,f9651,f9652,f9762])).
fof(f9762,plain,(
  ( ! [X88,X87,X85,X86] : (s(bool,X86) != s(bool,X88) | s(bool,X88) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X85),'const.option.NONE_0'),s(bool,X86),s(fun(X85,bool),X87))) | s(bool,'F_0') = s(bool,X88)) ) | $spl0),
  inference(forward_demodulation,[],[f9686,f901])).
fof(f9686,plain,(
  ( ! [X88,X87,X85,X86] : (s(bool,X88) != s(bool,sK6('const.option.SOME_1'(s(bool,X86)),bool)) | s(bool,X88) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X85),'const.option.NONE_0'),s(bool,X86),s(fun(X85,bool),X87))) | s(bool,'F_0') = s(bool,X88)) ) | $spl0),
  inference(superposition,[],[f3585,f166])).
fof(f9652,plain,(
  ( ! [X94,X95] : (s(bool,X94) != s(bool,sK6('const.option.SOME_1'(s(bool,X95)),bool)) | s(bool,X95) = s(bool,sK6('const.option.SOME_1'(s(bool,X94)),bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X94)),bool))) ) | $spl0),
  inference(superposition,[],[f3585,f901])).
fof(f9649,plain,(
  ( ! [X80,X83,X81,X82] : (s(bool,X81) != s(bool,sK6('const.option.SOME_1'(s(bool,X83)),bool)) | s(bool,X83) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X80),'const.option.NONE_0'),s(bool,X81),s(fun(X80,bool),X82))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X80),'const.option.NONE_0'),s(bool,X81),s(fun(X80,bool),X82)))) ) | $spl0),
  inference(superposition,[],[f3585,f166])).
fof(f9601,plain,(
  ( ! [X99,X100] : (s(bool,'T_0') != s(bool,X99) | s(bool,X100) = s(bool,sK6('const.option.SOME_1'(s(bool,X99)),bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X100)),bool))) ) | $spl0),
  inference(superposition,[],[f3405,f901])).
fof(f9598,plain,(
  ( ! [X88,X87,X85,X86] : (s(bool,'T_0') != s(bool,X86) | s(bool,X88) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X85),'const.option.NONE_0'),s(bool,X86),s(fun(X85,bool),X87))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X88)),bool))) ) | $spl0),
  inference(superposition,[],[f3405,f166])).
fof(f9555,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) != s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X2)),bool)) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | $spl0),
  inference(superposition,[],[f3405,f208])).
fof(f9486,plain,(
  ( ! [X21,X20] : (s(bool,X20) != s(bool,X21) | s(bool,X21) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X20)),bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f9433,f180])).
fof(f9433,plain,(
  ( ! [X21,X20] : (s(bool,X20) != s(bool,X21) | s(bool,X21) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,'F_0') | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X20)),bool))) ) | $spl0),
  inference(superposition,[],[f9392,f1834])).
fof(f9424,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) != s(bool,X1) | s(bool,X1) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl0),
  inference(superposition,[],[f9392,f208])).
fof(f9392,plain,(
  ( ! [X36] : (s(bool,'T_0') != s(bool,X36) | s(bool,X36) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f8961,f901])).
fof(f9397,plain,(
  ( ! [X2,X1] : (s(bool,X1) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl0),
  inference(subsumption_resolution,[],[f9332,f901])).
fof(f9332,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X1) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl0),
  inference(superposition,[],[f8961,f208])).
fof(f9095,plain,(
  ( ! [X90,X89] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X90))) | s(bool,X89) != s(bool,X90) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X89)),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f8866,f901])).
fof(f8866,plain,(
  ( ! [X90,X89] : (s(bool,X89) != s(bool,X90) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X90))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X89)),bool))) ) | $spl0),
  inference(superposition,[],[f158,f7724])).
fof(f8864,plain,(
  ( ! [X85,X86] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X85))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X86))) | s(bool,X86) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X85)),bool))) ) | $spl0),
  inference(superposition,[],[f157,f7724])).
fof(f9094,plain,(
  ( ! [X83] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X83)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X83)))) ) | $spl0),
  inference(subsumption_resolution,[],[f8862,f153])).
fof(f8862,plain,(
  ( ! [X83] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X83))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X83)),bool))) ) | $spl0),
  inference(superposition,[],[f148,f7724])).
fof(f9050,plain,(
  ( ! [X125,X126] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X126),s(bool,'T_0'))) | s(bool,X125) = s(bool,sK7(X125,X126,bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X125)),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f8809,f901])).
fof(f8809,plain,(
  ( ! [X125,X126] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X126),s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)))) | s(bool,X125) = s(bool,sK7(X125,X126,bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X125)),bool))) ) | $spl0),
  inference(superposition,[],[f2789,f7724])).
fof(f9049,plain,(
  ( ! [X123,X124] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X124),s(bool,'T_0'))) | s(bool,X123) = s(bool,sK7(X123,X124,bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X123)),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f8808,f901])).
fof(f8808,plain,(
  ( ! [X123,X124] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X124),s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)))) | s(bool,X123) = s(bool,sK7(X123,X124,bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X123)),bool))) ) | $spl0),
  inference(superposition,[],[f1756,f7724])).
fof(f8798,plain,(
  ( ! [X101,X100] : (s(bool,X101) != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X100))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X101))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X100)),bool))) ) | $spl0),
  inference(superposition,[],[f158,f7724])).
fof(f8985,plain,(
  ( ! [X88,X87] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X87))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X88))) | s(bool,'F_0') != s(bool,X88) | s(bool,X87) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f8723,f901])).
fof(f8723,plain,(
  ( ! [X88,X87] : (s(bool,'F_0') != s(bool,X88) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X88))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,X87)),bool)))) | s(bool,X87) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f158,f7724])).
fof(f8721,plain,(
  ( ! [X83,X84] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X84))) | s(bool,X84) = s(bool,sK6('const.option.SOME_1'(s(bool,X83)),bool)) | s(bool,X83) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f157,f7724])).
fof(f8984,plain,(
  ( ! [X81] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X81))) | s(bool,X81) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f8719,f153])).
fof(f8719,plain,(
  ( ! [X81] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X81))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X81))) | s(bool,X81) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f148,f7724])).
fof(f8974,plain,(
  ( ! [X57,X58,X56] : (s(bool,X57) = s(bool,sK6('const.option.SOME_1'(s(bool,X56)),bool)) | s(bool,X57) = s(bool,X58) | s(bool,'F_0') = s(bool,X58) | s(bool,X56) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f8701,f179])).
fof(f8701,plain,(
  ( ! [X57,X58,X56] : (p(s(bool,'F_0')) | s(bool,X57) = s(bool,sK6('const.option.SOME_1'(s(bool,X56)),bool)) | s(bool,X57) = s(bool,X58) | s(bool,'F_0') = s(bool,X58) | s(bool,X56) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f2416,f7724])).
fof(f8961,plain,(
  ( ! [X11] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,X11)),bool)) | s(bool,X11) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f8678,f179])).
fof(f8678,plain,(
  ( ! [X11] : (p(s(bool,'F_0')) | s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,X11)),bool)) | s(bool,X11) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(superposition,[],[f123,f7724])).
fof(f8638,plain,(
  ( ! [X2,X0,X1] : (s(bool,X1) = s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X1)),bool)) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl0),
  inference(superposition,[],[f7724,f208])).
fof(f8921,plain,(
  ( ! [X10,X9] : (s(bool,X9) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X10) = s(bool,sK6('const.option.SOME_1'(s(bool,X9)),bool)) | s(bool,'T_0') = s(bool,X10)) ) | $spl0),
  inference(subsumption_resolution,[],[f8596,f180])).
fof(f8596,plain,(
  ( ! [X10,X9] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X9) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X10) = s(bool,sK6('const.option.SOME_1'(s(bool,X9)),bool)) | s(bool,'T_0') = s(bool,X10)) ) | $spl0),
  inference(superposition,[],[f7724,f208])).
fof(f7801,plain,(
  ( ! [X114,X113] : (s(bool,'T_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X114,bool)) | s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X114),s(bool,X113))) | s(bool,'F_0') = s(bool,X113)) ) | $spl0),
  inference(forward_demodulation,[],[f7686,f901])).
fof(f7686,plain,(
  ( ! [X114,X113] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X114),s(bool,X113))) | s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X114,bool)) | s(bool,'F_0') = s(bool,X113)) ) | $spl0),
  inference(superposition,[],[f2789,f7478])).
fof(f7800,plain,(
  ( ! [X111,X112] : (s(bool,'T_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X112,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X112),s(bool,X111))) | s(bool,'F_0') = s(bool,X111)) ) | $spl0),
  inference(forward_demodulation,[],[f7685,f901])).
fof(f7685,plain,(
  ( ! [X111,X112] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X112),s(bool,X111))) | s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'T_0')),bool),X112,bool)) | s(bool,'F_0') = s(bool,X111)) ) | $spl0),
  inference(superposition,[],[f1756,f7478])).
fof(f7671,plain,(
  ( ! [X80,X79] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X79))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X80))) | s(bool,X80) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'F_0') = s(bool,X79)) ) | $spl0),
  inference(superposition,[],[f157,f7478])).
fof(f7605,plain,(
  ( ! [X107,X108] : (s(bool,X108) != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X107))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X108))) | s(bool,'F_0') = s(bool,X107)) ) | $spl0),
  inference(superposition,[],[f158,f7478])).
fof(f7724,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool)) | s(bool,X0) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(condensation,[],[f7723])).
fof(f7723,plain,(
  ( ! [X19,X20] : (s(bool,X20) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'F_0') = s(bool,X19) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X20)),bool))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f7495])).
fof(f7495,plain,(
  ( ! [X19,X20] : (s(bool,X20) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'F_0') = s(bool,X19) | s(bool,'F_0') = s(bool,X19) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X20)),bool))) ) | $spl0),
  inference(superposition,[],[f7478,f1834])).
fof(f7478,plain,(
  ( ! [X56] : (s(bool,X56) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'F_0') = s(bool,X56)) ) | $spl0),
  inference(forward_demodulation,[],[f7461,f689])).
fof(f7461,plain,(
  ( ! [X56] : (s(bool,X56) = s(bool,sK6('const.option.SOME_1'(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3)))))),bool)) | s(bool,'F_0') = s(bool,X56)) ) | $spl0),
  inference(trivial_inequality_removal,[],[f7447])).
fof(f7447,plain,(
  ( ! [X56] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X56) = s(bool,sK6('const.option.SOME_1'(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3)))))),bool)) | s(bool,'F_0') = s(bool,X56)) ) | $spl0),
  inference(superposition,[],[f2660,f689])).
fof(f7467,plain,(
  ( ! [X4,X2,X3] : (s(bool,X3) = s(bool,sK6('const.option.SOME_1'(s(bool,X2)),bool)) | s(bool,'F_0') = s(bool,X3) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) ) | $spl0),
  inference(trivial_inequality_removal,[],[f7428])).
fof(f7428,plain,(
  ( ! [X4,X2,X3] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X3) = s(bool,sK6('const.option.SOME_1'(s(bool,X2)),bool)) | s(bool,'F_0') = s(bool,X3) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) ) | $spl0),
  inference(superposition,[],[f2660,f208])).
fof(f7474,plain,(
  ( ! [X30,X31,X29] : (s(bool,X29) != s(bool,X30) | s(bool,X31) = s(bool,sK6('const.option.SOME_1'(s(bool,X30)),bool)) | s(bool,'F_0') = s(bool,X31) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X29)),bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f7426,f180])).
fof(f7426,plain,(
  ( ! [X30,X31,X29] : (s(bool,X29) != s(bool,X30) | s(bool,X31) = s(bool,sK6('const.option.SOME_1'(s(bool,X30)),bool)) | s(bool,'F_0') = s(bool,X31) | s(bool,'T_0') = s(bool,'F_0') | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X29)),bool))) ) | $spl0),
  inference(superposition,[],[f2660,f1834])).
fof(f7417,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) != s(bool,X1) | s(bool,X2) = s(bool,sK6('const.option.SOME_1'(s(bool,X1)),bool)) | s(bool,'F_0') = s(bool,X2) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | $spl0),
  inference(superposition,[],[f2660,f208])).
fof(f7355,plain,(
  ( ! [X74,X72,X75,X73] : (s(bool,X73) != s(bool,X75) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X75)),bool)) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X72),'const.option.NONE_0'),s(bool,X73),s(fun(X72,bool),X74)))) ) | $spl0),
  inference(superposition,[],[f2494,f166])).
fof(f7216,plain,(
  ( ! [X76,X74,X75,X73] : (s(bool,X74) != s(bool,X76) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X73),'const.option.NONE_0'),s(bool,X74),s(fun(X73,bool),X75))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X76)),bool))) ) | $spl0),
  inference(superposition,[],[f2471,f166])).
fof(f6395,plain,(
  ( ! [X28,X26,X27] : (s(bool,X27) != s(bool,sK6('const.option.SOME_1'(s(bool,X26)),bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X27)),bool)) | s(bool,X26) = s(bool,X28) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X28)),bool))) ) | $spl0),
  inference(superposition,[],[f4474,f1834])).
fof(f6394,plain,(
  ( ! [X24,X25] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,X24)),bool)) | s(bool,X24) = s(bool,X25) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X25)),bool))) ) | $spl0),
  inference(superposition,[],[f4454,f1834])).
fof(f6393,plain,(
  ( ! [X23,X21,X22] : (s(bool,X21) != s(bool,X22) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X22)),bool)) | s(bool,X21) = s(bool,X23) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X23)),bool))) ) | $spl0),
  inference(superposition,[],[f3910,f1834])).
fof(f6392,plain,(
  ( ! [X19,X20,X18] : (s(bool,X19) != s(bool,sK6('const.option.SOME_1'(s(bool,X18)),bool)) | s(bool,'F_0') = s(bool,X19) | s(bool,X18) = s(bool,X20) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X20)),bool))) ) | $spl0),
  inference(superposition,[],[f3597,f1834])).
fof(f6054,plain,(
  ( ! [X70,X72,X71] : (s(bool,X71) = s(bool,sK6('const.option.SOME_1'(s(bool,X70)),bool)) | s(bool,X71) = s(bool,X72) | s(bool,'F_0') = s(bool,X72) | s(bool,'T_0') = s(bool,X70)) ) | $spl0),
  inference(subsumption_resolution,[],[f6034,f179])).
fof(f6034,plain,(
  ( ! [X70,X72,X71] : (p(s(bool,'F_0')) | s(bool,X71) = s(bool,sK6('const.option.SOME_1'(s(bool,X70)),bool)) | s(bool,X71) = s(bool,X72) | s(bool,'F_0') = s(bool,X72) | s(bool,'T_0') = s(bool,X70)) ) | $spl0),
  inference(superposition,[],[f2416,f3743])).
fof(f5130,plain,(
  ( ! [X6,X7] : (s(bool,X7) != s(bool,sK6('const.option.SOME_1'(s(bool,X6)),bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X7)),bool)) | s(bool,'T_0') = s(bool,X6)) ) | $spl0),
  inference(superposition,[],[f4474,f121])).
fof(f5128,plain,(
  ( ! [X2,X0,X1] : (s(bool,X1) != s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X1)),bool)) | s(bool,X0) = s(bool,X2) | s(bool,'F_0') = s(bool,X2)) ) | $spl0),
  inference(superposition,[],[f4474,f1632])).
fof(f5098,plain,(
  ( ! [X28,X29,X27] : (s(bool,'T_0') != s(bool,X28) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X27),'const.option.NONE_0'),s(bool,X28),s(fun(X27,bool),X29)))) ) | $spl0),
  inference(forward_demodulation,[],[f5069,f901])).
fof(f5069,plain,(
  ( ! [X28,X29,X27] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,X28)),bool)) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X27),'const.option.NONE_0'),s(bool,X28),s(fun(X27,bool),X29)))) ) | $spl0),
  inference(superposition,[],[f4597,f166])).
fof(f4689,plain,(
  ( ! [X41,X40] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X41))) | s(bool,X41) = s(bool,sK6('const.option.SOME_1'(s(bool,X40)),bool)) | s(bool,'T_0') = s(bool,X40)) ) | $spl0),
  inference(superposition,[],[f157,f3743])).
fof(f4597,plain,(
  ( ! [X4] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,X4)),bool)) | s(bool,'T_0') = s(bool,X4)) ) | $spl0),
  inference(superposition,[],[f4454,f121])).
fof(f4477,plain,(
  ( ! [X6,X7] : (s(bool,X7) != s(bool,sK6('const.option.SOME_1'(s(bool,X6)),bool)) | s(bool,'F_0') = s(bool,X7) | s(bool,'T_0') = s(bool,X6)) ) | $spl0),
  inference(superposition,[],[f3597,f121])).
fof(f4475,plain,(
  ( ! [X2,X0,X1] : (s(bool,X1) != s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool)) | s(bool,'F_0') = s(bool,X1) | s(bool,X0) = s(bool,X2) | s(bool,'F_0') = s(bool,X2)) ) | $spl0),
  inference(superposition,[],[f3597,f1632])).
fof(f4474,plain,(
  ( ! [X33] : (s(bool,X33) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X33)),bool))) ) | $spl0),
  inference(superposition,[],[f3597,f901])).
fof(f4508,plain,(
  ( ! [X24,X23,X22] : (s(bool,'F_0') != s(bool,X23) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X22),'const.option.NONE_0'),s(bool,X23),s(fun(X22,bool),X24)))) ) | $spl0),
  inference(forward_demodulation,[],[f4471,f901])).
fof(f4471,plain,(
  ( ! [X24,X23,X22] : (s(bool,X23) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X22),'const.option.NONE_0'),s(bool,X23),s(fun(X22,bool),X24)))) ) | $spl0),
  inference(superposition,[],[f3597,f166])).
fof(f4454,plain,(
  s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | $spl0),
  inference(unit_resulting_resolution,[],[f180,f3597])).
fof(f127,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f88])).
fof(f88,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f42])).
fof(f42,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f41])).
fof(f41,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f24])).
fof(f24,axiom,(
  ! [X14] : (s(bool,'F_0') = s(bool,X14) <=> ~p(s(bool,X14)))),
  file('thm.misc.IN_option_rwt2','thm.bool.EQ_CLAUSES|split|3')).
fof(f128,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f88])).
fof(f179,plain,(
  ~p(s(bool,'F_0'))),
  inference(subsumption_resolution,[],[f117,f114])).
fof(f117,plain,(
  ~p(s(bool,'F_0')) | ~p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f84])).
fof(f84,plain,(
  (p(s(bool,'F_0')) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | ~p(s(bool,'F_0')))),
  inference(nnf_transformation,[],[f35])).
fof(f35,plain,(
  ~p(s(bool,'F_0')) <=> p(s(bool,'T_0'))),
  inference(flattening,[],[f18])).
fof(f18,axiom,(
  ~p(s(bool,'F_0')) <=> p(s(bool,'T_0'))),
  file('thm.misc.IN_option_rwt2','thm.bool.NOT_CLAUSES|split|2')).
fof(f191,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.pred_set.EMPTY_0')))) )),
  inference(unit_resulting_resolution,[],[f154,f128])).
fof(f298,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(bool,X1),s(fun(X0,bool),X2))) | s(bool,'F_0') = s(bool,X1)) )),
  inference(superposition,[],[f166,f121])).
fof(f347,plain,(
  s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))),
  inference(unit_resulting_resolution,[],[f180,f157])).
fof(f360,plain,(
  ( ! [X4,X5,X3] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X5))) | s(bool,X5) = s(bool,'const.bool.IN_2'(s(X3,X4),s(fun(X3,bool),'const.pred_set.EMPTY_0')))) )),
  inference(superposition,[],[f157,f191])).
fof(f361,plain,(
  ( ! [X6,X7] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X6))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X7))) | s(bool,'F_0') = s(bool,X7) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f157,f121])).
fof(f362,plain,(
  ( ! [X8,X9] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X9))) | s(bool,X8) = s(bool,X9) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f157,f121])).
fof(f403,plain,(
  ( ! [X6,X7] : (s(bool,X6) != s(bool,X7) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X7))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f158,f121])).
fof(f404,plain,(
  ( ! [X8,X9] : (s(bool,'F_0') != s(bool,X9) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X8))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X9))) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f158,f121])).
fof(f458,plain,(
  ( ! [X0] : (s('type.option.option'(bool),X0) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK6(X0,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X0)) )),
  inference(superposition,[],[f148,f121])).
fof(f696,plain,(
  s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))),
  inference(unit_resulting_resolution,[],[f347,f157])).
fof(f769,plain,(
  ( ! [X2,X0,X1] : (s(X2,f(s(bool,'F_0'))) != s(X2,g(s(bool,'F_0'))) | s(fun(bool,X2),X0) = s(fun(bool,X2),X1) | s(bool,'T_0') = s(bool,sK8(X0,X1,X2,bool))) )),
  inference(superposition,[],[f167,f121])).
fof(f886,plain,(
  ( ! [X28,X26,X27] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X27),s(bool,X26))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s(bool,X28),s(fun(bool,bool),X27))) | s(bool,'T_0') = s(bool,X26)) ) | $spl0),
  inference(superposition,[],[f806,f121])).
fof(f912,plain,(
  ( ! [X0] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool))) )),
  inference(superposition,[],[f455,f121])).
fof(f960,plain,(
  ( ! [X2] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X2)),bool)) | s(bool,'F_0') = s(bool,X2)) )),
  inference(superposition,[],[f901,f121])).
fof(f1046,plain,(
  ( ! [X19,X20] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X20))) | s(bool,X20) = s(bool,sK6('const.option.SOME_1'(s(bool,X19)),bool)) | s(bool,'F_0') = s(bool,X19)) )),
  inference(superposition,[],[f157,f960])).
fof(f1061,plain,(
  ( ! [X6,X7,X5] : (s(bool,'T_0') = s(bool,X6) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X5),'const.option.NONE_0'),s(bool,X6),s(fun(X5,bool),X7)))) )),
  inference(forward_demodulation,[],[f1026,f901])).
fof(f1026,plain,(
  ( ! [X6,X7,X5] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X6)),bool)) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X5),'const.option.NONE_0'),s(bool,X6),s(fun(X5,bool),X7)))) )),
  inference(superposition,[],[f960,f166])).
fof(f1065,plain,(
  ( ! [X10,X9] : (~p(s(bool,X10)) | s(bool,X9) = s(bool,X10) | s(bool,'F_0') = s(bool,X9)) )),
  inference(forward_demodulation,[],[f1064,f901])).
fof(f1064,plain,(
  ( ! [X10,X9] : (~p(s(bool,X10)) | s(bool,X10) = s(bool,sK6('const.option.SOME_1'(s(bool,X9)),bool)) | s(bool,'F_0') = s(bool,X9)) )),
  inference(subsumption_resolution,[],[f1039,f114])).
fof(f1039,plain,(
  ( ! [X10,X9] : (~p(s(bool,'T_0')) | ~p(s(bool,X10)) | s(bool,X10) = s(bool,sK6('const.option.SOME_1'(s(bool,X9)),bool)) | s(bool,'F_0') = s(bool,X9)) )),
  inference(superposition,[],[f165,f960])).
fof(f1066,plain,(
  ( ! [X12,X11] : (s(bool,X12) != s(bool,sK6('const.option.SOME_1'(s(bool,X11)),bool)) | s(bool,'T_0') = s(bool,X12) | s(bool,'F_0') = s(bool,X11)) )),
  inference(subsumption_resolution,[],[f1040,f114])).
fof(f1040,plain,(
  ( ! [X12,X11] : (~p(s(bool,'T_0')) | s(bool,X12) != s(bool,sK6('const.option.SOME_1'(s(bool,X11)),bool)) | s(bool,'T_0') = s(bool,X12) | s(bool,'F_0') = s(bool,X11)) )),
  inference(superposition,[],[f211,f960])).
fof(f1067,plain,(
  ( ! [X17] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X17))) | s(bool,'F_0') = s(bool,X17)) )),
  inference(subsumption_resolution,[],[f1044,f153])).
fof(f1044,plain,(
  ( ! [X17] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X17))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X17))) | s(bool,'F_0') = s(bool,X17)) )),
  inference(superposition,[],[f148,f960])).
fof(f1068,plain,(
  ( ! [X24,X23] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X23))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X24))) | s(bool,'T_0') != s(bool,X24) | s(bool,'F_0') = s(bool,X23)) )),
  inference(forward_demodulation,[],[f1048,f901])).
fof(f1048,plain,(
  ( ! [X24,X23] : (s(bool,'T_0') != s(bool,X24) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X24))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,X23)),bool)))) | s(bool,'F_0') = s(bool,X23)) )),
  inference(superposition,[],[f158,f960])).
fof(f1614,plain,(
  ( ! [X25] : (s(bool,X25) = s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3))))) | s(bool,'F_0') = s(bool,X25)) ) | $spl0),
  inference(subsumption_resolution,[],[f1601,f114])).
fof(f1601,plain,(
  ( ! [X25] : (~p(s(bool,'T_0')) | s(bool,X25) = s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3))))) | s(bool,'F_0') = s(bool,X25)) ) | $spl0),
  inference(superposition,[],[f1065,f689])).
fof(f1615,plain,(
  ( ! [X26,X27] : (s(bool,X27) = s(bool,sK6('const.option.SOME_1'(s(bool,X26)),bool)) | s(bool,'F_0') = s(bool,X27) | s(bool,'F_0') = s(bool,X26)) )),
  inference(subsumption_resolution,[],[f1602,f114])).
fof(f1602,plain,(
  ( ! [X26,X27] : (~p(s(bool,'T_0')) | s(bool,X27) = s(bool,sK6('const.option.SOME_1'(s(bool,X26)),bool)) | s(bool,'F_0') = s(bool,X27) | s(bool,'F_0') = s(bool,X26)) )),
  inference(superposition,[],[f1065,f960])).
fof(f1628,plain,(
  ( ! [X19,X17,X18] : (s(bool,X18) = s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3))))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X17),'const.option.NONE_0'),s(bool,X18),s(fun(X17,bool),X19)))) ) | $spl0),
  inference(superposition,[],[f1614,f166])).
fof(f1631,plain,(
  ( ! [X28] : (s(bool,X28) = s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3))))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X28)),bool))) ) | $spl0),
  inference(superposition,[],[f1614,f901])).
fof(f1670,plain,(
  ( ! [X54,X53] : (s(bool,X54) != s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X53))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X54))) | s(bool,'F_0') = s(bool,X53)) ) | $spl0),
  inference(superposition,[],[f158,f1614])).
fof(f1710,plain,(
  ( ! [X31,X32] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X31))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X32))) | s(bool,X32) = s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3))))) | s(bool,'F_0') = s(bool,X31)) ) | $spl0),
  inference(superposition,[],[f157,f1614])).
fof(f1756,plain,(
  ( ! [X43,X41,X42] : (s(bool,'F_0') = s(bool,happ(s(fun(X41,bool),X42),s(X41,X43))) | s(X41,X43) = s(X41,sK7(X43,X42,X41))) ) | $spl0),
  inference(subsumption_resolution,[],[f1755,f114])).
fof(f1755,plain,(
  ( ! [X43,X41,X42] : (~p(s(bool,'T_0')) | s(X41,X43) = s(X41,sK7(X43,X42,X41)) | s(bool,'F_0') = s(bool,happ(s(fun(X41,bool),X42),s(X41,X43)))) ) | $spl0),
  inference(forward_demodulation,[],[f1664,f689])).
fof(f1664,plain,(
  ( ! [X43,X41,X42] : (~p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3)))))) | s(X41,X43) = s(X41,sK7(X43,X42,X41)) | s(bool,'F_0') = s(bool,happ(s(fun(X41,bool),X42),s(X41,X43)))) ) | $spl0),
  inference(superposition,[],[f160,f1614])).
fof(f1758,plain,(
  ( ! [X50,X49] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X50))) | s(bool,X49) = s(bool,X50) | s(bool,'F_0') = s(bool,X49)) ) | $spl0),
  inference(forward_demodulation,[],[f1668,f689])).
fof(f1668,plain,(
  ( ! [X50,X49] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X50))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3))))))) | s(bool,X49) = s(bool,X50) | s(bool,'F_0') = s(bool,X49)) ) | $spl0),
  inference(superposition,[],[f157,f1614])).
fof(f1766,plain,(
  ( ! [X100] : (s('type.option.option'(bool),X100) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,sK6(X100,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X100)) ) | $spl0),
  inference(forward_demodulation,[],[f1686,f689])).
fof(f1686,plain,(
  ( ! [X100] : (s('type.option.option'(bool),X100) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3))))))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X100) | s(bool,'F_0') = s(bool,sK6(X100,bool))) ) | $spl0),
  inference(superposition,[],[f148,f1614])).
fof(f1768,plain,(
  ( ! [X105,X106,X104] : (s(X106,f(s(bool,'T_0'))) != s(X106,g(s(bool,'T_0'))) | s(fun(bool,X106),X104) = s(fun(bool,X106),X105) | s(bool,'F_0') = s(bool,sK8(X104,X105,X106,bool))) ) | $spl0),
  inference(forward_demodulation,[],[f1689,f689])).
fof(f1689,plain,(
  ( ! [X105,X106,X104] : (s(X106,f(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3))))))) != s(X106,g(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3))))))) | s(fun(bool,X106),X104) = s(fun(bool,X106),X105) | s(bool,'F_0') = s(bool,sK8(X104,X105,X106,bool))) ) | $spl0),
  inference(superposition,[],[f167,f1614])).
fof(f1774,plain,(
  ( ! [X35,X36] : (s(bool,X35) != s(bool,X36) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X36))) | s(bool,'F_0') = s(bool,X35)) ) | $spl0),
  inference(forward_demodulation,[],[f1712,f689])).
fof(f1712,plain,(
  ( ! [X35,X36] : (s(bool,X35) != s(bool,X36) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X36))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3))))))) | s(bool,'F_0') = s(bool,X35)) ) | $spl0),
  inference(superposition,[],[f158,f1614])).
fof(f1778,plain,(
  ( ! [X61,X62,X63] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s(bool,X63),s(fun(bool,bool),X62))) | s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X62),s(bool,X61))) | s(bool,'F_0') = s(bool,X61)) ) | $spl0),
  inference(forward_demodulation,[],[f1722,f689])).
fof(f1722,plain,(
  ( ! [X61,X62,X63] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X62),s(bool,X61))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3))))))),s(bool,X63),s(fun(bool,bool),X62))) | s(bool,'F_0') = s(bool,X61)) ) | $spl0),
  inference(superposition,[],[f806,f1614])).
fof(f1831,plain,(
  ( ! [X50,X48,X51,X49] : (s(bool,X49) = s(bool,X51) | s(bool,'F_0') = s(bool,X51) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X48),'const.option.NONE_0'),s(bool,X49),s(fun(X48,bool),X50)))) ) | $spl0),
  inference(superposition,[],[f1632,f166])).
fof(f1834,plain,(
  ( ! [X62,X63] : (s(bool,X62) = s(bool,X63) | s(bool,'F_0') = s(bool,X63) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X62)),bool))) ) | $spl0),
  inference(superposition,[],[f1632,f901])).
fof(f1880,plain,(
  ( ! [X37,X35,X38,X36] : (s(bool,'F_0') = s(bool,X36) | s(bool,X38) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X35),'const.option.NONE_0'),s(bool,X36),s(fun(X35,bool),X37))) | s(bool,'F_0') = s(bool,X38)) ) | $spl0),
  inference(superposition,[],[f1632,f166])).
fof(f1948,plain,(
  ( ! [X105,X106,X104] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X105))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X106))) | s(bool,X104) = s(bool,X106) | s(bool,'F_0') = s(bool,X105) | s(bool,'F_0') = s(bool,X104)) ) | $spl0),
  inference(superposition,[],[f157,f1632])).
fof(f1950,plain,(
  ( ! [X111,X112,X110] : (s(bool,X111) != s(bool,X112) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X110))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X112))) | s(bool,'F_0') = s(bool,X111) | s(bool,'F_0') = s(bool,X110)) ) | $spl0),
  inference(superposition,[],[f158,f1632])).
fof(f1961,plain,(
  ( ! [X151,X149,X150,X148] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X150),s(bool,X149))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X148))),s(bool,X151),s(fun(bool,bool),X150))) | s(bool,'F_0') = s(bool,X149) | s(bool,'F_0') = s(bool,X148)) ) | $spl0),
  inference(superposition,[],[f806,f1632])).
fof(f1967,plain,(
  ( ! [X177,X176] : (s('type.option.option'(bool),X176) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X177))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X176) | s(bool,'F_0') = s(bool,X177) | s(bool,'F_0') = s(bool,sK6(X176,bool))) ) | $spl0),
  inference(superposition,[],[f148,f1632])).
fof(f1970,plain,(
  ( ! [X185,X186,X184,X183] : (s(X185,f(s(bool,X186))) != s(X185,g(s(bool,X186))) | s(fun(bool,X185),X183) = s(fun(bool,X185),X184) | s(bool,'F_0') = s(bool,X186) | s(bool,'F_0') = s(bool,sK8(X183,X184,X185,bool))) ) | $spl0),
  inference(superposition,[],[f167,f1632])).
fof(f2033,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,X4)) | s(bool,X3) != s(bool,X4) | s(bool,X3) = s(bool,X5) | s(bool,'F_0') = s(bool,X5)) ) | $spl0),
  inference(superposition,[],[f127,f1632])).
fof(f2055,plain,(
  ( ! [X61,X62,X63] : (s(bool,X61) != s(bool,X62) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X62))) | s(bool,X61) = s(bool,X63) | s(bool,'F_0') = s(bool,X63)) ) | $spl0),
  inference(superposition,[],[f158,f1632])).
fof(f2066,plain,(
  ( ! [X101,X99,X102,X100] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X100),s(bool,X99))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s(bool,X101),s(fun(bool,bool),X100))) | s(bool,X99) = s(bool,X102) | s(bool,'F_0') = s(bool,X102)) ) | $spl0),
  inference(superposition,[],[f806,f1632])).
fof(f2101,plain,(
  ( ! [X88,X87,X86] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X87))) | s(bool,X86) = s(bool,X87) | s(bool,X86) = s(bool,X88) | s(bool,'F_0') = s(bool,X88)) ) | $spl0),
  inference(superposition,[],[f157,f1632])).
fof(f2103,plain,(
  ( ! [X94,X92,X93] : (s(bool,'F_0') != s(bool,X93) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X92))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X93))) | s(bool,X92) = s(bool,X94) | s(bool,'F_0') = s(bool,X94)) ) | $spl0),
  inference(superposition,[],[f158,f1632])).
fof(f2120,plain,(
  ( ! [X158,X157] : (s('type.option.option'(bool),X157) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X157) | s(bool,X158) = s(bool,sK6(X157,bool)) | s(bool,'F_0') = s(bool,X158)) ) | $spl0),
  inference(superposition,[],[f148,f1632])).
fof(f2123,plain,(
  ( ! [X167,X165,X166,X164] : (s(X166,f(s(bool,'F_0'))) != s(X166,g(s(bool,'F_0'))) | s(fun(bool,X166),X164) = s(fun(bool,X166),X165) | s(bool,X167) = s(bool,sK8(X164,X165,X166,bool)) | s(bool,'F_0') = s(bool,X167)) ) | $spl0),
  inference(superposition,[],[f167,f1632])).
fof(f2416,plain,(
  ( ! [X10,X11,X9] : (p(s(bool,X10)) | s(bool,X9) = s(bool,X10) | s(bool,X9) = s(bool,X11) | s(bool,'F_0') = s(bool,X11)) ) | $spl0),
  inference(subsumption_resolution,[],[f2072,f179])).
fof(f2072,plain,(
  ( ! [X10,X11,X9] : (p(s(bool,'F_0')) | p(s(bool,X10)) | s(bool,X9) = s(bool,X10) | s(bool,X9) = s(bool,X11) | s(bool,'F_0') = s(bool,X11)) ) | $spl0),
  inference(superposition,[],[f162,f1632])).
fof(f2468,plain,(
  ( ! [X50,X48,X51,X49] : (s(bool,X49) != s(bool,X51) | s(bool,'T_0') = s(bool,X51) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X48),'const.option.NONE_0'),s(bool,X49),s(fun(X48,bool),X50)))) ) | $spl0),
  inference(superposition,[],[f1747,f166])).
fof(f2471,plain,(
  ( ! [X62,X63] : (s(bool,X62) != s(bool,X63) | s(bool,'T_0') = s(bool,X63) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X62)),bool))) ) | $spl0),
  inference(superposition,[],[f1747,f901])).
fof(f2491,plain,(
  ( ! [X50,X48,X51,X49] : (s(bool,X49) != s(bool,X51) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X48),'const.option.NONE_0'),s(bool,X49),s(fun(X48,bool),X50))) | s(bool,'F_0') = s(bool,X51)) ) | $spl0),
  inference(superposition,[],[f1747,f166])).
fof(f2494,plain,(
  ( ! [X62,X63] : (s(bool,X62) != s(bool,X63) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X62)),bool)) | s(bool,'F_0') = s(bool,X63)) ) | $spl0),
  inference(superposition,[],[f1747,f901])).
fof(f2542,plain,(
  ( ! [X76,X74,X72,X75,X73] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X75),'const.option.NONE_0'),s(bool,X73),s(fun(X75,bool),X76))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X72),'const.option.NONE_0'),s(bool,X73),s(fun(X72,bool),X74)))) )),
  inference(superposition,[],[f298,f166])).
fof(f2583,plain,(
  ( ! [X94,X92,X95,X93] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X95))) | s(bool,X95) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X92),'const.option.NONE_0'),s(bool,X93),s(fun(X92,bool),X94))) | s(bool,'F_0') = s(bool,X93)) )),
  inference(superposition,[],[f157,f298])).
fof(f2616,plain,(
  ( ! [X43,X41,X44,X42] : (s(bool,X44) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X41),'const.option.NONE_0'),s(bool,X42),s(fun(X41,bool),X43))) | s(bool,'T_0') = s(bool,X44) | s(bool,'F_0') = s(bool,X42)) )),
  inference(subsumption_resolution,[],[f2569,f114])).
fof(f2569,plain,(
  ( ! [X43,X41,X44,X42] : (~p(s(bool,'T_0')) | s(bool,X44) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X41),'const.option.NONE_0'),s(bool,X42),s(fun(X41,bool),X43))) | s(bool,'T_0') = s(bool,X44) | s(bool,'F_0') = s(bool,X42)) )),
  inference(superposition,[],[f211,f298])).
fof(f2657,plain,(
  ( ! [X57,X54,X56,X55] : (s(bool,'T_0') != s(bool,X55) | s(bool,X57) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X54),'const.option.NONE_0'),s(bool,X55),s(fun(X54,bool),X56))) | s(bool,'F_0') = s(bool,X57)) ) | $spl0),
  inference(superposition,[],[f2035,f166])).
fof(f2660,plain,(
  ( ! [X68,X69] : (s(bool,'T_0') != s(bool,X68) | s(bool,X69) = s(bool,sK6('const.option.SOME_1'(s(bool,X68)),bool)) | s(bool,'F_0') = s(bool,X69)) ) | $spl0),
  inference(superposition,[],[f2035,f901])).
fof(f2694,plain,(
  ( ! [X21,X20] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X21),s(bool,'F_0'))) | s(bool,X20) = s(bool,sK7(X20,X21,bool)) | s(bool,'T_0') = s(bool,X20)) ) | $spl0),
  inference(superposition,[],[f1756,f121])).
fof(f2695,plain,(
  ( ! [X24,X23,X22] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X23),s(bool,'T_0'))) | s(bool,X22) = s(bool,sK7(X22,X23,bool)) | s(bool,X22) = s(bool,X24) | s(bool,'T_0') = s(bool,X24)) ) | $spl0),
  inference(superposition,[],[f1756,f208])).
fof(f2696,plain,(
  ( ! [X26,X27,X25] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X27),s(bool,X26))) | s(bool,X25) = s(bool,sK7(X25,X27,bool)) | s(bool,'T_0') = s(bool,X26) | s(bool,'T_0') = s(bool,X25)) ) | $spl0),
  inference(superposition,[],[f1756,f208])).
fof(f2700,plain,(
  ( ! [X37,X38,X36] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X37),s(bool,'F_0'))) | s(bool,X36) = s(bool,sK7(X36,X37,bool)) | s(bool,X36) = s(bool,X38) | s(bool,'F_0') = s(bool,X38)) ) | $spl0),
  inference(superposition,[],[f1756,f1632])).
fof(f2701,plain,(
  ( ! [X39,X41,X40] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X41),s(bool,X40))) | s(bool,X39) = s(bool,sK7(X39,X41,bool)) | s(bool,'F_0') = s(bool,X40) | s(bool,'F_0') = s(bool,X39)) ) | $spl0),
  inference(superposition,[],[f1756,f1632])).
fof(f2753,plain,(
  ( ! [X118,X116,X119,X117] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X119))) | s(bool,X119) = s(bool,happ(s(fun(X116,bool),X117),s(X116,X118))) | s(X116,X118) = s(X116,sK7(X118,X117,X116))) ) | $spl0),
  inference(superposition,[],[f157,f1756])).
fof(f2781,plain,(
  ( ! [X19,X17,X18] : (s(X17,X18) = s(X17,sK7(sK6('const.option.SOME_1'(s(X17,X18)),X17),X19,X17)) | s(bool,'F_0') = s(bool,happ(s(fun(X17,bool),X19),s(X17,X18)))) ) | $spl0),
  inference(forward_demodulation,[],[f2693,f901])).
fof(f2693,plain,(
  ( ! [X19,X17,X18] : (s(bool,'F_0') = s(bool,happ(s(fun(X17,bool),X19),s(X17,X18))) | s(X17,sK6('const.option.SOME_1'(s(X17,X18)),X17)) = s(X17,sK7(sK6('const.option.SOME_1'(s(X17,X18)),X17),X19,X17))) ) | $spl0),
  inference(superposition,[],[f1756,f901])).
fof(f2782,plain,(
  ( ! [X35,X34] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X35),s(bool,'T_0'))) | s(bool,X34) = s(bool,sK7(X34,X35,bool)) | s(bool,'F_0') = s(bool,X34)) ) | $spl0),
  inference(forward_demodulation,[],[f2699,f689])).
fof(f2699,plain,(
  ( ! [X35,X34] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X35),s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3))))))) | s(bool,X34) = s(bool,sK7(X34,X35,bool)) | s(bool,'F_0') = s(bool,X34)) ) | $spl0),
  inference(superposition,[],[f1756,f1614])).
fof(f2785,plain,(
  ( ! [X70,X69] : (s(bool,'T_0') = s(bool,sK7('const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3)))),X70,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X70),s(bool,X69))) | s(bool,'F_0') = s(bool,X69)) ) | $spl0),
  inference(forward_demodulation,[],[f2711,f689])).
fof(f2711,plain,(
  ( ! [X70,X69] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X70),s(bool,X69))) | s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3))))) = s(bool,sK7('const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3)))),X70,bool)) | s(bool,'F_0') = s(bool,X69)) ) | $spl0),
  inference(superposition,[],[f1756,f1614])).
fof(f2817,plain,(
  ( ! [X59,X57,X58,X56] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X57))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X59))) | s(bool,'F_0') = s(bool,X59) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X56),'const.option.NONE_0'),s(bool,X57),s(fun(X56,bool),X58)))) )),
  inference(superposition,[],[f361,f166])).
fof(f2820,plain,(
  ( ! [X70,X71] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X70))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X71))) | s(bool,'F_0') = s(bool,X71) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X70)),bool))) )),
  inference(superposition,[],[f361,f901])).
fof(f2821,plain,(
  ( ! [X0,X1] : (s('type.option.option'(bool),X0) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1))) | s(bool,'F_0') = s(bool,X1) | s(bool,'T_0') = s(bool,sK6(X0,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X0)) )),
  inference(superposition,[],[f361,f148])).
fof(f2843,plain,(
  ( ! [X59,X57,X58,X56] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X57))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X59))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X56),'const.option.NONE_0'),s(bool,X57),s(fun(X56,bool),X58))) | s(bool,'T_0') = s(bool,X59)) )),
  inference(superposition,[],[f361,f166])).
fof(f2846,plain,(
  ( ! [X70,X71] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X70))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X71))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X70)),bool)) | s(bool,'T_0') = s(bool,X71)) )),
  inference(superposition,[],[f361,f901])).
fof(f2847,plain,(
  ( ! [X0,X1] : (s('type.option.option'(bool),X0) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1))) | s(bool,'F_0') = s(bool,sK6(X0,bool)) | s(bool,'T_0') = s(bool,X1) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X0)) )),
  inference(superposition,[],[f361,f148])).
fof(f2920,plain,(
  ( ! [X61,X59,X57,X60,X58] : (s(bool,X60) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X57),'const.option.NONE_0'),s(bool,X58),s(fun(X57,bool),X59))) | s(bool,X60) = s(bool,X61) | s(bool,'F_0') = s(bool,X61) | s(bool,'F_0') = s(bool,X58)) ) | $spl0),
  inference(subsumption_resolution,[],[f2893,f114])).
fof(f2893,plain,(
  ( ! [X61,X59,X57,X60,X58] : (~p(s(bool,'T_0')) | s(bool,X60) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X57),'const.option.NONE_0'),s(bool,X58),s(fun(X57,bool),X59))) | s(bool,X60) = s(bool,X61) | s(bool,'F_0') = s(bool,X61) | s(bool,'F_0') = s(bool,X58)) ) | $spl0),
  inference(superposition,[],[f2033,f298])).
fof(f2923,plain,(
  ( ! [X70,X69] : (s(bool,X69) != s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3))))) | s(bool,X69) = s(bool,X70) | s(bool,'F_0') = s(bool,X70)) ) | $spl0),
  inference(subsumption_resolution,[],[f2896,f114])).
fof(f2896,plain,(
  ( ! [X70,X69] : (~p(s(bool,'T_0')) | s(bool,X69) != s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3))))) | s(bool,X69) = s(bool,X70) | s(bool,'F_0') = s(bool,X70)) ) | $spl0),
  inference(superposition,[],[f2033,f689])).
fof(f2924,plain,(
  ( ! [X78,X76,X77] : (s(bool,X77) != s(bool,sK6('const.option.SOME_1'(s(bool,X76)),bool)) | s(bool,X77) = s(bool,X78) | s(bool,'F_0') = s(bool,X78) | s(bool,'F_0') = s(bool,X76)) ) | $spl0),
  inference(subsumption_resolution,[],[f2898,f114])).
fof(f2898,plain,(
  ( ! [X78,X76,X77] : (~p(s(bool,'T_0')) | s(bool,X77) != s(bool,sK6('const.option.SOME_1'(s(bool,X76)),bool)) | s(bool,X77) = s(bool,X78) | s(bool,'F_0') = s(bool,X78) | s(bool,'F_0') = s(bool,X76)) ) | $spl0),
  inference(superposition,[],[f2033,f960])).
fof(f2976,plain,(
  ( ! [X64,X62,X65,X63] : (s(bool,X64) = s(bool,'const.bool.IN_2'(s(X62,X63),s(fun(X62,bool),'const.pred_set.EMPTY_0'))) | s(bool,X64) = s(bool,X65) | s(bool,'F_0') = s(bool,X65)) ) | $spl0),
  inference(subsumption_resolution,[],[f2952,f179])).
fof(f2952,plain,(
  ( ! [X64,X62,X65,X63] : (p(s(bool,'F_0')) | s(bool,X64) = s(bool,'const.bool.IN_2'(s(X62,X63),s(fun(X62,bool),'const.pred_set.EMPTY_0'))) | s(bool,X64) = s(bool,X65) | s(bool,'F_0') = s(bool,X65)) ) | $spl0),
  inference(superposition,[],[f2416,f191])).
fof(f2977,plain,(
  ( ! [X74,X72,X71,X75,X73] : (s(bool,X74) = s(bool,happ(s(fun(X71,bool),X72),s(X71,X73))) | s(bool,X74) = s(bool,X75) | s(bool,'F_0') = s(bool,X75) | s(X71,X73) = s(X71,sK7(X73,X72,X71))) ) | $spl0),
  inference(subsumption_resolution,[],[f2955,f179])).
fof(f2955,plain,(
  ( ! [X74,X72,X71,X75,X73] : (p(s(bool,'F_0')) | s(bool,X74) = s(bool,happ(s(fun(X71,bool),X72),s(X71,X73))) | s(bool,X74) = s(bool,X75) | s(bool,'F_0') = s(bool,X75) | s(X71,X73) = s(X71,sK7(X73,X72,X71))) ) | $spl0),
  inference(superposition,[],[f2416,f1756])).
fof(f2984,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1))) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,X0) = s(bool,X3) | s(bool,'F_0') = s(bool,X3)) ) | $spl0),
  inference(superposition,[],[f362,f1632])).
fof(f3015,plain,(
  ( ! [X57,X54,X56,X55] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X55))) | s(bool,X57) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X54),'const.option.NONE_0'),s(bool,X55),s(fun(X54,bool),X56))) | s(bool,'T_0') = s(bool,X57)) )),
  inference(superposition,[],[f362,f166])).
fof(f3018,plain,(
  ( ! [X68,X69] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X68))) | s(bool,X69) = s(bool,sK6('const.option.SOME_1'(s(bool,X68)),bool)) | s(bool,'T_0') = s(bool,X69)) )),
  inference(superposition,[],[f362,f901])).
fof(f3019,plain,(
  ( ! [X0,X1] : (s('type.option.option'(bool),X0) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,X1) = s(bool,sK6(X0,bool)) | s(bool,'T_0') = s(bool,X1) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X0)) )),
  inference(superposition,[],[f362,f148])).
fof(f3053,plain,(
  ( ! [X21,X20] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X21),s(bool,'F_0'))) | s(bool,X20) = s(bool,sK7(X20,X21,bool)) | s(bool,'T_0') = s(bool,X20)) ) | $spl0),
  inference(superposition,[],[f2789,f121])).
fof(f3059,plain,(
  ( ! [X37,X38,X36] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X37),s(bool,'F_0'))) | s(bool,X36) = s(bool,sK7(X36,X37,bool)) | s(bool,X36) = s(bool,X38) | s(bool,'F_0') = s(bool,X38)) ) | $spl0),
  inference(superposition,[],[f2789,f1632])).
fof(f3060,plain,(
  ( ! [X39,X41,X40] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X41),s(bool,X40))) | s(bool,X39) = s(bool,sK7(X39,X41,bool)) | s(bool,'F_0') = s(bool,X40) | s(bool,'F_0') = s(bool,X39)) ) | $spl0),
  inference(superposition,[],[f2789,f1632])).
fof(f3094,plain,(
  ( ! [X35,X34] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X35),s(bool,'T_0'))) | s(bool,X34) = s(bool,sK7(X34,X35,bool)) | s(bool,'F_0') = s(bool,X34)) ) | $spl0),
  inference(forward_demodulation,[],[f3058,f689])).
fof(f3058,plain,(
  ( ! [X35,X34] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X35),s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3))))))) | s(bool,X34) = s(bool,sK7(X34,X35,bool)) | s(bool,'F_0') = s(bool,X34)) ) | $spl0),
  inference(superposition,[],[f2789,f1614])).
fof(f3097,plain,(
  ( ! [X70,X69] : (s(bool,'T_0') = s(bool,sK7('const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3)))),X70,bool)) | s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X70),s(bool,X69))) | s(bool,'F_0') = s(bool,X69)) ) | $spl0),
  inference(forward_demodulation,[],[f3070,f689])).
fof(f3070,plain,(
  ( ! [X70,X69] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X70),s(bool,X69))) | s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3))))) = s(bool,sK7('const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3)))),X70,bool)) | s(bool,'F_0') = s(bool,X69)) ) | $spl0),
  inference(superposition,[],[f2789,f1614])).
fof(f3158,plain,(
  ( ! [X70,X72,X71,X73] : (s(bool,X71) = s(bool,X73) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X70),'const.option.NONE_0'),s(bool,X71),s(fun(X70,bool),X72))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X73)),bool))) ) | $spl0),
  inference(superposition,[],[f1834,f166])).
fof(f3162,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X2)),bool)) | s(bool,X0) = s(bool,X3) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X3)),bool))) ) | $spl0),
  inference(superposition,[],[f1834,f1834])).
fof(f3163,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,X4) = s(bool,X5) | s(bool,X5) = s(bool,X6) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X6)),bool)) | s(bool,X4) = s(bool,X7) | s(bool,'F_0') = s(bool,X7)) ) | $spl0),
  inference(superposition,[],[f1834,f1632])).
fof(f3294,plain,(
  ( ! [X175,X176,X174] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X175))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X176))) | s(bool,X174) = s(bool,X176) | s(bool,'F_0') = s(bool,X175) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X174)),bool))) ) | $spl0),
  inference(superposition,[],[f157,f1834])).
fof(f3296,plain,(
  ( ! [X182,X180,X181] : (s(bool,X181) != s(bool,X182) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X180))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X182))) | s(bool,'F_0') = s(bool,X181) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X180)),bool))) ) | $spl0),
  inference(superposition,[],[f158,f1834])).
fof(f3309,plain,(
  ( ! [X225,X226,X224] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X226),s(bool,X225))) | s(bool,X224) = s(bool,sK7(X224,X226,bool)) | s(bool,'F_0') = s(bool,X225) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X224)),bool))) ) | $spl0),
  inference(superposition,[],[f1756,f1834])).
fof(f3310,plain,(
  ( ! [X229,X227,X228] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X229),s(bool,X228))) | s(bool,X227) = s(bool,sK7(X227,X229,bool)) | s(bool,'F_0') = s(bool,X228) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X227)),bool))) ) | $spl0),
  inference(superposition,[],[f2789,f1834])).
fof(f3377,plain,(
  ( ! [X175,X176,X174] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X175))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X176))) | s(bool,X174) = s(bool,X176) | s(bool,'F_0') = s(bool,X174) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X175)),bool))) ) | $spl0),
  inference(superposition,[],[f157,f1834])).
fof(f3379,plain,(
  ( ! [X182,X180,X181] : (s(bool,X181) != s(bool,X182) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X180))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X182))) | s(bool,'F_0') = s(bool,X180) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X181)),bool))) ) | $spl0),
  inference(superposition,[],[f158,f1834])).
fof(f3398,plain,(
  ( ! [X253,X252] : (s('type.option.option'(bool),X252) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X253))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X252) | s(bool,'F_0') = s(bool,sK6(X252,bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X253)),bool))) ) | $spl0),
  inference(superposition,[],[f148,f1834])).
fof(f3401,plain,(
  ( ! [X261,X259,X260,X262] : (s(X261,f(s(bool,X262))) != s(X261,g(s(bool,X262))) | s(fun(bool,X261),X259) = s(fun(bool,X261),X260) | s(bool,'F_0') = s(bool,sK8(X259,X260,X261,bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X262)),bool))) ) | $spl0),
  inference(superposition,[],[f167,f1834])).
fof(f3405,plain,(
  ( ! [X8,X9] : (s(bool,'T_0') != s(bool,X8) | s(bool,X8) = s(bool,X9) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X9)),bool))) ) | $spl0),
  inference(superposition,[],[f180,f1834])).
fof(f3406,plain,(
  ( ! [X10,X11] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X10))) | s(bool,X10) = s(bool,X11) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X11)),bool))) ) | $spl0),
  inference(superposition,[],[f347,f1834])).
fof(f3407,plain,(
  ( ! [X14,X12,X15,X13] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X12))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X13))) | s(bool,X13) = s(bool,X14) | s(bool,'T_0') = s(bool,X14) | s(bool,X12) = s(bool,X15) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X15)),bool))) ) | $spl0),
  inference(superposition,[],[f362,f1834])).
fof(f3439,plain,(
  ( ! [X107,X108,X106] : (s(bool,X106) != s(bool,X107) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X107))) | s(bool,X106) = s(bool,X108) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X108)),bool))) ) | $spl0),
  inference(superposition,[],[f158,f1834])).
fof(f3447,plain,(
  ( ! [X138,X139] : (s(bool,X138) = s(bool,'const.bool.IN_2'(s(bool,X138),s(fun(bool,bool),'const.pred_set.EMPTY_0'))) | s(bool,X138) = s(bool,X139) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X139)),bool))) ) | $spl0),
  inference(superposition,[],[f191,f1834])).
fof(f3450,plain,(
  ( ! [X146,X144,X147,X145] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X145),s(bool,X144))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s(bool,X146),s(fun(bool,bool),X145))) | s(bool,X144) = s(bool,X147) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X147)),bool))) ) | $spl0),
  inference(superposition,[],[f806,f1834])).
fof(f3503,plain,(
  ( ! [X146,X144,X145] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X145))) | s(bool,X144) = s(bool,X145) | s(bool,X144) = s(bool,X146) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X146)),bool))) ) | $spl0),
  inference(superposition,[],[f157,f1834])).
fof(f3505,plain,(
  ( ! [X152,X151,X150] : (s(bool,'F_0') != s(bool,X151) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X150))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X151))) | s(bool,X150) = s(bool,X152) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X152)),bool))) ) | $spl0),
  inference(superposition,[],[f158,f1834])).
fof(f3518,plain,(
  ( ! [X196,X194,X195] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X195),s(bool,'F_0'))) | s(bool,X194) = s(bool,sK7(X194,X195,bool)) | s(bool,X194) = s(bool,X196) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X196)),bool))) ) | $spl0),
  inference(superposition,[],[f1756,f1834])).
fof(f3519,plain,(
  ( ! [X198,X199,X197] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X198),s(bool,'F_0'))) | s(bool,X197) = s(bool,sK7(X197,X198,bool)) | s(bool,X197) = s(bool,X199) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X199)),bool))) ) | $spl0),
  inference(superposition,[],[f2789,f1834])).
fof(f3524,plain,(
  ( ! [X222,X221] : (s('type.option.option'(bool),X221) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X221) | s(bool,X222) = s(bool,sK6(X221,bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X222)),bool))) ) | $spl0),
  inference(superposition,[],[f148,f1834])).
fof(f3527,plain,(
  ( ! [X231,X229,X230,X228] : (s(X230,f(s(bool,'F_0'))) != s(X230,g(s(bool,'F_0'))) | s(fun(bool,X230),X228) = s(fun(bool,X230),X229) | s(bool,X231) = s(bool,sK8(X228,X229,X230,bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X231)),bool))) ) | $spl0),
  inference(superposition,[],[f167,f1834])).
fof(f3560,plain,(
  ( ! [X92,X93,X91] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X92))) | s(bool,X92) = s(bool,sK6('const.option.SOME_1'(s(bool,X91)),bool)) | s(bool,X91) = s(bool,X93) | s(bool,'F_0') = s(bool,X93)) ) | $spl0),
  inference(superposition,[],[f157,f1834])).
fof(f3585,plain,(
  ( ! [X0,X1] : (s(bool,X0) != s(bool,sK6('const.option.SOME_1'(s(bool,X1)),bool)) | s(bool,X0) = s(bool,X1) | s(bool,'F_0') = s(bool,X0)) ) | $spl0),
  inference(equality_factoring,[],[f1834])).
fof(f3597,plain,(
  ( ! [X0] : (s(bool,X0) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'F_0') = s(bool,X0)) ) | $spl0),
  inference(duplicate_literal_removal,[],[f3579])).
fof(f3579,plain,(
  ( ! [X0] : (s(bool,X0) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'F_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0)) ) | $spl0),
  inference(equality_factoring,[],[f1834])).
fof(f3736,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool)) | s(bool,X0) = s(bool,X1) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X1)),bool))) ) | $spl0),
  inference(condensation,[],[f3735])).
fof(f3735,plain,(
  ( ! [X35,X36,X34] : (s(bool,'F_0') = s(bool,X35) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X34)),bool)) | s(bool,X34) = s(bool,X36) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X36)),bool))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f3114])).
fof(f3114,plain,(
  ( ! [X35,X36,X34] : (s(bool,'F_0') = s(bool,X35) | s(bool,'F_0') = s(bool,X35) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X34)),bool)) | s(bool,X34) = s(bool,X36) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X36)),bool))) ) | $spl0),
  inference(superposition,[],[f1834,f1834])).
fof(f3743,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool)) | s(bool,'T_0') = s(bool,X0)) ) | $spl0),
  inference(condensation,[],[f3742])).
fof(f3742,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool)) | s(bool,'T_0') = s(bool,X0)) ) | $spl0),
  inference(duplicate_literal_removal,[],[f3102])).
fof(f3102,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,'F_0') = s(bool,X1) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool)) | s(bool,'T_0') = s(bool,X0)) ) | $spl0),
  inference(superposition,[],[f1834,f121])).
fof(f3770,plain,(
  ( ! [X39,X37,X38] : (s(bool,X37) = s(bool,X38) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X38)),bool)) | s(bool,X37) = s(bool,X39) | s(bool,'T_0') = s(bool,X39)) ) | $spl0),
  inference(subsumption_resolution,[],[f3145,f180])).
fof(f3145,plain,(
  ( ! [X39,X37,X38] : (s(bool,X37) = s(bool,X38) | s(bool,'T_0') = s(bool,'F_0') | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X38)),bool)) | s(bool,X37) = s(bool,X39) | s(bool,'T_0') = s(bool,X39)) ) | $spl0),
  inference(superposition,[],[f1834,f208])).
fof(f3771,plain,(
  ( ! [X39,X37,X38,X36] : (s(bool,X39) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X36),'const.option.NONE_0'),s(bool,X37),s(fun(X36,bool),X38))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X39)),bool)) | s(bool,'F_0') = s(bool,X37)) ) | $spl0),
  inference(subsumption_resolution,[],[f3187,f180])).
fof(f3187,plain,(
  ( ! [X39,X37,X38,X36] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X39) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X36),'const.option.NONE_0'),s(bool,X37),s(fun(X36,bool),X38))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X39)),bool)) | s(bool,'F_0') = s(bool,X37)) ) | $spl0),
  inference(superposition,[],[f1834,f298])).
fof(f3772,plain,(
  ( ! [X50,X49] : (s(bool,X50) = s(bool,sK6('const.option.SOME_1'(s(bool,X49)),bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X50)),bool)) | s(bool,'F_0') = s(bool,X49)) ) | $spl0),
  inference(subsumption_resolution,[],[f3190,f180])).
fof(f3190,plain,(
  ( ! [X50,X49] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X50) = s(bool,sK6('const.option.SOME_1'(s(bool,X49)),bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X50)),bool)) | s(bool,'F_0') = s(bool,X49)) ) | $spl0),
  inference(superposition,[],[f1834,f960])).
fof(f3776,plain,(
  ( ! [X6,X4,X5] : (s(bool,X4) = s(bool,X5) | s(bool,'F_0') = s(bool,X5) | s(bool,X6) = s(bool,sK6('const.option.SOME_1'(s(bool,X4)),bool)) | s(bool,'T_0') = s(bool,X6)) ) | $spl0),
  inference(subsumption_resolution,[],[f3226,f180])).
fof(f3226,plain,(
  ( ! [X6,X4,X5] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X4) = s(bool,X5) | s(bool,'F_0') = s(bool,X5) | s(bool,X6) = s(bool,sK6('const.option.SOME_1'(s(bool,X4)),bool)) | s(bool,'T_0') = s(bool,X6)) ) | $spl0),
  inference(superposition,[],[f1834,f208])).
fof(f3847,plain,(
  ( ! [X105,X106,X104] : (s(bool,X104) != s(bool,X105) | s(bool,X105) = s(bool,X106) | s(bool,'F_0') = s(bool,X106) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X104)),bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f3353,f180])).
fof(f3353,plain,(
  ( ! [X105,X106,X104] : (s(bool,X104) != s(bool,X105) | s(bool,X105) = s(bool,X106) | s(bool,'F_0') = s(bool,X106) | s(bool,'T_0') = s(bool,'F_0') | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X104)),bool))) ) | $spl0),
  inference(superposition,[],[f2035,f1834])).
fof(f3865,plain,(
  ( ! [X85,X86,X84] : (s(bool,X84) != s(bool,X85) | s(bool,'F_0') = s(bool,X85) | s(bool,X84) = s(bool,X86) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X86)),bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f3432,f180])).
fof(f3432,plain,(
  ( ! [X85,X86,X84] : (s(bool,X84) != s(bool,X85) | s(bool,'T_0') = s(bool,'F_0') | s(bool,'F_0') = s(bool,X85) | s(bool,X84) = s(bool,X86) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X86)),bool))) ) | $spl0),
  inference(superposition,[],[f1747,f1834])).
fof(f3886,plain,(
  ( ! [X4,X3] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,X3)),bool)) | s(bool,X3) = s(bool,X4) | s(bool,'F_0') = s(bool,X4)) ) | $spl0),
  inference(subsumption_resolution,[],[f3529,f179])).
fof(f3529,plain,(
  ( ! [X4,X3] : (p(s(bool,'F_0')) | s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,X3)),bool)) | s(bool,X3) = s(bool,X4) | s(bool,'F_0') = s(bool,X4)) ) | $spl0),
  inference(superposition,[],[f123,f1834])).
fof(f3901,plain,(
  ( ! [X83,X81,X84,X82] : (s(bool,X82) = s(bool,sK6('const.option.SOME_1'(s(bool,X81)),bool)) | s(bool,X82) = s(bool,X83) | s(bool,'F_0') = s(bool,X83) | s(bool,X81) = s(bool,X84) | s(bool,'F_0') = s(bool,X84)) ) | $spl0),
  inference(subsumption_resolution,[],[f3556,f179])).
fof(f3556,plain,(
  ( ! [X83,X81,X84,X82] : (p(s(bool,'F_0')) | s(bool,X82) = s(bool,sK6('const.option.SOME_1'(s(bool,X81)),bool)) | s(bool,X82) = s(bool,X83) | s(bool,'F_0') = s(bool,X83) | s(bool,X81) = s(bool,X84) | s(bool,'F_0') = s(bool,X84)) ) | $spl0),
  inference(superposition,[],[f2416,f1834])).
fof(f3902,plain,(
  ( ! [X88,X87] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X87))) | s(bool,X87) = s(bool,X88) | s(bool,'F_0') = s(bool,X88)) ) | $spl0),
  inference(subsumption_resolution,[],[f3558,f153])).
fof(f3558,plain,(
  ( ! [X88,X87] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X87))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X87))) | s(bool,X87) = s(bool,X88) | s(bool,'F_0') = s(bool,X88)) ) | $spl0),
  inference(superposition,[],[f148,f1834])).
fof(f3910,plain,(
  ( ! [X1] : (s(bool,'F_0') != s(bool,X1) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X1)),bool))) ) | $spl0),
  inference(global_subsumption,[],[f113,f112,f111,f114,f179,f121,f124,f123,f128,f127,f148,f153,f154,f158,f157,f161,f160,f159,f165,f162,f166,f167,f168,f169,f180,f192,f191,f208,f211,f243,f258,f298,f355,f360,f361,f362,f363,f403,f404,f434,f446,f439,f440,f447,f455,f458,f459,f465,f467,f469,f534,f532,f535,f559,f572,f574,f607,f615,f593,f347,f172,f689,f696,f712,f727,f734,f735,f736,f766,f769,f770,f782,f793,f806,f826,f828,f862,f863,f840,f864,f874,f876,f855,f886,f887,f888,f890,f901,f912,f914,f960,f1005,f985,f1018,f989,f1061,f1062,f1063,f1065,f1066,f1067,f1046,f1068,f1070,f1071,f1072,f1092,f1093,f1094,f1095,f1111,f1122,f1123,f1124,f1125,f1170,f1172,f1174,f1175,f1182,f1184,f1188,f1190,f1191,f1256,f1258,f1259,f1265,f1266,f1576,f1577,f1580,f1581,f1295,f1297,f1299,f1300,f1307,f1309,f1313,f1315,f1316,f1609,f1614,f1615,f1628,f1631,f1632,f1747,f1754,f1756,f1758,f1670,f1761,f1763,f1766,f1767,f1768,f1710,f1774,f1776,f1777,f1778,f1783,f1831,f1832,f1833,f1834,f1858,f1880,f1881,f1882,f1948,f1950,f1952,f1953,f1961,f1963,f1967,f1969,f1970,f2033,f2035,f2055,f2057,f2058,f2063,f2066,f2416,f2427,f2101,f2103,f2105,f2106,f2114,f2116,f2120,f2122,f2123,f2468,f2469,f2470,f2471,f2517,f2491,f2492,f2493,f2494,f2542,f2543,f2544,f2616,f2583,f2622,f2629,f2657,f2658,f2659,f2660,f2686,f2687,f2688,f2689,f2778,f2779,f2780,f2781,f2694,f2695,f2696,f2782,f2700,f2701,f2704,f2706,f2708,f2783,f2784,f2785,f2786,f2713,f2787,f2715,f2723,f2788,f2789,f2790,f2753,f2755,f2757,f2758,f2766,f2817,f2818,f2819,f2820,f2821,f2843,f2844,f2845,f2846,f2847,f2920,f2923,f2924,f2976,f2977,f2984,f3015,f3016,f3017,f3018,f3019,f3045,f3046,f3047,f3048,f3090,f3091,f3092,f3093,f3053,f3054,f3055,f3094,f3059,f3060,f3063,f3065,f3067,f3095,f3096,f3097,f3098,f3072,f3099,f3074,f3086,f3743,f3736,f3724,f3770,f3158,f3159,f3160,f3162,f3163,f3771,f3772,f3192,f3193,f3776,f3294,f3296,f3309,f3310,f3311,f3315,f3318,f3847,f3377,f3379,f3394,f3398,f3401,f3405,f3406,f3407,f3865,f3439,f3447,f3450,f3452,f3453,f3503,f3505,f3516,f3518,f3519,f3520,f3524,f3527,f3886,f3901,f3902,f3560,f3906,f3908,f3909,f3597,f3581])).
fof(f3948,plain,(
  ( ! [X74,X72,X71,X73] : (s(bool,X72) != s(bool,X74) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X74))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X71),'const.option.NONE_0'),s(bool,X72),s(fun(X71,bool),X73)))) )),
  inference(superposition,[],[f403,f166])).
fof(f3951,plain,(
  ( ! [X85,X86] : (s(bool,X85) != s(bool,X86) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X86))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X85)),bool))) )),
  inference(superposition,[],[f403,f901])).
fof(f3994,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0)))) )),
  inference(condensation,[],[f3993])).
fof(f3993,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1))) | s(bool,'T_0') = s(bool,X1)) )),
  inference(condensation,[],[f3992])).
fof(f3992,plain,(
  ( ! [X6,X7,X5] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X5))) | s(bool,'T_0') = s(bool,X7) | s(bool,'T_0') = s(bool,X6) | s(bool,'T_0') = s(bool,X5)) )),
  inference(subsumption_resolution,[],[f3954,f208])).
fof(f3954,plain,(
  ( ! [X6,X7,X5] : (s(bool,X6) != s(bool,X7) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X5))) | s(bool,'T_0') = s(bool,X7) | s(bool,'T_0') = s(bool,X6) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f403,f208])).
fof(f3581,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') != s(bool,X1) | s(bool,X0) = s(bool,X1) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X1)),bool))) ) | $spl0),
  inference(equality_factoring,[],[f1834])).
fof(f3055,plain,(
  ( ! [X26,X27,X25] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X27),s(bool,X26))) | s(bool,X25) = s(bool,sK7(X25,X27,bool)) | s(bool,'T_0') = s(bool,X26) | s(bool,'T_0') = s(bool,X25)) ) | $spl0),
  inference(superposition,[],[f2789,f208])).
fof(f3054,plain,(
  ( ! [X24,X23,X22] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X23),s(bool,'T_0'))) | s(bool,X22) = s(bool,sK7(X22,X23,bool)) | s(bool,X22) = s(bool,X24) | s(bool,'T_0') = s(bool,X24)) ) | $spl0),
  inference(superposition,[],[f2789,f208])).
fof(f3093,plain,(
  ( ! [X19,X17,X18] : (s(bool,'T_0') != s(bool,happ(s(fun(X17,bool),X19),s(X17,X18))) | s(X17,X18) = s(X17,sK7(sK6('const.option.SOME_1'(s(X17,X18)),X17),X19,X17))) ) | $spl0),
  inference(forward_demodulation,[],[f3052,f901])).
fof(f3052,plain,(
  ( ! [X19,X17,X18] : (s(bool,'T_0') != s(bool,happ(s(fun(X17,bool),X19),s(X17,X18))) | s(X17,sK6('const.option.SOME_1'(s(X17,X18)),X17)) = s(X17,sK7(sK6('const.option.SOME_1'(s(X17,X18)),X17),X19,X17))) ) | $spl0),
  inference(superposition,[],[f2789,f901])).
fof(f2789,plain,(
  ( ! [X19,X17,X18] : (s(bool,'T_0') != s(bool,happ(s(fun(X17,bool),X18),s(X17,X19))) | s(X17,X19) = s(X17,sK7(X19,X18,X17))) ) | $spl0),
  inference(subsumption_resolution,[],[f2728,f179])).
fof(f2728,plain,(
  ( ! [X19,X17,X18] : (p(s(bool,'F_0')) | s(bool,'T_0') != s(bool,happ(s(fun(X17,bool),X18),s(X17,X19))) | s(X17,X19) = s(X17,sK7(X19,X18,X17))) ) | $spl0),
  inference(superposition,[],[f123,f1756])).
fof(f2629,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) != s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'F_0') = s(bool,X2) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | $spl0),
  inference(superposition,[],[f2035,f208])).
fof(f2517,plain,(
  ( ! [X33,X34,X32] : (s(bool,X32) != s(bool,X33) | s(bool,'F_0') = s(bool,X33) | s(bool,X32) = s(bool,X34) | s(bool,'F_0') = s(bool,X34)) ) | $spl0),
  inference(subsumption_resolution,[],[f2484,f180])).
fof(f2484,plain,(
  ( ! [X33,X34,X32] : (s(bool,X32) != s(bool,X33) | s(bool,'T_0') = s(bool,'F_0') | s(bool,'F_0') = s(bool,X33) | s(bool,X32) = s(bool,X34) | s(bool,'F_0') = s(bool,X34)) ) | $spl0),
  inference(superposition,[],[f1747,f1632])).
fof(f2063,plain,(
  ( ! [X94,X93] : (s(bool,X93) = s(bool,'const.bool.IN_2'(s(bool,X93),s(fun(bool,bool),'const.pred_set.EMPTY_0'))) | s(bool,X93) = s(bool,X94) | s(bool,'F_0') = s(bool,X94)) ) | $spl0),
  inference(superposition,[],[f191,f1632])).
fof(f2035,plain,(
  ( ! [X8,X9] : (s(bool,'T_0') != s(bool,X8) | s(bool,X8) = s(bool,X9) | s(bool,'F_0') = s(bool,X9)) ) | $spl0),
  inference(superposition,[],[f180,f1632])).
fof(f1858,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'F_0') = s(bool,X2) | s(bool,X0) = s(bool,X3) | s(bool,'F_0') = s(bool,X3)) ) | $spl0),
  inference(superposition,[],[f1632,f1632])).
fof(f1783,plain,(
  ( ! [X0,X1] : (s('type.option.option'('type.option.option'('type.option.option'(X0))),'const.option.SOME_1'(s('type.option.option'('type.option.option'(X0)),'const.option.SOME_1'(s('type.option.option'(X0),'const.option.NONE_0'))))) != s('type.option.option'('type.option.option'('type.option.option'(X0))),'const.option.SOME_1'(s('type.option.option'('type.option.option'(X0)),'const.option.SOME_1'(s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1)))))))) )),
  inference(unit_resulting_resolution,[],[f355,f157])).
fof(f1747,plain,(
  ( ! [X19,X20] : (s(bool,X19) != s(bool,X20) | s(bool,'T_0') = s(bool,X20) | s(bool,'F_0') = s(bool,X19)) ) | $spl0),
  inference(subsumption_resolution,[],[f1746,f114])).
fof(f1746,plain,(
  ( ! [X19,X20] : (~p(s(bool,'T_0')) | s(bool,X19) != s(bool,X20) | s(bool,'T_0') = s(bool,X20) | s(bool,'F_0') = s(bool,X19)) ) | $spl0),
  inference(forward_demodulation,[],[f1652,f689])).
fof(f1652,plain,(
  ( ! [X19,X20] : (~p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3)))))) | s(bool,X19) != s(bool,X20) | s(bool,'T_0') = s(bool,X20) | s(bool,'F_0') = s(bool,X19)) ) | $spl0),
  inference(superposition,[],[f211,f1614])).
fof(f1632,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'F_0') = s(bool,X1) | s(bool,'F_0') = s(bool,X0)) ) | $spl0),
  inference(superposition,[],[f1614,f1614])).
fof(f1609,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'F_0') = s(bool,X1) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) )),
  inference(subsumption_resolution,[],[f1592,f114])).
fof(f1592,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s(bool,X0) = s(bool,X1) | s(bool,'F_0') = s(bool,X1) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f1065,f208])).
fof(f1316,plain,(
  ( ! [X152,X151,X149,X150] : (s(X151,f(s(bool,'T_0'))) != s(X151,g(s(bool,'T_0'))) | s(fun(bool,X151),X149) = s(fun(bool,X151),X150) | s(bool,X152) = s(bool,sK8(X149,X150,X151,bool)) | s(bool,'T_0') = s(bool,X152)) )),
  inference(superposition,[],[f167,f208])).
fof(f1313,plain,(
  ( ! [X142,X143] : (s('type.option.option'(bool),X142) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X142) | s(bool,X143) = s(bool,sK6(X142,bool)) | s(bool,'T_0') = s(bool,X143)) )),
  inference(superposition,[],[f148,f208])).
fof(f1297,plain,(
  ( ! [X80,X81,X79] : (s(bool,'T_0') != s(bool,X80) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X79))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X80))) | s(bool,X79) = s(bool,X81) | s(bool,'T_0') = s(bool,X81)) )),
  inference(superposition,[],[f158,f208])).
fof(f1295,plain,(
  ( ! [X74,X75,X73] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X74))) | s(bool,X73) = s(bool,X74) | s(bool,X73) = s(bool,X75) | s(bool,'T_0') = s(bool,X75)) )),
  inference(superposition,[],[f157,f208])).
fof(f1581,plain,(
  ( ! [X64,X62,X65,X63] : (s(X62,X64) = s(X62,sK7(X64,X63,X62)) | s(bool,X65) = s(bool,happ(s(fun(X62,bool),X63),s(X62,X64))) | s(bool,'T_0') = s(bool,X65)) )),
  inference(subsumption_resolution,[],[f1292,f114])).
fof(f1292,plain,(
  ( ! [X64,X62,X65,X63] : (~p(s(bool,'T_0')) | s(X62,X64) = s(X62,sK7(X64,X63,X62)) | s(bool,X65) = s(bool,happ(s(fun(X62,bool),X63),s(X62,X64))) | s(bool,'T_0') = s(bool,X65)) )),
  inference(superposition,[],[f160,f208])).
fof(f1577,plain,(
  ( ! [X21,X19,X20] : (s(bool,X19) != s(bool,X20) | s(bool,'T_0') = s(bool,X20) | s(bool,X19) = s(bool,X21) | s(bool,'T_0') = s(bool,X21)) )),
  inference(subsumption_resolution,[],[f1276,f114])).
fof(f1276,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'T_0')) | s(bool,X19) != s(bool,X20) | s(bool,'T_0') = s(bool,X20) | s(bool,X19) = s(bool,X21) | s(bool,'T_0') = s(bool,X21)) )),
  inference(superposition,[],[f211,f208])).
fof(f1576,plain,(
  ( ! [X17,X18,X16] : (~p(s(bool,X17)) | s(bool,X16) = s(bool,X17) | s(bool,X16) = s(bool,X18) | s(bool,'T_0') = s(bool,X18)) )),
  inference(subsumption_resolution,[],[f1275,f114])).
fof(f1275,plain,(
  ( ! [X17,X18,X16] : (~p(s(bool,'T_0')) | ~p(s(bool,X17)) | s(bool,X16) = s(bool,X17) | s(bool,X16) = s(bool,X18) | s(bool,'T_0') = s(bool,X18)) )),
  inference(superposition,[],[f165,f208])).
fof(f1266,plain,(
  ( ! [X80,X83,X81,X82] : (s(bool,X80) != s(bool,happ(s(fun(bool,bool),X81),s(bool,X80))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s(bool,X82),s(fun(bool,bool),X81))) | s(bool,X80) = s(bool,X83) | s(bool,'T_0') = s(bool,X83)) ) | $spl0),
  inference(superposition,[],[f806,f208])).
fof(f1265,plain,(
  ( ! [X78,X79] : (s(bool,X78) != s(bool,'const.bool.IN_2'(s(bool,X78),s(fun(bool,bool),'const.pred_set.EMPTY_0'))) | s(bool,X78) = s(bool,X79) | s(bool,'T_0') = s(bool,X79)) )),
  inference(superposition,[],[f192,f208])).
fof(f1256,plain,(
  ( ! [X45,X46,X44] : (s(bool,X44) != s(bool,X45) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X45))) | s(bool,X44) = s(bool,X46) | s(bool,'T_0') = s(bool,X46)) )),
  inference(superposition,[],[f158,f208])).
fof(f1191,plain,(
  ( ! [X158,X156,X159,X157] : (s(X158,f(s(bool,X159))) != s(X158,g(s(bool,X159))) | s(fun(bool,X158),X156) = s(fun(bool,X158),X157) | s(bool,'T_0') = s(bool,X159) | s(bool,'T_0') = s(bool,sK8(X156,X157,X158,bool))) )),
  inference(superposition,[],[f167,f208])).
fof(f1188,plain,(
  ( ! [X149,X150] : (s('type.option.option'(bool),X149) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X150))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X149) | s(bool,'T_0') = s(bool,X150) | s(bool,'T_0') = s(bool,sK6(X149,bool))) )),
  inference(superposition,[],[f148,f208])).
fof(f1182,plain,(
  ( ! [X123,X121,X124,X122] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X123),s(bool,X122))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X121))),s(bool,X124),s(fun(bool,bool),X123))) | s(bool,'T_0') = s(bool,X122) | s(bool,'T_0') = s(bool,X121)) ) | $spl0),
  inference(superposition,[],[f806,f208])).
fof(f1172,plain,(
  ( ! [X87,X85,X86] : (s(bool,X86) != s(bool,X87) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X85))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X87))) | s(bool,'T_0') = s(bool,X86) | s(bool,'T_0') = s(bool,X85)) )),
  inference(superposition,[],[f158,f208])).
fof(f1170,plain,(
  ( ! [X80,X81,X79] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X80))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X81))) | s(bool,X79) = s(bool,X81) | s(bool,'T_0') = s(bool,X80) | s(bool,'T_0') = s(bool,X79)) )),
  inference(superposition,[],[f157,f208])).
fof(f1125,plain,(
  ( ! [X33,X32] : (s(bool,'T_0') = s(bool,X32) | s(bool,X33) = s(bool,sK6('const.option.SOME_1'(s(bool,X32)),bool)) | s(bool,'T_0') = s(bool,X33)) )),
  inference(superposition,[],[f208,f901])).
fof(f1122,plain,(
  ( ! [X21,X19,X20,X18] : (s(bool,'T_0') = s(bool,X19) | s(bool,X21) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X18),'const.option.NONE_0'),s(bool,X19),s(fun(X18,bool),X20))) | s(bool,'T_0') = s(bool,X21)) )),
  inference(superposition,[],[f208,f166])).
fof(f1111,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f208,f208])).
fof(f1095,plain,(
  ( ! [X41,X40] : (s(bool,X40) = s(bool,X41) | s(bool,'T_0') = s(bool,X41) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X40)),bool))) )),
  inference(superposition,[],[f208,f901])).
fof(f1092,plain,(
  ( ! [X28,X26,X29,X27] : (s(bool,X27) = s(bool,X29) | s(bool,'T_0') = s(bool,X29) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X26),'const.option.NONE_0'),s(bool,X27),s(fun(X26,bool),X28)))) )),
  inference(superposition,[],[f208,f166])).
fof(f985,plain,(
  ( ! [X65] : (s(bool,X65) != s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3))))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X65)),bool))) ) | $spl0),
  inference(superposition,[],[f766,f901])).
fof(f914,plain,(
  ( ! [X8,X7,X9] : (s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X8))) != s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X9))) | s(X7,X9) = s(X7,sK6('const.option.SOME_1'(s(X7,X8)),X7))) )),
  inference(superposition,[],[f157,f455])).
fof(f901,plain,(
  ( ! [X0,X1] : (s(X0,X1) = s(X0,sK6('const.option.SOME_1'(s(X0,X1)),X0))) )),
  inference(unit_resulting_resolution,[],[f455,f157])).
fof(f828,plain,(
  ( ! [X6,X10,X8,X7,X5,X9] : (s('type.option.option'(X5),'const.option.SOME_1'(s(X5,X10))) != s('type.option.option'(X5),'const.option.SOME_1'(s(X5,'const.option.option_CASE_3'(s('type.option.option'(X6),X7),s(X5,X8),s(fun(X6,X5),X9))))) | s(X5,X10) = s(X5,happ(s(fun(fun(X6,X5),X5),happ(s(fun(X5,fun(fun(X6,X5),X5)),happ(s(fun('type.option.option'(X6),fun(X5,fun(fun(X6,X5),X5))),'const.option.option_CASE_0'),s('type.option.option'(X6),X7))),s(X5,X8))),s(fun(X6,X5),X9)))) )),
  inference(superposition,[],[f157,f169])).
fof(f793,plain,(
  ( ! [X6,X4,X5] : (s(bool,X5) != s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3))))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X4),'const.option.NONE_0'),s(bool,X5),s(fun(X4,bool),X6)))) ) | $spl0),
  inference(superposition,[],[f766,f166])).
fof(f782,plain,(
  ( ! [X2,X0,X1] : (s(bool,X2) = s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.pred_set.EMPTY_0'))) | s(bool,'T_0') = s(bool,X2)) )),
  inference(subsumption_resolution,[],[f776,f179])).
fof(f776,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'F_0')) | s(bool,X2) = s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.pred_set.EMPTY_0'))) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f243,f191])).
fof(f766,plain,(
  ( ! [X3] : (s(bool,X3) != s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3))))) | s(bool,'T_0') = s(bool,X3)) ) | $spl0),
  inference(subsumption_resolution,[],[f757,f114])).
fof(f757,plain,(
  ( ! [X3] : (~p(s(bool,'T_0')) | s(bool,X3) != s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3))))) | s(bool,'T_0') = s(bool,X3)) ) | $spl0),
  inference(superposition,[],[f211,f689])).
fof(f712,plain,(
  ( ! [X3] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X3))) | s(bool,X3) = s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3)))))) ) | $spl0),
  inference(superposition,[],[f157,f689])).
fof(f689,plain,(
  s(bool,'T_0') = s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3))))) | $spl0),
  inference(unit_resulting_resolution,[],[f172,f124])).
fof(f574,plain,(
  ( ! [X6,X10,X8,X7,X5,X9] : (s('type.option.option'(X5),'const.option.SOME_1'(s(X5,X10))) != s('type.option.option'(X5),'const.option.SOME_1'(s(X5,happ(s(fun(X6,X5),X9),s(X6,X7))))) | s(X5,X10) = s(X5,'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(X5,X8),s(fun(X6,X5),X9)))) )),
  inference(superposition,[],[f157,f168])).
fof(f559,plain,(
  ( ! [X6,X4,X7,X5,X3] : (s(X5,happ(s(fun(X3,X5),X6),s(X3,sK6(X4,X3)))) = s(X5,'const.option.option_CASE_3'(s('type.option.option'(X3),X4),s(X5,X7),s(fun(X3,X5),X6))) | s('type.option.option'(X3),'const.option.NONE_0') = s('type.option.option'(X3),X4)) )),
  inference(superposition,[],[f168,f148])).
fof(f467,plain,(
  ( ! [X21,X22,X20] : (s('type.option.option'(X20),X21) != s('type.option.option'(X20),X22) | s('type.option.option'('type.option.option'(X20)),'const.option.SOME_1'(s('type.option.option'(X20),X22))) = s('type.option.option'('type.option.option'(X20)),'const.option.SOME_1'(s('type.option.option'(X20),'const.option.SOME_1'(s(X20,sK6(X21,X20)))))) | s('type.option.option'(X20),'const.option.NONE_0') = s('type.option.option'(X20),X21)) )),
  inference(superposition,[],[f158,f148])).
fof(f465,plain,(
  ( ! [X14,X15,X16] : (s('type.option.option'('type.option.option'(X14)),'const.option.SOME_1'(s('type.option.option'(X14),X15))) != s('type.option.option'('type.option.option'(X14)),'const.option.SOME_1'(s('type.option.option'(X14),X16))) | s('type.option.option'(X14),X16) = s('type.option.option'(X14),'const.option.SOME_1'(s(X14,sK6(X15,X14)))) | s('type.option.option'(X14),'const.option.NONE_0') = s('type.option.option'(X14),X15)) )),
  inference(superposition,[],[f157,f148])).
fof(f459,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'(X0),X1) != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) | s(X0,X2) = s(X0,sK6(X1,X0)) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1)) )),
  inference(superposition,[],[f157,f148])).
fof(f455,plain,(
  ( ! [X0,X1] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK6('const.option.SOME_1'(s(X0,X1)),X0))))) )),
  inference(unit_resulting_resolution,[],[f153,f148])).
fof(f363,plain,(
  ( ! [X14,X12,X10,X13,X11] : (s('type.option.option'(X10),'const.option.SOME_1'(s(X10,X12))) != s('type.option.option'(X10),'const.option.SOME_1'(s(X10,X14))) | s(X10,X14) = s(X10,'const.option.option_CASE_3'(s('type.option.option'(X11),'const.option.NONE_0'),s(X10,X12),s(fun(X11,X10),X13)))) )),
  inference(superposition,[],[f157,f166])).
fof(f355,plain,(
  ( ! [X0,X1] : (s('type.option.option'('type.option.option'(X0)),'const.option.SOME_1'(s('type.option.option'(X0),'const.option.NONE_0'))) != s('type.option.option'('type.option.option'(X0)),'const.option.SOME_1'(s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1)))))) )),
  inference(unit_resulting_resolution,[],[f153,f157])).
fof(f258,plain,(
  ( ! [X2] : (s(bool,X2) = s(bool,'const.bool.IN_2'(s(bool,X2),s(fun(bool,bool),'const.pred_set.EMPTY_0'))) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f191,f121])).
fof(f243,plain,(
  ( ! [X4,X3] : (p(s(bool,X4)) | s(bool,X3) = s(bool,X4) | s(bool,'T_0') = s(bool,X3)) )),
  inference(subsumption_resolution,[],[f239,f179])).
fof(f239,plain,(
  ( ! [X4,X3] : (p(s(bool,'F_0')) | p(s(bool,X4)) | s(bool,X3) = s(bool,X4) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f162,f121])).
fof(f211,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | s(bool,X0) != s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f127,f121])).
fof(f208,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f121,f121])).
fof(f192,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.pred_set.EMPTY_0')))) )),
  inference(unit_resulting_resolution,[],[f154,f123])).
fof(f180,plain,(
  s(bool,'T_0') != s(bool,'F_0')),
  inference(unit_resulting_resolution,[],[f179,f123])).
fof(f169,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(X1,'const.option.option_CASE_3'(s('type.option.option'(X0),X2),s(X1,X3),s(fun(X0,X1),X4))) = s(X1,happ(s(fun(fun(X0,X1),X1),happ(s(fun(X1,fun(fun(X0,X1),X1)),happ(s(fun('type.option.option'(X0),fun(X1,fun(fun(X0,X1),X1))),'const.option.option_CASE_0'),s('type.option.option'(X0),X2))),s(X1,X3))),s(fun(X0,X1),X4)))) )),
  inference(cnf_transformation,[],[f75])).
fof(f75,plain,(
  ! [X0,X1,X2,X3,X4] : s(X1,'const.option.option_CASE_3'(s('type.option.option'(X0),X2),s(X1,X3),s(fun(X0,X1),X4))) = s(X1,happ(s(fun(fun(X0,X1),X1),happ(s(fun(X1,fun(fun(X0,X1),X1)),happ(s(fun('type.option.option'(X0),fun(X1,fun(fun(X0,X1),X1))),'const.option.option_CASE_0'),s('type.option.option'(X0),X2))),s(X1,X3))),s(fun(X0,X1),X4)))),
  inference(flattening,[],[f74])).
fof(f74,plain,(
  ! [X0,X1] : ! [X2,X3,X4] : s(X1,'const.option.option_CASE_3'(s('type.option.option'(X0),X2),s(X1,X3),s(fun(X0,X1),X4))) = s(X1,happ(s(fun(fun(X0,X1),X1),happ(s(fun(X1,fun(fun(X0,X1),X1)),happ(s(fun('type.option.option'(X0),fun(X1,fun(fun(X0,X1),X1))),'const.option.option_CASE_0'),s('type.option.option'(X0),X2))),s(X1,X3))),s(fun(X0,X1),X4)))),
  inference(rectify,[],[f32])).
fof(f32,axiom,(
  ! [X6,X7] : ! [X19,X20,X21] : s(X7,'const.option.option_CASE_3'(s('type.option.option'(X6),X19),s(X7,X20),s(fun(X6,X7),X21))) = s(X7,happ(s(fun(fun(X6,X7),X7),happ(s(fun(X7,fun(fun(X6,X7),X7)),happ(s(fun('type.option.option'(X6),fun(X7,fun(fun(X6,X7),X7))),'const.option.option_CASE_0'),s('type.option.option'(X6),X19))),s(X7,X20))),s(fun(X6,X7),X21)))),
  file('thm.misc.IN_option_rwt2','ARITY_0_3_const.option.option_CASE')).
fof(f168,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(X0,happ(s(fun(X1,X0),X4),s(X1,X2))) = s(X0,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))),s(X0,X3),s(fun(X1,X0),X4)))) )),
  inference(cnf_transformation,[],[f73])).
fof(f73,plain,(
  ! [X0,X1,X2,X3,X4] : s(X0,happ(s(fun(X1,X0),X4),s(X1,X2))) = s(X0,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))),s(X0,X3),s(fun(X1,X0),X4)))),
  inference(flattening,[],[f72])).
fof(f72,plain,(
  ! [X0,X1] : ! [X2,X3,X4] : s(X0,happ(s(fun(X1,X0),X4),s(X1,X2))) = s(X0,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))),s(X0,X3),s(fun(X1,X0),X4)))),
  inference(rectify,[],[f28])).
fof(f28,axiom,(
  ! [X7,X6] : ! [X8,X17,X18] : s(X7,happ(s(fun(X6,X7),X18),s(X6,X8))) = s(X7,'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X8))),s(X7,X17),s(fun(X6,X7),X18)))),
  file('thm.misc.IN_option_rwt2','thm.option.option_case_def|split|1')).
fof(f167,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,f(s(X0,sK8(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK8(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3)) )),
  inference(cnf_transformation,[],[f110])).
fof(f110,plain,(
  ! [X0,X1,X2,X3] : (s(X1,f(s(X0,sK8(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK8(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK8])],[f80])).
fof(f80,plain,(
  ! [X0,X1,X2,X3] : (? [X4] : s(X1,f(s(X0,X4))) != s(X1,g(s(X0,X4))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(ennf_transformation,[],[f71])).
fof(f71,plain,(
  ! [X0,X1,X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(flattening,[],[f70])).
fof(f70,plain,(
  ! [X0,X1] : ! [X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(rectify,[],[f4])).
fof(f4,axiom,(
  ! [X1,X2] : ! [X3,X4] : (! [X5] : s(X2,f(s(X1,X5))) = s(X2,g(s(X1,X5))) => s(fun(X1,X2),X3) = s(fun(X1,X2),X4))),
  file('thm.misc.IN_option_rwt2',aHL_EXT)).
fof(f166,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,X2) = s(X1,'const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(X1,X2),s(fun(X0,X1),X3)))) )),
  inference(cnf_transformation,[],[f69])).
fof(f69,plain,(
  ! [X0,X1,X2,X3] : s(X1,X2) = s(X1,'const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(X1,X2),s(fun(X0,X1),X3)))),
  inference(flattening,[],[f68])).
fof(f68,plain,(
  ! [X0,X1] : ! [X2,X3] : s(X1,X2) = s(X1,'const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(X1,X2),s(fun(X0,X1),X3)))),
  inference(rectify,[],[f27])).
fof(f27,axiom,(
  ! [X6,X7] : ! [X17,X18] : s(X7,X17) = s(X7,'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.NONE_0'),s(X7,X17),s(fun(X6,X7),X18)))),
  file('thm.misc.IN_option_rwt2','thm.option.option_case_def|split|0')).
fof(f162,plain,(
  ( ! [X0,X1] : (p(s(bool,X1)) | p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f79])).
fof(f79,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1))),
  inference(flattening,[],[f78])).
fof(f78,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | ((p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1)))),
  inference(ennf_transformation,[],[f67])).
fof(f67,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) => p(s(bool,X1))) => ((p(s(bool,X1)) => p(s(bool,X0))) => s(bool,X0) = s(bool,X1)))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X12,X13] : ((p(s(bool,X12)) => p(s(bool,X13))) => ((p(s(bool,X13)) => p(s(bool,X12))) => s(bool,X12) = s(bool,X13)))),
  file('thm.misc.IN_option_rwt2','thm.bool.IMP_ANTISYM_AX')).
fof(f165,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | ~p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f79])).
fof(f157,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) | s(X0,X1) = s(X0,X2)) )),
  inference(cnf_transformation,[],[f106])).
fof(f106,plain,(
  ! [X0,X1,X2] : ((s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) | s(X0,X1) = s(X0,X2)) & (s(X0,X1) != s(X0,X2) | s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2)))))),
  inference(nnf_transformation,[],[f64])).
fof(f64,plain,(
  ! [X0,X1,X2] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) <=> s(X0,X1) = s(X0,X2))),
  inference(flattening,[],[f63])).
fof(f63,plain,(
  ! [X0] : ! [X1,X2] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) <=> s(X0,X1) = s(X0,X2))),
  inference(rectify,[],[f29])).
fof(f29,axiom,(
  ! [X6] : ! [X8,X11] : (s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X8))) = s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X11))) <=> s(X6,X8) = s(X6,X11))),
  file('thm.misc.IN_option_rwt2','thm.option.SOME_|49||49|')).
fof(f158,plain,(
  ( ! [X2,X0,X1] : (s(X0,X1) != s(X0,X2) | s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2)))) )),
  inference(cnf_transformation,[],[f106])).
fof(f154,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.pred_set.EMPTY_0'))))) )),
  inference(cnf_transformation,[],[f60])).
fof(f60,plain,(
  ! [X0,X1] : ~p(s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.pred_set.EMPTY_0'))))),
  inference(flattening,[],[f59])).
fof(f59,plain,(
  ! [X0] : ! [X1] : ~p(s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.pred_set.EMPTY_0'))))),
  inference(rectify,[],[f31])).
fof(f31,axiom,(
  ! [X6] : ! [X8] : ~p(s(bool,'const.bool.IN_2'(s(X6,X8),s(fun(X6,bool),'const.pred_set.EMPTY_0'))))),
  file('thm.misc.IN_option_rwt2','thm.pred_set.NOT_IN_EMPTY')).
fof(f153,plain,(
  ( ! [X0,X1] : (s('type.option.option'(X0),'const.option.NONE_0') != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1)))) )),
  inference(cnf_transformation,[],[f58])).
fof(f58,plain,(
  ! [X0,X1] : s('type.option.option'(X0),'const.option.NONE_0') != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1)))),
  inference(flattening,[],[f57])).
fof(f57,plain,(
  ! [X0] : ! [X1] : ~s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1)))),
  inference(rectify,[],[f30])).
fof(f30,axiom,(
  ! [X6] : ! [X8] : ~s('type.option.option'(X6),'const.option.NONE_0') = s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X8)))),
  file('thm.misc.IN_option_rwt2','thm.option.NOT_NONE_SOME')).
fof(f123,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'T_0') != s(bool,X0)) )),
  inference(cnf_transformation,[],[f86])).
fof(f86,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f39])).
fof(f39,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f22])).
fof(f22,axiom,(
  ! [X14] : (s(bool,'T_0') = s(bool,X14) <=> p(s(bool,X14)))),
  file('thm.misc.IN_option_rwt2','thm.bool.EQ_CLAUSES|split|1')).
fof(f124,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f86])).
fof(f121,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.misc.IN_option_rwt2',aHL_BOOL_CASES)).
fof(f39334,plain,(
  ( ! [X63] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X63)))) ) | ($spl0 | $spl14 | $spl152)),
  inference(subsumption_resolution,[],[f39333,f16746])).
fof(f16746,plain,(
  ( ! [X99,X97,X98] : (s(bool,X99) = s(bool,'const.bool.IN_2'(s(X97,X98),s(fun(X97,bool),'const.pred_set.EMPTY_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X99)))) ) | $spl14),
  inference(subsumption_resolution,[],[f16701,f179])).
fof(f16701,plain,(
  ( ! [X99,X97,X98] : (p(s(bool,'F_0')) | s(bool,X99) = s(bool,'const.bool.IN_2'(s(X97,X98),s(fun(X97,bool),'const.pred_set.EMPTY_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X99)))) ) | $spl14),
  inference(superposition,[],[f16358,f191])).
fof(f16358,plain,(
  ( ! [X6,X5] : (p(s(bool,X6)) | s(bool,X5) = s(bool,X6) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X5)))) ) | $spl14),
  inference(subsumption_resolution,[],[f16357,f179])).
fof(f16357,plain,(
  ( ! [X6,X5] : (p(s(bool,'F_0')) | p(s(bool,X6)) | s(bool,X5) = s(bool,X6) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X5)))) ) | $spl14),
  inference(forward_demodulation,[],[f15988,f901])).
fof(f15988,plain,(
  ( ! [X6,X5] : (p(s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) | p(s(bool,X6)) | s(bool,X5) = s(bool,X6) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X5)))) ) | $spl14),
  inference(superposition,[],[f162,f5639])).
fof(f5639,plain,(
  ( ! [X48] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X48))) | s(bool,X48) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | $spl14),
  inference(subsumption_resolution,[],[f5463,f153])).
fof(f5463,plain,(
  ( ! [X48] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X48))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X48))) | s(bool,X48) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | $spl14),
  inference(superposition,[],[f148,f4840])).
fof(f4840,plain,(
  ( ! [X38] : (s(bool,X38) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X38)),bool))) ) | $spl14),
  inference(superposition,[],[f4512,f901])).
fof(f39333,plain,(
  ( ! [X63] : (s(bool,X63) != s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.pred_set.EMPTY_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X63)))) ) | ($spl0 | $spl152)),
  inference(forward_demodulation,[],[f35822,f166])).
fof(f35822,plain,(
  ( ! [X63] : (s(bool,X63) != s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),'const.option.NONE_0'),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X63)))) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f35787,f29550])).
fof(f39328,plain,(
  $false | ($spl0 | $spl14 | $spl152)),
  inference(global_subsumption,[],[f39327,f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023,f38275,f39033,f39037,f39040,f38840,f39050,f39065,f39072,f38398,f39094,f39096,f39102,f38407,f39105,f39107,f38411,f38420,f39115,f39127,f39160,f39162,f38491,f39195,f39213,f38525,f39218,f39231,f38560,f38569,f38582,f38601,f38604,f38614,f39268,f39271,f39275,f39278,f39293,f39308,f38832,f39314,f39316])).
fof(f39327,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | ($spl0 | $spl14 | $spl152)),
  inference(condensation,[],[f39326])).
fof(f39326,plain,(
  ( ! [X70,X69] : (s(bool,X69) = s(bool,X70) | s(bool,'F_0') = s(bool,X70)) ) | ($spl0 | $spl14 | $spl152)),
  inference(subsumption_resolution,[],[f39325,f35832])).
fof(f35832,plain,(
  ( ! [X3] : (s(bool,X3) = s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.pred_set.EMPTY_0')))) ) | ($spl0 | $spl14 | $spl152)),
  inference(subsumption_resolution,[],[f35831,f16746])).
fof(f35831,plain,(
  ( ! [X3] : (s(bool,X3) = s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.pred_set.EMPTY_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X3)))) ) | ($spl0 | $spl152)),
  inference(forward_demodulation,[],[f35797,f166])).
fof(f35797,plain,(
  ( ! [X3] : (s(bool,X3) = s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),'const.option.NONE_0'),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X3)))) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f35787,f712])).
fof(f39325,plain,(
  ( ! [X70,X69] : (s(bool,X69) != s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.pred_set.EMPTY_0'))) | s(bool,X69) = s(bool,X70) | s(bool,'F_0') = s(bool,X70)) ) | ($spl0 | $spl152)),
  inference(forward_demodulation,[],[f35813,f166])).
fof(f35813,plain,(
  ( ! [X70,X69] : (s(bool,X69) != s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),'const.option.NONE_0'),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3))))) | s(bool,X69) = s(bool,X70) | s(bool,'F_0') = s(bool,X70)) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f35787,f2923])).
fof(f39317,plain,(
  $false | ($spl0 | $spl152)),
  inference(global_subsumption,[],[f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023,f38275,f39033,f39037,f39040,f38840,f39050,f39065,f39072,f38398,f39094,f39096,f39102,f38407,f39105,f39107,f38411,f38420,f39115,f39127,f39160,f39162,f38491,f39195,f39213,f38525,f39218,f39231,f38560,f38569,f38582,f38601,f38604,f38614,f39268,f39271,f39275,f39278,f39293,f39308,f38832,f39314,f39316])).
fof(f39315,plain,(
  $false | ($spl0 | $spl152)),
  inference(global_subsumption,[],[f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023,f38275,f39033,f39037,f39040,f38840,f39050,f39065,f39072,f38398,f39094,f39096,f39102,f38407,f39105,f39107,f38411,f38420,f39115,f39127,f39160,f39162,f38491,f39195,f39213,f38525,f39218,f39231,f38560,f38569,f38582,f38601,f38604,f38614,f39268,f39271,f39275,f39278,f39293,f39308,f38832,f39314])).
fof(f39313,plain,(
  $false | ($spl0 | $spl152)),
  inference(global_subsumption,[],[f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023,f38275,f39033,f39037,f39040,f38840,f39050,f39065,f39072,f38398,f39094,f39096,f39102,f38407,f39105,f39107,f38411,f38420,f39115,f39127,f39160,f39162,f38491,f39195,f39213,f38525,f39218,f39231,f38560,f38569,f38582,f38601,f38604,f38614,f39268,f39271,f39275,f39278,f39293,f39308,f38832])).
fof(f39312,plain,(
  $false | ($spl0 | $spl14 | $spl152)),
  inference(global_subsumption,[],[f38814,f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023,f38275,f39033,f39037,f39040,f38840,f39050,f39065,f39072,f38398,f39094,f39096,f39102,f38407,f39105,f39107,f38411,f38420,f39115,f39127,f39160,f39162,f38491,f39195,f39213,f38525,f39218,f39231,f38560,f38569,f38582,f38601,f38604,f38614,f39268,f39271,f39275,f39278,f39293,f39308])).
fof(f38814,plain,(
  ( ! [X738,X741,X743,X739,X744,X740,X742] : (s(bool,X742) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X743),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X743,bool),X744))) | s(bool,X742) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X738),X740),s(bool,X741),s(fun(X738,bool),X739))) | s('type.option.option'(X738),'const.option.NONE_0') = s('type.option.option'(X738),X740)) ) | ($spl0 | $spl14 | $spl152)),
  inference(backward_demodulation,[],[f37880,f37268])).
fof(f37268,plain,(
  ( ! [X738,X741,X743,X739,X744,X740,X742] : (s(bool,X742) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X743),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X743,bool),X744))) | s(bool,X742) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X738),X740),s(bool,X741),s(fun(X738,bool),X739))) | s('type.option.option'(X738),'const.option.NONE_0') = s('type.option.option'(X738),X740)) ) | ($spl0 | $spl14 | $spl152)),
  inference(forward_demodulation,[],[f36217,f191])).
fof(f36217,plain,(
  ( ! [X738,X741,X743,X739,X744,X740,X742] : (s(bool,X742) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X743),'const.option.NONE_0'),s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.pred_set.EMPTY_0'))),s(fun(X743,bool),X744))) | s(bool,X742) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X738),X740),s(bool,X741),s(fun(X738,bool),X739))) | s('type.option.option'(X738),'const.option.NONE_0') = s('type.option.option'(X738),X740)) ) | ($spl0 | $spl14 | $spl152)),
  inference(backward_demodulation,[],[f35832,f35338])).
fof(f39311,plain,(
  $false | ($spl0 | $spl14 | $spl152)),
  inference(global_subsumption,[],[f38811,f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023,f38275,f39033,f39037,f39040,f38840,f39050,f39065,f39072,f38398,f39094,f39096,f39102,f38407,f39105,f39107,f38411,f38420,f39115,f39127,f39160,f39162,f38491,f39195,f39213,f38525,f39218,f39231,f38560,f38569,f38582,f38601,f38604,f38614,f39268,f39271,f39275,f39278,f39293,f39308])).
fof(f38811,plain,(
  ( ! [X693,X695,X689,X692,X694,X690] : (s(bool,X693) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X694),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X694,bool),X695))) | s(bool,X693) != s(bool,happ(s(fun(X689,bool),X692),s(X689,sK6(X690,X689)))) | s('type.option.option'(X689),'const.option.NONE_0') = s('type.option.option'(X689),X690)) ) | ($spl0 | $spl14 | $spl152)),
  inference(backward_demodulation,[],[f37880,f37110])).
fof(f37110,plain,(
  ( ! [X693,X695,X689,X692,X694,X690] : (s(bool,X693) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X694),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X694,bool),X695))) | s(bool,X693) != s(bool,happ(s(fun(X689,bool),X692),s(X689,sK6(X690,X689)))) | s('type.option.option'(X689),'const.option.NONE_0') = s('type.option.option'(X689),X690)) ) | ($spl0 | $spl14 | $spl152)),
  inference(forward_demodulation,[],[f35967,f191])).
fof(f35967,plain,(
  ( ! [X693,X695,X689,X692,X694,X690] : (s(bool,X693) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X694),'const.option.NONE_0'),s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.pred_set.EMPTY_0'))),s(fun(X694,bool),X695))) | s(bool,X693) != s(bool,happ(s(fun(X689,bool),X692),s(X689,sK6(X690,X689)))) | s('type.option.option'(X689),'const.option.NONE_0') = s('type.option.option'(X689),X690)) ) | ($spl0 | $spl14 | $spl152)),
  inference(backward_demodulation,[],[f35832,f35533])).
fof(f39309,plain,(
  $false | ($spl0 | $spl152)),
  inference(global_subsumption,[],[f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023,f38275,f39033,f39037,f39040,f38840,f39050,f39065,f39072,f38398,f39094,f39096,f39102,f38407,f39105,f39107,f38411,f38420,f39115,f39127,f39160,f39162,f38491,f39195,f39213,f38525,f39218,f39231,f38560,f38569,f38582,f38601,f38604,f38614,f39268,f39271,f39275,f39278,f39293,f39308])).
fof(f39294,plain,(
  $false | ($spl0 | $spl152)),
  inference(global_subsumption,[],[f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023,f38275,f39033,f39037,f39040,f38840,f39050,f39065,f39072,f38398,f39094,f39096,f39102,f38407,f39105,f39107,f38411,f38420,f39115,f39127,f39160,f39162,f38491,f39195,f39213,f38525,f39218,f39231,f38560,f38569,f38582,f38601,f38604,f38614,f39268,f39271,f39275,f39278,f39293])).
fof(f39279,plain,(
  $false | ($spl0 | $spl152)),
  inference(global_subsumption,[],[f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023,f38275,f39033,f39037,f39040,f38840,f39050,f39065,f39072,f38398,f39094,f39096,f39102,f38407,f39105,f39107,f38411,f38420,f39115,f39127,f39160,f39162,f38491,f39195,f39213,f38525,f39218,f39231,f38560,f38569,f38582,f38601,f38604,f38614,f39268,f39271,f39275,f39278])).
fof(f39276,plain,(
  $false | ($spl0 | $spl152)),
  inference(global_subsumption,[],[f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023,f38275,f39033,f39037,f39040,f38840,f39050,f39065,f39072,f38398,f39094,f39096,f39102,f38407,f39105,f39107,f38411,f38420,f39115,f39127,f39160,f39162,f38491,f39195,f39213,f38525,f39218,f39231,f38560,f38569,f38582,f38601,f38604,f38614,f39268,f39271,f39275])).
fof(f39272,plain,(
  $false | ($spl0 | $spl152)),
  inference(global_subsumption,[],[f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023,f38275,f39033,f39037,f39040,f38840,f39050,f39065,f39072,f38398,f39094,f39096,f39102,f38407,f39105,f39107,f38411,f38420,f39115,f39127,f39160,f39162,f38491,f39195,f39213,f38525,f39218,f39231,f38560,f38569,f38582,f38601,f38604,f38614,f39268,f39271])).
fof(f39269,plain,(
  $false | ($spl0 | $spl152)),
  inference(global_subsumption,[],[f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023,f38275,f39033,f39037,f39040,f38840,f39050,f39065,f39072,f38398,f39094,f39096,f39102,f38407,f39105,f39107,f38411,f38420,f39115,f39127,f39160,f39162,f38491,f39195,f39213,f38525,f39218,f39231,f38560,f38569,f38582,f38601,f38604,f38614,f39268])).
fof(f39267,plain,(
  $false | ($spl0 | $spl152)),
  inference(global_subsumption,[],[f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023,f38275,f39033,f39037,f39040,f38840,f39050,f39065,f39072,f38398,f39094,f39096,f39102,f38407,f39105,f39107,f38411,f38420,f39115,f39127,f39160,f39162,f38491,f39195,f39213,f38525,f39218,f39231,f38560,f38569,f38582,f38601,f38604,f38614])).
fof(f39266,plain,(
  $false | ($spl0 | $spl14 | $spl152)),
  inference(global_subsumption,[],[f38612,f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023,f38275,f39033,f39037,f39040,f38840,f39050,f39065,f39072,f38398,f39094,f39096,f39102,f38407,f39105,f39107,f38411,f38420,f39115,f39127,f39160,f39162,f38491,f39195,f39213,f38525,f39218,f39231,f38560,f38569,f38582,f38601,f38604])).
fof(f38612,plain,(
  ( ! [X140,X138,X141,X139] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X139))) | s(bool,X138) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X140),'const.option.NONE_0'),s(bool,X139),s(fun(X140,bool),X141))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X138)))) ) | ($spl0 | $spl14 | $spl152)),
  inference(backward_demodulation,[],[f37880,f29987])).
fof(f29987,plain,(
  ( ! [X140,X138,X141,X139] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X139))) | s(bool,X138) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X140),'const.option.NONE_0'),s(bool,X139),s(fun(X140,bool),X141))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X138)))) ) | $spl14),
  inference(forward_demodulation,[],[f29856,f901])).
fof(f29856,plain,(
  ( ! [X140,X138,X141,X139] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X139))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)))) | s(bool,X138) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X140),'const.option.NONE_0'),s(bool,X139),s(fun(X140,bool),X141))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X138)))) ) | $spl14),
  inference(superposition,[],[f363,f5639])).
fof(f39265,plain,(
  $false | ($spl0 | $spl152)),
  inference(global_subsumption,[],[f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023,f38275,f39033,f39037,f39040,f38840,f39050,f39065,f39072,f38398,f39094,f39096,f39102,f38407,f39105,f39107,f38411,f38420,f39115,f39127,f39160,f39162,f38491,f39195,f39213,f38525,f39218,f39231,f38560,f38569,f38582,f38601,f38604])).
fof(f39264,plain,(
  $false | ($spl0 | $spl14 | $spl152)),
  inference(global_subsumption,[],[f38603,f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023,f38275,f39033,f39037,f39040,f38840,f39050,f39065,f39072,f38398,f39094,f39096,f39102,f38407,f39105,f39107,f38411,f38420,f39115,f39127,f39160,f39162,f38491,f39195,f39213,f38525,f39218,f39231,f38560,f38569,f38582,f38601])).
fof(f38603,plain,(
  ( ! [X333,X331,X332,X334] : (s(bool,X332) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X333),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X333,bool),X334))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X331))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X332))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X331)))) ) | ($spl0 | $spl14 | $spl152)),
  inference(backward_demodulation,[],[f37880,f29966])).
fof(f29966,plain,(
  ( ! [X333,X331,X332,X334] : (s(bool,X332) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X333),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X333,bool),X334))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X331))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X332))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X331)))) ) | $spl14),
  inference(forward_demodulation,[],[f29800,f901])).
fof(f29800,plain,(
  ( ! [X333,X331,X332,X334] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X331))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X332))) | s(bool,X332) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X333),'const.option.NONE_0'),s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)),s(fun(X333,bool),X334))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X331)))) ) | $spl14),
  inference(superposition,[],[f363,f5639])).
fof(f39263,plain,(
  $false | ($spl0 | $spl152)),
  inference(global_subsumption,[],[f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023,f38275,f39033,f39037,f39040,f38840,f39050,f39065,f39072,f38398,f39094,f39096,f39102,f38407,f39105,f39107,f38411,f38420,f39115,f39127,f39160,f39162,f38491,f39195,f39213,f38525,f39218,f39231,f38560,f38569,f38582,f38601])).
fof(f39262,plain,(
  $false | ($spl0 | $spl14 | $spl152)),
  inference(global_subsumption,[],[f38600,f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023,f38275,f39033,f39037,f39040,f38840,f39050,f39065,f39072,f38398,f39094,f39096,f39102,f38407,f39105,f39107,f38411,f38420,f39115,f39127,f39160,f39162,f38491,f39195,f39213,f38525,f39218,f39231,f38560,f38569,f38582])).
fof(f38600,plain,(
  ( ! [X140,X138,X141,X139] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X139))) | s(bool,X139) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X140),'const.option.NONE_0'),s(bool,X138),s(fun(X140,bool),X141))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X138)))) ) | ($spl0 | $spl14 | $spl152)),
  inference(backward_demodulation,[],[f37880,f29936])).
fof(f29936,plain,(
  ( ! [X140,X138,X141,X139] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X139))) | s(bool,X139) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X140),'const.option.NONE_0'),s(bool,X138),s(fun(X140,bool),X141))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X138)))) ) | $spl14),
  inference(forward_demodulation,[],[f29761,f901])).
fof(f29761,plain,(
  ( ! [X140,X138,X141,X139] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X139))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)))) | s(bool,X139) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X140),'const.option.NONE_0'),s(bool,X138),s(fun(X140,bool),X141))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X138)))) ) | $spl14),
  inference(superposition,[],[f363,f5639])).
fof(f39253,plain,(
  $false | ($spl0 | $spl152)),
  inference(global_subsumption,[],[f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023,f38275,f39033,f39037,f39040,f38840,f39050,f39065,f39072,f38398,f39094,f39096,f39102,f38407,f39105,f39107,f38411,f38420,f39115,f39127,f39160,f39162,f38491,f39195,f39213,f38525,f39218,f39231,f38560,f38569,f38582])).
fof(f39245,plain,(
  $false | ($spl0 | $spl152)),
  inference(global_subsumption,[],[f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023,f38275,f39033,f39037,f39040,f38840,f39050,f39065,f39072,f38398,f39094,f39096,f39102,f38407,f39105,f39107,f38411,f38420,f39115,f39127,f39160,f39162,f38491,f39195,f39213,f38525,f39218,f39231,f38560,f38569])).
fof(f39239,plain,(
  $false | ($spl0 | $spl152)),
  inference(global_subsumption,[],[f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023,f38275,f39033,f39037,f39040,f38840,f39050,f39065,f39072,f38398,f39094,f39096,f39102,f38407,f39105,f39107,f38411,f38420,f39115,f39127,f39160,f39162,f38491,f39195,f39213,f38525,f39218,f39231,f38560])).
fof(f39235,plain,(
  $false | ($spl0 | $spl14 | $spl36 | $spl152)),
  inference(global_subsumption,[],[f39234,f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023,f38275,f39033,f39037,f39040,f38840,f39050,f39065,f39072,f38398,f39094,f39096,f39102,f38407,f39105,f39107,f38411,f38420,f39115,f39127,f39160,f39162,f38491,f39195,f39213,f38525,f39218,f39231])).
fof(f39234,plain,(
  ( ! [X0] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0)))) ) | ($spl0 | $spl14 | $spl36 | $spl152)),
  inference(condensation,[],[f39233])).
fof(f39233,plain,(
  ( ! [X498,X497] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X498))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X497)))) ) | ($spl0 | $spl14 | $spl36 | $spl152)),
  inference(subsumption_resolution,[],[f38551,f18692])).
fof(f18692,plain,(
  ( ! [X185,X184] : (s(bool,X185) = s(bool,sK6('const.option.SOME_1'(s(bool,X184)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X185))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X184)))) ) | ($spl0 | $spl14)),
  inference(subsumption_resolution,[],[f18545,f179])).
fof(f18545,plain,(
  ( ! [X185,X184] : (p(s(bool,'F_0')) | s(bool,X185) = s(bool,sK6('const.option.SOME_1'(s(bool,X184)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X185))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X184)))) ) | ($spl0 | $spl14)),
  inference(superposition,[],[f16358,f9094])).
fof(f38551,plain,(
  ( ! [X498,X497] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X498))) | s(bool,X498) != s(bool,sK6('const.option.SOME_1'(s(bool,X497)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X497)))) ) | ($spl0 | $spl36 | $spl152)),
  inference(backward_demodulation,[],[f37880,f29631])).
fof(f29631,plain,(
  ( ! [X498,X497] : (s(bool,X498) != s(bool,sK6('const.option.SOME_1'(s(bool,X497)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X498))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X497)))) ) | ($spl0 | $spl36)),
  inference(subsumption_resolution,[],[f28695,f180])).
fof(f28695,plain,(
  ( ! [X498,X497] : (s(bool,X498) != s(bool,sK6('const.option.SOME_1'(s(bool,X497)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X498))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X497))) | s(bool,'T_0') = s(bool,'F_0')) ) | ($spl0 | $spl36)),
  inference(superposition,[],[f14809,f14030])).
fof(f39232,plain,(
  $false | ($spl0 | $spl152)),
  inference(global_subsumption,[],[f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023,f38275,f39033,f39037,f39040,f38840,f39050,f39065,f39072,f38398,f39094,f39096,f39102,f38407,f39105,f39107,f38411,f38420,f39115,f39127,f39160,f39162,f38491,f39195,f39213,f38525,f39218,f39231])).
fof(f39228,plain,(
  $false | ($spl0 | $spl14 | $spl152)),
  inference(global_subsumption,[],[f39227,f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023,f38275,f39033,f39037,f39040,f38840,f39050,f39065,f39072,f38398,f39094,f39096,f39102,f38407,f39105,f39107,f38411,f38420,f39115,f39127,f39160,f39162,f38491,f39195,f39213,f38525,f39218])).
fof(f39227,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1))) | s(bool,X1) = s(bool,X2)) ) | ($spl0 | $spl14 | $spl152)),
  inference(condensation,[],[f39226])).
fof(f39226,plain,(
  ( ! [X85,X83,X84,X82] : (s(bool,X84) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X83) = s(bool,X84) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X85))) | s(bool,X82) = s(bool,X85)) ) | ($spl0 | $spl14 | $spl152)),
  inference(subsumption_resolution,[],[f38541,f28108])).
fof(f38541,plain,(
  ( ! [X85,X83,X84,X82] : (s(bool,X84) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X82) != s(bool,X83) | s(bool,X83) = s(bool,X84) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X85))) | s(bool,X82) = s(bool,X85)) ) | ($spl0 | $spl14 | $spl152)),
  inference(backward_demodulation,[],[f37880,f28797])).
fof(f28797,plain,(
  ( ! [X85,X83,X84,X82] : (s(bool,X82) != s(bool,X83) | s(bool,X83) = s(bool,X84) | s(bool,X84) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X85))) | s(bool,X82) = s(bool,X85)) ) | ($spl0 | $spl14)),
  inference(superposition,[],[f11229,f14030])).
fof(f11229,plain,(
  ( ! [X8,X9] : (s(bool,'T_0') != s(bool,X8) | s(bool,X8) = s(bool,X9) | s(bool,X9) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl14)),
  inference(superposition,[],[f180,f9766])).
fof(f9766,plain,(
  ( ! [X6,X5] : (s(bool,X5) = s(bool,X6) | s(bool,'F_0') = s(bool,X6) | s(bool,X5) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl14)),
  inference(subsumption_resolution,[],[f9692,f121])).
fof(f9692,plain,(
  ( ! [X6,X5] : (s(bool,'T_0') != s(bool,X6) | s(bool,X5) = s(bool,X6) | s(bool,'F_0') = s(bool,X6) | s(bool,X5) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl14)),
  inference(superposition,[],[f3585,f4840])).
fof(f39225,plain,(
  $false | ($spl0 | $spl14 | $spl20 | $spl152)),
  inference(global_subsumption,[],[f39224,f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023,f38275,f39033,f39037,f39040,f38840,f39050,f39065,f39072,f38398,f39094,f39096,f39102,f38407,f39105,f39107,f38411,f38420,f39115,f39127,f39160,f39162,f38491,f39195,f39213,f38525,f39218])).
fof(f39224,plain,(
  ( ! [X0,X1] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0))) | s(bool,X0) = s(bool,X1)) ) | ($spl0 | $spl14 | $spl20 | $spl152)),
  inference(condensation,[],[f39223])).
fof(f39223,plain,(
  ( ! [X70,X68,X69] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X69))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X70))) | s(bool,X68) = s(bool,X70)) ) | ($spl0 | $spl14 | $spl20 | $spl152)),
  inference(subsumption_resolution,[],[f38540,f28798])).
fof(f28798,plain,(
  ( ! [X90,X88,X89] : (s(bool,X89) != s(bool,sK6('const.option.SOME_1'(s(bool,X88)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X89))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X90))) | s(bool,X88) = s(bool,X90)) ) | ($spl0 | $spl14 | $spl20)),
  inference(superposition,[],[f16487,f14030])).
fof(f16487,plain,(
  ( ! [X136] : (s(bool,X136) != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X136)))) ) | ($spl0 | $spl14 | $spl20)),
  inference(subsumption_resolution,[],[f16191,f4454])).
fof(f16191,plain,(
  ( ! [X136] : (s(bool,X136) != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X136)))) ) | ($spl14 | $spl20)),
  inference(superposition,[],[f7746,f5639])).
fof(f38540,plain,(
  ( ! [X70,X68,X69] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X69))) | s(bool,X69) = s(bool,sK6('const.option.SOME_1'(s(bool,X68)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X70))) | s(bool,X68) = s(bool,X70)) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f28793])).
fof(f39222,plain,(
  $false | ($spl0 | $spl14 | $spl152)),
  inference(global_subsumption,[],[f38537,f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023,f38275,f39033,f39037,f39040,f38840,f39050,f39065,f39072,f38398,f39094,f39096,f39102,f38407,f39105,f39107,f38411,f38420,f39115,f39127,f39160,f39162,f38491,f39195,f39213,f38525,f39218])).
fof(f38537,plain,(
  ( ! [X52,X53,X51] : (s(bool,X52) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X51))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X52))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X53))) | s(bool,X51) = s(bool,X53)) ) | ($spl0 | $spl14 | $spl152)),
  inference(backward_demodulation,[],[f37880,f28788])).
fof(f28788,plain,(
  ( ! [X52,X53,X51] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X51))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X52))) | s(bool,X52) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X53))) | s(bool,X51) = s(bool,X53)) ) | ($spl0 | $spl14)),
  inference(superposition,[],[f5639,f14030])).
fof(f39221,plain,(
  $false | ($spl0 | $spl14 | $spl152)),
  inference(global_subsumption,[],[f39220,f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023,f38275,f39033,f39037,f39040,f38840,f39050,f39065,f39072,f38398,f39094,f39096,f39102,f38407,f39105,f39107,f38411,f38420,f39115,f39127,f39160,f39162,f38491,f39195,f39213,f38525,f39218])).
fof(f39220,plain,(
  ( ! [X206,X205] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X206))) | s(bool,X206) = s(bool,sK6('const.option.SOME_1'(s(bool,X205)),bool))) ) | ($spl0 | $spl14 | $spl152)),
  inference(subsumption_resolution,[],[f38528,f15877])).
fof(f15877,plain,(
  ( ! [X12,X13] : (s(bool,X13) = s(bool,sK6('const.option.SOME_1'(s(bool,X12)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X13))) | s(bool,'T_0') = s(bool,X12)) ) | $spl14),
  inference(superposition,[],[f5639,f121])).
fof(f38528,plain,(
  ( ! [X206,X205] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X206))) | s(bool,'T_0') != s(bool,X205) | s(bool,X206) = s(bool,sK6('const.option.SOME_1'(s(bool,X205)),bool))) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f27829])).
fof(f39219,plain,(
  $false | ($spl0 | $spl152)),
  inference(global_subsumption,[],[f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023,f38275,f39033,f39037,f39040,f38840,f39050,f39065,f39072,f38398,f39094,f39096,f39102,f38407,f39105,f39107,f38411,f38420,f39115,f39127,f39160,f39162,f38491,f39195,f39213,f38525,f39218])).
fof(f39216,plain,(
  $false | ($spl0 | $spl14 | $spl152)),
  inference(global_subsumption,[],[f38839,f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023,f38275,f39033,f39037,f39040,f38840,f39050,f39065,f39072,f38398,f39094,f39096,f39102,f38407,f39105,f39107,f38411,f38420,f39115,f39127,f39160,f39162,f38491,f39195,f39213,f38525])).
fof(f38839,plain,(
  ( ! [X0,X1] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0))) | s(bool,X0) = s(bool,X1)) ) | ($spl0 | $spl14 | $spl152)),
  inference(duplicate_literal_removal,[],[f38838])).
fof(f38838,plain,(
  ( ! [X0,X1] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0))) | s(bool,X0) = s(bool,X1) | s(bool,X0) = s(bool,X1)) ) | ($spl0 | $spl14 | $spl152)),
  inference(condensation,[],[f38526])).
fof(f38526,plain,(
  ( ! [X277,X279,X278] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X279))) | s(bool,X277) = s(bool,X278) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X278))) | s(bool,X277) = s(bool,X279)) ) | ($spl0 | $spl14 | $spl152)),
  inference(backward_demodulation,[],[f37880,f27391])).
fof(f27391,plain,(
  ( ! [X277,X279,X278] : (s(bool,X277) = s(bool,X278) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X278))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X279))) | s(bool,X277) = s(bool,X279)) ) | ($spl0 | $spl14)),
  inference(subsumption_resolution,[],[f26710,f179])).
fof(f26710,plain,(
  ( ! [X277,X279,X278] : (p(s(bool,'F_0')) | s(bool,X277) = s(bool,X278) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X278))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X279))) | s(bool,X277) = s(bool,X279)) ) | ($spl0 | $spl14)),
  inference(superposition,[],[f16358,f3902])).
fof(f39215,plain,(
  $false | ($spl0 | $spl152)),
  inference(global_subsumption,[],[f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023,f38275,f39033,f39037,f39040,f38840,f39050,f39065,f39072,f38398,f39094,f39096,f39102,f38407,f39105,f39107,f38411,f38420,f39115,f39127,f39160,f39162,f38491,f39195,f39213,f38525])).
fof(f39214,plain,(
  $false | ($spl0 | $spl152)),
  inference(global_subsumption,[],[f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023,f38275,f39033,f39037,f39040,f38840,f39050,f39065,f39072,f38398,f39094,f39096,f39102,f38407,f39105,f39107,f38411,f38420,f39115,f39127,f39160,f39162,f38491,f39195,f39213])).
fof(f39209,plain,(
  $false | ($spl0 | $spl14 | $spl20 | $spl152)),
  inference(global_subsumption,[],[f39208,f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023,f38275,f39033,f39037,f39040,f38840,f39050,f39065,f39072,f38398,f39094,f39096,f39102,f38407,f39105,f39107,f38411,f38420,f39115,f39127,f39160,f39162,f38491,f39195])).
fof(f39208,plain,(
  ( ! [X0] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0)))) ) | ($spl0 | $spl14 | $spl20 | $spl152)),
  inference(condensation,[],[f39207])).
fof(f39207,plain,(
  ( ! [X395,X394] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X394))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X395)))) ) | ($spl0 | $spl14 | $spl20 | $spl152)),
  inference(subsumption_resolution,[],[f38521,f18692])).
fof(f38521,plain,(
  ( ! [X395,X394] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X394))) | s(bool,X395) != s(bool,sK6('const.option.SOME_1'(s(bool,X394)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X395)))) ) | ($spl0 | $spl14 | $spl20 | $spl152)),
  inference(backward_demodulation,[],[f37880,f27316])).
fof(f27316,plain,(
  ( ! [X395,X394] : (s(bool,X395) != s(bool,sK6('const.option.SOME_1'(s(bool,X394)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X395))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X394)))) ) | ($spl0 | $spl14 | $spl20)),
  inference(subsumption_resolution,[],[f26368,f180])).
fof(f26368,plain,(
  ( ! [X395,X394] : (s(bool,X395) != s(bool,sK6('const.option.SOME_1'(s(bool,X394)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X395))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X394))) | s(bool,'T_0') = s(bool,'F_0')) ) | ($spl0 | $spl14 | $spl20)),
  inference(superposition,[],[f16487,f3902])).
fof(f39196,plain,(
  $false | ($spl0 | $spl152)),
  inference(global_subsumption,[],[f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023,f38275,f39033,f39037,f39040,f38840,f39050,f39065,f39072,f38398,f39094,f39096,f39102,f38407,f39105,f39107,f38411,f38420,f39115,f39127,f39160,f39162,f38491,f39195])).
fof(f39182,plain,(
  $false | ($spl0 | $spl14 | $spl152)),
  inference(global_subsumption,[],[f39181,f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023,f38275,f39033,f39037,f39040,f38840,f39050,f39065,f39072,f38398,f39094,f39096,f39102,f38407,f39105,f39107,f38411,f38420,f39115,f39127,f39160,f39162,f38491])).
fof(f39181,plain,(
  ( ! [X94,X97,X95,X93,X96] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X97))) | s(bool,X94) = s(bool,'const.bool.IN_2'(s(X95,X96),s(fun(X95,bool),'const.pred_set.EMPTY_0'))) | s(bool,X93) = s(bool,X97)) ) | ($spl0 | $spl14 | $spl152)),
  inference(subsumption_resolution,[],[f38497,f23402])).
fof(f23402,plain,(
  ( ! [X436,X438,X440,X437,X439] : (s(bool,X436) = s(bool,X437) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X437))) | s(bool,X438) = s(bool,'const.bool.IN_2'(s(X439,X440),s(fun(X439,bool),'const.pred_set.EMPTY_0'))) | s(bool,X436) = s(bool,X438)) ) | ($spl0 | $spl14)),
  inference(subsumption_resolution,[],[f22286,f179])).
fof(f22286,plain,(
  ( ! [X436,X438,X440,X437,X439] : (p(s(bool,'F_0')) | s(bool,X436) = s(bool,X437) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X437))) | s(bool,X438) = s(bool,'const.bool.IN_2'(s(X439,X440),s(fun(X439,bool),'const.pred_set.EMPTY_0'))) | s(bool,X436) = s(bool,X438)) ) | ($spl0 | $spl14)),
  inference(superposition,[],[f16358,f2976])).
fof(f38497,plain,(
  ( ! [X94,X97,X95,X93,X96] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X97))) | s(bool,X93) != s(bool,X94) | s(bool,X94) = s(bool,'const.bool.IN_2'(s(X95,X96),s(fun(X95,bool),'const.pred_set.EMPTY_0'))) | s(bool,X93) = s(bool,X97)) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f26504])).
fof(f39175,plain,(
  $false | ($spl0 | $spl152)),
  inference(global_subsumption,[],[f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023,f38275,f39033,f39037,f39040,f38840,f39050,f39065,f39072,f38398,f39094,f39096,f39102,f38407,f39105,f39107,f38411,f38420,f39115,f39127,f39160,f39162,f38491])).
fof(f39174,plain,(
  $false | ($spl0 | $spl14 | $spl20 | $spl152)),
  inference(global_subsumption,[],[f39173,f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023,f38275,f39033,f39037,f39040,f38840,f39050,f39065,f39072,f38398,f39094,f39096,f39102,f38407,f39105,f39107,f38411,f38420,f39115,f39127,f39160,f39162])).
fof(f39173,plain,(
  ( ! [X0,X1] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0))) | s(bool,X0) = s(bool,X1)) ) | ($spl0 | $spl14 | $spl20 | $spl152)),
  inference(condensation,[],[f39172])).
fof(f39172,plain,(
  ( ! [X66,X67,X65] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X67))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X66))) | s(bool,X65) = s(bool,X67)) ) | ($spl0 | $spl14 | $spl20 | $spl152)),
  inference(subsumption_resolution,[],[f38490,f28798])).
fof(f38490,plain,(
  ( ! [X66,X67,X65] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X67))) | s(bool,X66) = s(bool,sK6('const.option.SOME_1'(s(bool,X65)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X66))) | s(bool,X65) = s(bool,X67)) ) | ($spl0 | $spl14 | $spl152)),
  inference(backward_demodulation,[],[f37880,f26496])).
fof(f26496,plain,(
  ( ! [X66,X67,X65] : (s(bool,X66) = s(bool,sK6('const.option.SOME_1'(s(bool,X65)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X66))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X67))) | s(bool,X65) = s(bool,X67)) ) | ($spl0 | $spl14)),
  inference(superposition,[],[f5639,f3902])).
fof(f39163,plain,(
  $false | ($spl0 | $spl152)),
  inference(global_subsumption,[],[f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023,f38275,f39033,f39037,f39040,f38840,f39050,f39065,f39072,f38398,f39094,f39096,f39102,f38407,f39105,f39107,f38411,f38420,f39115,f39127,f39160,f39162])).
fof(f39161,plain,(
  $false | ($spl0 | $spl152)),
  inference(global_subsumption,[],[f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023,f38275,f39033,f39037,f39040,f38840,f39050,f39065,f39072,f38398,f39094,f39096,f39102,f38407,f39105,f39107,f38411,f38420,f39115,f39127,f39160])).
fof(f39128,plain,(
  $false | ($spl0 | $spl152)),
  inference(global_subsumption,[],[f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023,f38275,f39033,f39037,f39040,f38840,f39050,f39065,f39072,f38398,f39094,f39096,f39102,f38407,f39105,f39107,f38411,f38420,f39115,f39127])).
fof(f39118,plain,(
  $false | ($spl0 | $spl14 | $spl20 | $spl152)),
  inference(global_subsumption,[],[f39117,f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023,f38275,f39033,f39037,f39040,f38840,f39050,f39065,f39072,f38398,f39094,f39096,f39102,f38407,f39105,f39107,f38411,f38420,f39115])).
fof(f39117,plain,(
  ( ! [X569,X571,X568,X570] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X569))) | s(bool,X568) = s(bool,'const.bool.IN_2'(s(X570,X571),s(fun(X570,bool),'const.pred_set.EMPTY_0')))) ) | ($spl0 | $spl14 | $spl20 | $spl152)),
  inference(subsumption_resolution,[],[f38430,f23314])).
fof(f23314,plain,(
  ( ! [X596,X594,X593,X595] : (s(bool,X594) != s(bool,sK6('const.option.SOME_1'(s(bool,X593)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X594))) | s(bool,X593) = s(bool,'const.bool.IN_2'(s(X595,X596),s(fun(X595,bool),'const.pred_set.EMPTY_0')))) ) | ($spl0 | $spl14 | $spl20)),
  inference(subsumption_resolution,[],[f21975,f180])).
fof(f21975,plain,(
  ( ! [X596,X594,X593,X595] : (s(bool,X594) != s(bool,sK6('const.option.SOME_1'(s(bool,X593)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X594))) | s(bool,X593) = s(bool,'const.bool.IN_2'(s(X595,X596),s(fun(X595,bool),'const.pred_set.EMPTY_0'))) | s(bool,'T_0') = s(bool,'F_0')) ) | ($spl0 | $spl14 | $spl20)),
  inference(superposition,[],[f16487,f2976])).
fof(f38430,plain,(
  ( ! [X569,X571,X568,X570] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X569))) | s(bool,X569) = s(bool,sK6('const.option.SOME_1'(s(bool,X568)),bool)) | s(bool,X568) = s(bool,'const.bool.IN_2'(s(X570,X571),s(fun(X570,bool),'const.pred_set.EMPTY_0')))) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f23306])).
fof(f39116,plain,(
  $false | ($spl0 | $spl152)),
  inference(global_subsumption,[],[f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023,f38275,f39033,f39037,f39040,f38840,f39050,f39065,f39072,f38398,f39094,f39096,f39102,f38407,f39105,f39107,f38411,f38420,f39115])).
fof(f39114,plain,(
  $false | ($spl0 | $spl14 | $spl62 | $spl152)),
  inference(global_subsumption,[],[f39113,f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023,f38275,f39033,f39037,f39040,f38840,f39050,f39065,f39072,f38398,f39094,f39096,f39102,f38407,f39105,f39107,f38411,f38420])).
fof(f39113,plain,(
  ( ! [X1] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1)))) ) | ($spl0 | $spl14 | $spl62 | $spl152)),
  inference(subsumption_resolution,[],[f38421,f16746])).
fof(f38421,plain,(
  ( ! [X2,X3,X1] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1))) | s(bool,X1) != s(bool,'const.bool.IN_2'(s(X2,X3),s(fun(X2,bool),'const.pred_set.EMPTY_0')))) ) | ($spl0 | $spl62 | $spl152)),
  inference(backward_demodulation,[],[f37880,f22833])).
fof(f39112,plain,(
  $false | ($spl0 | $spl152)),
  inference(global_subsumption,[],[f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023,f38275,f39033,f39037,f39040,f38840,f39050,f39065,f39072,f38398,f39094,f39096,f39102,f38407,f39105,f39107,f38411,f38420])).
fof(f39111,plain,(
  $false | ($spl0 | $spl14 | $spl20 | $spl152)),
  inference(global_subsumption,[],[f39110,f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023,f38275,f39033,f39037,f39040,f38840,f39050,f39065,f39072,f38398,f39094,f39096,f39102,f38407,f39105,f39107,f38411])).
fof(f39110,plain,(
  ( ! [X255,X257,X256,X258] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X255))) | s(bool,X256) = s(bool,'const.bool.IN_2'(s(X257,X258),s(fun(X257,bool),'const.pred_set.EMPTY_0')))) ) | ($spl0 | $spl14 | $spl20 | $spl152)),
  inference(subsumption_resolution,[],[f38416,f23339])).
fof(f23339,plain,(
  ( ! [X883,X881,X882,X880] : (s(bool,X880) != s(bool,X881) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X881))) | s(bool,X880) = s(bool,'const.bool.IN_2'(s(X882,X883),s(fun(X882,bool),'const.pred_set.EMPTY_0')))) ) | ($spl0 | $spl14 | $spl20)),
  inference(subsumption_resolution,[],[f23338,f180])).
fof(f23338,plain,(
  ( ! [X883,X881,X882,X880] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X880) != s(bool,X881) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X881))) | s(bool,X880) = s(bool,'const.bool.IN_2'(s(X882,X883),s(fun(X882,bool),'const.pred_set.EMPTY_0')))) ) | ($spl0 | $spl14 | $spl20)),
  inference(forward_demodulation,[],[f22039,f901])).
fof(f22039,plain,(
  ( ! [X883,X881,X882,X880] : (s(bool,X880) != s(bool,X881) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X881))) | s(bool,X880) = s(bool,'const.bool.IN_2'(s(X882,X883),s(fun(X882,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl14 | $spl20)),
  inference(superposition,[],[f16487,f2976])).
fof(f38416,plain,(
  ( ! [X255,X257,X256,X258] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X255))) | s(bool,X255) = s(bool,X256) | s(bool,X256) = s(bool,'const.bool.IN_2'(s(X257,X258),s(fun(X257,bool),'const.pred_set.EMPTY_0')))) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f22796])).
fof(f39109,plain,(
  $false | ($spl0 | $spl152)),
  inference(global_subsumption,[],[f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023,f38275,f39033,f39037,f39040,f38840,f39050,f39065,f39072,f38398,f39094,f39096,f39102,f38407,f39105,f39107,f38411])).
fof(f39108,plain,(
  $false | ($spl0 | $spl152)),
  inference(global_subsumption,[],[f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023,f38275,f39033,f39037,f39040,f38840,f39050,f39065,f39072,f38398,f39094,f39096,f39102,f38407,f39105,f39107])).
fof(f39106,plain,(
  $false | ($spl0 | $spl152)),
  inference(global_subsumption,[],[f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023,f38275,f39033,f39037,f39040,f38840,f39050,f39065,f39072,f38398,f39094,f39096,f39102,f38407,f39105])).
fof(f39104,plain,(
  $false | ($spl0 | $spl152)),
  inference(global_subsumption,[],[f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023,f38275,f39033,f39037,f39040,f38840,f39050,f39065,f39072,f38398,f39094,f39096,f39102,f38407])).
fof(f39103,plain,(
  $false | ($spl0 | $spl152)),
  inference(global_subsumption,[],[f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023,f38275,f39033,f39037,f39040,f38840,f39050,f39065,f39072,f38398,f39094,f39096,f39102])).
fof(f39101,plain,(
  $false | ($spl0 | $spl14 | $spl152)),
  inference(global_subsumption,[],[f39100,f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023,f38275,f39033,f39037,f39040,f38840,f39050,f39065,f39072,f38398,f39094,f39096])).
fof(f39100,plain,(
  ( ! [X4,X5,X3] : (s(bool,X5) = s(bool,'const.bool.IN_2'(s(X3,X4),s(fun(X3,bool),'const.pred_set.EMPTY_0')))) ) | ($spl0 | $spl14 | $spl152)),
  inference(duplicate_literal_removal,[],[f39099])).
fof(f39099,plain,(
  ( ! [X4,X5,X3] : (s(bool,X5) = s(bool,'const.bool.IN_2'(s(X3,X4),s(fun(X3,bool),'const.pred_set.EMPTY_0'))) | s(bool,X5) = s(bool,'const.bool.IN_2'(s(X3,X4),s(fun(X3,bool),'const.pred_set.EMPTY_0')))) ) | ($spl0 | $spl14 | $spl152)),
  inference(condensation,[],[f39098])).
fof(f39098,plain,(
  ( ! [X741,X743,X739,X740,X742] : (s(bool,X739) = s(bool,X740) | s(bool,X741) = s(bool,'const.bool.IN_2'(s(X742,X743),s(fun(X742,bool),'const.pred_set.EMPTY_0'))) | s(bool,X739) = s(bool,X741)) ) | ($spl0 | $spl14 | $spl152)),
  inference(subsumption_resolution,[],[f38405,f23402])).
fof(f38405,plain,(
  ( ! [X741,X743,X739,X740,X742] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X740))) | s(bool,X739) = s(bool,X740) | s(bool,X741) = s(bool,'const.bool.IN_2'(s(X742,X743),s(fun(X742,bool),'const.pred_set.EMPTY_0'))) | s(bool,X739) = s(bool,X741)) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f22352])).
fof(f39097,plain,(
  $false | ($spl0 | $spl152)),
  inference(global_subsumption,[],[f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023,f38275,f39033,f39037,f39040,f38840,f39050,f39065,f39072,f38398,f39094,f39096])).
fof(f39095,plain,(
  $false | ($spl0 | $spl152)),
  inference(global_subsumption,[],[f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023,f38275,f39033,f39037,f39040,f38840,f39050,f39065,f39072,f38398,f39094])).
fof(f39093,plain,(
  $false | ($spl0 | $spl14 | $spl152)),
  inference(global_subsumption,[],[f39092,f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023,f38275,f39033,f39037,f39040,f38840,f39050,f39065,f39072,f38398])).
fof(f39092,plain,(
  ( ! [X4,X2,X5,X3] : (s(bool,X2) = s(bool,'const.bool.IN_2'(s(X3,X4),s(fun(X3,bool),'const.pred_set.EMPTY_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X5)))) ) | ($spl0 | $spl14 | $spl152)),
  inference(condensation,[],[f39091])).
fof(f39091,plain,(
  ( ! [X528,X530,X526,X529,X527] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X527))) | s(bool,X528) = s(bool,'const.bool.IN_2'(s(X529,X530),s(fun(X529,bool),'const.pred_set.EMPTY_0'))) | s(bool,X526) = s(bool,X528)) ) | ($spl0 | $spl14 | $spl152)),
  inference(subsumption_resolution,[],[f38399,f23402])).
fof(f38399,plain,(
  ( ! [X528,X530,X526,X529,X527] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X527))) | s(bool,X526) != s(bool,X527) | s(bool,X528) = s(bool,'const.bool.IN_2'(s(X529,X530),s(fun(X529,bool),'const.pred_set.EMPTY_0'))) | s(bool,X526) = s(bool,X528)) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f22181])).
fof(f39090,plain,(
  $false | ($spl0 | $spl152)),
  inference(global_subsumption,[],[f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023,f38275,f39033,f39037,f39040,f38840,f39050,f39065,f39072,f38398])).
fof(f39089,plain,(
  $false | ($spl0 | $spl14 | $spl36 | $spl152)),
  inference(global_subsumption,[],[f39088,f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023,f38275,f39033,f39037,f39040,f38840,f39050,f39065,f39072])).
fof(f39088,plain,(
  ( ! [X4,X2,X5,X3] : (s(bool,X2) = s(bool,'const.bool.IN_2'(s(X3,X4),s(fun(X3,bool),'const.pred_set.EMPTY_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X5)))) ) | ($spl0 | $spl14 | $spl36 | $spl152)),
  inference(condensation,[],[f39087])).
fof(f39087,plain,(
  ( ! [X132,X130,X128,X131,X129] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X129))) | s(bool,X130) = s(bool,'const.bool.IN_2'(s(X131,X132),s(fun(X131,bool),'const.pred_set.EMPTY_0'))) | s(bool,X128) = s(bool,X130)) ) | ($spl0 | $spl14 | $spl36 | $spl152)),
  inference(subsumption_resolution,[],[f38397,f22086])).
fof(f22086,plain,(
  ( ! [X92,X90,X93,X91,X89] : (s(bool,X90) = s(bool,sK6('const.option.SOME_1'(s(bool,X89)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X90))) | s(bool,X91) = s(bool,'const.bool.IN_2'(s(X92,X93),s(fun(X92,bool),'const.pred_set.EMPTY_0'))) | s(bool,X89) = s(bool,X91)) ) | ($spl0 | $spl14)),
  inference(superposition,[],[f5639,f2976])).
fof(f38397,plain,(
  ( ! [X132,X130,X128,X131,X129] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X129))) | s(bool,X129) != s(bool,sK6('const.option.SOME_1'(s(bool,X128)),bool)) | s(bool,X130) = s(bool,'const.bool.IN_2'(s(X131,X132),s(fun(X131,bool),'const.pred_set.EMPTY_0'))) | s(bool,X128) = s(bool,X130)) ) | ($spl0 | $spl36 | $spl152)),
  inference(backward_demodulation,[],[f37880,f22093])).
fof(f22093,plain,(
  ( ! [X132,X130,X128,X131,X129] : (s(bool,X129) != s(bool,sK6('const.option.SOME_1'(s(bool,X128)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X129))) | s(bool,X130) = s(bool,'const.bool.IN_2'(s(X131,X132),s(fun(X131,bool),'const.pred_set.EMPTY_0'))) | s(bool,X128) = s(bool,X130)) ) | ($spl0 | $spl36)),
  inference(superposition,[],[f14809,f2976])).
fof(f39086,plain,(
  $false | ($spl0 | $spl14 | $spl56 | $spl152)),
  inference(global_subsumption,[],[f39085,f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023,f38275,f39033,f39037,f39040,f38840,f39050,f39065,f39072])).
fof(f39085,plain,(
  ( ! [X66,X67] : (s(bool,X66) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X67)))) ) | ($spl0 | $spl14 | $spl56 | $spl152)),
  inference(subsumption_resolution,[],[f38365,f16299])).
fof(f16299,plain,(
  ( ! [X30,X31] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X30))) | s(bool,X31) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X30) = s(bool,X31)) ) | ($spl0 | $spl14)),
  inference(subsumption_resolution,[],[f15850,f4454])).
fof(f15850,plain,(
  ( ! [X30,X31] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X30))) | s(bool,X31) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X30) = s(bool,X31)) ) | ($spl0 | $spl14)),
  inference(superposition,[],[f5639,f9397])).
fof(f38365,plain,(
  ( ! [X66,X67] : (s(bool,X66) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X66) != s(bool,X67) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X67)))) ) | ($spl0 | $spl56 | $spl152)),
  inference(backward_demodulation,[],[f37880,f20723])).
fof(f39084,plain,(
  $false | ($spl0 | $spl14 | $spl20 | $spl152)),
  inference(global_subsumption,[],[f39083,f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023,f38275,f39033,f39037,f39040,f38840,f39050,f39065,f39072])).
fof(f39083,plain,(
  ( ! [X33,X34] : (s(bool,X33) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X34)))) ) | ($spl0 | $spl14 | $spl20 | $spl152)),
  inference(subsumption_resolution,[],[f38359,f16317])).
fof(f16317,plain,(
  ( ! [X41,X42] : (s(bool,X42) = s(bool,sK6('const.option.SOME_1'(s(bool,X41)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X42))) | s(bool,X41) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl14)),
  inference(subsumption_resolution,[],[f15892,f180])).
fof(f15892,plain,(
  ( ! [X41,X42] : (s(bool,X42) = s(bool,sK6('const.option.SOME_1'(s(bool,X41)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X42))) | s(bool,X41) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,'F_0')) ) | ($spl0 | $spl14)),
  inference(superposition,[],[f5639,f9397])).
fof(f38359,plain,(
  ( ! [X33,X34] : (s(bool,X33) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X34) != s(bool,sK6('const.option.SOME_1'(s(bool,X33)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X34)))) ) | ($spl0 | $spl14 | $spl20 | $spl152)),
  inference(backward_demodulation,[],[f37880,f19707])).
fof(f19707,plain,(
  ( ! [X33,X34] : (s(bool,X34) != s(bool,sK6('const.option.SOME_1'(s(bool,X33)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X34))) | s(bool,X33) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl14 | $spl20)),
  inference(subsumption_resolution,[],[f19612,f180])).
fof(f19612,plain,(
  ( ! [X33,X34] : (s(bool,X34) != s(bool,sK6('const.option.SOME_1'(s(bool,X33)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X34))) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X33) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl14 | $spl20)),
  inference(superposition,[],[f16487,f9766])).
fof(f39082,plain,(
  $false | ($spl0 | $spl14 | $spl152)),
  inference(global_subsumption,[],[f39081,f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023,f38275,f39033,f39037,f39040,f38840,f39050,f39065,f39072])).
fof(f39081,plain,(
  ( ! [X0] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0)))) ) | ($spl0 | $spl14 | $spl152)),
  inference(condensation,[],[f39080])).
fof(f39080,plain,(
  ( ! [X198,X199] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X198))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X199))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X198)))) ) | ($spl0 | $spl14 | $spl152)),
  inference(subsumption_resolution,[],[f38357,f16368])).
fof(f16368,plain,(
  ( ! [X37,X36] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X36))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X37))) | s(bool,'T_0') = s(bool,X37) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X36)))) ) | $spl14),
  inference(subsumption_resolution,[],[f16003,f901])).
fof(f16003,plain,(
  ( ! [X37,X36] : (s(bool,'F_0') != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X36))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X37))) | s(bool,'T_0') = s(bool,X37) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X36)))) ) | $spl14),
  inference(superposition,[],[f404,f5639])).
fof(f38357,plain,(
  ( ! [X198,X199] : (s(bool,'T_0') != s(bool,X199) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X198))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X199))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X198)))) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f18697])).
fof(f39078,plain,(
  $false | ($spl0 | $spl14 | $spl152)),
  inference(global_subsumption,[],[f39077,f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023,f38275,f39033,f39037,f39040,f38840,f39050,f39065,f39072])).
fof(f39077,plain,(
  ( ! [X194,X195] : (s(bool,X195) = s(bool,sK6('const.option.SOME_1'(s(bool,X194)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X194)))) ) | ($spl0 | $spl14 | $spl152)),
  inference(subsumption_resolution,[],[f38354,f18692])).
fof(f38354,plain,(
  ( ! [X194,X195] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X195))) | s(bool,X195) = s(bool,sK6('const.option.SOME_1'(s(bool,X194)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X194)))) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f18552])).
fof(f39073,plain,(
  $false | ($spl0 | $spl152)),
  inference(global_subsumption,[],[f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023,f38275,f39033,f39037,f39040,f38840,f39050,f39065,f39072])).
fof(f39071,plain,(
  $false | ($spl0 | $spl14 | $spl152)),
  inference(global_subsumption,[],[f39070,f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023,f38275,f39033,f39037,f39040,f38840,f39050,f39065])).
fof(f39070,plain,(
  ( ! [X59,X60] : (s(bool,X59) = s(bool,sK6(X60,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X60) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X59)))) ) | ($spl0 | $spl14 | $spl152)),
  inference(subsumption_resolution,[],[f38338,f29146])).
fof(f38338,plain,(
  ( ! [X59,X60] : (s('type.option.option'(bool),X60) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,X59) = s(bool,sK6(X60,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X60) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X59)))) ) | ($spl0 | $spl14 | $spl152)),
  inference(backward_demodulation,[],[f37880,f18130])).
fof(f18130,plain,(
  ( ! [X59,X60] : (s('type.option.option'(bool),X60) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,X59) = s(bool,sK6(X60,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X60) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X59)))) ) | $spl14),
  inference(forward_demodulation,[],[f18065,f901])).
fof(f18065,plain,(
  ( ! [X59,X60] : (s('type.option.option'(bool),X60) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)))) | s(bool,X59) = s(bool,sK6(X60,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X60) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X59)))) ) | $spl14),
  inference(superposition,[],[f459,f5639])).
fof(f39068,plain,(
  $false | ($spl0 | $spl14 | $spl152)),
  inference(global_subsumption,[],[f39067,f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023,f38275,f39033,f39037,f39040,f38840,f39050,f39065])).
fof(f39067,plain,(
  ( ! [X2,X3] : (s(bool,X2) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X2) = s(bool,sK6(X3,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X3)) ) | ($spl0 | $spl14 | $spl152)),
  inference(subsumption_resolution,[],[f38333,f13551])).
fof(f38333,plain,(
  ( ! [X2,X3] : (s(bool,X2) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),X3) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,X2) = s(bool,sK6(X3,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X3)) ) | ($spl0 | $spl14 | $spl152)),
  inference(backward_demodulation,[],[f37880,f18110])).
fof(f18110,plain,(
  ( ! [X2,X3] : (s('type.option.option'(bool),X3) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,X2) = s(bool,sK6(X3,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X3) | s(bool,X2) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | $spl14),
  inference(superposition,[],[f459,f5639])).
fof(f39066,plain,(
  $false | ($spl0 | $spl152)),
  inference(global_subsumption,[],[f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023,f38275,f39033,f39037,f39040,f38840,f39050,f39065])).
fof(f39051,plain,(
  $false | ($spl0 | $spl152)),
  inference(global_subsumption,[],[f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023,f38275,f39033,f39037,f39040,f38840,f39050])).
fof(f39044,plain,(
  $false | ($spl0 | $spl152)),
  inference(global_subsumption,[],[f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023,f38275,f39033,f39037,f39040,f38840])).
fof(f39041,plain,(
  $false | ($spl0 | $spl152)),
  inference(global_subsumption,[],[f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023,f38275,f39033,f39037,f39040])).
fof(f39038,plain,(
  $false | ($spl0 | $spl152)),
  inference(global_subsumption,[],[f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023,f38275,f39033,f39037])).
fof(f39034,plain,(
  $false | ($spl0 | $spl152)),
  inference(global_subsumption,[],[f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023,f38275,f39033])).
fof(f39029,plain,(
  $false | ($spl0 | $spl152)),
  inference(global_subsumption,[],[f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023,f38275])).
fof(f39027,plain,(
  $false | ($spl0 | $spl14 | $spl152)),
  inference(global_subsumption,[],[f39026,f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023])).
fof(f39026,plain,(
  ( ! [X25] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X25)))) ) | ($spl0 | $spl14 | $spl152)),
  inference(subsumption_resolution,[],[f38272,f16356])).
fof(f16356,plain,(
  ( ! [X3] : (~p(s(bool,X3)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X3)))) ) | $spl14),
  inference(subsumption_resolution,[],[f15986,f901])).
fof(f15986,plain,(
  ( ! [X3] : (s(bool,'F_0') != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | ~p(s(bool,X3)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X3)))) ) | $spl14),
  inference(superposition,[],[f127,f5639])).
fof(f38272,plain,(
  ( ! [X25] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X25))) | p(s(bool,X25))) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f17462])).
fof(f39024,plain,(
  $false | ($spl0 | $spl152)),
  inference(global_subsumption,[],[f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018,f39023])).
fof(f39021,plain,(
  $false | ($spl0 | $spl14 | $spl152)),
  inference(global_subsumption,[],[f39020,f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018])).
fof(f39020,plain,(
  ( ! [X215,X214] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X214))) | s(bool,X214) = s(bool,X215)) ) | ($spl0 | $spl14 | $spl152)),
  inference(subsumption_resolution,[],[f38266,f15896])).
fof(f15896,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0)))) ) | $spl14),
  inference(superposition,[],[f5639,f5639])).
fof(f38266,plain,(
  ( ! [X215,X214] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X214))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X215))) | s(bool,X214) = s(bool,X215)) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f17443])).
fof(f39019,plain,(
  $false | ($spl0 | $spl152)),
  inference(global_subsumption,[],[f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016,f39018])).
fof(f39017,plain,(
  $false | ($spl0 | $spl152)),
  inference(global_subsumption,[],[f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007,f39016])).
fof(f39015,plain,(
  $false | ($spl0 | $spl14 | $spl152)),
  inference(global_subsumption,[],[f39014,f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007])).
fof(f39014,plain,(
  ( ! [X81,X82] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X81))) | s(bool,X81) = s(bool,X82)) ) | ($spl0 | $spl14 | $spl152)),
  inference(subsumption_resolution,[],[f38263,f15898])).
fof(f15898,plain,(
  ( ! [X6,X5] : (s(bool,X5) = s(bool,X6) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X6))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X5)),bool))) ) | $spl14),
  inference(superposition,[],[f5639,f4840])).
fof(f38263,plain,(
  ( ! [X81,X82] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X81))) | s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,X82)),bool)) | s(bool,X81) = s(bool,X82)) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f17369])).
fof(f39012,plain,(
  $false | ($spl0 | $spl14 | $spl152)),
  inference(global_subsumption,[],[f39011,f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007])).
fof(f39011,plain,(
  ( ! [X10,X9] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X9))) | s(bool,X9) = s(bool,X10)) ) | ($spl0 | $spl14 | $spl152)),
  inference(subsumption_resolution,[],[f38261,f16358])).
fof(f38261,plain,(
  ( ! [X10,X9] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X9))) | ~p(s(bool,X10)) | s(bool,X9) = s(bool,X10)) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f17344])).
fof(f39008,plain,(
  $false | ($spl0 | $spl152)),
  inference(global_subsumption,[],[f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005,f39007])).
fof(f39006,plain,(
  $false | ($spl0 | $spl152)),
  inference(global_subsumption,[],[f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901,f39005])).
fof(f39003,plain,(
  $false | ($spl0 | $spl14 | $spl152)),
  inference(global_subsumption,[],[f39002,f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901])).
fof(f39002,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl14 | $spl152)),
  inference(condensation,[],[f39001])).
fof(f39001,plain,(
  ( ! [X14,X15] : (s(bool,X14) = s(bool,X15) | s(bool,X14) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl14 | $spl152)),
  inference(subsumption_resolution,[],[f38245,f16299])).
fof(f38245,plain,(
  ( ! [X14,X15] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X15))) | s(bool,X14) = s(bool,X15) | s(bool,X14) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f16944])).
fof(f38996,plain,(
  $false | ($spl0 | $spl14 | $spl20 | $spl152)),
  inference(global_subsumption,[],[f38995,f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901])).
fof(f38995,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1)))) ) | ($spl0 | $spl14 | $spl20 | $spl152)),
  inference(condensation,[],[f38994])).
fof(f38994,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1))) | s(bool,X2) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X0) = s(bool,X2)) ) | ($spl0 | $spl14 | $spl20 | $spl152)),
  inference(subsumption_resolution,[],[f38241,f19597])).
fof(f19597,plain,(
  ( ! [X2,X0,X1] : (s(bool,X1) != s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1))) | s(bool,X2) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X0) = s(bool,X2)) ) | ($spl0 | $spl14 | $spl20)),
  inference(superposition,[],[f16487,f9397])).
fof(f38241,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1))) | s(bool,X1) = s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool)) | s(bool,X2) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X0) = s(bool,X2)) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f16862])).
fof(f38993,plain,(
  $false | ($spl0 | $spl14 | $spl152)),
  inference(global_subsumption,[],[f38992,f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901])).
fof(f38992,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1)))) ) | ($spl0 | $spl14 | $spl152)),
  inference(condensation,[],[f38991])).
fof(f38991,plain,(
  ( ! [X68,X66,X67] : (s(bool,X68) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X67))) | s(bool,X66) = s(bool,X68)) ) | ($spl0 | $spl14 | $spl152)),
  inference(subsumption_resolution,[],[f38238,f13394])).
fof(f38238,plain,(
  ( ! [X68,X66,X67] : (s(bool,X68) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X66) = s(bool,X67) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X67))) | s(bool,X66) = s(bool,X68)) ) | ($spl0 | $spl14 | $spl152)),
  inference(backward_demodulation,[],[f37880,f16736])).
fof(f16736,plain,(
  ( ! [X68,X66,X67] : (s(bool,X66) = s(bool,X67) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X67))) | s(bool,X66) = s(bool,X68) | s(bool,X68) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl14)),
  inference(subsumption_resolution,[],[f16690,f179])).
fof(f16690,plain,(
  ( ! [X68,X66,X67] : (p(s(bool,'F_0')) | s(bool,X66) = s(bool,X67) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X67))) | s(bool,X66) = s(bool,X68) | s(bool,X68) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl14)),
  inference(superposition,[],[f16358,f9766])).
fof(f38990,plain,(
  $false | ($spl0 | $spl14 | $spl152)),
  inference(global_subsumption,[],[f38232,f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901])).
fof(f38232,plain,(
  ( ! [X151,X149,X150,X148] : (s(bool,X149) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X150),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X150,bool),X151))) | s(bool,X148) != s(bool,X149) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X148)))) ) | ($spl0 | $spl14 | $spl152)),
  inference(backward_demodulation,[],[f37880,f16490])).
fof(f16490,plain,(
  ( ! [X151,X149,X150,X148] : (s(bool,X149) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X150),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X150,bool),X151))) | s(bool,X148) != s(bool,X149) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X148)))) ) | ($spl0 | $spl14)),
  inference(forward_demodulation,[],[f16199,f901])).
fof(f16199,plain,(
  ( ! [X151,X149,X150,X148] : (s(bool,X148) != s(bool,X149) | s(bool,X149) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X150),'const.option.NONE_0'),s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)),s(fun(X150,bool),X151))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X148)))) ) | ($spl0 | $spl14)),
  inference(superposition,[],[f9763,f5639])).
fof(f38989,plain,(
  $false | ($spl0 | $spl14 | $spl152)),
  inference(global_subsumption,[],[f38988,f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901])).
fof(f38988,plain,(
  ( ! [X111,X110] : (s(bool,X111) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X110)))) ) | ($spl0 | $spl14 | $spl152)),
  inference(subsumption_resolution,[],[f38230,f18638])).
fof(f38230,plain,(
  ( ! [X111,X110] : (s(bool,X111) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X111) != s(bool,sK6('const.option.SOME_1'(s(bool,X110)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X110)))) ) | ($spl0 | $spl14 | $spl152)),
  inference(backward_demodulation,[],[f37880,f16475])).
fof(f16475,plain,(
  ( ! [X111,X110] : (s(bool,X111) != s(bool,sK6('const.option.SOME_1'(s(bool,X110)),bool)) | s(bool,X111) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X110)))) ) | ($spl0 | $spl14)),
  inference(subsumption_resolution,[],[f16175,f12066])).
fof(f12066,plain,(
  ( ! [X116] : (s(bool,'F_0') != s(bool,X116) | s(bool,X116) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl14)),
  inference(global_subsumption,[],[f12065,f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f782,f828,f901,f914,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1188,f1191,f1256,f1265,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1783,f3994,f3951,f3948,f3019,f3018,f3015,f2847,f2846,f2843,f2821,f2820,f2817,f2616,f2583,f2542,f1615,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4512,f4840,f4901,f4948,f5259,f5269,f5543,f5584,f5364,f5417,f5637,f5639,f5465,f5640,f5650,f5599,f5596,f469,f736,f446,f440,f2622,f1300,f1071,f5231,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f615,f593,f876,f855,f607,f862,f3949,f3016,f2844,f2818,f2543,f1580,f1123,f1093,f1062,f1018,f1005,f989,f572,f535,f534,f447,f434,f161,f160,f159,f3950,f3017,f2845,f2819,f2544,f1124,f1094,f1063,f864,f863,f840,f826,f5589,f1309,f1184,f770])).
fof(f5589,plain,(
  ( ! [X94,X92,X93] : (s(bool,'F_0') != s(bool,f(s(X92,sK8(X93,X94,bool,X92)))) | s(fun(X92,bool),X93) = s(fun(X92,bool),X94) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,g(s(X92,sK8(X93,X94,bool,X92))))),bool))) ) | $spl14),
  inference(forward_demodulation,[],[f5375,f901])).
fof(f5375,plain,(
  ( ! [X94,X92,X93] : (s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) != s(bool,f(s(X92,sK8(X93,X94,bool,X92)))) | s(fun(X92,bool),X93) = s(fun(X92,bool),X94) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,g(s(X92,sK8(X93,X94,bool,X92))))),bool))) ) | $spl14),
  inference(superposition,[],[f167,f4840])).
fof(f5231,plain,(
  ( ! [X66,X65] : (s(bool,'F_0') = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'F_0')),bool),X66,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X66),s(bool,X65)))) | s(bool,'T_0') = s(bool,X65)) ) | $spl14),
  inference(forward_demodulation,[],[f5211,f901])).
fof(f5211,plain,(
  ( ! [X66,X65] : (~p(s(bool,happ(s(fun(bool,bool),X66),s(bool,X65)))) | s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) = s(bool,sK7(sK6('const.option.SOME_1'(s(bool,'F_0')),bool),X66,bool)) | s(bool,'T_0') = s(bool,X65)) ) | $spl14),
  inference(superposition,[],[f160,f4512])).
fof(f5596,plain,(
  ( ! [X106] : (s('type.option.option'(bool),X106) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X106) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,sK6(X106,bool))),bool))) ) | $spl14),
  inference(forward_demodulation,[],[f5379,f901])).
fof(f5379,plain,(
  ( ! [X106] : (s('type.option.option'(bool),X106) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X106) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,sK6(X106,bool))),bool))) ) | $spl14),
  inference(superposition,[],[f148,f4840])).
fof(f5599,plain,(
  ( ! [X109,X110,X108] : (s(X110,f(s(bool,'F_0'))) != s(X110,g(s(bool,'F_0'))) | s(fun(bool,X110),X108) = s(fun(bool,X110),X109) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,sK8(X108,X109,X110,bool))),bool))) ) | $spl14),
  inference(forward_demodulation,[],[f5381,f901])).
fof(f5381,plain,(
  ( ! [X109,X110,X108] : (s(X110,f(s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)))) != s(X110,g(s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)))) | s(fun(bool,X110),X108) = s(fun(bool,X110),X109) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,sK8(X108,X109,X110,bool))),bool))) ) | $spl14),
  inference(superposition,[],[f167,f4840])).
fof(f5650,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) != s(bool,X1) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X1)),bool)) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl14),
  inference(superposition,[],[f5543,f208])).
fof(f5640,plain,(
  ( ! [X54,X55] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X54))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X55))) | s(bool,'T_0') != s(bool,X55) | s(bool,X54) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | $spl14),
  inference(forward_demodulation,[],[f5467,f901])).
fof(f5467,plain,(
  ( ! [X54,X55] : (s(bool,'T_0') != s(bool,X55) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X55))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,X54)),bool)))) | s(bool,X54) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | $spl14),
  inference(superposition,[],[f158,f4840])).
fof(f5465,plain,(
  ( ! [X50,X51] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X51))) | s(bool,X51) = s(bool,sK6('const.option.SOME_1'(s(bool,X50)),bool)) | s(bool,X50) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | $spl14),
  inference(superposition,[],[f157,f4840])).
fof(f5637,plain,(
  ( ! [X23,X22] : (s(bool,X23) != s(bool,sK6('const.option.SOME_1'(s(bool,X22)),bool)) | s(bool,'T_0') = s(bool,X23) | s(bool,X22) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | $spl14),
  inference(subsumption_resolution,[],[f5446,f114])).
fof(f5446,plain,(
  ( ! [X23,X22] : (~p(s(bool,'T_0')) | s(bool,X23) != s(bool,sK6('const.option.SOME_1'(s(bool,X22)),bool)) | s(bool,'T_0') = s(bool,X23) | s(bool,X22) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | $spl14),
  inference(superposition,[],[f211,f4840])).
fof(f5417,plain,(
  ( ! [X57,X56] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X56))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X57))) | s(bool,X57) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X56)),bool))) ) | $spl14),
  inference(superposition,[],[f157,f4840])).
fof(f5364,plain,(
  ( ! [X64,X63] : (s(bool,X64) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X63))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X64))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X63)),bool))) ) | $spl14),
  inference(superposition,[],[f158,f4840])).
fof(f5584,plain,(
  ( ! [X59,X60] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X60))) | s(bool,X59) = s(bool,X60) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X59)),bool))) ) | $spl14),
  inference(forward_demodulation,[],[f5362,f901])).
fof(f5362,plain,(
  ( ! [X59,X60] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X60))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)))) | s(bool,X59) = s(bool,X60) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X59)),bool))) ) | $spl14),
  inference(superposition,[],[f157,f4840])).
fof(f5543,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,X1) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X1)),bool))) ) | $spl14),
  inference(subsumption_resolution,[],[f5542,f179])).
fof(f5542,plain,(
  ( ! [X1] : (p(s(bool,'F_0')) | s(bool,'T_0') != s(bool,X1) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X1)),bool))) ) | $spl14),
  inference(forward_demodulation,[],[f5324,f901])).
fof(f5324,plain,(
  ( ! [X1] : (p(s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) | s(bool,'T_0') != s(bool,X1) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X1)),bool))) ) | $spl14),
  inference(superposition,[],[f123,f4840])).
fof(f5269,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X1)),bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool))) ) | $spl14),
  inference(superposition,[],[f4840,f4840])).
fof(f5259,plain,(
  ( ! [X6,X7] : (s(bool,X7) = s(bool,sK6('const.option.SOME_1'(s(bool,X6)),bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X7)),bool)) | s(bool,'T_0') = s(bool,X6)) ) | $spl14),
  inference(superposition,[],[f4840,f121])).
fof(f4948,plain,(
  ( ! [X48,X49] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X48))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X49))) | s(bool,X49) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,X48)) ) | $spl14),
  inference(superposition,[],[f157,f4512])).
fof(f4901,plain,(
  ( ! [X54,X55] : (s(bool,X55) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X54))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X55))) | s(bool,'T_0') = s(bool,X54)) ) | $spl14),
  inference(superposition,[],[f158,f4512])).
fof(f12065,plain,(
  ( ! [X116,X115] : (s(bool,'F_0') != s(bool,X116) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X115)),bool)) | s(bool,X116) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl14)),
  inference(subsumption_resolution,[],[f11125,f3910])).
fof(f11125,plain,(
  ( ! [X116,X115] : (s(bool,'F_0') != s(bool,X116) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X115)),bool)) | s(bool,'F_0') = s(bool,X115) | s(bool,X116) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl14)),
  inference(superposition,[],[f3910,f9766])).
fof(f16175,plain,(
  ( ! [X111,X110] : (s(bool,X111) != s(bool,sK6('const.option.SOME_1'(s(bool,X110)),bool)) | s(bool,X111) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'F_0') = s(bool,X111) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X110)))) ) | ($spl0 | $spl14)),
  inference(superposition,[],[f3585,f5639])).
fof(f38986,plain,(
  $false | ($spl0 | $spl14 | $spl152)),
  inference(global_subsumption,[],[f38985,f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901])).
fof(f38985,plain,(
  ( ! [X235,X234] : (s(bool,X234) = s(bool,sK7(X234,X235,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X234)))) ) | ($spl0 | $spl14 | $spl152)),
  inference(subsumption_resolution,[],[f38225,f37880])).
fof(f38225,plain,(
  ( ! [X235,X234] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X235),s(bool,'T_0'))) | s(bool,X234) = s(bool,sK7(X234,X235,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X234)))) ) | ($spl0 | $spl14 | $spl152)),
  inference(backward_demodulation,[],[f37880,f16435])).
fof(f16435,plain,(
  ( ! [X235,X234] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X235),s(bool,'F_0'))) | s(bool,X234) = s(bool,sK7(X234,X235,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X234)))) ) | ($spl0 | $spl14)),
  inference(forward_demodulation,[],[f16108,f901])).
fof(f16108,plain,(
  ( ! [X235,X234] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),X235),s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)))) | s(bool,X234) = s(bool,sK7(X234,X235,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X234)))) ) | ($spl0 | $spl14)),
  inference(superposition,[],[f2789,f5639])).
fof(f38984,plain,(
  $false | ($spl0 | $spl14 | $spl152)),
  inference(global_subsumption,[],[f38983,f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901])).
fof(f38983,plain,(
  ( ! [X200,X201] : (s(bool,X200) = s(bool,X201) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X200)))) ) | ($spl0 | $spl14 | $spl152)),
  inference(subsumption_resolution,[],[f38223,f15896])).
fof(f38223,plain,(
  ( ! [X200,X201] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X201))) | s(bool,X200) = s(bool,X201) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X200)))) ) | ($spl0 | $spl14 | $spl152)),
  inference(backward_demodulation,[],[f37880,f16430])).
fof(f16430,plain,(
  ( ! [X200,X201] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X201))) | s(bool,X200) = s(bool,X201) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X200)))) ) | $spl14),
  inference(forward_demodulation,[],[f16093,f901])).
fof(f16093,plain,(
  ( ! [X200,X201] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X201))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)))) | s(bool,X200) = s(bool,X201) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X200)))) ) | $spl14),
  inference(superposition,[],[f157,f5639])).
fof(f38982,plain,(
  $false | ($spl0 | $spl14 | $spl152)),
  inference(global_subsumption,[],[f38981,f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901])).
fof(f38981,plain,(
  ( ! [X127,X125,X128,X126] : (s(bool,X125) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X127),'const.option.NONE_0'),s(bool,X126),s(fun(X127,bool),X128))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X125)))) ) | ($spl0 | $spl14 | $spl152)),
  inference(subsumption_resolution,[],[f38222,f28187])).
fof(f38222,plain,(
  ( ! [X127,X125,X128,X126] : (s(bool,'T_0') != s(bool,X126) | s(bool,X125) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X127),'const.option.NONE_0'),s(bool,X126),s(fun(X127,bool),X128))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X125)))) ) | ($spl0 | $spl14 | $spl152)),
  inference(backward_demodulation,[],[f37880,f16412])).
fof(f16412,plain,(
  ( ! [X127,X125,X128,X126] : (s(bool,'F_0') != s(bool,X126) | s(bool,X125) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X127),'const.option.NONE_0'),s(bool,X126),s(fun(X127,bool),X128))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X125)))) ) | ($spl0 | $spl14)),
  inference(forward_demodulation,[],[f16051,f901])).
fof(f16051,plain,(
  ( ! [X127,X125,X128,X126] : (s(bool,X126) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,X125) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X127),'const.option.NONE_0'),s(bool,X126),s(fun(X127,bool),X128))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X125)))) ) | ($spl0 | $spl14)),
  inference(superposition,[],[f9763,f5639])).
fof(f38980,plain,(
  $false | ($spl0 | $spl14 | $spl152)),
  inference(global_subsumption,[],[f38979,f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901])).
fof(f38979,plain,(
  ( ! [X123,X121,X124,X122] : (s(bool,X122) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X123),'const.option.NONE_0'),s(bool,X121),s(fun(X123,bool),X124))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X121)))) ) | ($spl0 | $spl14 | $spl152)),
  inference(subsumption_resolution,[],[f38221,f27950])).
fof(f38221,plain,(
  ( ! [X123,X121,X124,X122] : (s(bool,'T_0') != s(bool,X122) | s(bool,X122) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X123),'const.option.NONE_0'),s(bool,X121),s(fun(X123,bool),X124))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X121)))) ) | ($spl0 | $spl14 | $spl152)),
  inference(backward_demodulation,[],[f37880,f16411])).
fof(f16411,plain,(
  ( ! [X123,X121,X124,X122] : (s(bool,'F_0') != s(bool,X122) | s(bool,X122) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X123),'const.option.NONE_0'),s(bool,X121),s(fun(X123,bool),X124))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X121)))) ) | ($spl0 | $spl14)),
  inference(forward_demodulation,[],[f16050,f901])).
fof(f16050,plain,(
  ( ! [X123,X121,X124,X122] : (s(bool,X122) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,X122) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X123),'const.option.NONE_0'),s(bool,X121),s(fun(X123,bool),X124))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X121)))) ) | ($spl0 | $spl14)),
  inference(superposition,[],[f9763,f5639])).
fof(f38974,plain,(
  $false | ($spl0 | $spl14 | $spl36 | $spl152)),
  inference(global_subsumption,[],[f38841,f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901])).
fof(f38841,plain,(
  ( ! [X151] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X151)))) ) | ($spl0 | $spl14 | $spl36 | $spl152)),
  inference(duplicate_literal_removal,[],[f38205])).
fof(f38205,plain,(
  ( ! [X151] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X151))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X151)))) ) | ($spl0 | $spl14 | $spl36 | $spl152)),
  inference(backward_demodulation,[],[f37880,f16241])).
fof(f16241,plain,(
  ( ! [X151] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X151))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X151)))) ) | ($spl14 | $spl36)),
  inference(trivial_inequality_removal,[],[f16063])).
fof(f16063,plain,(
  ( ! [X151] : (s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X151))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X151)))) ) | ($spl14 | $spl36)),
  inference(superposition,[],[f14809,f5639])).
fof(f38973,plain,(
  $false | ($spl0 | $spl14 | $spl152)),
  inference(global_subsumption,[],[f38972,f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901])).
fof(f38972,plain,(
  ( ! [X182,X183] : (s(bool,X183) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X182)))) ) | ($spl0 | $spl14 | $spl152)),
  inference(subsumption_resolution,[],[f38204,f29629])).
fof(f38204,plain,(
  ( ! [X182,X183] : (s(bool,X183) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X182))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X183))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X182)))) ) | ($spl0 | $spl14 | $spl152)),
  inference(backward_demodulation,[],[f37880,f16216])).
fof(f16216,plain,(
  ( ! [X182,X183] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X182))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X183))) | s(bool,X183) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X182)))) ) | $spl14),
  inference(superposition,[],[f157,f5639])).
fof(f38971,plain,(
  $false | ($spl0 | $spl14 | $spl36 | $spl152)),
  inference(global_subsumption,[],[f38970,f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901])).
fof(f38970,plain,(
  ( ! [X0] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0)))) ) | ($spl0 | $spl14 | $spl36 | $spl152)),
  inference(condensation,[],[f38969])).
fof(f38969,plain,(
  ( ! [X12,X13] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X13))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X12)))) ) | ($spl0 | $spl14 | $spl36 | $spl152)),
  inference(subsumption_resolution,[],[f38203,f15896])).
fof(f38203,plain,(
  ( ! [X12,X13] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X13))) | s(bool,X12) != s(bool,X13) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X12)))) ) | ($spl0 | $spl14 | $spl36 | $spl152)),
  inference(backward_demodulation,[],[f37880,f16123])).
fof(f16123,plain,(
  ( ! [X12,X13] : (s(bool,X12) != s(bool,X13) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X13))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X12)))) ) | ($spl14 | $spl36)),
  inference(superposition,[],[f14809,f5639])).
fof(f38968,plain,(
  $false | ($spl0 | $spl14 | $spl152)),
  inference(global_subsumption,[],[f38967,f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901])).
fof(f38967,plain,(
  ( ! [X0] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0)))) ) | ($spl0 | $spl14 | $spl152)),
  inference(condensation,[],[f38966])).
fof(f38966,plain,(
  ( ! [X204,X205] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X204))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X205))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X204)))) ) | ($spl0 | $spl14 | $spl152)),
  inference(subsumption_resolution,[],[f38202,f29629])).
fof(f38202,plain,(
  ( ! [X204,X205] : (s(bool,X205) != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X204))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X205))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X204)))) ) | ($spl0 | $spl14 | $spl152)),
  inference(backward_demodulation,[],[f37880,f16095])).
fof(f16095,plain,(
  ( ! [X204,X205] : (s(bool,X205) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X204))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X205))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X204)))) ) | $spl14),
  inference(superposition,[],[f158,f5639])).
fof(f38965,plain,(
  $false | ($spl0 | $spl14 | $spl152)),
  inference(global_subsumption,[],[f38964,f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901])).
fof(f38964,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl14 | $spl152)),
  inference(condensation,[],[f38963])).
fof(f38963,plain,(
  ( ! [X14,X13] : (s(bool,X13) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X13) = s(bool,X14)) ) | ($spl0 | $spl14 | $spl152)),
  inference(subsumption_resolution,[],[f38201,f16299])).
fof(f38201,plain,(
  ( ! [X14,X13] : (s(bool,X13) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X14))) | s(bool,X13) = s(bool,X14)) ) | ($spl0 | $spl14 | $spl152)),
  inference(backward_demodulation,[],[f37880,f15961])).
fof(f15961,plain,(
  ( ! [X14,X13] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X14))) | s(bool,X13) = s(bool,X14) | s(bool,X13) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | $spl14),
  inference(superposition,[],[f157,f5639])).
fof(f38962,plain,(
  $false | ($spl0 | $spl14 | $spl20 | $spl152)),
  inference(global_subsumption,[],[f38961,f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901])).
fof(f38961,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1)))) ) | ($spl0 | $spl14 | $spl20 | $spl152)),
  inference(condensation,[],[f38960])).
fof(f38960,plain,(
  ( ! [X2,X0,X1] : (s(bool,X2) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1))) | s(bool,X0) = s(bool,X2)) ) | ($spl0 | $spl14 | $spl20 | $spl152)),
  inference(subsumption_resolution,[],[f38197,f19597])).
fof(f38197,plain,(
  ( ! [X2,X0,X1] : (s(bool,X2) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X1) = s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1))) | s(bool,X0) = s(bool,X2)) ) | ($spl0 | $spl14 | $spl152)),
  inference(backward_demodulation,[],[f37880,f15873])).
fof(f15873,plain,(
  ( ! [X2,X0,X1] : (s(bool,X1) = s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1))) | s(bool,X0) = s(bool,X2) | s(bool,X2) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl14)),
  inference(superposition,[],[f5639,f9766])).
fof(f38959,plain,(
  $false | ($spl0 | $spl14 | $spl36 | $spl152)),
  inference(global_subsumption,[],[f38958,f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901])).
fof(f38958,plain,(
  ( ! [X41,X42] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X42))) | s(bool,X41) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl14 | $spl36 | $spl152)),
  inference(subsumption_resolution,[],[f38194,f16317])).
fof(f38194,plain,(
  ( ! [X41,X42] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X42))) | s(bool,X42) != s(bool,sK6('const.option.SOME_1'(s(bool,X41)),bool)) | s(bool,X41) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl36 | $spl152)),
  inference(backward_demodulation,[],[f37880,f15625])).
fof(f15625,plain,(
  ( ! [X41,X42] : (s(bool,X42) != s(bool,sK6('const.option.SOME_1'(s(bool,X41)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X42))) | s(bool,X41) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl36)),
  inference(subsumption_resolution,[],[f15546,f180])).
fof(f15546,plain,(
  ( ! [X41,X42] : (s(bool,X42) != s(bool,sK6('const.option.SOME_1'(s(bool,X41)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X42))) | s(bool,X41) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,'F_0')) ) | ($spl0 | $spl36)),
  inference(superposition,[],[f14809,f9397])).
fof(f38950,plain,(
  $false | ($spl0 | $spl14 | $spl38 | $spl152)),
  inference(global_subsumption,[],[f38949,f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901])).
fof(f38949,plain,(
  ( ! [X54,X53] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X54))) | s(bool,X53) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl14 | $spl38 | $spl152)),
  inference(subsumption_resolution,[],[f38179,f16299])).
fof(f38179,plain,(
  ( ! [X54,X53] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X54))) | s(bool,X53) != s(bool,X54) | s(bool,X53) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl38 | $spl152)),
  inference(backward_demodulation,[],[f37880,f14814])).
fof(f38947,plain,(
  $false | ($spl0 | $spl14 | $spl152)),
  inference(global_subsumption,[],[f38946,f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901])).
fof(f38946,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl14 | $spl152)),
  inference(condensation,[],[f38945])).
fof(f38945,plain,(
  ( ! [X140,X139] : (s(bool,X140) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X140) = s(bool,sK6('const.option.SOME_1'(s(bool,X139)),bool))) ) | ($spl0 | $spl14 | $spl152)),
  inference(subsumption_resolution,[],[f38177,f12814])).
fof(f38177,plain,(
  ( ! [X140,X139] : (s(bool,X140) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') != s(bool,X139) | s(bool,X140) = s(bool,sK6('const.option.SOME_1'(s(bool,X139)),bool))) ) | ($spl0 | $spl14 | $spl152)),
  inference(backward_demodulation,[],[f37880,f14636])).
fof(f14636,plain,(
  ( ! [X140,X139] : (s(bool,'T_0') != s(bool,X139) | s(bool,X140) = s(bool,sK6('const.option.SOME_1'(s(bool,X139)),bool)) | s(bool,X140) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl14)),
  inference(superposition,[],[f11229,f901])).
fof(f38922,plain,(
  $false | ($spl0 | $spl14 | $spl152)),
  inference(global_subsumption,[],[f38921,f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901])).
fof(f38921,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl14 | $spl152)),
  inference(condensation,[],[f38920])).
fof(f38920,plain,(
  ( ! [X28,X29] : (s(bool,X29) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X28) = s(bool,X29)) ) | ($spl0 | $spl14 | $spl152)),
  inference(subsumption_resolution,[],[f38131,f37880])).
fof(f38131,plain,(
  ( ! [X28,X29] : (s(bool,X29) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,X28)),bool)) | s(bool,X28) = s(bool,X29)) ) | ($spl0 | $spl14 | $spl152)),
  inference(backward_demodulation,[],[f37880,f11235])).
fof(f11235,plain,(
  ( ! [X28,X29] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,X28)),bool)) | s(bool,X28) = s(bool,X29) | s(bool,X29) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl14)),
  inference(superposition,[],[f4454,f9766])).
fof(f38918,plain,(
  $false | ($spl0 | $spl14 | $spl152)),
  inference(global_subsumption,[],[f38917,f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901])).
fof(f38917,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl14 | $spl152)),
  inference(condensation,[],[f38916])).
fof(f38916,plain,(
  ( ! [X8,X9] : (s(bool,X9) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X8) = s(bool,X9)) ) | ($spl0 | $spl14 | $spl152)),
  inference(subsumption_resolution,[],[f38128,f37880])).
fof(f38128,plain,(
  ( ! [X8,X9] : (s(bool,X9) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') != s(bool,X8) | s(bool,X8) = s(bool,X9)) ) | ($spl0 | $spl14 | $spl152)),
  inference(backward_demodulation,[],[f37880,f11229])).
fof(f38902,plain,(
  $false | ($spl0 | $spl152)),
  inference(global_subsumption,[],[f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884,f38901])).
fof(f38900,plain,(
  $false | ($spl0 | $spl14 | $spl20 | $spl152)),
  inference(global_subsumption,[],[f38899,f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884])).
fof(f38899,plain,(
  ( ! [X81] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X81)))) ) | ($spl0 | $spl14 | $spl20 | $spl152)),
  inference(subsumption_resolution,[],[f38075,f16487])).
fof(f38075,plain,(
  ( ! [X81] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X81))) | s(bool,X81) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f8984])).
fof(f38898,plain,(
  $false | ($spl0 | $spl14 | $spl152)),
  inference(global_subsumption,[],[f38897,f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884])).
fof(f38897,plain,(
  ( ! [X83,X84] : (s(bool,X84) = s(bool,sK6('const.option.SOME_1'(s(bool,X83)),bool)) | s(bool,X83) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl14 | $spl152)),
  inference(subsumption_resolution,[],[f38071,f16317])).
fof(f38071,plain,(
  ( ! [X83,X84] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X84))) | s(bool,X84) = s(bool,sK6('const.option.SOME_1'(s(bool,X83)),bool)) | s(bool,X83) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f8721])).
fof(f38895,plain,(
  $false | ($spl0 | $spl14 | $spl152)),
  inference(global_subsumption,[],[f38894,f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884])).
fof(f38894,plain,(
  ( ! [X54,X55] : (s(bool,X54) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X54))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X55)))) ) | ($spl0 | $spl14 | $spl152)),
  inference(subsumption_resolution,[],[f38046,f15321])).
fof(f38046,plain,(
  ( ! [X54,X55] : (s(bool,X54) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X54))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X55))) | s(bool,'T_0') != s(bool,X55)) ) | ($spl0 | $spl14 | $spl152)),
  inference(backward_demodulation,[],[f37880,f5640])).
fof(f38893,plain,(
  $false | ($spl0 | $spl14 | $spl20 | $spl152)),
  inference(global_subsumption,[],[f38892,f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884])).
fof(f38892,plain,(
  ( ! [X48] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X48)))) ) | ($spl0 | $spl14 | $spl20 | $spl152)),
  inference(subsumption_resolution,[],[f38045,f16487])).
fof(f38045,plain,(
  ( ! [X48] : (s(bool,X48) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X48)))) ) | ($spl0 | $spl14 | $spl152)),
  inference(backward_demodulation,[],[f37880,f5639])).
fof(f38890,plain,(
  $false | ($spl0 | $spl14 | $spl152)),
  inference(global_subsumption,[],[f38889,f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884])).
fof(f38889,plain,(
  ( ! [X50,X51] : (s(bool,X50) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X51) = s(bool,sK6('const.option.SOME_1'(s(bool,X50)),bool))) ) | ($spl0 | $spl14 | $spl152)),
  inference(subsumption_resolution,[],[f38037,f16317])).
fof(f38037,plain,(
  ( ! [X50,X51] : (s(bool,X50) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X51))) | s(bool,X51) = s(bool,sK6('const.option.SOME_1'(s(bool,X50)),bool))) ) | ($spl0 | $spl14 | $spl152)),
  inference(backward_demodulation,[],[f37880,f5465])).
fof(f38887,plain,(
  $false | ($spl0 | $spl152)),
  inference(subsumption_resolution,[],[f38020,f37880])).
fof(f38020,plain,(
  s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f4454])).
fof(f38885,plain,(
  $false | ($spl0 | $spl152)),
  inference(global_subsumption,[],[f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854,f38884])).
fof(f38867,plain,(
  $false | ($spl0 | $spl14 | $spl152)),
  inference(global_subsumption,[],[f38866,f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854])).
fof(f38866,plain,(
  ( ! [X118,X116,X119,X117] : (s(bool,X119) = s(bool,happ(s(fun(X116,bool),X117),s(X116,X118))) | s(X116,X118) = s(X116,sK7(X118,X117,X116))) ) | ($spl0 | $spl14 | $spl152)),
  inference(subsumption_resolution,[],[f37948,f16747])).
fof(f16747,plain,(
  ( ! [X103,X101,X102,X100] : (s(bool,X103) = s(bool,happ(s(fun(X100,bool),X101),s(X100,X102))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X103))) | s(X100,X102) = s(X100,sK7(X102,X101,X100))) ) | ($spl0 | $spl14)),
  inference(subsumption_resolution,[],[f16702,f179])).
fof(f16702,plain,(
  ( ! [X103,X101,X102,X100] : (p(s(bool,'F_0')) | s(bool,X103) = s(bool,happ(s(fun(X100,bool),X101),s(X100,X102))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X103))) | s(X100,X102) = s(X100,sK7(X102,X101,X100))) ) | ($spl0 | $spl14)),
  inference(superposition,[],[f16358,f1756])).
fof(f37948,plain,(
  ( ! [X118,X116,X119,X117] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X119))) | s(bool,X119) = s(bool,happ(s(fun(X116,bool),X117),s(X116,X118))) | s(X116,X118) = s(X116,sK7(X118,X117,X116))) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f2753])).
fof(f38857,plain,(
  $false | ($spl0 | $spl14 | $spl152)),
  inference(global_subsumption,[],[f38856,f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854])).
fof(f38856,plain,(
  ( ! [X0] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0)))) ) | ($spl0 | $spl14 | $spl152)),
  inference(subsumption_resolution,[],[f37897,f16477])).
fof(f16477,plain,(
  ( ! [X114] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,X114)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X114)))) ) | ($spl0 | $spl14)),
  inference(global_subsumption,[],[f16476,f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f3318,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f3315,f469,f736,f888,f3074,f2715,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f615,f593,f3046,f2687,f876,f855,f3047,f2688,f607,f3091,f2779,f862,f3092,f2780,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f3016,f2844,f2818,f2790,f2788,f2778,f2766,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f3017,f2845,f2819,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9051,f9058,f9061,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9599,f9600,f9601,f9649,f9650,f9651,f9652,f9762,f9763,f9764,f9765,f10036,f10037,f10038,f10207,f10208,f10262,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10340,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f10377,f10432,f10379,f10386,f10387,f10388,f10389,f10551,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14034,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14505,f14506,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15288,f15349,f15350,f15352,f15453,f15422,f15635,f15636,f15637,f15638,f15749,f15750,f15753,f15755,f15758,f15763])).
fof(f16476,plain,(
  ( ! [X114,X115] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,X114)),bool)) | s(bool,X115) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X114)))) ) | ($spl0 | $spl14)),
  inference(subsumption_resolution,[],[f16178,f12066])).
fof(f16178,plain,(
  ( ! [X114,X115] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,X114)),bool)) | s(bool,X115) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'F_0') = s(bool,X115) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X114)))) ) | ($spl0 | $spl14)),
  inference(superposition,[],[f3886,f5639])).
fof(f37897,plain,(
  ( ! [X0] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X0)),bool))) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f912])).
fof(f38855,plain,(
  $false | ($spl0 | $spl152)),
  inference(global_subsumption,[],[f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847,f38854])).
fof(f38851,plain,(
  $false | ($spl0 | $spl14 | $spl152)),
  inference(global_subsumption,[],[f38850,f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847])).
fof(f38850,plain,(
  ( ! [X4,X5,X3] : (s(bool,X5) = s(bool,'const.bool.IN_2'(s(X3,X4),s(fun(X3,bool),'const.pred_set.EMPTY_0')))) ) | ($spl0 | $spl14 | $spl152)),
  inference(subsumption_resolution,[],[f37887,f16746])).
fof(f37887,plain,(
  ( ! [X4,X5,X3] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X5))) | s(bool,X5) = s(bool,'const.bool.IN_2'(s(X3,X4),s(fun(X3,bool),'const.pred_set.EMPTY_0')))) ) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f360])).
fof(f38849,plain,(
  $false | ($spl0 | $spl152)),
  inference(subsumption_resolution,[],[f37883,f114])).
fof(f37883,plain,(
  ~p(s(bool,'T_0')) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f179])).
fof(f38848,plain,(
  $false | ($spl0 | $spl152)),
  inference(global_subsumption,[],[f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f172,f689,f712,f766,f782,f793,f828,f901,f914,f985,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1182,f1188,f1191,f1256,f1265,f1266,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1632,f1747,f1783,f1858,f2035,f2063,f2517,f2629,f2789,f3093,f3054,f3055,f3581,f4001,f4005,f3994,f3951,f3948,f3910,f3902,f3901,f3886,f3865,f3847,f3776,f3772,f3771,f3770,f3743,f3736,f3597,f3585,f3560,f3527,f3524,f3519,f3518,f3505,f3503,f3450,f3447,f3439,f3407,f3406,f3405,f3401,f3398,f3379,f3377,f3310,f3309,f3296,f3294,f3163,f3162,f3158,f3097,f3094,f3060,f3059,f3053,f3019,f3018,f3015,f2984,f2977,f2976,f2924,f2923,f2920,f2847,f2846,f2843,f2821,f2820,f2817,f2785,f2782,f2781,f2753,f2701,f2700,f2696,f2695,f2694,f2660,f2657,f2616,f2583,f2542,f2494,f2491,f2471,f2468,f2416,f2123,f2120,f2103,f2101,f2066,f2055,f2033,f1970,f1967,f1961,f1950,f1948,f1880,f1834,f1831,f1778,f1774,f1768,f1766,f1758,f1756,f1710,f1670,f1631,f1628,f1615,f1614,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f886,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4454,f4508,f4474,f4475,f4477,f4511,f4514,f4597,f4689,f5098,f5128,f5130,f6054,f6392,f6393,f6394,f6395,f7216,f7355,f7417,f7474,f7467,f7465,f7463,f7478,f7724,f7706,f7748,f7700,f7605,f7671,f7800,f7801,f8921,f8638,f8961,f8974,f8984,f8721,f8985,f8798,f9049,f9050,f9094,f8864,f9095,f9397,f9392,f9424,f9486,f9555,f9598,f9601,f9649,f9652,f9762,f9763,f10036,f10207,f10208,f10316,f10317,f10318,f10321,f10322,f10326,f10327,f10407,f10332,f10334,f10335,f10337,f10420,f10421,f10353,f10354,f10355,f10358,f10359,f10362,f10363,f10364,f10369,f12613,f12614,f13739,f13719,f13844,f13845,f12758,f12759,f13710,f13869,f13870,f12814,f12913,f13980,f14009,f14030,f13010,f14035,f14036,f13154,f13156,f14165,f14181,f13308,f13326,f13329,f13333,f13334,f13335,f13338,f13339,f13342,f13394,f14247,f14255,f13531,f13533,f13551,f13554,f14507,f14794,f15215,f15216,f15303,f15302,f15300,f15321,f15349,f15350,f15352,f15453,f15750,f15753,f15755,f16647,f16758,f16759,f17241,f17260,f16862,f16863,f16878,f16879,f17315,f17316,f17318,f17322,f17323,f17326,f16944,f17328,f17330,f17334,f17335,f17344,f17367,f17369,f17384,f17385,f17443,f17089,f17447,f17448,f17462,f17473,f17474,f17475,f17487,f17205,f17500,f17501,f17793,f17794,f17795,f17796,f17510,f17511,f17532,f17586,f17602,f17606,f17609,f17611,f17625,f17817,f17822,f17768,f17750,f18003,f18022,f18023,f18030,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18056,f18057,f18060,f18061,f18062,f18131,f18132,f18133,f18070,f18071,f18072,f18077,f18081,f18082,f18142,f18144,f18146,f18149,f18107,f18108,f18109,f18112,f18113,f18114,f18208,f18209,f18210,f18638,f18658,f18552,f18697,f18833,f18835,f18837,f17460,f9061,f3318,f15758,f15749,f3453,f3452,f3067,f3065,f2708,f2706,f3063,f2704,f18565,f18105,f18101,f18092,f18090,f18089,f17816,f17775,f17773,f17765,f17764,f17752,f17730,f17638,f17637,f17623,f17617,f17601,f17600,f17588,f17456,f9058,f3315,f18088,f18531,f18085,f17731,f10432,f10389,f10379,f18828,f18769,f17591,f17333,f18831,f17321,f18768,f3074,f2715,f888,f736,f469,f18766,f17628,f17627,f17608,f17590,f17332,f17320,f16590,f15637,f16589,f15636,f18824,f18751,f18749,f18748,f18747,f18716,f18711,f18702,f18701,f18700,f17411,f16657,f16591,f16588,f5859,f5230,f4731,f3909,f3908,f3906,f3516,f3096,f2784,f2114,f2106,f887,f446,f440,f18812,f18809,f18762,f18746,f18745,f18712,f17755,f17446,f3099,f3098,f3095,f2787,f2786,f2783,f2622,f1761,f1307,f1300,f1072,f1071,f727,f18827,f18821,f18759,f18758,f18744,f18717,f18713,f17754,f17499,f17498,f17445,f17409,f15763,f15638,f15635,f14034,f7799,f2122,f2105,f2058,f2057,f1969,f1953,f1952,f1777,f1776,f1767,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f876,f855,f3047,f2688,f18800,f615,f593,f3046,f2687,f18799,f607,f3091,f2779,f18708,f862,f3092,f2780,f18709,f18847,f18845,f18840,f18832,f18801,f18798,f18710,f18707,f15422,f15288,f14505,f10340,f10262,f10037,f9764,f9650,f9599,f7356,f7217,f4509,f3949,f3724,f3192,f3159,f3090,f3072,f3048,f3045,f2790,f2788,f2778,f2758,f2757,f2755,f2713,f2689,f2686,f2658,f2543,f2492,f2469,f2427,f1881,f1832,f1754,f1580,f1123,f1093,f1062,f1018,f1005,f989,f806,f572,f535,f534,f447,f434,f161,f160,f159,f18854,f14506,f10038,f9765,f9651,f9600,f7357,f7218,f4510,f3950,f3193,f3160,f3086,f2723,f2659,f2544,f2493,f2470,f1882,f1833,f1124,f1094,f1063,f890,f874,f864,f863,f840,f826,f10551,f10386,f10377,f17449,f9051,f3520,f3394,f3311,f2116,f1963,f1763,f1309,f1184,f770,f10387,f10388,f17459,f17406,f17261,f3016,f2844,f2818,f2766,f3017,f2845,f2819,f17262,f19781,f19782,f19837,f19838,f20125,f20126,f20127,f20128,f20129,f20130,f20131,f20132,f20133,f20134,f20135,f20138,f20139,f20227,f20230,f20239,f20166,f20167,f20168,f20169,f20170,f20171,f20242,f20173,f20180,f20181,f20245,f20184,f20246,f20188,f20249,f20190,f20191,f20250,f20251,f20253,f20255,f20258,f20263,f20265,f20219,f20275,f20345,f20346,f20347,f20348,f20509,f20510,f20511,f20512,f20558,f20563,f20573,f20575,f20639,f20640,f20975,f20999,f21000,f21002,f21003,f21068,f21071,f22613,f22611,f22582,f22794,f22796,f21293,f21294,f21295,f21297,f21299,f22569,f22804,f22805,f22816,f21362,f21363,f22832,f22840,f22844,f22855,f22858,f22550,f21444,f21445,f21493,f21621,f23036,f23038,f21637,f23039,f23060,f23069,f21718,f21719,f21828,f21830,f21841,f21843,f21845,f22483,f22482,f23241,f23244,f22477,f22476,f23252,f22470,f22469,f22467,f23257,f23258,f23260,f22465,f23264,f23265,f21933,f21934,f23299,f23300,f23303,f23306,f23308,f23309,f23315,f22045,f22056,f22058,f22060,f22061,f22065,f22068,f22072,f22073,f22074,f22075,f22079,f22080,f22081,f22082,f22083,f23346,f22091,f22092,f22454,f22159,f22181,f22189,f22192,f22194,f22196,f23386,f22271,f22272,f22352,f22354,f22365,f22367,f22369,f22370,f22377,f23663,f23530,f23727,f25618,f25620,f25621,f25622,f25697,f25698,f25699,f25837,f25838,f25839,f25842,f25844,f25845,f25846,f25915,f25916,f25928,f25935,f25937,f25939,f25940,f25948,f25950,f25951,f25952,f25967,f25975,f25977,f25979,f25980,f25988,f25990,f25991,f25992,f26081,f26082,f26207,f26209,f26211,f26212,f26220,f26222,f26223,f26224,f26229,f26233,f26235,f26236,f26321,f26322,f27307,f27308,f27309,f27311,f27314,f27315,f27317,f26449,f26451,f26460,f26462,f26463,f26464,f26469,f26473,f26475,f26476,f26478,f26480,f26481,f26482,f26483,f26484,f26489,f26490,f26492,f26493,f26497,f26501,f26502,f26504,f27348,f26573,f26597,f26599,f26600,f26608,f26610,f26611,f26612,f27365,f26847,f27378,f26695,f26696,f27405,f26792,f26794,f26796,f26797,f26805,f26807,f26808,f26809,f26814,f26820,f26821,f27506,f27507,f27508,f27509,f27586,f27587,f27588,f27612,f27617,f27635,f27639,f27741,f27827,f27828,f27829,f27866,f27867,f27868,f29311,f29312,f29313,f29314,f27950,f27951,f27952,f28103,f28104,f28105,f28107,f28108,f28109,f28187,f28188,f28189,f28198,f28205,f28207,f28209,f28210,f28218,f28219,f28221,f28222,f28223,f28242,f29447,f28251,f28253,f28255,f28256,f28264,f28265,f28267,f28268,f28269,f28362,f28363,f28495,f28497,f28499,f28500,f28508,f28509,f28511,f28512,f28513,f28518,f28522,f28524,f28525,f29209,f29550,f28614,f28615,f29621,f29622,f29623,f29624,f29625,f29626,f29627,f29629,f29630,f28751,f28760,f28761,f28763,f28764,f28765,f28770,f28776,f28777,f28781,f28782,f28783,f28784,f28785,f28786,f28789,f28790,f28793,f28794,f28795,f28799,f28800,f28801,f29650,f28864,f28888,f28889,f28895,f28897,f28898,f28900,f28901,f28902,f29658,f29659,f28991,f28992,f29723,f29724,f29725,f29726,f29727,f29728,f29119,f29121,f29123,f29124,f29132,f29133,f29135,f29136,f29137,f29142,f29146,f29148,f29149,f29740,f29741,f29742,f29745,f29746,f29750,f29751,f29753,f29754,f29755,f29756,f29757,f29758,f29940,f29773,f29774,f29775,f29777,f29951,f29781,f29782,f29784,f29785,f29786,f29793,f29970,f29972,f29973,f29808,f29809,f29810,f29974,f29813,f29815,f29816,f29977,f29818,f29819,f29827,f29829,f29831,f29832,f29833,f29834,f29836,f29837,f29840,f29841,f29844,f29845,f29846,f29848,f29849,f29850,f29851,f29852,f29853,f29989,f29990,f29868,f29869,f29870,f29872,f30000,f29877,f29879,f29880,f29881,f29883,f29888,f29890,f30006,f29892,f30012,f30014,f29903,f29904,f29905,f30016,f29908,f29910,f29911,f30019,f29913,f29914,f29922,f30140,f30149,f30311,f30312,f30313,f30450,f30451,f30452,f30453,f30458,f30459,f30460,f30463,f30464,f30474,f30475,f30476,f30595,f30491,f30492,f30493,f30495,f30606,f30499,f30500,f30504,f30511,f30630,f30633,f30526,f30527,f30528,f30635,f30531,f30533,f30534,f30638,f30536,f30537,f30639,f30647,f30657,f30665,f30576,f31179,f31180,f31181,f31182,f30789,f30790,f30791,f30813,f30888,f30890,f30892,f30893,f30901,f30902,f30903,f30904,f30905,f30907,f30908,f30909,f30914,f30918,f30920,f30921,f30931,f30933,f30934,f30939,f30941,f30943,f30944,f30952,f30953,f30954,f30955,f30956,f30958,f30959,f30960,f31209,f31154,f31210,f31152,f31216,f31220,f31142,f31070,f31071,f31138,f31108,f31110,f31112,f31113,f31121,f31122,f31123,f31124,f31125,f31127,f31128,f31129,f31368,f31369,f31370,f31371,f31257,f31258,f31372,f31379,f31289,f31392,f31290,f31291,f31297,f31298,f31302,f31304,f31307,f31403,f31325,f31326,f31327,f31328,f31329,f31404,f31405,f31407,f31409,f31412,f31416,f31425,f31432,f31525,f31528,f31532,f31537,f31539,f31540,f31541,f31542,f31543,f31544,f31559,f31560,f31561,f31563,f32155,f31570,f31571,f31572,f31579,f31580,f32176,f31595,f31596,f31597,f31598,f32181,f31601,f31602,f31604,f31605,f32184,f31607,f31608,f31609,f31610,f31611,f31612,f31615,f31616,f31619,f31620,f31621,f31622,f31623,f31625,f31626,f31627,f31628,f32189,f32190,f32191,f31643,f31644,f31645,f31647,f31648,f31649,f31650,f31651,f31652,f31653,f31658,f31700,f31701,f31703,f31704,f31705,f31712,f31713,f31728,f31729,f31740,f32255,f32125,f32122,f32262,f32269,f31773,f31776,f31778,f31780,f31781,f31789,f31790,f31791,f31792,f31793,f31795,f31796,f31797,f31803,f31804,f31805,f31806,f31807,f31809,f31814,f31815,f31816,f31817,f31818,f31819,f31820,f31821,f31822,f31823,f31824,f31825,f31830,f31831,f31832,f31833,f31834,f31839,f31840,f31841,f31842,f31843,f31844,f31845,f31846,f31847,f31848,f31849,f31854,f31855,f32272,f32273,f31860,f31864,f31867,f31868,f31873,f32294,f31891,f31892,f31903,f31904,f31908,f31914,f31915,f31917,f31918,f31924,f31925,f31926,f31927,f31928,f31929,f31930,f31931,f31932,f31933,f31935,f31936,f31937,f31938,f31939,f31945,f32320,f32321,f32118,f32329,f32335,f32108,f32040,f32041,f32104,f32077,f32079,f32081,f32082,f32090,f32091,f32092,f32093,f32094,f32096,f32097,f32098,f32364,f32366,f32367,f32368,f32397,f32398,f32399,f32400,f32401,f32402,f32403,f32404,f32405,f32406,f32407,f32408,f32409,f32444,f32411,f32412,f32413,f32414,f32415,f32451,f32417,f32421,f32422,f32423,f32533,f32534,f32535,f32536,f32537,f32542,f32544,f32545,f32549,f32554,f32556,f32557,f32558,f32559,f32560,f32561,f32686,f32576,f32577,f32578,f32580,f32697,f32587,f32588,f32589,f32596,f32597,f32612,f32613,f32614,f32615,f32723,f32618,f32619,f32621,f32622,f32726,f32624,f32625,f32626,f32666,f32738,f32739,f32740,f32741,f32744,f32745,f32750,f32752,f32753,f32754,f32755,f32756,f32757,f33171,f33174,f32772,f32773,f32774,f32776,f33185,f32780,f32781,f32783,f32784,f32785,f32793,f32794,f33207,f33208,f33210,f32809,f32810,f32811,f32812,f33212,f32815,f32816,f32818,f32819,f33215,f32821,f32822,f32823,f32828,f32832,f32834,f32874,f33224,f32918,f33247,f32973,f33257,f33039,f33307,f33074,f33311,f33088,f33090,f33091,f33314,f33096,f33317,f33320,f33322,f33684,f33328,f33330,f33331,f33334,f33335,f33338,f33340,f33342,f33343,f33344,f33345,f33346,f33347,f33694,f33695,f33362,f33363,f33364,f33366,f33705,f33370,f33371,f33373,f33374,f33375,f33715,f33716,f33383,f33384,f33718,f33720,f33721,f33725,f33726,f33728,f33400,f33401,f33402,f33403,f33737,f33406,f33407,f33409,f33410,f33740,f33412,f33413,f33414,f33778,f33781,f33798,f33805,f33583,f33620,f33858,f33634,f33636,f33637,f33643,f34156,f34293,f34294,f34295,f34161,f34163,f34164,f34167,f34168,f34178,f34179,f34180,f34310,f34195,f34196,f34197,f34199,f34321,f34204,f34208,f34325,f34326,f34327,f34330,f34331,f34216,f34217,f34334,f34336,f34337,f34341,f34342,f34344,f34351,f34233,f34234,f34235,f34236,f34352,f34239,f34240,f34242,f34243,f34355,f34245,f34246,f34247,f34356,f34364,f34374,f34382,f34287,f34385,f34387,f34581,f34584,f34393,f34394,f34395,f34396,f34399,f34400,f34403,f34405,f34407,f34408,f34409,f34410,f34411,f34412,f34590,f34591,f34592,f34427,f34428,f34429,f34431,f34602,f34435,f34436,f34438,f34439,f34440,f34612,f34613,f34448,f34449,f34615,f34617,f34618,f34622,f34623,f34625,f34465,f34466,f34467,f34468,f34634,f34471,f34472,f34474,f34475,f34637,f34477,f34478,f34479,f34993,f35620,f34995,f34996,f34997,f34998,f34999,f35002,f35003,f35006,f35007,f35008,f35010,f35012,f35013,f35014,f35015,f35628,f35629,f35030,f35031,f35032,f35034,f35035,f35641,f35644,f35648,f35669,f35670,f35051,f35671,f35053,f35672,f35055,f35169,f35177,f35682,f35683,f35194,f35197,f35198,f35201,f35203,f35205,f35206,f35214,f35215,f35216,f35217,f35218,f35219,f35220,f35222,f35223,f35224,f35225,f35226,f35228,f35229,f35235,f35236,f35237,f35238,f35239,f35240,f35243,f35244,f35245,f35246,f35247,f35249,f35250,f35251,f35252,f35253,f35255,f35260,f35261,f35262,f35263,f35264,f35265,f35266,f35267,f35268,f35269,f35270,f35693,f35277,f35278,f35279,f35280,f35281,f35286,f35287,f35288,f35289,f35290,f35291,f35292,f35293,f35294,f35295,f35296,f35301,f35302,f35303,f35696,f35306,f35311,f35313,f35314,f35315,f35317,f35320,f35332,f35338,f35339,f35350,f35355,f35361,f35362,f35364,f35372,f35374,f35375,f35376,f35377,f35378,f35379,f35380,f35381,f35382,f35384,f35385,f35386,f35387,f35388,f35389,f35390,f35391,f35392,f35393,f35394,f35400,f35406,f35408,f35410,f35411,f35419,f35420,f35421,f35422,f35423,f35424,f35425,f35427,f35430,f35431,f35433,f35434,f35440,f35444,f35445,f35446,f35447,f35448,f35450,f35455,f35456,f35457,f35458,f35459,f35460,f35461,f35462,f35463,f35464,f35465,f35741,f35472,f35473,f35474,f35475,f35476,f35481,f35482,f35483,f35484,f35485,f35486,f35487,f35488,f35489,f35490,f35491,f35496,f35497,f35498,f35744,f35501,f35506,f35508,f35509,f35510,f35512,f35515,f35527,f35533,f35534,f35545,f35550,f35556,f35557,f35559,f35567,f35569,f35570,f35571,f35572,f35573,f35574,f35575,f35576,f35577,f35578,f35579,f35581,f35582,f35583,f35584,f35585,f35586,f35587,f35588,f35589,f35590,f35591,f35597,f35787,f37880,f38847])).
fof(f38846,plain,(
  $false | ($spl0 | $spl152)),
  inference(trivial_inequality_removal,[],[f37886])).
fof(f37886,plain,(
  s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f347])).
fof(f38845,plain,(
  $false | ($spl0 | $spl152)),
  inference(trivial_inequality_removal,[],[f37893])).
fof(f37893,plain,(
  s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f37880,f696])).
fof(f37572,plain,(
  ( ! [X138] : (s(bool,'T_0') = s(bool,sK7('T_0',X138,bool))) ) | $spl168),
  inference(cnf_transformation,[],[f37572_D])).
fof(f37572_D,plain,(
  ( ! [X138] : (s(bool,'T_0') = s(bool,sK7('T_0',X138,bool))) ) <=> ~$spl168),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl168])])).
fof(f37580,plain,(
  ( ! [X142,X140] : (s(bool,X140) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,X140) = s(bool,X142) | s(bool,'T_0') = s(bool,X142)) ) | $spl172),
  inference(cnf_transformation,[],[f37580_D])).
fof(f37580_D,plain,(
  ( ! [X142,X140] : (s(bool,X140) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,X140) = s(bool,X142) | s(bool,'T_0') = s(bool,X142)) ) <=> ~$spl172),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl172])])).
fof(f37579,plain,(
  ( ! [X142,X140,X141] : (s(bool,X140) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,X142) | s(bool,'T_0') = s(bool,sK7('T_0',X141,bool)) | s(bool,X140) = s(bool,X142)) ) | ($spl0 | $spl14 | $spl152)),
  inference(forward_demodulation,[],[f36551,f191])).
fof(f36551,plain,(
  ( ! [X142,X140,X141] : (s(bool,X140) != s(bool,sK6('const.option.SOME_1'(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.pred_set.EMPTY_0')))),bool)) | s(bool,'T_0') = s(bool,X142) | s(bool,'T_0') = s(bool,sK7('T_0',X141,bool)) | s(bool,X140) = s(bool,X142)) ) | ($spl0 | $spl14 | $spl152)),
  inference(backward_demodulation,[],[f35832,f34602])).
fof(f37573,plain,(
  ( ! [X139,X137] : (s(bool,X137) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,X137) = s(bool,X139) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X139)))) ) | $spl170),
  inference(cnf_transformation,[],[f37573_D])).
fof(f37573_D,plain,(
  ( ! [X139,X137] : (s(bool,X137) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,X137) = s(bool,X139) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X139)))) ) <=> ~$spl170),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl170])])).
fof(f37571,plain,(
  ( ! [X138,X139,X137] : (s(bool,X137) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,sK7('T_0',X138,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X139))) | s(bool,X137) = s(bool,X139)) ) | ($spl0 | $spl14 | $spl152)),
  inference(forward_demodulation,[],[f36545,f191])).
fof(f36545,plain,(
  ( ! [X138,X139,X137] : (s(bool,X137) != s(bool,sK6('const.option.SOME_1'(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.pred_set.EMPTY_0')))),bool)) | s(bool,'T_0') = s(bool,sK7('T_0',X138,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X139))) | s(bool,X137) = s(bool,X139)) ) | ($spl0 | $spl14 | $spl152)),
  inference(backward_demodulation,[],[f35832,f34431])).
fof(f37271,plain,(
  ( ! [X313,X315,X312,X314] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X312),X313),s(bool,X314),s(fun(X312,bool),X315))) | s('type.option.option'(X312),'const.option.NONE_0') = s('type.option.option'(X312),X313)) ) | $spl166),
  inference(cnf_transformation,[],[f37271_D])).
fof(f37271_D,plain,(
  ( ! [X313,X315,X312,X314] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X312),X313),s(bool,X314),s(fun(X312,bool),X315))) | s('type.option.option'(X312),'const.option.NONE_0') = s('type.option.option'(X312),X313)) ) <=> ~$spl166),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl166])])).
fof(f37015,plain,(
  ( ! [X88,X87] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X87),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X87,bool),X88)))) ) | $spl160),
  inference(cnf_transformation,[],[f37015_D])).
fof(f37015_D,plain,(
  ( ! [X88,X87] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X87),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X87,bool),X88)))) ) <=> ~$spl160),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl160])])).
fof(f37270,plain,(
  ( ! [X313,X315,X316,X312,X314,X317] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X316),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X316,bool),X317))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X312),X313),s(bool,X314),s(fun(X312,bool),X315))) | s('type.option.option'(X312),'const.option.NONE_0') = s('type.option.option'(X312),X313)) ) | ($spl0 | $spl14 | $spl152)),
  inference(forward_demodulation,[],[f36219,f191])).
fof(f36219,plain,(
  ( ! [X313,X315,X316,X312,X314,X317] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X316),'const.option.NONE_0'),s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.pred_set.EMPTY_0'))),s(fun(X316,bool),X317))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X312),X313),s(bool,X314),s(fun(X312,bool),X315))) | s('type.option.option'(X312),'const.option.NONE_0') = s('type.option.option'(X312),X313)) ) | ($spl0 | $spl14 | $spl152)),
  inference(backward_demodulation,[],[f35832,f35457])).
fof(f37262,plain,(
  ( ! [X532,X534,X533,X535] : (s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X532),X534),s(bool,X535),s(fun(X532,bool),X533))) | s('type.option.option'(X532),'const.option.NONE_0') = s('type.option.option'(X532),X534)) ) | $spl164),
  inference(cnf_transformation,[],[f37262_D])).
fof(f37262_D,plain,(
  ( ! [X532,X534,X533,X535] : (s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X532),X534),s(bool,X535),s(fun(X532,bool),X533))) | s('type.option.option'(X532),'const.option.NONE_0') = s('type.option.option'(X532),X534)) ) <=> ~$spl164),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl164])])).
fof(f37265,plain,(
  ( ! [X660,X662,X664,X661,X663,X665] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X664),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X664,bool),X665))) | s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X660),X662),s(bool,X663),s(fun(X660,bool),X661))) | s('type.option.option'(X660),'const.option.NONE_0') = s('type.option.option'(X660),X662)) ) | ($spl0 | $spl14 | $spl152)),
  inference(forward_demodulation,[],[f36215,f191])).
fof(f36215,plain,(
  ( ! [X660,X662,X664,X661,X663,X665] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X664),'const.option.NONE_0'),s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.pred_set.EMPTY_0'))),s(fun(X664,bool),X665))) | s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X660),X662),s(bool,X663),s(fun(X660,bool),X661))) | s('type.option.option'(X660),'const.option.NONE_0') = s('type.option.option'(X660),X662)) ) | ($spl0 | $spl14 | $spl152)),
  inference(backward_demodulation,[],[f35832,f35320])).
fof(f4513,plain,(
  ( ! [X1] : (s(bool,'F_0') = s(bool,X1)) ) | $spl16),
  inference(cnf_transformation,[],[f4513_D])).
fof(f4513_D,plain,(
  ( ! [X1] : (s(bool,'F_0') = s(bool,X1)) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f37261,plain,(
  ( ! [X536,X532,X534,X533,X535] : (s(bool,'F_0') = s(bool,X536) | s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X532),X534),s(bool,X535),s(fun(X532,bool),X533))) | s('type.option.option'(X532),'const.option.NONE_0') = s('type.option.option'(X532),X534)) ) | ($spl0 | $spl14 | $spl152)),
  inference(forward_demodulation,[],[f37260,f901])).
fof(f37260,plain,(
  ( ! [X536,X532,X534,X533,X535] : (s(bool,X536) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X532),X534),s(bool,X535),s(fun(X532,bool),X533))) | s('type.option.option'(X532),'const.option.NONE_0') = s('type.option.option'(X532),X534)) ) | ($spl0 | $spl14 | $spl152)),
  inference(subsumption_resolution,[],[f37259,f12066])).
fof(f37259,plain,(
  ( ! [X536,X532,X534,X533,X535] : (s(bool,X536) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X532),X534),s(bool,X535),s(fun(X532,bool),X533))) | s(bool,'F_0') = s(bool,X536) | s('type.option.option'(X532),'const.option.NONE_0') = s('type.option.option'(X532),X534)) ) | ($spl0 | $spl14 | $spl152)),
  inference(forward_demodulation,[],[f36212,f191])).
fof(f36212,plain,(
  ( ! [X536,X532,X534,X533,X535] : (s(bool,X536) = s(bool,sK6('const.option.SOME_1'(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.pred_set.EMPTY_0')))),bool)) | s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X532),X534),s(bool,X535),s(fun(X532,bool),X533))) | s(bool,'F_0') = s(bool,X536) | s('type.option.option'(X532),'const.option.NONE_0') = s('type.option.option'(X532),X534)) ) | ($spl0 | $spl14 | $spl152)),
  inference(backward_demodulation,[],[f35832,f35295])).
fof(f4002,plain,(
  ( ! [X35] : (s(bool,'T_0') = s(bool,X35)) ) | $spl8),
  inference(cnf_transformation,[],[f4002_D])).
fof(f4002_D,plain,(
  ( ! [X35] : (s(bool,'T_0') = s(bool,X35)) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f37143,plain,(
  ( ! [X54,X52,X55,X53] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X52),'const.option.SOME_1'(s(X52,X53))),s(bool,X54),s(fun(X52,bool),X55)))) ) | $spl162),
  inference(cnf_transformation,[],[f37143_D])).
fof(f37143_D,plain,(
  ( ! [X54,X52,X55,X53] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X52),'const.option.SOME_1'(s(X52,X53))),s(bool,X54),s(fun(X52,bool),X55)))) ) <=> ~$spl162),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl162])])).
fof(f37154,plain,(
  ( ! [X61,X64,X62,X60,X63] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X60),'const.option.SOME_1'(s(X60,X61))),s(bool,X62),s(fun(X60,bool),X63))) | s(bool,'T_0') = s(bool,X64)) ) | ($spl0 | $spl14 | $spl152)),
  inference(subsumption_resolution,[],[f37153,f3994])).
fof(f37153,plain,(
  ( ! [X61,X64,X62,X60,X63] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X64))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X60),'const.option.SOME_1'(s(X60,X61))),s(bool,X62),s(fun(X60,bool),X63))) | s(bool,'T_0') = s(bool,X64)) ) | ($spl0 | $spl14 | $spl152)),
  inference(forward_demodulation,[],[f36014,f191])).
fof(f36014,plain,(
  ( ! [X61,X64,X62,X60,X63] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X64))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.pred_set.EMPTY_0'))))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X60),'const.option.SOME_1'(s(X60,X61))),s(bool,X62),s(fun(X60,bool),X63))) | s(bool,'T_0') = s(bool,X64)) ) | ($spl0 | $spl14 | $spl152)),
  inference(backward_demodulation,[],[f35832,f2844])).
fof(f37144,plain,(
  ( ! [X80,X78,X81,X79,X77,X82] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X81),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X81,bool),X82))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X77),'const.option.SOME_1'(s(X77,X78))),s(bool,X79),s(fun(X77,bool),X80)))) ) | ($spl0 | $spl14 | $spl152)),
  inference(forward_demodulation,[],[f36001,f191])).
fof(f36001,plain,(
  ( ! [X80,X78,X81,X79,X77,X82] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X81),'const.option.NONE_0'),s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.pred_set.EMPTY_0'))),s(fun(X81,bool),X82))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X77),'const.option.SOME_1'(s(X77,X78))),s(bool,X79),s(fun(X77,bool),X80)))) ) | ($spl0 | $spl14 | $spl152)),
  inference(backward_demodulation,[],[f35832,f2543])).
fof(f37142,plain,(
  ( ! [X54,X52,X56,X55,X53] : (s(bool,'T_0') = s(bool,X56) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X52),'const.option.SOME_1'(s(X52,X53))),s(bool,X54),s(fun(X52,bool),X55)))) ) | ($spl0 | $spl14 | $spl152)),
  inference(subsumption_resolution,[],[f35999,f782])).
fof(f35999,plain,(
  ( ! [X54,X52,X56,X55,X53] : (s(bool,X56) != s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.pred_set.EMPTY_0'))) | s(bool,'T_0') = s(bool,X56) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X52),'const.option.SOME_1'(s(X52,X53))),s(bool,X54),s(fun(X52,bool),X55)))) ) | ($spl0 | $spl14 | $spl152)),
  inference(backward_demodulation,[],[f35832,f2469])).
fof(f37013,plain,(
  ( ! [X59,X57,X60,X58] : (s(bool,'F_0') = s(bool,happ(s(fun(fun(X57,bool),bool),happ(s(fun(bool,fun(fun(X57,bool),bool)),happ(s(fun('type.option.option'(X57),fun(bool,fun(fun(X57,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X57),X58))),s(bool,X59))),s(fun(X57,bool),X60)))) ) | $spl158),
  inference(cnf_transformation,[],[f37013_D])).
fof(f37013_D,plain,(
  ( ! [X59,X57,X60,X58] : (s(bool,'F_0') = s(bool,happ(s(fun(fun(X57,bool),bool),happ(s(fun(bool,fun(fun(X57,bool),bool)),happ(s(fun('type.option.option'(X57),fun(bool,fun(fun(X57,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X57),X58))),s(bool,X59))),s(fun(X57,bool),X60)))) ) <=> ~$spl158),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl158])])).
fof(f37018,plain,(
  ( ! [X68,X66,X69,X67,X65] : (s(bool,'F_0') = s(bool,happ(s(fun(fun(X65,bool),bool),happ(s(fun(bool,fun(fun(X65,bool),bool)),happ(s(fun('type.option.option'(X65),fun(bool,fun(fun(X65,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X65),X66))),s(bool,X67))),s(fun(X65,bool),X68))) | s(bool,'T_0') = s(bool,X69)) ) | ($spl0 | $spl14 | $spl152)),
  inference(subsumption_resolution,[],[f37017,f3994])).
fof(f37017,plain,(
  ( ! [X68,X66,X69,X67,X65] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X69))) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X65,bool),bool),happ(s(fun(bool,fun(fun(X65,bool),bool)),happ(s(fun('type.option.option'(X65),fun(bool,fun(fun(X65,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X65),X66))),s(bool,X67))),s(fun(X65,bool),X68))) | s(bool,'T_0') = s(bool,X69)) ) | ($spl0 | $spl14 | $spl152)),
  inference(forward_demodulation,[],[f35867,f191])).
fof(f35867,plain,(
  ( ! [X68,X66,X69,X67,X65] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X69))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.pred_set.EMPTY_0'))))) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X65,bool),bool),happ(s(fun(bool,fun(fun(X65,bool),bool)),happ(s(fun('type.option.option'(X65),fun(bool,fun(fun(X65,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X65),X66))),s(bool,X67))),s(fun(X65,bool),X68))) | s(bool,'T_0') = s(bool,X69)) ) | ($spl0 | $spl14 | $spl152)),
  inference(backward_demodulation,[],[f35832,f2845])).
fof(f37014,plain,(
  ( ! [X88,X87,X85,X83,X86,X84] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X87),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X87,bool),X88))) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X83,bool),bool),happ(s(fun(bool,fun(fun(X83,bool),bool)),happ(s(fun('type.option.option'(X83),fun(bool,fun(fun(X83,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X83),X84))),s(bool,X85))),s(fun(X83,bool),X86)))) ) | ($spl0 | $spl14 | $spl152)),
  inference(forward_demodulation,[],[f35863,f191])).
fof(f35863,plain,(
  ( ! [X88,X87,X85,X83,X86,X84] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X87),'const.option.NONE_0'),s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.pred_set.EMPTY_0'))),s(fun(X87,bool),X88))) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X83,bool),bool),happ(s(fun(bool,fun(fun(X83,bool),bool)),happ(s(fun('type.option.option'(X83),fun(bool,fun(fun(X83,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X83),X84))),s(bool,X85))),s(fun(X83,bool),X86)))) ) | ($spl0 | $spl14 | $spl152)),
  inference(backward_demodulation,[],[f35832,f2544])).
fof(f37012,plain,(
  ( ! [X61,X59,X57,X60,X58] : (s(bool,'T_0') = s(bool,X61) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X57,bool),bool),happ(s(fun(bool,fun(fun(X57,bool),bool)),happ(s(fun('type.option.option'(X57),fun(bool,fun(fun(X57,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X57),X58))),s(bool,X59))),s(fun(X57,bool),X60)))) ) | ($spl0 | $spl14 | $spl152)),
  inference(subsumption_resolution,[],[f35861,f782])).
fof(f35861,plain,(
  ( ! [X61,X59,X57,X60,X58] : (s(bool,X61) != s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.pred_set.EMPTY_0'))) | s(bool,'T_0') = s(bool,X61) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X57,bool),bool),happ(s(fun(bool,fun(fun(X57,bool),bool)),happ(s(fun('type.option.option'(X57),fun(bool,fun(fun(X57,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X57),X58))),s(bool,X59))),s(fun(X57,bool),X60)))) ) | ($spl0 | $spl14 | $spl152)),
  inference(backward_demodulation,[],[f35832,f2470])).
fof(f35830,plain,(
  $false | ($spl0 | $spl152)),
  inference(subsumption_resolution,[],[f35829,f192])).
fof(f35829,plain,(
  s(bool,'T_0') = s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.pred_set.EMPTY_0'))) | ($spl0 | $spl152)),
  inference(forward_demodulation,[],[f35796,f166])).
fof(f35796,plain,(
  s(bool,'T_0') = s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),'const.option.NONE_0'),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3))))) | ($spl0 | $spl152)),
  inference(backward_demodulation,[],[f35787,f689])).
fof(f35787,plain,(
  s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),sK4) | $spl152),
  inference(cnf_transformation,[],[f35787_D])).
fof(f35787_D,plain,(
  s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),sK4) <=> ~$spl152),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl152])])).
fof(f35790,plain,(
  s(bool,'T_0') = s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),happ(s(fun(sK1,fun(sK0,bool)),sK3),s(sK1,sK6(sK4,sK1)))))) | $spl156),
  inference(cnf_transformation,[],[f35790_D])).
fof(f35790_D,plain,(
  s(bool,'T_0') = s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),happ(s(fun(sK1,fun(sK0,bool)),sK3),s(sK1,sK6(sK4,sK1)))))) <=> ~$spl156),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl156])])).
fof(f35572,plain,(
  s(bool,'T_0') = s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),happ(s(fun(sK1,fun(sK0,bool)),sK3),s(sK1,sK6(sK4,sK1)))))) | s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),sK4) | $spl0),
  inference(superposition,[],[f689,f559])).
fof(f35788,plain,(
  ( ! [X892] : (s(bool,X892) != s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),happ(s(fun(sK1,fun(sK0,bool)),sK3),s(sK1,sK6(sK4,sK1)))))) | s(bool,'T_0') = s(bool,X892)) ) | $spl154),
  inference(cnf_transformation,[],[f35788_D])).
fof(f35788_D,plain,(
  ( ! [X892] : (s(bool,X892) != s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),happ(s(fun(sK1,fun(sK0,bool)),sK3),s(sK1,sK6(sK4,sK1)))))) | s(bool,'T_0') = s(bool,X892)) ) <=> ~$spl154),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl154])])).
fof(f35571,plain,(
  ( ! [X892] : (s(bool,X892) != s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),happ(s(fun(sK1,fun(sK0,bool)),sK3),s(sK1,sK6(sK4,sK1)))))) | s(bool,'T_0') = s(bool,X892) | s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),sK4)) ) | $spl0),
  inference(superposition,[],[f766,f559])).
fof(f34365,plain,(
  ( ! [X123,X121,X124,X120,X119] : (s(X119,X121) = s(X119,sK7(X121,'const.option.option_CASE_3'(s('type.option.option'(X123),'const.option.NONE_0'),s(fun(X119,bool),X120),s(fun(X123,fun(X119,bool)),X124)),X119)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X119,bool),X120),s(X119,X121)))))) ) | $spl150),
  inference(cnf_transformation,[],[f34365_D])).
fof(f34365_D,plain,(
  ( ! [X123,X121,X124,X120,X119] : (s(X119,X121) = s(X119,sK7(X121,'const.option.option_CASE_3'(s('type.option.option'(X123),'const.option.NONE_0'),s(fun(X119,bool),X120),s(fun(X123,fun(X119,bool)),X124)),X119)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X119,bool),X120),s(X119,X121)))))) ) <=> ~$spl150),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl150])])).
fof(f15752,plain,(
  ( ! [X21] : (~p(s(bool,X21))) ) | $spl44),
  inference(cnf_transformation,[],[f15752_D])).
fof(f15752_D,plain,(
  ( ! [X21] : (~p(s(bool,X21))) ) <=> ~$spl44),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl44])])).
fof(f34364,plain,(
  ( ! [X123,X121,X124,X122,X120,X119] : (~p(s(bool,X122)) | s(X119,X121) = s(X119,sK7(X121,'const.option.option_CASE_3'(s('type.option.option'(X123),'const.option.NONE_0'),s(fun(X119,bool),X120),s(fun(X123,fun(X119,bool)),X124)),X119)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X119,bool),X120),s(X119,X121)))))) ) | $spl0),
  inference(subsumption_resolution,[],[f34267,f127])).
fof(f34267,plain,(
  ( ! [X123,X121,X124,X122,X120,X119] : (~p(s(bool,X122)) | s(X119,X121) = s(X119,sK7(X121,'const.option.option_CASE_3'(s('type.option.option'(X123),'const.option.NONE_0'),s(fun(X119,bool),X120),s(fun(X123,fun(X119,bool)),X124)),X119)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X119,bool),X120),s(X119,X121))))) | s(bool,'F_0') = s(bool,X122)) ) | $spl0),
  inference(superposition,[],[f434,f3902])).
fof(f32459,plain,(
  ( ! [X87] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X87))) | s(bool,X87) = s(bool,g(s(bool,'F_0')))) ) | $spl148),
  inference(cnf_transformation,[],[f32459_D])).
fof(f32459_D,plain,(
  ( ! [X87] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X87))) | s(bool,X87) = s(bool,g(s(bool,'F_0')))) ) <=> ~$spl148),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl148])])).
fof(f32428,plain,(
  ( ! [X0,X1] : (s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'T_0') = s(bool,sK8(X0,X1,bool,bool))) ) | $spl104),
  inference(cnf_transformation,[],[f32428_D])).
fof(f32428_D,plain,(
  ( ! [X0,X1] : (s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'T_0') = s(bool,sK8(X0,X1,bool,bool))) ) <=> ~$spl104),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl104])])).
fof(f32433,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | $spl111),
  inference(cnf_transformation,[],[f32433_D])).
fof(f32433_D,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) <=> ~$spl111),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl111])])).
fof(f32423,plain,(
  ( ! [X87,X85,X86] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X85) = s(fun(bool,bool),X86) | s(bool,'T_0') = s(bool,sK8(X85,X86,bool,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X87))) | s(bool,X87) = s(bool,g(s(bool,'F_0')))) ) | $spl0),
  inference(superposition,[],[f769,f14030])).
fof(f32458,plain,(
  s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,g(s(bool,'F_0'))))) | $spl146),
  inference(cnf_transformation,[],[f32458_D])).
fof(f32458_D,plain,(
  s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,g(s(bool,'F_0'))))) <=> ~$spl146),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl146])])).
fof(f32434,plain,(
  ( ! [X5] : (s(bool,X5) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X5)) ) | $spl112),
  inference(cnf_transformation,[],[f32434_D])).
fof(f32434_D,plain,(
  ( ! [X5] : (s(bool,X5) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X5)) ) <=> ~$spl112),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl112])])).
fof(f32422,plain,(
  ( ! [X83,X84,X82] : (s(bool,X82) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X83) = s(fun(bool,bool),X84) | s(bool,'T_0') = s(bool,sK8(X83,X84,bool,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,g(s(bool,'F_0'))))) | s(bool,'T_0') = s(bool,X82)) ) | $spl0),
  inference(superposition,[],[f769,f14030])).
fof(f32427,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'F_0'))) | $spl102),
  inference(cnf_transformation,[],[f32427_D])).
fof(f32427_D,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'F_0'))) <=> ~$spl102),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl102])])).
fof(f32456,plain,(
  ( ! [X79] : (s(bool,X79) != s(bool,f(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X79)))) ) | $spl144),
  inference(cnf_transformation,[],[f32456_D])).
fof(f32456_D,plain,(
  ( ! [X79] : (s(bool,X79) != s(bool,f(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X79)))) ) <=> ~$spl144),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl144])])).
fof(f32421,plain,(
  ( ! [X80,X81,X79] : (s(bool,X79) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X80) = s(fun(bool,bool),X81) | s(bool,'T_0') = s(bool,sK8(X80,X81,bool,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X79))) | s(bool,'T_0') = s(bool,g(s(bool,'F_0')))) ) | $spl0),
  inference(superposition,[],[f769,f14030])).
fof(f32455,plain,(
  ( ! [X78] : (s(bool,X78) = s(bool,g(s(bool,'F_0'))) | s(bool,X78) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | $spl142),
  inference(cnf_transformation,[],[f32455_D])).
fof(f32455_D,plain,(
  ( ! [X78] : (s(bool,X78) = s(bool,g(s(bool,'F_0'))) | s(bool,X78) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) <=> ~$spl142),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl142])])).
fof(f32430,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | $spl107),
  inference(cnf_transformation,[],[f32430_D])).
fof(f32430_D,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) <=> ~$spl107),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl107])])).
fof(f32420,plain,(
  ( ! [X78,X76,X77] : (s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X76) = s(fun(bool,bool),X77) | s(bool,'T_0') = s(bool,sK8(X76,X77,bool,bool)) | s(bool,X78) = s(bool,g(s(bool,'F_0'))) | s(bool,X78) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl14)),
  inference(superposition,[],[f769,f9766])).
fof(f32437,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'F_0'))) | $spl116),
  inference(cnf_transformation,[],[f32437_D])).
fof(f32437_D,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'F_0'))) <=> ~$spl116),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl116])])).
fof(f32454,plain,(
  ( ! [X73] : (s(bool,X73) != s(bool,f(s(bool,'F_0'))) | s(bool,X73) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | $spl140),
  inference(cnf_transformation,[],[f32454_D])).
fof(f32454_D,plain,(
  ( ! [X73] : (s(bool,X73) != s(bool,f(s(bool,'F_0'))) | s(bool,X73) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) <=> ~$spl140),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl140])])).
fof(f32419,plain,(
  ( ! [X74,X75,X73] : (s(bool,X73) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X74) = s(fun(bool,bool),X75) | s(bool,'T_0') = s(bool,sK8(X74,X75,bool,bool)) | s(bool,'F_0') = s(bool,g(s(bool,'F_0'))) | s(bool,X73) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl14)),
  inference(superposition,[],[f769,f9766])).
fof(f32438,plain,(
  ( ! [X17] : (s(bool,X17) != s(bool,f(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X17)) ) | $spl118),
  inference(cnf_transformation,[],[f32438_D])).
fof(f32438_D,plain,(
  ( ! [X17] : (s(bool,X17) != s(bool,f(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X17)) ) <=> ~$spl118),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl118])])).
fof(f32453,plain,(
  ( ! [X70,X72,X71] : (s(bool,'F_0') = s(bool,g(s(bool,'F_0'))) | s(bool,X70) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X71) = s(fun(bool,bool),X72) | s(bool,'T_0') = s(bool,sK8(X71,X72,bool,bool)) | s(bool,'F_0') = s(bool,X70)) ) | ($spl0 | $spl14)),
  inference(forward_demodulation,[],[f32418,f901])).
fof(f32418,plain,(
  ( ! [X70,X72,X71] : (s(bool,X70) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X71) = s(fun(bool,bool),X72) | s(bool,'T_0') = s(bool,sK8(X71,X72,bool,bool)) | s(bool,'F_0') = s(bool,X70) | s(bool,g(s(bool,'F_0'))) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl14)),
  inference(superposition,[],[f769,f9766])).
fof(f32452,plain,(
  ( ! [X67] : (s(bool,X67) != s(bool,f(s(bool,'F_0'))) | s(bool,X67) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl138),
  inference(cnf_transformation,[],[f32452_D])).
fof(f32452_D,plain,(
  ( ! [X67] : (s(bool,X67) != s(bool,f(s(bool,'F_0'))) | s(bool,X67) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) <=> ~$spl138),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl138])])).
fof(f32417,plain,(
  ( ! [X68,X69,X67] : (s(bool,X67) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X68) = s(fun(bool,bool),X69) | s(bool,'T_0') = s(bool,sK8(X68,X69,bool,bool)) | s(bool,X67) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,g(s(bool,'F_0')))) ) | $spl0),
  inference(superposition,[],[f769,f9397])).
fof(f32451,plain,(
  ( ! [X66,X64,X65] : (s(bool,'T_0') = s(bool,g(s(bool,'F_0'))) | s(bool,X64) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X65) = s(fun(bool,bool),X66) | s(bool,'T_0') = s(bool,sK8(X65,X66,bool,bool)) | s(bool,'T_0') = s(bool,X64)) ) | $spl0),
  inference(forward_demodulation,[],[f32416,f901])).
fof(f32416,plain,(
  ( ! [X66,X64,X65] : (s(bool,X64) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X65) = s(fun(bool,bool),X66) | s(bool,'T_0') = s(bool,sK8(X65,X66,bool,bool)) | s(bool,g(s(bool,'F_0'))) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,X64)) ) | $spl0),
  inference(superposition,[],[f769,f9397])).
fof(f32450,plain,(
  ( ! [X63] : (s(bool,X63) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X63) = s(bool,g(s(bool,'F_0')))) ) | $spl136),
  inference(cnf_transformation,[],[f32450_D])).
fof(f32450_D,plain,(
  ( ! [X63] : (s(bool,X63) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X63) = s(bool,g(s(bool,'F_0')))) ) <=> ~$spl136),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl136])])).
fof(f32415,plain,(
  ( ! [X61,X62,X63] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X61) = s(fun(bool,bool),X62) | s(bool,'T_0') = s(bool,sK8(X61,X62,bool,bool)) | s(bool,X63) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X63) = s(bool,g(s(bool,'F_0')))) ) | $spl0),
  inference(superposition,[],[f769,f9397])).
fof(f32449,plain,(
  ( ! [X58] : (s(bool,X58) != s(bool,f(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X58)))) ) | $spl134),
  inference(cnf_transformation,[],[f32449_D])).
fof(f32449_D,plain,(
  ( ! [X58] : (s(bool,X58) != s(bool,f(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X58)))) ) <=> ~$spl134),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl134])])).
fof(f32414,plain,(
  ( ! [X59,X60,X58] : (s(bool,X58) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X59) = s(fun(bool,bool),X60) | s(bool,'T_0') = s(bool,sK8(X59,X60,bool,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X58))) | s(bool,'F_0') = s(bool,g(s(bool,'F_0')))) ) | $spl0),
  inference(superposition,[],[f769,f3902])).
fof(f32448,plain,(
  s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,g(s(bool,'F_0'))))) | $spl132),
  inference(cnf_transformation,[],[f32448_D])).
fof(f32448_D,plain,(
  s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,g(s(bool,'F_0'))))) <=> ~$spl132),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl132])])).
fof(f32413,plain,(
  ( ! [X57,X56,X55] : (s(bool,X55) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X56) = s(fun(bool,bool),X57) | s(bool,'T_0') = s(bool,sK8(X56,X57,bool,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,g(s(bool,'F_0'))))) | s(bool,'F_0') = s(bool,X55)) ) | $spl0),
  inference(superposition,[],[f769,f3902])).
fof(f32446,plain,(
  ( ! [X54] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X54))) | s(bool,X54) = s(bool,g(s(bool,'F_0')))) ) | $spl130),
  inference(cnf_transformation,[],[f32446_D])).
fof(f32446_D,plain,(
  ( ! [X54] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X54))) | s(bool,X54) = s(bool,g(s(bool,'F_0')))) ) <=> ~$spl130),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl130])])).
fof(f32412,plain,(
  ( ! [X54,X52,X53] : (s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X52) = s(fun(bool,bool),X53) | s(bool,'T_0') = s(bool,sK8(X52,X53,bool,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X54))) | s(bool,X54) = s(bool,g(s(bool,'F_0')))) ) | $spl0),
  inference(superposition,[],[f769,f3902])).
fof(f32445,plain,(
  ( ! [X47,X50,X51] : (s(bool,X47) != s(bool,f(s(bool,'F_0'))) | s(bool,X47) = s(bool,'const.bool.IN_2'(s(X50,X51),s(fun(X50,bool),'const.pred_set.EMPTY_0')))) ) | $spl128),
  inference(cnf_transformation,[],[f32445_D])).
fof(f32445_D,plain,(
  ( ! [X47,X50,X51] : (s(bool,X47) != s(bool,f(s(bool,'F_0'))) | s(bool,X47) = s(bool,'const.bool.IN_2'(s(X50,X51),s(fun(X50,bool),'const.pred_set.EMPTY_0')))) ) <=> ~$spl128),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl128])])).
fof(f32411,plain,(
  ( ! [X47,X50,X48,X51,X49] : (s(bool,X47) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X48) = s(fun(bool,bool),X49) | s(bool,'T_0') = s(bool,sK8(X48,X49,bool,bool)) | s(bool,X47) = s(bool,'const.bool.IN_2'(s(X50,X51),s(fun(X50,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,g(s(bool,'F_0')))) ) | $spl0),
  inference(superposition,[],[f769,f2976])).
fof(f32444,plain,(
  ( ! [X43,X44,X42] : (s(bool,'F_0') = s(bool,g(s(bool,'F_0'))) | s(bool,X42) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X43) = s(fun(bool,bool),X44) | s(bool,'T_0') = s(bool,sK8(X43,X44,bool,bool)) | s(bool,'F_0') = s(bool,X42)) ) | $spl0),
  inference(forward_demodulation,[],[f32410,f191])).
fof(f32410,plain,(
  ( ! [X45,X43,X46,X44,X42] : (s(bool,X42) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X43) = s(fun(bool,bool),X44) | s(bool,'T_0') = s(bool,sK8(X43,X44,bool,bool)) | s(bool,g(s(bool,'F_0'))) = s(bool,'const.bool.IN_2'(s(X45,X46),s(fun(X45,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X42)) ) | $spl0),
  inference(superposition,[],[f769,f2976])).
fof(f32443,plain,(
  ( ! [X39,X41,X40] : (s(bool,X39) = s(bool,'const.bool.IN_2'(s(X40,X41),s(fun(X40,bool),'const.pred_set.EMPTY_0'))) | s(bool,X39) = s(bool,g(s(bool,'F_0')))) ) | $spl126),
  inference(cnf_transformation,[],[f32443_D])).
fof(f32443_D,plain,(
  ( ! [X39,X41,X40] : (s(bool,X39) = s(bool,'const.bool.IN_2'(s(X40,X41),s(fun(X40,bool),'const.pred_set.EMPTY_0'))) | s(bool,X39) = s(bool,g(s(bool,'F_0')))) ) <=> ~$spl126),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl126])])).
fof(f32409,plain,(
  ( ! [X39,X37,X41,X38,X40] : (s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X37) = s(fun(bool,bool),X38) | s(bool,'T_0') = s(bool,sK8(X37,X38,bool,bool)) | s(bool,X39) = s(bool,'const.bool.IN_2'(s(X40,X41),s(fun(X40,bool),'const.pred_set.EMPTY_0'))) | s(bool,X39) = s(bool,g(s(bool,'F_0')))) ) | $spl0),
  inference(superposition,[],[f769,f2976])).
fof(f32442,plain,(
  ( ! [X34] : (s(bool,X34) = s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X34)),bool))) ) | $spl124),
  inference(cnf_transformation,[],[f32442_D])).
fof(f32442_D,plain,(
  ( ! [X34] : (s(bool,X34) = s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X34)),bool))) ) <=> ~$spl124),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl124])])).
fof(f32408,plain,(
  ( ! [X33,X34,X32] : (s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X32) = s(fun(bool,bool),X33) | s(bool,'T_0') = s(bool,sK8(X32,X33,bool,bool)) | s(bool,X34) = s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X34)),bool))) ) | $spl0),
  inference(superposition,[],[f769,f1834])).
fof(f32441,plain,(
  ( ! [X29] : (s(bool,X29) != s(bool,f(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X29)),bool))) ) | $spl122),
  inference(cnf_transformation,[],[f32441_D])).
fof(f32441_D,plain,(
  ( ! [X29] : (s(bool,X29) != s(bool,f(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X29)),bool))) ) <=> ~$spl122),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl122])])).
fof(f32407,plain,(
  ( ! [X30,X31,X29] : (s(bool,X29) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X30) = s(fun(bool,bool),X31) | s(bool,'T_0') = s(bool,sK8(X30,X31,bool,bool)) | s(bool,'F_0') = s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X29)),bool))) ) | $spl0),
  inference(superposition,[],[f769,f1834])).
fof(f32440,plain,(
  s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,g(s(bool,'F_0')))),bool)) | $spl120),
  inference(cnf_transformation,[],[f32440_D])).
fof(f32440_D,plain,(
  s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,g(s(bool,'F_0')))),bool)) <=> ~$spl120),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl120])])).
fof(f32406,plain,(
  ( ! [X28,X26,X27] : (s(bool,X26) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X27) = s(fun(bool,bool),X28) | s(bool,'T_0') = s(bool,sK8(X27,X28,bool,bool)) | s(bool,'F_0') = s(bool,X26) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,g(s(bool,'F_0')))),bool))) ) | $spl0),
  inference(superposition,[],[f769,f1834])).
fof(f32435,plain,(
  ( ! [X16] : (s(bool,X16) = s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X16)) ) | $spl114),
  inference(cnf_transformation,[],[f32435_D])).
fof(f32435_D,plain,(
  ( ! [X16] : (s(bool,X16) = s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X16)) ) <=> ~$spl114),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl114])])).
fof(f32405,plain,(
  ( ! [X24,X23,X25] : (s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X23) = s(fun(bool,bool),X24) | s(bool,'T_0') = s(bool,sK8(X23,X24,bool,bool)) | s(bool,X25) = s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X25)) ) | $spl0),
  inference(superposition,[],[f769,f1632])).
fof(f32404,plain,(
  ( ! [X21,X22,X20] : (s(bool,X20) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X21) = s(fun(bool,bool),X22) | s(bool,'T_0') = s(bool,sK8(X21,X22,bool,bool)) | s(bool,'F_0') = s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X20)) ) | $spl0),
  inference(superposition,[],[f769,f1632])).
fof(f32403,plain,(
  ( ! [X19,X17,X18] : (s(bool,X17) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X18) = s(fun(bool,bool),X19) | s(bool,'T_0') = s(bool,sK8(X18,X19,bool,bool)) | s(bool,'F_0') = s(bool,X17) | s(bool,'F_0') = s(bool,g(s(bool,'F_0')))) ) | $spl0),
  inference(superposition,[],[f769,f1632])).
fof(f32402,plain,(
  ( ! [X14,X15,X16] : (s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X14) = s(fun(bool,bool),X15) | s(bool,'T_0') = s(bool,sK8(X14,X15,bool,bool)) | s(bool,X16) = s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X16)) ) | $spl0),
  inference(superposition,[],[f769,f1632])).
fof(f32431,plain,(
  ( ! [X4] : (s(bool,X4) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X4)) ) | $spl108),
  inference(cnf_transformation,[],[f32431_D])).
fof(f32431_D,plain,(
  ( ! [X4] : (s(bool,X4) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X4)) ) <=> ~$spl108),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl108])])).
fof(f32401,plain,(
  ( ! [X12,X13,X11] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X11) = s(fun(bool,bool),X12) | s(bool,'T_0') = s(bool,sK8(X11,X12,bool,bool)) | s(bool,X13) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X13)) )),
  inference(superposition,[],[f769,f208])).
fof(f32400,plain,(
  ( ! [X10,X8,X9] : (s(bool,X8) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X9) = s(fun(bool,bool),X10) | s(bool,'T_0') = s(bool,sK8(X9,X10,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f769,f208])).
fof(f32399,plain,(
  ( ! [X6,X7,X5] : (s(bool,X5) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X6) = s(fun(bool,bool),X7) | s(bool,'T_0') = s(bool,sK8(X6,X7,bool,bool)) | s(bool,'T_0') = s(bool,X5) | s(bool,'T_0') = s(bool,g(s(bool,'F_0')))) )),
  inference(superposition,[],[f769,f208])).
fof(f32398,plain,(
  ( ! [X4,X2,X3] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X2) = s(fun(bool,bool),X3) | s(bool,'T_0') = s(bool,sK8(X2,X3,bool,bool)) | s(bool,X4) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f769,f208])).
fof(f32397,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'T_0') = s(bool,sK8(X0,X1,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,'F_0')))) )),
  inference(superposition,[],[f769,f121])).
fof(f32260,plain,(
  ( ! [X76,X74,X75] : (s(X74,X76) = s(X74,sK7(sK6('const.option.SOME_1'(s(X74,X76)),X74),X75,X74)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X74,bool),X75),s(X74,X76)))))) ) | $spl100),
  inference(cnf_transformation,[],[f32260_D])).
fof(f32260_D,plain,(
  ( ! [X76,X74,X75] : (s(X74,X76) = s(X74,sK7(sK6('const.option.SOME_1'(s(X74,X76)),X74),X75,X74)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X74,bool),X75),s(X74,X76)))))) ) <=> ~$spl100),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl100])])).
fof(f32122,plain,(
  ( ! [X76,X74,X77,X75] : (s(bool,'F_0') = s(bool,X77) | s(X74,X76) = s(X74,sK7(sK6('const.option.SOME_1'(s(X74,X76)),X74),X75,X74)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X74,bool),X75),s(X74,X76)))))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f31754])).
fof(f31754,plain,(
  ( ! [X76,X74,X77,X75] : (s(bool,'F_0') = s(bool,X77) | s(X74,X76) = s(X74,sK7(sK6('const.option.SOME_1'(s(X74,X76)),X74),X75,X74)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X74,bool),X75),s(X74,X76))))) | s(bool,'F_0') = s(bool,X77)) ) | $spl0),
  inference(superposition,[],[f2781,f3902])).
fof(f31417,plain,(
  ( ! [X61,X60] : (p(s(bool,happ(s(fun(bool,bool),X60),s(bool,'F_0')))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X60),s(bool,X61))))) | s(bool,'T_0') = s(bool,sK7(X61,X60,bool))) ) | $spl98),
  inference(cnf_transformation,[],[f31417_D])).
fof(f31417_D,plain,(
  ( ! [X61,X60] : (p(s(bool,happ(s(fun(bool,bool),X60),s(bool,'F_0')))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X60),s(bool,X61))))) | s(bool,'T_0') = s(bool,sK7(X61,X60,bool))) ) <=> ~$spl98),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl98])])).
fof(f31416,plain,(
  ( ! [X61,X62,X60] : (~p(s(bool,X62)) | p(s(bool,happ(s(fun(bool,bool),X60),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X61,X60,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X60),s(bool,X61)))))) ) | $spl0),
  inference(subsumption_resolution,[],[f31348,f127])).
fof(f31348,plain,(
  ( ! [X61,X62,X60] : (~p(s(bool,X62)) | p(s(bool,happ(s(fun(bool,bool),X60),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X61,X60,bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X60),s(bool,X61))))) | s(bool,'F_0') = s(bool,X62)) ) | $spl0),
  inference(superposition,[],[f532,f3902])).
fof(f31406,plain,(
  ( ! [X19,X20] : (p(s(bool,happ(s(fun(bool,bool),X19),s(bool,'F_0')))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X19),s(bool,X20))) | s(bool,'T_0') = s(bool,sK7(X20,X19,bool))) ) | $spl96),
  inference(cnf_transformation,[],[f31406_D])).
fof(f31406_D,plain,(
  ( ! [X19,X20] : (p(s(bool,happ(s(fun(bool,bool),X19),s(bool,'F_0')))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X19),s(bool,X20))) | s(bool,'T_0') = s(bool,sK7(X20,X19,bool))) ) <=> ~$spl96),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl96])])).
fof(f31409,plain,(
  ( ! [X30,X28,X29] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X28),s(bool,X29))) | ~p(s(bool,X30)) | p(s(bool,happ(s(fun(bool,bool),X28),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X29,X28,bool))) ) | $spl0),
  inference(forward_demodulation,[],[f31408,f901])).
fof(f31408,plain,(
  ( ! [X30,X28,X29] : (~p(s(bool,X30)) | p(s(bool,happ(s(fun(bool,bool),X28),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X29,X28,bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X28),s(bool,X29)))),bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f31340,f127])).
fof(f31340,plain,(
  ( ! [X30,X28,X29] : (~p(s(bool,X30)) | p(s(bool,happ(s(fun(bool,bool),X28),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X29,X28,bool)) | s(bool,'F_0') = s(bool,X30) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X28),s(bool,X29)))),bool))) ) | $spl0),
  inference(superposition,[],[f532,f1834])).
fof(f31407,plain,(
  ( ! [X24,X23,X22] : (~p(s(bool,X24)) | p(s(bool,happ(s(fun(bool,bool),X22),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X23,X22,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X22),s(bool,X23)))) ) | $spl0),
  inference(subsumption_resolution,[],[f31338,f127])).
fof(f31338,plain,(
  ( ! [X24,X23,X22] : (~p(s(bool,X24)) | p(s(bool,happ(s(fun(bool,bool),X22),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X23,X22,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X22),s(bool,X23))) | s(bool,'F_0') = s(bool,X24)) ) | $spl0),
  inference(superposition,[],[f532,f1632])).
fof(f31405,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,X21)) | p(s(bool,happ(s(fun(bool,bool),X19),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X20,X19,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X19),s(bool,X20)))) ) | $spl0),
  inference(subsumption_resolution,[],[f31337,f127])).
fof(f31337,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,X21)) | p(s(bool,happ(s(fun(bool,bool),X19),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK7(X20,X19,bool)) | s(bool,'F_0') = s(bool,X21) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X19),s(bool,X20)))) ) | $spl0),
  inference(superposition,[],[f532,f1632])).
fof(f30648,plain,(
  ( ! [X118,X116,X114,X119,X115] : (s(X114,X116) = s(X114,sK7('const.option.option_CASE_3'(s('type.option.option'(X118),'const.option.NONE_0'),s(X114,X116),s(fun(X118,X114),X119)),X115,X114)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X114,bool),X115),s(X114,X116)))))) ) | $spl94),
  inference(cnf_transformation,[],[f30648_D])).
fof(f30648_D,plain,(
  ( ! [X118,X116,X114,X119,X115] : (s(X114,X116) = s(X114,sK7('const.option.option_CASE_3'(s('type.option.option'(X118),'const.option.NONE_0'),s(X114,X116),s(fun(X118,X114),X119)),X115,X114)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X114,bool),X115),s(X114,X116)))))) ) <=> ~$spl94),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl94])])).
fof(f30647,plain,(
  ( ! [X118,X116,X114,X119,X117,X115] : (~p(s(bool,X117)) | s(X114,X116) = s(X114,sK7('const.option.option_CASE_3'(s('type.option.option'(X118),'const.option.NONE_0'),s(X114,X116),s(fun(X118,X114),X119)),X115,X114)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X114,bool),X115),s(X114,X116)))))) ) | $spl0),
  inference(subsumption_resolution,[],[f30556,f127])).
fof(f30556,plain,(
  ( ! [X118,X116,X114,X119,X117,X115] : (~p(s(bool,X117)) | s(X114,X116) = s(X114,sK7('const.option.option_CASE_3'(s('type.option.option'(X118),'const.option.NONE_0'),s(X114,X116),s(fun(X118,X114),X119)),X115,X114)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X114,bool),X115),s(X114,X116))))) | s(bool,'F_0') = s(bool,X117)) ) | $spl0),
  inference(superposition,[],[f447,f3902])).
fof(f23674,plain,(
  ( ! [X70,X68,X66,X69,X67] : (s(bool,X66) != s(bool,'const.bool.IN_2'(s(X67,X68),s(fun(X67,bool),'const.pred_set.EMPTY_0'))) | s(bool,X66) = s(bool,'const.bool.IN_2'(s(X69,X70),s(fun(X69,bool),'const.pred_set.EMPTY_0')))) ) | $spl92),
  inference(cnf_transformation,[],[f23674_D])).
fof(f23674_D,plain,(
  ( ! [X70,X68,X66,X69,X67] : (s(bool,X66) != s(bool,'const.bool.IN_2'(s(X67,X68),s(fun(X67,bool),'const.pred_set.EMPTY_0'))) | s(bool,X66) = s(bool,'const.bool.IN_2'(s(X69,X70),s(fun(X69,bool),'const.pred_set.EMPTY_0')))) ) <=> ~$spl92),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl92])])).
fof(f23663,plain,(
  ( ! [X70,X68,X66,X69,X67,X65] : (s(bool,X66) != s(bool,'const.bool.IN_2'(s(X67,X68),s(fun(X67,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X65) | s(bool,X66) = s(bool,'const.bool.IN_2'(s(X69,X70),s(fun(X69,bool),'const.pred_set.EMPTY_0')))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f23504])).
fof(f23504,plain,(
  ( ! [X70,X68,X66,X69,X67,X65] : (s(bool,X66) != s(bool,'const.bool.IN_2'(s(X67,X68),s(fun(X67,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X65) | s(bool,X66) = s(bool,'const.bool.IN_2'(s(X69,X70),s(fun(X69,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X65)) ) | $spl0),
  inference(superposition,[],[f22550,f2976])).
fof(f23356,plain,(
  ( ! [X237,X235,X233,X236] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X233))) | s(bool,X233) = s(bool,X235) | s(bool,X235) = s(bool,'const.bool.IN_2'(s(X236,X237),s(fun(X236,bool),'const.pred_set.EMPTY_0')))) ) | $spl90),
  inference(cnf_transformation,[],[f23356_D])).
fof(f23356_D,plain,(
  ( ! [X237,X235,X233,X236] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X233))) | s(bool,X233) = s(bool,X235) | s(bool,X235) = s(bool,'const.bool.IN_2'(s(X236,X237),s(fun(X236,bool),'const.pred_set.EMPTY_0')))) ) <=> ~$spl90),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl90])])).
fof(f22454,plain,(
  ( ! [X237,X235,X233,X236,X234] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X233))) | s(bool,'F_0') = s(bool,X234) | s(bool,X235) = s(bool,'const.bool.IN_2'(s(X236,X237),s(fun(X236,bool),'const.pred_set.EMPTY_0'))) | s(bool,X233) = s(bool,X235)) ) | $spl0),
  inference(duplicate_literal_removal,[],[f22118])).
fof(f22118,plain,(
  ( ! [X237,X235,X233,X236,X234] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X233))) | s(bool,'F_0') = s(bool,X234) | s(bool,'F_0') = s(bool,X234) | s(bool,X235) = s(bool,'const.bool.IN_2'(s(X236,X237),s(fun(X236,bool),'const.pred_set.EMPTY_0'))) | s(bool,X233) = s(bool,X235)) ) | $spl0),
  inference(superposition,[],[f1758,f2976])).
fof(f23243,plain,(
  ( ! [X94,X92,X95,X93] : (s(bool,X92) != s(bool,X93) | s(bool,X92) = s(bool,'const.bool.IN_2'(s(X94,X95),s(fun(X94,bool),'const.pred_set.EMPTY_0'))) | s(bool,'T_0') = s(bool,X93)) ) | $spl78),
  inference(cnf_transformation,[],[f23243_D])).
fof(f23243_D,plain,(
  ( ! [X94,X92,X95,X93] : (s(bool,X92) != s(bool,X93) | s(bool,X92) = s(bool,'const.bool.IN_2'(s(X94,X95),s(fun(X94,bool),'const.pred_set.EMPTY_0'))) | s(bool,'T_0') = s(bool,X93)) ) <=> ~$spl78),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl78])])).
fof(f23283,plain,(
  ( ! [X432,X434,X431,X433,X435] : (s(bool,'F_0') = s(bool,X431) | s(bool,X432) != s(bool,X433) | s(bool,'T_0') = s(bool,X433) | s(bool,X432) = s(bool,'const.bool.IN_2'(s(X434,X435),s(fun(X434,bool),'const.pred_set.EMPTY_0')))) ) | ($spl0 | $spl14)),
  inference(forward_demodulation,[],[f23282,f901])).
fof(f23282,plain,(
  ( ! [X432,X434,X431,X433,X435] : (s(bool,X432) != s(bool,X433) | s(bool,'T_0') = s(bool,X433) | s(bool,X431) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,X432) = s(bool,'const.bool.IN_2'(s(X434,X435),s(fun(X434,bool),'const.pred_set.EMPTY_0')))) ) | ($spl0 | $spl14)),
  inference(subsumption_resolution,[],[f21943,f12066])).
fof(f21943,plain,(
  ( ! [X432,X434,X431,X433,X435] : (s(bool,X432) != s(bool,X433) | s(bool,'T_0') = s(bool,X433) | s(bool,X431) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,X432) = s(bool,'const.bool.IN_2'(s(X434,X435),s(fun(X434,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X431)) ) | ($spl0 | $spl14)),
  inference(superposition,[],[f12063,f2976])).
fof(f12063,plain,(
  ( ! [X85,X86] : (s(bool,X85) != s(bool,X86) | s(bool,'T_0') = s(bool,X86) | s(bool,X85) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl14)),
  inference(global_subsumption,[],[f12062,f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f782,f828,f901,f914,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1188,f1191,f1256,f1265,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1783,f3994,f3951,f3948,f3019,f3018,f3015,f2847,f2846,f2843,f2821,f2820,f2817,f2616,f2583,f2542,f1615,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f4512,f4840,f4901,f4948,f5259,f5269,f5543,f5584,f5364,f5417,f5637,f5639,f5465,f5640,f5650,f5599,f5596,f469,f736,f446,f440,f2622,f1300,f1071,f5231,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f615,f593,f876,f855,f607,f862,f3949,f3016,f2844,f2818,f2543,f1580,f1123,f1093,f1062,f1018,f1005,f989,f572,f535,f534,f447,f434,f161,f160,f159,f3950,f3017,f2845,f2819,f2544,f1124,f1094,f1063,f864,f863,f840,f826,f5589,f1309,f1184,f770])).
fof(f12062,plain,(
  ( ! [X85,X86,X84] : (s(bool,X85) != s(bool,X86) | s(bool,'T_0') = s(bool,X86) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X84)),bool)) | s(bool,X85) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl14)),
  inference(subsumption_resolution,[],[f11114,f3910])).
fof(f11114,plain,(
  ( ! [X85,X86,X84] : (s(bool,X85) != s(bool,X86) | s(bool,'T_0') = s(bool,X86) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X84)),bool)) | s(bool,'F_0') = s(bool,X84) | s(bool,X85) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl14)),
  inference(superposition,[],[f2471,f9766])).
fof(f23281,plain,(
  ( ! [X420,X416,X418,X417,X419] : (s(bool,'T_0') = s(bool,X418) | s(bool,X417) != s(bool,X418) | s(bool,'F_0') = s(bool,X416) | s(bool,X417) = s(bool,'const.bool.IN_2'(s(X419,X420),s(fun(X419,bool),'const.pred_set.EMPTY_0')))) ) | ($spl0 | $spl14)),
  inference(forward_demodulation,[],[f22462,f901])).
fof(f22462,plain,(
  ( ! [X420,X416,X418,X417,X419] : (s(bool,X417) != s(bool,X418) | s(bool,X418) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'F_0') = s(bool,X416) | s(bool,X417) = s(bool,'const.bool.IN_2'(s(X419,X420),s(fun(X419,bool),'const.pred_set.EMPTY_0')))) ) | ($spl0 | $spl14)),
  inference(duplicate_literal_removal,[],[f21940])).
fof(f21940,plain,(
  ( ! [X420,X416,X418,X417,X419] : (s(bool,X417) != s(bool,X418) | s(bool,X418) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'F_0') = s(bool,X416) | s(bool,X417) = s(bool,'const.bool.IN_2'(s(X419,X420),s(fun(X419,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X416)) ) | ($spl0 | $spl14)),
  inference(superposition,[],[f11972,f2976])).
fof(f11972,plain,(
  ( ! [X212,X213] : (s(bool,X212) != s(bool,X213) | s(bool,X213) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'F_0') = s(bool,X212)) ) | ($spl0 | $spl14)),
  inference(subsumption_resolution,[],[f11016,f4454])).
fof(f11016,plain,(
  ( ! [X212,X213] : (s(bool,X212) != s(bool,X213) | s(bool,X213) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'F_0') = s(bool,X212) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl14)),
  inference(superposition,[],[f9392,f9766])).
fof(f22737,plain,(
  ( ! [X94,X93,X91] : (s(bool,X91) = s(bool,'const.bool.IN_2'(s(X93,X94),s(fun(X93,bool),'const.pred_set.EMPTY_0'))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X91)),bool))) ) | $spl60),
  inference(cnf_transformation,[],[f22737_D])).
fof(f22737_D,plain,(
  ( ! [X94,X93,X91] : (s(bool,X91) = s(bool,'const.bool.IN_2'(s(X93,X94),s(fun(X93,bool),'const.pred_set.EMPTY_0'))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X91)),bool))) ) <=> ~$spl60),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl60])])).
fof(f23267,plain,(
  ( ! [X292,X294,X293,X291] : (s(bool,'F_0') = s(bool,X291) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X292)),bool)) | s(bool,X292) = s(bool,'const.bool.IN_2'(s(X293,X294),s(fun(X293,bool),'const.pred_set.EMPTY_0')))) ) | ($spl0 | $spl14)),
  inference(forward_demodulation,[],[f23266,f901])).
fof(f23266,plain,(
  ( ! [X292,X294,X293,X291] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X292)),bool)) | s(bool,X291) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,X292) = s(bool,'const.bool.IN_2'(s(X293,X294),s(fun(X293,bool),'const.pred_set.EMPTY_0')))) ) | ($spl0 | $spl14)),
  inference(subsumption_resolution,[],[f21913,f12066])).
fof(f21913,plain,(
  ( ! [X292,X294,X293,X291] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X292)),bool)) | s(bool,X291) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,X292) = s(bool,'const.bool.IN_2'(s(X293,X294),s(fun(X293,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X291)) ) | ($spl0 | $spl14)),
  inference(superposition,[],[f4840,f2976])).
fof(f23263,plain,(
  ( ! [X273,X275,X276,X274] : (s(bool,X273) != s(bool,sK6('const.option.SOME_1'(s(bool,X274)),bool)) | s(bool,X273) = s(bool,'const.bool.IN_2'(s(X275,X276),s(fun(X275,bool),'const.pred_set.EMPTY_0'))) | s(bool,'T_0') = s(bool,X274)) ) | $spl88),
  inference(cnf_transformation,[],[f23263_D])).
fof(f23263_D,plain,(
  ( ! [X273,X275,X276,X274] : (s(bool,X273) != s(bool,sK6('const.option.SOME_1'(s(bool,X274)),bool)) | s(bool,X273) = s(bool,'const.bool.IN_2'(s(X275,X276),s(fun(X275,bool),'const.pred_set.EMPTY_0'))) | s(bool,'T_0') = s(bool,X274)) ) <=> ~$spl88),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl88])])).
fof(f22465,plain,(
  ( ! [X273,X275,X276,X272,X274] : (s(bool,X273) != s(bool,sK6('const.option.SOME_1'(s(bool,X274)),bool)) | s(bool,'F_0') = s(bool,X272) | s(bool,'T_0') = s(bool,X274) | s(bool,X273) = s(bool,'const.bool.IN_2'(s(X275,X276),s(fun(X275,bool),'const.pred_set.EMPTY_0')))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f21909])).
fof(f21909,plain,(
  ( ! [X273,X275,X276,X272,X274] : (s(bool,X273) != s(bool,sK6('const.option.SOME_1'(s(bool,X274)),bool)) | s(bool,'F_0') = s(bool,X272) | s(bool,'T_0') = s(bool,X274) | s(bool,X273) = s(bool,'const.bool.IN_2'(s(X275,X276),s(fun(X275,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X272)) ) | $spl0),
  inference(superposition,[],[f4477,f2976])).
fof(f7749,plain,(
  ( ! [X52] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X52)),bool))) ) | $spl22),
  inference(cnf_transformation,[],[f7749_D])).
fof(f7749_D,plain,(
  ( ! [X52] : (s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X52)),bool))) ) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f23246,plain,(
  ( ! [X99,X97,X100] : (s(bool,'F_0') != s(bool,X97) | s(bool,X97) = s(bool,'const.bool.IN_2'(s(X99,X100),s(fun(X99,bool),'const.pred_set.EMPTY_0')))) ) | $spl82),
  inference(cnf_transformation,[],[f23246_D])).
fof(f23246_D,plain,(
  ( ! [X99,X97,X100] : (s(bool,'F_0') != s(bool,X97) | s(bool,X97) = s(bool,'const.bool.IN_2'(s(X99,X100),s(fun(X99,bool),'const.pred_set.EMPTY_0')))) ) <=> ~$spl82),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl82])])).
fof(f23260,plain,(
  ( ! [X263,X265,X264,X266] : (s(bool,'F_0') != s(bool,X264) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X263)),bool)) | s(bool,X264) = s(bool,'const.bool.IN_2'(s(X265,X266),s(fun(X265,bool),'const.pred_set.EMPTY_0')))) ) | $spl0),
  inference(forward_demodulation,[],[f23259,f901])).
fof(f23259,plain,(
  ( ! [X263,X265,X264,X266] : (s(bool,X264) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X263)),bool)) | s(bool,X264) = s(bool,'const.bool.IN_2'(s(X265,X266),s(fun(X265,bool),'const.pred_set.EMPTY_0')))) ) | $spl0),
  inference(subsumption_resolution,[],[f21907,f3910])).
fof(f21907,plain,(
  ( ! [X263,X265,X264,X266] : (s(bool,X264) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X263)),bool)) | s(bool,X264) = s(bool,'const.bool.IN_2'(s(X265,X266),s(fun(X265,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X263)) ) | $spl0),
  inference(superposition,[],[f4474,f2976])).
fof(f23258,plain,(
  ( ! [X261,X259,X260,X262] : (s(bool,'F_0') != s(bool,X260) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X259)),bool)) | s(bool,X260) = s(bool,'const.bool.IN_2'(s(X261,X262),s(fun(X261,bool),'const.pred_set.EMPTY_0')))) ) | $spl0),
  inference(subsumption_resolution,[],[f21906,f3910])).
fof(f21906,plain,(
  ( ! [X261,X259,X260,X262] : (s(bool,'F_0') != s(bool,X260) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X259)),bool)) | s(bool,X260) = s(bool,'const.bool.IN_2'(s(X261,X262),s(fun(X261,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X259)) ) | $spl0),
  inference(superposition,[],[f3910,f2976])).
fof(f23257,plain,(
  ( ! [X249,X246,X248,X247] : (s(bool,'F_0') != s(bool,X247) | s(bool,'F_0') = s(bool,X246) | s(bool,X247) = s(bool,'const.bool.IN_2'(s(X248,X249),s(fun(X248,bool),'const.pred_set.EMPTY_0')))) ) | $spl0),
  inference(forward_demodulation,[],[f22466,f901])).
fof(f22466,plain,(
  ( ! [X249,X246,X248,X247] : (s(bool,X247) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'F_0') = s(bool,X246) | s(bool,X247) = s(bool,'const.bool.IN_2'(s(X248,X249),s(fun(X248,bool),'const.pred_set.EMPTY_0')))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f21903])).
fof(f21903,plain,(
  ( ! [X249,X246,X248,X247] : (s(bool,X247) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'F_0') = s(bool,X246) | s(bool,X247) = s(bool,'const.bool.IN_2'(s(X248,X249),s(fun(X248,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X246)) ) | $spl0),
  inference(superposition,[],[f3597,f2976])).
fof(f23253,plain,(
  ( ! [X206,X204,X205,X203] : (s(bool,X203) != s(bool,X204) | s(bool,X203) = s(bool,'const.bool.IN_2'(s(X205,X206),s(fun(X205,bool),'const.pred_set.EMPTY_0'))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X204)),bool))) ) | $spl86),
  inference(cnf_transformation,[],[f23253_D])).
fof(f23253_D,plain,(
  ( ! [X206,X204,X205,X203] : (s(bool,X203) != s(bool,X204) | s(bool,X203) = s(bool,'const.bool.IN_2'(s(X205,X206),s(fun(X205,bool),'const.pred_set.EMPTY_0'))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X204)),bool))) ) <=> ~$spl86),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl86])])).
fof(f22470,plain,(
  ( ! [X206,X204,X202,X205,X203] : (s(bool,X203) != s(bool,X204) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X204)),bool)) | s(bool,'F_0') = s(bool,X202) | s(bool,X203) = s(bool,'const.bool.IN_2'(s(X205,X206),s(fun(X205,bool),'const.pred_set.EMPTY_0')))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f21895])).
fof(f21895,plain,(
  ( ! [X206,X204,X202,X205,X203] : (s(bool,X203) != s(bool,X204) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X204)),bool)) | s(bool,'F_0') = s(bool,X202) | s(bool,X203) = s(bool,'const.bool.IN_2'(s(X205,X206),s(fun(X205,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X202)) ) | $spl0),
  inference(superposition,[],[f2494,f2976])).
fof(f23252,plain,(
  ( ! [X191,X189,X187,X190,X188] : (s(bool,X188) != s(bool,X189) | s(bool,'T_0') = s(bool,X189) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X187)),bool)) | s(bool,X188) = s(bool,'const.bool.IN_2'(s(X190,X191),s(fun(X190,bool),'const.pred_set.EMPTY_0')))) ) | $spl0),
  inference(subsumption_resolution,[],[f21892,f3910])).
fof(f21892,plain,(
  ( ! [X191,X189,X187,X190,X188] : (s(bool,X188) != s(bool,X189) | s(bool,'T_0') = s(bool,X189) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X187)),bool)) | s(bool,X188) = s(bool,'const.bool.IN_2'(s(X190,X191),s(fun(X190,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X187)) ) | $spl0),
  inference(superposition,[],[f2471,f2976])).
fof(f23247,plain,(
  ( ! [X146,X149,X147,X148] : (s(bool,X146) != s(bool,X147) | s(bool,X146) = s(bool,'const.bool.IN_2'(s(X148,X149),s(fun(X148,bool),'const.pred_set.EMPTY_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X147)))) ) | $spl84),
  inference(cnf_transformation,[],[f23247_D])).
fof(f23247_D,plain,(
  ( ! [X146,X149,X147,X148] : (s(bool,X146) != s(bool,X147) | s(bool,X146) = s(bool,'const.bool.IN_2'(s(X148,X149),s(fun(X148,bool),'const.pred_set.EMPTY_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X147)))) ) <=> ~$spl84),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl84])])).
fof(f22476,plain,(
  ( ! [X146,X149,X147,X145,X148] : (s(bool,X146) != s(bool,X147) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X147))) | s(bool,'F_0') = s(bool,X145) | s(bool,X146) = s(bool,'const.bool.IN_2'(s(X148,X149),s(fun(X148,bool),'const.pred_set.EMPTY_0')))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f21884])).
fof(f21884,plain,(
  ( ! [X146,X149,X147,X145,X148] : (s(bool,X146) != s(bool,X147) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X147))) | s(bool,'F_0') = s(bool,X145) | s(bool,X146) = s(bool,'const.bool.IN_2'(s(X148,X149),s(fun(X148,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X145)) ) | $spl0),
  inference(superposition,[],[f1774,f2976])).
fof(f22477,plain,(
  ( ! [X127,X125,X128,X126,X129] : (s(bool,X126) != s(bool,X127) | s(bool,'T_0') = s(bool,X127) | s(bool,'F_0') = s(bool,X125) | s(bool,X126) = s(bool,'const.bool.IN_2'(s(X128,X129),s(fun(X128,bool),'const.pred_set.EMPTY_0')))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f21880])).
fof(f21880,plain,(
  ( ! [X127,X125,X128,X126,X129] : (s(bool,X126) != s(bool,X127) | s(bool,'T_0') = s(bool,X127) | s(bool,'F_0') = s(bool,X125) | s(bool,X126) = s(bool,'const.bool.IN_2'(s(X128,X129),s(fun(X128,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X125)) ) | $spl0),
  inference(superposition,[],[f1747,f2976])).
fof(f23245,plain,(
  ( ! [X98,X96] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X96))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X98))) | s(bool,'T_0') = s(bool,X98)) ) | $spl80),
  inference(cnf_transformation,[],[f23245_D])).
fof(f23245_D,plain,(
  ( ! [X98,X96] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X96))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X98))) | s(bool,'T_0') = s(bool,X98)) ) <=> ~$spl80),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl80])])).
fof(f23244,plain,(
  ( ! [X99,X97,X100,X98,X96] : (s(bool,'F_0') != s(bool,X97) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X96))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X98))) | s(bool,'T_0') = s(bool,X98) | s(bool,X97) = s(bool,'const.bool.IN_2'(s(X99,X100),s(fun(X99,bool),'const.pred_set.EMPTY_0')))) ) | $spl0),
  inference(subsumption_resolution,[],[f21874,f404])).
fof(f21874,plain,(
  ( ! [X99,X97,X100,X98,X96] : (s(bool,'F_0') != s(bool,X97) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X96))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X98))) | s(bool,'T_0') = s(bool,X98) | s(bool,X97) = s(bool,'const.bool.IN_2'(s(X99,X100),s(fun(X99,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X96)) ) | $spl0),
  inference(superposition,[],[f404,f2976])).
fof(f23242,plain,(
  ( ! [X91] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X91)))) ) | $spl76),
  inference(cnf_transformation,[],[f23242_D])).
fof(f23242_D,plain,(
  ( ! [X91] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X91)))) ) <=> ~$spl76),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl76])])).
fof(f23241,plain,(
  ( ! [X94,X92,X95,X93,X91] : (s(bool,X92) != s(bool,X93) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X91))) | s(bool,'T_0') = s(bool,X93) | s(bool,X92) = s(bool,'const.bool.IN_2'(s(X94,X95),s(fun(X94,bool),'const.pred_set.EMPTY_0')))) ) | $spl0),
  inference(subsumption_resolution,[],[f21873,f158])).
fof(f21873,plain,(
  ( ! [X94,X92,X95,X93,X91] : (s(bool,X92) != s(bool,X93) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X91))) | s(bool,'T_0') = s(bool,X93) | s(bool,X92) = s(bool,'const.bool.IN_2'(s(X94,X95),s(fun(X94,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X91)) ) | $spl0),
  inference(superposition,[],[f403,f2976])).
fof(f23239,plain,(
  ( ! [X80,X78,X79,X77] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X77))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X78))) | s(bool,X77) = s(bool,'const.bool.IN_2'(s(X79,X80),s(fun(X79,bool),'const.pred_set.EMPTY_0'))) | s(bool,'T_0') = s(bool,X78)) ) | $spl74),
  inference(cnf_transformation,[],[f23239_D])).
fof(f23239_D,plain,(
  ( ! [X80,X78,X79,X77] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X77))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X78))) | s(bool,X77) = s(bool,'const.bool.IN_2'(s(X79,X80),s(fun(X79,bool),'const.pred_set.EMPTY_0'))) | s(bool,'T_0') = s(bool,X78)) ) <=> ~$spl74),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl74])])).
fof(f22482,plain,(
  ( ! [X80,X78,X76,X79,X77] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X77))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X78))) | s(bool,'F_0') = s(bool,X76) | s(bool,'T_0') = s(bool,X78) | s(bool,X77) = s(bool,'const.bool.IN_2'(s(X79,X80),s(fun(X79,bool),'const.pred_set.EMPTY_0')))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f21870])).
fof(f21870,plain,(
  ( ! [X80,X78,X76,X79,X77] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X77))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X78))) | s(bool,'F_0') = s(bool,X76) | s(bool,'T_0') = s(bool,X78) | s(bool,X77) = s(bool,'const.bool.IN_2'(s(X79,X80),s(fun(X79,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X76)) ) | $spl0),
  inference(superposition,[],[f361,f2976])).
fof(f23070,plain,(
  ( ! [X302,X304,X301,X303,X299] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X301),'const.option.NONE_0'),s(bool,X299),s(fun(X301,bool),X302))) | s(bool,X299) = s(bool,'const.bool.IN_2'(s(X303,X304),s(fun(X303,bool),'const.pred_set.EMPTY_0')))) ) | $spl72),
  inference(cnf_transformation,[],[f23070_D])).
fof(f23070_D,plain,(
  ( ! [X302,X304,X301,X303,X299] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X301),'const.option.NONE_0'),s(bool,X299),s(fun(X301,bool),X302))) | s(bool,X299) = s(bool,'const.bool.IN_2'(s(X303,X304),s(fun(X303,bool),'const.pred_set.EMPTY_0')))) ) <=> ~$spl72),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl72])])).
fof(f22483,plain,(
  ( ! [X70,X68,X66,X69,X67,X65] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X67),'const.option.NONE_0'),s(bool,X66),s(fun(X67,bool),X68))) | s(bool,'F_0') = s(bool,X65) | s(bool,X66) = s(bool,'const.bool.IN_2'(s(X69,X70),s(fun(X69,bool),'const.pred_set.EMPTY_0')))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f21868])).
fof(f21868,plain,(
  ( ! [X70,X68,X66,X69,X67,X65] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X67),'const.option.NONE_0'),s(bool,X66),s(fun(X67,bool),X68))) | s(bool,'F_0') = s(bool,X65) | s(bool,X66) = s(bool,'const.bool.IN_2'(s(X69,X70),s(fun(X69,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X65)) ) | $spl0),
  inference(superposition,[],[f298,f2976])).
fof(f23075,plain,(
  ( ! [X333,X335,X334,X336] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X333)),bool)) | s(bool,X333) = s(bool,'const.bool.IN_2'(s(X335,X336),s(fun(X335,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X334)) ) | ($spl0 | $spl24)),
  inference(subsumption_resolution,[],[f21708,f7478])).
fof(f21708,plain,(
  ( ! [X333,X335,X334,X336] : (s(bool,X334) != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X333)),bool)) | s(bool,X333) = s(bool,'const.bool.IN_2'(s(X335,X336),s(fun(X335,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X334)) ) | ($spl0 | $spl24)),
  inference(superposition,[],[f7750,f2976])).
fof(f23071,plain,(
  ( ! [X308,X306,X305,X307] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X305)),bool)) | s(bool,X305) = s(bool,'const.bool.IN_2'(s(X307,X308),s(fun(X307,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X306)) ) | ($spl0 | $spl14)),
  inference(subsumption_resolution,[],[f21701,f121])).
fof(f21701,plain,(
  ( ! [X308,X306,X305,X307] : (s(bool,'T_0') != s(bool,X306) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X305)),bool)) | s(bool,X305) = s(bool,'const.bool.IN_2'(s(X307,X308),s(fun(X307,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X306)) ) | ($spl0 | $spl14)),
  inference(superposition,[],[f5543,f2976])).
fof(f23069,plain,(
  ( ! [X300,X302,X304,X301,X303,X299] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X301),'const.option.NONE_0'),s(bool,X299),s(fun(X301,bool),X302))) | s(bool,X299) = s(bool,'const.bool.IN_2'(s(X303,X304),s(fun(X303,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X300)) ) | $spl0),
  inference(subsumption_resolution,[],[f21700,f121])).
fof(f21700,plain,(
  ( ! [X300,X302,X304,X301,X303,X299] : (s(bool,'T_0') != s(bool,X300) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X301),'const.option.NONE_0'),s(bool,X299),s(fun(X301,bool),X302))) | s(bool,X299) = s(bool,'const.bool.IN_2'(s(X303,X304),s(fun(X303,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X300)) ) | $spl0),
  inference(superposition,[],[f5098,f2976])).
fof(f23068,plain,(
  ( ! [X296,X298,X295,X297] : (s(bool,'F_0') = s(bool,X296) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X295)),bool)) | s(bool,X295) = s(bool,'const.bool.IN_2'(s(X297,X298),s(fun(X297,bool),'const.pred_set.EMPTY_0')))) ) | ($spl0 | $spl14)),
  inference(forward_demodulation,[],[f23067,f901])).
fof(f23067,plain,(
  ( ! [X296,X298,X295,X297] : (s(bool,X296) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X295)),bool)) | s(bool,X295) = s(bool,'const.bool.IN_2'(s(X297,X298),s(fun(X297,bool),'const.pred_set.EMPTY_0')))) ) | ($spl0 | $spl14)),
  inference(subsumption_resolution,[],[f21699,f12066])).
fof(f21699,plain,(
  ( ! [X296,X298,X295,X297] : (s(bool,X296) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X295)),bool)) | s(bool,X295) = s(bool,'const.bool.IN_2'(s(X297,X298),s(fun(X297,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X296)) ) | ($spl0 | $spl14)),
  inference(superposition,[],[f4840,f2976])).
fof(f23060,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X1)),bool)) | s(bool,X1) = s(bool,'const.bool.IN_2'(s(X2,X3),s(fun(X2,bool),'const.pred_set.EMPTY_0')))) ) | $spl0),
  inference(condensation,[],[f23059])).
fof(f23059,plain,(
  ( ! [X198,X200,X199,X197,X201] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X197)),bool)) | s(bool,'F_0') = s(bool,X199) | s(bool,X197) = s(bool,'const.bool.IN_2'(s(X200,X201),s(fun(X200,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X198)) ) | $spl0),
  inference(subsumption_resolution,[],[f21679,f1632])).
fof(f21679,plain,(
  ( ! [X198,X200,X199,X197,X201] : (s(bool,X198) != s(bool,X199) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X197)),bool)) | s(bool,'F_0') = s(bool,X199) | s(bool,X197) = s(bool,'const.bool.IN_2'(s(X200,X201),s(fun(X200,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X198)) ) | $spl0),
  inference(superposition,[],[f2494,f2976])).
fof(f22859,plain,(
  ( ! [X3] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X3)),bool))) ) | $spl70),
  inference(cnf_transformation,[],[f22859_D])).
fof(f22859_D,plain,(
  ( ! [X3] : (s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X3)),bool))) ) <=> ~$spl70),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl70])])).
fof(f22841,plain,(
  ( ! [X2,X3,X1] : (s(bool,X1) != s(bool,'const.bool.IN_2'(s(X2,X3),s(fun(X2,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X1)) ) | $spl64),
  inference(cnf_transformation,[],[f22841_D])).
fof(f22841_D,plain,(
  ( ! [X2,X3,X1] : (s(bool,X1) != s(bool,'const.bool.IN_2'(s(X2,X3),s(fun(X2,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X1)) ) <=> ~$spl64),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl64])])).
fof(f22858,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,X0) | s(bool,X0) != s(bool,'const.bool.IN_2'(s(X1,X2),s(fun(X1,bool),'const.pred_set.EMPTY_0'))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X3)),bool))) ) | $spl0),
  inference(condensation,[],[f22857])).
fof(f22857,plain,(
  ( ! [X198,X200,X199,X197,X201] : (s(bool,X200) != s(bool,'const.bool.IN_2'(s(X198,X199),s(fun(X198,bool),'const.pred_set.EMPTY_0'))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X197)),bool)) | s(bool,'F_0') = s(bool,X200) | s(bool,'F_0') = s(bool,X201)) ) | $spl0),
  inference(subsumption_resolution,[],[f21405,f2494])).
fof(f21405,plain,(
  ( ! [X198,X200,X199,X197,X201] : (s(bool,X200) != s(bool,'const.bool.IN_2'(s(X198,X199),s(fun(X198,bool),'const.pred_set.EMPTY_0'))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X197)),bool)) | s(bool,'F_0') = s(bool,X200) | s(bool,X197) = s(bool,X201) | s(bool,'F_0') = s(bool,X201)) ) | $spl0),
  inference(superposition,[],[f2494,f2976])).
fof(f22856,plain,(
  ( ! [X2,X3,X1] : (s(bool,X1) != s(bool,'const.bool.IN_2'(s(X2,X3),s(fun(X2,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X1)),bool))) ) | $spl68),
  inference(cnf_transformation,[],[f22856_D])).
fof(f22856_D,plain,(
  ( ! [X2,X3,X1] : (s(bool,X1) != s(bool,'const.bool.IN_2'(s(X2,X3),s(fun(X2,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X1)),bool))) ) <=> ~$spl68),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl68])])).
fof(f22855,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,'const.bool.IN_2'(s(X2,X3),s(fun(X2,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X1)),bool))) ) | $spl0),
  inference(condensation,[],[f22854])).
fof(f22854,plain,(
  ( ! [X196,X194,X192,X195,X193] : (s(bool,X195) != s(bool,'const.bool.IN_2'(s(X193,X194),s(fun(X193,bool),'const.pred_set.EMPTY_0'))) | s(bool,'T_0') = s(bool,X192) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X195)),bool)) | s(bool,X192) = s(bool,X196)) ) | $spl0),
  inference(subsumption_resolution,[],[f21404,f13980])).
fof(f21404,plain,(
  ( ! [X196,X194,X192,X195,X193] : (s(bool,X195) != s(bool,'const.bool.IN_2'(s(X193,X194),s(fun(X193,bool),'const.pred_set.EMPTY_0'))) | s(bool,'T_0') = s(bool,X192) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X195)),bool)) | s(bool,X192) = s(bool,X196) | s(bool,'F_0') = s(bool,X196)) ) | $spl0),
  inference(superposition,[],[f2471,f2976])).
fof(f22845,plain,(
  ( ! [X3] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X3)))) ) | $spl66),
  inference(cnf_transformation,[],[f22845_D])).
fof(f22845_D,plain,(
  ( ! [X3] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X3)))) ) <=> ~$spl66),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl66])])).
fof(f22844,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,X0) | s(bool,X0) != s(bool,'const.bool.IN_2'(s(X1,X2),s(fun(X1,bool),'const.pred_set.EMPTY_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X3)))) ) | $spl0),
  inference(condensation,[],[f22843])).
fof(f22843,plain,(
  ( ! [X144,X142,X140,X143,X141] : (s(bool,X143) != s(bool,'const.bool.IN_2'(s(X141,X142),s(fun(X141,bool),'const.pred_set.EMPTY_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X140))) | s(bool,'F_0') = s(bool,X143) | s(bool,'F_0') = s(bool,X144)) ) | $spl0),
  inference(subsumption_resolution,[],[f21394,f1774])).
fof(f21394,plain,(
  ( ! [X144,X142,X140,X143,X141] : (s(bool,X143) != s(bool,'const.bool.IN_2'(s(X141,X142),s(fun(X141,bool),'const.pred_set.EMPTY_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X140))) | s(bool,'F_0') = s(bool,X143) | s(bool,X140) = s(bool,X144) | s(bool,'F_0') = s(bool,X144)) ) | $spl0),
  inference(superposition,[],[f1774,f2976])).
fof(f22840,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,'const.bool.IN_2'(s(X2,X3),s(fun(X2,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X1)) ) | $spl0),
  inference(condensation,[],[f22839])).
fof(f22839,plain,(
  ( ! [X134,X132,X130,X133,X131] : (s(bool,X133) != s(bool,'const.bool.IN_2'(s(X131,X132),s(fun(X131,bool),'const.pred_set.EMPTY_0'))) | s(bool,'T_0') = s(bool,X130) | s(bool,'F_0') = s(bool,X133) | s(bool,X130) = s(bool,X134)) ) | $spl0),
  inference(subsumption_resolution,[],[f21392,f13980])).
fof(f21392,plain,(
  ( ! [X134,X132,X130,X133,X131] : (s(bool,X133) != s(bool,'const.bool.IN_2'(s(X131,X132),s(fun(X131,bool),'const.pred_set.EMPTY_0'))) | s(bool,'T_0') = s(bool,X130) | s(bool,'F_0') = s(bool,X133) | s(bool,X130) = s(bool,X134) | s(bool,'F_0') = s(bool,X134)) ) | $spl0),
  inference(superposition,[],[f1747,f2976])).
fof(f22833,plain,(
  ( ! [X2,X3,X1] : (s(bool,X1) != s(bool,'const.bool.IN_2'(s(X2,X3),s(fun(X2,bool),'const.pred_set.EMPTY_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1)))) ) | $spl62),
  inference(cnf_transformation,[],[f22833_D])).
fof(f22833_D,plain,(
  ( ! [X2,X3,X1] : (s(bool,X1) != s(bool,'const.bool.IN_2'(s(X2,X3),s(fun(X2,bool),'const.pred_set.EMPTY_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1)))) ) <=> ~$spl62),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl62])])).
fof(f22832,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,'const.bool.IN_2'(s(X2,X3),s(fun(X2,bool),'const.pred_set.EMPTY_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1)))) ) | $spl0),
  inference(condensation,[],[f22831])).
fof(f22831,plain,(
  ( ! [X90,X88,X87,X89,X86] : (s(bool,X89) != s(bool,'const.bool.IN_2'(s(X87,X88),s(fun(X87,bool),'const.pred_set.EMPTY_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X89))) | s(bool,'T_0') = s(bool,X86) | s(bool,X86) = s(bool,X90)) ) | $spl0),
  inference(subsumption_resolution,[],[f21383,f13980])).
fof(f21383,plain,(
  ( ! [X90,X88,X87,X89,X86] : (s(bool,X89) != s(bool,'const.bool.IN_2'(s(X87,X88),s(fun(X87,bool),'const.pred_set.EMPTY_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X89))) | s(bool,'T_0') = s(bool,X86) | s(bool,X86) = s(bool,X90) | s(bool,'F_0') = s(bool,X90)) ) | $spl0),
  inference(superposition,[],[f403,f2976])).
fof(f22733,plain,(
  ( ! [X70,X68,X66,X72,X71,X69] : (s(bool,X66) = s(bool,'const.bool.IN_2'(s(X68,X69),s(fun(X68,bool),'const.pred_set.EMPTY_0'))) | s(bool,X66) = s(bool,X70) | s(bool,X70) = s(bool,'const.bool.IN_2'(s(X71,X72),s(fun(X71,bool),'const.pred_set.EMPTY_0')))) ) | $spl58),
  inference(cnf_transformation,[],[f22733_D])).
fof(f22733_D,plain,(
  ( ! [X70,X68,X66,X72,X71,X69] : (s(bool,X66) = s(bool,'const.bool.IN_2'(s(X68,X69),s(fun(X68,bool),'const.pred_set.EMPTY_0'))) | s(bool,X66) = s(bool,X70) | s(bool,X70) = s(bool,'const.bool.IN_2'(s(X71,X72),s(fun(X71,bool),'const.pred_set.EMPTY_0')))) ) <=> ~$spl58),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl58])])).
fof(f22569,plain,(
  ( ! [X57,X54,X52,X58,X56,X55,X53] : (s(bool,'F_0') = s(bool,X53) | s(bool,X54) = s(bool,'const.bool.IN_2'(s(X55,X56),s(fun(X55,bool),'const.pred_set.EMPTY_0'))) | s(bool,X52) = s(bool,X54) | s(bool,X52) = s(bool,'const.bool.IN_2'(s(X57,X58),s(fun(X57,bool),'const.pred_set.EMPTY_0')))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f21333])).
fof(f21333,plain,(
  ( ! [X57,X54,X52,X58,X56,X55,X53] : (s(bool,'F_0') = s(bool,X53) | s(bool,X54) = s(bool,'const.bool.IN_2'(s(X55,X56),s(fun(X55,bool),'const.pred_set.EMPTY_0'))) | s(bool,X52) = s(bool,X54) | s(bool,X52) = s(bool,'const.bool.IN_2'(s(X57,X58),s(fun(X57,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X53)) ) | $spl0),
  inference(superposition,[],[f2976,f2976])).
fof(f22582,plain,(
  ( ! [X80,X85,X83,X81,X86,X84,X82] : (s(bool,X81) = s(bool,X82) | s(bool,X82) = s(bool,'const.bool.IN_2'(s(X83,X84),s(fun(X83,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X80) | s(bool,X81) = s(bool,'const.bool.IN_2'(s(X85,X86),s(fun(X85,bool),'const.pred_set.EMPTY_0')))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f21250])).
fof(f21250,plain,(
  ( ! [X80,X85,X83,X81,X86,X84,X82] : (s(bool,X81) = s(bool,X82) | s(bool,X82) = s(bool,'const.bool.IN_2'(s(X83,X84),s(fun(X83,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X80) | s(bool,X81) = s(bool,'const.bool.IN_2'(s(X85,X86),s(fun(X85,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X80)) ) | $spl0),
  inference(superposition,[],[f2976,f2976])).
fof(f22736,plain,(
  ( ! [X94,X92,X93,X91] : (s(bool,'F_0') = s(bool,X92) | s(bool,X91) = s(bool,'const.bool.IN_2'(s(X93,X94),s(fun(X93,bool),'const.pred_set.EMPTY_0'))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X91)),bool))) ) | ($spl0 | $spl14)),
  inference(forward_demodulation,[],[f22735,f901])).
fof(f22735,plain,(
  ( ! [X94,X92,X93,X91] : (s(bool,X92) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,X91) = s(bool,'const.bool.IN_2'(s(X93,X94),s(fun(X93,bool),'const.pred_set.EMPTY_0'))) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X91)),bool))) ) | ($spl0 | $spl14)),
  inference(subsumption_resolution,[],[f21190,f12066])).
fof(f21190,plain,(
  ( ! [X94,X92,X93,X91] : (s(bool,X92) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,X91) = s(bool,'const.bool.IN_2'(s(X93,X94),s(fun(X93,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X92) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X91)),bool))) ) | ($spl0 | $spl14)),
  inference(superposition,[],[f2976,f4840])).
fof(f22611,plain,(
  ( ! [X70,X68,X66,X72,X71,X69,X67] : (s(bool,'F_0') = s(bool,X67) | s(bool,X66) = s(bool,'const.bool.IN_2'(s(X68,X69),s(fun(X68,bool),'const.pred_set.EMPTY_0'))) | s(bool,X70) = s(bool,'const.bool.IN_2'(s(X71,X72),s(fun(X71,bool),'const.pred_set.EMPTY_0'))) | s(bool,X66) = s(bool,X70)) ) | $spl0),
  inference(duplicate_literal_removal,[],[f21186])).
fof(f21186,plain,(
  ( ! [X70,X68,X66,X72,X71,X69,X67] : (s(bool,'F_0') = s(bool,X67) | s(bool,X66) = s(bool,'const.bool.IN_2'(s(X68,X69),s(fun(X68,bool),'const.pred_set.EMPTY_0'))) | s(bool,'F_0') = s(bool,X67) | s(bool,X70) = s(bool,'const.bool.IN_2'(s(X71,X72),s(fun(X71,bool),'const.pred_set.EMPTY_0'))) | s(bool,X66) = s(bool,X70)) ) | $spl0),
  inference(superposition,[],[f2976,f2976])).
fof(f20723,plain,(
  ( ! [X66,X67] : (s(bool,X66) != s(bool,X67) | s(bool,X66) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X67)))) ) | $spl56),
  inference(cnf_transformation,[],[f20723_D])).
fof(f20723_D,plain,(
  ( ! [X66,X67] : (s(bool,X66) != s(bool,X67) | s(bool,X66) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X67)))) ) <=> ~$spl56),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl56])])).
fof(f20700,plain,(
  ( ! [X66,X67,X65] : (s(bool,X66) != s(bool,X67) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X67))) | s(bool,'F_0') = s(bool,X65) | s(bool,X66) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl14)),
  inference(duplicate_literal_removal,[],[f20610])).
fof(f20610,plain,(
  ( ! [X66,X67,X65] : (s(bool,X66) != s(bool,X67) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X67))) | s(bool,'F_0') = s(bool,X65) | s(bool,'F_0') = s(bool,X65) | s(bool,X66) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl14)),
  inference(superposition,[],[f1774,f9766])).
fof(f20252,plain,(
  ( ! [X28,X26,X27] : (s(X26,sK7(X28,X27,X26)) = s(X26,sK7(sK7(X28,X27,X26),X27,X26)) | s(bool,'F_0') = s(bool,happ(s(fun(X26,bool),X27),s(X26,X28)))) ) | $spl54),
  inference(cnf_transformation,[],[f20252_D])).
fof(f20252_D,plain,(
  ( ! [X28,X26,X27] : (s(X26,sK7(X28,X27,X26)) = s(X26,sK7(sK7(X28,X27,X26),X27,X26)) | s(bool,'F_0') = s(bool,happ(s(fun(X26,bool),X27),s(X26,X28)))) ) <=> ~$spl54),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl54])])).
fof(f20255,plain,(
  ( ! [X39,X41,X38,X40] : (s(bool,'F_0') = s(bool,happ(s(fun(X38,bool),X39),s(X38,X40))) | ~p(s(bool,X41)) | s(X38,sK7(X40,X39,X38)) = s(X38,sK7(sK7(X40,X39,X38),X39,X38))) ) | $spl0),
  inference(forward_demodulation,[],[f20254,f901])).
fof(f20254,plain,(
  ( ! [X39,X41,X38,X40] : (~p(s(bool,X41)) | s(X38,sK7(X40,X39,X38)) = s(X38,sK7(sK7(X40,X39,X38),X39,X38)) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X38,bool),X39),s(X38,X40)))),bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f20202,f127])).
fof(f20202,plain,(
  ( ! [X39,X41,X38,X40] : (~p(s(bool,X41)) | s(X38,sK7(X40,X39,X38)) = s(X38,sK7(sK7(X40,X39,X38),X39,X38)) | s(bool,'F_0') = s(bool,X41) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X38,bool),X39),s(X38,X40)))),bool))) ) | $spl0),
  inference(superposition,[],[f2788,f1834])).
fof(f20253,plain,(
  ( ! [X30,X33,X31,X32] : (~p(s(bool,X33)) | s(X30,sK7(X32,X31,X30)) = s(X30,sK7(sK7(X32,X31,X30),X31,X30)) | s(bool,'F_0') = s(bool,happ(s(fun(X30,bool),X31),s(X30,X32)))) ) | $spl0),
  inference(subsumption_resolution,[],[f20200,f127])).
fof(f20200,plain,(
  ( ! [X30,X33,X31,X32] : (~p(s(bool,X33)) | s(X30,sK7(X32,X31,X30)) = s(X30,sK7(sK7(X32,X31,X30),X31,X30)) | s(bool,'F_0') = s(bool,happ(s(fun(X30,bool),X31),s(X30,X32))) | s(bool,'F_0') = s(bool,X33)) ) | $spl0),
  inference(superposition,[],[f2788,f1632])).
fof(f20251,plain,(
  ( ! [X28,X26,X29,X27] : (~p(s(bool,X29)) | s(X26,sK7(X28,X27,X26)) = s(X26,sK7(sK7(X28,X27,X26),X27,X26)) | s(bool,'F_0') = s(bool,happ(s(fun(X26,bool),X27),s(X26,X28)))) ) | $spl0),
  inference(subsumption_resolution,[],[f20199,f127])).
fof(f20199,plain,(
  ( ! [X28,X26,X29,X27] : (~p(s(bool,X29)) | s(X26,sK7(X28,X27,X26)) = s(X26,sK7(sK7(X28,X27,X26),X27,X26)) | s(bool,'F_0') = s(bool,X29) | s(bool,'F_0') = s(bool,happ(s(fun(X26,bool),X27),s(X26,X28)))) ) | $spl0),
  inference(superposition,[],[f2788,f1632])).
fof(f19392,plain,(
  $false | $spl44),
  inference(subsumption_resolution,[],[f18868,f15752])).
fof(f18868,plain,(
  p(s(bool,'F_0')) | $spl44),
  inference(unit_resulting_resolution,[],[f180,f15752,f162])).
fof(f19391,plain,(
  $false | $spl44),
  inference(subsumption_resolution,[],[f18870,f15752])).
fof(f18870,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.pred_set.EMPTY_0'))))) ) | $spl44),
  inference(unit_resulting_resolution,[],[f192,f15752,f162])).
fof(f19390,plain,(
  $false | ($spl0 | $spl44)),
  inference(subsumption_resolution,[],[f18872,f15752])).
fof(f18872,plain,(
  p(s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) | ($spl0 | $spl44)),
  inference(unit_resulting_resolution,[],[f4454,f15752,f162])).
fof(f19389,plain,(
  $false | $spl44),
  inference(subsumption_resolution,[],[f18882,f15752])).
fof(f18882,plain,(
  p(s(bool,'F_0')) | $spl44),
  inference(unit_resulting_resolution,[],[f180,f15752,f162])).
fof(f19388,plain,(
  $false | $spl44),
  inference(subsumption_resolution,[],[f18884,f15752])).
fof(f18884,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.pred_set.EMPTY_0'))))) ) | $spl44),
  inference(unit_resulting_resolution,[],[f192,f15752,f162])).
fof(f19387,plain,(
  $false | ($spl0 | $spl44)),
  inference(subsumption_resolution,[],[f18886,f15752])).
fof(f18886,plain,(
  p(s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) | ($spl0 | $spl44)),
  inference(unit_resulting_resolution,[],[f4454,f15752,f162])).
fof(f19381,plain,(
  ( ! [X114,X112,X113] : (s(X112,X114) = s(X112,sK7(X114,X113,X112))) ) | $spl50),
  inference(cnf_transformation,[],[f19381_D])).
fof(f19381_D,plain,(
  ( ! [X114,X112,X113] : (s(X112,X114) = s(X112,sK7(X114,X113,X112))) ) <=> ~$spl50),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl50])])).
fof(f19382,plain,(
  ( ! [X116,X117,X115] : (s(bool,X115) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X116),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X116,bool),X117)))) ) | $spl52),
  inference(cnf_transformation,[],[f19382_D])).
fof(f19382_D,plain,(
  ( ! [X116,X117,X115] : (s(bool,X115) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X116),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X116,bool),X117)))) ) <=> ~$spl52),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl52])])).
fof(f19380,plain,(
  ( ! [X116,X114,X112,X117,X115,X113] : (s(bool,X115) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X116),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X116,bool),X117))) | s(X112,X114) = s(X112,sK7(X114,X113,X112))) ) | ($spl0 | $spl44)),
  inference(forward_demodulation,[],[f19379,f901])).
fof(f19379,plain,(
  ( ! [X116,X114,X112,X117,X115,X113] : (s(bool,X115) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X116),'const.option.NONE_0'),s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)),s(fun(X116,bool),X117))) | s(X112,X114) = s(X112,sK7(X114,X113,X112))) ) | ($spl0 | $spl44)),
  inference(subsumption_resolution,[],[f19132,f19325])).
fof(f19325,plain,(
  ( ! [X142] : (s(bool,'F_0') = s(bool,X142)) ) | ($spl0 | $spl44)),
  inference(global_subsumption,[],[f19324,f113,f112,f111,f114,f121,f124,f123,f148,f153,f154,f158,f157,f165,f162,f166,f167,f168,f169,f180,f192,f208,f211,f243,f258,f355,f363,f455,f459,f465,f467,f559,f574,f782,f828,f901,f914,f1092,f1095,f1111,f1122,f1125,f1170,f1172,f1188,f1191,f1256,f1265,f1576,f1577,f1581,f1295,f1297,f1313,f1316,f1609,f1783,f3994,f3951,f3948,f3019,f3018,f3015,f2847,f2846,f2843,f2821,f2820,f2817,f2616,f2583,f2542,f1615,f1068,f1067,f1066,f1065,f1061,f1046,f960,f912,f769,f696,f458,f404,f403,f362,f361,f360,f347,f298,f191,f179,f128,f127,f469,f736,f446,f440,f2622,f1300,f1071,f1315,f1299,f1259,f1258,f1190,f1175,f1174,f1070,f735,f734,f532,f439,f615,f593,f876,f855,f607,f862,f3949,f3016,f2844,f2818,f2543,f1580,f1123,f1093,f1062,f1018,f1005,f989,f572,f535,f534,f447,f434,f161,f160,f159,f3950,f3017,f2845,f2819,f2544,f1124,f1094,f1063,f864,f863,f840,f826,f1309,f1184,f770,f15303,f15635,f15636,f15637,f15638,f15749,f16588,f16589,f16590,f16591,f16647,f17793,f17794,f17795,f17796,f17532,f17586,f17588,f17590,f17591,f17602,f17606,f17608,f17609,f17611,f17617,f17623,f17625,f17627,f17628,f17816,f17817,f17768,f17750,f17752,f17754,f17755,f18120,f18123,f18124,f18125,f18126,f18127,f18047,f18048,f18049,f18050,f18052,f18053,f18085,f18101,f18105,f18107,f18108,f18112,f18114,f18798,f18799,f18800,f18801,f18707,f18708,f18709,f18710,f18711,f18712,f18713,f18744,f18745,f18747,f18762,f18766,f18768,f18769,f18832,f18854,f15752])).
fof(f19324,plain,(
  ( ! [X142,X140,X141,X139] : (s(fun(X139,bool),X140) = s(fun(X139,bool),X141) | s(bool,X142) = s(bool,g(s(X139,sK8(X140,X141,bool,X139)))) | s(bool,'F_0') = s(bool,X142)) ) | ($spl0 | $spl44)),
  inference(subsumption_resolution,[],[f19038,f18918])).
fof(f18918,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl44)),
  inference(unit_resulting_resolution,[],[f4454,f180,f15752,f2416])).
fof(f19038,plain,(
  ( ! [X142,X140,X141,X139] : (s(bool,'F_0') != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(fun(X139,bool),X140) = s(fun(X139,bool),X141) | s(bool,X142) = s(bool,g(s(X139,sK8(X140,X141,bool,X139)))) | s(bool,'F_0') = s(bool,X142)) ) | ($spl0 | $spl44)),
  inference(backward_demodulation,[],[f18918,f2116])).
fof(f19132,plain,(
  ( ! [X116,X114,X112,X117,X115,X113] : (s(bool,X115) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X116),'const.option.NONE_0'),s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)),s(fun(X116,bool),X117))) | s(bool,'F_0') != s(bool,X115) | s(X112,X114) = s(X112,sK7(X114,X113,X112))) ) | ($spl0 | $spl44)),
  inference(backward_demodulation,[],[f18918,f10340])).
fof(f18919,plain,(
  $false | ($spl0 | $spl44)),
  inference(unit_resulting_resolution,[],[f4454,f4454,f180,f15752,f2416])).
fof(f18917,plain,(
  $false | ($spl0 | $spl44)),
  inference(unit_resulting_resolution,[],[f192,f192,f180,f15752,f2416])).
fof(f18915,plain,(
  $false | ($spl0 | $spl44)),
  inference(unit_resulting_resolution,[],[f180,f180,f180,f15752,f2416])).
fof(f18899,plain,(
  $false | ($spl0 | $spl44)),
  inference(unit_resulting_resolution,[],[f4454,f4454,f15752,f243])).
fof(f18897,plain,(
  $false | $spl44),
  inference(unit_resulting_resolution,[],[f192,f192,f15752,f243])).
fof(f18895,plain,(
  $false | $spl44),
  inference(unit_resulting_resolution,[],[f180,f180,f15752,f243])).
fof(f18887,plain,(
  $false | ($spl0 | $spl44)),
  inference(unit_resulting_resolution,[],[f15752,f4454,f15752,f162])).
fof(f18885,plain,(
  $false | $spl44),
  inference(unit_resulting_resolution,[],[f15752,f192,f15752,f162])).
fof(f18883,plain,(
  $false | $spl44),
  inference(unit_resulting_resolution,[],[f179,f180,f15752,f162])).
fof(f18881,plain,(
  $false | ($spl0 | $spl44)),
  inference(unit_resulting_resolution,[],[f15752,f4454,f15752,f162])).
fof(f18879,plain,(
  $false | $spl44),
  inference(unit_resulting_resolution,[],[f15752,f192,f15752,f162])).
fof(f18877,plain,(
  $false | $spl44),
  inference(unit_resulting_resolution,[],[f15752,f180,f15752,f162])).
fof(f18873,plain,(
  $false | ($spl0 | $spl44)),
  inference(unit_resulting_resolution,[],[f15752,f4454,f15752,f162])).
fof(f18871,plain,(
  $false | $spl44),
  inference(unit_resulting_resolution,[],[f15752,f192,f15752,f162])).
fof(f18869,plain,(
  $false | $spl44),
  inference(unit_resulting_resolution,[],[f179,f180,f15752,f162])).
fof(f18867,plain,(
  $false | ($spl0 | $spl44)),
  inference(unit_resulting_resolution,[],[f15752,f4454,f15752,f162])).
fof(f18865,plain,(
  $false | $spl44),
  inference(unit_resulting_resolution,[],[f15752,f192,f15752,f162])).
fof(f18863,plain,(
  $false | $spl44),
  inference(unit_resulting_resolution,[],[f15752,f180,f15752,f162])).
fof(f18859,plain,(
  $false | $spl44),
  inference(unit_resulting_resolution,[],[f180,f15752,f128])).
fof(f18857,plain,(
  $false | ($spl0 | $spl44)),
  inference(unit_resulting_resolution,[],[f689,f15752,f123])).
fof(f18855,plain,(
  $false | $spl44),
  inference(unit_resulting_resolution,[],[f114,f15752])).
fof(f18834,plain,(
  ( ! [X28,X26,X27] : (s(bool,'T_0') = s(bool,happ(s(fun(X26,bool),X27),s(X26,sK7(X28,X27,X26)))) | s(bool,'F_0') = s(bool,happ(s(fun(X26,bool),X27),s(X26,X28)))) ) | $spl48),
  inference(cnf_transformation,[],[f18834_D])).
fof(f18834_D,plain,(
  ( ! [X28,X26,X27] : (s(bool,'T_0') = s(bool,happ(s(fun(X26,bool),X27),s(X26,sK7(X28,X27,X26)))) | s(bool,'F_0') = s(bool,happ(s(fun(X26,bool),X27),s(X26,X28)))) ) <=> ~$spl48),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl48])])).
fof(f18837,plain,(
  ( ! [X39,X41,X38,X40] : (s(bool,'F_0') = s(bool,happ(s(fun(X38,bool),X39),s(X38,X40))) | ~p(s(bool,X41)) | s(bool,'T_0') = s(bool,happ(s(fun(X38,bool),X39),s(X38,sK7(X40,X39,X38))))) ) | $spl0),
  inference(forward_demodulation,[],[f18836,f901])).
fof(f18836,plain,(
  ( ! [X39,X41,X38,X40] : (~p(s(bool,X41)) | s(bool,'T_0') = s(bool,happ(s(fun(X38,bool),X39),s(X38,sK7(X40,X39,X38)))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X38,bool),X39),s(X38,X40)))),bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f18780,f127])).
fof(f18780,plain,(
  ( ! [X39,X41,X38,X40] : (~p(s(bool,X41)) | s(bool,'T_0') = s(bool,happ(s(fun(X38,bool),X39),s(X38,sK7(X40,X39,X38)))) | s(bool,'F_0') = s(bool,X41) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(X38,bool),X39),s(X38,X40)))),bool))) ) | $spl0),
  inference(superposition,[],[f535,f1834])).
fof(f18835,plain,(
  ( ! [X30,X33,X31,X32] : (~p(s(bool,X33)) | s(bool,'T_0') = s(bool,happ(s(fun(X30,bool),X31),s(X30,sK7(X32,X31,X30)))) | s(bool,'F_0') = s(bool,happ(s(fun(X30,bool),X31),s(X30,X32)))) ) | $spl0),
  inference(subsumption_resolution,[],[f18778,f127])).
fof(f18778,plain,(
  ( ! [X30,X33,X31,X32] : (~p(s(bool,X33)) | s(bool,'T_0') = s(bool,happ(s(fun(X30,bool),X31),s(X30,sK7(X32,X31,X30)))) | s(bool,'F_0') = s(bool,happ(s(fun(X30,bool),X31),s(X30,X32))) | s(bool,'F_0') = s(bool,X33)) ) | $spl0),
  inference(superposition,[],[f535,f1632])).
fof(f18833,plain,(
  ( ! [X28,X26,X29,X27] : (~p(s(bool,X29)) | s(bool,'T_0') = s(bool,happ(s(fun(X26,bool),X27),s(X26,sK7(X28,X27,X26)))) | s(bool,'F_0') = s(bool,happ(s(fun(X26,bool),X27),s(X26,X28)))) ) | $spl0),
  inference(subsumption_resolution,[],[f18777,f127])).
fof(f18777,plain,(
  ( ! [X28,X26,X29,X27] : (~p(s(bool,X29)) | s(bool,'T_0') = s(bool,happ(s(fun(X26,bool),X27),s(X26,sK7(X28,X27,X26)))) | s(bool,'F_0') = s(bool,X29) | s(bool,'F_0') = s(bool,happ(s(fun(X26,bool),X27),s(X26,X28)))) ) | $spl0),
  inference(superposition,[],[f535,f1632])).
fof(f16367,plain,(
  ( ! [X34] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X34))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X34)))) ) | $spl46),
  inference(cnf_transformation,[],[f16367_D])).
fof(f16367_D,plain,(
  ( ! [X34] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X34))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X34)))) ) <=> ~$spl46),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl46])])).
fof(f16366,plain,(
  ( ! [X35,X34] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X34))) | s(bool,'T_0') = s(bool,X35) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X34)))) ) | $spl14),
  inference(subsumption_resolution,[],[f16002,f4512])).
fof(f16002,plain,(
  ( ! [X35,X34] : (s(bool,X35) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X34))) | s(bool,'T_0') = s(bool,X35) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X34)))) ) | $spl14),
  inference(superposition,[],[f403,f5639])).
fof(f15751,plain,(
  ( ! [X19,X20] : (s(bool,'F_0') = s(bool,sK7('F_0',X19,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X19),s(bool,X20))) | s(bool,'T_0') = s(bool,X20)) ) | $spl42),
  inference(cnf_transformation,[],[f15751_D])).
fof(f15751_D,plain,(
  ( ! [X19,X20] : (s(bool,'F_0') = s(bool,sK7('F_0',X19,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X19),s(bool,X20))) | s(bool,'T_0') = s(bool,X20)) ) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f15755,plain,(
  ( ! [X30,X28,X29] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X28),s(bool,X29))) | ~p(s(bool,X30)) | s(bool,'F_0') = s(bool,sK7('F_0',X28,bool)) | s(bool,'T_0') = s(bool,X29)) ) | $spl0),
  inference(forward_demodulation,[],[f15754,f901])).
fof(f15754,plain,(
  ( ! [X30,X28,X29] : (~p(s(bool,X30)) | s(bool,'F_0') = s(bool,sK7('F_0',X28,bool)) | s(bool,'T_0') = s(bool,X29) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X28),s(bool,X29)))),bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f15699,f127])).
fof(f15699,plain,(
  ( ! [X30,X28,X29] : (~p(s(bool,X30)) | s(bool,'F_0') = s(bool,sK7('F_0',X28,bool)) | s(bool,'T_0') = s(bool,X29) | s(bool,'F_0') = s(bool,X30) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X28),s(bool,X29)))),bool))) ) | $spl0),
  inference(superposition,[],[f439,f1834])).
fof(f15753,plain,(
  ( ! [X24,X23,X22] : (~p(s(bool,X24)) | s(bool,'F_0') = s(bool,sK7('F_0',X22,bool)) | s(bool,'T_0') = s(bool,X23) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X22),s(bool,X23)))) ) | $spl0),
  inference(subsumption_resolution,[],[f15697,f127])).
fof(f15697,plain,(
  ( ! [X24,X23,X22] : (~p(s(bool,X24)) | s(bool,'F_0') = s(bool,sK7('F_0',X22,bool)) | s(bool,'T_0') = s(bool,X23) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X22),s(bool,X23))) | s(bool,'F_0') = s(bool,X24)) ) | $spl0),
  inference(superposition,[],[f439,f1632])).
fof(f15750,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,X21)) | s(bool,'F_0') = s(bool,sK7('F_0',X19,bool)) | s(bool,'T_0') = s(bool,X20) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X19),s(bool,X20)))) ) | $spl0),
  inference(subsumption_resolution,[],[f15696,f127])).
fof(f15696,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,X21)) | s(bool,'F_0') = s(bool,sK7('F_0',X19,bool)) | s(bool,'T_0') = s(bool,X20) | s(bool,'F_0') = s(bool,X21) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X19),s(bool,X20)))) ) | $spl0),
  inference(superposition,[],[f439,f1632])).
fof(f14832,plain,(
  ( ! [X66,X64] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X64))) | s(bool,X66) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,X64) = s(bool,X66)) ) | $spl40),
  inference(cnf_transformation,[],[f14832_D])).
fof(f14832_D,plain,(
  ( ! [X66,X64] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X64))) | s(bool,X66) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,X64) = s(bool,X66)) ) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f14831,plain,(
  ( ! [X66,X64,X65] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X64))) | s(bool,'T_0') = s(bool,X65) | s(bool,X64) = s(bool,X66) | s(bool,X66) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl14)),
  inference(subsumption_resolution,[],[f14766,f121])).
fof(f14766,plain,(
  ( ! [X66,X64,X65] : (s(bool,'F_0') != s(bool,X65) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X64))) | s(bool,'T_0') = s(bool,X65) | s(bool,X64) = s(bool,X66) | s(bool,X66) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl14)),
  inference(superposition,[],[f403,f9766])).
fof(f14809,plain,(
  ( ! [X36] : (s(bool,X36) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X36)))) ) | $spl36),
  inference(cnf_transformation,[],[f14809_D])).
fof(f14809_D,plain,(
  ( ! [X36] : (s(bool,X36) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X36)))) ) <=> ~$spl36),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl36])])).
fof(f14816,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1)))) ) | ($spl0 | $spl14)),
  inference(condensation,[],[f14815])).
fof(f14815,plain,(
  ( ! [X57,X56,X55] : (s(bool,X56) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X56))) | s(bool,'T_0') = s(bool,X55) | s(bool,X55) = s(bool,X57)) ) | ($spl0 | $spl14)),
  inference(subsumption_resolution,[],[f14713,f13980])).
fof(f14713,plain,(
  ( ! [X57,X56,X55] : (s(bool,X56) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X56))) | s(bool,'T_0') = s(bool,X55) | s(bool,X55) = s(bool,X57) | s(bool,'F_0') = s(bool,X57)) ) | ($spl0 | $spl14)),
  inference(superposition,[],[f403,f9766])).
fof(f14814,plain,(
  ( ! [X54,X53] : (s(bool,X53) != s(bool,X54) | s(bool,X53) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X54)))) ) | $spl38),
  inference(cnf_transformation,[],[f14814_D])).
fof(f14814_D,plain,(
  ( ! [X54,X53] : (s(bool,X53) != s(bool,X54) | s(bool,X53) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X54)))) ) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f14794,plain,(
  ( ! [X54,X52,X53] : (s(bool,X53) != s(bool,X54) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X54))) | s(bool,'T_0') = s(bool,X52) | s(bool,X53) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f14712])).
fof(f14712,plain,(
  ( ! [X54,X52,X53] : (s(bool,X53) != s(bool,X54) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X54))) | s(bool,'T_0') = s(bool,X52) | s(bool,X53) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,X52)) ) | $spl0),
  inference(superposition,[],[f403,f9397])).
fof(f14810,plain,(
  ( ! [X37,X38] : (s(bool,X38) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X38))) | s(bool,'T_0') = s(bool,X37)) ) | ($spl0 | $spl14)),
  inference(subsumption_resolution,[],[f14706,f4597])).
fof(f14706,plain,(
  ( ! [X37,X38] : (s(bool,X38) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X38))) | s(bool,'T_0') = s(bool,X37) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X37)),bool))) ) | $spl14),
  inference(superposition,[],[f403,f4840])).
fof(f14795,plain,(
  ( ! [X35,X36] : (s(bool,X36) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X36))) | s(bool,'T_0') = s(bool,X35)) ) | $spl14),
  inference(duplicate_literal_removal,[],[f14705])).
fof(f14705,plain,(
  ( ! [X35,X36] : (s(bool,X36) != s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X36))) | s(bool,'T_0') = s(bool,X35) | s(bool,'T_0') = s(bool,X35)) ) | $spl14),
  inference(superposition,[],[f403,f4512])).
fof(f13812,plain,(
  ( ! [X48,X46] : (s(bool,X46) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X46) = s(bool,X48) | s(bool,X48) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl34),
  inference(cnf_transformation,[],[f13812_D])).
fof(f13812_D,plain,(
  ( ! [X48,X46] : (s(bool,X46) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X46) = s(bool,X48) | s(bool,X48) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f13710,plain,(
  ( ! [X45,X43,X44] : (s(bool,'T_0') = s(bool,X44) | s(bool,X45) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X43) = s(bool,X45) | s(bool,X43) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f12789])).
fof(f12789,plain,(
  ( ! [X45,X43,X44] : (s(bool,'T_0') = s(bool,X44) | s(bool,X45) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X43) = s(bool,X45) | s(bool,X43) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,X44)) ) | $spl0),
  inference(superposition,[],[f9397,f9397])).
fof(f13719,plain,(
  ( ! [X54,X52,X53] : (s(bool,X53) = s(bool,X54) | s(bool,X54) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,X52) | s(bool,X53) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f12727])).
fof(f12727,plain,(
  ( ! [X54,X52,X53] : (s(bool,X53) = s(bool,X54) | s(bool,X54) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,X52) | s(bool,X53) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,X52)) ) | $spl0),
  inference(superposition,[],[f9397,f9397])).
fof(f13739,plain,(
  ( ! [X47,X48,X46] : (s(bool,'T_0') = s(bool,X47) | s(bool,X46) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X48) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X46) = s(bool,X48)) ) | $spl0),
  inference(duplicate_literal_removal,[],[f12675])).
fof(f12675,plain,(
  ( ! [X47,X48,X46] : (s(bool,'T_0') = s(bool,X47) | s(bool,X46) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,X47) | s(bool,X48) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X46) = s(bool,X48)) ) | $spl0),
  inference(superposition,[],[f9397,f9397])).
fof(f12069,plain,(
  ( ! [X123,X124] : (s(bool,X123) != s(bool,sK6('const.option.SOME_1'(s(bool,X124)),bool)) | s(bool,X123) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,X124)) ) | $spl32),
  inference(cnf_transformation,[],[f12069_D])).
fof(f12069_D,plain,(
  ( ! [X123,X124] : (s(bool,X123) != s(bool,sK6('const.option.SOME_1'(s(bool,X124)),bool)) | s(bool,X123) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,X124)) ) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f11749,plain,(
  ( ! [X123,X124,X122] : (s(bool,X123) != s(bool,sK6('const.option.SOME_1'(s(bool,X124)),bool)) | s(bool,'F_0') = s(bool,X122) | s(bool,'T_0') = s(bool,X124) | s(bool,X123) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl14)),
  inference(duplicate_literal_removal,[],[f11128])).
fof(f11128,plain,(
  ( ! [X123,X124,X122] : (s(bool,X123) != s(bool,sK6('const.option.SOME_1'(s(bool,X124)),bool)) | s(bool,'F_0') = s(bool,X122) | s(bool,'T_0') = s(bool,X124) | s(bool,'F_0') = s(bool,X122) | s(bool,X123) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl14)),
  inference(superposition,[],[f4477,f9766])).
fof(f12064,plain,(
  ( ! [X94,X95] : (s(bool,X94) != s(bool,X95) | s(bool,X94) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X95)),bool))) ) | $spl30),
  inference(cnf_transformation,[],[f12064_D])).
fof(f12064_D,plain,(
  ( ! [X94,X95] : (s(bool,X94) != s(bool,X95) | s(bool,X94) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X95)),bool))) ) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f11752,plain,(
  ( ! [X94,X95,X93] : (s(bool,X94) != s(bool,X95) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X95)),bool)) | s(bool,'F_0') = s(bool,X93) | s(bool,X94) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl14)),
  inference(duplicate_literal_removal,[],[f11117])).
fof(f11117,plain,(
  ( ! [X94,X95,X93] : (s(bool,X94) != s(bool,X95) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X95)),bool)) | s(bool,'F_0') = s(bool,X93) | s(bool,'F_0') = s(bool,X93) | s(bool,X94) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl14)),
  inference(superposition,[],[f2494,f9766])).
fof(f12056,plain,(
  ( ! [X57,X56] : (s(bool,X56) != s(bool,X57) | s(bool,X56) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,X57)) ) | $spl28),
  inference(cnf_transformation,[],[f12056_D])).
fof(f12056_D,plain,(
  ( ! [X57,X56] : (s(bool,X56) != s(bool,X57) | s(bool,X56) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,X57)) ) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f11758,plain,(
  ( ! [X57,X56,X55] : (s(bool,X56) != s(bool,X57) | s(bool,'T_0') = s(bool,X57) | s(bool,'F_0') = s(bool,X55) | s(bool,X56) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl14)),
  inference(duplicate_literal_removal,[],[f11105])).
fof(f11105,plain,(
  ( ! [X57,X56,X55] : (s(bool,X56) != s(bool,X57) | s(bool,'T_0') = s(bool,X57) | s(bool,'F_0') = s(bool,X55) | s(bool,'F_0') = s(bool,X55) | s(bool,X56) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl14)),
  inference(superposition,[],[f1747,f9766])).
fof(f11878,plain,(
  ( ! [X54,X52] : (s(bool,X52) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,X54) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,X52) = s(bool,X54)) ) | $spl26),
  inference(cnf_transformation,[],[f11878_D])).
fof(f11878_D,plain,(
  ( ! [X54,X52] : (s(bool,X52) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,X54) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,X52) = s(bool,X54)) ) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f11825,plain,(
  ( ! [X39,X41,X40] : (s(bool,'F_0') = s(bool,X40) | s(bool,X39) = s(bool,X41) | s(bool,X41) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,X39) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl14)),
  inference(duplicate_literal_removal,[],[f10848])).
fof(f10848,plain,(
  ( ! [X39,X41,X40] : (s(bool,'F_0') = s(bool,X40) | s(bool,X39) = s(bool,X41) | s(bool,X41) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'F_0') = s(bool,X40) | s(bool,X39) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl14)),
  inference(superposition,[],[f9766,f9766])).
fof(f11836,plain,(
  ( ! [X50,X51,X49] : (s(bool,X50) = s(bool,X51) | s(bool,'F_0') = s(bool,X49) | s(bool,X51) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,X50) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl14)),
  inference(duplicate_literal_removal,[],[f10789])).
fof(f10789,plain,(
  ( ! [X50,X51,X49] : (s(bool,X50) = s(bool,X51) | s(bool,'F_0') = s(bool,X49) | s(bool,X51) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'F_0') = s(bool,X49) | s(bool,X50) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl14)),
  inference(superposition,[],[f9766,f9766])).
fof(f11861,plain,(
  ( ! [X54,X52,X53] : (s(bool,'F_0') = s(bool,X53) | s(bool,X52) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,X52) = s(bool,X54) | s(bool,X54) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl14)),
  inference(duplicate_literal_removal,[],[f10746])).
fof(f10746,plain,(
  ( ! [X54,X52,X53] : (s(bool,'F_0') = s(bool,X53) | s(bool,'F_0') = s(bool,X53) | s(bool,X52) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,X52) = s(bool,X54) | s(bool,X54) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl14)),
  inference(superposition,[],[f9766,f9766])).
fof(f8417,plain,(
  $false | $spl16),
  inference(subsumption_resolution,[],[f8416,f8138])).
fof(f8138,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1)) ) | $spl16),
  inference(superposition,[],[f4513,f4513])).
fof(f8416,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,X1)) ) | $spl16),
  inference(subsumption_resolution,[],[f8242,f8111])).
fof(f8111,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl16),
  inference(unit_resulting_resolution,[],[f180,f4513,f211])).
fof(f8242,plain,(
  ( ! [X1] : (p(s(bool,'F_0')) | s(bool,'T_0') != s(bool,X1)) ) | $spl16),
  inference(superposition,[],[f123,f4513])).
fof(f8415,plain,(
  $false | ($spl0 | $spl16)),
  inference(subsumption_resolution,[],[f8186,f8138])).
fof(f8186,plain,(
  ( ! [X19] : (s(bool,'T_0') != s(bool,sK6('const.option.SOME_1'(s(bool,X19)),bool))) ) | ($spl0 | $spl16)),
  inference(superposition,[],[f4454,f4513])).
fof(f8414,plain,(
  $false | $spl16),
  inference(subsumption_resolution,[],[f8180,f8138])).
fof(f8180,plain,(
  ( ! [X5] : (s(bool,'T_0') != s(bool,X5)) ) | $spl16),
  inference(superposition,[],[f180,f4513])).
fof(f8413,plain,(
  $false | ($spl0 | $spl16)),
  inference(subsumption_resolution,[],[f8101,f4454])).
fof(f8101,plain,(
  s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | ($spl0 | $spl16)),
  inference(unit_resulting_resolution,[],[f180,f4513,f2494])).
fof(f8412,plain,(
  $false | ($spl0 | $spl16)),
  inference(subsumption_resolution,[],[f8118,f4454])).
fof(f8118,plain,(
  s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | ($spl0 | $spl16)),
  inference(unit_resulting_resolution,[],[f180,f4513,f2660])).
fof(f8411,plain,(
  $false | ($spl0 | $spl14 | $spl16)),
  inference(subsumption_resolution,[],[f8121,f4454])).
fof(f8121,plain,(
  s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | ($spl14 | $spl16)),
  inference(unit_resulting_resolution,[],[f4513,f5543])).
fof(f8410,plain,(
  $false | $spl16),
  inference(subsumption_resolution,[],[f8126,f179])).
fof(f8126,plain,(
  p(s(bool,'F_0')) | $spl16),
  inference(unit_resulting_resolution,[],[f4513,f123])).
fof(f8135,plain,(
  $false | ($spl0 | $spl16)),
  inference(unit_resulting_resolution,[],[f180,f180,f4513,f1747])).
fof(f8127,plain,(
  $false | $spl16),
  inference(unit_resulting_resolution,[],[f179,f4513,f123])).
fof(f8125,plain,(
  $false | ($spl0 | $spl16)),
  inference(unit_resulting_resolution,[],[f180,f180,f4513,f2035])).
fof(f8122,plain,(
  $false | ($spl0 | $spl14 | $spl16)),
  inference(unit_resulting_resolution,[],[f4454,f4513,f5543])).
fof(f8120,plain,(
  $false | ($spl0 | $spl16)),
  inference(unit_resulting_resolution,[],[f180,f4454,f4513,f2660])).
fof(f8114,plain,(
  $false | ($spl0 | $spl16)),
  inference(unit_resulting_resolution,[],[f180,f4513,f766])).
fof(f8112,plain,(
  $false | $spl16),
  inference(unit_resulting_resolution,[],[f114,f180,f4513,f211])).
fof(f8108,plain,(
  $false | ($spl0 | $spl16)),
  inference(unit_resulting_resolution,[],[f114,f180,f180,f4513,f2033])).
fof(f8103,plain,(
  $false | ($spl0 | $spl16)),
  inference(unit_resulting_resolution,[],[f180,f4454,f4513,f2494])).
fof(f8100,plain,(
  $false | $spl16),
  inference(unit_resulting_resolution,[],[f114,f4513,f127])).
fof(f8097,plain,(
  $false | $spl16),
  inference(unit_resulting_resolution,[],[f180,f4513])).
fof(f7750,plain,(
  ( ! [X59] : (s(bool,X59) != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X59)),bool))) ) | $spl24),
  inference(cnf_transformation,[],[f7750_D])).
fof(f7750_D,plain,(
  ( ! [X59] : (s(bool,X59) != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X59)),bool))) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f7700,plain,(
  ( ! [X59,X58] : (s(bool,X59) != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X59)),bool)) | s(bool,'F_0') = s(bool,X58)) ) | $spl0),
  inference(duplicate_literal_removal,[],[f7572])).
fof(f7572,plain,(
  ( ! [X59,X58] : (s(bool,X59) != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X59)),bool)) | s(bool,'F_0') = s(bool,X58) | s(bool,'F_0') = s(bool,X58)) ) | $spl0),
  inference(superposition,[],[f2494,f7478])).
fof(f7746,plain,(
  ( ! [X33] : (s(bool,X33) != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,X33)) ) | $spl20),
  inference(cnf_transformation,[],[f7746_D])).
fof(f7746_D,plain,(
  ( ! [X33] : (s(bool,X33) != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,X33)) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f7748,plain,(
  ( ! [X52,X53] : (s(bool,X53) != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,X53) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X52)),bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f7569,f3910])).
fof(f7569,plain,(
  ( ! [X52,X53] : (s(bool,X53) != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,X53) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X52)),bool)) | s(bool,'F_0') = s(bool,X52)) ) | $spl0),
  inference(superposition,[],[f2471,f7478])).
fof(f7706,plain,(
  ( ! [X33,X32] : (s(bool,X33) != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,X33) | s(bool,'F_0') = s(bool,X32)) ) | $spl0),
  inference(duplicate_literal_removal,[],[f7560])).
fof(f7560,plain,(
  ( ! [X33,X32] : (s(bool,X33) != s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,X33) | s(bool,'F_0') = s(bool,X32) | s(bool,'F_0') = s(bool,X32)) ) | $spl0),
  inference(superposition,[],[f1747,f7478])).
fof(f7475,plain,(
  ( ! [X1] : (s(bool,X1) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'F_0') = s(bool,X1)) ) | $spl18),
  inference(cnf_transformation,[],[f7475_D])).
fof(f7475_D,plain,(
  ( ! [X1] : (s(bool,X1) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'F_0') = s(bool,X1)) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f7463,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'F_0') = s(bool,X1)) ) | $spl0),
  inference(condensation,[],[f7462])).
fof(f7462,plain,(
  ( ! [X43,X44,X42] : (s(bool,X43) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'F_0') = s(bool,X43) | s(bool,X42) = s(bool,X44) | s(bool,'T_0') = s(bool,X44)) ) | $spl0),
  inference(trivial_inequality_removal,[],[f7442])).
fof(f7442,plain,(
  ( ! [X43,X44,X42] : (s(bool,X42) != s(bool,X42) | s(bool,X43) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'F_0') = s(bool,X43) | s(bool,X42) = s(bool,X44) | s(bool,'T_0') = s(bool,X44)) ) | $spl0),
  inference(superposition,[],[f2660,f208])).
fof(f7465,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'F_0') = s(bool,X1)) ) | $spl0),
  inference(condensation,[],[f7464])).
fof(f7464,plain,(
  ( ! [X39,X41,X40] : (s(bool,X40) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'F_0') = s(bool,X40) | s(bool,X39) = s(bool,X41) | s(bool,'T_0') = s(bool,X41)) ) | $spl0),
  inference(trivial_inequality_removal,[],[f7441])).
fof(f7441,plain,(
  ( ! [X39,X41,X40] : (s(bool,X39) != s(bool,X39) | s(bool,X40) = s(bool,sK6('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'F_0') = s(bool,X40) | s(bool,X39) = s(bool,X41) | s(bool,'T_0') = s(bool,X41)) ) | $spl0),
  inference(superposition,[],[f2660,f208])).
fof(f4512,plain,(
  ( ! [X2] : (s(bool,X2) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,X2)) ) | $spl14),
  inference(cnf_transformation,[],[f4512_D])).
fof(f4512_D,plain,(
  ( ! [X2] : (s(bool,X2) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,X2)) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f4514,plain,(
  ( ! [X8,X7] : (s(bool,'F_0') = s(bool,X7) | s(bool,X8) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,X8)) ) | $spl0),
  inference(subsumption_resolution,[],[f4491,f121])).
fof(f4491,plain,(
  ( ! [X8,X7] : (s(bool,'T_0') != s(bool,X7) | s(bool,'F_0') = s(bool,X7) | s(bool,X8) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,X8)) ) | $spl0),
  inference(superposition,[],[f3597,f208])).
fof(f4511,plain,(
  ( ! [X2,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,X2) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,X2)) ) | $spl0),
  inference(subsumption_resolution,[],[f4488,f121])).
fof(f4488,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') != s(bool,X1) | s(bool,'F_0') = s(bool,X1) | s(bool,X2) = s(bool,sK6('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,X2)) ) | $spl0),
  inference(superposition,[],[f3597,f208])).
fof(f4431,plain,(
  $false | $spl8),
  inference(global_subsumption,[],[f113,f112,f111,f114,f179,f121,f124,f123,f128,f127,f148,f153,f154,f158,f157,f161,f160,f159,f165,f162,f166,f167,f168,f169,f180,f192,f191,f208,f211,f243,f258,f298,f355,f360,f361,f362,f363,f403,f404,f434,f446,f439,f440,f447,f455,f458,f459,f465,f467,f469,f534,f532,f535,f559,f572,f574,f607,f615,f593,f347,f696,f734,f735,f736,f769,f770,f782,f826,f828,f862,f863,f840,f864,f876,f855,f901,f912,f914,f960,f1005,f1018,f989,f1061,f1062,f1063,f1065,f1066,f1067,f1046,f1068,f1070,f1071,f1092,f1093,f1094,f1095,f1111,f1122,f1123,f1124,f1125,f1170,f1172,f1174,f1175,f1184,f1188,f1190,f1191,f1256,f1258,f1259,f1265,f1576,f1577,f1580,f1581,f1295,f1297,f1299,f1300,f1309,f1313,f1315,f1316,f1609,f1615,f1783,f2542,f2543,f2544,f2616,f2583,f2622,f2817,f2818,f2819,f2820,f2821,f2843,f2844,f2845,f2846,f2847,f3015,f3016,f3017,f3018,f3019,f3948,f3949,f3950,f3951,f3994,f4002,f4326,f4019,f4381,f4383,f4392,f4396,f4398,f4402,f4404,f4414,f4417,f4420,f4425,f4430])).
fof(f4430,plain,(
  ( ! [X28,X26,X27] : (s('type.option.option'(X26),'const.option.SOME_1'(s(X26,sK6(X27,X26)))) = s('type.option.option'(X26),sK7('const.option.SOME_1'(s(X26,sK6(X27,X26))),X28,'type.option.option'(X26))) | s('type.option.option'(X26),'const.option.NONE_0') = s('type.option.option'(X26),X27)) ) | $spl8),
  inference(subsumption_resolution,[],[f4295,f114])).
fof(f4295,plain,(
  ( ! [X28,X26,X27] : (~p(s(bool,'T_0')) | s('type.option.option'(X26),'const.option.SOME_1'(s(X26,sK6(X27,X26)))) = s('type.option.option'(X26),sK7('const.option.SOME_1'(s(X26,sK6(X27,X26))),X28,'type.option.option'(X26))) | s('type.option.option'(X26),'const.option.NONE_0') = s('type.option.option'(X26),X27)) ) | $spl8),
  inference(backward_demodulation,[],[f4002,f469])).
fof(f4425,plain,(
  ( ! [X154,X152,X151,X155,X153,X150] : (s(X150,X155) = s(X150,sK7(X155,happ(s(fun(fun(X151,fun(X150,bool)),fun(X150,bool)),happ(s(fun(fun(X150,bool),fun(fun(X151,fun(X150,bool)),fun(X150,bool))),happ(s(fun('type.option.option'(X151),fun(fun(X150,bool),fun(fun(X151,fun(X150,bool)),fun(X150,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X151),X152))),s(fun(X150,bool),X153))),s(fun(X151,fun(X150,bool)),X154)),X150))) ) | $spl8),
  inference(subsumption_resolution,[],[f4279,f114])).
fof(f4279,plain,(
  ( ! [X154,X152,X151,X155,X153,X150] : (~p(s(bool,'T_0')) | s(X150,X155) = s(X150,sK7(X155,happ(s(fun(fun(X151,fun(X150,bool)),fun(X150,bool)),happ(s(fun(fun(X150,bool),fun(fun(X151,fun(X150,bool)),fun(X150,bool))),happ(s(fun('type.option.option'(X151),fun(fun(X150,bool),fun(fun(X151,fun(X150,bool)),fun(X150,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X151),X152))),s(fun(X150,bool),X153))),s(fun(X151,fun(X150,bool)),X154)),X150))) ) | $spl8),
  inference(backward_demodulation,[],[f4002,f855])).
fof(f4420,plain,(
  ( ! [X103,X101,X105,X102,X106,X104] : (s(X101,X106) = s(X101,sK7(X106,'const.option.option_CASE_3'(s('type.option.option'(X102),'const.option.SOME_1'(s(X102,X103))),s(fun(X101,bool),X104),s(fun(X102,fun(X101,bool)),X105)),X101))) ) | $spl8),
  inference(subsumption_resolution,[],[f4276,f114])).
fof(f4276,plain,(
  ( ! [X103,X101,X105,X102,X106,X104] : (~p(s(bool,'T_0')) | s(X101,X106) = s(X101,sK7(X106,'const.option.option_CASE_3'(s('type.option.option'(X102),'const.option.SOME_1'(s(X102,X103))),s(fun(X101,bool),X104),s(fun(X102,fun(X101,bool)),X105)),X101))) ) | $spl8),
  inference(backward_demodulation,[],[f4002,f593])).
fof(f4417,plain,(
  ( ! [X30,X33,X31,X29,X34,X32] : (s(X29,happ(s(fun(X30,X29),X33),s(X30,X31))) = s(X29,sK7('const.option.option_CASE_3'(s('type.option.option'(X30),'const.option.SOME_1'(s(X30,X31))),s(X29,X32),s(fun(X30,X29),X33)),X34,X29))) ) | $spl8),
  inference(subsumption_resolution,[],[f4274,f114])).
fof(f4274,plain,(
  ( ! [X30,X33,X31,X29,X34,X32] : (~p(s(bool,'T_0')) | s(X29,happ(s(fun(X30,X29),X33),s(X30,X31))) = s(X29,sK7('const.option.option_CASE_3'(s('type.option.option'(X30),'const.option.SOME_1'(s(X30,X31))),s(X29,X32),s(fun(X30,X29),X33)),X34,X29))) ) | $spl8),
  inference(backward_demodulation,[],[f4002,f607])).
fof(f4414,plain,(
  ( ! [X39,X37,X41,X38,X36,X40] : (s(X36,'const.option.option_CASE_3'(s('type.option.option'(X37),X38),s(X36,X39),s(fun(X37,X36),X40))) = s(X36,sK7(happ(s(fun(fun(X37,X36),X36),happ(s(fun(X36,fun(fun(X37,X36),X36)),happ(s(fun('type.option.option'(X37),fun(X36,fun(fun(X37,X36),X36))),'const.option.option_CASE_0'),s('type.option.option'(X37),X38))),s(X36,X39))),s(fun(X37,X36),X40)),X41,X36))) ) | $spl8),
  inference(subsumption_resolution,[],[f4272,f114])).
fof(f4272,plain,(
  ( ! [X39,X37,X41,X38,X36,X40] : (~p(s(bool,'T_0')) | s(X36,'const.option.option_CASE_3'(s('type.option.option'(X37),X38),s(X36,X39),s(fun(X37,X36),X40))) = s(X36,sK7(happ(s(fun(fun(X37,X36),X36),happ(s(fun(X36,fun(fun(X37,X36),X36)),happ(s(fun('type.option.option'(X37),fun(X36,fun(fun(X37,X36),X36))),'const.option.option_CASE_0'),s('type.option.option'(X37),X38))),s(X36,X39))),s(fun(X37,X36),X40)),X41,X36))) ) | $spl8),
  inference(backward_demodulation,[],[f4002,f862])).
fof(f4404,plain,(
  ( ! [X21,X22,X20] : (s(X20,X21) = s(X20,sK7(sK6('const.option.SOME_1'(s(X20,X21)),X20),X22,X20))) ) | $spl8),
  inference(subsumption_resolution,[],[f4262,f114])).
fof(f4262,plain,(
  ( ! [X21,X22,X20] : (~p(s(bool,'T_0')) | s(X20,X21) = s(X20,sK7(sK6('const.option.SOME_1'(s(X20,X21)),X20),X22,X20))) ) | $spl8),
  inference(backward_demodulation,[],[f4002,f1005])).
fof(f4402,plain,(
  ( ! [X78,X79,X77] : (s(X77,X79) = s(X77,sK7(X79,sK6('const.option.SOME_1'(s(fun(X77,bool),X78)),fun(X77,bool)),X77))) ) | $spl8),
  inference(subsumption_resolution,[],[f4261,f114])).
fof(f4261,plain,(
  ( ! [X78,X79,X77] : (~p(s(bool,'T_0')) | s(X77,X79) = s(X77,sK7(X79,sK6('const.option.SOME_1'(s(fun(X77,bool),X78)),fun(X77,bool)),X77))) ) | $spl8),
  inference(backward_demodulation,[],[f4002,f989])).
fof(f4398,plain,(
  ( ! [X14,X12,X10,X13,X11] : (s(X10,X12) = s(X10,sK7('const.option.option_CASE_3'(s('type.option.option'(X11),'const.option.NONE_0'),s(X10,X12),s(fun(X11,X10),X13)),X14,X10))) ) | $spl8),
  inference(subsumption_resolution,[],[f4257,f114])).
fof(f4257,plain,(
  ( ! [X14,X12,X10,X13,X11] : (~p(s(bool,'T_0')) | s(X10,X12) = s(X10,sK7('const.option.option_CASE_3'(s('type.option.option'(X11),'const.option.NONE_0'),s(X10,X12),s(fun(X11,X10),X13)),X14,X10))) ) | $spl8),
  inference(backward_demodulation,[],[f4002,f447])).
fof(f4396,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(X0,X4) = s(X0,sK7(X4,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(fun(X0,bool),X2),s(fun(X1,fun(X0,bool)),X3)),X0))) ) | $spl8),
  inference(subsumption_resolution,[],[f4256,f114])).
fof(f4256,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'T_0')) | s(X0,X4) = s(X0,sK7(X4,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(fun(X0,bool),X2),s(fun(X1,fun(X0,bool)),X3)),X0))) ) | $spl8),
  inference(backward_demodulation,[],[f4002,f434])).
fof(f4392,plain,(
  ( ! [X2,X0,X1] : (s(X0,X2) = s(X0,sK7(X2,X1,X0))) ) | $spl8),
  inference(subsumption_resolution,[],[f4254,f114])).
fof(f4254,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s(X0,X2) = s(X0,sK7(X2,X1,X0))) ) | $spl8),
  inference(backward_demodulation,[],[f4002,f160])).
fof(f4383,plain,(
  ( ! [X80,X83,X81,X82] : (s(fun(X80,bool),X83) = s(fun(X80,bool),sK7(X83,happ(s(fun(bool,fun(fun(X80,bool),bool)),happ(s(fun('type.option.option'(X80),fun(bool,fun(fun(X80,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X80),X81))),s(bool,X82)),fun(X80,bool)))) ) | $spl8),
  inference(subsumption_resolution,[],[f4244,f114])).
fof(f4244,plain,(
  ( ! [X80,X83,X81,X82] : (~p(s(bool,'T_0')) | s(fun(X80,bool),X83) = s(fun(X80,bool),sK7(X83,happ(s(fun(bool,fun(fun(X80,bool),bool)),happ(s(fun('type.option.option'(X80),fun(bool,fun(fun(X80,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X80),X81))),s(bool,X82)),fun(X80,bool)))) ) | $spl8),
  inference(backward_demodulation,[],[f4002,f840])).
fof(f4381,plain,(
  ( ! [X0] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0)))) ) | $spl8),
  inference(subsumption_resolution,[],[f4241,f158])).
fof(f4241,plain,(
  ( ! [X0] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | $spl8),
  inference(backward_demodulation,[],[f4002,f3994])).
fof(f4019,plain,(
  ( ! [X4,X5,X3] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X5))) | s(bool,X5) = s(bool,'const.bool.IN_2'(s(X3,X4),s(fun(X3,bool),'const.pred_set.EMPTY_0')))) ) | $spl8),
  inference(backward_demodulation,[],[f4002,f360])).
fof(f4326,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl8),
  inference(subsumption_resolution,[],[f4013,f4002])).
fof(f4013,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | ~p(s(bool,X0))) ) | $spl8),
  inference(backward_demodulation,[],[f4002,f127])).
fof(f4429,plain,(
  $false | ($spl0 | $spl8)),
  inference(global_subsumption,[],[f4297,f113,f112,f111,f114,f179,f121,f124,f123,f128,f127,f148,f153,f154,f158,f157,f161,f160,f159,f165,f162,f166,f167,f168,f169,f180,f192,f191,f208,f211,f243,f258,f298,f355,f360,f361,f362,f363,f403,f404,f434,f446,f439,f440,f447,f455,f458,f459,f465,f467,f469,f534,f532,f535,f559,f572,f574,f607,f615,f593,f347,f696,f734,f735,f736,f769,f770,f782,f826,f828,f862,f863,f840,f864,f876,f855,f901,f912,f914,f960,f1005,f1018,f989,f1061,f1062,f1063,f1065,f1066,f1067,f1046,f1068,f1070,f1071,f1092,f1093,f1094,f1095,f1111,f1122,f1123,f1124,f1125,f1170,f1172,f1174,f1175,f1184,f1188,f1190,f1191,f1256,f1258,f1259,f1265,f1576,f1577,f1580,f1581,f1295,f1297,f1299,f1300,f1309,f1313,f1315,f1316,f1609,f1615,f1783,f2542,f2543,f2544,f2616,f2583,f2622,f2817,f2818,f2819,f2820,f2821,f2843,f2844,f2845,f2846,f2847,f3015,f3016,f3017,f3018,f3019,f3948,f3949,f3950,f3951,f3994,f4002,f4326,f4019,f4381,f4383,f4392,f4396,f4398,f4402,f4404,f4414,f4417,f4420,f4425])).
fof(f4297,plain,(
  ( ! [X80,X78,X79] : (s('type.option.option'(X78),'const.option.SOME_1'(s(X78,sK6(X79,X78)))) = s('type.option.option'(X78),sK7('const.option.SOME_1'(s(X78,sK6(X79,X78))),X80,'type.option.option'(X78))) | s('type.option.option'(X78),'const.option.NONE_0') = s('type.option.option'(X78),X79)) ) | ($spl0 | $spl8)),
  inference(trivial_inequality_removal,[],[f4292])).
fof(f4292,plain,(
  ( ! [X80,X78,X79] : (s(bool,'T_0') != s(bool,'T_0') | s('type.option.option'(X78),'const.option.SOME_1'(s(X78,sK6(X79,X78)))) = s('type.option.option'(X78),sK7('const.option.SOME_1'(s(X78,sK6(X79,X78))),X80,'type.option.option'(X78))) | s('type.option.option'(X78),'const.option.NONE_0') = s('type.option.option'(X78),X79)) ) | ($spl0 | $spl8)),
  inference(backward_demodulation,[],[f4002,f3074])).
fof(f4426,plain,(
  $false | $spl8),
  inference(global_subsumption,[],[f113,f112,f111,f114,f179,f121,f124,f123,f128,f127,f148,f153,f154,f158,f157,f161,f160,f159,f165,f162,f166,f167,f168,f169,f180,f192,f191,f208,f211,f243,f258,f298,f355,f360,f361,f362,f363,f403,f404,f434,f446,f439,f440,f447,f455,f458,f459,f465,f467,f469,f534,f532,f535,f559,f572,f574,f607,f615,f593,f347,f696,f734,f735,f736,f769,f770,f782,f826,f828,f862,f863,f840,f864,f876,f855,f901,f912,f914,f960,f1005,f1018,f989,f1061,f1062,f1063,f1065,f1066,f1067,f1046,f1068,f1070,f1071,f1092,f1093,f1094,f1095,f1111,f1122,f1123,f1124,f1125,f1170,f1172,f1174,f1175,f1184,f1188,f1190,f1191,f1256,f1258,f1259,f1265,f1576,f1577,f1580,f1581,f1295,f1297,f1299,f1300,f1309,f1313,f1315,f1316,f1609,f1615,f1783,f2542,f2543,f2544,f2616,f2583,f2622,f2817,f2818,f2819,f2820,f2821,f2843,f2844,f2845,f2846,f2847,f3015,f3016,f3017,f3018,f3019,f3948,f3949,f3950,f3951,f3994,f4002,f4326,f4019,f4381,f4383,f4392,f4396,f4398,f4402,f4404,f4414,f4417,f4420,f4425])).
fof(f4424,plain,(
  $false | ($spl0 | $spl8)),
  inference(global_subsumption,[],[f4306,f113,f112,f111,f114,f179,f121,f124,f123,f128,f127,f148,f153,f154,f158,f157,f161,f160,f159,f165,f162,f166,f167,f168,f169,f180,f192,f191,f208,f211,f243,f258,f298,f355,f360,f361,f362,f363,f403,f404,f434,f446,f439,f440,f447,f455,f458,f459,f465,f467,f469,f534,f532,f535,f559,f572,f574,f607,f615,f593,f347,f696,f734,f735,f736,f769,f770,f782,f826,f828,f862,f863,f840,f864,f876,f855,f901,f912,f914,f960,f1005,f1018,f989,f1061,f1062,f1063,f1065,f1066,f1067,f1046,f1068,f1070,f1071,f1092,f1093,f1094,f1095,f1111,f1122,f1123,f1124,f1125,f1170,f1172,f1174,f1175,f1184,f1188,f1190,f1191,f1256,f1258,f1259,f1265,f1576,f1577,f1580,f1581,f1295,f1297,f1299,f1300,f1309,f1313,f1315,f1316,f1609,f1615,f1783,f2542,f2543,f2544,f2616,f2583,f2622,f2817,f2818,f2819,f2820,f2821,f2843,f2844,f2845,f2846,f2847,f3015,f3016,f3017,f3018,f3019,f3948,f3949,f3950,f3951,f3994,f4002,f4326,f4019,f4381,f4383,f4392,f4396,f4398,f4402,f4404,f4414,f4417,f4420])).
fof(f4306,plain,(
  ( ! [X14,X12,X15,X13,X11,X16] : (s(X11,X16) = s(X11,sK7(X16,happ(s(fun(fun(X12,fun(X11,bool)),fun(X11,bool)),happ(s(fun(fun(X11,bool),fun(fun(X12,fun(X11,bool)),fun(X11,bool))),happ(s(fun('type.option.option'(X12),fun(fun(X11,bool),fun(fun(X12,fun(X11,bool)),fun(X11,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X12),X13))),s(fun(X11,bool),X14))),s(fun(X12,fun(X11,bool)),X15)),X11))) ) | ($spl0 | $spl8)),
  inference(trivial_inequality_removal,[],[f4278])).
fof(f4278,plain,(
  ( ! [X14,X12,X15,X13,X11,X16] : (s(bool,'T_0') != s(bool,'T_0') | s(X11,X16) = s(X11,sK7(X16,happ(s(fun(fun(X12,fun(X11,bool)),fun(X11,bool)),happ(s(fun(fun(X11,bool),fun(fun(X12,fun(X11,bool)),fun(X11,bool))),happ(s(fun('type.option.option'(X12),fun(fun(X11,bool),fun(fun(X12,fun(X11,bool)),fun(X11,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X12),X13))),s(fun(X11,bool),X14))),s(fun(X12,fun(X11,bool)),X15)),X11))) ) | ($spl0 | $spl8)),
  inference(backward_demodulation,[],[f4002,f3047])).
fof(f4421,plain,(
  $false | $spl8),
  inference(global_subsumption,[],[f113,f112,f111,f114,f179,f121,f124,f123,f128,f127,f148,f153,f154,f158,f157,f161,f160,f159,f165,f162,f166,f167,f168,f169,f180,f192,f191,f208,f211,f243,f258,f298,f355,f360,f361,f362,f363,f403,f404,f434,f446,f439,f440,f447,f455,f458,f459,f465,f467,f469,f534,f532,f535,f559,f572,f574,f607,f615,f593,f347,f696,f734,f735,f736,f769,f770,f782,f826,f828,f862,f863,f840,f864,f876,f855,f901,f912,f914,f960,f1005,f1018,f989,f1061,f1062,f1063,f1065,f1066,f1067,f1046,f1068,f1070,f1071,f1092,f1093,f1094,f1095,f1111,f1122,f1123,f1124,f1125,f1170,f1172,f1174,f1175,f1184,f1188,f1190,f1191,f1256,f1258,f1259,f1265,f1576,f1577,f1580,f1581,f1295,f1297,f1299,f1300,f1309,f1313,f1315,f1316,f1609,f1615,f1783,f2542,f2543,f2544,f2616,f2583,f2622,f2817,f2818,f2819,f2820,f2821,f2843,f2844,f2845,f2846,f2847,f3015,f3016,f3017,f3018,f3019,f3948,f3949,f3950,f3951,f3994,f4002,f4326,f4019,f4381,f4383,f4392,f4396,f4398,f4402,f4404,f4414,f4417,f4420])).
fof(f4419,plain,(
  $false | ($spl0 | $spl8)),
  inference(global_subsumption,[],[f4307,f113,f112,f111,f114,f179,f121,f124,f123,f128,f127,f148,f153,f154,f158,f157,f161,f160,f159,f165,f162,f166,f167,f168,f169,f180,f192,f191,f208,f211,f243,f258,f298,f355,f360,f361,f362,f363,f403,f404,f434,f446,f439,f440,f447,f455,f458,f459,f465,f467,f469,f534,f532,f535,f559,f572,f574,f607,f615,f593,f347,f696,f734,f735,f736,f769,f770,f782,f826,f828,f862,f863,f840,f864,f876,f855,f901,f912,f914,f960,f1005,f1018,f989,f1061,f1062,f1063,f1065,f1066,f1067,f1046,f1068,f1070,f1071,f1092,f1093,f1094,f1095,f1111,f1122,f1123,f1124,f1125,f1170,f1172,f1174,f1175,f1184,f1188,f1190,f1191,f1256,f1258,f1259,f1265,f1576,f1577,f1580,f1581,f1295,f1297,f1299,f1300,f1309,f1313,f1315,f1316,f1609,f1615,f1783,f2542,f2543,f2544,f2616,f2583,f2622,f2817,f2818,f2819,f2820,f2821,f2843,f2844,f2845,f2846,f2847,f3015,f3016,f3017,f3018,f3019,f3948,f3949,f3950,f3951,f3994,f4002,f4326,f4019,f4381,f4383,f4392,f4396,f4398,f4402,f4404,f4414,f4417])).
fof(f4307,plain,(
  ( ! [X6,X10,X8,X7,X5,X9] : (s(X5,X10) = s(X5,sK7(X10,'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(fun(X5,bool),X8),s(fun(X6,fun(X5,bool)),X9)),X5))) ) | ($spl0 | $spl8)),
  inference(trivial_inequality_removal,[],[f4275])).
fof(f4275,plain,(
  ( ! [X6,X10,X8,X7,X5,X9] : (s(bool,'T_0') != s(bool,'T_0') | s(X5,X10) = s(X5,sK7(X10,'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(fun(X5,bool),X8),s(fun(X6,fun(X5,bool)),X9)),X5))) ) | ($spl0 | $spl8)),
  inference(backward_demodulation,[],[f4002,f3046])).
fof(f4418,plain,(
  $false | $spl8),
  inference(global_subsumption,[],[f113,f112,f111,f114,f179,f121,f124,f123,f128,f127,f148,f153,f154,f158,f157,f161,f160,f159,f165,f162,f166,f167,f168,f169,f180,f192,f191,f208,f211,f243,f258,f298,f355,f360,f361,f362,f363,f403,f404,f434,f446,f439,f440,f447,f455,f458,f459,f465,f467,f469,f534,f532,f535,f559,f572,f574,f607,f615,f593,f347,f696,f734,f735,f736,f769,f770,f782,f826,f828,f862,f863,f840,f864,f876,f855,f901,f912,f914,f960,f1005,f1018,f989,f1061,f1062,f1063,f1065,f1066,f1067,f1046,f1068,f1070,f1071,f1092,f1093,f1094,f1095,f1111,f1122,f1123,f1124,f1125,f1170,f1172,f1174,f1175,f1184,f1188,f1190,f1191,f1256,f1258,f1259,f1265,f1576,f1577,f1580,f1581,f1295,f1297,f1299,f1300,f1309,f1313,f1315,f1316,f1609,f1615,f1783,f2542,f2543,f2544,f2616,f2583,f2622,f2817,f2818,f2819,f2820,f2821,f2843,f2844,f2845,f2846,f2847,f3015,f3016,f3017,f3018,f3019,f3948,f3949,f3950,f3951,f3994,f4002,f4326,f4019,f4381,f4383,f4392,f4396,f4398,f4402,f4404,f4414,f4417])).
fof(f4416,plain,(
  $false | ($spl0 | $spl8)),
  inference(global_subsumption,[],[f4308,f113,f112,f111,f114,f179,f121,f124,f123,f128,f127,f148,f153,f154,f158,f157,f161,f160,f159,f165,f162,f166,f167,f168,f169,f180,f192,f191,f208,f211,f243,f258,f298,f355,f360,f361,f362,f363,f403,f404,f434,f446,f439,f440,f447,f455,f458,f459,f465,f467,f469,f534,f532,f535,f559,f572,f574,f607,f615,f593,f347,f696,f734,f735,f736,f769,f770,f782,f826,f828,f862,f863,f840,f864,f876,f855,f901,f912,f914,f960,f1005,f1018,f989,f1061,f1062,f1063,f1065,f1066,f1067,f1046,f1068,f1070,f1071,f1092,f1093,f1094,f1095,f1111,f1122,f1123,f1124,f1125,f1170,f1172,f1174,f1175,f1184,f1188,f1190,f1191,f1256,f1258,f1259,f1265,f1576,f1577,f1580,f1581,f1295,f1297,f1299,f1300,f1309,f1313,f1315,f1316,f1609,f1615,f1783,f2542,f2543,f2544,f2616,f2583,f2622,f2817,f2818,f2819,f2820,f2821,f2843,f2844,f2845,f2846,f2847,f3015,f3016,f3017,f3018,f3019,f3948,f3949,f3950,f3951,f3994,f4002,f4326,f4019,f4381,f4383,f4392,f4396,f4398,f4402,f4404,f4414])).
fof(f4308,plain,(
  ( ! [X6,X10,X8,X7,X5,X9] : (s(X5,happ(s(fun(X6,X5),X9),s(X6,X7))) = s(X5,sK7('const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(X5,X8),s(fun(X6,X5),X9)),X10,X5))) ) | ($spl0 | $spl8)),
  inference(trivial_inequality_removal,[],[f4273])).
fof(f4273,plain,(
  ( ! [X6,X10,X8,X7,X5,X9] : (s(bool,'T_0') != s(bool,'T_0') | s(X5,happ(s(fun(X6,X5),X9),s(X6,X7))) = s(X5,sK7('const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(X5,X8),s(fun(X6,X5),X9)),X10,X5))) ) | ($spl0 | $spl8)),
  inference(backward_demodulation,[],[f4002,f3091])).
fof(f4415,plain,(
  $false | $spl8),
  inference(global_subsumption,[],[f113,f112,f111,f114,f179,f121,f124,f123,f128,f127,f148,f153,f154,f158,f157,f161,f160,f159,f165,f162,f166,f167,f168,f169,f180,f192,f191,f208,f211,f243,f258,f298,f355,f360,f361,f362,f363,f403,f404,f434,f446,f439,f440,f447,f455,f458,f459,f465,f467,f469,f534,f532,f535,f559,f572,f574,f607,f615,f593,f347,f696,f734,f735,f736,f769,f770,f782,f826,f828,f862,f863,f840,f864,f876,f855,f901,f912,f914,f960,f1005,f1018,f989,f1061,f1062,f1063,f1065,f1066,f1067,f1046,f1068,f1070,f1071,f1092,f1093,f1094,f1095,f1111,f1122,f1123,f1124,f1125,f1170,f1172,f1174,f1175,f1184,f1188,f1190,f1191,f1256,f1258,f1259,f1265,f1576,f1577,f1580,f1581,f1295,f1297,f1299,f1300,f1309,f1313,f1315,f1316,f1609,f1615,f1783,f2542,f2543,f2544,f2616,f2583,f2622,f2817,f2818,f2819,f2820,f2821,f2843,f2844,f2845,f2846,f2847,f3015,f3016,f3017,f3018,f3019,f3948,f3949,f3950,f3951,f3994,f4002,f4326,f4019,f4381,f4383,f4392,f4396,f4398,f4402,f4404,f4414])).
fof(f4413,plain,(
  $false | ($spl0 | $spl8)),
  inference(global_subsumption,[],[f4309,f113,f112,f111,f114,f179,f121,f124,f123,f128,f127,f148,f153,f154,f158,f157,f161,f160,f159,f165,f162,f166,f167,f168,f169,f180,f192,f191,f208,f211,f243,f258,f298,f355,f360,f361,f362,f363,f403,f404,f434,f446,f439,f440,f447,f455,f458,f459,f465,f467,f469,f534,f532,f535,f559,f572,f574,f607,f615,f593,f347,f696,f734,f735,f736,f769,f770,f782,f826,f828,f862,f863,f840,f864,f876,f855,f901,f912,f914,f960,f1005,f1018,f989,f1061,f1062,f1063,f1065,f1066,f1067,f1046,f1068,f1070,f1071,f1092,f1093,f1094,f1095,f1111,f1122,f1123,f1124,f1125,f1170,f1172,f1174,f1175,f1184,f1188,f1190,f1191,f1256,f1258,f1259,f1265,f1576,f1577,f1580,f1581,f1295,f1297,f1299,f1300,f1309,f1313,f1315,f1316,f1609,f1615,f1783,f2542,f2543,f2544,f2616,f2583,f2622,f2817,f2818,f2819,f2820,f2821,f2843,f2844,f2845,f2846,f2847,f3015,f3016,f3017,f3018,f3019,f3948,f3949,f3950,f3951,f3994,f4002,f4326,f4019,f4381,f4383,f4392,f4396,f4398,f4402,f4404])).
fof(f4309,plain,(
  ( ! [X14,X12,X15,X13,X11,X16] : (s(X11,'const.option.option_CASE_3'(s('type.option.option'(X12),X13),s(X11,X14),s(fun(X12,X11),X15))) = s(X11,sK7(happ(s(fun(fun(X12,X11),X11),happ(s(fun(X11,fun(fun(X12,X11),X11)),happ(s(fun('type.option.option'(X12),fun(X11,fun(fun(X12,X11),X11))),'const.option.option_CASE_0'),s('type.option.option'(X12),X13))),s(X11,X14))),s(fun(X12,X11),X15)),X16,X11))) ) | ($spl0 | $spl8)),
  inference(trivial_inequality_removal,[],[f4271])).
fof(f4271,plain,(
  ( ! [X14,X12,X15,X13,X11,X16] : (s(bool,'T_0') != s(bool,'T_0') | s(X11,'const.option.option_CASE_3'(s('type.option.option'(X12),X13),s(X11,X14),s(fun(X12,X11),X15))) = s(X11,sK7(happ(s(fun(fun(X12,X11),X11),happ(s(fun(X11,fun(fun(X12,X11),X11)),happ(s(fun('type.option.option'(X12),fun(X11,fun(fun(X12,X11),X11))),'const.option.option_CASE_0'),s('type.option.option'(X12),X13))),s(X11,X14))),s(fun(X12,X11),X15)),X16,X11))) ) | ($spl0 | $spl8)),
  inference(backward_demodulation,[],[f4002,f3092])).
fof(f4412,plain,(
  $false | ($spl0 | $spl8)),
  inference(global_subsumption,[],[f4310,f113,f112,f111,f114,f179,f121,f124,f123,f128,f127,f148,f153,f154,f158,f157,f161,f160,f159,f165,f162,f166,f167,f168,f169,f180,f192,f191,f208,f211,f243,f258,f298,f355,f360,f361,f362,f363,f403,f404,f434,f446,f439,f440,f447,f455,f458,f459,f465,f467,f469,f534,f532,f535,f559,f572,f574,f607,f615,f593,f347,f696,f734,f735,f736,f769,f770,f782,f826,f828,f862,f863,f840,f864,f876,f855,f901,f912,f914,f960,f1005,f1018,f989,f1061,f1062,f1063,f1065,f1066,f1067,f1046,f1068,f1070,f1071,f1092,f1093,f1094,f1095,f1111,f1122,f1123,f1124,f1125,f1170,f1172,f1174,f1175,f1184,f1188,f1190,f1191,f1256,f1258,f1259,f1265,f1576,f1577,f1580,f1581,f1295,f1297,f1299,f1300,f1309,f1313,f1315,f1316,f1609,f1615,f1783,f2542,f2543,f2544,f2616,f2583,f2622,f2817,f2818,f2819,f2820,f2821,f2843,f2844,f2845,f2846,f2847,f3015,f3016,f3017,f3018,f3019,f3948,f3949,f3950,f3951,f3994,f4002,f4326,f4019,f4381,f4383,f4392,f4396,f4398,f4402,f4404])).
fof(f4310,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(X0,X2) = s(X0,sK7('const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(X0,X2),s(fun(X1,X0),X3)),X4,X0))) ) | ($spl0 | $spl8)),
  inference(trivial_inequality_removal,[],[f4270])).
fof(f4270,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') != s(bool,'T_0') | s(X0,X2) = s(X0,sK7('const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(X0,X2),s(fun(X1,X0),X3)),X4,X0))) ) | ($spl0 | $spl8)),
  inference(backward_demodulation,[],[f4002,f3090])).
fof(f4411,plain,(
  $false | ($spl0 | $spl8)),
  inference(global_subsumption,[],[f4311,f113,f112,f111,f114,f179,f121,f124,f123,f128,f127,f148,f153,f154,f158,f157,f161,f160,f159,f165,f162,f166,f167,f168,f169,f180,f192,f191,f208,f211,f243,f258,f298,f355,f360,f361,f362,f363,f403,f404,f434,f446,f439,f440,f447,f455,f458,f459,f465,f467,f469,f534,f532,f535,f559,f572,f574,f607,f615,f593,f347,f696,f734,f735,f736,f769,f770,f782,f826,f828,f862,f863,f840,f864,f876,f855,f901,f912,f914,f960,f1005,f1018,f989,f1061,f1062,f1063,f1065,f1066,f1067,f1046,f1068,f1070,f1071,f1092,f1093,f1094,f1095,f1111,f1122,f1123,f1124,f1125,f1170,f1172,f1174,f1175,f1184,f1188,f1190,f1191,f1256,f1258,f1259,f1265,f1576,f1577,f1580,f1581,f1295,f1297,f1299,f1300,f1309,f1313,f1315,f1316,f1609,f1615,f1783,f2542,f2543,f2544,f2616,f2583,f2622,f2817,f2818,f2819,f2820,f2821,f2843,f2844,f2845,f2846,f2847,f3015,f3016,f3017,f3018,f3019,f3948,f3949,f3950,f3951,f3994,f4002,f4326,f4019,f4381,f4383,f4392,f4396,f4398,f4402,f4404])).
fof(f4311,plain,(
  ( ! [X19,X17,X18] : (s(X17,X19) = s(X17,sK7(X19,sK6('const.option.SOME_1'(s(fun(X17,bool),X18)),fun(X17,bool)),X17))) ) | ($spl0 | $spl8)),
  inference(trivial_inequality_removal,[],[f4269])).
fof(f4269,plain,(
  ( ! [X19,X17,X18] : (s(bool,'T_0') != s(bool,'T_0') | s(X17,X19) = s(X17,sK7(X19,sK6('const.option.SOME_1'(s(fun(X17,bool),X18)),fun(X17,bool)),X17))) ) | ($spl0 | $spl8)),
  inference(backward_demodulation,[],[f4002,f3048])).
fof(f4410,plain,(
  $false | ($spl0 | $spl8)),
  inference(global_subsumption,[],[f4312,f113,f112,f111,f114,f179,f121,f124,f123,f128,f127,f148,f153,f154,f158,f157,f161,f160,f159,f165,f162,f166,f167,f168,f169,f180,f192,f191,f208,f211,f243,f258,f298,f355,f360,f361,f362,f363,f403,f404,f434,f446,f439,f440,f447,f455,f458,f459,f465,f467,f469,f534,f532,f535,f559,f572,f574,f607,f615,f593,f347,f696,f734,f735,f736,f769,f770,f782,f826,f828,f862,f863,f840,f864,f876,f855,f901,f912,f914,f960,f1005,f1018,f989,f1061,f1062,f1063,f1065,f1066,f1067,f1046,f1068,f1070,f1071,f1092,f1093,f1094,f1095,f1111,f1122,f1123,f1124,f1125,f1170,f1172,f1174,f1175,f1184,f1188,f1190,f1191,f1256,f1258,f1259,f1265,f1576,f1577,f1580,f1581,f1295,f1297,f1299,f1300,f1309,f1313,f1315,f1316,f1609,f1615,f1783,f2542,f2543,f2544,f2616,f2583,f2622,f2817,f2818,f2819,f2820,f2821,f2843,f2844,f2845,f2846,f2847,f3015,f3016,f3017,f3018,f3019,f3948,f3949,f3950,f3951,f3994,f4002,f4326,f4019,f4381,f4383,f4392,f4396,f4398,f4402,f4404])).
fof(f4312,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(X0,X4) = s(X0,sK7(X4,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(fun(X0,bool),X2),s(fun(X1,fun(X0,bool)),X3)),X0))) ) | ($spl0 | $spl8)),
  inference(trivial_inequality_removal,[],[f4268])).
fof(f4268,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') != s(bool,'T_0') | s(X0,X4) = s(X0,sK7(X4,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(fun(X0,bool),X2),s(fun(X1,fun(X0,bool)),X3)),X0))) ) | ($spl0 | $spl8)),
  inference(backward_demodulation,[],[f4002,f3045])).
fof(f4409,plain,(
  $false | ($spl0 | $spl8)),
  inference(global_subsumption,[],[f4408,f113,f112,f111,f114,f179,f121,f124,f123,f128,f127,f148,f153,f154,f158,f157,f161,f160,f159,f165,f162,f166,f167,f168,f169,f180,f192,f191,f208,f211,f243,f258,f298,f355,f360,f361,f362,f363,f403,f404,f434,f446,f439,f440,f447,f455,f458,f459,f465,f467,f469,f534,f532,f535,f559,f572,f574,f607,f615,f593,f347,f696,f734,f735,f736,f769,f770,f782,f826,f828,f862,f863,f840,f864,f876,f855,f901,f912,f914,f960,f1005,f1018,f989,f1061,f1062,f1063,f1065,f1066,f1067,f1046,f1068,f1070,f1071,f1092,f1093,f1094,f1095,f1111,f1122,f1123,f1124,f1125,f1170,f1172,f1174,f1175,f1184,f1188,f1190,f1191,f1256,f1258,f1259,f1265,f1576,f1577,f1580,f1581,f1295,f1297,f1299,f1300,f1309,f1313,f1315,f1316,f1609,f1615,f1783,f2542,f2543,f2544,f2616,f2583,f2622,f2817,f2818,f2819,f2820,f2821,f2843,f2844,f2845,f2846,f2847,f3015,f3016,f3017,f3018,f3019,f3948,f3949,f3950,f3951,f3994,f4002,f4326,f4019,f4381,f4383,f4392,f4396,f4398,f4402,f4404])).
fof(f4408,plain,(
  ( ! [X12,X13,X11] : (s(X11,sK7(X13,X12,X11)) = s(X11,sK7(sK7(X13,X12,X11),X12,X11))) ) | ($spl0 | $spl8)),
  inference(subsumption_resolution,[],[f4266,f114])).
fof(f4266,plain,(
  ( ! [X12,X13,X11] : (~p(s(bool,'T_0')) | s(X11,sK7(X13,X12,X11)) = s(X11,sK7(sK7(X13,X12,X11),X12,X11))) ) | ($spl0 | $spl8)),
  inference(backward_demodulation,[],[f4002,f2788])).
fof(f4405,plain,(
  $false | $spl8),
  inference(global_subsumption,[],[f113,f112,f111,f114,f179,f121,f124,f123,f128,f127,f148,f153,f154,f158,f157,f161,f160,f159,f165,f162,f166,f167,f168,f169,f180,f192,f191,f208,f211,f243,f258,f298,f355,f360,f361,f362,f363,f403,f404,f434,f446,f439,f440,f447,f455,f458,f459,f465,f467,f469,f534,f532,f535,f559,f572,f574,f607,f615,f593,f347,f696,f734,f735,f736,f769,f770,f782,f826,f828,f862,f863,f840,f864,f876,f855,f901,f912,f914,f960,f1005,f1018,f989,f1061,f1062,f1063,f1065,f1066,f1067,f1046,f1068,f1070,f1071,f1092,f1093,f1094,f1095,f1111,f1122,f1123,f1124,f1125,f1170,f1172,f1174,f1175,f1184,f1188,f1190,f1191,f1256,f1258,f1259,f1265,f1576,f1577,f1580,f1581,f1295,f1297,f1299,f1300,f1309,f1313,f1315,f1316,f1609,f1615,f1783,f2542,f2543,f2544,f2616,f2583,f2622,f2817,f2818,f2819,f2820,f2821,f2843,f2844,f2845,f2846,f2847,f3015,f3016,f3017,f3018,f3019,f3948,f3949,f3950,f3951,f3994,f4002,f4326,f4019,f4381,f4383,f4392,f4396,f4398,f4402,f4404])).
fof(f4403,plain,(
  $false | $spl8),
  inference(global_subsumption,[],[f113,f112,f111,f114,f179,f121,f124,f123,f128,f127,f148,f153,f154,f158,f157,f161,f160,f159,f165,f162,f166,f167,f168,f169,f180,f192,f191,f208,f211,f243,f258,f298,f355,f360,f361,f362,f363,f403,f404,f434,f446,f439,f440,f447,f455,f458,f459,f465,f467,f469,f534,f532,f535,f559,f572,f574,f607,f615,f593,f347,f696,f734,f735,f736,f769,f770,f782,f826,f828,f862,f863,f840,f864,f876,f855,f901,f912,f914,f960,f1005,f1018,f989,f1061,f1062,f1063,f1065,f1066,f1067,f1046,f1068,f1070,f1071,f1092,f1093,f1094,f1095,f1111,f1122,f1123,f1124,f1125,f1170,f1172,f1174,f1175,f1184,f1188,f1190,f1191,f1256,f1258,f1259,f1265,f1576,f1577,f1580,f1581,f1295,f1297,f1299,f1300,f1309,f1313,f1315,f1316,f1609,f1615,f1783,f2542,f2543,f2544,f2616,f2583,f2622,f2817,f2818,f2819,f2820,f2821,f2843,f2844,f2845,f2846,f2847,f3015,f3016,f3017,f3018,f3019,f3948,f3949,f3950,f3951,f3994,f4002,f4326,f4019,f4381,f4383,f4392,f4396,f4398,f4402])).
fof(f4399,plain,(
  $false | $spl8),
  inference(global_subsumption,[],[f113,f112,f111,f114,f179,f121,f124,f123,f128,f127,f148,f153,f154,f158,f157,f161,f160,f159,f165,f162,f166,f167,f168,f169,f180,f192,f191,f208,f211,f243,f258,f298,f355,f360,f361,f362,f363,f403,f404,f434,f446,f439,f440,f447,f455,f458,f459,f465,f467,f469,f534,f532,f535,f559,f572,f574,f607,f615,f593,f347,f696,f734,f735,f736,f769,f770,f782,f826,f828,f862,f863,f840,f864,f876,f855,f901,f912,f914,f960,f1005,f1018,f989,f1061,f1062,f1063,f1065,f1066,f1067,f1046,f1068,f1070,f1071,f1092,f1093,f1094,f1095,f1111,f1122,f1123,f1124,f1125,f1170,f1172,f1174,f1175,f1184,f1188,f1190,f1191,f1256,f1258,f1259,f1265,f1576,f1577,f1580,f1581,f1295,f1297,f1299,f1300,f1309,f1313,f1315,f1316,f1609,f1615,f1783,f2542,f2543,f2544,f2616,f2583,f2622,f2817,f2818,f2819,f2820,f2821,f2843,f2844,f2845,f2846,f2847,f3015,f3016,f3017,f3018,f3019,f3948,f3949,f3950,f3951,f3994,f4002,f4326,f4019,f4381,f4383,f4392,f4396,f4398])).
fof(f4397,plain,(
  $false | $spl8),
  inference(global_subsumption,[],[f113,f112,f111,f114,f179,f121,f124,f123,f128,f127,f148,f153,f154,f158,f157,f161,f160,f159,f165,f162,f166,f167,f168,f169,f180,f192,f191,f208,f211,f243,f258,f298,f355,f360,f361,f362,f363,f403,f404,f434,f446,f439,f440,f447,f455,f458,f459,f465,f467,f469,f534,f532,f535,f559,f572,f574,f607,f615,f593,f347,f696,f734,f735,f736,f769,f770,f782,f826,f828,f862,f863,f840,f864,f876,f855,f901,f912,f914,f960,f1005,f1018,f989,f1061,f1062,f1063,f1065,f1066,f1067,f1046,f1068,f1070,f1071,f1092,f1093,f1094,f1095,f1111,f1122,f1123,f1124,f1125,f1170,f1172,f1174,f1175,f1184,f1188,f1190,f1191,f1256,f1258,f1259,f1265,f1576,f1577,f1580,f1581,f1295,f1297,f1299,f1300,f1309,f1313,f1315,f1316,f1609,f1615,f1783,f2542,f2543,f2544,f2616,f2583,f2622,f2817,f2818,f2819,f2820,f2821,f2843,f2844,f2845,f2846,f2847,f3015,f3016,f3017,f3018,f3019,f3948,f3949,f3950,f3951,f3994,f4002,f4326,f4019,f4381,f4383,f4392,f4396])).
fof(f4393,plain,(
  $false | $spl8),
  inference(global_subsumption,[],[f113,f112,f111,f114,f179,f121,f124,f123,f128,f127,f148,f153,f154,f158,f157,f161,f160,f159,f165,f162,f166,f167,f168,f169,f180,f192,f191,f208,f211,f243,f258,f298,f355,f360,f361,f362,f363,f403,f404,f434,f446,f439,f440,f447,f455,f458,f459,f465,f467,f469,f534,f532,f535,f559,f572,f574,f607,f615,f593,f347,f696,f734,f735,f736,f769,f770,f782,f826,f828,f862,f863,f840,f864,f876,f855,f901,f912,f914,f960,f1005,f1018,f989,f1061,f1062,f1063,f1065,f1066,f1067,f1046,f1068,f1070,f1071,f1092,f1093,f1094,f1095,f1111,f1122,f1123,f1124,f1125,f1170,f1172,f1174,f1175,f1184,f1188,f1190,f1191,f1256,f1258,f1259,f1265,f1576,f1577,f1580,f1581,f1295,f1297,f1299,f1300,f1309,f1313,f1315,f1316,f1609,f1615,f1783,f2542,f2543,f2544,f2616,f2583,f2622,f2817,f2818,f2819,f2820,f2821,f2843,f2844,f2845,f2846,f2847,f3015,f3016,f3017,f3018,f3019,f3948,f3949,f3950,f3951,f3994,f4002,f4326,f4019,f4381,f4383,f4392])).
fof(f4391,plain,(
  $false | ($spl2 | $spl8)),
  inference(global_subsumption,[],[f4390,f113,f112,f111,f114,f179,f121,f124,f123,f128,f127,f148,f153,f154,f158,f157,f161,f160,f159,f165,f162,f166,f167,f168,f169,f180,f192,f191,f208,f211,f243,f258,f298,f355,f360,f361,f362,f363,f403,f404,f434,f446,f439,f440,f447,f455,f458,f459,f465,f467,f469,f534,f532,f535,f559,f572,f574,f607,f615,f593,f347,f696,f734,f735,f736,f769,f770,f782,f826,f828,f862,f863,f840,f864,f876,f855,f901,f912,f914,f960,f1005,f1018,f989,f1061,f1062,f1063,f1065,f1066,f1067,f1046,f1068,f1070,f1071,f1092,f1093,f1094,f1095,f1111,f1122,f1123,f1124,f1125,f1170,f1172,f1174,f1175,f1184,f1188,f1190,f1191,f1256,f1258,f1259,f1265,f1576,f1577,f1580,f1581,f1295,f1297,f1299,f1300,f1309,f1313,f1315,f1316,f1609,f1615,f1783,f2542,f2543,f2544,f2616,f2583,f2622,f2817,f2818,f2819,f2820,f2821,f2843,f2844,f2845,f2846,f2847,f3015,f3016,f3017,f3018,f3019,f3948,f3949,f3950,f3951,f3994,f4002,f4326,f4019,f4381,f4383])).
fof(f4390,plain,(
  ( ! [X5] : (s('type.option.option'(sK1),sK4) != s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,X5)))) ) | ($spl2 | $spl8)),
  inference(subsumption_resolution,[],[f4252,f114])).
fof(f4252,plain,(
  ( ! [X5] : (~p(s(bool,'T_0')) | s('type.option.option'(sK1),sK4) != s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,X5)))) ) | ($spl2 | $spl8)),
  inference(backward_demodulation,[],[f4002,f174])).
fof(f4389,plain,(
  $false | ($spl2 | $spl8)),
  inference(global_subsumption,[],[f4388,f113,f112,f111,f114,f179,f121,f124,f123,f128,f127,f148,f153,f154,f158,f157,f161,f160,f159,f165,f162,f166,f167,f168,f169,f180,f192,f191,f208,f211,f243,f258,f298,f355,f360,f361,f362,f363,f403,f404,f434,f446,f439,f440,f447,f455,f458,f459,f465,f467,f469,f534,f532,f535,f559,f572,f574,f607,f615,f593,f347,f696,f734,f735,f736,f769,f770,f782,f826,f828,f862,f863,f840,f864,f876,f855,f901,f912,f914,f960,f1005,f1018,f989,f1061,f1062,f1063,f1065,f1066,f1067,f1046,f1068,f1070,f1071,f1092,f1093,f1094,f1095,f1111,f1122,f1123,f1124,f1125,f1170,f1172,f1174,f1175,f1184,f1188,f1190,f1191,f1256,f1258,f1259,f1265,f1576,f1577,f1580,f1581,f1295,f1297,f1299,f1300,f1309,f1313,f1315,f1316,f1609,f1615,f1783,f2542,f2543,f2544,f2616,f2583,f2622,f2817,f2818,f2819,f2820,f2821,f2843,f2844,f2845,f2846,f2847,f3015,f3016,f3017,f3018,f3019,f3948,f3949,f3950,f3951,f3994,f4002,f4326,f4019,f4381,f4383])).
fof(f4388,plain,(
  ( ! [X0] : (s('type.option.option'(sK1),sK4) != s('type.option.option'(sK1),X0) | s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),X0)) ) | ($spl2 | $spl8)),
  inference(subsumption_resolution,[],[f4251,f114])).
fof(f4251,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s('type.option.option'(sK1),sK4) != s('type.option.option'(sK1),X0) | s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),X0)) ) | ($spl2 | $spl8)),
  inference(backward_demodulation,[],[f4002,f661])).
fof(f661,plain,(
  ( ! [X0] : (~p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),happ(s(fun(sK1,fun(sK0,bool)),sK3),s(sK1,sK6(X0,sK1))))))) | s('type.option.option'(sK1),sK4) != s('type.option.option'(sK1),X0) | s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),X0)) ) | $spl2),
  inference(superposition,[],[f174,f148])).
fof(f4387,plain,(
  $false | ($spl0 | $spl8)),
  inference(global_subsumption,[],[f4317,f113,f112,f111,f114,f179,f121,f124,f123,f128,f127,f148,f153,f154,f158,f157,f161,f160,f159,f165,f162,f166,f167,f168,f169,f180,f192,f191,f208,f211,f243,f258,f298,f355,f360,f361,f362,f363,f403,f404,f434,f446,f439,f440,f447,f455,f458,f459,f465,f467,f469,f534,f532,f535,f559,f572,f574,f607,f615,f593,f347,f696,f734,f735,f736,f769,f770,f782,f826,f828,f862,f863,f840,f864,f876,f855,f901,f912,f914,f960,f1005,f1018,f989,f1061,f1062,f1063,f1065,f1066,f1067,f1046,f1068,f1070,f1071,f1092,f1093,f1094,f1095,f1111,f1122,f1123,f1124,f1125,f1170,f1172,f1174,f1175,f1184,f1188,f1190,f1191,f1256,f1258,f1259,f1265,f1576,f1577,f1580,f1581,f1295,f1297,f1299,f1300,f1309,f1313,f1315,f1316,f1609,f1615,f1783,f2542,f2543,f2544,f2616,f2583,f2622,f2817,f2818,f2819,f2820,f2821,f2843,f2844,f2845,f2846,f2847,f3015,f3016,f3017,f3018,f3019,f3948,f3949,f3950,f3951,f3994,f4002,f4326,f4019,f4381,f4383])).
fof(f4317,plain,(
  ( ! [X43,X41,X44,X42] : (s(fun(X41,bool),X44) = s(fun(X41,bool),sK7(X44,happ(s(fun(bool,fun(fun(X41,bool),bool)),happ(s(fun('type.option.option'(X41),fun(bool,fun(fun(X41,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X41),X42))),s(bool,X43)),fun(X41,bool)))) ) | ($spl0 | $spl8)),
  inference(trivial_inequality_removal,[],[f4250])).
fof(f4250,plain,(
  ( ! [X43,X41,X44,X42] : (s(bool,'T_0') != s(bool,'T_0') | s(fun(X41,bool),X44) = s(fun(X41,bool),sK7(X44,happ(s(fun(bool,fun(fun(X41,bool),bool)),happ(s(fun('type.option.option'(X41),fun(bool,fun(fun(X41,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X41),X42))),s(bool,X43)),fun(X41,bool)))) ) | ($spl0 | $spl8)),
  inference(backward_demodulation,[],[f4002,f3086])).
fof(f4384,plain,(
  $false | $spl8),
  inference(global_subsumption,[],[f113,f112,f111,f114,f179,f121,f124,f123,f128,f127,f148,f153,f154,f158,f157,f161,f160,f159,f165,f162,f166,f167,f168,f169,f180,f192,f191,f208,f211,f243,f258,f298,f355,f360,f361,f362,f363,f403,f404,f434,f446,f439,f440,f447,f455,f458,f459,f465,f467,f469,f534,f532,f535,f559,f572,f574,f607,f615,f593,f347,f696,f734,f735,f736,f769,f770,f782,f826,f828,f862,f863,f840,f864,f876,f855,f901,f912,f914,f960,f1005,f1018,f989,f1061,f1062,f1063,f1065,f1066,f1067,f1046,f1068,f1070,f1071,f1092,f1093,f1094,f1095,f1111,f1122,f1123,f1124,f1125,f1170,f1172,f1174,f1175,f1184,f1188,f1190,f1191,f1256,f1258,f1259,f1265,f1576,f1577,f1580,f1581,f1295,f1297,f1299,f1300,f1309,f1313,f1315,f1316,f1609,f1615,f1783,f2542,f2543,f2544,f2616,f2583,f2622,f2817,f2818,f2819,f2820,f2821,f2843,f2844,f2845,f2846,f2847,f3015,f3016,f3017,f3018,f3019,f3948,f3949,f3950,f3951,f3994,f4002,f4326,f4019,f4381,f4383])).
fof(f4382,plain,(
  $false | $spl8),
  inference(global_subsumption,[],[f113,f112,f111,f114,f179,f121,f124,f123,f128,f127,f148,f153,f154,f158,f157,f161,f160,f159,f165,f162,f166,f167,f168,f169,f180,f192,f191,f208,f211,f243,f258,f298,f355,f360,f361,f362,f363,f403,f404,f434,f446,f439,f440,f447,f455,f458,f459,f465,f467,f469,f534,f532,f535,f559,f572,f574,f607,f615,f593,f347,f696,f734,f735,f736,f769,f770,f782,f826,f828,f862,f863,f840,f864,f876,f855,f901,f912,f914,f960,f1005,f1018,f989,f1061,f1062,f1063,f1065,f1066,f1067,f1046,f1068,f1070,f1071,f1092,f1093,f1094,f1095,f1111,f1122,f1123,f1124,f1125,f1170,f1172,f1174,f1175,f1184,f1188,f1190,f1191,f1256,f1258,f1259,f1265,f1576,f1577,f1580,f1581,f1295,f1297,f1299,f1300,f1309,f1313,f1315,f1316,f1609,f1615,f1783,f2542,f2543,f2544,f2616,f2583,f2622,f2817,f2818,f2819,f2820,f2821,f2843,f2844,f2845,f2846,f2847,f3015,f3016,f3017,f3018,f3019,f3948,f3949,f3950,f3951,f3994,f4002,f4326,f4019,f4381])).
fof(f4353,plain,(
  $false | ($spl0 | $spl8)),
  inference(global_subsumption,[],[f4352,f113,f112,f111,f114,f179,f121,f124,f123,f128,f127,f148,f153,f154,f158,f157,f161,f160,f159,f165,f162,f166,f167,f168,f169,f180,f192,f191,f208,f211,f243,f258,f298,f355,f360,f361,f362,f363,f403,f404,f434,f446,f439,f440,f447,f455,f458,f459,f465,f467,f469,f534,f532,f535,f559,f572,f574,f607,f615,f593,f347,f696,f734,f735,f736,f769,f770,f782,f826,f828,f862,f863,f840,f864,f876,f855,f901,f912,f914,f960,f1005,f1018,f989,f1061,f1062,f1063,f1065,f1066,f1067,f1046,f1068,f1070,f1071,f1092,f1093,f1094,f1095,f1111,f1122,f1123,f1124,f1125,f1170,f1172,f1174,f1175,f1184,f1188,f1190,f1191,f1256,f1258,f1259,f1265,f1576,f1577,f1580,f1581,f1295,f1297,f1299,f1300,f1309,f1313,f1315,f1316,f1609,f1615,f1783,f2542,f2543,f2544,f2616,f2583,f2622,f2817,f2818,f2819,f2820,f2821,f2843,f2844,f2845,f2846,f2847,f3015,f3016,f3017,f3018,f3019,f3948,f3949,f3950,f3951,f3994,f4002,f4326,f4019])).
fof(f4352,plain,(
  ( ! [X127,X125,X126,X124] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X127))) | s(X124,X126) = s(X124,sK7(X126,X125,X124))) ) | ($spl0 | $spl8)),
  inference(forward_demodulation,[],[f4351,f4002])).
fof(f4351,plain,(
  ( ! [X127,X125,X126,X124] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X127))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X124,bool),X125),s(X124,X126))))) | s(X124,X126) = s(X124,sK7(X126,X125,X124))) ) | ($spl0 | $spl8)),
  inference(subsumption_resolution,[],[f4137,f4002])).
fof(f4137,plain,(
  ( ! [X127,X125,X126,X124] : (s(bool,'T_0') != s(bool,X127) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X127))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X124,bool),X125),s(X124,X126))))) | s(X124,X126) = s(X124,sK7(X126,X125,X124))) ) | ($spl0 | $spl8)),
  inference(backward_demodulation,[],[f4002,f2755])).
fof(f4350,plain,(
  $false | ($spl0 | $spl8)),
  inference(global_subsumption,[],[f4136,f113,f112,f111,f114,f179,f121,f124,f123,f128,f127,f148,f153,f154,f158,f157,f161,f160,f159,f165,f162,f166,f167,f168,f169,f180,f192,f191,f208,f211,f243,f258,f298,f355,f360,f361,f362,f363,f403,f404,f434,f446,f439,f440,f447,f455,f458,f459,f465,f467,f469,f534,f532,f535,f559,f572,f574,f607,f615,f593,f347,f696,f734,f735,f736,f769,f770,f782,f826,f828,f862,f863,f840,f864,f876,f855,f901,f912,f914,f960,f1005,f1018,f989,f1061,f1062,f1063,f1065,f1066,f1067,f1046,f1068,f1070,f1071,f1092,f1093,f1094,f1095,f1111,f1122,f1123,f1124,f1125,f1170,f1172,f1174,f1175,f1184,f1188,f1190,f1191,f1256,f1258,f1259,f1265,f1576,f1577,f1580,f1581,f1295,f1297,f1299,f1300,f1309,f1313,f1315,f1316,f1609,f1615,f1783,f2542,f2543,f2544,f2616,f2583,f2622,f2817,f2818,f2819,f2820,f2821,f2843,f2844,f2845,f2846,f2847,f3015,f3016,f3017,f3018,f3019,f3948,f3949,f3950,f3951,f3994,f4002,f4326,f4019])).
fof(f4136,plain,(
  ( ! [X118,X116,X119,X117] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X119))) | s(bool,X119) = s(bool,happ(s(fun(X116,bool),X117),s(X116,X118))) | s(X116,X118) = s(X116,sK7(X118,X117,X116))) ) | ($spl0 | $spl8)),
  inference(backward_demodulation,[],[f4002,f2753])).
fof(f4329,plain,(
  $false | $spl8),
  inference(global_subsumption,[],[f113,f112,f111,f114,f179,f121,f124,f123,f128,f127,f148,f153,f154,f158,f157,f161,f160,f159,f165,f162,f166,f167,f168,f169,f180,f192,f191,f208,f211,f243,f258,f298,f355,f360,f361,f362,f363,f403,f404,f434,f446,f439,f440,f447,f455,f458,f459,f465,f467,f469,f534,f532,f535,f559,f572,f574,f607,f615,f593,f347,f696,f734,f735,f736,f769,f770,f782,f826,f828,f862,f863,f840,f864,f876,f855,f901,f912,f914,f960,f1005,f1018,f989,f1061,f1062,f1063,f1065,f1066,f1067,f1046,f1068,f1070,f1071,f1092,f1093,f1094,f1095,f1111,f1122,f1123,f1124,f1125,f1170,f1172,f1174,f1175,f1184,f1188,f1190,f1191,f1256,f1258,f1259,f1265,f1576,f1577,f1580,f1581,f1295,f1297,f1299,f1300,f1309,f1313,f1315,f1316,f1609,f1615,f1783,f2542,f2543,f2544,f2616,f2583,f2622,f2817,f2818,f2819,f2820,f2821,f2843,f2844,f2845,f2846,f2847,f3015,f3016,f3017,f3018,f3019,f3948,f3949,f3950,f3951,f3994,f4002,f4326,f4019])).
fof(f4328,plain,(
  $false | $spl8),
  inference(subsumption_resolution,[],[f4015,f114])).
fof(f4015,plain,(
  ~p(s(bool,'T_0')) | $spl8),
  inference(backward_demodulation,[],[f4002,f179])).
fof(f4327,plain,(
  $false | $spl8),
  inference(global_subsumption,[],[f113,f112,f111,f114,f179,f121,f124,f123,f128,f127,f148,f153,f154,f158,f157,f161,f160,f159,f165,f162,f166,f167,f168,f169,f180,f192,f191,f208,f211,f243,f258,f298,f355,f360,f361,f362,f363,f403,f404,f434,f446,f439,f440,f447,f455,f458,f459,f465,f467,f469,f534,f532,f535,f559,f572,f574,f607,f615,f593,f347,f696,f734,f735,f736,f769,f770,f782,f826,f828,f862,f863,f840,f864,f876,f855,f901,f912,f914,f960,f1005,f1018,f989,f1061,f1062,f1063,f1065,f1066,f1067,f1046,f1068,f1070,f1071,f1092,f1093,f1094,f1095,f1111,f1122,f1123,f1124,f1125,f1170,f1172,f1174,f1175,f1184,f1188,f1190,f1191,f1256,f1258,f1259,f1265,f1576,f1577,f1580,f1581,f1295,f1297,f1299,f1300,f1309,f1313,f1315,f1316,f1609,f1615,f1783,f2542,f2543,f2544,f2616,f2583,f2622,f2817,f2818,f2819,f2820,f2821,f2843,f2844,f2845,f2846,f2847,f3015,f3016,f3017,f3018,f3019,f3948,f3949,f3950,f3951,f3994,f4002,f4326])).
fof(f4325,plain,(
  $false | $spl8),
  inference(trivial_inequality_removal,[],[f4018])).
fof(f4018,plain,(
  s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | $spl8),
  inference(backward_demodulation,[],[f4002,f347])).
fof(f4324,plain,(
  $false | $spl8),
  inference(trivial_inequality_removal,[],[f4030])).
fof(f4030,plain,(
  s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) | $spl8),
  inference(backward_demodulation,[],[f4002,f696])).
fof(f4006,plain,(
  ( ! [X61,X62,X63] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X61,bool),X62),s(X61,X63))))) | s(X61,X63) = s(X61,sK7(X63,X62,X61))) ) | $spl12),
  inference(cnf_transformation,[],[f4006_D])).
fof(f4006_D,plain,(
  ( ! [X61,X62,X63] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X61,bool),X62),s(X61,X63))))) | s(X61,X63) = s(X61,sK7(X63,X62,X61))) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f4005,plain,(
  ( ! [X61,X64,X62,X63] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X61,bool),X62),s(X61,X63))))) | s(bool,'T_0') = s(bool,X64) | s(X61,X63) = s(X61,sK7(X63,X62,X61))) ) | $spl0),
  inference(subsumption_resolution,[],[f3975,f121])).
fof(f3975,plain,(
  ( ! [X61,X64,X62,X63] : (s(bool,'F_0') != s(bool,X64) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X61,bool),X62),s(X61,X63))))) | s(bool,'T_0') = s(bool,X64) | s(X61,X63) = s(X61,sK7(X63,X62,X61))) ) | $spl0),
  inference(superposition,[],[f403,f1756])).
fof(f4003,plain,(
  ( ! [X36,X34] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X34))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X36)),bool)) | s(bool,X34) = s(bool,X36)) ) | $spl10),
  inference(cnf_transformation,[],[f4003_D])).
fof(f4003_D,plain,(
  ( ! [X36,X34] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X34))) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X36)),bool)) | s(bool,X34) = s(bool,X36)) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f4001,plain,(
  ( ! [X35,X36,X34] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X34))) | s(bool,'T_0') = s(bool,X35) | s(bool,X34) = s(bool,X36) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X36)),bool))) ) | $spl0),
  inference(subsumption_resolution,[],[f3964,f121])).
fof(f3964,plain,(
  ( ! [X35,X36,X34] : (s(bool,'F_0') != s(bool,X35) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X34))) | s(bool,'T_0') = s(bool,X35) | s(bool,X34) = s(bool,X36) | s(bool,'F_0') = s(bool,sK6('const.option.SOME_1'(s(bool,X36)),bool))) ) | $spl0),
  inference(superposition,[],[f403,f1834])).
fof(f677,plain,(
  $false | ($spl0 | $spl2 | $spl6)),
  inference(subsumption_resolution,[],[f618,f662])).
fof(f662,plain,(
  ~p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),happ(s(fun(sK1,fun(sK0,bool)),sK3),s(sK1,sK5)))))) | ($spl2 | $spl6)),
  inference(trivial_inequality_removal,[],[f660])).
fof(f660,plain,(
  s('type.option.option'(sK1),sK4) != s('type.option.option'(sK1),sK4) | ~p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),happ(s(fun(sK1,fun(sK0,bool)),sK3),s(sK1,sK5)))))) | ($spl2 | $spl6)),
  inference(superposition,[],[f174,f178])).
fof(f618,plain,(
  p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),happ(s(fun(sK1,fun(sK0,bool)),sK3),s(sK1,sK5)))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f172,f558])).
fof(f558,plain,(
  ( ! [X2,X0,X1] : (s(X0,happ(s(fun(sK1,X0),X1),s(sK1,sK5))) = s(X0,'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(X0,X2),s(fun(sK1,X0),X1)))) ) | $spl6),
  inference(superposition,[],[f168,f178])).
fof(f676,plain,(
  $false | ($spl2 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f675,f114])).
fof(f675,plain,(
  ~p(s(bool,'T_0')) | ($spl2 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f662,f182])).
fof(f182,plain,(
  s(bool,'T_0') = s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),happ(s(fun(sK1,fun(sK0,bool)),sK3),s(sK1,sK5))))) | $spl4),
  inference(unit_resulting_resolution,[],[f176,f124])).
fof(f672,plain,(
  $false | ($spl2 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f671,f114])).
fof(f671,plain,(
  ~p(s(bool,'T_0')) | ($spl2 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f670,f182])).
fof(f670,plain,(
  ~p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),happ(s(fun(sK1,fun(sK0,bool)),sK3),s(sK1,sK5)))))) | ($spl2 | $spl6)),
  inference(forward_demodulation,[],[f669,f538])).
fof(f538,plain,(
  s(sK1,sK5) = s(sK1,sK6('const.option.SOME_1'(s(sK1,sK5)),sK1)) | $spl6),
  inference(unit_resulting_resolution,[],[f153,f178,f463])).
fof(f463,plain,(
  ( ! [X11] : (s('type.option.option'(sK1),sK4) != s('type.option.option'(sK1),X11) | s(sK1,sK5) = s(sK1,sK6(X11,sK1)) | s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),X11)) ) | $spl6),
  inference(superposition,[],[f364,f148])).
fof(f364,plain,(
  ( ! [X0] : (s('type.option.option'(sK1),sK4) != s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,X0))) | s(sK1,sK5) = s(sK1,X0)) ) | $spl6),
  inference(superposition,[],[f157,f178])).
fof(f669,plain,(
  ~p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),happ(s(fun(sK1,fun(sK0,bool)),sK3),s(sK1,sK6('const.option.SOME_1'(s(sK1,sK5)),sK1))))))) | ($spl2 | $spl6)),
  inference(subsumption_resolution,[],[f657,f178])).
fof(f657,plain,(
  s('type.option.option'(sK1),sK4) != s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK5))) | ~p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),happ(s(fun(sK1,fun(sK0,bool)),sK3),s(sK1,sK6('const.option.SOME_1'(s(sK1,sK5)),sK1))))))) | ($spl2 | $spl6)),
  inference(superposition,[],[f174,f538])).
fof(f668,plain,(
  $false | ($spl2 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f667,f114])).
fof(f667,plain,(
  ~p(s(bool,'T_0')) | ($spl2 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f666,f182])).
fof(f666,plain,(
  ~p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),happ(s(fun(sK1,fun(sK0,bool)),sK3),s(sK1,sK5)))))) | ($spl2 | $spl6)),
  inference(forward_demodulation,[],[f665,f474])).
fof(f474,plain,(
  s(sK1,sK5) = s(sK1,sK6(sK4,sK1)) | $spl6),
  inference(unit_resulting_resolution,[],[f456,f364])).
fof(f456,plain,(
  s('type.option.option'(sK1),sK4) = s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK6(sK4,sK1)))) | $spl6),
  inference(unit_resulting_resolution,[],[f190,f148])).
fof(f190,plain,(
  s('type.option.option'(sK1),'const.option.NONE_0') != s('type.option.option'(sK1),sK4) | $spl6),
  inference(superposition,[],[f153,f178])).
fof(f665,plain,(
  ~p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),happ(s(fun(sK1,fun(sK0,bool)),sK3),s(sK1,sK6(sK4,sK1))))))) | ($spl2 | $spl6)),
  inference(subsumption_resolution,[],[f656,f178])).
fof(f656,plain,(
  s('type.option.option'(sK1),sK4) != s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK5))) | ~p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),happ(s(fun(sK1,fun(sK0,bool)),sK3),s(sK1,sK6(sK4,sK1))))))) | ($spl2 | $spl6)),
  inference(superposition,[],[f174,f474])).
fof(f664,plain,(
  $false | ($spl2 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f663,f114])).
fof(f663,plain,(
  ~p(s(bool,'T_0')) | ($spl2 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f655,f182])).
fof(f655,plain,(
  ~p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),happ(s(fun(sK1,fun(sK0,bool)),sK3),s(sK1,sK5)))))) | ($spl2 | $spl6)),
  inference(unit_resulting_resolution,[],[f178,f174])).
fof(f604,plain,(
  $false | ($spl1 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f601,f182])).
fof(f601,plain,(
  s(bool,'T_0') != s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),happ(s(fun(sK1,fun(sK0,bool)),sK3),s(sK1,sK5))))) | ($spl1 | $spl6)),
  inference(backward_demodulation,[],[f558,f204])).
fof(f204,plain,(
  s(bool,'T_0') != s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3))))) | $spl1),
  inference(unit_resulting_resolution,[],[f173,f123])).
fof(f603,plain,(
  $false | ($spl1 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f602,f180])).
fof(f602,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl1 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f600,f182])).
fof(f600,plain,(
  s(bool,'F_0') = s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),happ(s(fun(sK1,fun(sK0,bool)),sK3),s(sK1,sK5))))) | ($spl1 | $spl6)),
  inference(backward_demodulation,[],[f558,f203])).
fof(f203,plain,(
  s(bool,'F_0') = s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3))))) | $spl1),
  inference(unit_resulting_resolution,[],[f173,f128])).
fof(f172,plain,(
  p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3)))))) | $spl0),
  inference(cnf_transformation,[],[f172_D])).
fof(f172_D,plain,(
  p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3)))))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f178,plain,(
  s('type.option.option'(sK1),sK4) = s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK5))) | $spl6),
  inference(cnf_transformation,[],[f178_D])).
fof(f178_D,plain,(
  s('type.option.option'(sK1),sK4) = s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK5))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f111,plain,(
  s('type.option.option'(sK1),sK4) = s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK5))) | p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3))))))),
  inference(cnf_transformation,[],[f83])).
fof(f83,plain,(
  (p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3)))))) | (s('type.option.option'(sK1),sK4) = s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK5))) & p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),happ(s(fun(sK1,fun(sK0,bool)),sK3),s(sK1,sK5)))))))) & (~p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3)))))) | ! [X5] : (s('type.option.option'(sK1),sK4) != s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,X5))) | ~p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),happ(s(fun(sK1,fun(sK0,bool)),sK3),s(sK1,X5))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5])],[f82])).
fof(f82,plain,(
  ? [X0,X1,X2,X3,X4] : ((p(s(bool,'const.bool.IN_2'(s(X0,X2),s(fun(X0,bool),'const.option.option_CASE_3'(s('type.option.option'(X1),X4),s(fun(X0,bool),'const.pred_set.EMPTY_0'),s(fun(X1,fun(X0,bool)),X3)))))) | ? [X6] : (s('type.option.option'(X1),X4) = s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X6))) & p(s(bool,'const.bool.IN_2'(s(X0,X2),s(fun(X0,bool),happ(s(fun(X1,fun(X0,bool)),X3),s(X1,X6)))))))) & (~p(s(bool,'const.bool.IN_2'(s(X0,X2),s(fun(X0,bool),'const.option.option_CASE_3'(s('type.option.option'(X1),X4),s(fun(X0,bool),'const.pred_set.EMPTY_0'),s(fun(X1,fun(X0,bool)),X3)))))) | ! [X5] : (s('type.option.option'(X1),X4) != s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X5))) | ~p(s(bool,'const.bool.IN_2'(s(X0,X2),s(fun(X0,bool),happ(s(fun(X1,fun(X0,bool)),X3),s(X1,X5)))))))))),
  inference(rectify,[],[f81])).
fof(f81,plain,(
  ? [X0,X1,X2,X3,X4] : ((p(s(bool,'const.bool.IN_2'(s(X0,X2),s(fun(X0,bool),'const.option.option_CASE_3'(s('type.option.option'(X1),X4),s(fun(X0,bool),'const.pred_set.EMPTY_0'),s(fun(X1,fun(X0,bool)),X3)))))) | ? [X5] : (s('type.option.option'(X1),X4) = s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X5))) & p(s(bool,'const.bool.IN_2'(s(X0,X2),s(fun(X0,bool),happ(s(fun(X1,fun(X0,bool)),X3),s(X1,X5)))))))) & (~p(s(bool,'const.bool.IN_2'(s(X0,X2),s(fun(X0,bool),'const.option.option_CASE_3'(s('type.option.option'(X1),X4),s(fun(X0,bool),'const.pred_set.EMPTY_0'),s(fun(X1,fun(X0,bool)),X3)))))) | ! [X5] : (s('type.option.option'(X1),X4) != s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X5))) | ~p(s(bool,'const.bool.IN_2'(s(X0,X2),s(fun(X0,bool),happ(s(fun(X1,fun(X0,bool)),X3),s(X1,X5)))))))))),
  inference(nnf_transformation,[],[f76])).
fof(f76,plain,(
  ? [X0,X1,X2,X3,X4] : (p(s(bool,'const.bool.IN_2'(s(X0,X2),s(fun(X0,bool),'const.option.option_CASE_3'(s('type.option.option'(X1),X4),s(fun(X0,bool),'const.pred_set.EMPTY_0'),s(fun(X1,fun(X0,bool)),X3)))))) <~> ? [X5] : (s('type.option.option'(X1),X4) = s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X5))) & p(s(bool,'const.bool.IN_2'(s(X0,X2),s(fun(X0,bool),happ(s(fun(X1,fun(X0,bool)),X3),s(X1,X5))))))))),
  inference(ennf_transformation,[],[f34])).
fof(f34,plain,(
  ~! [X0,X1,X2,X3,X4] : (p(s(bool,'const.bool.IN_2'(s(X0,X2),s(fun(X0,bool),'const.option.option_CASE_3'(s('type.option.option'(X1),X4),s(fun(X0,bool),'const.pred_set.EMPTY_0'),s(fun(X1,fun(X0,bool)),X3)))))) <=> ? [X5] : (s('type.option.option'(X1),X4) = s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X5))) & p(s(bool,'const.bool.IN_2'(s(X0,X2),s(fun(X0,bool),happ(s(fun(X1,fun(X0,bool)),X3),s(X1,X5))))))))),
  inference(flattening,[],[f33])).
fof(f33,plain,(
  ~! [X0,X1] : ! [X2,X3,X4] : (p(s(bool,'const.bool.IN_2'(s(X0,X2),s(fun(X0,bool),'const.option.option_CASE_3'(s('type.option.option'(X1),X4),s(fun(X0,bool),'const.pred_set.EMPTY_0'),s(fun(X1,fun(X0,bool)),X3)))))) <=> ? [X5] : (s('type.option.option'(X1),X4) = s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X5))) & p(s(bool,'const.bool.IN_2'(s(X0,X2),s(fun(X0,bool),happ(s(fun(X1,fun(X0,bool)),X3),s(X1,X5))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9,X10] : (p(s(bool,'const.bool.IN_2'(s(X6,X8),s(fun(X6,bool),'const.option.option_CASE_3'(s('type.option.option'(X7),X10),s(fun(X6,bool),'const.pred_set.EMPTY_0'),s(fun(X7,fun(X6,bool)),X9)))))) <=> ? [X11] : (s('type.option.option'(X7),X10) = s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X11))) & p(s(bool,'const.bool.IN_2'(s(X6,X8),s(fun(X6,bool),happ(s(fun(X7,fun(X6,bool)),X9),s(X7,X11))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9,X10] : (p(s(bool,'const.bool.IN_2'(s(X6,X8),s(fun(X6,bool),'const.option.option_CASE_3'(s('type.option.option'(X7),X10),s(fun(X6,bool),'const.pred_set.EMPTY_0'),s(fun(X7,fun(X6,bool)),X9)))))) <=> ? [X11] : (s('type.option.option'(X7),X10) = s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X11))) & p(s(bool,'const.bool.IN_2'(s(X6,X8),s(fun(X6,bool),happ(s(fun(X7,fun(X6,bool)),X9),s(X7,X11))))))))),
  file('thm.misc.IN_option_rwt2','thm.misc.IN_option_rwt2')).
fof(f176,plain,(
  p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),happ(s(fun(sK1,fun(sK0,bool)),sK3),s(sK1,sK5)))))) | $spl4),
  inference(cnf_transformation,[],[f176_D])).
fof(f176_D,plain,(
  p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),happ(s(fun(sK1,fun(sK0,bool)),sK3),s(sK1,sK5)))))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f112,plain,(
  p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),happ(s(fun(sK1,fun(sK0,bool)),sK3),s(sK1,sK5)))))) | p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3))))))),
  inference(cnf_transformation,[],[f83])).
fof(f173,plain,(
  ~p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3)))))) | $spl1),
  inference(cnf_transformation,[],[f173_D])).
fof(f173_D,plain,(
  ~p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3)))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f174,plain,(
  ( ! [X5] : (s('type.option.option'(sK1),sK4) != s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,X5))) | ~p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),happ(s(fun(sK1,fun(sK0,bool)),sK3),s(sK1,X5))))))) ) | $spl2),
  inference(cnf_transformation,[],[f174_D])).
fof(f174_D,plain,(
  ( ! [X5] : (s('type.option.option'(sK1),sK4) != s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,X5))) | ~p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),happ(s(fun(sK1,fun(sK0,bool)),sK3),s(sK1,X5))))))) ) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f113,plain,(
  ( ! [X5] : (~p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),happ(s(fun(sK1,fun(sK0,bool)),sK3),s(sK1,X5)))))) | s('type.option.option'(sK1),sK4) != s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,X5))) | ~p(s(bool,'const.bool.IN_2'(s(sK0,sK2),s(fun(sK0,bool),'const.option.option_CASE_3'(s('type.option.option'(sK1),sK4),s(fun(sK0,bool),'const.pred_set.EMPTY_0'),s(fun(sK1,fun(sK0,bool)),sK3))))))) )),
  inference(cnf_transformation,[],[f83])).
% SZS output end Proof for thm.misc
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 203
% Passive clauses: 5274
% Generated clauses: 41913
% Final active clauses: 62
% Final passive clauses: 1933
% Input formulas: 31
% Initial clauses: 59
% Discarded non-redundant clauses: 387
% 
% Duplicate literals: 1549
% Trivial inequalities: 611
% Fw subsumption resolutions: 3587
% Fw demodulations: 5537
% Bw demodulations: 2807
% Condensations: 3059
% Global subsumptions: 158
% 
% Simple tautologies: 541
% Equational tautologies: 189
% Forward subsumptions: 20833
% Fw demodulations to eq. taut.: 249
% Bw demodulations to eq. taut.: 51
% 
% Unit resulting resolution: 854
% Factoring: 1
% Forward superposition: 10844
% Backward superposition: 9485
% Self superposition: 291
% Equality factoring: 166
% Equality resolution: 56
% 
% Split clauses: 116
% Split components: 259
% SAT solver clauses: 5867
% SAT solver unit clauses: 64
% SAT solver binary clauses: 369
% 
% Sat splits: 116
% Sat splitting refutations: 201
% 
% Memory used [KB]: 29551
% Time elapsed: 3.090 s
% ------------------------------
% ------------------------------
% Success in time 4.41 s
