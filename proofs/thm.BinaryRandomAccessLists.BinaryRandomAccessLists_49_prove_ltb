Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.BinaryRandomAccessLists
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.BinaryRandomAccessLists
% SZS output start Proof for thm.BinaryRandomAccessLists
fof(f2235,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f2234,f133,f233,f231,f229,f1805,f2233])).
fof(f2233,plain,(
  $false | $spl4),
  inference(subsumption_resolution,[],[f233,f136])).
fof(f136,plain,(
  ( ! [X4,X2,X3] : (s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(sK6),'type.list.list'('type.BinaryRandomAccessLists.digit'(sK6))),sK7) != s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(sK6),'type.list.list'('type.BinaryRandomAccessLists.digit'(sK6))),'const.pair.,_2'(s('type.BinaryRandomAccessLists.tree'(sK6),X2),s('type.list.list'('type.BinaryRandomAccessLists.digit'(sK6)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(sK6),'const.BinaryRandomAccessLists.One_1'(s('type.BinaryRandomAccessLists.tree'(sK6),X3))),s('type.list.list'('type.BinaryRandomAccessLists.digit'(sK6)),X4)))))) )),
  inference(cnf_transformation,[],[f91])).
fof(f91,plain,(
  (s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(sK6),'type.list.list'('type.BinaryRandomAccessLists.digit'(sK6))),sK7) = s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(sK6),'type.list.list'('type.BinaryRandomAccessLists.digit'(sK6))),'const.pair.,_2'(s('type.BinaryRandomAccessLists.tree'(sK6),sK8),s('type.list.list'('type.BinaryRandomAccessLists.digit'(sK6)),'const.list.NIL_0'))) | s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(sK6),'type.list.list'('type.BinaryRandomAccessLists.digit'(sK6))),sK7) = s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(sK6),'type.list.list'('type.BinaryRandomAccessLists.digit'(sK6))),'const.pair.,_2'(s('type.BinaryRandomAccessLists.tree'(sK6),sK9),s('type.list.list'('type.BinaryRandomAccessLists.digit'(sK6)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(sK6),'const.BinaryRandomAccessLists.Zero_0'),s('type.list.list'('type.BinaryRandomAccessLists.digit'(sK6)),sK10))))) | s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(sK6),'type.list.list'('type.BinaryRandomAccessLists.digit'(sK6))),sK7) = s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(sK6),'type.list.list'('type.BinaryRandomAccessLists.digit'(sK6))),'const.pair.,_2'(s('type.BinaryRandomAccessLists.tree'(sK6),sK11),s('type.list.list'('type.BinaryRandomAccessLists.digit'(sK6)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(sK6),'const.BinaryRandomAccessLists.One_1'(s('type.BinaryRandomAccessLists.tree'(sK6),sK12))),s('type.list.list'('type.BinaryRandomAccessLists.digit'(sK6)),sK13)))))) & ! [X7] : s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(sK6),'type.list.list'('type.BinaryRandomAccessLists.digit'(sK6))),sK7) != s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(sK6),'type.list.list'('type.BinaryRandomAccessLists.digit'(sK6))),'const.pair.,_2'(s('type.BinaryRandomAccessLists.tree'(sK6),X7),s('type.list.list'('type.BinaryRandomAccessLists.digit'(sK6)),'const.list.NIL_0'))) & ! [X5,X6] : s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(sK6),'type.list.list'('type.BinaryRandomAccessLists.digit'(sK6))),sK7) != s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(sK6),'type.list.list'('type.BinaryRandomAccessLists.digit'(sK6))),'const.pair.,_2'(s('type.BinaryRandomAccessLists.tree'(sK6),X5),s('type.list.list'('type.BinaryRandomAccessLists.digit'(sK6)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(sK6),'const.BinaryRandomAccessLists.Zero_0'),s('type.list.list'('type.BinaryRandomAccessLists.digit'(sK6)),X6))))) & ! [X2,X3,X4] : s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(sK6),'type.list.list'('type.BinaryRandomAccessLists.digit'(sK6))),sK7) != s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(sK6),'type.list.list'('type.BinaryRandomAccessLists.digit'(sK6))),'const.pair.,_2'(s('type.BinaryRandomAccessLists.tree'(sK6),X2),s('type.list.list'('type.BinaryRandomAccessLists.digit'(sK6)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(sK6),'const.BinaryRandomAccessLists.One_1'(s('type.BinaryRandomAccessLists.tree'(sK6),X3))),s('type.list.list'('type.BinaryRandomAccessLists.digit'(sK6)),X4)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK6,sK7,sK8,sK9,sK10,sK11,sK12,sK13])],[f90])).
fof(f90,plain,(
  ? [X0,X1] : ((? [X13] : s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X0),'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),X1) = s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X0),'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),'const.pair.,_2'(s('type.BinaryRandomAccessLists.tree'(X0),X13),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),'const.list.NIL_0'))) | ? [X11,X12] : s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X0),'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),X1) = s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X0),'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),'const.pair.,_2'(s('type.BinaryRandomAccessLists.tree'(X0),X11),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(X0),'const.BinaryRandomAccessLists.Zero_0'),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),X12))))) | ? [X8,X9,X10] : s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X0),'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),X1) = s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X0),'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),'const.pair.,_2'(s('type.BinaryRandomAccessLists.tree'(X0),X8),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(X0),'const.BinaryRandomAccessLists.One_1'(s('type.BinaryRandomAccessLists.tree'(X0),X9))),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),X10)))))) & ! [X7] : s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X0),'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),X1) != s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X0),'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),'const.pair.,_2'(s('type.BinaryRandomAccessLists.tree'(X0),X7),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),'const.list.NIL_0'))) & ! [X5,X6] : s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X0),'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),X1) != s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X0),'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),'const.pair.,_2'(s('type.BinaryRandomAccessLists.tree'(X0),X5),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(X0),'const.BinaryRandomAccessLists.Zero_0'),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),X6))))) & ! [X2,X3,X4] : s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X0),'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),X1) != s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X0),'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),'const.pair.,_2'(s('type.BinaryRandomAccessLists.tree'(X0),X2),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(X0),'const.BinaryRandomAccessLists.One_1'(s('type.BinaryRandomAccessLists.tree'(X0),X3))),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),X4))))))),
  inference(rectify,[],[f65])).
fof(f65,plain,(
  ? [X0,X1] : ((? [X7] : s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X0),'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),X1) = s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X0),'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),'const.pair.,_2'(s('type.BinaryRandomAccessLists.tree'(X0),X7),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),'const.list.NIL_0'))) | ? [X5,X6] : s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X0),'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),X1) = s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X0),'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),'const.pair.,_2'(s('type.BinaryRandomAccessLists.tree'(X0),X5),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(X0),'const.BinaryRandomAccessLists.Zero_0'),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),X6))))) | ? [X2,X3,X4] : s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X0),'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),X1) = s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X0),'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),'const.pair.,_2'(s('type.BinaryRandomAccessLists.tree'(X0),X2),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(X0),'const.BinaryRandomAccessLists.One_1'(s('type.BinaryRandomAccessLists.tree'(X0),X3))),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),X4)))))) & ! [X13] : s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X0),'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),X1) != s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X0),'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),'const.pair.,_2'(s('type.BinaryRandomAccessLists.tree'(X0),X13),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),'const.list.NIL_0'))) & ! [X11,X12] : s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X0),'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),X1) != s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X0),'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),'const.pair.,_2'(s('type.BinaryRandomAccessLists.tree'(X0),X11),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(X0),'const.BinaryRandomAccessLists.Zero_0'),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),X12))))) & ! [X8,X9,X10] : s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X0),'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),X1) != s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X0),'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),'const.pair.,_2'(s('type.BinaryRandomAccessLists.tree'(X0),X8),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(X0),'const.BinaryRandomAccessLists.One_1'(s('type.BinaryRandomAccessLists.tree'(X0),X9))),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),X10))))))),
  inference(flattening,[],[f64])).
fof(f64,plain,(
  ? [X0,X1] : ((? [X7] : s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X0),'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),X1) = s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X0),'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),'const.pair.,_2'(s('type.BinaryRandomAccessLists.tree'(X0),X7),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),'const.list.NIL_0'))) | ? [X5,X6] : s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X0),'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),X1) = s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X0),'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),'const.pair.,_2'(s('type.BinaryRandomAccessLists.tree'(X0),X5),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(X0),'const.BinaryRandomAccessLists.Zero_0'),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),X6))))) | ? [X2,X3,X4] : s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X0),'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),X1) = s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X0),'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),'const.pair.,_2'(s('type.BinaryRandomAccessLists.tree'(X0),X2),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(X0),'const.BinaryRandomAccessLists.One_1'(s('type.BinaryRandomAccessLists.tree'(X0),X3))),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),X4)))))) & (! [X13] : s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X0),'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),X1) != s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X0),'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),'const.pair.,_2'(s('type.BinaryRandomAccessLists.tree'(X0),X13),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),'const.list.NIL_0'))) & ! [X11,X12] : s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X0),'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),X1) != s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X0),'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),'const.pair.,_2'(s('type.BinaryRandomAccessLists.tree'(X0),X11),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(X0),'const.BinaryRandomAccessLists.Zero_0'),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),X12))))) & ! [X8,X9,X10] : s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X0),'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),X1) != s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X0),'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),'const.pair.,_2'(s('type.BinaryRandomAccessLists.tree'(X0),X8),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(X0),'const.BinaryRandomAccessLists.One_1'(s('type.BinaryRandomAccessLists.tree'(X0),X9))),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),X10)))))))),
  inference(ennf_transformation,[],[f29])).
fof(f29,plain,(
  ~! [X0,X1] : ((? [X7] : s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X0),'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),X1) = s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X0),'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),'const.pair.,_2'(s('type.BinaryRandomAccessLists.tree'(X0),X7),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),'const.list.NIL_0'))) | ? [X5,X6] : s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X0),'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),X1) = s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X0),'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),'const.pair.,_2'(s('type.BinaryRandomAccessLists.tree'(X0),X5),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(X0),'const.BinaryRandomAccessLists.Zero_0'),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),X6))))) | ? [X2,X3,X4] : s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X0),'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),X1) = s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X0),'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),'const.pair.,_2'(s('type.BinaryRandomAccessLists.tree'(X0),X2),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(X0),'const.BinaryRandomAccessLists.One_1'(s('type.BinaryRandomAccessLists.tree'(X0),X3))),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),X4)))))) => (? [X13] : s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X0),'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),X1) = s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X0),'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),'const.pair.,_2'(s('type.BinaryRandomAccessLists.tree'(X0),X13),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),'const.list.NIL_0'))) | ? [X11,X12] : s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X0),'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),X1) = s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X0),'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),'const.pair.,_2'(s('type.BinaryRandomAccessLists.tree'(X0),X11),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(X0),'const.BinaryRandomAccessLists.Zero_0'),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),X12))))) | ? [X8,X9,X10] : s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X0),'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),X1) = s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X0),'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),'const.pair.,_2'(s('type.BinaryRandomAccessLists.tree'(X0),X8),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(X0),'const.BinaryRandomAccessLists.One_1'(s('type.BinaryRandomAccessLists.tree'(X0),X9))),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),X10)))))))),
  inference(flattening,[],[f28])).
fof(f28,plain,(
  ~! [X0] : ! [X1] : ((? [X7] : s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X0),'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),X1) = s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X0),'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),'const.pair.,_2'(s('type.BinaryRandomAccessLists.tree'(X0),X7),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),'const.list.NIL_0'))) | ? [X5,X6] : s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X0),'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),X1) = s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X0),'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),'const.pair.,_2'(s('type.BinaryRandomAccessLists.tree'(X0),X5),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(X0),'const.BinaryRandomAccessLists.Zero_0'),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),X6))))) | ? [X2,X3,X4] : s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X0),'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),X1) = s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X0),'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),'const.pair.,_2'(s('type.BinaryRandomAccessLists.tree'(X0),X2),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(X0),'const.BinaryRandomAccessLists.One_1'(s('type.BinaryRandomAccessLists.tree'(X0),X3))),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),X4)))))) => (? [X13] : s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X0),'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),X1) = s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X0),'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),'const.pair.,_2'(s('type.BinaryRandomAccessLists.tree'(X0),X13),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),'const.list.NIL_0'))) | ? [X11,X12] : s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X0),'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),X1) = s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X0),'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),'const.pair.,_2'(s('type.BinaryRandomAccessLists.tree'(X0),X11),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(X0),'const.BinaryRandomAccessLists.Zero_0'),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),X12))))) | ? [X8,X9,X10] : s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X0),'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),X1) = s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X0),'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),'const.pair.,_2'(s('type.BinaryRandomAccessLists.tree'(X0),X8),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(X0),'const.BinaryRandomAccessLists.One_1'(s('type.BinaryRandomAccessLists.tree'(X0),X9))),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),X10)))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : ((? [X8] : s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X6),'type.list.list'('type.BinaryRandomAccessLists.digit'(X6))),X7) = s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X6),'type.list.list'('type.BinaryRandomAccessLists.digit'(X6))),'const.pair.,_2'(s('type.BinaryRandomAccessLists.tree'(X6),X8),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X6)),'const.list.NIL_0'))) | ? [X8,X9] : s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X6),'type.list.list'('type.BinaryRandomAccessLists.digit'(X6))),X7) = s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X6),'type.list.list'('type.BinaryRandomAccessLists.digit'(X6))),'const.pair.,_2'(s('type.BinaryRandomAccessLists.tree'(X6),X8),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X6)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(X6),'const.BinaryRandomAccessLists.Zero_0'),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X6)),X9))))) | ? [X10,X11,X9] : s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X6),'type.list.list'('type.BinaryRandomAccessLists.digit'(X6))),X7) = s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X6),'type.list.list'('type.BinaryRandomAccessLists.digit'(X6))),'const.pair.,_2'(s('type.BinaryRandomAccessLists.tree'(X6),X10),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X6)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(X6),'const.BinaryRandomAccessLists.One_1'(s('type.BinaryRandomAccessLists.tree'(X6),X11))),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X6)),X9)))))) => (? [X8] : s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X6),'type.list.list'('type.BinaryRandomAccessLists.digit'(X6))),X7) = s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X6),'type.list.list'('type.BinaryRandomAccessLists.digit'(X6))),'const.pair.,_2'(s('type.BinaryRandomAccessLists.tree'(X6),X8),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X6)),'const.list.NIL_0'))) | ? [X8,X9] : s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X6),'type.list.list'('type.BinaryRandomAccessLists.digit'(X6))),X7) = s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X6),'type.list.list'('type.BinaryRandomAccessLists.digit'(X6))),'const.pair.,_2'(s('type.BinaryRandomAccessLists.tree'(X6),X8),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X6)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(X6),'const.BinaryRandomAccessLists.Zero_0'),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X6)),X9))))) | ? [X10,X11,X9] : s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X6),'type.list.list'('type.BinaryRandomAccessLists.digit'(X6))),X7) = s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X6),'type.list.list'('type.BinaryRandomAccessLists.digit'(X6))),'const.pair.,_2'(s('type.BinaryRandomAccessLists.tree'(X6),X10),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X6)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(X6),'const.BinaryRandomAccessLists.One_1'(s('type.BinaryRandomAccessLists.tree'(X6),X11))),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X6)),X9)))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : ((? [X8] : s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X6),'type.list.list'('type.BinaryRandomAccessLists.digit'(X6))),X7) = s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X6),'type.list.list'('type.BinaryRandomAccessLists.digit'(X6))),'const.pair.,_2'(s('type.BinaryRandomAccessLists.tree'(X6),X8),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X6)),'const.list.NIL_0'))) | ? [X8,X9] : s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X6),'type.list.list'('type.BinaryRandomAccessLists.digit'(X6))),X7) = s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X6),'type.list.list'('type.BinaryRandomAccessLists.digit'(X6))),'const.pair.,_2'(s('type.BinaryRandomAccessLists.tree'(X6),X8),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X6)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(X6),'const.BinaryRandomAccessLists.Zero_0'),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X6)),X9))))) | ? [X10,X11,X9] : s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X6),'type.list.list'('type.BinaryRandomAccessLists.digit'(X6))),X7) = s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X6),'type.list.list'('type.BinaryRandomAccessLists.digit'(X6))),'const.pair.,_2'(s('type.BinaryRandomAccessLists.tree'(X6),X10),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X6)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(X6),'const.BinaryRandomAccessLists.One_1'(s('type.BinaryRandomAccessLists.tree'(X6),X11))),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X6)),X9)))))) => (? [X8] : s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X6),'type.list.list'('type.BinaryRandomAccessLists.digit'(X6))),X7) = s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X6),'type.list.list'('type.BinaryRandomAccessLists.digit'(X6))),'const.pair.,_2'(s('type.BinaryRandomAccessLists.tree'(X6),X8),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X6)),'const.list.NIL_0'))) | ? [X8,X9] : s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X6),'type.list.list'('type.BinaryRandomAccessLists.digit'(X6))),X7) = s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X6),'type.list.list'('type.BinaryRandomAccessLists.digit'(X6))),'const.pair.,_2'(s('type.BinaryRandomAccessLists.tree'(X6),X8),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X6)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(X6),'const.BinaryRandomAccessLists.Zero_0'),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X6)),X9))))) | ? [X10,X11,X9] : s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X6),'type.list.list'('type.BinaryRandomAccessLists.digit'(X6))),X7) = s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(X6),'type.list.list'('type.BinaryRandomAccessLists.digit'(X6))),'const.pair.,_2'(s('type.BinaryRandomAccessLists.tree'(X6),X10),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X6)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(X6),'const.BinaryRandomAccessLists.One_1'(s('type.BinaryRandomAccessLists.tree'(X6),X11))),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X6)),X9)))))))),
  file('thm.BinaryRandomAccessLists.BinaryRandomAccessLists_49_prove_ltb','thm.BinaryRandomAccessLists.BinaryRandomAccessLists_49_prove_ltb')).
fof(f1805,plain,(
  $false | $spl0),
  inference(subsumption_resolution,[],[f229,f134])).
fof(f134,plain,(
  ( ! [X7] : (s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(sK6),'type.list.list'('type.BinaryRandomAccessLists.digit'(sK6))),sK7) != s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(sK6),'type.list.list'('type.BinaryRandomAccessLists.digit'(sK6))),'const.pair.,_2'(s('type.BinaryRandomAccessLists.tree'(sK6),X7),s('type.list.list'('type.BinaryRandomAccessLists.digit'(sK6)),'const.list.NIL_0')))) )),
  inference(cnf_transformation,[],[f91])).
fof(f229,plain,(
  s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(sK6),'type.list.list'('type.BinaryRandomAccessLists.digit'(sK6))),sK7) = s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(sK6),'type.list.list'('type.BinaryRandomAccessLists.digit'(sK6))),'const.pair.,_2'(s('type.BinaryRandomAccessLists.tree'(sK6),sK8),s('type.list.list'('type.BinaryRandomAccessLists.digit'(sK6)),'const.list.NIL_0'))) | $spl0),
  inference(cnf_transformation,[],[f229_D])).
fof(f229_D,plain,(
  s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(sK6),'type.list.list'('type.BinaryRandomAccessLists.digit'(sK6))),sK7) = s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(sK6),'type.list.list'('type.BinaryRandomAccessLists.digit'(sK6))),'const.pair.,_2'(s('type.BinaryRandomAccessLists.tree'(sK6),sK8),s('type.list.list'('type.BinaryRandomAccessLists.digit'(sK6)),'const.list.NIL_0'))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f231,plain,(
  s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(sK6),'type.list.list'('type.BinaryRandomAccessLists.digit'(sK6))),sK7) = s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(sK6),'type.list.list'('type.BinaryRandomAccessLists.digit'(sK6))),'const.pair.,_2'(s('type.BinaryRandomAccessLists.tree'(sK6),sK9),s('type.list.list'('type.BinaryRandomAccessLists.digit'(sK6)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(sK6),'const.BinaryRandomAccessLists.Zero_0'),s('type.list.list'('type.BinaryRandomAccessLists.digit'(sK6)),sK10))))) | $spl2),
  inference(cnf_transformation,[],[f231_D])).
fof(f231_D,plain,(
  s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(sK6),'type.list.list'('type.BinaryRandomAccessLists.digit'(sK6))),sK7) = s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(sK6),'type.list.list'('type.BinaryRandomAccessLists.digit'(sK6))),'const.pair.,_2'(s('type.BinaryRandomAccessLists.tree'(sK6),sK9),s('type.list.list'('type.BinaryRandomAccessLists.digit'(sK6)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(sK6),'const.BinaryRandomAccessLists.Zero_0'),s('type.list.list'('type.BinaryRandomAccessLists.digit'(sK6)),sK10))))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f233,plain,(
  s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(sK6),'type.list.list'('type.BinaryRandomAccessLists.digit'(sK6))),sK7) = s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(sK6),'type.list.list'('type.BinaryRandomAccessLists.digit'(sK6))),'const.pair.,_2'(s('type.BinaryRandomAccessLists.tree'(sK6),sK11),s('type.list.list'('type.BinaryRandomAccessLists.digit'(sK6)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(sK6),'const.BinaryRandomAccessLists.One_1'(s('type.BinaryRandomAccessLists.tree'(sK6),sK12))),s('type.list.list'('type.BinaryRandomAccessLists.digit'(sK6)),sK13))))) | $spl4),
  inference(cnf_transformation,[],[f233_D])).
fof(f233_D,plain,(
  s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(sK6),'type.list.list'('type.BinaryRandomAccessLists.digit'(sK6))),sK7) = s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(sK6),'type.list.list'('type.BinaryRandomAccessLists.digit'(sK6))),'const.pair.,_2'(s('type.BinaryRandomAccessLists.tree'(sK6),sK11),s('type.list.list'('type.BinaryRandomAccessLists.digit'(sK6)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(sK6),'const.BinaryRandomAccessLists.One_1'(s('type.BinaryRandomAccessLists.tree'(sK6),sK12))),s('type.list.list'('type.BinaryRandomAccessLists.digit'(sK6)),sK13))))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f133,plain,(
  s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(sK6),'type.list.list'('type.BinaryRandomAccessLists.digit'(sK6))),sK7) = s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(sK6),'type.list.list'('type.BinaryRandomAccessLists.digit'(sK6))),'const.pair.,_2'(s('type.BinaryRandomAccessLists.tree'(sK6),sK11),s('type.list.list'('type.BinaryRandomAccessLists.digit'(sK6)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(sK6),'const.BinaryRandomAccessLists.One_1'(s('type.BinaryRandomAccessLists.tree'(sK6),sK12))),s('type.list.list'('type.BinaryRandomAccessLists.digit'(sK6)),sK13))))) | s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(sK6),'type.list.list'('type.BinaryRandomAccessLists.digit'(sK6))),sK7) = s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(sK6),'type.list.list'('type.BinaryRandomAccessLists.digit'(sK6))),'const.pair.,_2'(s('type.BinaryRandomAccessLists.tree'(sK6),sK9),s('type.list.list'('type.BinaryRandomAccessLists.digit'(sK6)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(sK6),'const.BinaryRandomAccessLists.Zero_0'),s('type.list.list'('type.BinaryRandomAccessLists.digit'(sK6)),sK10))))) | s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(sK6),'type.list.list'('type.BinaryRandomAccessLists.digit'(sK6))),sK7) = s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(sK6),'type.list.list'('type.BinaryRandomAccessLists.digit'(sK6))),'const.pair.,_2'(s('type.BinaryRandomAccessLists.tree'(sK6),sK8),s('type.list.list'('type.BinaryRandomAccessLists.digit'(sK6)),'const.list.NIL_0')))),
  inference(cnf_transformation,[],[f91])).
fof(f2234,plain,(
  $false | $spl2),
  inference(subsumption_resolution,[],[f231,f135])).
fof(f135,plain,(
  ( ! [X6,X5] : (s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(sK6),'type.list.list'('type.BinaryRandomAccessLists.digit'(sK6))),sK7) != s('type.pair.prod'('type.BinaryRandomAccessLists.tree'(sK6),'type.list.list'('type.BinaryRandomAccessLists.digit'(sK6))),'const.pair.,_2'(s('type.BinaryRandomAccessLists.tree'(sK6),X5),s('type.list.list'('type.BinaryRandomAccessLists.digit'(sK6)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(sK6),'const.BinaryRandomAccessLists.Zero_0'),s('type.list.list'('type.BinaryRandomAccessLists.digit'(sK6)),X6)))))) )),
  inference(cnf_transformation,[],[f91])).
% SZS output end Proof for thm.BinaryRandomAccessLists
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 186
% Passive clauses: 898
% Generated clauses: 2095
% Final active clauses: 186
% Final passive clauses: 648
% Input formulas: 26
% Initial clauses: 94
% 
% Duplicate literals: 39
% Trivial inequalities: 13
% Fw subsumption resolutions: 144
% 
% Simple tautologies: 61
% Equational tautologies: 15
% Forward subsumptions: 909
% 
% Binary resolution: 1410
% Factoring: 204
% Forward superposition: 106
% Backward superposition: 51
% Self superposition: 2
% Equality factoring: 2
% Equality resolution: 8
% 
% Split clauses: 43
% Split components: 88
% SAT solver clauses: 81
% SAT solver unit clauses: 9
% SAT solver binary clauses: 29
% SAT solver learnt clauses: 1
% 
% Sat splits: 43
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 80
% TWLsolver calls for satisfiability: 60
% 
% Memory used [KB]: 1407
% Time elapsed: 0.072 s
% ------------------------------
% ------------------------------
% Success in time 0.07 s
