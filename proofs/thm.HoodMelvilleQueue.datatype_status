Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.HoodMelvilleQueue
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.HoodMelvilleQueue
% SZS output start Proof for thm.HoodMelvilleQueue
fof(f1418,plain,(
  $false),
  inference(subsumption_resolution,[],[f1417,f30])).
fof(f30,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.HoodMelvilleQueue.datatype_status',aHL_TRUTH)).
fof(f1417,plain,(
  ~p(s(bool,'T_0'))),
  inference(forward_demodulation,[],[f29,f34])).
fof(f34,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.bool.DATATYPE_1'(s(X0,X1)))) )),
  inference(cnf_transformation,[],[f16])).
fof(f16,plain,(
  ! [X0,X1] : s(bool,'T_0') = s(bool,'const.bool.DATATYPE_1'(s(X0,X1)))),
  inference(flattening,[],[f15])).
fof(f15,plain,(
  ! [X0] : ! [X1] : s(bool,'T_0') = s(bool,'const.bool.DATATYPE_1'(s(X0,X1)))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X6] : ! [X8] : s(bool,'T_0') = s(bool,'const.bool.DATATYPE_1'(s(X6,X8)))),
  file('thm.HoodMelvilleQueue.datatype_status','thm.bool.DATATYPE_TAG_THM')).
fof(f29,plain,(
  ~p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun(fun('type.list.list'(sK0),'type.HoodMelvilleQueue.status'(sK0)),bool),happ(s(fun(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.HoodMelvilleQueue.status'(sK0)))),fun(fun('type.list.list'(sK0),'type.HoodMelvilleQueue.status'(sK0)),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.HoodMelvilleQueue.status'(sK0)))))),fun(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.HoodMelvilleQueue.status'(sK0)))),fun(fun('type.list.list'(sK0),'type.HoodMelvilleQueue.status'(sK0)),bool))),happ(s(fun('type.HoodMelvilleQueue.status'(sK0),fun(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.HoodMelvilleQueue.status'(sK0)))))),fun(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.HoodMelvilleQueue.status'(sK0)))),fun(fun('type.list.list'(sK0),'type.HoodMelvilleQueue.status'(sK0)),bool)))),sK1),s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'))),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.HoodMelvilleQueue.status'(sK0)))))),'const.HoodMelvilleQueue.Reversing_0'))),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.HoodMelvilleQueue.status'(sK0)))),'const.HoodMelvilleQueue.Appending_0'))),s(fun('type.list.list'(sK0),'type.HoodMelvilleQueue.status'(sK0)),'const.HoodMelvilleQueue.Finished_0'))))))),
  inference(cnf_transformation,[],[f27])).
fof(f27,plain,(
  ~p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun(fun('type.list.list'(sK0),'type.HoodMelvilleQueue.status'(sK0)),bool),happ(s(fun(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.HoodMelvilleQueue.status'(sK0)))),fun(fun('type.list.list'(sK0),'type.HoodMelvilleQueue.status'(sK0)),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.HoodMelvilleQueue.status'(sK0)))))),fun(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.HoodMelvilleQueue.status'(sK0)))),fun(fun('type.list.list'(sK0),'type.HoodMelvilleQueue.status'(sK0)),bool))),happ(s(fun('type.HoodMelvilleQueue.status'(sK0),fun(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.HoodMelvilleQueue.status'(sK0)))))),fun(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.HoodMelvilleQueue.status'(sK0)))),fun(fun('type.list.list'(sK0),'type.HoodMelvilleQueue.status'(sK0)),bool)))),sK1),s('type.HoodMelvilleQueue.status'(sK0),'const.HoodMelvilleQueue.Idle_0'))),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.HoodMelvilleQueue.status'(sK0)))))),'const.HoodMelvilleQueue.Reversing_0'))),s(fun('type.num.num',fun('type.list.list'(sK0),fun('type.list.list'(sK0),'type.HoodMelvilleQueue.status'(sK0)))),'const.HoodMelvilleQueue.Appending_0'))),s(fun('type.list.list'(sK0),'type.HoodMelvilleQueue.status'(sK0)),'const.HoodMelvilleQueue.Finished_0'))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1])],[f25])).
fof(f25,plain,(
  ? [X0,X1] : ~p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),bool),happ(s(fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))),fun(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))))),fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))),fun(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),bool))),happ(s(fun('type.HoodMelvilleQueue.status'(X0),fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))))),fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))),fun(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),bool)))),X1),s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Idle_0'))),s(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))))),'const.HoodMelvilleQueue.Reversing_0'))),s(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))),'const.HoodMelvilleQueue.Appending_0'))),s(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),'const.HoodMelvilleQueue.Finished_0'))))))),
  inference(ennf_transformation,[],[f13])).
fof(f13,plain,(
  ~! [X0,X1] : p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),bool),happ(s(fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))),fun(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))))),fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))),fun(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),bool))),happ(s(fun('type.HoodMelvilleQueue.status'(X0),fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))))),fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))),fun(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),bool)))),X1),s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Idle_0'))),s(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))))),'const.HoodMelvilleQueue.Reversing_0'))),s(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))),'const.HoodMelvilleQueue.Appending_0'))),s(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),'const.HoodMelvilleQueue.Finished_0'))))))),
  inference(flattening,[],[f12])).
fof(f12,plain,(
  ~! [X0] : ! [X1] : p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),bool),happ(s(fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))),fun(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))))),fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))),fun(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),bool))),happ(s(fun('type.HoodMelvilleQueue.status'(X0),fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))))),fun(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))),fun(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),bool)))),X1),s('type.HoodMelvilleQueue.status'(X0),'const.HoodMelvilleQueue.Idle_0'))),s(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))))),'const.HoodMelvilleQueue.Reversing_0'))),s(fun('type.num.num',fun('type.list.list'(X0),fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)))),'const.HoodMelvilleQueue.Appending_0'))),s(fun('type.list.list'(X0),'type.HoodMelvilleQueue.status'(X0)),'const.HoodMelvilleQueue.Finished_0'))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun(fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)),bool),happ(s(fun(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)))),fun(fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),fun('type.list.list'(X6),fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)))))),fun(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)))),fun(fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)),bool))),happ(s(fun('type.HoodMelvilleQueue.status'(X6),fun(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),fun('type.list.list'(X6),fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)))))),fun(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)))),fun(fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)),bool)))),X7),s('type.HoodMelvilleQueue.status'(X6),'const.HoodMelvilleQueue.Idle_0'))),s(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),fun('type.list.list'(X6),fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)))))),'const.HoodMelvilleQueue.Reversing_0'))),s(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)))),'const.HoodMelvilleQueue.Appending_0'))),s(fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)),'const.HoodMelvilleQueue.Finished_0'))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun(fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)),bool),happ(s(fun(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)))),fun(fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),fun('type.list.list'(X6),fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)))))),fun(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)))),fun(fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)),bool))),happ(s(fun('type.HoodMelvilleQueue.status'(X6),fun(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),fun('type.list.list'(X6),fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)))))),fun(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)))),fun(fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)),bool)))),X7),s('type.HoodMelvilleQueue.status'(X6),'const.HoodMelvilleQueue.Idle_0'))),s(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),fun('type.list.list'(X6),fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)))))),'const.HoodMelvilleQueue.Reversing_0'))),s(fun('type.num.num',fun('type.list.list'(X6),fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)))),'const.HoodMelvilleQueue.Appending_0'))),s(fun('type.list.list'(X6),'type.HoodMelvilleQueue.status'(X6)),'const.HoodMelvilleQueue.Finished_0'))))))),
  file('thm.HoodMelvilleQueue.datatype_status','thm.HoodMelvilleQueue.datatype_status')).
% SZS output end Proof for thm.HoodMelvilleQueue
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 28
% Passive clauses: 113
% Generated clauses: 1343
% Final active clauses: 26
% Final passive clauses: 68
% Input formulas: 10
% Initial clauses: 10
% 
% Duplicate literals: 149
% Trivial inequalities: 20
% Fw subsumption resolutions: 112
% Fw demodulations: 117
% 
% Simple tautologies: 64
% Equational tautologies: 19
% Forward subsumptions: 722
% 
% Binary resolution: 6
% Forward superposition: 553
% Backward superposition: 235
% Self superposition: 69
% Equality factoring: 48
% Equality resolution: 10
% 
% Split clauses: 26
% Split components: 52
% SAT solver clauses: 40
% SAT solver unit clauses: 4
% SAT solver binary clauses: 18
% 
% Sat splits: 26
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 40
% TWLsolver calls for satisfiability: 14
% 
% Memory used [KB]: 1151
% Time elapsed: 0.041 s
% ------------------------------
% ------------------------------
% Success in time 0.06 s
