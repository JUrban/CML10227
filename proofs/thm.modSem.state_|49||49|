Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.modSem
% (110236)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 112
% Passive clauses: 2070
% Generated clauses: 12173
% Final active clauses: 105
% Final passive clauses: 1812
% Input formulas: 37
% Initial clauses: 62
% 
% Duplicate literals: 581
% Trivial inequalities: 224
% Fw subsumption resolutions: 1677
% Fw demodulations: 719
% Bw demodulations: 5
% 
% Simple tautologies: 317
% Equational tautologies: 70
% Forward subsumptions: 5571
% Bw demodulations to eq. taut.: 1
% 
% Binary resolution: 238
% Factoring: 2
% Forward superposition: 4154
% Backward superposition: 3986
% Self superposition: 236
% Equality factoring: 168
% Equality resolution: 28
% 
% Split clauses: 294
% Split components: 602
% SAT solver clauses: 722
% SAT solver unit clauses: 84
% SAT solver binary clauses: 191
% 
% Sat splits: 294
% 
% TWLsolver clauses: 721
% TWLsolver calls for satisfiability: 125
% 
% Memory used [KB]: 7803
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.modSem
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.modSem
% SZS output start Proof for thm.modSem
fof(f7196,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f7167,f251,f123,f187,f124,f125,f191,f126,f127,f195,f128,f197,f185,f2245,f2247,f5845,f189,f5059,f5528,f5847,f5529,f258,f2210,f2211,f2241,f5508,f5177,f5041,f4721,f129,f198,f196,f194,f192,f190,f188,f186,f4644,f4646,f163,f225,f4652,f4736,f161,f223,f5056,f5058,f164,f226,f5060,f5197,f162,f224,f5849,f5844,f193,f148,f215,f166,f228,f165,f227])).
fof(f227,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.list.list'('type.option.option'('type.modSem.v')),X6) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),'const.modSem.recordtype|46|state_6'(s('type.num.num',X1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X2),s('type.ffi.ffi_state'(X0),X3),s(fun('type.semanticPrimitives.tid_or_exn',bool),X4),s(fun('type.list.list'('type.string.char'),bool),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X6)))))) ) | $spl66),
  inference(cnf_transformation,[],[f227_D])).
fof(f227_D,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.list.list'('type.option.option'('type.modSem.v')),X6) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),'const.modSem.recordtype|46|state_6'(s('type.num.num',X1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X2),s('type.ffi.ffi_state'(X0),X3),s(fun('type.semanticPrimitives.tid_or_exn',bool),X4),s(fun('type.list.list'('type.string.char'),bool),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X6)))))) ) <=> ~$spl66),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl66])])).
fof(f165,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.list.list'('type.option.option'('type.modSem.v')),X6) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),'const.modSem.recordtype|46|state_6'(s('type.num.num',X1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X2),s('type.ffi.ffi_state'(X0),X3),s(fun('type.semanticPrimitives.tid_or_exn',bool),X4),s(fun('type.list.list'('type.string.char'),bool),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X6)))))) )),
  inference(cnf_transformation,[],[f73])).
fof(f73,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : s('type.list.list'('type.option.option'('type.modSem.v')),X6) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),'const.modSem.recordtype|46|state_6'(s('type.num.num',X1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X2),s('type.ffi.ffi_state'(X0),X3),s(fun('type.semanticPrimitives.tid_or_exn',bool),X4),s(fun('type.list.list'('type.string.char'),bool),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X6)))))),
  inference(flattening,[],[f72])).
fof(f72,plain,(
  ! [X0] : ! [X1,X2,X3,X4,X5,X6] : s('type.list.list'('type.option.option'('type.modSem.v')),X6) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),'const.modSem.recordtype|46|state_6'(s('type.num.num',X1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X2),s('type.ffi.ffi_state'(X0),X3),s(fun('type.semanticPrimitives.tid_or_exn',bool),X4),s(fun('type.list.list'('type.string.char'),bool),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X6)))))),
  inference(rectify,[],[f19])).
fof(f19,axiom,(
  ! [X6] : ! [X32,X45,X26,X46,X47,X48] : s('type.list.list'('type.option.option'('type.modSem.v')),X48) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X6),'const.modSem.recordtype|46|state_6'(s('type.num.num',X32),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X45),s('type.ffi.ffi_state'(X6),X26),s(fun('type.semanticPrimitives.tid_or_exn',bool),X46),s(fun('type.list.list'('type.string.char'),bool),X47),s('type.list.list'('type.option.option'('type.modSem.v')),X48)))))),
  file('thm.modSem.state_|49||49|','thm.modSem.state_globals')).
fof(f228,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s(fun('type.list.list'('type.string.char'),bool),X5) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),'const.modSem.recordtype|46|state_6'(s('type.num.num',X1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X2),s('type.ffi.ffi_state'(X0),X3),s(fun('type.semanticPrimitives.tid_or_exn',bool),X4),s(fun('type.list.list'('type.string.char'),bool),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X6)))))) ) | $spl68),
  inference(cnf_transformation,[],[f228_D])).
fof(f228_D,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s(fun('type.list.list'('type.string.char'),bool),X5) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),'const.modSem.recordtype|46|state_6'(s('type.num.num',X1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X2),s('type.ffi.ffi_state'(X0),X3),s(fun('type.semanticPrimitives.tid_or_exn',bool),X4),s(fun('type.list.list'('type.string.char'),bool),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X6)))))) ) <=> ~$spl68),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl68])])).
fof(f166,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s(fun('type.list.list'('type.string.char'),bool),X5) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),'const.modSem.recordtype|46|state_6'(s('type.num.num',X1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X2),s('type.ffi.ffi_state'(X0),X3),s(fun('type.semanticPrimitives.tid_or_exn',bool),X4),s(fun('type.list.list'('type.string.char'),bool),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X6)))))) )),
  inference(cnf_transformation,[],[f75])).
fof(f75,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : s(fun('type.list.list'('type.string.char'),bool),X5) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),'const.modSem.recordtype|46|state_6'(s('type.num.num',X1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X2),s('type.ffi.ffi_state'(X0),X3),s(fun('type.semanticPrimitives.tid_or_exn',bool),X4),s(fun('type.list.list'('type.string.char'),bool),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X6)))))),
  inference(flattening,[],[f74])).
fof(f74,plain,(
  ! [X0] : ! [X1,X2,X3,X4,X5,X6] : s(fun('type.list.list'('type.string.char'),bool),X5) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),'const.modSem.recordtype|46|state_6'(s('type.num.num',X1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X2),s('type.ffi.ffi_state'(X0),X3),s(fun('type.semanticPrimitives.tid_or_exn',bool),X4),s(fun('type.list.list'('type.string.char'),bool),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X6)))))),
  inference(rectify,[],[f28])).
fof(f28,axiom,(
  ! [X6] : ! [X32,X45,X26,X46,X47,X48] : s(fun('type.list.list'('type.string.char'),bool),X47) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X6),'const.modSem.recordtype|46|state_6'(s('type.num.num',X32),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X45),s('type.ffi.ffi_state'(X6),X26),s(fun('type.semanticPrimitives.tid_or_exn',bool),X46),s(fun('type.list.list'('type.string.char'),bool),X47),s('type.list.list'('type.option.option'('type.modSem.v')),X48)))))),
  file('thm.modSem.state_|49||49|','thm.modSem.state_defined_mods')).
fof(f215,plain,(
  ( ! [X2,X0,X1] : (s('type.modSem.state'(X0),X1) != s('type.modSem.state'(X0),X2) | s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X2)))) ) | $spl42),
  inference(cnf_transformation,[],[f215_D])).
fof(f215_D,plain,(
  ( ! [X2,X0,X1] : (s('type.modSem.state'(X0),X1) != s('type.modSem.state'(X0),X2) | s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X2)))) ) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f148,plain,(
  ( ! [X2,X0,X1] : (s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X2))) | s('type.modSem.state'(X0),X1) != s('type.modSem.state'(X0),X2)) )),
  inference(cnf_transformation,[],[f118])).
fof(f118,plain,(
  ! [X0,X1,X2] : ((s('type.modSem.state'(X0),X1) != s('type.modSem.state'(X0),X2) | (s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X1))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X2))) & s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X1))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X2))) & s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X2))) & s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X2))) & s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X2))))) & (s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X1))) != s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X2))) | s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X1))) != s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X2))) | s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X1))) != s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X2))) | s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X1))) != s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X2))) | s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X1))) != s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X2))) | s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X1))) != s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X2))) | s('type.modSem.state'(X0),X1) = s('type.modSem.state'(X0),X2)))),
  inference(flattening,[],[f117])).
fof(f117,plain,(
  ! [X0,X1,X2] : ((s('type.modSem.state'(X0),X1) != s('type.modSem.state'(X0),X2) | (s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X1))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X2))) & s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X1))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X2))) & s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X2))) & s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X2))) & s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X2))))) & ((s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X1))) != s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X2))) | s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X1))) != s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X2))) | s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X1))) != s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X2))) | s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X1))) != s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X2))) | s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X1))) != s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X2))) | s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X1))) != s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X2)))) | s('type.modSem.state'(X0),X1) = s('type.modSem.state'(X0),X2)))),
  inference(nnf_transformation,[],[f55])).
fof(f55,plain,(
  ! [X0,X1,X2] : (s('type.modSem.state'(X0),X1) = s('type.modSem.state'(X0),X2) <=> (s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X1))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X2))) & s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X1))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X2))) & s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X2))) & s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X2))) & s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X2)))))),
  inference(flattening,[],[f54])).
fof(f54,plain,(
  ! [X0] : ! [X1,X2] : (s('type.modSem.state'(X0),X1) = s('type.modSem.state'(X0),X2) <=> (s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X1))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X2))) & s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X1))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X2))) & s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X2))) & s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X2))) & s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X2)))))),
  inference(rectify,[],[f18])).
fof(f18,axiom,(
  ! [X6] : ! [X43,X44] : (s('type.modSem.state'(X6),X43) = s('type.modSem.state'(X6),X44) <=> (s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X6),X43))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X6),X44))) & s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X6),X43))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X6),X44))) & s('type.ffi.ffi_state'(X6),'const.modSem.state_ffi_1'(s('type.modSem.state'(X6),X43))) = s('type.ffi.ffi_state'(X6),'const.modSem.state_ffi_1'(s('type.modSem.state'(X6),X44))) & s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X6),X43))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X6),X44))) & s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X6),X43))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X6),X44))) & s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X6),X43))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X6),X44)))))),
  file('thm.modSem.state_|49||49|','thm.modSem.modSem_|49|25_prove_ltb')).
fof(f193,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4) = s(fun('type.semanticPrimitives.tid_or_exn',bool),sK10) | $spl8),
  inference(cnf_transformation,[],[f193_D])).
fof(f193_D,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4) = s(fun('type.semanticPrimitives.tid_or_exn',bool),sK10) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f5844,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4) = s(fun('type.semanticPrimitives.tid_or_exn',bool),sK10) | ($spl64 | $spl798)),
  inference(forward_demodulation,[],[f5808,f226])).
fof(f5808,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),sK10) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))))) | ($spl64 | $spl798)),
  inference(superposition,[],[f226,f5528])).
fof(f5849,plain,(
  $false | ($spl3 | $spl58 | $spl798)),
  inference(subsumption_resolution,[],[f5848,f188])).
fof(f5848,plain,(
  s('type.num.num',sK1) = s('type.num.num',sK7) | ($spl58 | $spl798)),
  inference(forward_demodulation,[],[f5811,f223])).
fof(f5811,plain,(
  s('type.num.num',sK7) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))))) | ($spl58 | $spl798)),
  inference(superposition,[],[f223,f5528])).
fof(f224,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.ffi.ffi_state'(X0),X3) = s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),'const.modSem.recordtype|46|state_6'(s('type.num.num',X1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X2),s('type.ffi.ffi_state'(X0),X3),s(fun('type.semanticPrimitives.tid_or_exn',bool),X4),s(fun('type.list.list'('type.string.char'),bool),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X6)))))) ) | $spl60),
  inference(cnf_transformation,[],[f224_D])).
fof(f224_D,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.ffi.ffi_state'(X0),X3) = s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),'const.modSem.recordtype|46|state_6'(s('type.num.num',X1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X2),s('type.ffi.ffi_state'(X0),X3),s(fun('type.semanticPrimitives.tid_or_exn',bool),X4),s(fun('type.list.list'('type.string.char'),bool),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X6)))))) ) <=> ~$spl60),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl60])])).
fof(f162,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.ffi.ffi_state'(X0),X3) = s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),'const.modSem.recordtype|46|state_6'(s('type.num.num',X1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X2),s('type.ffi.ffi_state'(X0),X3),s(fun('type.semanticPrimitives.tid_or_exn',bool),X4),s(fun('type.list.list'('type.string.char'),bool),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X6)))))) )),
  inference(cnf_transformation,[],[f67])).
fof(f67,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : s('type.ffi.ffi_state'(X0),X3) = s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),'const.modSem.recordtype|46|state_6'(s('type.num.num',X1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X2),s('type.ffi.ffi_state'(X0),X3),s(fun('type.semanticPrimitives.tid_or_exn',bool),X4),s(fun('type.list.list'('type.string.char'),bool),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X6)))))),
  inference(flattening,[],[f66])).
fof(f66,plain,(
  ! [X0] : ! [X1,X2,X3,X4,X5,X6] : s('type.ffi.ffi_state'(X0),X3) = s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),'const.modSem.recordtype|46|state_6'(s('type.num.num',X1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X2),s('type.ffi.ffi_state'(X0),X3),s(fun('type.semanticPrimitives.tid_or_exn',bool),X4),s(fun('type.list.list'('type.string.char'),bool),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X6)))))),
  inference(rectify,[],[f29])).
fof(f29,axiom,(
  ! [X6] : ! [X32,X45,X26,X46,X47,X48] : s('type.ffi.ffi_state'(X6),X26) = s('type.ffi.ffi_state'(X6),'const.modSem.state_ffi_1'(s('type.modSem.state'(X6),'const.modSem.recordtype|46|state_6'(s('type.num.num',X32),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X45),s('type.ffi.ffi_state'(X6),X26),s(fun('type.semanticPrimitives.tid_or_exn',bool),X46),s(fun('type.list.list'('type.string.char'),bool),X47),s('type.list.list'('type.option.option'('type.modSem.v')),X48)))))),
  file('thm.modSem.state_|49||49|','thm.modSem.state_ffi')).
fof(f5197,plain,(
  s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) = s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK7),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK8),s('type.ffi.ffi_state'(sK0),sK9),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK10),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) | $spl788),
  inference(cnf_transformation,[],[f5197_D])).
fof(f5197_D,plain,(
  s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) = s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK7),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK8),s('type.ffi.ffi_state'(sK0),sK9),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK10),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) <=> ~$spl788),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl788])])).
fof(f5060,plain,(
  s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) = s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK7),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK8),s('type.ffi.ffi_state'(sK0),sK9),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK10),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) | ($spl0 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f5059,f195])).
fof(f226,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s(fun('type.semanticPrimitives.tid_or_exn',bool),X4) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),'const.modSem.recordtype|46|state_6'(s('type.num.num',X1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X2),s('type.ffi.ffi_state'(X0),X3),s(fun('type.semanticPrimitives.tid_or_exn',bool),X4),s(fun('type.list.list'('type.string.char'),bool),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X6)))))) ) | $spl64),
  inference(cnf_transformation,[],[f226_D])).
fof(f226_D,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s(fun('type.semanticPrimitives.tid_or_exn',bool),X4) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),'const.modSem.recordtype|46|state_6'(s('type.num.num',X1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X2),s('type.ffi.ffi_state'(X0),X3),s(fun('type.semanticPrimitives.tid_or_exn',bool),X4),s(fun('type.list.list'('type.string.char'),bool),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X6)))))) ) <=> ~$spl64),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl64])])).
fof(f164,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s(fun('type.semanticPrimitives.tid_or_exn',bool),X4) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),'const.modSem.recordtype|46|state_6'(s('type.num.num',X1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X2),s('type.ffi.ffi_state'(X0),X3),s(fun('type.semanticPrimitives.tid_or_exn',bool),X4),s(fun('type.list.list'('type.string.char'),bool),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X6)))))) )),
  inference(cnf_transformation,[],[f71])).
fof(f71,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : s(fun('type.semanticPrimitives.tid_or_exn',bool),X4) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),'const.modSem.recordtype|46|state_6'(s('type.num.num',X1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X2),s('type.ffi.ffi_state'(X0),X3),s(fun('type.semanticPrimitives.tid_or_exn',bool),X4),s(fun('type.list.list'('type.string.char'),bool),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X6)))))),
  inference(flattening,[],[f70])).
fof(f70,plain,(
  ! [X0] : ! [X1,X2,X3,X4,X5,X6] : s(fun('type.semanticPrimitives.tid_or_exn',bool),X4) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),'const.modSem.recordtype|46|state_6'(s('type.num.num',X1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X2),s('type.ffi.ffi_state'(X0),X3),s(fun('type.semanticPrimitives.tid_or_exn',bool),X4),s(fun('type.list.list'('type.string.char'),bool),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X6)))))),
  inference(rectify,[],[f27])).
fof(f27,axiom,(
  ! [X6] : ! [X32,X45,X26,X46,X47,X48] : s(fun('type.semanticPrimitives.tid_or_exn',bool),X46) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X6),'const.modSem.recordtype|46|state_6'(s('type.num.num',X32),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X45),s('type.ffi.ffi_state'(X6),X26),s(fun('type.semanticPrimitives.tid_or_exn',bool),X46),s(fun('type.list.list'('type.string.char'),bool),X47),s('type.list.list'('type.option.option'('type.modSem.v')),X48)))))),
  file('thm.modSem.state_|49||49|','thm.modSem.state_defined_types')).
fof(f5058,plain,(
  s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) = s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK7),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK8),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK10),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) | $spl780),
  inference(cnf_transformation,[],[f5058_D])).
fof(f5058_D,plain,(
  s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) = s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK7),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK8),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK10),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) <=> ~$spl780),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl780])])).
fof(f5056,plain,(
  s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) = s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK7),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK8),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK10),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) | ($spl0 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f4650,f191])).
fof(f4650,plain,(
  s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) = s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK7),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK8),s('type.ffi.ffi_state'(sK0),sK9),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK10),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) | ($spl0 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f252,f195])).
fof(f252,plain,(
  s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) = s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK7),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK8),s('type.ffi.ffi_state'(sK0),sK9),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK10),s(fun('type.list.list'('type.string.char'),bool),sK11),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) | ($spl0 | $spl12)),
  inference(forward_demodulation,[],[f185,f197])).
fof(f223,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.num.num',X1) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),'const.modSem.recordtype|46|state_6'(s('type.num.num',X1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X2),s('type.ffi.ffi_state'(X0),X3),s(fun('type.semanticPrimitives.tid_or_exn',bool),X4),s(fun('type.list.list'('type.string.char'),bool),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X6)))))) ) | $spl58),
  inference(cnf_transformation,[],[f223_D])).
fof(f223_D,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.num.num',X1) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),'const.modSem.recordtype|46|state_6'(s('type.num.num',X1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X2),s('type.ffi.ffi_state'(X0),X3),s(fun('type.semanticPrimitives.tid_or_exn',bool),X4),s(fun('type.list.list'('type.string.char'),bool),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X6)))))) ) <=> ~$spl58),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl58])])).
fof(f161,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.num.num',X1) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),'const.modSem.recordtype|46|state_6'(s('type.num.num',X1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X2),s('type.ffi.ffi_state'(X0),X3),s(fun('type.semanticPrimitives.tid_or_exn',bool),X4),s(fun('type.list.list'('type.string.char'),bool),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X6)))))) )),
  inference(cnf_transformation,[],[f65])).
fof(f65,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : s('type.num.num',X1) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),'const.modSem.recordtype|46|state_6'(s('type.num.num',X1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X2),s('type.ffi.ffi_state'(X0),X3),s(fun('type.semanticPrimitives.tid_or_exn',bool),X4),s(fun('type.list.list'('type.string.char'),bool),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X6)))))),
  inference(flattening,[],[f64])).
fof(f64,plain,(
  ! [X0] : ! [X1,X2,X3,X4,X5,X6] : s('type.num.num',X1) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),'const.modSem.recordtype|46|state_6'(s('type.num.num',X1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X2),s('type.ffi.ffi_state'(X0),X3),s(fun('type.semanticPrimitives.tid_or_exn',bool),X4),s(fun('type.list.list'('type.string.char'),bool),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X6)))))),
  inference(rectify,[],[f30])).
fof(f30,axiom,(
  ! [X6] : ! [X32,X45,X26,X46,X47,X48] : s('type.num.num',X32) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X6),'const.modSem.recordtype|46|state_6'(s('type.num.num',X32),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X45),s('type.ffi.ffi_state'(X6),X26),s(fun('type.semanticPrimitives.tid_or_exn',bool),X46),s(fun('type.list.list'('type.string.char'),bool),X47),s('type.list.list'('type.option.option'('type.modSem.v')),X48)))))),
  file('thm.modSem.state_|49||49|','thm.modSem.state_clock')).
fof(f4736,plain,(
  s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) = s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK7),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK8),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) | $spl754),
  inference(cnf_transformation,[],[f4736_D])).
fof(f4736_D,plain,(
  s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) = s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK7),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK8),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) <=> ~$spl754),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl754])])).
fof(f4652,plain,(
  s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) = s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK7),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK8),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) | ($spl0 | $spl6 | $spl8 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f4651,f191])).
fof(f4651,plain,(
  s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) = s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK7),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK8),s('type.ffi.ffi_state'(sK0),sK9),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) | ($spl0 | $spl8 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f4650,f193])).
fof(f225,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X2) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),'const.modSem.recordtype|46|state_6'(s('type.num.num',X1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X2),s('type.ffi.ffi_state'(X0),X3),s(fun('type.semanticPrimitives.tid_or_exn',bool),X4),s(fun('type.list.list'('type.string.char'),bool),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X6)))))) ) | $spl62),
  inference(cnf_transformation,[],[f225_D])).
fof(f225_D,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X2) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),'const.modSem.recordtype|46|state_6'(s('type.num.num',X1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X2),s('type.ffi.ffi_state'(X0),X3),s(fun('type.semanticPrimitives.tid_or_exn',bool),X4),s(fun('type.list.list'('type.string.char'),bool),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X6)))))) ) <=> ~$spl62),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl62])])).
fof(f163,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X2) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),'const.modSem.recordtype|46|state_6'(s('type.num.num',X1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X2),s('type.ffi.ffi_state'(X0),X3),s(fun('type.semanticPrimitives.tid_or_exn',bool),X4),s(fun('type.list.list'('type.string.char'),bool),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X6)))))) )),
  inference(cnf_transformation,[],[f69])).
fof(f69,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X2) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),'const.modSem.recordtype|46|state_6'(s('type.num.num',X1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X2),s('type.ffi.ffi_state'(X0),X3),s(fun('type.semanticPrimitives.tid_or_exn',bool),X4),s(fun('type.list.list'('type.string.char'),bool),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X6)))))),
  inference(flattening,[],[f68])).
fof(f68,plain,(
  ! [X0] : ! [X1,X2,X3,X4,X5,X6] : s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X2) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),'const.modSem.recordtype|46|state_6'(s('type.num.num',X1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X2),s('type.ffi.ffi_state'(X0),X3),s(fun('type.semanticPrimitives.tid_or_exn',bool),X4),s(fun('type.list.list'('type.string.char'),bool),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X6)))))),
  inference(rectify,[],[f26])).
fof(f26,axiom,(
  ! [X6] : ! [X32,X45,X26,X46,X47,X48] : s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X45) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X6),'const.modSem.recordtype|46|state_6'(s('type.num.num',X32),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X45),s('type.ffi.ffi_state'(X6),X26),s(fun('type.semanticPrimitives.tid_or_exn',bool),X46),s(fun('type.list.list'('type.string.char'),bool),X47),s('type.list.list'('type.option.option'('type.modSem.v')),X48)))))),
  file('thm.modSem.state_|49||49|','thm.modSem.state_refs')).
fof(f4646,plain,(
  s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) = s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK8),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) | $spl752),
  inference(cnf_transformation,[],[f4646_D])).
fof(f4646_D,plain,(
  s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) = s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK8),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) <=> ~$spl752),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl752])])).
fof(f4644,plain,(
  s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) = s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK8),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) | ($spl0 | $spl2 | $spl6 | $spl8 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f4643,f187])).
fof(f4643,plain,(
  s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) = s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK7),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK8),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) | ($spl0 | $spl6 | $spl8 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f254,f195])).
fof(f254,plain,(
  s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) = s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK7),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK8),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK11),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) | ($spl0 | $spl6 | $spl8 | $spl12)),
  inference(forward_demodulation,[],[f253,f191])).
fof(f253,plain,(
  s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) = s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK7),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK8),s('type.ffi.ffi_state'(sK0),sK9),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK11),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) | ($spl0 | $spl8 | $spl12)),
  inference(forward_demodulation,[],[f252,f193])).
fof(f186,plain,(
  s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) != s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK7),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK8),s('type.ffi.ffi_state'(sK0),sK9),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK10),s(fun('type.list.list'('type.string.char'),bool),sK11),s('type.list.list'('type.option.option'('type.modSem.v')),sK12))) | $spl1),
  inference(cnf_transformation,[],[f186_D])).
fof(f186_D,plain,(
  s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) != s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK7),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK8),s('type.ffi.ffi_state'(sK0),sK9),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK10),s(fun('type.list.list'('type.string.char'),bool),sK11),s('type.list.list'('type.option.option'('type.modSem.v')),sK12))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f188,plain,(
  s('type.num.num',sK1) != s('type.num.num',sK7) | $spl3),
  inference(cnf_transformation,[],[f188_D])).
fof(f188_D,plain,(
  s('type.num.num',sK1) != s('type.num.num',sK7) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f190,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2) != s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK8) | $spl5),
  inference(cnf_transformation,[],[f190_D])).
fof(f190_D,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2) != s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK8) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f192,plain,(
  s('type.ffi.ffi_state'(sK0),sK3) != s('type.ffi.ffi_state'(sK0),sK9) | $spl7),
  inference(cnf_transformation,[],[f192_D])).
fof(f192_D,plain,(
  s('type.ffi.ffi_state'(sK0),sK3) != s('type.ffi.ffi_state'(sK0),sK9) <=> ~$spl7),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl7])])).
fof(f194,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4) != s(fun('type.semanticPrimitives.tid_or_exn',bool),sK10) | $spl9),
  inference(cnf_transformation,[],[f194_D])).
fof(f194_D,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4) != s(fun('type.semanticPrimitives.tid_or_exn',bool),sK10) <=> ~$spl9),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl9])])).
fof(f196,plain,(
  s(fun('type.list.list'('type.string.char'),bool),sK5) != s(fun('type.list.list'('type.string.char'),bool),sK11) | $spl11),
  inference(cnf_transformation,[],[f196_D])).
fof(f196_D,plain,(
  s(fun('type.list.list'('type.string.char'),bool),sK5) != s(fun('type.list.list'('type.string.char'),bool),sK11) <=> ~$spl11),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl11])])).
fof(f198,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),sK6) != s('type.list.list'('type.option.option'('type.modSem.v')),sK12) | $spl13),
  inference(cnf_transformation,[],[f198_D])).
fof(f198_D,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),sK6) != s('type.list.list'('type.option.option'('type.modSem.v')),sK12) <=> ~$spl13),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl13])])).
fof(f129,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),sK6) != s('type.list.list'('type.option.option'('type.modSem.v')),sK12) | s(fun('type.list.list'('type.string.char'),bool),sK5) != s(fun('type.list.list'('type.string.char'),bool),sK11) | s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4) != s(fun('type.semanticPrimitives.tid_or_exn',bool),sK10) | s('type.ffi.ffi_state'(sK0),sK3) != s('type.ffi.ffi_state'(sK0),sK9) | s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2) != s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK8) | s('type.num.num',sK1) != s('type.num.num',sK7) | s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) != s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK7),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK8),s('type.ffi.ffi_state'(sK0),sK9),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK10),s(fun('type.list.list'('type.string.char'),bool),sK11),s('type.list.list'('type.option.option'('type.modSem.v')),sK12)))),
  inference(cnf_transformation,[],[f112])).
fof(f112,plain,(
  (s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) = s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK7),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK8),s('type.ffi.ffi_state'(sK0),sK9),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK10),s(fun('type.list.list'('type.string.char'),bool),sK11),s('type.list.list'('type.option.option'('type.modSem.v')),sK12))) | (s('type.num.num',sK1) = s('type.num.num',sK7) & s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK8) & s('type.ffi.ffi_state'(sK0),sK3) = s('type.ffi.ffi_state'(sK0),sK9) & s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4) = s(fun('type.semanticPrimitives.tid_or_exn',bool),sK10) & s(fun('type.list.list'('type.string.char'),bool),sK5) = s(fun('type.list.list'('type.string.char'),bool),sK11) & s('type.list.list'('type.option.option'('type.modSem.v')),sK6) = s('type.list.list'('type.option.option'('type.modSem.v')),sK12))) & (s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) != s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK7),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK8),s('type.ffi.ffi_state'(sK0),sK9),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK10),s(fun('type.list.list'('type.string.char'),bool),sK11),s('type.list.list'('type.option.option'('type.modSem.v')),sK12))) | s('type.num.num',sK1) != s('type.num.num',sK7) | s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2) != s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK8) | s('type.ffi.ffi_state'(sK0),sK3) != s('type.ffi.ffi_state'(sK0),sK9) | s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4) != s(fun('type.semanticPrimitives.tid_or_exn',bool),sK10) | s(fun('type.list.list'('type.string.char'),bool),sK5) != s(fun('type.list.list'('type.string.char'),bool),sK11) | s('type.list.list'('type.option.option'('type.modSem.v')),sK6) != s('type.list.list'('type.option.option'('type.modSem.v')),sK12))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5,sK6,sK7,sK8,sK9,sK10,sK11,sK12])],[f111])).
fof(f111,plain,(
  ? [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : ((s('type.modSem.state'(X0),'const.modSem.recordtype|46|state_6'(s('type.num.num',X1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X2),s('type.ffi.ffi_state'(X0),X3),s(fun('type.semanticPrimitives.tid_or_exn',bool),X4),s(fun('type.list.list'('type.string.char'),bool),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X6))) = s('type.modSem.state'(X0),'const.modSem.recordtype|46|state_6'(s('type.num.num',X7),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X8),s('type.ffi.ffi_state'(X0),X9),s(fun('type.semanticPrimitives.tid_or_exn',bool),X10),s(fun('type.list.list'('type.string.char'),bool),X11),s('type.list.list'('type.option.option'('type.modSem.v')),X12))) | (s('type.num.num',X1) = s('type.num.num',X7) & s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X2) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X8) & s('type.ffi.ffi_state'(X0),X3) = s('type.ffi.ffi_state'(X0),X9) & s(fun('type.semanticPrimitives.tid_or_exn',bool),X4) = s(fun('type.semanticPrimitives.tid_or_exn',bool),X10) & s(fun('type.list.list'('type.string.char'),bool),X5) = s(fun('type.list.list'('type.string.char'),bool),X11) & s('type.list.list'('type.option.option'('type.modSem.v')),X6) = s('type.list.list'('type.option.option'('type.modSem.v')),X12))) & (s('type.modSem.state'(X0),'const.modSem.recordtype|46|state_6'(s('type.num.num',X1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X2),s('type.ffi.ffi_state'(X0),X3),s(fun('type.semanticPrimitives.tid_or_exn',bool),X4),s(fun('type.list.list'('type.string.char'),bool),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X6))) != s('type.modSem.state'(X0),'const.modSem.recordtype|46|state_6'(s('type.num.num',X7),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X8),s('type.ffi.ffi_state'(X0),X9),s(fun('type.semanticPrimitives.tid_or_exn',bool),X10),s(fun('type.list.list'('type.string.char'),bool),X11),s('type.list.list'('type.option.option'('type.modSem.v')),X12))) | s('type.num.num',X1) != s('type.num.num',X7) | s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X2) != s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X8) | s('type.ffi.ffi_state'(X0),X3) != s('type.ffi.ffi_state'(X0),X9) | s(fun('type.semanticPrimitives.tid_or_exn',bool),X4) != s(fun('type.semanticPrimitives.tid_or_exn',bool),X10) | s(fun('type.list.list'('type.string.char'),bool),X5) != s(fun('type.list.list'('type.string.char'),bool),X11) | s('type.list.list'('type.option.option'('type.modSem.v')),X6) != s('type.list.list'('type.option.option'('type.modSem.v')),X12)))),
  inference(flattening,[],[f110])).
fof(f110,plain,(
  ? [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : ((s('type.modSem.state'(X0),'const.modSem.recordtype|46|state_6'(s('type.num.num',X1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X2),s('type.ffi.ffi_state'(X0),X3),s(fun('type.semanticPrimitives.tid_or_exn',bool),X4),s(fun('type.list.list'('type.string.char'),bool),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X6))) = s('type.modSem.state'(X0),'const.modSem.recordtype|46|state_6'(s('type.num.num',X7),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X8),s('type.ffi.ffi_state'(X0),X9),s(fun('type.semanticPrimitives.tid_or_exn',bool),X10),s(fun('type.list.list'('type.string.char'),bool),X11),s('type.list.list'('type.option.option'('type.modSem.v')),X12))) | (s('type.num.num',X1) = s('type.num.num',X7) & s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X2) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X8) & s('type.ffi.ffi_state'(X0),X3) = s('type.ffi.ffi_state'(X0),X9) & s(fun('type.semanticPrimitives.tid_or_exn',bool),X4) = s(fun('type.semanticPrimitives.tid_or_exn',bool),X10) & s(fun('type.list.list'('type.string.char'),bool),X5) = s(fun('type.list.list'('type.string.char'),bool),X11) & s('type.list.list'('type.option.option'('type.modSem.v')),X6) = s('type.list.list'('type.option.option'('type.modSem.v')),X12))) & (s('type.modSem.state'(X0),'const.modSem.recordtype|46|state_6'(s('type.num.num',X1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X2),s('type.ffi.ffi_state'(X0),X3),s(fun('type.semanticPrimitives.tid_or_exn',bool),X4),s(fun('type.list.list'('type.string.char'),bool),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X6))) != s('type.modSem.state'(X0),'const.modSem.recordtype|46|state_6'(s('type.num.num',X7),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X8),s('type.ffi.ffi_state'(X0),X9),s(fun('type.semanticPrimitives.tid_or_exn',bool),X10),s(fun('type.list.list'('type.string.char'),bool),X11),s('type.list.list'('type.option.option'('type.modSem.v')),X12))) | (s('type.num.num',X1) != s('type.num.num',X7) | s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X2) != s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X8) | s('type.ffi.ffi_state'(X0),X3) != s('type.ffi.ffi_state'(X0),X9) | s(fun('type.semanticPrimitives.tid_or_exn',bool),X4) != s(fun('type.semanticPrimitives.tid_or_exn',bool),X10) | s(fun('type.list.list'('type.string.char'),bool),X5) != s(fun('type.list.list'('type.string.char'),bool),X11) | s('type.list.list'('type.option.option'('type.modSem.v')),X6) != s('type.list.list'('type.option.option'('type.modSem.v')),X12))))),
  inference(nnf_transformation,[],[f105])).
fof(f105,plain,(
  ? [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : (s('type.modSem.state'(X0),'const.modSem.recordtype|46|state_6'(s('type.num.num',X1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X2),s('type.ffi.ffi_state'(X0),X3),s(fun('type.semanticPrimitives.tid_or_exn',bool),X4),s(fun('type.list.list'('type.string.char'),bool),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X6))) = s('type.modSem.state'(X0),'const.modSem.recordtype|46|state_6'(s('type.num.num',X7),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X8),s('type.ffi.ffi_state'(X0),X9),s(fun('type.semanticPrimitives.tid_or_exn',bool),X10),s(fun('type.list.list'('type.string.char'),bool),X11),s('type.list.list'('type.option.option'('type.modSem.v')),X12))) <~> (s('type.num.num',X1) = s('type.num.num',X7) & s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X2) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X8) & s('type.ffi.ffi_state'(X0),X3) = s('type.ffi.ffi_state'(X0),X9) & s(fun('type.semanticPrimitives.tid_or_exn',bool),X4) = s(fun('type.semanticPrimitives.tid_or_exn',bool),X10) & s(fun('type.list.list'('type.string.char'),bool),X5) = s(fun('type.list.list'('type.string.char'),bool),X11) & s('type.list.list'('type.option.option'('type.modSem.v')),X6) = s('type.list.list'('type.option.option'('type.modSem.v')),X12)))),
  inference(ennf_transformation,[],[f40])).
fof(f40,plain,(
  ~! [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : (s('type.modSem.state'(X0),'const.modSem.recordtype|46|state_6'(s('type.num.num',X1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X2),s('type.ffi.ffi_state'(X0),X3),s(fun('type.semanticPrimitives.tid_or_exn',bool),X4),s(fun('type.list.list'('type.string.char'),bool),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X6))) = s('type.modSem.state'(X0),'const.modSem.recordtype|46|state_6'(s('type.num.num',X7),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X8),s('type.ffi.ffi_state'(X0),X9),s(fun('type.semanticPrimitives.tid_or_exn',bool),X10),s(fun('type.list.list'('type.string.char'),bool),X11),s('type.list.list'('type.option.option'('type.modSem.v')),X12))) <=> (s('type.num.num',X1) = s('type.num.num',X7) & s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X2) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X8) & s('type.ffi.ffi_state'(X0),X3) = s('type.ffi.ffi_state'(X0),X9) & s(fun('type.semanticPrimitives.tid_or_exn',bool),X4) = s(fun('type.semanticPrimitives.tid_or_exn',bool),X10) & s(fun('type.list.list'('type.string.char'),bool),X5) = s(fun('type.list.list'('type.string.char'),bool),X11) & s('type.list.list'('type.option.option'('type.modSem.v')),X6) = s('type.list.list'('type.option.option'('type.modSem.v')),X12)))),
  inference(flattening,[],[f39])).
fof(f39,plain,(
  ~! [X0] : ! [X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12] : (s('type.modSem.state'(X0),'const.modSem.recordtype|46|state_6'(s('type.num.num',X1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X2),s('type.ffi.ffi_state'(X0),X3),s(fun('type.semanticPrimitives.tid_or_exn',bool),X4),s(fun('type.list.list'('type.string.char'),bool),X5),s('type.list.list'('type.option.option'('type.modSem.v')),X6))) = s('type.modSem.state'(X0),'const.modSem.recordtype|46|state_6'(s('type.num.num',X7),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X8),s('type.ffi.ffi_state'(X0),X9),s(fun('type.semanticPrimitives.tid_or_exn',bool),X10),s(fun('type.list.list'('type.string.char'),bool),X11),s('type.list.list'('type.option.option'('type.modSem.v')),X12))) <=> (s('type.num.num',X1) = s('type.num.num',X7) & s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X2) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X8) & s('type.ffi.ffi_state'(X0),X3) = s('type.ffi.ffi_state'(X0),X9) & s(fun('type.semanticPrimitives.tid_or_exn',bool),X4) = s(fun('type.semanticPrimitives.tid_or_exn',bool),X10) & s(fun('type.list.list'('type.string.char'),bool),X5) = s(fun('type.list.list'('type.string.char'),bool),X11) & s('type.list.list'('type.option.option'('type.modSem.v')),X6) = s('type.list.list'('type.option.option'('type.modSem.v')),X12)))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X18] : (s('type.modSem.state'(X6),'const.modSem.recordtype|46|state_6'(s('type.num.num',X7),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X8),s('type.ffi.ffi_state'(X6),X9),s(fun('type.semanticPrimitives.tid_or_exn',bool),X10),s(fun('type.list.list'('type.string.char'),bool),X11),s('type.list.list'('type.option.option'('type.modSem.v')),X12))) = s('type.modSem.state'(X6),'const.modSem.recordtype|46|state_6'(s('type.num.num',X13),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X14),s('type.ffi.ffi_state'(X6),X15),s(fun('type.semanticPrimitives.tid_or_exn',bool),X16),s(fun('type.list.list'('type.string.char'),bool),X17),s('type.list.list'('type.option.option'('type.modSem.v')),X18))) <=> (s('type.num.num',X7) = s('type.num.num',X13) & s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X8) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X14) & s('type.ffi.ffi_state'(X6),X9) = s('type.ffi.ffi_state'(X6),X15) & s(fun('type.semanticPrimitives.tid_or_exn',bool),X10) = s(fun('type.semanticPrimitives.tid_or_exn',bool),X16) & s(fun('type.list.list'('type.string.char'),bool),X11) = s(fun('type.list.list'('type.string.char'),bool),X17) & s('type.list.list'('type.option.option'('type.modSem.v')),X12) = s('type.list.list'('type.option.option'('type.modSem.v')),X18)))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X18] : (s('type.modSem.state'(X6),'const.modSem.recordtype|46|state_6'(s('type.num.num',X7),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X8),s('type.ffi.ffi_state'(X6),X9),s(fun('type.semanticPrimitives.tid_or_exn',bool),X10),s(fun('type.list.list'('type.string.char'),bool),X11),s('type.list.list'('type.option.option'('type.modSem.v')),X12))) = s('type.modSem.state'(X6),'const.modSem.recordtype|46|state_6'(s('type.num.num',X13),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X14),s('type.ffi.ffi_state'(X6),X15),s(fun('type.semanticPrimitives.tid_or_exn',bool),X16),s(fun('type.list.list'('type.string.char'),bool),X17),s('type.list.list'('type.option.option'('type.modSem.v')),X18))) <=> (s('type.num.num',X7) = s('type.num.num',X13) & s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X8) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X14) & s('type.ffi.ffi_state'(X6),X9) = s('type.ffi.ffi_state'(X6),X15) & s(fun('type.semanticPrimitives.tid_or_exn',bool),X10) = s(fun('type.semanticPrimitives.tid_or_exn',bool),X16) & s(fun('type.list.list'('type.string.char'),bool),X11) = s(fun('type.list.list'('type.string.char'),bool),X17) & s('type.list.list'('type.option.option'('type.modSem.v')),X12) = s('type.list.list'('type.option.option'('type.modSem.v')),X18)))),
  file('thm.modSem.state_|49||49|','thm.modSem.state_|49||49|')).
fof(f4721,plain,(
  $false | ($spl5 | $spl62 | $spl752)),
  inference(subsumption_resolution,[],[f4720,f190])).
fof(f4720,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK8) | ($spl62 | $spl752)),
  inference(forward_demodulation,[],[f4685,f225])).
fof(f4685,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK8) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))))) | ($spl62 | $spl752)),
  inference(superposition,[],[f225,f4646])).
fof(f5041,plain,(
  $false | ($spl3 | $spl58 | $spl754)),
  inference(subsumption_resolution,[],[f5040,f188])).
fof(f5040,plain,(
  s('type.num.num',sK1) = s('type.num.num',sK7) | ($spl58 | $spl754)),
  inference(forward_demodulation,[],[f5005,f223])).
fof(f5005,plain,(
  s('type.num.num',sK7) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))))) | ($spl58 | $spl754)),
  inference(superposition,[],[f223,f4736])).
fof(f5177,plain,(
  $false | ($spl9 | $spl64 | $spl780)),
  inference(subsumption_resolution,[],[f5176,f194])).
fof(f5176,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4) = s(fun('type.semanticPrimitives.tid_or_exn',bool),sK10) | ($spl64 | $spl780)),
  inference(forward_demodulation,[],[f5140,f226])).
fof(f5140,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),sK10) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))))) | ($spl64 | $spl780)),
  inference(superposition,[],[f226,f5058])).
fof(f5508,plain,(
  $false | ($spl7 | $spl60 | $spl788)),
  inference(subsumption_resolution,[],[f5507,f192])).
fof(f5507,plain,(
  s('type.ffi.ffi_state'(sK0),sK3) = s('type.ffi.ffi_state'(sK0),sK9) | ($spl60 | $spl788)),
  inference(forward_demodulation,[],[f5470,f224])).
fof(f5470,plain,(
  s('type.ffi.ffi_state'(sK0),sK9) = s('type.ffi.ffi_state'(sK0),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))))) | ($spl60 | $spl788)),
  inference(superposition,[],[f224,f5197])).
fof(f2241,plain,(
  $false | ($spl11 | $spl68 | $spl380)),
  inference(subsumption_resolution,[],[f2240,f196])).
fof(f2240,plain,(
  s(fun('type.list.list'('type.string.char'),bool),sK5) = s(fun('type.list.list'('type.string.char'),bool),sK11) | ($spl68 | $spl380)),
  inference(forward_demodulation,[],[f2232,f228])).
fof(f2232,plain,(
  s(fun('type.list.list'('type.string.char'),bool),sK11) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))))) | $spl380),
  inference(equality_resolution,[],[f2211])).
fof(f2211,plain,(
  ( ! [X0] : (s('type.modSem.state'(sK0),X0) != s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) | s(fun('type.list.list'('type.string.char'),bool),sK11) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),X0)))) ) | $spl380),
  inference(cnf_transformation,[],[f2211_D])).
fof(f2211_D,plain,(
  ( ! [X0] : (s('type.modSem.state'(sK0),X0) != s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) | s(fun('type.list.list'('type.string.char'),bool),sK11) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),X0)))) ) <=> ~$spl380),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl380])])).
fof(f2210,plain,(
  ( ! [X0] : (s(fun('type.list.list'('type.string.char'),bool),sK11) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),X0))) | s('type.modSem.state'(sK0),X0) != s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6)))) ) | ($spl42 | $spl68 | $spl102)),
  inference(forward_demodulation,[],[f2195,f228])).
fof(f2195,plain,(
  ( ! [X0] : (s('type.modSem.state'(sK0),X0) != s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) | s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),X0))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK11),s('type.list.list'('type.option.option'('type.modSem.v')),sK6)))))) ) | ($spl42 | $spl102)),
  inference(superposition,[],[f215,f258])).
fof(f258,plain,(
  s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) = s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK11),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) | $spl102),
  inference(cnf_transformation,[],[f258_D])).
fof(f258_D,plain,(
  s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) = s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK11),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) <=> ~$spl102),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl102])])).
fof(f5529,plain,(
  s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) = s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK11),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) | ($spl12 | $spl382)),
  inference(forward_demodulation,[],[f2247,f197])).
fof(f5847,plain,(
  $false | ($spl7 | $spl60 | $spl798)),
  inference(subsumption_resolution,[],[f5846,f192])).
fof(f5846,plain,(
  s('type.ffi.ffi_state'(sK0),sK3) = s('type.ffi.ffi_state'(sK0),sK9) | ($spl60 | $spl798)),
  inference(forward_demodulation,[],[f5810,f224])).
fof(f5810,plain,(
  s('type.ffi.ffi_state'(sK0),sK9) = s('type.ffi.ffi_state'(sK0),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))))) | ($spl60 | $spl798)),
  inference(superposition,[],[f224,f5528])).
fof(f5528,plain,(
  s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) = s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK7),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK8),s('type.ffi.ffi_state'(sK0),sK9),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK10),s(fun('type.list.list'('type.string.char'),bool),sK11),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) | $spl798),
  inference(cnf_transformation,[],[f5528_D])).
fof(f5528_D,plain,(
  s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) = s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK7),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK8),s('type.ffi.ffi_state'(sK0),sK9),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK10),s(fun('type.list.list'('type.string.char'),bool),sK11),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) <=> ~$spl798),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl798])])).
fof(f5059,plain,(
  s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) = s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK7),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK8),s('type.ffi.ffi_state'(sK0),sK9),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK10),s(fun('type.list.list'('type.string.char'),bool),sK11),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) | ($spl0 | $spl12)),
  inference(forward_demodulation,[],[f185,f197])).
fof(f189,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK8) | $spl4),
  inference(cnf_transformation,[],[f189_D])).
fof(f189_D,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK8) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f5845,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK8) | ($spl62 | $spl798)),
  inference(forward_demodulation,[],[f5809,f225])).
fof(f5809,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK8) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))))) | ($spl62 | $spl798)),
  inference(superposition,[],[f225,f5528])).
fof(f2247,plain,(
  s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) = s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK11),s('type.list.list'('type.option.option'('type.modSem.v')),sK12))) | $spl382),
  inference(cnf_transformation,[],[f2247_D])).
fof(f2247_D,plain,(
  s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) = s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK11),s('type.list.list'('type.option.option'('type.modSem.v')),sK12))) <=> ~$spl382),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl382])])).
fof(f2245,plain,(
  s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) = s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK11),s('type.list.list'('type.option.option'('type.modSem.v')),sK12))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f2244,f187])).
fof(f2244,plain,(
  s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) = s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK7),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK11),s('type.list.list'('type.option.option'('type.modSem.v')),sK12))) | ($spl0 | $spl4 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f2243,f189])).
fof(f2243,plain,(
  s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) = s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK7),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK8),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK11),s('type.list.list'('type.option.option'('type.modSem.v')),sK12))) | ($spl0 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f2242,f191])).
fof(f2242,plain,(
  s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) = s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK7),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK8),s('type.ffi.ffi_state'(sK0),sK9),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK11),s('type.list.list'('type.option.option'('type.modSem.v')),sK12))) | ($spl0 | $spl8)),
  inference(forward_demodulation,[],[f185,f193])).
fof(f185,plain,(
  s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) = s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK7),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK8),s('type.ffi.ffi_state'(sK0),sK9),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK10),s(fun('type.list.list'('type.string.char'),bool),sK11),s('type.list.list'('type.option.option'('type.modSem.v')),sK12))) | $spl0),
  inference(cnf_transformation,[],[f185_D])).
fof(f185_D,plain,(
  s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) = s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK7),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK8),s('type.ffi.ffi_state'(sK0),sK9),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK10),s(fun('type.list.list'('type.string.char'),bool),sK11),s('type.list.list'('type.option.option'('type.modSem.v')),sK12))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f197,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),sK6) = s('type.list.list'('type.option.option'('type.modSem.v')),sK12) | $spl12),
  inference(cnf_transformation,[],[f197_D])).
fof(f197_D,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),sK6) = s('type.list.list'('type.option.option'('type.modSem.v')),sK12) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f128,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),sK6) = s('type.list.list'('type.option.option'('type.modSem.v')),sK12) | s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) = s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK7),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK8),s('type.ffi.ffi_state'(sK0),sK9),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK10),s(fun('type.list.list'('type.string.char'),bool),sK11),s('type.list.list'('type.option.option'('type.modSem.v')),sK12)))),
  inference(cnf_transformation,[],[f112])).
fof(f195,plain,(
  s(fun('type.list.list'('type.string.char'),bool),sK5) = s(fun('type.list.list'('type.string.char'),bool),sK11) | $spl10),
  inference(cnf_transformation,[],[f195_D])).
fof(f195_D,plain,(
  s(fun('type.list.list'('type.string.char'),bool),sK5) = s(fun('type.list.list'('type.string.char'),bool),sK11) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f127,plain,(
  s(fun('type.list.list'('type.string.char'),bool),sK5) = s(fun('type.list.list'('type.string.char'),bool),sK11) | s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) = s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK7),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK8),s('type.ffi.ffi_state'(sK0),sK9),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK10),s(fun('type.list.list'('type.string.char'),bool),sK11),s('type.list.list'('type.option.option'('type.modSem.v')),sK12)))),
  inference(cnf_transformation,[],[f112])).
fof(f126,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4) = s(fun('type.semanticPrimitives.tid_or_exn',bool),sK10) | s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) = s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK7),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK8),s('type.ffi.ffi_state'(sK0),sK9),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK10),s(fun('type.list.list'('type.string.char'),bool),sK11),s('type.list.list'('type.option.option'('type.modSem.v')),sK12)))),
  inference(cnf_transformation,[],[f112])).
fof(f191,plain,(
  s('type.ffi.ffi_state'(sK0),sK3) = s('type.ffi.ffi_state'(sK0),sK9) | $spl6),
  inference(cnf_transformation,[],[f191_D])).
fof(f191_D,plain,(
  s('type.ffi.ffi_state'(sK0),sK3) = s('type.ffi.ffi_state'(sK0),sK9) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f125,plain,(
  s('type.ffi.ffi_state'(sK0),sK3) = s('type.ffi.ffi_state'(sK0),sK9) | s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) = s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK7),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK8),s('type.ffi.ffi_state'(sK0),sK9),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK10),s(fun('type.list.list'('type.string.char'),bool),sK11),s('type.list.list'('type.option.option'('type.modSem.v')),sK12)))),
  inference(cnf_transformation,[],[f112])).
fof(f124,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK8) | s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) = s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK7),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK8),s('type.ffi.ffi_state'(sK0),sK9),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK10),s(fun('type.list.list'('type.string.char'),bool),sK11),s('type.list.list'('type.option.option'('type.modSem.v')),sK12)))),
  inference(cnf_transformation,[],[f112])).
fof(f187,plain,(
  s('type.num.num',sK1) = s('type.num.num',sK7) | $spl2),
  inference(cnf_transformation,[],[f187_D])).
fof(f187_D,plain,(
  s('type.num.num',sK1) = s('type.num.num',sK7) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f123,plain,(
  s('type.num.num',sK1) = s('type.num.num',sK7) | s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) = s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK7),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK8),s('type.ffi.ffi_state'(sK0),sK9),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK10),s(fun('type.list.list'('type.string.char'),bool),sK11),s('type.list.list'('type.option.option'('type.modSem.v')),sK12)))),
  inference(cnf_transformation,[],[f112])).
fof(f251,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12)),
  inference(trivial_inequality_removal,[],[f250])).
fof(f250,plain,(
  s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) != s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f249,f187])).
fof(f249,plain,(
  s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) != s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK7),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) | ($spl1 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f248,f189])).
fof(f248,plain,(
  s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) != s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK7),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK8),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) | ($spl1 | $spl6 | $spl8 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f247,f191])).
fof(f247,plain,(
  s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) != s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK7),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK8),s('type.ffi.ffi_state'(sK0),sK9),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) | ($spl1 | $spl8 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f246,f193])).
fof(f246,plain,(
  s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) != s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK7),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK8),s('type.ffi.ffi_state'(sK0),sK9),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK10),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) | ($spl1 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f245,f195])).
fof(f245,plain,(
  s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) != s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK7),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK8),s('type.ffi.ffi_state'(sK0),sK9),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK10),s(fun('type.list.list'('type.string.char'),bool),sK11),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))) | ($spl1 | $spl12)),
  inference(forward_demodulation,[],[f186,f197])).
fof(f7167,plain,(
  $false | ($spl0 | $spl13 | $spl66)),
  inference(subsumption_resolution,[],[f7166,f198])).
fof(f7166,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),sK6) = s('type.list.list'('type.option.option'('type.modSem.v')),sK12) | ($spl0 | $spl66)),
  inference(forward_demodulation,[],[f7128,f227])).
fof(f7128,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),sK12) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.recordtype|46|state_6'(s('type.num.num',sK1),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK2),s('type.ffi.ffi_state'(sK0),sK3),s(fun('type.semanticPrimitives.tid_or_exn',bool),sK4),s(fun('type.list.list'('type.string.char'),bool),sK5),s('type.list.list'('type.option.option'('type.modSem.v')),sK6))))) | ($spl0 | $spl66)),
  inference(superposition,[],[f227,f185])).
% SZS output end Proof for thm.modSem
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 149
% Passive clauses: 552
% Generated clauses: 7102
% Final active clauses: 94
% Final passive clauses: 376
% Input formulas: 37
% Initial clauses: 62
% 
% Duplicate literals: 283
% Trivial inequalities: 133
% Fw subsumption resolutions: 346
% Fw demodulations: 668
% Bw demodulations: 34
% Condensations: 546
% 
% Simple tautologies: 99
% Equational tautologies: 35
% Forward subsumptions: 3390
% Bw demodulations to eq. taut.: 5
% 
% Binary resolution: 56
% Factoring: 1
% Forward superposition: 2178
% Backward superposition: 1930
% Self superposition: 115
% Equality factoring: 70
% Equality resolution: 28
% 
% Split clauses: 39
% Split components: 83
% SAT solver clauses: 1030
% SAT solver unit clauses: 84
% SAT solver binary clauses: 85
% SAT solver learnt clauses: 8
% SAT solver learnt literals: 17
% 
% Sat splits: 39
% Sat splitting refutations: 38
% 
% TWLsolver clauses: 1018
% TWLsolver calls for satisfiability: 557
% 
% Memory used [KB]: 8443
% Time elapsed: 0.591 s
% ------------------------------
% ------------------------------
% Success in time 1.23 s
