Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.typeSysProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.typeSysProps
% SZS output start Proof for thm.typeSysProps
fof(f6380,plain,(
  $false),
  inference(trivial_inequality_removal,[],[f6331])).
fof(f6331,plain,(
  s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),sK2),s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),sK3),s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),sK4))))) != s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),sK2),s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),sK3),s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),sK4)))))),
  inference(superposition,[],[f76,f110])).
fof(f110,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),X2),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),X3),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),X4))))) = s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),X2),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),X3))),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),X4)))) )),
  inference(cnf_transformation,[],[f48])).
fof(f48,plain,(
  ! [X0,X1,X2,X3,X4] : s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),X2),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),X3),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),X4))))) = s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),X2),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),X3))),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),X4)))),
  inference(flattening,[],[f47])).
fof(f47,plain,(
  ! [X0,X1] : ! [X2,X3,X4] : s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),X2),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),X3),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),X4))))) = s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),X2),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),X3))),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),X4)))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6,X7] : ! [X11,X12,X13] : s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),X11),s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),X12),s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),X13))))) = s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),X11),s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),X12))),s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),X13)))),
  file('thm.typeSysProps.merge_tenvC_assoc','thm.evalProps.merge_alist_mod_env_assoc')).
fof(f76,plain,(
  s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),sK2),s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),sK3))),s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),sK4))) != s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),sK2),s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),sK3),s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),sK4)))))),
  inference(cnf_transformation,[],[f55])).
fof(f55,plain,(
  s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),sK2),s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),sK3))),s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),sK4))) != s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),sK2),s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),sK3),s('type.pair.prod'('type.list.list'(sK0),'type.list.list'(sK1)),sK4)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4])],[f53])).
fof(f53,plain,(
  ? [X0,X1,X2,X3,X4] : s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),X2),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),X3),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),X4))))) != s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),X2),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),X3))),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),X4)))),
  inference(ennf_transformation,[],[f24])).
fof(f24,plain,(
  ~! [X0,X1,X2,X3,X4] : s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),X2),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),X3),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),X4))))) = s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),X2),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),X3))),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),X4)))),
  inference(flattening,[],[f23])).
fof(f23,plain,(
  ~! [X0,X1] : ! [X2,X3,X4] : s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),X2),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),X3),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),X4))))) = s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),X2),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),X3))),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X1)),X4)))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9,X10] : s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),X8),s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),X9),s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),X10))))) = s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),X8),s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),X9))),s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),X10)))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9,X10] : s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),X8),s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),X9),s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),X10))))) = s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),'const.semanticPrimitives.merge_alist_mod_env_2'(s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),X8),s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),X9))),s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X7)),X10)))),
  file('thm.typeSysProps.merge_tenvC_assoc','thm.typeSysProps.merge_tenvC_assoc')).
% SZS output end Proof for thm.typeSysProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 74
% Passive clauses: 914
% Generated clauses: 6134
% Final active clauses: 67
% Final passive clauses: 789
% Input formulas: 21
% Initial clauses: 39
% 
% Duplicate literals: 416
% Trivial inequalities: 122
% Fw subsumption resolutions: 526
% Fw demodulations: 379
% Bw demodulations: 5
% 
% Simple tautologies: 207
% Equational tautologies: 33
% Forward subsumptions: 3231
% Fw demodulations to eq. taut.: 2
% 
% Binary resolution: 16
% Forward superposition: 2380
% Backward superposition: 1957
% Self superposition: 128
% Equality factoring: 62
% Equality resolution: 32
% 
% Split clauses: 171
% Split components: 342
% SAT solver clauses: 295
% SAT solver unit clauses: 33
% SAT solver binary clauses: 135
% 
% Sat splits: 171
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 295
% TWLsolver calls for satisfiability: 31
% 
% Memory used [KB]: 4477
% Time elapsed: 0.199 s
% ------------------------------
% ------------------------------
% Success in time 0.22 s
